{
    "docinfo": {
        "attributes": [],
        "behavior": {
            "Base64 Strings": "Base64-encoded str were detected, may be used to obfuscate str",
            "Hex Strings": "Hex-encoded str were detected, may be used to obfuscate str"
        },
        "macro": "var base64encodechars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\nvar base64decodechars = new Array(\n-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 62, -1, -1, -1, 63,\n52, 53, 54, 55, 56, 57, 58, 59, 60, 61, -1, -1, -1, -1, -1, -1,\n-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14,\n15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, -1, -1, -1, -1, -1,\n-1, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,\n41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, -1, -1, -1, -1, -1);\n\nfunction base64encode(str) {\n\tvar out, i, len;\n\tvar c1, c2, c3;\n\tlen = str.length;\n\ti = 0;\n\tout = \"\";\n\twhile (i < len) {\n\t\tc1 = str.charCodeAt(i++) & 0xff;\n\t\tif (i == len) {\n\t\t\tout += base64encodechars.charAt(c1 >> 2);\n\t\t\tout += base64encodechars.charAt((c1 & 0x3) << 4);\n\t\t\tout += \"==\";\n\t\t\tbreak;\n\t\t}\n\t\tc2 = str.charCodeAt(i++);\n\t\tif (i == len) {\n\t\t\tout += base64encodechars.charAt(c1 >> 2);\n\t\t\tout += base64encodechars.charAt(((c1 & 0x3) << 4) | ((c2 & 0xf0) >> 4));\n\t\t\tout += base64encodechars.charAt((c2 & 0xf) << 2);\n\t\t\tout += \"=\";\n\t\t\tbreak;\n\t\t}\n\t\tc3 = str.charCodeAt(i++);\n\t\tout += base64encodechars.charAt(c1 >> 2);\n\t\tout += base64encodechars.charAt(((c1 & 0x3) << 4) | ((c2 & 0xf0) >> 4));\n\t\tout += base64encodechars.charAt(((c2 & 0xf) << 2) | ((c3 & 0xc0) >> 6));\n\t\tout += base64encodechars.charAt(c3 & 0x3f);\n\t}\n\treturn out;\n}\nfunction base64decode(str) {\n\tvar c1, c2, c3, c4;\n\tvar i, len, out;\n\n\tlen = str.length;\n\ti = 0;\n\tout = \"\";\n\twhile (i < len) {\n\t\tdo {\n\t\t\tc1 = base64decodechars[str.charCodeAt(i++) & 0xff];\n\t\t} while (i < len && c1 == -1);\n\t\tif (c1 == -1)\n\t\t\tbreak;\n\t\tdo {\n\t\t\tc2 = base64decodechars[str.charCodeAt(i++) & 0xff];\n\t\t} while (i < len && c2 == -1);\n\t\tif (c2 == -1)\n\t\t\tbreak;\n\t\tout += String.fromCharCode((c1 << 2) | ((c2 & 0x30) >> 4));\n\t\tdo {\n\t\t\tc3 = str.charCodeAt(i++) & 0xff;\n\t\t\tif (c3 == 61)\n\t\t\t\treturn out;\n\t\t\tc3 = base64decodechars[c3];\n\t\t} while (i < len && c3 == -1);\n\t\tif (c3 == -1)\n\t\t\tbreak;\n\n\t\tout += String.fromCharCode(((c2 & 0xf) << 4) | ((c3 & 0x3c) >> 2));\n\t\tdo {\n\t\t\tc4 = str.charCodeAt(i++) & 0xff;\n\t\t\tif (c4 == 61)\n\t\t\t\treturn out;\n\t\t\tc4 = base64decodechars[c4];\n\t\t} while (i < len && c4 == -1);\n\t\tif (c4 == -1)\n\t\t\tbreak;\n\t\tout += String.fromCharCode(((c3 & 0x03) << 6) | c4);\n\t}\n\treturn out;\n}\n\nfunction utf16to8(str) {\n\tvar out, i, len, c;\n\tout = \"\";\n\tlen = str.length;\n\tfor (i = 0; i < len; i++) {\n\t\tc = str.charCodeAt(i);\n\t\tif ((c >= 0x0001) && (c <= 0x007f)) {\n\t\t\tout += str.charAt(i);\n\t\t} else if (c > 0x07ff) {\n\t\t\tout += String.fromCharCode(0xe0 | ((c >> 12) & 0x0f));\n\t\t\tout += String.fromCharCode(0x80 | ((c >> 6) & 0x3f));\n\t\t\tout += String.fromCharCode(0x80 | ((c >> 0) & 0x3f));\n\t\t} else {\n\t\t\tout += String.fromCharCode(0xc0 | ((c >> 6) & 0x1f));\n\t\t\tout += String.fromCharCode(0x80 | ((c >> 0) & 0x3f));\n\t\t}\n\t}\n\treturn out;\n}\n\nfunction utf8to16(str) {\n\tvar out, i, len, c;\n\tvar char2, char3;\n\n\tout = \"\";\n\tlen = str.length;\n\ti = 0;\n\twhile (i < len) {\n\t\tc = str.charCodeAt(i++);\n\t\tswitch (c >> 4) {\n\t\t\tcase 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7:\n\t\t\t\t// 0xxxxxxx\n\t\t\t\tout += str.charAt(i - 1);\n\t\t\t\tbreak;\n\t\t\tcase 12: case 13:\n\t\t\t\t// 110x xxxx   10xx xxxx\n\t\t\t\tchar2 = str.charCodeAt(i++);\n\t\t\t\tout += String.fromCharCode(((c & 0x1f) << 6) | (char2 & 0x3f));\n\t\t\t\tbreak;\n\t\t\tcase 14:\n\t\t\t\t// 1110 xxxx  10xx xxxx  10xx xxxx\n\t\t\t\tchar2 = str.charCodeAt(i++);\n\t\t\t\tchar3 = str.charCodeAt(i++);\n\t\t\t\tout += String.fromCharCode(((c & 0x0f) << 12) |\n\t\t\t\t   ((char2 & 0x3f) << 6) |\n\t\t\t\t   ((char3 & 0x3f) << 0));\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\treturn out;\n}"
    },
    "filename": "VirusShare_df49d132bf9b142f5c099f3adeda5039",
    "filesize": 3637,
    "filetype": "ASCII text",
    "hashes": {
        "md5": "df49d132bf9b142f5c099f3adeda5039",
        "sha1": "15645b9dd91fead3c90ec0e5ce3cd2a8aea1fd2a",
        "sha256": "717a4fa801842cffdbd8724e85545bf292580f704447fcb0dad6869dc68e9c34"
    },
    "peinfo": {},
    "strings": {
        "dump": [
            "var base64encodechars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";",
            "var base64decodechars = new Array(",
            "-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,",
            "-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,",
            "-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 62, -1, -1, -1, 63,",
            "52, 53, 54, 55, 56, 57, 58, 59, 60, 61, -1, -1, -1, -1, -1, -1,",
            "-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14,",
            "15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, -1, -1, -1, -1, -1,",
            "-1, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,",
            "41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, -1, -1, -1, -1, -1);",
            "function base64encode(str) {",
            "\tvar out, i, len;",
            "\tvar c1, c2, c3;",
            "\tlen = str.length;",
            "\ti = 0;",
            "\tout = \"\";",
            "\twhile (i < len) {",
            "\t\tc1 = str.charCodeAt(i++) & 0xff;",
            "\t\tif (i == len) {",
            "\t\t\tout += base64encodechars.charAt(c1 >> 2);",
            "\t\t\tout += base64encodechars.charAt((c1 & 0x3) << 4);",
            "\t\t\tout += \"==\";",
            "\t\t\tbreak;",
            "\t\tc2 = str.charCodeAt(i++);",
            "\t\tif (i == len) {",
            "\t\t\tout += base64encodechars.charAt(c1 >> 2);",
            "\t\t\tout += base64encodechars.charAt(((c1 & 0x3) << 4) | ((c2 & 0xf0) >> 4));",
            "\t\t\tout += base64encodechars.charAt((c2 & 0xf) << 2);",
            "\t\t\tout += \"=\";",
            "\t\t\tbreak;",
            "\t\tc3 = str.charCodeAt(i++);",
            "\t\tout += base64encodechars.charAt(c1 >> 2);",
            "\t\tout += base64encodechars.charAt(((c1 & 0x3) << 4) | ((c2 & 0xf0) >> 4));",
            "\t\tout += base64encodechars.charAt(((c2 & 0xf) << 2) | ((c3 & 0xc0) >> 6));",
            "\t\tout += base64encodechars.charAt(c3 & 0x3f);",
            "\treturn out;",
            "function base64decode(str) {",
            "\tvar c1, c2, c3, c4;",
            "\tvar i, len, out;",
            "\tlen = str.length;",
            "\ti = 0;",
            "\tout = \"\";",
            "\twhile (i < len) {",
            "\t\tdo {",
            "\t\t\tc1 = base64decodechars[str.charCodeAt(i++) & 0xff];",
            "\t\t} while (i < len && c1 == -1);",
            "\t\tif (c1 == -1)",
            "\t\t\tbreak;",
            "\t\tdo {",
            "\t\t\tc2 = base64decodechars[str.charCodeAt(i++) & 0xff];",
            "\t\t} while (i < len && c2 == -1);",
            "\t\tif (c2 == -1)",
            "\t\t\tbreak;",
            "\t\tout += String.fromCharCode((c1 << 2) | ((c2 & 0x30) >> 4));",
            "\t\tdo {",
            "\t\t\tc3 = str.charCodeAt(i++) & 0xff;",
            "\t\t\tif (c3 == 61)",
            "\t\t\t\treturn out;",
            "\t\t\tc3 = base64decodechars[c3];",
            "\t\t} while (i < len && c3 == -1);",
            "\t\tif (c3 == -1)",
            "\t\t\tbreak;",
            "\t\tout += String.fromCharCode(((c2 & 0xf) << 4) | ((c3 & 0x3c) >> 2));",
            "\t\tdo {",
            "\t\t\tc4 = str.charCodeAt(i++) & 0xff;",
            "\t\t\tif (c4 == 61)",
            "\t\t\t\treturn out;",
            "\t\t\tc4 = base64decodechars[c4];",
            "\t\t} while (i < len && c4 == -1);",
            "\t\tif (c4 == -1)",
            "\t\t\tbreak;",
            "\t\tout += String.fromCharCode(((c3 & 0x03) << 6) | c4);",
            "\treturn out;",
            "function utf16to8(str) {",
            "\tvar out, i, len, c;",
            "\tout = \"\";",
            "\tlen = str.length;",
            "\tfor (i = 0; i < len; i++) {",
            "\t\tc = str.charCodeAt(i);",
            "\t\tif ((c >= 0x0001) && (c <= 0x007f)) {",
            "\t\t\tout += str.charAt(i);",
            "\t\t} else if (c > 0x07ff) {",
            "\t\t\tout += String.fromCharCode(0xe0 | ((c >> 12) & 0x0f));",
            "\t\t\tout += String.fromCharCode(0x80 | ((c >> 6) & 0x3f));",
            "\t\t\tout += String.fromCharCode(0x80 | ((c >> 0) & 0x3f));",
            "\t\t} else {",
            "\t\t\tout += String.fromCharCode(0xc0 | ((c >> 6) & 0x1f));",
            "\t\t\tout += String.fromCharCode(0x80 | ((c >> 0) & 0x3f));",
            "\treturn out;",
            "function utf8to16(str) {",
            "\tvar out, i, len, c;",
            "\tvar char2, char3;",
            "\tout = \"\";",
            "\tlen = str.length;",
            "\ti = 0;",
            "\twhile (i < len) {",
            "\t\tc = str.charCodeAt(i++);",
            "\t\tswitch (c >> 4) {",
            "\t\t\tcase 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7:",
            "\t\t\t\t// 0xxxxxxx",
            "\t\t\t\tout += str.charAt(i - 1);",
            "\t\t\t\tbreak;",
            "\t\t\tcase 12: case 13:",
            "\t\t\t\t// 110x xxxx   10xx xxxx",
            "\t\t\t\tchar2 = str.charCodeAt(i++);",
            "\t\t\t\tout += String.fromCharCode(((c & 0x1f) << 6) | (char2 & 0x3f));",
            "\t\t\t\tbreak;",
            "\t\t\tcase 14:",
            "\t\t\t\t// 1110 xxxx  10xx xxxx  10xx xxxx",
            "\t\t\t\tchar2 = str.charCodeAt(i++);",
            "\t\t\t\tchar3 = str.charCodeAt(i++);",
            "\t\t\t\tout += String.fromCharCode(((c & 0x0f) << 12) |",
            "\t\t\t\t   ((char2 & 0x3f) << 6) |",
            "\t\t\t\t   ((char3 & 0x3f) << 0));",
            "\t\t\t\tbreak;",
            "\treturn out;"
        ],
        "file": {},
        "fuzzing": {},
        "ip": [],
        "url": []
    },
    "time": "0:00:00.285122",
    "version": "6.0.3",
    "virustotal": {
        "positives": "",
        "total": ""
    },
    "yara_plugins": []
}
