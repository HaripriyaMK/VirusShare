{
    "docinfo": {},
    "filename": "VirusShare_0659cc60b10f76184d538f915b811c5c",
    "filesize": 958464,
    "filetype": "PE32 executable (GUI) Intel 80386, for MS Windows",
    "hashes": {
        "md5": "0659cc60b10f76184d538f915b811c5c",
        "sha1": "30232359c28c7962474829fd8dda53df3bb377ae",
        "sha256": "43cd02991cd6438e8c8fd8848a55f7f87421b19353fef6194c5f49b078490c15"
    },
    "peinfo": {
        "behavior": [
            "DebuggerException__ConsoleCtrl",
            "ThreadControl__Context",
            "Check_OutputDebugStringA_iat",
            "anti_dbg",
            "Xor",
            "network_udp_sock",
            "network_tcp_listen",
            "network_tcp_socket",
            "network_dns",
            "win_files_operation"
        ],
        "breakpoint": [
            "CloseHandle",
            "CreateFileA",
            "CreateProcessA",
            "CreateThread",
            "DeleteFileA",
            "FindFirstFileA",
            "FindNextFileA",
            "GetCommandLineA",
            "GetCurrentProcess",
            "GetCurrentProcessId",
            "GetFileAttributesA",
            "GetFileSize",
            "GetModuleFileNameA",
            "GetModuleHandleA",
            "GetProcAddress",
            "GetStartupInfoA",
            "GetTempFileNameA",
            "GetTempPathA",
            "GetThreadContext",
            "GetUserNameA",
            "GetVersionExA",
            "LoadLibraryA",
            "LoadLibraryExA",
            "OpenProcess",
            "OutputDebugStringA",
            "ReadFile",
            "Sleep",
            "TerminateProcess",
            "VirtualFree",
            "VirtualProtect",
            "WSAStartup",
            "WaitForSingleObject",
            "WriteFile",
            "accept",
            "bind",
            "closesocket",
            "connect",
            "listen",
            "recv",
            "recvfrom",
            "send",
            "sendto",
            "socket"
        ],
        "directories": {
            "debug": {},
            "export": [
                {
                    "function": "GetCurrentThreadHandle",
                    "offset": 4208874
                },
                {
                    "function": "Init_Array",
                    "offset": 4226394
                },
                {
                    "function": "Init_Bignum",
                    "offset": 4242619
                },
                {
                    "function": "Init_Binding",
                    "offset": 4319365
                },
                {
                    "function": "Init_Comparable",
                    "offset": 4249568
                },
                {
                    "function": "Init_Dir",
                    "offset": 4253197
                },
                {
                    "function": "Init_Enumerable",
                    "offset": 4257515
                },
                {
                    "function": "Init_Exception",
                    "offset": 4261313
                },
                {
                    "function": "Init_File",
                    "offset": 4336376
                },
                {
                    "function": "Init_GC",
                    "offset": 4350861
                },
                {
                    "function": "Init_Hash",
                    "offset": 4353881
                },
                {
                    "function": "Init_IO",
                    "offset": 4369591
                },
                {
                    "function": "Init_Math",
                    "offset": 4392884
                },
                {
                    "function": "Init_Numeric",
                    "offset": 4396014
                },
                {
                    "function": "Init_Object",
                    "offset": 4410484
                },
                {
                    "function": "Init_Precision",
                    "offset": 4459902
                },
                {
                    "function": "Init_Proc",
                    "offset": 4315968
                },
                {
                    "function": "Init_Random",
                    "offset": 4466066
                },
                {
                    "function": "Init_Range",
                    "offset": 4467484
                },
                {
                    "function": "Init_Regexp",
                    "offset": 4475296
                },
                {
                    "function": "Init_String",
                    "offset": 4533449
                },
                {
                    "function": "Init_Struct",
                    "offset": 4548617
                },
                {
                    "function": "Init_Thread",
                    "offset": 4328823
                },
                {
                    "function": "Init_Time",
                    "offset": 4551170
                },
                {
                    "function": "Init_eval",
                    "offset": 4306302
                },
                {
                    "function": "Init_ext",
                    "offset": 4572060
                },
                {
                    "function": "Init_heap",
                    "offset": 4350147
                },
                {
                    "function": "Init_load",
                    "offset": 4311148
                },
                {
                    "function": "Init_marshal",
                    "offset": 4384957
                },
                {
                    "function": "Init_pack",
                    "offset": 4416668
                },
                {
                    "function": "Init_process",
                    "offset": 4461364
                },
                {
                    "function": "Init_signal",
                    "offset": 4518315
                },
                {
                    "function": "Init_stack",
                    "offset": 4350092
                },
                {
                    "function": "Init_sym",
                    "offset": 4458537
                },
                {
                    "function": "Init_syserr",
                    "offset": 4265401
                },
                {
                    "function": "Init_var_tables",
                    "offset": 4561988
                },
                {
                    "function": "Init_version",
                    "offset": 4570475
                },
                {
                    "function": "NtInitialize",
                    "offset": 4209468
                },
                {
                    "function": "NtSyncProcess",
                    "offset": 4660000
                },
                {
                    "function": "SafeFree",
                    "offset": 4209592
                },
                {
                    "function": "Win32System",
                    "offset": 4660632
                },
                {
                    "function": "acosh",
                    "offset": 4206766
                },
                {
                    "function": "asinh",
                    "offset": 4206881
                },
                {
                    "function": "atanh",
                    "offset": 4207054
                },
                {
                    "function": "chown",
                    "offset": 4214619
                },
                {
                    "function": "crypt",
                    "offset": 4207766
                },
                {
                    "function": "definekey",
                    "offset": 4207179
                },
                {
                    "function": "dln_find_exe",
                    "offset": 4256645
                },
                {
                    "function": "dln_find_file",
                    "offset": 4256689
                },
                {
                    "function": "dln_load",
                    "offset": 4256229
                },
                {
                    "function": "do_aspawn",
                    "offset": 4210564
                },
                {
                    "function": "do_spawn",
                    "offset": 4210418
                },
                {
                    "function": "eaccess",
                    "offset": 4333464
                },
                {
                    "function": "encrypt",
                    "offset": 4207280
                },
                {
                    "function": "endhostent",
                    "offset": 4572060
                },
                {
                    "function": "endnetent",
                    "offset": 4572060
                },
                {
                    "function": "endprotoent",
                    "offset": 4572060
                },
                {
                    "function": "endservent",
                    "offset": 4572060
                },
                {
                    "function": "erf",
                    "offset": 4208125
                },
                {
                    "function": "erfc",
                    "offset": 4208735
                },
                {
                    "function": "exerb_add_plugin_function",
                    "offset": 4205383
                },
                {
                    "function": "exerb_find_plugin_function",
                    "offset": 4205449
                },
                {
                    "function": "exerb_has_plugin_function",
                    "offset": 4205525
                },
                {
                    "function": "exerb_main",
                    "offset": 4198400
                },
                {
                    "function": "flock",
                    "offset": 4208937
                },
                {
                    "function": "getegid",
                    "offset": 4214619
                },
                {
                    "function": "geteuid",
                    "offset": 4214619
                },
                {
                    "function": "getgid",
                    "offset": 4214619
                },
                {
                    "function": "getlogin",
                    "offset": 4209479
                },
                {
                    "function": "getnetbyaddr",
                    "offset": 4214619
                },
                {
                    "function": "getnetbyname",
                    "offset": 4214619
                },
                {
                    "function": "getnetent",
                    "offset": 4214619
                },
                {
                    "function": "getprotoent",
                    "offset": 4214619
                },
                {
                    "function": "getservent",
                    "offset": 4214619
                },
                {
                    "function": "gettimeofday",
                    "offset": 4217728
                },
                {
                    "function": "getuid",
                    "offset": 4214619
                },
                {
                    "function": "io_fread",
                    "offset": 4363493
                },
                {
                    "function": "ioctl",
                    "offset": 4214631
                },
                {
                    "function": "is_ruby_native_thread",
                    "offset": 4269063
                },
                {
                    "function": "kill",
                    "offset": 4217899
                },
                {
                    "function": "link",
                    "offset": 4218295
                },
                {
                    "function": "mark_hash",
                    "offset": 4346811
                },
                {
                    "function": "mark_tbl",
                    "offset": 4346750
                },
                {
                    "function": "pipe_exec",
                    "offset": 4209618
                },
                {
                    "function": "rb_Array",
                    "offset": 4274383
                },
                {
                    "function": "rb_Float",
                    "offset": 4410057
                },
                {
                    "function": "rb_Integer",
                    "offset": 4409103
                },
                {
                    "function": "rb_String",
                    "offset": 4410459
                },
                {
                    "function": "rb_add_method",
                    "offset": 4266880
                },
                {
                    "function": "rb_alias",
                    "offset": 4273873
                },
                {
                    "function": "rb_alias_variable",
                    "offset": 4564941
                },
                {
                    "function": "rb_any_to_s",
                    "offset": 4407210
                },
                {
                    "function": "rb_apply",
                    "offset": 4299058
                },
                {
                    "function": "rb_argv",
                    "offset": 4764532
                },
                {
                    "function": "rb_argv0",
                    "offset": 4764540
                },
                {
                    "function": "rb_ary_aref",
                    "offset": 4223040
                },
                {
                    "function": "rb_ary_assoc",
                    "offset": 4225983
                },
                {
                    "function": "rb_ary_clear",
                    "offset": 4225414
                },
                {
                    "function": "rb_ary_cmp",
                    "offset": 4226238
                },
                {
                    "function": "rb_ary_concat",
                    "offset": 4225583
                },
                {
                    "function": "rb_ary_delete",
                    "offset": 4225179
                },
                {
                    "function": "rb_ary_delete_at",
                    "offset": 4225335
                },
                {
                    "function": "rb_ary_dup",
                    "offset": 4223558
                },
                {
                    "function": "rb_ary_each",
                    "offset": 4223522
                },
                {
                    "function": "rb_ary_entry",
                    "offset": 4222999
                },
                {
                    "function": "rb_ary_freeze",
                    "offset": 4352259
                },
                {
                    "function": "rb_ary_includes",
                    "offset": 4226188
                },
                {
                    "function": "rb_ary_join",
                    "offset": 4223699
                },
                {
                    "function": "rb_ary_new",
                    "offset": 4222003
                },
                {
                    "function": "rb_ary_new2",
                    "offset": 4221834
                },
                {
                    "function": "rb_ary_new3",
                    "offset": 4222012
                },
                {
                    "function": "rb_ary_new4",
                    "offset": 4222060
                },
                {
                    "function": "rb_ary_plus",
                    "offset": 4225465
                },
                {
                    "function": "rb_ary_pop",
                    "offset": 4222610
                },
                {
                    "function": "rb_ary_push",
                    "offset": 4222585
                },
                {
                    "function": "rb_ary_rassoc",
                    "offset": 4226085
                },
                {
                    "function": "rb_ary_reverse",
                    "offset": 4224528
                },
                {
                    "function": "rb_ary_shift",
                    "offset": 4222711
                },
                {
                    "function": "rb_ary_sort",
                    "offset": 4225003
                },
                {
                    "function": "rb_ary_sort_bang",
                    "offset": 4224583
                },
                {
                    "function": "rb_ary_store",
                    "offset": 4222175
                },
                {
                    "function": "rb_ary_to_ary",
                    "offset": 4223416
                },
                {
                    "function": "rb_ary_to_s",
                    "offset": 4224163
                },
                {
                    "function": "rb_ary_unshift",
                    "offset": 4222903
                },
                {
                    "function": "rb_assoc_new",
                    "offset": 4222115
                },
                {
                    "function": "rb_attr",
                    "offset": 4268537
                },
                {
                    "function": "rb_attr_get",
                    "offset": 4565779
                },
                {
                    "function": "rb_autoload",
                    "offset": 4567086
                },
                {
                    "function": "rb_autoload_load",
                    "offset": 4567449
                },
                {
                    "function": "rb_autoload_p",
                    "offset": 4567708
                },
                {
                    "function": "rb_backref_get",
                    "offset": 4459756
                },
                {
                    "function": "rb_backref_set",
                    "offset": 4459775
                },
                {
                    "function": "rb_backtrace",
                    "offset": 4299842
                },
                {
                    "function": "rb_big2dbl",
                    "offset": 4237865
                },
                {
                    "function": "rb_big2ll",
                    "offset": 4237479
                },
                {
                    "function": "rb_big2long",
                    "offset": 4237299
                },
                {
                    "function": "rb_big2str",
                    "offset": 4236511
                },
                {
                    "function": "rb_big2ull",
                    "offset": 4237360
                },
                {
                    "function": "rb_big2ulong",
                    "offset": 4237251
                },
                {
                    "function": "rb_big2ulong_pack",
                    "offset": 4237132
                },
                {
                    "function": "rb_big_2comp",
                    "offset": 4234066
                },
                {
                    "function": "rb_big_and",
                    "offset": 4240797
                },
                {
                    "function": "rb_big_clone",
                    "offset": 4233878
                },
                {
                    "function": "rb_big_divmod",
                    "offset": 4239126
                },
                {
                    "function": "rb_big_lshift",
                    "offset": 4241912
                },
                {
                    "function": "rb_big_minus",
                    "offset": 4238642
                },
                {
                    "function": "rb_big_mul",
                    "offset": 4238767
                },
                {
                    "function": "rb_big_norm",
                    "offset": 4234208
                },
                {
                    "function": "rb_big_or",
                    "offset": 4241162
                },
                {
                    "function": "rb_big_plus",
                    "offset": 4238009
                },
                {
                    "function": "rb_big_pow",
                    "offset": 4240572
                },
                {
                    "function": "rb_big_rand",
                    "offset": 4242402
                },
                {
                    "function": "rb_big_xor",
                    "offset": 4241532
                },
                {
                    "function": "rb_block_given_p",
                    "offset": 4290418
                },
                {
                    "function": "rb_block_proc",
                    "offset": 4312417
                },
                {
                    "function": "rb_bug",
                    "offset": 4260723
                },
                {
                    "function": "rb_cArray",
                    "offset": 4764884
                },
                {
                    "function": "rb_cBignum",
                    "offset": 4764880
                },
                {
                    "function": "rb_cClass",
                    "offset": 4764608
                },
                {
                    "function": "rb_cData",
                    "offset": 4764604
                },
                {
                    "function": "rb_cDir",
                    "offset": 4764872
                },
                {
                    "function": "rb_cFalseClass",
                    "offset": 4764632
                },
                {
                    "function": "rb_cFile",
                    "offset": 4764724
                },
                {
                    "function": "rb_cFixnum",
                    "offset": 4764652
                },
                {
                    "function": "rb_cFloat",
                    "offset": 4764644
                },
                {
                    "function": "rb_cHash",
                    "offset": 4764716
                },
                {
                    "function": "rb_cIO",
                    "offset": 4764688
                },
                {
                    "function": "rb_cInteger",
                    "offset": 4764656
                },
                {
                    "function": "rb_cModule",
                    "offset": 4764620
                },
                {
                    "function": "rb_cNilClass",
                    "offset": 4764616
                },
                {
                    "function": "rb_cNumeric",
                    "offset": 4764660
                },
                {
                    "function": "rb_cObject",
                    "offset": 4764612
                },
                {
                    "function": "rb_cProc",
                    "offset": 4764740
                },
                {
                    "function": "rb_cRange",
                    "offset": 4764552
                },
                {
                    "function": "rb_cRegexp",
                    "offset": 4764548
                },
                {
                    "function": "rb_cString",
                    "offset": 4764520
                },
                {
                    "function": "rb_cStruct",
                    "offset": 4764512
                },
                {
                    "function": "rb_cSymbol",
                    "offset": 4764624
                },
                {
                    "function": "rb_cThread",
                    "offset": 4764776
                },
                {
                    "function": "rb_cTime",
                    "offset": 4764508
                },
                {
                    "function": "rb_cTrueClass",
                    "offset": 4764640
                },
                {
                    "function": "rb_call_inits",
                    "offset": 4361778
                },
                {
                    "function": "rb_call_super",
                    "offset": 4299729
                },
                {
                    "function": "rb_catch",
                    "offset": 4332888
                },
                {
                    "function": "rb_check_array_type",
                    "offset": 4222150
                },
                {
                    "function": "rb_check_convert_type",
                    "offset": 4408822
                },
                {
                    "function": "rb_check_frozen",
                    "offset": 4265355
                },
                {
                    "function": "rb_check_inheritable",
                    "offset": 4245801
                },
                {
                    "function": "rb_check_safe_obj",
                    "offset": 4266633
                },
                {
                    "function": "rb_check_safe_str",
                    "offset": 4266733
                },
                {
                    "function": "rb_check_string_type",
                    "offset": 4528557
                },
                {
                    "function": "rb_check_type",
                    "offset": 4260878
                },
                {
                    "function": "rb_class2name",
                    "offset": 4563421
                },
                {
                    "function": "rb_class_boot",
                    "offset": 4244708
                },
                {
                    "function": "rb_class_inherited",
                    "offset": 4245892
                },
                {
                    "function": "rb_class_inherited_p",
                    "offset": 4407970
                },
                {
                    "function": "rb_class_init_copy",
                    "offset": 4245303
                },
                {
                    "function": "rb_class_instance_methods",
                    "offset": 4247442
                },
                {
                    "function": "rb_class_name",
                    "offset": 4563403
                },
                {
                    "function": "rb_class_new",
                    "offset": 4244820
                },
                {
                    "function": "rb_class_new_instance",
                    "offset": 4408291
                },
                {
                    "function": "rb_class_path",
                    "offset": 4562813
                },
                {
                    "function": "rb_class_private_instance_methods",
                    "offset": 4247850
                },
                {
                    "function": "rb_class_protected_instance_methods",
                    "offset": 4247801
                },
                {
                    "function": "rb_class_public_instance_methods",
                    "offset": 4247899
                },
                {
                    "function": "rb_class_real",
                    "offset": 4406343
                },
                {
                    "function": "rb_class_tbl",
                    "offset": 4764504
                },
                {
                    "function": "rb_clear_cache",
                    "offset": 4266810
                },
                {
                    "function": "rb_clear_cache_by_class",
                    "offset": 4266838
                },
                {
                    "function": "rb_cmperr",
                    "offset": 4249495
                },
                {
                    "function": "rb_cmpint",
                    "offset": 4249371
                },
                {
                    "function": "rb_compile_cstr",
                    "offset": 4439743
                },
                {
                    "function": "rb_compile_error",
                    "offset": 4260279
                },
                {
                    "function": "rb_compile_error_append",
                    "offset": 4260471
                },
                {
                    "function": "rb_compile_file",
                    "offset": 4439776
                },
                {
                    "function": "rb_compile_string",
                    "offset": 4439148
                },
                {
                    "function": "rb_const_defined",
                    "offset": 4568928
                },
                {
                    "function": "rb_const_defined_at",
                    "offset": 4568949
                },
                {
                    "function": "rb_const_defined_from",
                    "offset": 4568780
                },
                {
                    "function": "rb_const_get",
                    "offset": 4568203
                },
                {
                    "function": "rb_const_get_at",
                    "offset": 4568224
                },
                {
                    "function": "rb_const_get_from",
                    "offset": 4567987
                },
                {
                    "function": "rb_const_list",
                    "offset": 4568673
                },
                {
                    "function": "rb_const_set",
                    "offset": 4568970
                },
                {
                    "function": "rb_convert_type",
                    "offset": 4408517
                },
                {
                    "function": "rb_copy_generic_ivar",
                    "offset": 4565370
                },
                {
                    "function": "rb_cstr2inum",
                    "offset": 4236457
                },
                {
                    "function": "rb_cstr_to_dbl",
                    "offset": 4409287
                },
                {
                    "function": "rb_cstr_to_inum",
                    "offset": 4234843
                },
                {
                    "function": "rb_cv_get",
                    "offset": 4569944
                },
                {
                    "function": "rb_cv_set",
                    "offset": 4569884
                },
                {
                    "function": "rb_cvar_defined",
                    "offset": 4569835
                },
                {
                    "function": "rb_cvar_get",
                    "offset": 4569731
                },
                {
                    "function": "rb_cvar_set",
                    "offset": 4569335
                },
                {
                    "function": "rb_data_object_alloc",
                    "offset": 4346315
                },
                {
                    "function": "rb_dbl2big",
                    "offset": 4237555
                },
                {
                    "function": "rb_dbl_cmp",
                    "offset": 4395145
                },
                {
                    "function": "rb_default_rs",
                    "offset": 4764700
                },
                {
                    "function": "rb_deferr",
                    "offset": 4764672
                },
                {
                    "function": "rb_define_alias",
                    "offset": 4248871
                },
                {
                    "function": "rb_define_alloc_func",
                    "offset": 4267363
                },
                {
                    "function": "rb_define_attr",
                    "offset": 4248906
                },
                {
                    "function": "rb_define_class",
                    "offset": 4245936
                },
                {
                    "function": "rb_define_class_id",
                    "offset": 4245760
                },
                {
                    "function": "rb_define_class_under",
                    "offset": 4246156
                },
                {
                    "function": "rb_define_class_variable",
                    "offset": 4569997
                },
                {
                    "function": "rb_define_const",
                    "offset": 4569234
                },
                {
                    "function": "rb_define_global_const",
                    "offset": 4569312
                },
                {
                    "function": "rb_define_global_function",
                    "offset": 4248844
                },
                {
                    "function": "rb_define_hooked_variable",
                    "offset": 4563783
                },
                {
                    "function": "rb_define_method",
                    "offset": 4248293
                },
                {
                    "function": "rb_define_method_id",
                    "offset": 4248253
                },
                {
                    "function": "rb_define_module",
                    "offset": 4246460
                },
                {
                    "function": "rb_define_module_function",
                    "offset": 4248802
                },
                {
                    "function": "rb_define_module_id",
                    "offset": 4246436
                },
                {
                    "function": "rb_define_module_under",
                    "offset": 4246609
                },
                {
                    "function": "rb_define_private_method",
                    "offset": 4248391
                },
                {
                    "function": "rb_define_protected_method",
                    "offset": 4248344
                },
                {
                    "function": "rb_define_readonly_variable",
                    "offset": 4563983
                },
                {
                    "function": "rb_define_singleton_method",
                    "offset": 4248770
                },
                {
                    "function": "rb_define_variable",
                    "offset": 4563962
                },
                {
                    "function": "rb_define_virtual_variable",
                    "offset": 4564032
                },
                {
                    "function": "rb_detach_process",
                    "offset": 4460578
                },
                {
                    "function": "rb_disable_super",
                    "offset": 4572060
                },
                {
                    "function": "rb_dvar_curr",
                    "offset": 4268812
                },
                {
                    "function": "rb_dvar_defined",
                    "offset": 4268782
                },
                {
                    "function": "rb_dvar_push",
                    "offset": 4268877
                },
                {
                    "function": "rb_dvar_ref",
                    "offset": 4268846
                },
                {
                    "function": "rb_eArgError",
                    "offset": 4764848
                },
                {
                    "function": "rb_eEOFError",
                    "offset": 4764712
                },
                {
                    "function": "rb_eException",
                    "offset": 4764832
                },
                {
                    "function": "rb_eExerbRuntimeError",
                    "offset": 4700072
                },
                {
                    "function": "rb_eFatal",
                    "offset": 4764828
                },
                {
                    "function": "rb_eFloatDomainError",
                    "offset": 4764648
                },
                {
                    "function": "rb_eIOError",
                    "offset": 4764696
                },
                {
                    "function": "rb_eIndexError",
                    "offset": 4764816
                },
                {
                    "function": "rb_eInterrupt",
                    "offset": 4764824
                },
                {
                    "function": "rb_eLoadError",
                    "offset": 4764780
                },
                {
                    "function": "rb_eNameError",
                    "offset": 4764796
                },
                {
                    "function": "rb_eNoMemError",
                    "offset": 4764856
                },
                {
                    "function": "rb_eNoMethodError",
                    "offset": 4764804
                },
                {
                    "function": "rb_eNotImpError",
                    "offset": 4764836
                },
                {
                    "function": "rb_eRangeError",
                    "offset": 4764808
                },
                {
                    "function": "rb_eRuntimeError",
                    "offset": 4764844
                },
                {
                    "function": "rb_eScriptError",
                    "offset": 4764800
                },
                {
                    "function": "rb_eSecurityError",
                    "offset": 4764864
                },
                {
                    "function": "rb_eSignal",
                    "offset": 4764792
                },
                {
                    "function": "rb_eStandardError",
                    "offset": 4764840
                },
                {
                    "function": "rb_eSyntaxError",
                    "offset": 4764852
                },
                {
                    "function": "rb_eSystemCallError",
                    "offset": 4764820
                },
                {
                    "function": "rb_eSystemExit",
                    "offset": 4764860
                },
                {
                    "function": "rb_eTypeError",
                    "offset": 4764812
                },
                {
                    "function": "rb_eZeroDivError",
                    "offset": 4764664
                },
                {
                    "function": "rb_each",
                    "offset": 4257492
                },
                {
                    "function": "rb_enable_super",
                    "offset": 4268400
                },
                {
                    "function": "rb_ensure",
                    "offset": 4295107
                },
                {
                    "function": "rb_env_path_tainted",
                    "offset": 4353798
                },
                {
                    "function": "rb_eof_error",
                    "offset": 4361938
                },
                {
                    "function": "rb_eql",
                    "offset": 4406262
                },
                {
                    "function": "rb_equal",
                    "offset": 4406217
                },
                {
                    "function": "rb_error_frozen",
                    "offset": 4265335
                },
                {
                    "function": "rb_eval_cmd",
                    "offset": 4272330
                },
                {
                    "function": "rb_eval_string",
                    "offset": 4271779
                },
                {
                    "function": "rb_eval_string_protect",
                    "offset": 4271848
                },
                {
                    "function": "rb_eval_string_wrap",
                    "offset": 4271870
                },
                {
                    "function": "rb_exc_fatal",
                    "offset": 4290357
                },
                {
                    "function": "rb_exc_new",
                    "offset": 4261085
                },
                {
                    "function": "rb_exc_new2",
                    "offset": 4261128
                },
                {
                    "function": "rb_exc_new3",
                    "offset": 4261155
                },
                {
                    "function": "rb_exc_raise",
                    "offset": 4289798
                },
                {
                    "function": "rb_exec_end_proc",
                    "offset": 4305894
                },
                {
                    "function": "rb_exit",
                    "offset": 4289512
                },
                {
                    "function": "rb_extend_object",
                    "offset": 4305488
                },
                {
                    "function": "rb_f_abort",
                    "offset": 4289691
                },
                {
                    "function": "rb_f_exec",
                    "offset": 4460736
                },
                {
                    "function": "rb_f_exit",
                    "offset": 4289608
                },
                {
                    "function": "rb_f_global_variables",
                    "offset": 4564835
                },
                {
                    "function": "rb_f_kill",
                    "offset": 4517718
                },
                {
                    "function": "rb_f_lambda",
                    "offset": 4312863
                },
                {
                    "function": "rb_f_require",
                    "offset": 4304151
                },
                {
                    "function": "rb_f_sprintf",
                    "offset": 4519365
                },
                {
                    "function": "rb_f_trace_var",
                    "offset": 4564081
                },
                {
                    "function": "rb_f_untrace_var",
                    "offset": 4564290
                },
                {
                    "function": "rb_fatal",
                    "offset": 4264798
                },
                {
                    "function": "rb_fdopen",
                    "offset": 4366137
                },
                {
                    "function": "rb_file_const",
                    "offset": 4335314
                },
                {
                    "function": "rb_file_expand_path",
                    "offset": 4333783
                },
                {
                    "function": "rb_file_open",
                    "offset": 4366227
                },
                {
                    "function": "rb_file_s_expand_path",
                    "offset": 4335249
                },
                {
                    "function": "rb_file_sysopen",
                    "offset": 4366424
                },
                {
                    "function": "rb_find_file",
                    "offset": 4335899
                },
                {
                    "function": "rb_find_file_ext",
                    "offset": 4335398
                },
                {
                    "function": "rb_fix2int",
                    "offset": 4395518
                },
                {
                    "function": "rb_fix2str",
                    "offset": 4395892
                },
                {
                    "function": "rb_float_new",
                    "offset": 4395091
                },
                {
                    "function": "rb_fopen",
                    "offset": 4366063
                },
                {
                    "function": "rb_frame_last_func",
                    "offset": 4300253
                },
                {
                    "function": "rb_free_generic_ivar",
                    "offset": 4565329
                },
                {
                    "function": "rb_frozen_class_p",
                    "offset": 4273250
                },
                {
                    "function": "rb_fs",
                    "offset": 4764516
                },
                {
                    "function": "rb_funcall",
                    "offset": 4299195
                },
                {
                    "function": "rb_funcall2",
                    "offset": 4299551
                },
                {
                    "function": "rb_funcall3",
                    "offset": 4299640
                },
                {
                    "function": "rb_funcall_rescue",
                    "offset": 4299380
                },
                {
                    "function": "rb_gc",
                    "offset": 4350073
                },
                {
                    "function": "rb_gc_call_finalizer_at_exit",
                    "offset": 4350599
                },
                {
                    "function": "rb_gc_copy_finalizer",
                    "offset": 4350169
                },
                {
                    "function": "rb_gc_disable",
                    "offset": 4346122
                },
                {
                    "function": "rb_gc_enable",
                    "offset": 4346109
                },
                {
                    "function": "rb_gc_finalize_deferred",
                    "offset": 4350262
                },
                {
                    "function": "rb_gc_force_recycle",
                    "offset": 4347935
                },
                {
                    "function": "rb_gc_mark",
                    "offset": 4347041
                },
                {
                    "function": "rb_gc_mark_frame",
                    "offset": 4347957
                },
                {
                    "function": "rb_gc_mark_global_tbl",
                    "offset": 4563717
                },
                {
                    "function": "rb_gc_mark_locations",
                    "offset": 4346578
                },
                {
                    "function": "rb_gc_mark_maybe",
                    "offset": 4346886
                },
                {
                    "function": "rb_gc_mark_parser",
                    "offset": 4458127
                },
                {
                    "function": "rb_gc_mark_threads",
                    "offset": 4319716
                },
                {
                    "function": "rb_gc_mark_trap_list",
                    "offset": 4518147
                },
                {
                    "function": "rb_gc_register_address",
                    "offset": 4346138
                },
                {
                    "function": "rb_gc_stack_start",
                    "offset": 4759148
                },
                {
                    "function": "rb_gc_start",
                    "offset": 4350083
                },
                {
                    "function": "rb_gc_unregister_address",
                    "offset": 4346167
                },
                {
                    "function": "rb_generic_ivar_table",
                    "offset": 4565129
                },
                {
                    "function": "rb_get_kcode",
                    "offset": 4475149
                },
                {
                    "function": "rb_getc",
                    "offset": 4364938
                },
                {
                    "function": "rb_gets",
                    "offset": 4367407
                },
                {
                    "function": "rb_glob",
                    "offset": 4250150
                },
                {
                    "function": "rb_global_entry",
                    "offset": 4563507
                },
                {
                    "function": "rb_global_variable",
                    "offset": 4346257
                },
                {
                    "function": "rb_globi",
                    "offset": 4253139
                },
                {
                    "function": "rb_gv_get",
                    "offset": 4564788
                },
                {
                    "function": "rb_gv_set",
                    "offset": 4564759
                },
                {
                    "function": "rb_gvar_defined",
                    "offset": 4564813
                },
                {
                    "function": "rb_gvar_get",
                    "offset": 4564577
                },
                {
                    "function": "rb_gvar_set",
                    "offset": 4564597
                },
                {
                    "function": "rb_hash",
                    "offset": 4352495
                },
                {
                    "function": "rb_hash_aref",
                    "offset": 4353099
                },
                {
                    "function": "rb_hash_aset",
                    "offset": 4353680
                },
                {
                    "function": "rb_hash_delete",
                    "offset": 4353156
                },
                {
                    "function": "rb_hash_delete_if",
                    "offset": 4353393
                },
                {
                    "function": "rb_hash_foreach",
                    "offset": 4352725
                },
                {
                    "function": "rb_hash_freeze",
                    "offset": 4352259
                },
                {
                    "function": "rb_hash_new",
                    "offset": 4353012
                },
                {
                    "function": "rb_hash_reject_bang",
                    "offset": 4353472
                },
                {
                    "function": "rb_hash_select",
                    "offset": 4353564
                },
                {
                    "function": "rb_hash_values_at",
                    "offset": 4353509
                },
                {
                    "function": "rb_id2name",
                    "offset": 4459342
                },
                {
                    "function": "rb_id_attrset",
                    "offset": 4454298
                },
                {
                    "function": "rb_include_module",
                    "offset": 4246755
                },
                {
                    "function": "rb_inspect",
                    "offset": 4407327
                },
                {
                    "function": "rb_inspecting_p",
                    "offset": 4224487
                },
                {
                    "function": "rb_int2big",
                    "offset": 4234381
                },
                {
                    "function": "rb_int2inum",
                    "offset": 4234438
                },
                {
                    "function": "rb_intern",
                    "offset": 4458586
                },
                {
                    "function": "rb_interrupt",
                    "offset": 4290368
                },
                {
                    "function": "rb_invalid_str",
                    "offset": 4261273
                },
                {
                    "function": "rb_io_addstr",
                    "offset": 4363240
                },
                {
                    "function": "rb_io_binmode",
                    "offset": 4365660
                },
                {
                    "function": "rb_io_check_closed",
                    "offset": 4362047
                },
                {
                    "function": "rb_io_check_initialized",
                    "offset": 4362023
                },
                {
                    "function": "rb_io_check_readable",
                    "offset": 4362088
                },
                {
                    "function": "rb_io_check_writable",
                    "offset": 4362209
                },
                {
                    "function": "rb_io_close",
                    "offset": 4365558
                },
                {
                    "function": "rb_io_eof",
                    "offset": 4363260
                },
                {
                    "function": "rb_io_flags_mode",
                    "offset": 4365773
                },
                {
                    "function": "rb_io_fptr_finalize",
                    "offset": 4365194
                },
                {
                    "function": "rb_io_fread",
                    "offset": 4363989
                },
                {
                    "function": "rb_io_fwrite",
                    "offset": 4362752
                },
                {
                    "function": "rb_io_getc",
                    "offset": 4364677
                },
                {
                    "function": "rb_io_gets",
                    "offset": 4364025
                },
                {
                    "function": "rb_io_mode_flags",
                    "offset": 4365921
                },
                {
                    "function": "rb_io_modenum_flags",
                    "offset": 4366009
                },
                {
                    "function": "rb_io_print",
                    "offset": 4366862
                },
                {
                    "function": "rb_io_printf",
                    "offset": 4366832
                },
                {
                    "function": "rb_io_puts",
                    "offset": 4367071
                },
                {
                    "function": "rb_io_synchronized",
                    "offset": 4366812
                },
                {
                    "function": "rb_io_taint_check",
                    "offset": 4361954
                },
                {
                    "function": "rb_io_unbuffered",
                    "offset": 4366821
                },
                {
                    "function": "rb_io_ungetc",
                    "offset": 4365080
                },
                {
                    "function": "rb_io_wait_readable",
                    "offset": 4362542
                },
                {
                    "function": "rb_io_wait_writable",
                    "offset": 4362647
                },
                {
                    "function": "rb_io_write",
                    "offset": 4363215
                },
                {
                    "function": "rb_is_class_id",
                    "offset": 4459645
                },
                {
                    "function": "rb_is_const_id",
                    "offset": 4459617
                },
                {
                    "function": "rb_is_instance_id",
                    "offset": 4459673
                },
                {
                    "function": "rb_is_junk_id",
                    "offset": 4459728
                },
                {
                    "function": "rb_is_local_id",
                    "offset": 4459700
                },
                {
                    "function": "rb_iter_break",
                    "offset": 4289791
                },
                {
                    "function": "rb_iterate",
                    "offset": 4293684
                },
                {
                    "function": "rb_iterator_p",
                    "offset": 4290444
                },
                {
                    "function": "rb_iv_get",
                    "offset": 4570425
                },
                {
                    "function": "rb_iv_set",
                    "offset": 4570448
                },
                {
                    "function": "rb_ivar_defined",
                    "offset": 4566144
                },
                {
                    "function": "rb_ivar_get",
                    "offset": 4565492
                },
                {
                    "function": "rb_ivar_set",
                    "offset": 4565798
                },
                {
                    "function": "rb_jump_tag",
                    "offset": 4290384
                },
                {
                    "function": "rb_kcode",
                    "offset": 4474572
                },
                {
                    "function": "rb_last_status",
                    "offset": 4689128
                },
                {
                    "function": "rb_lastline_get",
                    "offset": 4459850
                },
                {
                    "function": "rb_lastline_set",
                    "offset": 4459869
                },
                {
                    "function": "rb_ll2big",
                    "offset": 4236315
                },
                {
                    "function": "rb_ll2inum",
                    "offset": 4236403
                },
                {
                    "function": "rb_load",
                    "offset": 4302521
                },
                {
                    "function": "rb_load_fail",
                    "offset": 4265306
                },
                {
                    "function": "rb_load_file",
                    "offset": 4512804
                },
                {
                    "function": "rb_load_path",
                    "offset": 4764760
                },
                {
                    "function": "rb_load_protect",
                    "offset": 4303589
                },
                {
                    "function": "rb_loaderror",
                    "offset": 4264707
                },
                {
                    "function": "rb_mComparable",
                    "offset": 4764876
                },
                {
                    "function": "rb_mEnumerable",
                    "offset": 4764868
                },
                {
                    "function": "rb_mErrno",
                    "offset": 4764788
                },
                {
                    "function": "rb_mExerb",
                    "offset": 4700068
                },
                {
                    "function": "rb_mFileTest",
                    "offset": 4764728
                },
                {
                    "function": "rb_mGC",
                    "offset": 4764720
                },
                {
                    "function": "rb_mKernel",
                    "offset": 4764636
                },
                {
                    "function": "rb_mMath",
                    "offset": 4764668
                },
                {
                    "function": "rb_mPrecision",
                    "offset": 4764572
                },
                {
                    "function": "rb_mProcGID",
                    "offset": 4764560
                },
                {
                    "function": "rb_mProcID_Syscall",
                    "offset": 4764568
                },
                {
                    "function": "rb_mProcUID",
                    "offset": 4764564
                },
                {
                    "function": "rb_mProcess",
                    "offset": 4764556
                },
                {
                    "function": "rb_make_metaclass",
                    "offset": 4245627
                },
                {
                    "function": "rb_mark_end_proc",
                    "offset": 4305568
                },
                {
                    "function": "rb_mark_generic_ivar",
                    "offset": 4565199
                },
                {
                    "function": "rb_mark_generic_ivar_tbl",
                    "offset": 4565242
                },
                {
                    "function": "rb_mark_hash",
                    "offset": 4346872
                },
                {
                    "function": "rb_mark_tbl",
                    "offset": 4346797
                },
                {
                    "function": "rb_marshal_dump",
                    "offset": 4392827
                },
                {
                    "function": "rb_marshal_load",
                    "offset": 4392869
                },
                {
                    "function": "rb_match_busy",
                    "offset": 4470918
                },
                {
                    "function": "rb_mem_clear",
                    "offset": 4221808
                },
                {
                    "function": "rb_memcicmp",
                    "offset": 4470202
                },
                {
                    "function": "rb_memcmp",
                    "offset": 4470263
                },
                {
                    "function": "rb_memerror",
                    "offset": 4345736
                },
                {
                    "function": "rb_memsearch",
                    "offset": 4470301
                },
                {
                    "function": "rb_method_boundp",
                    "offset": 4268412
                },
                {
                    "function": "rb_method_node",
                    "offset": 4267571
                },
                {
                    "function": "rb_mod_ancestors",
                    "offset": 4247364
                },
                {
                    "function": "rb_mod_class_variables",
                    "offset": 4570057
                },
                {
                    "function": "rb_mod_const_at",
                    "offset": 4568518
                },
                {
                    "function": "rb_mod_const_missing",
                    "offset": 4566980
                },
                {
                    "function": "rb_mod_const_of",
                    "offset": 4568617
                },
                {
                    "function": "rb_mod_constants",
                    "offset": 4568759
                },
                {
                    "function": "rb_mod_include_p",
                    "offset": 4247314
                },
                {
                    "function": "rb_mod_included_modules",
                    "offset": 4247264
                },
                {
                    "function": "rb_mod_init_copy",
                    "offset": 4244912
                },
                {
                    "function": "rb_mod_module_eval",
                    "offset": 4302496
                },
                {
                    "function": "rb_mod_name",
                    "offset": 4562059
                },
                {
                    "function": "rb_mod_remove_const",
                    "offset": 4568245
                },
                {
                    "function": "rb_mod_remove_cvar",
                    "offset": 4570169
                },
                {
                    "function": "rb_module_new",
                    "offset": 4246363
                },
                {
                    "function": "rb_name_class",
                    "offset": 4563375
                },
                {
                    "function": "rb_name_error",
                    "offset": 4261188
                },
                {
                    "function": "rb_newobj",
                    "offset": 4346268
                },
                {
                    "function": "rb_node_newnode",
                    "offset": 4452191
                },
                {
                    "function": "rb_notimplement",
                    "offset": 4264767
                },
                {
                    "function": "rb_num2dbl",
                    "offset": 4410259
                },
                {
                    "function": "rb_num2fix",
                    "offset": 4395525
                },
                {
                    "function": "rb_num2int",
                    "offset": 4395507
                },
                {
                    "function": "rb_num2ll",
                    "offset": 4395576
                },
                {
                    "function": "rb_num2long",
                    "offset": 4395239
                },
                {
                    "function": "rb_num2ull",
                    "offset": 4395833
                },
                {
                    "function": "rb_num2ulong",
                    "offset": 4395448
                },
                {
                    "function": "rb_num_coerce_bin",
                    "offset": 4394666
                },
                {
                    "function": "rb_num_coerce_cmp",
                    "offset": 4394963
                },
                {
                    "function": "rb_num_coerce_relop",
                    "offset": 4395018
                },
                {
                    "function": "rb_num_zerodiv",
                    "offset": 4394650
                },
                {
                    "function": "rb_obj_alloc",
                    "offset": 4408162
                },
                {
                    "function": "rb_obj_as_string",
                    "offset": 4527358
                },
                {
                    "function": "rb_obj_call_init",
                    "offset": 4305420
                },
                {
                    "function": "rb_obj_class",
                    "offset": 4406500
                },
                {
                    "function": "rb_obj_classname",
                    "offset": 4563435
                },
                {
                    "function": "rb_obj_clone",
                    "offset": 4406572
                },
                {
                    "function": "rb_obj_dup",
                    "offset": 4406948
                },
                {
                    "function": "rb_obj_freeze",
                    "offset": 4407867
                },
                {
                    "function": "rb_obj_id",
                    "offset": 4406295
                },
                {
                    "function": "rb_obj_id_obsolete",
                    "offset": 4406321
                },
                {
                    "function": "rb_obj_infect",
                    "offset": 4407824
                },
                {
                    "function": "rb_obj_init_copy",
                    "offset": 4407020
                },
                {
                    "function": "rb_obj_instance_eval",
                    "offset": 4301678
                },
                {
                    "function": "rb_obj_instance_variables",
                    "offset": 4566346
                },
                {
                    "function": "rb_obj_is_instance_of",
                    "offset": 4407356
                },
                {
                    "function": "rb_obj_is_kind_of",
                    "offset": 4407443
                },
                {
                    "function": "rb_obj_remove_instance_variable",
                    "offset": 4566561
                },
                {
                    "function": "rb_obj_singleton_methods",
                    "offset": 4247948
                },
                {
                    "function": "rb_obj_taint",
                    "offset": 4407633
                },
                {
                    "function": "rb_obj_tainted",
                    "offset": 4407599
                },
                {
                    "function": "rb_obj_type",
                    "offset": 4406417
                },
                {
                    "function": "rb_obj_untaint",
                    "offset": 4407729
                },
                {
                    "function": "rb_origenviron",
                    "offset": 4764764
                },
                {
                    "function": "rb_output_fs",
                    "offset": 4764684
                },
                {
                    "function": "rb_output_rs",
                    "offset": 4764680
                },
                {
                    "function": "rb_p",
                    "offset": 4367307
                },
                {
                    "function": "rb_parser_append_print",
                    "offset": 4458195
                },
                {
                    "function": "rb_parser_while_loop",
                    "offset": 4458295
                },
                {
                    "function": "rb_path2class",
                    "offset": 4563119
                },
                {
                    "function": "rb_path_check",
                    "offset": 4335394
                },
                {
                    "function": "rb_path_end",
                    "offset": 4333731
                },
                {
                    "function": "rb_path_last_separator",
                    "offset": 4333662
                },
                {
                    "function": "rb_path_next",
                    "offset": 4333481
                },
                {
                    "function": "rb_path_skip_prefix",
                    "offset": 4333511
                },
                {
                    "function": "rb_proc_exec",
                    "offset": 4460655
                },
                {
                    "function": "rb_proc_new",
                    "offset": 4315089
                },
                {
                    "function": "rb_proc_times",
                    "offset": 4461240
                },
                {
                    "function": "rb_progname",
                    "offset": 4764536
                },
                {
                    "function": "rb_prohibit_interrupt",
                    "offset": 4694728
                },
                {
                    "function": "rb_protect",
                    "offset": 4294943
                },
                {
                    "function": "rb_protect_inspect",
                    "offset": 4224198
                },
                {
                    "function": "rb_provide",
                    "offset": 4304115
                },
                {
                    "function": "rb_provided",
                    "offset": 4303707
                },
                {
                    "function": "rb_quad_pack",
                    "offset": 4234469
                },
                {
                    "function": "rb_quad_unpack",
                    "offset": 4234621
                },
                {
                    "function": "rb_raise",
                    "offset": 4264650
                },
                {
                    "function": "rb_range_beg_len",
                    "offset": 4467191
                },
                {
                    "function": "rb_range_new",
                    "offset": 4466983
                },
                {
                    "function": "rb_read_check",
                    "offset": 4362309
                },
                {
                    "function": "rb_read_pending",
                    "offset": 4362296
                },
                {
                    "function": "rb_reg_adjust_startpos",
                    "offset": 4470938
                },
                {
                    "function": "rb_reg_eqq",
                    "offset": 4473918
                },
                {
                    "function": "rb_reg_last_match",
                    "offset": 4472847
                },
                {
                    "function": "rb_reg_match",
                    "offset": 4473858
                },
                {
                    "function": "rb_reg_match2",
                    "offset": 4474031
                },
                {
                    "function": "rb_reg_match_last",
                    "offset": 4473040
                },
                {
                    "function": "rb_reg_match_post",
                    "offset": 4472948
                },
                {
                    "function": "rb_reg_match_pre",
                    "offset": 4472861
                },
                {
                    "function": "rb_reg_mbclen2",
                    "offset": 4470679
                },
                {
                    "function": "rb_reg_new",
                    "offset": 4473099
                },
                {
                    "function": "rb_reg_nth_defined",
                    "offset": 4472686
                },
                {
                    "function": "rb_reg_nth_match",
                    "offset": 4472738
                },
                {
                    "function": "rb_reg_options",
                    "offset": 4474628
                },
                {
                    "function": "rb_reg_quote",
                    "offset": 4474113
                },
                {
                    "function": "rb_reg_regcomp",
                    "offset": 4473738
                },
                {
                    "function": "rb_reg_regsub",
                    "offset": 4474751
                },
                {
                    "function": "rb_reg_search",
                    "offset": 4472144
                },
                {
                    "function": "rb_remove_method",
                    "offset": 4268007
                },
                {
                    "function": "rb_require",
                    "offset": 4305387
                },
                {
                    "function": "rb_require_safe",
                    "offset": 4304185
                },
                {
                    "function": "rb_rescue",
                    "offset": 4294910
                },
                {
                    "function": "rb_rescue2",
                    "offset": 4294530
                },
                {
                    "function": "rb_reserved_word",
                    "offset": 4439838
                },
                {
                    "function": "rb_respond_to",
                    "offset": 4289365
                },
                {
                    "function": "rb_rs",
                    "offset": 4764704
                },
                {
                    "function": "rb_scan_args",
                    "offset": 4248940
                },
                {
                    "function": "rb_secure",
                    "offset": 4266528
                },
                {
                    "function": "rb_secure_update",
                    "offset": 4266594
                },
                {
                    "function": "rb_set_class_path",
                    "offset": 4563033
                },
                {
                    "function": "rb_set_end_proc",
                    "offset": 4305511
                },
                {
                    "function": "rb_set_kcode",
                    "offset": 4475199
                },
                {
                    "function": "rb_set_safe_level",
                    "offset": 4319586
                },
                {
                    "function": "rb_singleton_class",
                    "offset": 4248466
                },
                {
                    "function": "rb_singleton_class_attached",
                    "offset": 4245551
                },
                {
                    "function": "rb_singleton_class_clone",
                    "offset": 4245342
                },
                {
                    "function": "rb_source_filename",
                    "offset": 4346478
                },
                {
                    "function": "rb_stderr",
                    "offset": 4764708
                },
                {
                    "function": "rb_stdin",
                    "offset": 4764692
                },
                {
                    "function": "rb_stdout",
                    "offset": 4764676
                },
                {
                    "function": "rb_str2cstr",
                    "offset": 4410378
                },
                {
                    "function": "rb_str2inum",
                    "offset": 4236484
                },
                {
                    "function": "rb_str_append",
                    "offset": 4529819
                },
                {
                    "function": "rb_str_associate",
                    "offset": 4528193
                },
                {
                    "function": "rb_str_associated",
                    "offset": 4528365
                },
                {
                    "function": "rb_str_buf_append",
                    "offset": 4529590
                },
                {
                    "function": "rb_str_buf_cat",
                    "offset": 4529186
                },
                {
                    "function": "rb_str_buf_cat2",
                    "offset": 4529402
                },
                {
                    "function": "rb_str_buf_new",
                    "offset": 4527234
                },
                {
                    "function": "rb_str_buf_new2",
                    "offset": 4527293
                },
                {
                    "function": "rb_str_cat",
                    "offset": 4529429
                },
                {
                    "function": "rb_str_cat2",
                    "offset": 4529563
                },
                {
                    "function": "rb_str_cmp",
                    "offset": 4530091
                },
                {
                    "function": "rb_str_concat",
                    "offset": 4529986
                },
                {
                    "function": "rb_str_dump",
                    "offset": 4531598
                },
                {
                    "function": "rb_str_dup",
                    "offset": 4527518
                },
                {
                    "function": "rb_str_dup_frozen",
                    "offset": 4528814
                },
                {
                    "function": "rb_str_freeze",
                    "offset": 4352259
                },
                {
                    "function": "rb_str_hash",
                    "offset": 4530046
                },
                {
                    "function": "rb_str_inspect",
                    "offset": 4531146
                },
                {
                    "function": "rb_str_intern",
                    "offset": 4533274
                },
                {
                    "function": "rb_str_locktmp",
                    "offset": 4528935
                },
                {
                    "function": "rb_str_modify",
                    "offset": 4527922
                },
                {
                    "function": "rb_str_new",
                    "offset": 4526540
                },
                {
                    "function": "rb_str_new2",
                    "offset": 4526709
                },
                {
                    "function": "rb_str_new3",
                    "offset": 4526809
                },
                {
                    "function": "rb_str_new4",
                    "offset": 4526914
                },
                {
                    "function": "rb_str_new5",
                    "offset": 4527206
                },
                {
                    "function": "rb_str_plus",
                    "offset": 4527553
                },
                {
                    "function": "rb_str_resize",
                    "offset": 4529068
                },
                {
                    "function": "rb_str_setter",
                    "offset": 4533372
                },
                {
                    "function": "rb_str_split",
                    "offset": 4532147
                },
                {
                    "function": "rb_str_substr",
                    "offset": 4528617
                },
                {
                    "function": "rb_str_times",
                    "offset": 4527717
                },
                {
                    "function": "rb_str_to_dbl",
                    "offset": 4409938
                },
                {
                    "function": "rb_str_to_inum",
                    "offset": 4236124
                },
                {
                    "function": "rb_str_to_str",
                    "offset": 4527333
                },
                {
                    "function": "rb_str_unlocktmp",
                    "offset": 4529002
                },
                {
                    "function": "rb_str_update",
                    "offset": 4530519
                },
                {
                    "function": "rb_str_upto",
                    "offset": 4530173
                },
                {
                    "function": "rb_string_value",
                    "offset": 4528404
                },
                {
                    "function": "rb_string_value_cstr",
                    "offset": 4528503
                },
                {
                    "function": "rb_string_value_ptr",
                    "offset": 4528489
                },
                {
                    "function": "rb_struct_alloc",
                    "offset": 4547925
                },
                {
                    "function": "rb_struct_aref",
                    "offset": 4548036
                },
                {
                    "function": "rb_struct_aset",
                    "offset": 4548295
                },
                {
                    "function": "rb_struct_define",
                    "offset": 4547052
                },
                {
                    "function": "rb_struct_getmember",
                    "offset": 4546862
                },
                {
                    "function": "rb_struct_iv_get",
                    "offset": 4546707
                },
                {
                    "function": "rb_struct_members",
                    "offset": 4546813
                },
                {
                    "function": "rb_struct_new",
                    "offset": 4547948
                },
                {
                    "function": "rb_struct_s_members",
                    "offset": 4546781
                },
                {
                    "function": "rb_svar",
                    "offset": 4268968
                },
                {
                    "function": "rb_sym_all_symbols",
                    "offset": 4459553
                },
                {
                    "function": "rb_sys_fail",
                    "offset": 4264865
                },
                {
                    "function": "rb_sys_warning",
                    "offset": 4265161
                },
                {
                    "function": "rb_syswait",
                    "offset": 4461138
                },
                {
                    "function": "rb_tainted_str_new",
                    "offset": 4526752
                },
                {
                    "function": "rb_tainted_str_new2",
                    "offset": 4526783
                },
                {
                    "function": "rb_thread_alone",
                    "offset": 4324542
                },
                {
                    "function": "rb_thread_atfork",
                    "offset": 4328739
                },
                {
                    "function": "rb_thread_create",
                    "offset": 4326519
                },
                {
                    "function": "rb_thread_critical",
                    "offset": 4764736
                },
                {
                    "function": "rb_thread_current",
                    "offset": 4325201
                },
                {
                    "function": "rb_thread_fd_close",
                    "offset": 4319763
                },
                {
                    "function": "rb_thread_fd_writable",
                    "offset": 4324026
                },
                {
                    "function": "rb_thread_group",
                    "offset": 4326495
                },
                {
                    "function": "rb_thread_interrupt",
                    "offset": 4327898
                },
                {
                    "function": "rb_thread_kill",
                    "offset": 4325893
                },
                {
                    "function": "rb_thread_list",
                    "offset": 4325225
                },
                {
                    "function": "rb_thread_local_aref",
                    "offset": 4328488
                },
                {
                    "function": "rb_thread_local_aset",
                    "offset": 4328573
                },
                {
                    "function": "rb_thread_main",
                    "offset": 4325213
                },
                {
                    "function": "rb_thread_pending",
                    "offset": 4754956
                },
                {
                    "function": "rb_thread_polling",
                    "offset": 4326075
                },
                {
                    "function": "rb_thread_run",
                    "offset": 4325864
                },
                {
                    "function": "rb_thread_schedule",
                    "offset": 4319916
                },
                {
                    "function": "rb_thread_select",
                    "offset": 4324557
                },
                {
                    "function": "rb_thread_signal_raise",
                    "offset": 4328014
                },
                {
                    "function": "rb_thread_sleep",
                    "offset": 4326137
                },
                {
                    "function": "rb_thread_sleep_forever",
                    "offset": 4326292
                },
                {
                    "function": "rb_thread_stop",
                    "offset": 4326000
                },
                {
                    "function": "rb_thread_tick",
                    "offset": 4666652
                },
                {
                    "function": "rb_thread_trap_eval",
                    "offset": 4328166
                },
                {
                    "function": "rb_thread_wait_fd",
                    "offset": 4323948
                },
                {
                    "function": "rb_thread_wait_for",
                    "offset": 4324157
                },
                {
                    "function": "rb_thread_wakeup",
                    "offset": 4325284
                },
                {
                    "function": "rb_throw",
                    "offset": 4333143
                },
                {
                    "function": "rb_time_interval",
                    "offset": 4550779
                },
                {
                    "function": "rb_time_new",
                    "offset": 4550626
                },
                {
                    "function": "rb_time_timeval",
                    "offset": 4551086
                },
                {
                    "function": "rb_to_id",
                    "offset": 4408324
                },
                {
                    "function": "rb_to_int",
                    "offset": 4409009
                },
                {
                    "function": "rb_trap_exec",
                    "offset": 4518227
                },
                {
                    "function": "rb_trap_exit",
                    "offset": 4518179
                },
                {
                    "function": "rb_trap_immediate",
                    "offset": 4764528
                },
                {
                    "function": "rb_trap_pending",
                    "offset": 4764524
                },
                {
                    "function": "rb_trap_restore_mask",
                    "offset": 4572060
                },
                {
                    "function": "rb_uint2big",
                    "offset": 4234335
                },
                {
                    "function": "rb_uint2inum",
                    "offset": 4234414
                },
                {
                    "function": "rb_ull2big",
                    "offset": 4236237
                },
                {
                    "function": "rb_ull2inum",
                    "offset": 4236365
                },
                {
                    "function": "rb_undef",
                    "offset": 4273388
                },
                {
                    "function": "rb_undef_alloc_func",
                    "offset": 4267479
                },
                {
                    "function": "rb_undef_method",
                    "offset": 4248438
                },
                {
                    "function": "rb_values_at",
                    "offset": 4225027
                },
                {
                    "function": "rb_w32_accept",
                    "offset": 4215462
                },
                {
                    "function": "rb_w32_asynchronize",
                    "offset": 4220477
                },
                {
                    "function": "rb_w32_bind",
                    "offset": 4215564
                },
                {
                    "function": "rb_w32_close",
                    "offset": 4221204
                },
                {
                    "function": "rb_w32_closedir",
                    "offset": 4214265
                },
                {
                    "function": "rb_w32_cmdvector",
                    "offset": 4212586
                },
                {
                    "function": "rb_w32_connect",
                    "offset": 4215649
                },
                {
                    "function": "rb_w32_enter_critical",
                    "offset": 4219374
                },
                {
                    "function": "rb_w32_fclose",
                    "offset": 4221055
                },
                {
                    "function": "rb_w32_fdclr",
                    "offset": 4214693
                },
                {
                    "function": "rb_w32_fdisset",
                    "offset": 4214765
                },
                {
                    "function": "rb_w32_fdset",
                    "offset": 4214635
                },
                {
                    "function": "rb_w32_free_environ",
                    "offset": 4220989
                },
                {
                    "function": "rb_w32_get_environ",
                    "offset": 4220852
                },
                {
                    "function": "rb_w32_get_osfhandle",
                    "offset": 4209606
                },
                {
                    "function": "rb_w32_getc",
                    "offset": 4220259
                },
                {
                    "function": "rb_w32_getcwd",
                    "offset": 4217829
                },
                {
                    "function": "rb_w32_getenv",
                    "offset": 4218470
                },
                {
                    "function": "rb_w32_gethostbyaddr",
                    "offset": 4216797
                },
                {
                    "function": "rb_w32_gethostbyname",
                    "offset": 4216873
                },
                {
                    "function": "rb_w32_gethostname",
                    "offset": 4216941
                },
                {
                    "function": "rb_w32_getpeername",
                    "offset": 4215734
                },
                {
                    "function": "rb_w32_getpid",
                    "offset": 4221031
                },
                {
                    "function": "rb_w32_getprotobyname",
                    "offset": 4217014
                },
                {
                    "function": "rb_w32_getprotobynumber",
                    "offset": 4217082
                },
                {
                    "function": "rb_w32_getservbyname",
                    "offset": 4217150
                },
                {
                    "function": "rb_w32_getservbyport",
                    "offset": 4217222
                },
                {
                    "function": "rb_w32_getsockname",
                    "offset": 4215819
                },
                {
                    "function": "rb_w32_getsockopt",
                    "offset": 4215904
                },
                {
                    "function": "rb_w32_ioctlsocket",
                    "offset": 4215996
                },
                {
                    "function": "rb_w32_isatty",
                    "offset": 4221739
                },
                {
                    "function": "rb_w32_leave_critical",
                    "offset": 4219527
                },
                {
                    "function": "rb_w32_listen",
                    "offset": 4216081
                },
                {
                    "function": "rb_w32_main_context",
                    "offset": 4219587
                },
                {
                    "function": "rb_w32_opendir",
                    "offset": 4213649
                },
                {
                    "function": "rb_w32_putc",
                    "offset": 4220408
                },
                {
                    "function": "rb_w32_readdir",
                    "offset": 4214150
                },
                {
                    "function": "rb_w32_recv",
                    "offset": 4216162
                },
                {
                    "function": "rb_w32_recvfrom",
                    "offset": 4216251
                },
                {
                    "function": "rb_w32_rename",
                    "offset": 4218594
                },
                {
                    "function": "rb_w32_rewinddir",
                    "offset": 4214255
                },
                {
                    "function": "rb_w32_seekdir",
                    "offset": 4214243
                },
                {
                    "function": "rb_w32_select",
                    "offset": 4214814
                },
                {
                    "function": "rb_w32_send",
                    "offset": 4216346
                },
                {
                    "function": "rb_w32_sendto",
                    "offset": 4216435
                },
                {
                    "function": "rb_w32_setsockopt",
                    "offset": 4216530
                },
                {
                    "function": "rb_w32_shutdown",
                    "offset": 4216622
                },
                {
                    "function": "rb_w32_sleep",
                    "offset": 4220151
                },
                {
                    "function": "rb_w32_snprintf",
                    "offset": 4221713
                },
                {
                    "function": "rb_w32_socket",
                    "offset": 4216703
                },
                {
                    "function": "rb_w32_stat",
                    "offset": 4218830
                },
                {
                    "function": "rb_w32_strerror",
                    "offset": 4214489
                },
                {
                    "function": "rb_w32_telldir",
                    "offset": 4214235
                },
                {
                    "function": "rb_w32_times",
                    "offset": 4219161
                },
                {
                    "function": "rb_w32_utime",
                    "offset": 4221321
                },
                {
                    "function": "rb_w32_vsnprintf",
                    "offset": 4221672
                },
                {
                    "function": "rb_waitpid",
                    "offset": 4460267
                },
                {
                    "function": "rb_warn",
                    "offset": 4260521
                },
                {
                    "function": "rb_warning",
                    "offset": 4260656
                },
                {
                    "function": "rb_with_disable_interrupt",
                    "offset": 4295302
                },
                {
                    "function": "rb_write_error",
                    "offset": 4367384
                },
                {
                    "function": "rb_write_error2",
                    "offset": 4367355
                },
                {
                    "function": "rb_yield",
                    "offset": 4292652
                },
                {
                    "function": "rb_yield_splat",
                    "offset": 4292760
                },
                {
                    "function": "rb_yield_values",
                    "offset": 4292671
                },
                {
                    "function": "re_mbctab",
                    "offset": 4690868
                },
                {
                    "function": "re_set_syntax",
                    "offset": 4214619
                },
                {
                    "function": "ruby__end__seen",
                    "offset": 4764600
                },
                {
                    "function": "ruby_add_suffix",
                    "offset": 4558873
                },
                {
                    "function": "ruby_class",
                    "offset": 4764744
                },
                {
                    "function": "ruby_cleanup",
                    "offset": 4271219
                },
                {
                    "function": "ruby_current_node",
                    "offset": 4764768
                },
                {
                    "function": "ruby_debug",
                    "offset": 4764136
                },
                {
                    "function": "ruby_digitmap",
                    "offset": 4576400
                },
                {
                    "function": "ruby_dln_librefs",
                    "offset": 4764732
                },
                {
                    "function": "ruby_dyna_vars",
                    "offset": 4764756
                },
                {
                    "function": "ruby_errinfo",
                    "offset": 4666648
                },
                {
                    "function": "ruby_eval_tree",
                    "offset": 4760400
                },
                {
                    "function": "ruby_eval_tree_begin",
                    "offset": 4760396
                },
                {
                    "function": "ruby_exec",
                    "offset": 4271502
                },
                {
                    "function": "ruby_finalize",
                    "offset": 4271069
                },
                {
                    "function": "ruby_frame",
                    "offset": 4764772
                },
                {
                    "function": "ruby_getcwd",
                    "offset": 4561237
                },
                {
                    "function": "ruby_ignorecase",
                    "offset": 4764544
                },
                {
                    "function": "ruby_in_compile",
                    "offset": 4760456
                },
                {
                    "function": "ruby_in_eval",
                    "offset": 4764752
                },
                {
                    "function": "ruby_incpush",
                    "offset": 4511709
                },
                {
                    "function": "ruby_init",
                    "offset": 4269083
                },
                {
                    "function": "ruby_init_loadpath",
                    "offset": 4512419
                },
                {
                    "function": "ruby_inplace_mode",
                    "offset": 4764152
                },
                {
                    "function": "ruby_nerrs",
                    "offset": 4764784
                },
                {
                    "function": "ruby_options",
                    "offset": 4270605
                },
                {
                    "function": "ruby_parser_stack_on_heap",
                    "offset": 4214619
                },
                {
                    "function": "ruby_platform",
                    "offset": 4630244
                },
                {
                    "function": "ruby_process_options",
                    "offset": 4517541
                },
                {
                    "function": "ruby_prog_init",
                    "offset": 4516847
                },
                {
                    "function": "ruby_qsort",
                    "offset": 4559318
                },
                {
                    "function": "ruby_re_adjust_startpos",
                    "offset": 4500267
                },
                {
                    "function": "ruby_re_compile_fastmap",
                    "offset": 4498291
                },
                {
                    "function": "ruby_re_compile_pattern",
                    "offset": 4479954
                },
                {
                    "function": "ruby_re_copy_registers",
                    "offset": 4511212
                },
                {
                    "function": "ruby_re_free_pattern",
                    "offset": 4497878
                },
                {
                    "function": "ruby_re_free_registers",
                    "offset": 4511365
                },
                {
                    "function": "ruby_re_match",
                    "offset": 4501683
                },
                {
                    "function": "ruby_re_mbcinit",
                    "offset": 4511405
                },
                {
                    "function": "ruby_re_search",
                    "offset": 4500371
                },
                {
                    "function": "ruby_re_set_casetable",
                    "offset": 4479944
                },
                {
                    "function": "ruby_release_date",
                    "offset": 4630232
                },
                {
                    "function": "ruby_run",
                    "offset": 4271728
                },
                {
                    "function": "ruby_safe_level",
                    "offset": 4754912
                },
                {
                    "function": "ruby_scan_hex",
                    "offset": 4558781
                },
                {
                    "function": "ruby_scan_oct",
                    "offset": 4558725
                },
                {
                    "function": "ruby_scope",
                    "offset": 4764748
                },
                {
                    "function": "ruby_script",
                    "offset": 4516716
                },
                {
                    "function": "ruby_set_argv",
                    "offset": 4517469
                },
                {
                    "function": "ruby_set_current_source",
                    "offset": 4269034
                },
                {
                    "function": "ruby_set_stack_size",
                    "offset": 4572060
                },
                {
                    "function": "ruby_setenv",
                    "offset": 4353852
                },
                {
                    "function": "ruby_show_copyright",
                    "offset": 4570637
                },
                {
                    "function": "ruby_show_version",
                    "offset": 4570607
                },
                {
                    "function": "ruby_signal_name",
                    "offset": 4517670
                },
                {
                    "function": "ruby_sourcefile",
                    "offset": 4764588
                },
                {
                    "function": "ruby_sourceline",
                    "offset": 4764580
                },
                {
                    "function": "ruby_stack_check",
                    "offset": 4346438
                },
                {
                    "function": "ruby_stack_length",
                    "offset": 4346401
                },
                {
                    "function": "ruby_stop",
                    "offset": 4271485
                },
                {
                    "function": "ruby_strdup",
                    "offset": 4561196
                },
                {
                    "function": "ruby_strtod",
                    "offset": 4561324
                },
                {
                    "function": "ruby_top_self",
                    "offset": 4764628
                },
                {
                    "function": "ruby_unsetenv",
                    "offset": 4353867
                },
                {
                    "function": "ruby_verbose",
                    "offset": 4764140
                },
                {
                    "function": "ruby_version",
                    "offset": 4630224
                },
                {
                    "function": "ruby_xcalloc",
                    "offset": 4345919
                },
                {
                    "function": "ruby_xfree",
                    "offset": 4346080
                },
                {
                    "function": "ruby_xmalloc",
                    "offset": 4345801
                },
                {
                    "function": "ruby_xrealloc",
                    "offset": 4345955
                },
                {
                    "function": "ruby_yychar",
                    "offset": 4764596
                },
                {
                    "function": "ruby_yydebug",
                    "offset": 4764592
                },
                {
                    "function": "ruby_yylval",
                    "offset": 4764576
                },
                {
                    "function": "ruby_yyparse",
                    "offset": 4427960
                },
                {
                    "function": "setgid",
                    "offset": 4214622
                },
                {
                    "function": "sethostent",
                    "offset": 4572060
                },
                {
                    "function": "setnetent",
                    "offset": 4572060
                },
                {
                    "function": "setprotoent",
                    "offset": 4572060
                },
                {
                    "function": "setservent",
                    "offset": 4572060
                },
                {
                    "function": "setuid",
                    "offset": 4214622
                },
                {
                    "function": "st_add_direct",
                    "offset": 4525478
                },
                {
                    "function": "st_cleanup_safe",
                    "offset": 4526243
                },
                {
                    "function": "st_copy",
                    "offset": 4525709
                },
                {
                    "function": "st_delete",
                    "offset": 4525925
                },
                {
                    "function": "st_delete_safe",
                    "offset": 4526121
                },
                {
                    "function": "st_foreach",
                    "offset": 4526293
                },
                {
                    "function": "st_foreach_safe",
                    "offset": 4352617
                },
                {
                    "function": "st_free_table",
                    "offset": 4525080
                },
                {
                    "function": "st_init_numtable",
                    "offset": 4525022
                },
                {
                    "function": "st_init_numtable_with_size",
                    "offset": 4525034
                },
                {
                    "function": "st_init_strtable",
                    "offset": 4525051
                },
                {
                    "function": "st_init_strtable_with_size",
                    "offset": 4525063
                },
                {
                    "function": "st_init_table",
                    "offset": 4525008
                },
                {
                    "function": "st_init_table_with_size",
                    "offset": 4524923
                },
                {
                    "function": "st_insert",
                    "offset": 4525276
                },
                {
                    "function": "st_lookup",
                    "offset": 4525145
                },
                {
                    "function": "thgroup_enclose",
                    "offset": 4328795
                },
                {
                    "function": "time_overflow_p",
                    "offset": 4550457
                },
                {
                    "function": "wait",
                    "offset": 4214619
                },
                {
                    "function": "waitpid",
                    "offset": 4217294
                },
                {
                    "function": "yynerrs",
                    "offset": 4764584
                }
            ],
            "import": {
                "ADVAPI32.dll": [
                    {
                        "function": "GetUserNameA",
                        "offset": 4575232
                    }
                ],
                "GDI32.dll": [
                    {
                        "function": "DeleteObject",
                        "offset": 4575240
                    },
                    {
                        "function": "CreateFontA",
                        "offset": 4575244
                    }
                ],
                "KERNEL32.dll": [
                    {
                        "function": "GetLastError",
                        "offset": 4575252
                    },
                    {
                        "function": "LoadLibraryExA",
                        "offset": 4575256
                    },
                    {
                        "function": "VirtualProtect",
                        "offset": 4575260
                    },
                    {
                        "function": "GetProcAddress",
                        "offset": 4575264
                    },
                    {
                        "function": "LoadLibraryA",
                        "offset": 4575268
                    },
                    {
                        "function": "OutputDebugStringA",
                        "offset": 4575272
                    },
                    {
                        "function": "CreateFileA",
                        "offset": 4575276
                    },
                    {
                        "function": "CloseHandle",
                        "offset": 4575280
                    },
                    {
                        "function": "ReadFile",
                        "offset": 4575284
                    },
                    {
                        "function": "WriteFile",
                        "offset": 4575288
                    },
                    {
                        "function": "GetFileSize",
                        "offset": 4575292
                    },
                    {
                        "function": "GetTempFileNameA",
                        "offset": 4575296
                    },
                    {
                        "function": "GetTempPathA",
                        "offset": 4575300
                    },
                    {
                        "function": "FormatMessageA",
                        "offset": 4575304
                    },
                    {
                        "function": "DuplicateHandle",
                        "offset": 4575308
                    },
                    {
                        "function": "GetCurrentThread",
                        "offset": 4575312
                    },
                    {
                        "function": "GetCurrentProcess",
                        "offset": 4575316
                    },
                    {
                        "function": "GetVersionExA",
                        "offset": 4575320
                    },
                    {
                        "function": "LockFileEx",
                        "offset": 4575324
                    },
                    {
                        "function": "UnlockFileEx",
                        "offset": 4575328
                    },
                    {
                        "function": "LockFile",
                        "offset": 4575332
                    },
                    {
                        "function": "UnlockFile",
                        "offset": 4575336
                    },
                    {
                        "function": "CreatePipe",
                        "offset": 4575340
                    },
                    {
                        "function": "GetExitCodeProcess",
                        "offset": 4575344
                    },
                    {
                        "function": "WaitForSingleObject",
                        "offset": 4575348
                    },
                    {
                        "function": "CreateProcessA",
                        "offset": 4575352
                    },
                    {
                        "function": "GetStdHandle",
                        "offset": 4575356
                    },
                    {
                        "function": "FindClose",
                        "offset": 4575360
                    },
                    {
                        "function": "FindNextFileA",
                        "offset": 4575364
                    },
                    {
                        "function": "FindFirstFileA",
                        "offset": 4575368
                    },
                    {
                        "function": "GetLogicalDrives",
                        "offset": 4575372
                    },
                    {
                        "function": "LeaveCriticalSection",
                        "offset": 4575376
                    },
                    {
                        "function": "EnterCriticalSection",
                        "offset": 4575380
                    },
                    {
                        "function": "CreateEventA",
                        "offset": 4575384
                    },
                    {
                        "function": "GetCurrentThreadId",
                        "offset": 4575388
                    },
                    {
                        "function": "WaitForMultipleObjectsEx",
                        "offset": 4575392
                    },
                    {
                        "function": "GetModuleFileNameA",
                        "offset": 4575396
                    },
                    {
                        "function": "GenerateConsoleCtrlEvent",
                        "offset": 4575400
                    },
                    {
                        "function": "TerminateProcess",
                        "offset": 4575404
                    },
                    {
                        "function": "OpenProcess",
                        "offset": 4575408
                    },
                    {
                        "function": "GetCurrentProcessId",
                        "offset": 4575412
                    },
                    {
                        "function": "GetEnvironmentVariableA",
                        "offset": 4575416
                    },
                    {
                        "function": "MoveFileExA",
                        "offset": 4575420
                    },
                    {
                        "function": "MoveFileA",
                        "offset": 4575424
                    },
                    {
                        "function": "SetFileAttributesA",
                        "offset": 4575428
                    },
                    {
                        "function": "GetFileAttributesA",
                        "offset": 4575432
                    },
                    {
                        "function": "GetProcessTimes",
                        "offset": 4575436
                    },
                    {
                        "function": "TlsSetValue",
                        "offset": 4575440
                    },
                    {
                        "function": "Sleep",
                        "offset": 4575444
                    },
                    {
                        "function": "InterlockedDecrement",
                        "offset": 4575448
                    },
                    {
                        "function": "InterlockedIncrement",
                        "offset": 4575452
                    },
                    {
                        "function": "TlsGetValue",
                        "offset": 4575456
                    },
                    {
                        "function": "TlsAlloc",
                        "offset": 4575460
                    },
                    {
                        "function": "InitializeCriticalSection",
                        "offset": 4575464
                    },
                    {
                        "function": "ResumeThread",
                        "offset": 4575468
                    },
                    {
                        "function": "SetThreadContext",
                        "offset": 4575472
                    },
                    {
                        "function": "ResetEvent",
                        "offset": 4575476
                    },
                    {
                        "function": "GetThreadContext",
                        "offset": 4575480
                    },
                    {
                        "function": "SetThreadPriority",
                        "offset": 4575484
                    },
                    {
                        "function": "SuspendThread",
                        "offset": 4575488
                    },
                    {
                        "function": "SetEvent",
                        "offset": 4575492
                    },
                    {
                        "function": "GetThreadPriority",
                        "offset": 4575496
                    },
                    {
                        "function": "VirtualFree",
                        "offset": 4575500
                    },
                    {
                        "function": "VirtualQuery",
                        "offset": 4575504
                    },
                    {
                        "function": "GetExitCodeThread",
                        "offset": 4575508
                    },
                    {
                        "function": "TerminateThread",
                        "offset": 4575512
                    },
                    {
                        "function": "CreateThread",
                        "offset": 4575516
                    },
                    {
                        "function": "FreeEnvironmentStringsA",
                        "offset": 4575520
                    },
                    {
                        "function": "GetEnvironmentStrings",
                        "offset": 4575524
                    },
                    {
                        "function": "SetFileTime",
                        "offset": 4575528
                    },
                    {
                        "function": "SystemTimeToFileTime",
                        "offset": 4575532
                    },
                    {
                        "function": "InterlockedExchange",
                        "offset": 4575536
                    },
                    {
                        "function": "SetEnvironmentVariableA",
                        "offset": 4575540
                    },
                    {
                        "function": "FreeLibrary",
                        "offset": 4575544
                    },
                    {
                        "function": "DeleteFileA",
                        "offset": 4575548
                    },
                    {
                        "function": "GetModuleHandleA",
                        "offset": 4575552
                    },
                    {
                        "function": "GetLocalTime",
                        "offset": 4575556
                    },
                    {
                        "function": "GetCommandLineA",
                        "offset": 4575560
                    },
                    {
                        "function": "GetStartupInfoA",
                        "offset": 4575564
                    }
                ],
                "MSVCRT.dll": [
                    {
                        "function": "_setmode",
                        "offset": 4575572
                    },
                    {
                        "function": "_write",
                        "offset": 4575576
                    },
                    {
                        "function": "_chsize",
                        "offset": 4575580
                    },
                    {
                        "function": "_umask",
                        "offset": 4575584
                    },
                    {
                        "function": "_chmod",
                        "offset": 4575588
                    },
                    {
                        "function": "_fstat",
                        "offset": 4575592
                    },
                    {
                        "function": "_rmdir",
                        "offset": 4575596
                    },
                    {
                        "function": "_mkdir",
                        "offset": 4575600
                    },
                    {
                        "function": "_chdir",
                        "offset": 4575604
                    },
                    {
                        "function": "_read",
                        "offset": 4575608
                    },
                    {
                        "function": "_dup2",
                        "offset": 4575612
                    },
                    {
                        "function": "_dup",
                        "offset": 4575616
                    },
                    {
                        "function": "_hypot",
                        "offset": 4575620
                    },
                    {
                        "function": "_tzname",
                        "offset": 4575624
                    },
                    {
                        "function": "_fileno",
                        "offset": 4575628
                    },
                    {
                        "function": "_getpid",
                        "offset": 4575632
                    },
                    {
                        "function": "_stat",
                        "offset": 4575636
                    },
                    {
                        "function": "_getcwd",
                        "offset": 4575640
                    },
                    {
                        "function": "_strdup",
                        "offset": 4575644
                    },
                    {
                        "function": "_fdopen",
                        "offset": 4575648
                    },
                    {
                        "function": "_tzset",
                        "offset": 4575652
                    },
                    {
                        "function": "_strnicmp",
                        "offset": 4575656
                    },
                    {
                        "function": "_stricmp",
                        "offset": 4575660
                    },
                    {
                        "function": "_lseek",
                        "offset": 4575664
                    },
                    {
                        "function": "_controlfp",
                        "offset": 4575668
                    },
                    {
                        "function": "_except_handler3",
                        "offset": 4575672
                    },
                    {
                        "function": "__set_app_type",
                        "offset": 4575676
                    },
                    {
                        "function": "__p__fmode",
                        "offset": 4575680
                    },
                    {
                        "function": "__p__commode",
                        "offset": 4575684
                    },
                    {
                        "function": "_adjust_fdiv",
                        "offset": 4575688
                    },
                    {
                        "function": "__setusermatherr",
                        "offset": 4575692
                    },
                    {
                        "function": "_initterm",
                        "offset": 4575696
                    },
                    {
                        "function": "__getmainargs",
                        "offset": 4575700
                    },
                    {
                        "function": "_acmdln",
                        "offset": 4575704
                    },
                    {
                        "function": "_XcptFilter",
                        "offset": 4575708
                    },
                    {
                        "function": "_onexit",
                        "offset": 4575712
                    },
                    {
                        "function": "__dllonexit",
                        "offset": 4575716
                    },
                    {
                        "function": "_access",
                        "offset": 4575720
                    },
                    {
                        "function": "_open",
                        "offset": 4575724
                    },
                    {
                        "function": "_unlink",
                        "offset": 4575728
                    },
                    {
                        "function": "strftime",
                        "offset": 4575732
                    },
                    {
                        "function": "asctime",
                        "offset": 4575736
                    },
                    {
                        "function": "??3@YAXPAX@Z",
                        "offset": 4575740
                    },
                    {
                        "function": "strrchr",
                        "offset": 4575744
                    },
                    {
                        "function": "strcmp",
                        "offset": 4575748
                    },
                    {
                        "function": "??2@YAPAXI@Z",
                        "offset": 4575752
                    },
                    {
                        "function": "strcpy",
                        "offset": 4575756
                    },
                    {
                        "function": "strlen",
                        "offset": 4575760
                    },
                    {
                        "function": "strncat",
                        "offset": 4575764
                    },
                    {
                        "function": "sprintf",
                        "offset": 4575768
                    },
                    {
                        "function": "log",
                        "offset": 4575772
                    },
                    {
                        "function": "sqrt",
                        "offset": 4575776
                    },
                    {
                        "function": "fabs",
                        "offset": 4575780
                    },
                    {
                        "function": "_isnan",
                        "offset": 4575784
                    },
                    {
                        "function": "_finite",
                        "offset": 4575788
                    },
                    {
                        "function": "fprintf",
                        "offset": 4575792
                    },
                    {
                        "function": "_iob",
                        "offset": 4575796
                    },
                    {
                        "function": "exp",
                        "offset": 4575800
                    },
                    {
                        "function": "_get_osfhandle",
                        "offset": 4575804
                    },
                    {
                        "function": "memset",
                        "offset": 4575808
                    },
                    {
                        "function": "_errno",
                        "offset": 4575812
                    },
                    {
                        "function": "strncpy",
                        "offset": 4575816
                    },
                    {
                        "function": "free",
                        "offset": 4575820
                    },
                    {
                        "function": "fclose",
                        "offset": 4575824
                    },
                    {
                        "function": "_close",
                        "offset": 4575828
                    },
                    {
                        "function": "_exit",
                        "offset": 4575832
                    },
                    {
                        "function": "memcpy",
                        "offset": 4575836
                    },
                    {
                        "function": "strpbrk",
                        "offset": 4575840
                    },
                    {
                        "function": "strchr",
                        "offset": 4575844
                    },
                    {
                        "function": "_pctype",
                        "offset": 4575848
                    },
                    {
                        "function": "_isctype",
                        "offset": 4575852
                    },
                    {
                        "function": "__mb_cur_max",
                        "offset": 4575856
                    },
                    {
                        "function": "bsearch",
                        "offset": 4575860
                    },
                    {
                        "function": "tolower",
                        "offset": 4575864
                    },
                    {
                        "function": "realloc",
                        "offset": 4575868
                    },
                    {
                        "function": "strcat",
                        "offset": 4575872
                    },
                    {
                        "function": "__pioinfo",
                        "offset": 4575876
                    },
                    {
                        "function": "__doserrno",
                        "offset": 4575880
                    },
                    {
                        "function": "_open_osfhandle",
                        "offset": 4575884
                    },
                    {
                        "function": "strerror",
                        "offset": 4575888
                    },
                    {
                        "function": "_sys_nerr",
                        "offset": 4575892
                    },
                    {
                        "function": "mktime",
                        "offset": 4575896
                    },
                    {
                        "function": "raise",
                        "offset": 4575900
                    },
                    {
                        "function": "clock",
                        "offset": 4575904
                    },
                    {
                        "function": "_filbuf",
                        "offset": 4575908
                    },
                    {
                        "function": "_flsbuf",
                        "offset": 4575912
                    },
                    {
                        "function": "fflush",
                        "offset": 4575916
                    },
                    {
                        "function": "gmtime",
                        "offset": 4575920
                    },
                    {
                        "function": "_vsnprintf",
                        "offset": 4575924
                    },
                    {
                        "function": "memmove",
                        "offset": 4575928
                    },
                    {
                        "function": "strtoul",
                        "offset": 4575932
                    },
                    {
                        "function": "_ftol",
                        "offset": 4575936
                    },
                    {
                        "function": "_HUGE",
                        "offset": 4575940
                    },
                    {
                        "function": "pow",
                        "offset": 4575944
                    },
                    {
                        "function": "memcmp",
                        "offset": 4575948
                    },
                    {
                        "function": "strncmp",
                        "offset": 4575952
                    },
                    {
                        "function": "abort",
                        "offset": 4575956
                    },
                    {
                        "function": "vfprintf",
                        "offset": 4575960
                    },
                    {
                        "function": "fputs",
                        "offset": 4575964
                    },
                    {
                        "function": "fwrite",
                        "offset": 4575968
                    },
                    {
                        "function": "exit",
                        "offset": 4575972
                    },
                    {
                        "function": "__p__environ",
                        "offset": 4575976
                    },
                    {
                        "function": "_setjmp3",
                        "offset": 4575980
                    },
                    {
                        "function": "memchr",
                        "offset": 4575984
                    },
                    {
                        "function": "signal",
                        "offset": 4575988
                    },
                    {
                        "function": "longjmp",
                        "offset": 4575992
                    },
                    {
                        "function": "printf",
                        "offset": 4575996
                    },
                    {
                        "function": "fopen",
                        "offset": 4576000
                    },
                    {
                        "function": "fseek",
                        "offset": 4576004
                    },
                    {
                        "function": "malloc",
                        "offset": 4576008
                    },
                    {
                        "function": "clearerr",
                        "offset": 4576012
                    },
                    {
                        "function": "ungetc",
                        "offset": 4576016
                    },
                    {
                        "function": "fread",
                        "offset": 4576020
                    },
                    {
                        "function": "ftell",
                        "offset": 4576024
                    },
                    {
                        "function": "_commit",
                        "offset": 4576028
                    },
                    {
                        "function": "freopen",
                        "offset": 4576032
                    },
                    {
                        "function": "_pipe",
                        "offset": 4576036
                    },
                    {
                        "function": "modf",
                        "offset": 4576040
                    },
                    {
                        "function": "ldexp",
                        "offset": 4576044
                    },
                    {
                        "function": "frexp",
                        "offset": 4576048
                    },
                    {
                        "function": "atan",
                        "offset": 4576052
                    },
                    {
                        "function": "atan2",
                        "offset": 4576056
                    },
                    {
                        "function": "cos",
                        "offset": 4576060
                    },
                    {
                        "function": "sin",
                        "offset": 4576064
                    },
                    {
                        "function": "tan",
                        "offset": 4576068
                    },
                    {
                        "function": "acos",
                        "offset": 4576072
                    },
                    {
                        "function": "asin",
                        "offset": 4576076
                    },
                    {
                        "function": "cosh",
                        "offset": 4576080
                    },
                    {
                        "function": "sinh",
                        "offset": 4576084
                    },
                    {
                        "function": "tanh",
                        "offset": 4576088
                    },
                    {
                        "function": "log10",
                        "offset": 4576092
                    },
                    {
                        "function": "fmod",
                        "offset": 4576096
                    },
                    {
                        "function": "floor",
                        "offset": 4576100
                    },
                    {
                        "function": "ceil",
                        "offset": 4576104
                    },
                    {
                        "function": "atoi",
                        "offset": 4576108
                    },
                    {
                        "function": "time",
                        "offset": 4576112
                    },
                    {
                        "function": "strstr",
                        "offset": 4576116
                    },
                    {
                        "function": "toupper",
                        "offset": 4576120
                    },
                    {
                        "function": "localtime",
                        "offset": 4576124
                    },
                    {
                        "function": "_daylight",
                        "offset": 4576128
                    }
                ],
                "USER32.dll": [
                    {
                        "function": "EndDialog",
                        "offset": 4576136
                    },
                    {
                        "function": "MessageBeep",
                        "offset": 4576140
                    },
                    {
                        "function": "SendMessageA",
                        "offset": 4576144
                    },
                    {
                        "function": "GetDlgItem",
                        "offset": 4576148
                    },
                    {
                        "function": "SetWindowTextA",
                        "offset": 4576152
                    },
                    {
                        "function": "wsprintfA",
                        "offset": 4576156
                    },
                    {
                        "function": "GetWindowTextA",
                        "offset": 4576160
                    },
                    {
                        "function": "SetDlgItemTextA",
                        "offset": 4576164
                    },
                    {
                        "function": "LoadStringA",
                        "offset": 4576168
                    },
                    {
                        "function": "LoadIconA",
                        "offset": 4576172
                    },
                    {
                        "function": "LoadCursorA",
                        "offset": 4576176
                    },
                    {
                        "function": "CharNextA",
                        "offset": 4576180
                    },
                    {
                        "function": "CharPrevA",
                        "offset": 4576184
                    },
                    {
                        "function": "DialogBoxParamA",
                        "offset": 4576188
                    }
                ],
                "WSOCK32.dll": [
                    {
                        "function": "inet_ntoa",
                        "offset": 4576196
                    },
                    {
                        "function": "getsockname",
                        "offset": 4576200
                    },
                    {
                        "function": "getpeername",
                        "offset": 4576204
                    },
                    {
                        "function": "connect",
                        "offset": 4576208
                    },
                    {
                        "function": "bind",
                        "offset": 4576212
                    },
                    {
                        "function": "accept",
                        "offset": 4576216
                    },
                    {
                        "function": "listen",
                        "offset": 4576220
                    },
                    {
                        "function": "WSACleanup",
                        "offset": 4576224
                    },
                    {
                        "function": "setsockopt",
                        "offset": 4576228
                    },
                    {
                        "function": "getsockopt",
                        "offset": 4576232
                    },
                    {
                        "function": "select",
                        "offset": 4576236
                    },
                    {
                        "function": "WSAGetLastError",
                        "offset": 4576240
                    },
                    {
                        "function": "__WSAFDIsSet",
                        "offset": 4576244
                    },
                    {
                        "function": "recv",
                        "offset": 4576248
                    },
                    {
                        "function": "recvfrom",
                        "offset": 4576252
                    },
                    {
                        "function": "send",
                        "offset": 4576256
                    },
                    {
                        "function": "sendto",
                        "offset": 4576260
                    },
                    {
                        "function": "shutdown",
                        "offset": 4576264
                    },
                    {
                        "function": "socket",
                        "offset": 4576268
                    },
                    {
                        "function": "gethostbyaddr",
                        "offset": 4576272
                    },
                    {
                        "function": "gethostbyname",
                        "offset": 4576276
                    },
                    {
                        "function": "gethostname",
                        "offset": 4576280
                    },
                    {
                        "function": "getprotobyname",
                        "offset": 4576284
                    },
                    {
                        "function": "getprotobynumber",
                        "offset": 4576288
                    },
                    {
                        "function": "getservbyname",
                        "offset": 4576292
                    },
                    {
                        "function": "getservbyport",
                        "offset": 4576296
                    },
                    {
                        "function": "closesocket",
                        "offset": 4576300
                    },
                    {
                        "function": "WSAStartup",
                        "offset": 4576304
                    }
                ]
            },
            "relocations": {
                "Size": 0,
                "VirtualAddress": 0,
                "count": 0,
                "details": {}
            },
            "resources": [
                {
                    "data": "b'(\\x00\\x00\\x000\\x00\\x00\\x00`\\x00\\x00\\x00\\x01\\x00\\x04\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x80'",
                    "executable": false,
                    "language": "LANG_JAPANESE",
                    "name": "RT_ICON_1",
                    "offset": 574224,
                    "size": 1640,
                    "sublanguage": "SUBLANG_DEFAULT"
                },
                {
                    "data": "b'(\\x00\\x00\\x00 \\x00\\x00\\x00@\\x00\\x00\\x00\\x01\\x00\\x04\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x80'",
                    "executable": false,
                    "language": "LANG_JAPANESE",
                    "name": "RT_ICON_2",
                    "offset": 575872,
                    "size": 744,
                    "sublanguage": "SUBLANG_DEFAULT"
                },
                {
                    "data": "b'(\\x00\\x00\\x00\\x10\\x00\\x00\\x00 \\x00\\x00\\x00\\x01\\x00\\x04\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x80'",
                    "executable": false,
                    "language": "LANG_JAPANESE",
                    "name": "RT_ICON_3",
                    "offset": 576624,
                    "size": 296,
                    "sublanguage": "SUBLANG_DEFAULT"
                },
                {
                    "data": "b'(\\x00\\x00\\x000\\x00\\x00\\x00`\\x00\\x00\\x00\\x01\\x00 \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'",
                    "executable": false,
                    "language": "LANG_JAPANESE",
                    "name": "RT_ICON_4",
                    "offset": 576928,
                    "size": 9640,
                    "sublanguage": "SUBLANG_DEFAULT"
                },
                {
                    "data": "b'(\\x00\\x00\\x000\\x00\\x00\\x00`\\x00\\x00\\x00\\x01\\x00\\x08\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00{w\\xb1\\x00\\x92{\\xe9\\x00\\x00\\x00'",
                    "executable": false,
                    "language": "LANG_JAPANESE",
                    "name": "RT_ICON_5",
                    "offset": 586576,
                    "size": 3752,
                    "sublanguage": "SUBLANG_DEFAULT"
                },
                {
                    "data": "b'(\\x00\\x00\\x00 \\x00\\x00\\x00@\\x00\\x00\\x00\\x01\\x00 \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'",
                    "executable": false,
                    "language": "LANG_JAPANESE",
                    "name": "RT_ICON_6",
                    "offset": 590336,
                    "size": 4264,
                    "sublanguage": "SUBLANG_DEFAULT"
                },
                {
                    "data": "b'(\\x00\\x00\\x00 \\x00\\x00\\x00@\\x00\\x00\\x00\\x01\\x00\\x08\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\xa2\\x97\\xe5\\x00\\x00\\x00\\x00\\x00\\x94j'",
                    "executable": false,
                    "language": "LANG_JAPANESE",
                    "name": "RT_ICON_7",
                    "offset": 594608,
                    "size": 2216,
                    "sublanguage": "SUBLANG_DEFAULT"
                },
                {
                    "data": "b'(\\x00\\x00\\x00\\x10\\x00\\x00\\x00 \\x00\\x00\\x00\\x01\\x00 \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\xff\\xff\\xff\\x00\\xff\\xff\\xff\\x00\\x00\\x00'",
                    "executable": false,
                    "language": "LANG_JAPANESE",
                    "name": "RT_ICON_8",
                    "offset": 596832,
                    "size": 1128,
                    "sublanguage": "SUBLANG_DEFAULT"
                },
                {
                    "data": "b'(\\x00\\x00\\x00\\x10\\x00\\x00\\x00 \\x00\\x00\\x00\\x01\\x00\\x08\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x99\\xff\\xff\\x00\\x91\\xf7'",
                    "executable": false,
                    "language": "LANG_JAPANESE",
                    "name": "RT_ICON_9",
                    "offset": 597968,
                    "size": 1384,
                    "sublanguage": "SUBLANG_DEFAULT"
                },
                {
                    "data": "b'\\xc0\\x08\\xca\\x80\\x00\\x00\\x00\\x00\\t\\x00\\x00\\x00\\x00\\x00\\x0b\\x01\\xd7\\x00\\x00\\x00\\x00\\x00E\\x00x\\x00c\\x00e\\x00p\\x00t\\x00i\\x00o\\x00n\\x00 \\x00-\\x00 \\x00%\\x00s\\x00'",
                    "executable": false,
                    "language": "LANG_ENGLISH",
                    "name": "RT_DIALOG",
                    "offset": 599360,
                    "size": 514,
                    "sublanguage": "SUBLANG_ENGLISH_US"
                },
                {
                    "data": "b'\\xc0\\x08\\xca\\x80\\x00\\x00\\x00\\x00\\t\\x00\\x00\\x00\\x00\\x00\\x0b\\x01\\xd7\\x00\\x00\\x00\\x00\\x00\\x8bO\\x16Y \\x00-\\x00 \\x00%\\x00s\\x00\\x00\\x00\\t\\x00-\\xff3\\xff \\x000\\xff\\xb40'",
                    "executable": false,
                    "language": "LANG_JAPANESE",
                    "name": "RT_DIALOG",
                    "offset": 599888,
                    "size": 426,
                    "sublanguage": "SUBLANG_DEFAULT"
                },
                {
                    "data": "b'\\x00\\x00\\x01\\x00\\t\\x0000\\x10\\x00\\x01\\x00\\x04\\x00h\\x06\\x00\\x00\\x01\\x00  \\x10\\x00\\x01\\x00\\x04\\x00\\xe8\\x02\\x00\\x00\\x02\\x00\\x10\\x10\\x10\\x00\\x01\\x00\\x04\\x00(\\x01\\x00\\x00\\x03\\x0000'",
                    "executable": false,
                    "language": "LANG_JAPANESE",
                    "name": "RT_GROUP_ICON",
                    "offset": 600320,
                    "size": 132,
                    "sublanguage": "SUBLANG_DEFAULT"
                },
                {
                    "data": "b',\\x034\\x00\\x00\\x00V\\x00S\\x00_\\x00V\\x00E\\x00R\\x00S\\x00I\\x00O\\x00N\\x00_\\x00I\\x00N\\x00F\\x00O\\x00\\x00\\x004\\x00\\xbd\\x04\\xef\\xfe\\x00\\x00\\x01\\x00\\x03\\x00'",
                    "executable": false,
                    "language": "LANG_JAPANESE",
                    "name": "RT_VERSION",
                    "offset": 600464,
                    "size": 812,
                    "sublanguage": "SUBLANG_DEFAULT"
                },
                {
                    "data": "b'EXERB\\x00\\x00\\x03\\x00\\x00\\x00\\x00 \\x00\\x00\\x00\\xe0\\x02\\x00\\x00Pg\\x06\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00NT\\x00\\x01#\\x00\\x10\\x00\\x00\\x00\\xf0\\x00\\x00\\x00\\x00\\x00\\x01\\x00'",
                    "executable": false,
                    "language": "LANG_JAPANESE",
                    "name": "None",
                    "offset": 601280,
                    "size": 419680,
                    "sublanguage": "SUBLANG_DEFAULT"
                }
            ],
            "sign": {},
            "tls": {
                "AddressOfCallBacks": 65535,
                "AddressOfIndex": 4,
                "Characteristics": 0,
                "EndAddressOfRawData": 3,
                "SizeOfZeroFill": 184,
                "StartAddressOfRawData": 9460301
            }
        },
        "dll": false,
        "entrypoint": 377370,
        "features": {
            "antidbg": [
                "GetLastError",
                "OutputDebugStringA",
                "TerminateProcess"
            ],
            "antivm": {},
            "crypto": [
                "Big_Numbers1",
                "CRC32_poly_Constant",
                "CRC32_table",
                "MD5_Constants",
                "BASE64_table"
            ],
            "mutex": [
                "WaitForSingleObject"
            ],
            "packer": [
                "Microsoft_Visual_Cpp_v60",
                "Microsoft_Visual_Cpp_v50v60_MFC_additional",
                "Microsoft_Visual_Cpp_50",
                "Microsoft_Visual_Cpp_v50v60_MFC",
                "Microsoft_Visual_Cpp"
            ],
            "xor": {}
        },
        "imagebase": 4194304,
        "imphash": "de1afd22bb3de092a97c31a52e568486",
        "metadata": {
            "Comments": "by neet",
            "CompanyName": "neet",
            "FileDescription": "Winamp media file",
            "FileVersion": "neet",
            "InternalName": "neet",
            "LegalCopyright": "Copyright(C) neet.",
            "LegalTrademarks": "neet",
            "OriginalFilename": "neet",
            "PrivateBuild": "",
            "ProductName": "neet",
            "ProductVersion": "neet",
            "SpecialBuild": ""
        },
        "sections": {
            "count": 4,
            "details": [
                {
                    "characteristics": 1610612768,
                    "data": "b'U\\x8b\\xecQ\\x8dE\\x0cVP\\x8dE\\x08P\\xe8*+\\x00\\x00YY\\",
                    "entropy": 6.6491077220042945,
                    "executable": true,
                    "hash": {
                        "md5": "818f6da8b67fcf39ecde3874fae858d3",
                        "sha1": "0fbfe860b10be1af661eafd752fce9bf649688a5",
                        "sha256": "5b78b8f5d5e1810a0187a36a74fbdfb61b0c5e140f0002ff85c95bfd2a9450d5"
                    },
                    "section_name": ".text",
                    "size_of_raw_data": 376832,
                    "virtual_address": 4096,
                    "virtual_size": 373680
                },
                {
                    "characteristics": 1073741888,
                    "data": "b'\\\\\\xb2\\x06\\x00\\x00\\x00\\x00\\x004\\xb2\\x06\\x00D\\xb2",
                    "entropy": 5.225721892309807,
                    "executable": false,
                    "hash": {
                        "md5": "dd77362810e4614e7290b453c4defd83",
                        "sha1": "202ec42553e2e9cf6466cf0d5482ac328ffa4ccf",
                        "sha256": "98230d05d66ed295b84ee7d9e45ee2979728793647674c50ed6c79bf59650273"
                    },
                    "section_name": ".rdata",
                    "size_of_raw_data": 81920,
                    "virtual_address": 380928,
                    "virtual_size": 80968
                },
                {
                    "characteristics": 3221225536,
                    "data": "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00",
                    "entropy": 5.030149706507124,
                    "executable": false,
                    "hash": {
                        "md5": "9e45f853ee4ffa02f9e91ca67fd3280c",
                        "sha1": "ba86f38d52e4c92f624e6390a36b8b45b2db8444",
                        "sha256": "9f010c9937c0830c8b8781a8f4bbb00efecb927807af07a819418d1ec61fc681"
                    },
                    "section_name": ".data",
                    "size_of_raw_data": 45056,
                    "virtual_address": 462848,
                    "virtual_size": 107748
                },
                {
                    "characteristics": 1073741888,
                    "data": "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00",
                    "entropy": 6.094614452234981,
                    "executable": false,
                    "hash": {
                        "md5": "d20431c0004de7918e50103a43065de3",
                        "sha1": "f5ec0d84e704bc8d3b07b97eda12836b9e6f3966",
                        "sha256": "e0b2136de503eee31538f9e2d79b5b315f5755b783fd472a89aaedc32321025b"
                    },
                    "section_name": ".rsrc",
                    "size_of_raw_data": 450560,
                    "virtual_address": 573440,
                    "virtual_size": 447520
                }
            ]
        },
        "timestamp": "2006-02-06 00:36:50"
    },
    "strings": {
        "dump": [
            "L!This program cannot be run in DOS mode.",
            "!OOO\u058bCOsAO\u059fEO\u059fKO\u0592\\ONODOEO7IO",
            "KORichO",
            ".text",
            "`.rdata",
            "@.data",
            ".rsrc",
            "HQP#",
            "P5XH",
            " E3Puu",
            "9ut<5H",
            "XUQQV3V",
            "MuQMQjdjdPuS",
            "8EXER",
            ";tq9p",
            "tl9p",
            "Hu h|",
            "3f9p",
            ";|_^VW",
            "3f9x",
            "w.VH",
            ";|_^h",
            "~bSVW4\u017cG",
            "j@Y3fh",
            "KYu_^[U",
            "3XuE",
            "EEuPE",
            "PEPS",
            "Yumu",
            "3_^[",
            "WYYu",
            "SVWx",
            "0t4WV",
            "YYt;h",
            "r2_^[]V",
            "YPq\t",
            "USVW3Wu",
            "vcV1",
            "2_^[]",
            "YY0M",
            "UQQSVWh",
            "u#]S",
            "2_^[",
            "P5\u0733H",
            "XVt$",
            "_^SUl$",
            "VWUs",
            "UWSi",
            "8_^][Vt$",
            "_^Vt$",
            "YEPuu",
            "j@Y3u",
            "fSPh",
            "Y_^[U$",
            "3Y}EPu",
            "Vj@Y3h",
            "VEht",
            "VEh`",
            "VEhP",
            "}t%Eu",
            "YYt+E",
            "YM;r u",
            "Y8+EY",
            "YYtUH",
            "uEPd",
            "j@Y3f",
            "_^[h",
            "USVu",
            "3Y9=G",
            "YYt8G",
            "|V<F",
            "u=3\u0138G",
            "_^[]",
            "F(;|3_^U",
            "SVWu",
            "Y3}fEP\u0520",
            "Y+\u020dEQSP",
            "Ej.P",
            "t%=E",
            "VYYt",
            "VYYu",
            "_^[u",
            "SVWH<",
            "E~b3",
            "u;|E",
            "E;E|2_^[",
            "V5 E",
            "h/!@",
            "0^UVW}",
            "u2_^]",
            "WtV=E",
            "VYYt8ht",
            "VYYt*h",
            "YYt#H",
            "VW|$",
            "tV5E",
            "WYYt8ht",
            "WYYt*h",
            "YYt#H",
            "VW|$",
            "t&5E",
            "WYYt",
            "WYYu",
            "<^t$",
            "SVW|$",
            "SVh(",
            "SVh ",
            "@SVh",
            "@SVh",
            "@SVh",
            "h\\%@",
            "@SVh",
            "@SVhx",
            "SVhp",
            "SVhl",
            "SVhd",
            "@SVh`",
            "SVhX",
            "SVhP",
            "SVhH",
            "@SVh<",
            "SVh0",
            "SVh(",
            "SVh ",
            "@SVh",
            "@SVh",
            "_^[j",
            "SV3W9u",
            "YYPh",
            "YYPh",
            "j@Y3fj@3Yj@fY3f",
            "VVVh",
            "VVVj",
            "VPj0S",
            "X_^[",
            "h()@",
            "hj)@",
            "hq*@",
            "Wj@Y3h",
            "Wj@Y3h",
            "_Vt$",
            "SVWu",
            "f39=",
            "X_^[",
            "YSVWt$",
            "3Y9=",
            "X_^[P",
            "YSVWt$",
            "3Y9=",
            "X_^[Pq",
            "^V395 G",
            "W~\"(G",
            "YYt F",
            ";5 G",
            "_^VW39= G",
            "~\"(G",
            ";= G",
            "|2_^",
            "3_VW\u0212",
            "^_3VPPj",
            "Y^3VPPj",
            "@t$ ",
            "Y^Vt$",
            "Y^UQEj",
            "Y^EUQEj",
            "Y^EWj",
            "Y^_t$",
            "j\\WYYu",
            "j/WYYt",
            "_^VWt$",
            "u <>.",
            "3_^U",
            "VWj@Y3fPh",
            "PQPu",
            "f90t",
            "^VW_\ud847\udc37G",
            "3f9x",
            "v)t$",
            "VjYP",
            "YYt^G",
            ";|\u05c3|$",
            "3f9x",
            "v-t$",
            "V\"YP",
            ";|3_^",
            "f90t",
            "%YYt",
            "PY3U",
            "YYQQ",
            "YY]UQQE",
            "UYYs",
            "^Vt$",
            "_^U@S]",
            "Hw_^[U",
            "VWj@h",
            "Y}uj C",
            "HOu|PShhG",
            "s?3L",
            "N}ME",
            "~j@hH",
            "S%j@h",
            "_^[U",
            "SVWu",
            "}YEj05",
            "OYuj",
            "}YEj0h",
            "p3\u024aT",
            "@;wM",
            "|j hH",
            "_^[UE",
            "W+\u038d~A_X",
            "t/M;s=j",
            "GJu ",
            "FGu\u060dE;s",
            "M3+\u03cb",
            "EPPY3j",
            "xYx3",
            "[9]|",
            "YNYu",
            "ANu.9~",
            "EB;r\u0540\"",
            "YYu+QQ",
            "YYuW",
            "M]EUt*E",
            "|\u03a14E",
            "j)@h",
            "U ]E",
            "$-PE",
            "UuYE",
            "HEEe",
            "U]UM]EM}Ut*E",
            "jA@h",
            "YYu+QQ",
            "YYu[",
            "]UQtG",
            "P5tG",
            "YP5xG",
            "t2Vh",
            "SVW3j",
            "EWP1",
            "HtPHtB",
            "t2Ht$HHt",
            "lEPVVWu",
            "2EPVVWj",
            "EPVVWj",
            "EPVVWj",
            "EPVVWWu",
            "_^[QD$",
            "SUVWHH|$",
            "tKHHt",
            "ZUUj",
            "\u020b5DE",
            "_^][Y",
            "uQEP4P",
            "t2E@PJ",
            "u4pG",
            "Y3t$",
            "YU8E",
            "9]=LE",
            "Et?Eh",
            "PEPEP",
            "SESPuuu\u05c5",
            "u9]t?Eh",
            "PEPEP",
            "SESPuuu\u05c5",
            "uuSEuuPSu",
            "9]=E",
            "t;uu",
            "Yu\u0583}",
            "Y;YM",
            "9]t>E",
            "Yu\u0583}",
            "Y;YM",
            "0u\u070b50E",
            "8uuu9]twuu",
            "uu9]tYuuMu",
            "Y9]t.uu\"u",
            "Y9]t",
            "E_^[",
            "UVW39}",
            "mWWWWWu",
            ";tcE",
            "+t1Ht)HuVj6",
            "_^]U",
            "S39]",
            "\u0243\tt ",
            "H@+7",
            "u6;}",
            "tM<\"t",
            ".+]SuWw~",
            "uj\\W^~",
            "3F+uVuWH~",
            " EG0;",
            "R;}v",
            "OSS'",
            ";tcE",
            "+t1Ht)HuVj6",
            "e_^[UdSVW39}",
            ";\u01c9Eu",
            "jDE^VWP#}",
            "t85|E",
            "j\u0585Et",
            "j\u0589E\u0605t",
            "j\u0589E\u070bu",
            "tE+F",
            "F<s0",
            "qu\tS{",
            "Yh( G",
            "Yt3Sl{",
            "YYt#S",
            "YYue",
            "E3PEPE",
            "WWj p",
            ";u[Ex",
            "3{+u",
            "\u018de_^[",
            "E_EV}",
            "~%L0/t",
            "h4 G",
            "p#\u01c5t\"V",
            "E9EtuE",
            "<tD>t?|u?8EhF@",
            "3_^[",
            "S2\u06c08",
            "\u0283\"t*",
            "X[3[U",
            "E33 ]",
            "Gth\t|R",
            "~- t(\"t",
            "_.?t",
            "E3@E",
            "m]+t",
            "oCGm\u03c3",
            "}+9]u",
            "CN]?8E",
            "C/\u018b+",
            "E}8u",
            "EYuME",
            "EY_[^U",
            "SVW}",
            "VYE;E",
            "YW\u04cbE",
            "Y_^[Vj",
            "t$ N",
            "D$, ",
            "10^Vt$",
            "F\u01cb^Uh",
            "SVW}",
            "EPW$",
            "E@up",
            "_ZAu",
            "Phd G",
            "h` G",
            "h\\ G",
            "YYPP",
            "\u04c5tRPq",
            "}YYPu",
            "h@ G",
            "_^[Vt$",
            "tEWPOq",
            "V5LE",
            "7WYY_^UE",
            "SVW@t",
            "3VVj",
            "VVVhh G",
            "_^[]UQE",
            "PEPh",
            "hl G",
            "YYVo",
            "VWt$",
            "Y3L$",
            ";r;u",
            "_^VWt$",
            "Y3\u048bL$",
            "1v,y",
            "N;r\t_^Vt$",
            "u't#F",
            "jAY}",
            "jAYE",
            "_^[US]",
            ";r;u",
            "^[]UTVj",
            "EPEPh",
            "h| G",
            "YP2j",
            "^U=G",
            "YP<i",
            "^U=G",
            "YP=h",
            "^U=G",
            "^]U=G",
            "YP;g",
            "YP=g",
            "PAYY",
            "oVm\t",
            "&V$\t",
            "8_M\t",
            "YYAu",
            "YYt3_^[",
            "r3UVu",
            "8VY(}",
            "3_^]U4EP",
            "EE\u0303M",
            "3Vt$",
            "u^SVt$",
            "u*;t&\tt!P",
            ";t%t SW",
            "\u0585tRPbY",
            "um=G",
            "t,h G",
            "t\t=G",
            "VW5G",
            "\u05cbt4;5G",
            "v%V5G",
            "VPt$",
            "3_^Qd$",
            "SUl$",
            "WU\u058b|$",
            "W\u05839t$",
            "WU\u04c5u2t$",
            "t;d$",
            "_^][YW",
            "WU\u04c5tPY",
            "0UVu",
            "+thx\"tb",
            "'<\\t#h",
            "YYu%ff",
            "e_^]",
            "V8\\u[x",
            "\\uUH",
            "\\t\tP\u058a",
            "t2@8",
            "X^3^U EPEPEPEP",
            "t(EVP8",
            "Y3YF",
            "V33\u024bP",
            "^UQQE",
            "V3Wt",
            "E^TG",
            "DEFj",
            "SVW5d",
            "VCS5d",
            "HP5d",
            "PE\u0589E",
            "SW5TG",
            "L3;u",
            "QQQQ",
            "\u04cdL\u01c5L",
            "X_[^",
            "^VW7t$",
            "VWt$",
            "3VYYtV",
            "95\u0222G",
            "u395lH",
            "95@H",
            "V5pH",
            "Y5pH",
            "_^V3V",
            "AVVYY95\u0222G",
            "u395lH",
            "95@H",
            "V5pH",
            "YY5pH",
            "f_^U<SV3uE",
            "EEPEVPhg@",
            "V9utjSYYt",
            "V\u05cdEPS",
            "9u_t?j",
            "EVP&X",
            "9ut;95\u0222G",
            "u395lH",
            "95@H",
            "E^[Vt$",
            "SUVW",
            "Yt4?=t",
            "Yu\u0303e",
            "_^][SV",
            "YuWY_^[V",
            "\u078b^SVW|$",
            "ucSYu",
            "jjPPS",
            "3_^[Vt$",
            "WmYYu",
            "jjPPW",
            "3_^U4VEWPu",
            "3/YYu&}",
            "5EPEPVW",
            ",_^U",
            "fMfH",
            "fAfMfH",
            "fMfH",
            "fMfH",
            "fMfH",
            "fEEP",
            "0^3Vt$",
            "X_t$",
            "YYVWt$",
            "h<!G",
            "h(!G",
            "PYVt$",
            "VCY3\u0245~",
            "SWT$",
            "A;|_[p",
            "^Vt$",
            "hl!G",
            "hd!G",
            "j\tt$",
            "+Sh!G",
            "Y;|;+",
            "ht!G",
            "+AQN",
            "YY;^",
            "[SVt$",
            "3t:F",
            "^S\\$",
            "SPYK",
            "Y_^SVt$",
            "3ubI",
            "_^[Vt$",
            "SVuWu",
            "QPr}",
            "EYYZ",
            "^[]US]",
            "i|e}",
            "WP&YY9Vu",
            "X_^[]S\\$",
            "6l!G",
            "Vhd!G",
            "YY^[Vt$",
            "W39~",
            "GY;~",
            "|_^US]",
            ";_uu",
            "3;\u018bE",
            "3Y9s",
            "tBHSHt",
            "]EEPu",
            "YYSut",
            "03YY",
            "u\tQQ",
            "SVWj",
            "YY-SWvE",
            "EEhu@",
            "Ph.u@",
            "YYS5G",
            "Yu\t|$",
            "?\tt.h",
            "Yt S5G",
            "PY3Vj",
            "3^t$",
            "^Vt$",
            "VjYN",
            ";r_^S\\$",
            "Shw@",
            "Shv@",
            "MQPj",
            "^Vt$",
            "67P4`",
            "h(\"G",
            "tNtJ",
            "u1u-",
            "t(t$",
            "YY)VSP5G",
            ", ^[]",
            "QVJYY^UQSVu",
            "VxY~|W}",
            "QMQP\u8eb1",
            "tC39u",
            "u_^[USVu",
            "W339^",
            "GC;^",
            "X7V9~",
            "Y~(F",
            "?;\u0609~",
            "_^[]USVu",
            "X*W(G",
            "_^[]Vt$",
            "^SVWt$",
            "D$(H",
            "_^[hl!G",
            "hd!G",
            "j\tt$",
            "SVW}",
            "QhD\"G",
            "+Wh!G",
            "Y;|b",
            "PlYY~",
            "_^[]SVt$",
            "W39~",
            "t7t3",
            "X_^[",
            "SVt$",
            "W39~",
            "t8t4",
            "X_^[",
            "W39~",
            "|3_^j",
            "XUSVWu",
            "u!F;u",
            "I_^[]SUVW5\u0133H",
            "hd!G",
            "U5\u0534H",
            "Shn@",
            "_Whx@",
            "h|$G",
            "H3Vht@",
            "ht$G",
            "Vh)@",
            "hl$G",
            "hd$G",
            "Vh,C",
            "hl!G",
            "@Vh)@",
            "h\\$G",
            "WhR@",
            "hX$G",
            "hP$G",
            "hH$G",
            "@Sh@p@",
            "U5\u0534H",
            "hD$G",
            "h@$G",
            "h8$G",
            "@Sh@",
            "h0$G",
            "Sh'@",
            "h($G",
            "Wh/z@",
            "h $G",
            "Whyn@",
            "@Sh@",
            "Vhn@",
            "Vhn@",
            "Sh'@",
            "Vh\"r@",
            "@V#G",
            "U5\u0534H",
            "Uh#G",
            "WhO@",
            "SUh#G",
            "SUh#G",
            "VhZ@",
            "@VhO@",
            "Vhw@",
            "VhGv@",
            "hx#G",
            "Vhl@",
            "hp#G",
            "VUhd#G",
            "Vhl@",
            "h`#G",
            "VUhX#G",
            "hP#G",
            "@Sh@",
            "hD#G",
            "Whx@",
            "h<#G",
            "h0#G",
            "h$#G",
            "@Vh\u030e@",
            "Vhr@",
            "Vhf@",
            "@Whx@",
            "Vhy@",
            "Wh|@",
            "Wh|@",
            "U5\u0534H",
            "Sh@p@",
            "Wh{@",
            "@Wh%|@",
            "Why@",
            "Whb@",
            "h\\ G",
            "@Wh@",
            "WhH@",
            "Vh%@",
            "@Vh#@",
            "Vh\u0258@",
            "Vh~@",
            "Vha@",
            "ht\"G",
            "@Vh;@",
            "hl\"G",
            "h\\\"G",
            "_^][",
            "UQSEVPE",
            "Ph$G",
            "h(!G",
            "VT;^",
            "Y3~2WR",
            "PWV]",
            "_^[VWt$",
            "^YOYu_^D$",
            "St$0v",
            "$_^[",
            "YPt$",
            "vYYUV39u",
            "W;YE",
            "aFY;Y|E",
            "_[^]U}",
            "D]SE",
            "Y+\u018bNt",
            "NYu_E",
            "^[]UQEVPE",
            "Ph!G",
            "Ph!G",
            "E^Vt$",
            "W39~",
            "X_^WC",
            "YVW|$",
            "Nt)G",
            "YYtV",
            "X_^SW",
            "\u0605~\"Vt$",
            "?PSq",
            "Ou^_[U}",
            "VWuiu",
            "hl%G",
            "hD%G",
            "SVW}",
            "HSPPj",
            "_^[VW|$",
            "FY;w",
            "Y|_^VW|$",
            "Y;}_^",
            "$@@UE",
            "YY]Vt$",
            "Vhe@",
            "^QS\\$",
            "3h%G",
            "3Y9s",
            "YYPt$",
            "FY;s",
            "Y|h%G",
            "D$ YYt",
            "\t(_^][YVt$",
            "PVW5",
            "YYSVt$",
            "3Y9~",
            "|_^[Vt$",
            "WV3Y9~",
            "W39|$",
            "SVt$",
            "Y~<F",
            "Yt#F",
            "XPSYYG;~",
            "|\u010b^[_",
            "YPt$",
            "YYUQQEVPEPh!G",
            "YPVYY^SVt$",
            "339^",
            "Y~,UF",
            "UWV5",
            "GC;^",
            "_^[Vt$",
            "pVYY^t$",
            "SVW}",
            "OYuW",
            "YY~8E",
            "MYuu",
            "GY;{",
            "Vu3YE",
            "pYY~8E",
            "MYuu",
            "u'GY;}Y",
            "xE_^[U",
            "VWEu",
            "XPSY}/_",
            "S3Y\u06c9E~!uPVu",
            "uf3~IG",
            "XRuP",
            "F;|EE;E",
            "AE_^[Sw",
            "Y;YtVWVYK",
            " ^[U",
            "SVW33p",
            "E[PEPh$G",
            "EPEPEPh",
            "HtnHt",
            "PEPu\u8257",
            "Y;\u01c9E}",
            "}EVEYM<",
            "~<;~",
            "P_YYE~",
            "t+;\u01cb}",
            "C;|_^[",
            "VWS<",
            "\tST}",
            "Y3;u",
            "YPYY",
            "h$&G",
            "YPY;YE",
            "_^[]S\\$",
            "VW|$",
            "?\tt#hl!G",
            "tfWS",
            "YYWG",
            "uS3~FK",
            "XQP\u0526",
            "F;|j",
            "X_^[3S\\$",
            "VW|$",
            "txtt",
            "?\tu[G",
            "uS3~FK",
            "XQPl",
            "F;|j",
            "X_^[3SVW|$",
            "Y3C;_",
            "[USVW3Wu",
            "YY%u",
            "&YYG;~",
            "_^[]SVW",
            "|_^[UQSVWu",
            "P3\u06c9E",
            "SWuE",
            "CYYF",
            "C;|E",
            "_^[UQQSVWu",
            "P!WVE",
            "PE]p",
            "3\u06c5~Et",
            "PEup",
            "fYYG",
            "C;|E",
            "_^[UQQSVu",
            "3SV+YY\u020bF",
            "WPVF",
            "C;|_E",
            "^[Vt$",
            "VbYY^SVt$",
            "Y_^[Vt$",
            "VYY^",
            "YQUVW|$",
            "]~DSG",
            "USVW'",
            "|\u0143|$",
            "_^]YUQE",
            "SVW}",
            "h8&G",
            "PuWm",
            "E9u|u",
            " Y+E",
            "_^[HVt$",
            "VYY^S\\$",
            "^[S\u8536",
            "YYUQQSVu",
            "L_^[t$",
            "WugH",
            "w:3It",
            "_^UQQe",
            "^PY^t",
            "PYUQQVu",
            "EUfP",
            "h\\&G",
            "S33\u024bWx",
            "Ju\u06c9Mt#<B3Mu",
            "u\u0489Mwx",
            "u\u0649MEj",
            "E3P]{!",
            "M\u0609EUVWRj",
            "^V5\u0434H",
            "\u044b}:}",
            "N}]uj",
            "uB9]_P",
            "PY[9]Ewr",
            "SVW}",
            "SPYY",
            "t;G\u034a",
            "SPYY",
            "G\t<-u",
            "t9\t&j",
            "0[uKG",
            "<btB<B<dt\"ot",
            "G?0tOW$",
            "t&~_",
            "uU0u",
            "<X;|",
            "Ph&G",
            "j YF}",
            "t\t?_",
            "PV5\u0434H",
            "t(_ut}",
            "EO@;s",
            "^90~",
            "0XpE",
            "W,pE",
            "&7;]",
            "UE;E}>E",
            "M]E\u050bE+\u0649U",
            "]4uuj",
            "U>}e",
            "X_^[USVE",
            "VWSe",
            "e_^[]SVt$",
            "3Kuj",
            "uB_^P",
            "^QPYY^t",
            "P]YY",
            "PuYY39D$",
            "39D$",
            "CMCEE@",
            "HtpE\uc649E\u050bEU\u060d",
            "AEMj",
            "u\u060bE3u\u050b",
            "u\u060bMu\u0509",
            "E\u0709Uwu}EM|",
            "E\u0309UuKuuu",
            "E\u0709Uu",
            "EMu9E",
            "Qh&G",
            "Y^[Vt$",
            "SV33\u06cbIt%W4y",
            "\u0685w_^[Vt$",
            "YY^u",
            "h,'G",
            "VhYY}",
            "^Vt$",
            "h4'G",
            "YY^u",
            "W33\u048bIt#S4y",
            "w[_^Vt$",
            "ht'G",
            "VYY3;",
            ";s!8N",
            "hH'G",
            "UQQE",
            "V3Ws",
            "YYu4E",
            "$YYu$E",
            "$YYt",
            "3SPV5\u0434H",
            "t/<FE",
            "]w\u054b[_^U",
            "]Ht&",
            "]wEQQ",
            "YYu(EQQ",
            "t't#",
            "7SYj",
            "YY[U",
            "SQP5\u0434H",
            "3!UM",
            "U!]u",
            "A3;M",
            "<<Ap",
            ";|0u9~5W",
            "339]",
            "]]~_F",
            "AU;O",
            "AE_^[S\\$",
            "t't#",
            "YY[U",
            "t+t'",
            "Sx\u060bE",
            "@PV5\u0434H",
            "tX339{",
            "3PuP4",
            "\u044bM3\t",
            "|_uY^",
            "YY[UQE",
            "5P3YM",
            "QMQPu",
            "PukYP",
            "YYUS]",
            "PVSWe",
            "YP6X",
            "_^[]U8M",
            "SVW}",
            "Y33\u048bK",
            "]tL\\uj",
            "3PuWVZ",
            "3PuWV",
            "BRP5\u0434H",
            ";E}u",
            "M39TDu",
            "Et39U",
            "Y\u06c9E~EUE",
            "+\u0409]\u0709U",
            "Eu\u038bEE3;E\u0209E~HE}",
            "+\u01c9u\u0709Eu",
            "Eu\u038bEM\u0209",
            "t UD+\u05cd",
            "FEuDE\u060b",
            "E}U\u060d",
            "8M\u050b\t;",
            "M0t83j",
            "EM3!u!u",
            "3M\u070bM+",
            "3PuPE0M",
            "U3+}",
            ";E|EM+E",
            "t[E}",
            "}\u070bE]33MM",
            ";E|\u0503",
            "u]EMMm",
            "t?uY",
            "@+3~",
            ";uC9}t<3;\u07c9}t3t",
            "8_^[US]",
            "t't#",
            "YYU\u06c9]",
            "~DVu",
            "WKt/j",
            "V+V]YYVWPYYWY_^*E",
            "YY[]U",
            "SVWEM",
            "XPV5\u0434H",
            "3\u0485~+UM+)]U",
            "}\u05cb}]<",
            "Mu;}",
            "_^[u",
            "cYYu",
            "PZYE",
            "u-Ej",
            "SVWEM",
            "3PV5\u0434H",
            "3\u0485~+UM+)]U",
            "}\u05cb}]<",
            "Mu;}$}",
            "_^[u",
            "SVWEM",
            "@PV5\u0434H",
            "3\u0245E~&EU]",
            "+\u040b\u03cb}",
            "Mu;}",
            "NuE_^[x",
            "PuYYuYU",
            "YVWj ^e",
            "YY|S]",
            "P5\u0434H",
            "OEu\u060bEu",
            "$Y[_^U",
            "YVWj ^e",
            "j _\u0249u",
            "V5\u0434H",
            "KNt6M",
            "NEw\u05c0",
            "tJSWj",
            "V5\u0434H",
            "Nut$",
            "YY_[^",
            "YY^UE",
            "YY]PYM",
            "]SUVW5H",
            "h((G",
            "jhQ@",
            "ht$G",
            "^Vh@",
            "h (G",
            "3Uh@",
            "HVh2@",
            "h\\ G",
            "@VSh",
            "@VhB@",
            "@Vh|@",
            "Vh\u037a@",
            "@Vh@",
            "hX$G",
            "Vhv@",
            "hP$G",
            "@Uhm@",
            "hH$G",
            "@_^][UE",
            "NYY]t$",
            "YYUM",
            "t+t'",
            "QY\u020aG",
            "PNt,Q",
            "_^]U",
            "t&t\"",
            "$@@H@",
            "]E5(E",
            "$YYu EQQ",
            "$YYu",
            "$@@Vt$",
            "YY^USVW}",
            "SGYYNt",
            "Y_^[]US]",
            "t't#",
            ";SY\u060dE",
            "YY[]UE",
            "YY]PhYM",
            "]UQQu",
            "t&t\"",
            "t1t-",
            "Y\u0205|j ^Vt$",
            "@_^[",
            "PYPYYP<",
            "YPh0(G",
            "[S\\$",
            "ht(G",
            "hL(G",
            "S7Y[S\\$",
            "UVt$",
            "WVS)y",
            "tHPG",
            "D$,D$,j",
            "_^][",
            "t$$E",
            "PUYYUVu",
            "\t;[_^]S\\$",
            "3t){",
            "[SVt$",
            "\t3D$",
            "YYL$",
            "^[Vt$",
            "YPh(G",
            "hL(G",
            "^USVu",
            "W5\u0133H",
            "tfW5\u0133H",
            "VhP)G",
            "Vh8)G",
            "WVW5XH",
            "VW5\u0133H",
            "0_^[]USVu",
            "taWS",
            "VhP)G",
            "Vh8)G",
            "YPhd)G",
            "VWSB",
            "3(_^[]S;",
            "[Vt$",
            "YY^Vt$",
            "V5\u0133H",
            "tKV5\u0133H",
            "YPh)G",
            "WVwWV5XH",
            "WV5\u0133H",
            "_^SVt$",
            "tNVS)",
            "tBPG",
            "YPS1",
            "YPh)G",
            "WVWVS",
            "t$$SW",
            "_^[Qd$",
            "SUVt$",
            "WVkg",
            "\u06cbt_S",
            "u9\\$",
            "_^][Yh)G",
            "USV\u85c3",
            "u';t#t",
            "^[]VWLD$",
            "WsYYv",
            "_^Vt$",
            "X^3^SV\\$",
            "SVYY[",
            "\u010b^[h@",
            "3]U}",
            "SVWu",
            "t@Wh@",
            "_^[]U}",
            "tTtP",
            "\u8619Vh@",
            "_^[]j",
            "PVt$",
            "YPt$",
            "YPt$",
            "YPt$",
            "[Sh)G",
            "3\u0245Vt",
            "Y;Yu",
            "SSYY",
            "u5=lH",
            "^[h)G",
            " ]t$",
            "YPt$",
            "YPt$",
            "YPt$",
            "UQQS]",
            "W3<*",
            "uE@t",
            "A#\u0185t;",
            "D8;E},E",
            ";}|C;*u>",
            "+P\u8e55Y",
            "C;&u",
            "_^[S\\$",
            "j>SH",
            "j<S/",
            "YYPt$",
            "YPhD*G",
            "hX$G",
            "h|*G",
            "hx*G",
            "ht*G",
            "hp*G",
            "hd*G",
            "nh\"G",
            "UQQE",
            "^$@@Uu",
            "X]3]Uu",
            "X]3]Uu",
            "X]3]Uu",
            "X]3]t$",
            "uYYt",
            "Y$@@UQQE",
            "EEPh@",
            "uJSt",
            "EPS\t",
            "Fj/V",
            "PV6\t",
            "EVSEu\t",
            "Y;YE",
            "\u060dEP]u[",
            "tuh'G",
            "YYudW<",
            "@PWh*G",
            "PbqY",
            "Vh*G",
            "Vh\\ G",
            "t,</t",
            "uPWh*G",
            "t,</t",
            "VPWh*G",
            "Eu* j",
            "YuuuoYE",
            "u\u04cbuYYu",
            "uyEP6[YYu`Ef%",
            "@u[6[",
            "6h*G",
            "PW4E",
            "7WYY",
            "t\tu5",
            "Y5LE",
            "WSYY",
            "E_^[",
            "SU\u040b\u020bl$",
            "Vt$$D$",
            "Hu1|$",
            "Ph*G",
            "s9pE",
            "Y\u0603|$",
            "t'<.u#;t$(",
            ";t$(",
            "F</t~<\\tzF4",
            "E*t39L$",
            ";t$(tW9L$",
            "F</tJ<\\tF;t(9L$",
            "tD/t",
            "\\u:V",
            "t$|$",
            "F9L$",
            "t>s9pE",
            "t?tT[tO|$",
            "tA<s=",
            "_^][",
            "QQD$",
            "SUVt$",
            "F-lE",
            "t=\\$ s4pE",
            "QPYY",
            "YD$ ",
            "F\u06c9L$",
            ">-u$~",
            "t>s9pE",
            "PYYL$",
            ";D$ ",
            "at:s5pE",
            "9D$ ",
            "#_^][YY",
            "\u0243*t3",
            "t&It\tIu",
            "t;T$",
            "X^3^S\\$",
            "V+t$",
            "_^[Vt$",
            "YYu\tV",
            "PVYY^Vt$",
            "PEPh@",
            "SVt$",
            "YYUQQE",
            "EEPh@",
            "SVW5\u0133H",
            "hX+G",
            "_Wh@",
            "hWh@",
            "hP+G",
            "RWhT@",
            "hH+G",
            "<HWh",
            "F3Vh",
            "h@+G",
            ".VhL@",
            "@Vhk@",
            "VShl",
            "@WhW@",
            "{jh@",
            "h8+G",
            "VSh0+G",
            "*@VSh,+G",
            "h$+G",
            "jhc@",
            "@WVh<#G",
            "Wh7@",
            "}@r@",
            "jVh*G",
            "bjVh*G",
            "j\th*G",
            "@_^[Vj",
            "Vt$$h",
            " ^Vt$",
            "W=LE",
            "PYVY_^USE",
            "PdYF",
            "u9W=DE",
            "^[]Vj",
            "Vt$$g",
            "t$,V%(\u814d",
            "Vh,A",
            "^Vt$",
            "X^V<(",
            "Y^h\\+G",
            "Wj\"V",
            "YY_^\u05c38",
            "VW|$",
            "j\"W]",
            "|6bYt",
            "\u050b_^Vt$",
            "96bP\u8db1YY^",
            "S6bYY_^[t$",
            "YYVW|$",
            "6`bY_^Vt$",
            "j\"Vl",
            "6Ab&",
            "YY8h+G",
            "VrYu",
            "GrYu",
            "YE=G",
            "hp+G",
            "t?V\u07ac",
            "EEPEh",
            "XVt$",
            "^Vt$",
            "XVWj",
            "_^UE",
            "Ph!G",
            "X]Vt$",
            "WVG+",
            "t W1",
            "+PW#",
            ";s@?",
            "G;r;s2",
            "t,{u",
            "EE}u",
            "@G;t",
            "@G\u0280 ",
            "u\u0642Yj",
            "E_^[t$",
            "~YYU",
            "SV3B",
            "@E];",
            "YE;}",
            "C];}t",
            "C;}uCE@Pj",
            "E+u@",
            "_^[UE",
            "Ph!G",
            "}YY]t$",
            "YP5\u0234H",
            "t%t!",
            "?\"u\tx",
            "YPh+G",
            "Ph8A",
            "UQEVPE",
            "Ph+G",
            "^$@@U",
            "h8,G",
            "WPh0,G",
            "Ph$,G",
            "\u040d_^UE",
            "@SVA",
            "_^[]SVW",
            "ShT,G",
            "+RWQSj",
            "u_^[",
            "4SUVt$DWu",
            "Vh,G",
            "\\$L=0E",
            "9~u\\",
            "</uLh+G",
            "SiYD$",
            "+\u0209L$LxZPt$ V",
            ")l$Lx/UQS",
            "/Ct$He",
            ")D$PYD$",
            "y@4E",
            "@P\u05c0#",
            "V@h,G",
            "Pt$\\4E",
            "@h,G",
            "@Pt$LS8",
            "D$,PVi",
            "u*9D$P",
            "D$&f%",
            "9D$PYsB4E",
            "@P\u05cbV+P4E",
            "@h,G",
            "@t$dh,G",
            "P\u05c3(!D$",
            "D$(PV/i",
            "$@D$",
            "_^][4j",
            "VWh-G",
            "VWhd$G",
            "VWhH+G",
            "Vha@",
            "Vhs@",
            "hx-G",
            "hp-G",
            "jWhh-G",
            "ejWh`-G",
            "VWhT-G",
            ";@VWhP#G",
            "&Vh@",
            "VWhp#G",
            "VWh`#G",
            "@jhw@",
            "hL-G",
            "h@-G",
            "h8-G",
            "h0-G",
            "@Vh@",
            "h,-G",
            "rVh^@",
            "h(-G",
            "Wh -G",
            "Wh\"G",
            "1@Vht",
            "_^UQQV",
            "Eu@~",
            "MQPu",
            "^Vt$",
            "tYYj",
            "X^Vt$",
            "X^UQVW3WWj",
            "xVh<@",
            "WWh-G",
            "YPu\u82df",
            "X_^Vt$",
            "X^VqVh@",
            "sYYj",
            "qVh@",
            "sYYj",
            "XV8qp|",
            "VPt$",
            "+sYYj",
            "XVpVhA@",
            "^]Vt$",
            "X^UQQ/pE'pEEPh5@",
            "uusp",
            "rYYj",
            "X]t$",
            "P{{YYS\\$",
            "t(t$",
            "oVh%@",
            "^[Vt$",
            "QPQj",
            "VPt$",
            "VPt$",
            "VPt$",
            "^Vt$",
            "u\tD$",
            "X_^Vt$",
            "u\tD$",
            "X_^Vj",
            "VPt$",
            "^Vt$",
            "u\tD$",
            "X_^Vt$",
            "u\tD$",
            "X_^Vj",
            "t$ h@",
            " ^Vt$",
            "X^3PPPjc",
            "D$$ Vt$",
            "X^U}",
            "V~&u",
            "hd$G",
            "hd!G",
            "j\t6C",
            "Ou_~v",
            "[kYYPVjcC",
            " ^]UQE",
            "SVWH",
            "@P-ju",
            "SPsk",
            "W4nPu",
            "_^[u",
            "\tulYYj",
            "Y;Y~",
            "Ph@/G",
            "QPh8/G",
            "hH/G",
            "P=hE",
            "hH/G",
            "SVWp@",
            ";u8Vhl/G",
            "hT/G",
            "?;D$",
            "t|-G",
            "|e;D$",
            "Ph/G",
            "ht/G",
            "YYPj",
            "YPt$",
            "EEPj",
            " Pmo",
            "SUVW5\u0133H",
            "hP1G",
            "jD1G",
            "3WhI",
            "ht$G",
            "WSU5H",
            "hl$G",
            "h,1G",
            "h 1G",
            "Ph0G",
            "pPh0G",
            "VP|H",
            "+WhP",
            "ht$G",
            "S5|H",
            "WSU5G",
            "]USh0G",
            "r@5|H",
            "ht0G",
            "Mjh1",
            "hl0G",
            "h`0G",
            "PhT0G",
            "hH0G",
            "h40G",
            "h$0G",
            "Ih/G",
            "9Uh\tA",
            "t _^][",
            "t#t$",
            "h`1G",
            "h\\1G",
            "(]U}",
            "^_]Sh`1G",
            "ht$G",
            "YPt$",
            "YYAVhl1G",
            "hh1G",
            "h|*G",
            "0^_[Vh\\1G",
            "X^Vt$",
            "YY^t$",
            "Ph\\1G",
            "u.t*",
            "`YY_^",
            "5h.G",
            "3~\u078bP",
            "t't#",
            ";}5h.G",
            "$@@UE",
            "QPVh0G",
            "^]h0G",
            "UQSV`1G",
            "YPEP.",
            "YM;t",
            "QVSM",
            "^[UE",
            "QPVhl0G",
            "QP'D",
            "Wj\"VM~",
            "t);u",
            "?Ht@",
            "t4Ht*VSh",
            "A~\tSj0",
            "t*8#t%P",
            "$p1G",
            "EEPj",
            "3\u06c5[t",
            "_^hl0G",
            "UQQS]",
            "VWS,",
            "Ph!G",
            "YMQP5G",
            "u!;t",
            "E;tI",
            "t36E",
            "YP=Y",
            ";tXE",
            "Vht1G",
            "Xuh/G",
            "_^[h/G",
            "X_SVh/G",
            "u ;t",
            "P5lH",
            "YPh1G",
            "PiW%PH",
            "UQV5DE",
            "W\u058b8\u0583 ",
            "Ph1G",
            "PEPj",
            "Eh1G",
            "PVEPu",
            "EEUQEPu",
            "uC5H",
            "E:Ph/G",
            "SW=DE",
            "hH/G",
            "^_[t$",
            "0n9YPh",
            "sh4G",
            "gh4G",
            "[h4G",
            "Oh4G",
            "Ch4G",
            "7@h4G",
            "j\t(h4G",
            "@h4G",
            "h|4G",
            "ht4G",
            "hl4G",
            "hd4G",
            "}h\\4G",
            "q@hT4G",
            "bhL4G",
            "VhD4G",
            "Jh<4G",
            ">h44G",
            "2h,4G",
            "j &h$4G",
            "j&h3G",
            "j'h3G",
            "j(h3G",
            "j)h3G",
            "j$@h3G",
            "j*h3G",
            "xh3G",
            "ih3G",
            "Zh3G",
            "Kh|3G",
            "<hp3G",
            "-@h`3G",
            "hP3G",
            "hD3G",
            "h43G",
            "h$3G",
            "@h2G",
            "sh2G",
            "dh2G",
            "Uh2G",
            "Fh2G",
            "7@h2G",
            "%h2G",
            "ht2G",
            "hh2G",
            "hX2G",
            "hL2G",
            "h@2G",
            "h82G",
            "@h02G",
            "YVP$",
            "YPh@5G",
            "yh 5G",
            "~RD$",
            "3t4dH",
            "YPh|5G",
            "hd5G",
            "5YS\\$",
            "YPh5G",
            "t L$",
            "rU\u0133H",
            "|0;t",
            "t$h$G",
            "h|$G",
            "3tCE",
            ";Yu\"h(G",
            "Ph5G",
            "t[9=H",
            "tS9}",
            "_^[]",
            "rS\\$",
            "^[S\\$",
            "[UQEPE",
            "V0EW;PVWE",
            "u/0M",
            "3_^[UVu",
            "^]t$",
            "Ph\\6G",
            "^[]S\u8cc0",
            "YPh<6G",
            "rh6G",
            "/YUQU",
            "##3\u01cd",
            "+EPE",
            "3_^UQ}",
            "SVWu",
            "WQQPj2",
            "e_^[",
            "X5TH",
            "t&t$",
            "UlSV395",
            "Mu\u0709uu\u8cdc",
            "Y;YE",
            "u395lH",
            "95@H",
            "E9uxG",
            "utLH",
            "UxSVWj",
            "3E\u0221G",
            "E\u0321xG",
            "E\u060dExG",
            "EWP]\u0509}\u0409}\u0709}0",
            "]W5xG",
            "E;u0",
            "Phx7G",
            ".ht7G",
            "WE5xG",
            "YYu<WWhX",
            "EEPu",
            "}W5xG",
            "h\\7G",
            "Yu$hh1G",
            "\u07808#u",
            "Et\t+]@Ehh1G",
            "t\"hX7G",
            "hT7G",
            "+NVuW{",
            "hH7G",
            "Ph07G",
            "|ExG",
            "_^[U",
            "tSdH",
            "Qh7G",
            "~YYPQhx7G",
            "YPt$",
            "XPBYUdE",
            "EP\\6",
            "3E\u0721G",
            "EExG",
            "EVPE",
            "uuuX",
            ";\u0189Eu",
            "EYYxG",
            "^P5H",
            "h<8G",
            "nh(8G",
            "_h7G",
            "t&@@t",
            "S$h7G",
            "YA5H",
            "YYt%h",
            "U`dH",
            "ME\u0870G",
            "MPQE",
            "EEE\u8695",
            "YY#6",
            "VEE3P5H",
            "E\u0509EM",
            "EM\u08f0G",
            "EMVPE",
            "u\u0609uu",
            "Y;YEu",
            "9ut45H",
            "YYt h",
            "YYUhdH",
            "E\u0709EM",
            "EV3G",
            "WMEMVPE",
            "Y;Yu",
            "YYEG",
            "YY|$",
            "V5`H",
            "hT8G",
            "YP5\u0533H",
            "U@HH",
            "VW=\u0533H",
            "E;5\u0533H",
            "E\u0621`H",
            "V5 G",
            "EEujTu\u0209udH",
            "u\u0309u\u0409u\u0509}\u8eff",
            "Y=\u0533H",
            "E\u0623dH",
            "_^[9utxG",
            "uH@P",
            "SVWj",
            "[]EM",
            "%;t);u",
            "VEEG",
            "EEExG",
            "E\\xG",
            "\\Pu]uuu=H",
            "Y;Yu#E",
            "EEMH",
            "E;xG",
            "E_^[",
            "u\u0609E|G",
            "E\u0521`H",
            "Eu\u0123dH",
            ";\u0189uu\u0209u\u0309uu",
            "VPjT\u03bc",
            "VP=H",
            "HDPX\u050e",
            "VVSu",
            "Y5LH",
            "E\u0723`H",
            "EWdH",
            "PLL$",
            "It_ItOIt?It.It",
            "H@t$",
            "Rh8G",
            "Rhp8G",
            "Rh\\8G",
            "Ht/Ht%Ht",
            "!h8G",
            "Ph8G",
            "V\u043e$9G",
            "3\u0245t`u",
            "t/t+",
            "V^UQ",
            "YPh9G",
            "Y;5G",
            "Phh9G",
            "EPVS",
            "3tZh(G",
            "IIu:E",
            "t$t ",
            "YPh49G",
            "VsUQQe",
            "VWS|}",
            "t2t.",
            "PW5\u0133H",
            "YEY~",
            "Yt;EPu",
            "t%Ex",
            "Ph9G",
            "_^[WS",
            "YPVt$",
            "YPh9G",
            "v^US]",
            "hd$G",
            "QVPs",
            "VS_`",
            "2YY^[]U",
            "SVWE",
            "39]tlE`H",
            "E\u070bE@",
            "395\u0222G",
            "u395lH",
            "95@H",
            "E\u0709Eu2Ep",
            "PV=\t",
            "p_xG",
            "pSP\u01c5",
            "Y+Yt",
            "HHt(Ht",
            "HHu#3",
            "YY3;xG",
            "uh=G",
            "Ev9]",
            "Vh=G",
            "P4YH",
            "3\u0485~/@",
            "2YEYE@",
            "Wh=G",
            "?\tt\tSu3Y39s",
            "~XEPC",
            "|+MQj",
            "YYP\\",
            "ESP\u8842",
            "Y+YtLHHt",
            "HHu&3\\3A",
            "$;A,u",
            "3@LE(;xG",
            "YYt\u018bEp",
            "X0|\u01c5x",
            "E0SP\u8c41",
            "Y+YtIHHt",
            "HHu&3Y3>",
            ";A,u",
            "3@LE;xG",
            " YYu\u024bEp",
            "\tYYuu",
            "@PTE9X",
            "DE9X",
            "DSDG",
            "Y;Yt3",
            ";A,u",
            "@LE3",
            "uEEG",
            "@t@hDG",
            "ExtG",
            "Y5DG",
            "SSS5G",
            "PQ'H",
            "\\;DG",
            "OP|,",
            "6PF.",
            "YYEE`H",
            "SSSu4",
            "E3}dH",
            "WP\\Xdl~}",
            "Y;Yt",
            "9}to|,;u",
            "3\u06c9}E\u0623",
            "@LEh",
            "t\tM\u0609",
            "E;tV5`H",
            "YYqdH",
            "Y;Yu",
            "t:pL",
            "YpLu",
            "Y$@@}",
            "@PEp",
            "rYYPEp",
            "aYYP",
            "EE9X",
            "#;u=MI",
            "t1MI",
            "\t#;u#MI",
            "j_>Eu<p",
            "Eu#p",
            "YY\ub60bEp",
            "PVw2+Ep",
            "Px*Ep",
            "AhDG",
            "3EEUG",
            "aYEY]\u040bE@",
            ";u\t33",
            "uRE@",
            ";~\u068bEX",
            "YYME",
            "u|Pu",
            "?\tt\tS(Y\u060bs",
            "EM`H",
            "uWVUr",
            "BhDG",
            "3``dG",
            "YY]E@",
            "uNE@",
            "~\u064bEx",
            "MYu|Pu",
            "?\tt\tS&Y\u060bs",
            "]\uc2c5hDG",
            "uVMq",
            "BhDG",
            "3llpG",
            "uNE@",
            ";~\u064bEx",
            "MYu|Pu",
            "?\tt\tS^%Y\u060bs",
            "uVCM",
            "SSUr",
            "BhDG",
            "3EEMG",
            ";u\t33",
            "uRE@",
            ";~\u078bEx",
            "YYME",
            "?\tt\tS\\#Y\u060bs",
            "SV*M",
            "Y 3\udb54\ude45< dH",
            "^PLH",
            "M\u050bMI",
            "tSE@",
            "S5xG",
            "Y;Yu",
            "YYExG",
            "E\u0223LH",
            "YEYE@",
            ";u\t33",
            "uVE@",
            "N;~\u064bE@",
            "qYYME",
            "u|Pu",
            "SYE\u0328",
            "P  YE\u030bp",
            "E\u030bWp",
            "FSP5G",
            "t,Ht",
            ".u&uu",
            "~YYSV|5G",
            "VSQG",
            "t4It%Ep",
            "WYYEEPj",
            "YYEE",
            ".+E9X",
            "_YYEE",
            "9YYPuu",
            "EEMI",
            "EEMI",
            "EuEp",
            "EuEp",
            "bYYEE9X",
            "u*uE@",
            "YYEj",
            "YYESuEp",
            "a0Ep",
            "&tVHt<",
            "PSWz",
            "Y3\u06c3}",
            "UYYN",
            "E\u044bEp",
            "Y\u0605t\\F",
            "ttHHtTHt",
            "\ub68bE9X",
            "hP=G",
            "\u8129YE@",
            "Ph$=G",
            "EPEp",
            "t-HH",
            ";Eu#9{",
            "VSEp",
            "WSEp",
            "PyYP7",
            "7Y]Yj",
            "_9=H",
            "PxEPEp",
            "t19=H",
            "Ph<G",
            "YYM;t",
            "3QPEp",
            "V3HH",
            "P~YYuHH",
            "YY~3\u06c9]Ep",
            "YYE@",
            "PE$m",
            "]WVa[",
            "YYtzWV",
            "89]u",
            "EuWVlW\u872e",
            "PVSC",
            "SWVZ",
            "PStU",
            "SulYYuS_",
            "WV;Z",
            "Wt]VXW",
            "PVSB",
            "SWVY",
            "6PS}T",
            "YYEE",
            "uNu G",
            "uh=G",
            "uH@V",
            "]YYP",
            "ALxG",
            "MHLxG",
            "SPH@",
            "WPH@",
            "\u85e2h<G",
            "YPdH",
            "'h<G",
            "VPH@",
            "hp<G",
            "hL<G",
            "dh <G",
            "Th<G",
            "&h;G",
            "\u0161h;G",
            "hp;G",
            "hH;G",
            "\u80b3h(;G",
            "YPEp",
            "YPh:G",
            "\u8830h:G",
            "\u8430h:G",
            "\u8030h:G",
            "YPhP)G",
            "YPh:G",
            "@hp:G",
            "0h:G",
            "YPh)G",
            "hT:G",
            "h4:G",
            "_]US]",
            "VW\u06cbtE",
            "YY_^[]",
            "PVW=H",
            "6t<G",
            "\u859cYuG",
            "\u862cVt$",
            "QVPX",
            "_^U,",
            "E4_xG",
            "4SP}|]]Z",
            "Y;Yu",
            "UYYE;xG",
            "SE\u0521G",
            "E\u0621xG",
            "EExG",
            "]\u0709]]",
            "Y;Yu",
            "YY\u0209M",
            "ME;xG",
            "Mt=F",
            "EEPEPEP\u07b5",
            ";tSMp",
            "hl>G",
            "\ub3b8l>G",
            "Od>G",
            " (>G",
            "Rt:St",
            "Y;Yu",
            "t]IItY;t",
            "Ph=G",
            "_^[KjA",
            "VW\u06cbt0~",
            "YY_^[]",
            "XUSVu",
            "~#3\u06c5~",
            "C;|E",
            "_^[]u",
            "SSSj_\u86c1",
            "Y}\u0209]\u0309]\u0409]EEE",
            "EdU]]]xG",
            "SE5xG",
            "Y;YurH",
            "M;xG",
            "WYYt$",
            "tgPt$",
            "tCIIt?P\u87e4",
            "SVW@",
            "tXdH",
            "M5TH",
            "tSE@",
            "VWjT}",
            "E\u0321xG",
            "E\u060dExG",
            "EVP]\u0509u\u0409u\u0709uO",
            ";uC95H",
            "t#dH",
            "_YEYExG",
            "9uLH",
            "t\"M91t",
            "E95H",
            "WPH@",
            "EL_^[S\\$",
            "UQQu",
            "EEPj",
            "\u0365EPh",
            "u$E\u0203",
            "3PMUj",
            "Ph>G",
            "UdSVWs",
            "t*<G",
            "_;u\t5",
            "SS5H",
            ";t#VI;Yu",
            "YY;t",
            "SEdH",
            "EExG",
            "EP}]]]K",
            "Y;Yu6EP\u06e2",
            "YPh>G",
            "t dH",
            "05`H",
            ";tIr",
            "VPH@",
            "h,1G",
            "YPt$",
            "X9A$u\t=DG",
            "3UQU",
            "ZSVt@",
            "X@[,;Y,t$",
            "ti@Xuj",
            "Rh\\8G",
            "I,PLHTxG",
            "I,PLHTxG",
            "ZtHHH",
            "@XH@j",
            "I,PLHTxG",
            "Rhp8G",
            "SVWj",
            "PVht?G",
            "EudH",
            "E\u040bE@DH",
            "E\u030bE@` G",
            "EE@<E",
            "Et\t%G",
            "E@LG",
            "E@lDG",
            "pX3VV\u8ae9",
            "@X3TH",
            ";u\tMI",
            "UM91",
            "VPTP\\dVG",
            "]Y;YE",
            "u-9u",
            "g39u",
            "Ph4?G",
            "E\u070bE@HVE\u060dE\u0623G",
            "EE\u0609ELH",
            "P}M]uuE",
            "Y;YEtXj",
            "95\u0222G",
            "uu395lH",
            "95@H",
            "\u057cYYE]3m~",
            "E;A,uOxG",
            "@LE]ME\u0709",
            "t`UBP",
            "]3\u0485u79P",
            "E;pXt",
            "39ut.LH",
            "t#E90t",
            "E\u0323 G",
            ";u~;\u038btnxH",
            "H\\;JTt+@X;uQPh",
            "H@I,HTMHLxG",
            "A@udH",
            "ADQG",
            "E_^[VW|$",
            "_^Vt$",
            "Yt x",
            "YY^Vt$",
            "dYY^U E",
            "Ph?G",
            "Ej P",
            "P\u8db33PPPPt$",
            "US39]",
            "SSSSj",
            ";VWu",
            "YYuj",
            "SSSW;",
            "_^[]",
            "t)t%",
            "SVWX",
            "t$;} E",
            "tstRu3;}/E",
            "Q+\u07cb@",
            "YYPE",
            "_^[]Qj",
            "t;}\u0705t",
            "GWSh?G",
            "W5`H",
            "hp<G",
            "kYYP4",
            "QYYPVu",
            "YY\u060bF",
            "QWbPu",
            "_^[]A",
            "SVWj",
            "[]3Wu",
            "jd\tk",
            "Upx|",
            "EX=xG",
            "M}MY}Eh\\l\u01c5d",
            "E\u0321TH",
            "E\u0521 G",
            "39}UM\u0209E\u0709}t",
            "3E9}t",
            "x|WDG",
            "Y;Yt+",
            "p;A,u",
            "@LE3",
            "YEEMDG",
            "t;xG",
            "E_^[U",
            "W39~",
            "3\u0249EEG",
            ";\u01c9Mu",
            "ucPu",
            "?\tt\tSY\u060bs",
            "NtL5\u0333H",
            "YYt$5",
            "h(@G",
            "3e_^[U",
            "SVWEdH",
            "0^3xG",
            "0WP|x}}9",
            "Y;YE",
            "};t']",
            "tzdH",
            "WE\u0421G",
            "E\u0521xG",
            "EExG",
            "EPu\u0709}\u0609}}N9",
            "Y;YEu",
            "YYEE9uxG",
            "u}9}u",
            "E9}xG",
            "E_^[j",
            "UddH",
            "SVWE\u0721G",
            "_3ELH",
            "VVE54G",
            "E}}jcuuuxG",
            "YE4G",
            "E_^[UhSVWj",
            "^udH",
            "E\u0721xG",
            "EE3\u06e3xG",
            "ESPu]]]7",
            "Y;YEu",
            "YEE;",
            "pLxG",
            "E_^[UhWj",
            "EEdH",
            "E\u0721xG",
            "YEEM",
            "E_UQU",
            "W\u0489uu",
            "YPhT@G",
            "##3\u01cd",
            "@94G",
            "u59P",
            "PEPE",
            ";5HG",
            " _^U0E",
            ";5HG",
            "3E\tu",
            "E\u0509E\u0609EH",
            "EE\u0409MdH",
            "WS5HG",
            "e_^[",
            "YPh@G",
            "VW=H",
            "t\t@G",
            "j!hX",
            "HVP4YEYj",
            "XMWQP\u8635",
            "WU`V395",
            "VE\u0870G",
            "EExG",
            "uuu2",
            "Y;Yt)M5",
            "PQ@Q",
            "SVWE",
            "uuE9",
            "E\u070dE\u0623G",
            "uu ]EE",
            "M]\u0109UE",
            "Oty&tf\ttM't\\",
            "YYPv",
            "0}W'F",
            "u uEdH",
            "<^xG",
            "u]]/",
            "Y;Y}",
            "Uu,G",
            "t79]",
            ";u;t",
            "\u04a6YYLH",
            "E|)9]",
            "uh-G",
            "kYYE}",
            "M;H,u",
            "@LE3ExG",
            "9]LH",
            "t\"M9",
            "p h8G",
            "RQhAG",
            "PhAG",
            "EE`H",
            "E_^[Ph",
            ":}hAG",
            "uGt>xG",
            "WPH@",
            "WPH@",
            "uW@u",
            "YPWhhAG",
            "6mxG",
            "VPH@",
            "RP>u",
            "p$p p",
            "p(p$p p",
            "p,p(p$p p",
            "p0p,p(p$p p",
            "p4p0p,p(p$p p",
            "p8p4p0p,p(p$p p",
            "@]PhAG",
            "USVu",
            "e_^[]UQE",
            "EEPu",
            "USVW}",
            "e_^[]UhVj",
            "EEdH",
            "E\u0721xG",
            "EExG",
            "UQQdH",
            "YPdH",
            "W83j",
            "_^VWj)",
            "3Y9~",
            "hH7G",
            "GY;~",
            "Y|_^U",
            "SV5dH",
            "t*Pn",
            "hx7G",
            "E_^[",
            "t\u07cb~ t\u060bF",
            "t'Pm",
            "hx7G",
            "SVWj",
            "3_]}`H",
            "E\u060bA$EH",
            "tj\"Ve^",
            "Y@Ys",
            "]Y\udb54\ude45\\@dH",
            "EC<LH",
            "E\u070bClDG",
            "E\u040bCXTH",
            "ECLG",
            "ECDH",
            "E\u050bC`}",
            "u3hT8G",
            "YYu C,t",
            "A$_3",
            "@$A$9]",
            "E\u0221LH",
            "EpxG",
            "pP}]]\u0109]!",
            "YYuY!",
            "Y9}t",
            "YYEE",
            "#\u01c9EE\u0523 G",
            "E\u0723DG",
            "E\u040bMTH",
            "ALEG",
            "tP5LH",
            "vXYuTH",
            "A$E\u0623`H",
            "hT8G",
            "$`1G",
            "?\tut;t^",
            "u'hh1G",
            "PVVu:",
            "0VVu+",
            "$j>@",
            "SPH@",
            "E_^[",
            "Vh8BG",
            "h0BG",
            "FbYYP!^L$",
            "t*t&",
            "^#S\\$",
            "XSPt$",
            "[UQSVWt+}",
            "ET8G",
            "hxBG",
            "6pvY",
            "Y~.dH",
            "YPdH",
            "YPhHBG",
            "YEWu6u",
            "_^[U",
            "EEPu",
            "3E\u0709u\tu\u0209M",
            "MM\u0109u\u0309u",
            "_E\u0309}t",
            "VEdH",
            "EdxG",
            "dP5G",
            "}uuu",
            "Y;Yu",
            "YEE9u",
            "VWE G",
            "E\u0721\u0533H",
            "3E9u",
            "_9=H",
            "vsYYj",
            "Y;Yu",
            "Wr\u0133H",
            "G#5\u0533H",
            "E5 G",
            "V5 G",
            "u\u0409E\u050dE\u0423G",
            "E\u010dEuuuuudH",
            "uuEEG",
            "8VxG",
            "}Muuu",
            "YE`H",
            "VVVj_wF",
            "E9u5`H",
            "u395lH",
            "95@H",
            "95pH",
            "Wu\u8c84YYE",
            "BzLH",
            "9ut#@",
            "E90t",
            " ETH",
            "E95pH",
            "D9ut",
            "P%_^U`dH",
            "EExG",
            "tYYExG",
            "0^USVu",
            "W3WWV",
            ";tjWVP`",
            "u_VU",
            "YYt7E",
            "WS5G",
            "9>u3",
            "Xe_^[]UQS39]",
            "EEP(m",
            "o<.um}",
            "YYtfhBG",
            "YYtUh",
            "YYtDh",
            "YYt3}",
            "G3_^[",
            "YYt$",
            "eYYt$",
            "SVWj",
            "[]E3uM",
            "E\u0621dH",
            "VExG",
            "E\u0421LH",
            "E\u020dxxG",
            "xP]\u0109uu\u0309u",
            "EPEPu",
            "YrtSH",
            "E5`H",
            "RCP-P5<H",
            "@95G",
            "E\u0423xG",
            "E\u0623`H",
            "9ut!EVP5G",
            "Y9ut!xG",
            "uH@P",
            "[UQG",
            "t{MQu",
            "tgE;",
            "t\\=\u0222G",
            "u5=lH",
            "j.PE",
            "YYu1j",
            "YYtahBG",
            "YYtPh",
            "tcjsX",
            "+VP`",
            "YYt7E",
            "QPVX",
            "3_^[]t$",
            "PaYUQQG",
            "5!YP",
            "V5`G",
            "Y5XG",
            "Y5LG",
            "Y^U0",
            "M\u0409EE\u0609E",
            "PhSA",
            "(EY`H",
            "EYdH",
            "U\u0209EMEEE\u0309E\u0409E",
            "PM\u0209EE\u0509E\u02f7YPu",
            "SVWEXG",
            "39}XG",
            "WE\u0621G",
            "E\u0721xG",
            "EExG",
            "}}}m",
            "uY;Yu",
            "YE;\u07e3xG",
            "S&vY\u018bv",
            "Pu5LG",
            "39}`G",
            "E8xG",
            "uY;Yu",
            "YE;\u07e3xG",
            "ScuY\u018bv",
            "Pu5LG",
            "hBE_^H",
            "[SUVWh$G",
            "$D$G",
            "$\\EG",
            "$LEG",
            "$<EG",
            "$$EG",
            "3hDA",
            "VhqA",
            "WUhDG",
            "WUhDG",
            "VhuA",
            "hLEG",
            "V|DG",
            "U5\u0733H",
            "VUh>G",
            "VUhtDG",
            "hlDG",
            "VhHtA",
            "@VhtA",
            "hdDG",
            "Wh:A",
            "h\\DG",
            "hTDG",
            "hLDG",
            "WhcE",
            "h8DG",
            "h(DG",
            "VUh DG",
            "VUS5\u0733H",
            "VhnA",
            "[ShA",
            "@Sh`A",
            "Vh+A",
            "@VhaA",
            "U5\u0333H",
            "Sh\u06bcA",
            "h|CG",
            "ShHA",
            "h`CG",
            "hLCG",
            "h4CG",
            "VSh(CG",
            "Vh|A",
            "Wh^A",
            "@VhA",
            "VhGA",
            "Vh^A",
            "VhtA",
            "@VhqE",
            "VhBE",
            "4_^][W|$",
            "~ Vt$",
            "Ou^D$",
            "_V5H",
            "t\tPW?YYv",
            "u\tPW\"YY_^",
            "t\tPQ",
            "YW|$",
            "~ Vt$",
            "Ou^D$",
            "YPt$",
            "YPt$",
            "X;u\t%H",
            "^VYu",
            "h`EG",
            "Ph!G",
            "BRPQd",
            "YPt$",
            "X3UQu",
            "3UQu",
            "X3t$",
            "SVt$",
            "~NhEG",
            ";t{u2;t.t*",
            "\"GYYE3hD1G",
            "SW6{",
            "~45H",
            "h|EG",
            "\\T|$",
            "W\u8638YY_^[U0dH",
            "M\u0509M\u0609M",
            "VMWMj",
            "$_^u",
            "X3V3VVVVj",
            "95\u0222G",
            "u95lH",
            "95@H",
            "UQQ}",
            "FSSVW}",
            "YPSV-M",
            "_^[UE",
            "XP*Y]",
            "Y}PhEG",
            "YRUDSEVPEET8G",
            "PEPE",
            "Ph(FG",
            "P|7TX",
            "EY;t9",
            "YYY}",
            "YEE;t",
            "E9]u~dH",
            "E\u0509M\u070b",
            "uW\tj",
            "uuuup",
            "ECM\u0703",
            "uuuu",
            "^[Uu",
            "3Y9E",
            "|.D$",
            "h,FG",
            "PUWu",
            "Y~\"Vu",
            "Ou^u",
            "XY_]US]",
            "tlth",
            "PW5\u0133H",
            "_[]Qj",
            "j)K,",
            "PWSaX",
            "WSKuUu",
            "]S\\$",
            "[S\\$",
            "[5\u0133H",
            "?^;t",
            "h|FG",
            "NSJ}",
            "_^[]",
            "PV5\u0133H",
            "YP$V",
            "|XVE",
            "YPhXFG",
            "=S\\$",
            "S;>YYt$",
            "YY[US]",
            "6\t>Y",
            "YuOtB4Gu",
            "YP6n",
            "_^[]t$",
            "YYUW}",
            ";LS]",
            "6h=Y",
            "YuO4Gu",
            "^[_]j",
            "S= G",
            "Yt!hFG",
            "<5 G",
            "t\"5H",
            "h,GG",
            "ZKD$",
            "hLGG",
            "+Kt$",
            "PmYYSV\u8024\u0621LH",
            "~1Wp",
            "Ou_5TH",
            "t#PD",
            "\u034b^[3u",
            "hXGG",
            "VhSA",
            "YY^VWXH",
            "VhGG",
            "VhGG",
            "VhGG",
            "VhGG",
            "VhGG",
            "jhVA",
            "@|GG",
            "W5\u0333H",
            "V5\u0333H",
            "@_^UE",
            "Ph!G",
            "X]VWt$",
            "VIQv",
            "X_^t$",
            "YYSVt$",
            "_^[Vt$",
            "\u018bvlP",
            "YY^Vt$",
            "W=LE",
            "PY_^UpE",
            "SV5dH",
            "3\u0489EHH",
            "Y}UUjpE\u0421H",
            "E\u0521`H",
            "E\u0321DG",
            "E\u0721TH",
            "EEUUDG",
            "S5\u020dH",
            "C\\ G",
            "C`kCHC",
            "C {H",
            "BXt,",
            "\u040bRlus<EY_DG",
            "^[Vt$",
            "vl$^S\\$",
            "_^[W|$",
            "toSV",
            "jpwlV",
            "PmFX",
            "\u0409wl~l",
            "u^[_j",
            "YYUu",
            "\u0469uahGG",
            "4YTDG",
            "@dtH",
            "SVWjp\u8e41",
            "C\\ G",
            "C`Cl",
            "t\tSkY",
            "BXt,",
            "\u040bRlus<0u",
            "_^[]",
            "SVWE",
            "3\u06c5tBdH",
            "YPh,HG",
            "j\"VL4v",
            "YYu\u050bFP",
            "F` G",
            "FXTH",
            "EE\u0723G",
            "^8u\u0709p$dH",
            "E\u0321LH",
            "]\u0209EtxG",
            ";ugu",
            "3uuPQu",
            "E;A,u",
            "@LEE\u030bMxG",
            "9]t.",
            "t\"M9",
            "+tTIt$It",
            "+u0j",
            "\u076d9]u",
            "uV\u026d}",
            "9]u\"ukH@W",
            "E_^[t$",
            "SVW}",
            "gYY]j",
            "M;u,G",
            "E\u070dE\u0623G",
            "fYYEE",
            "Yu>hHG",
            "YPhhHG",
            "?\u0789]j",
            "^95H",
            "hHHG",
            "p?DG",
            "t89Xdu3G",
            "uEE\u88f0G",
            "fYYEE\uc8f0G",
            "E_^[j\"Sk0[",
            "EE[G",
            "3]9x$u",
            "X$dH",
            "E\u0321LH",
            "E\u010dtxG",
            "tWPE",
            "}\u0209}r",
            "Y;Yt)",
            "E;A,u",
            "@LE36",
            "u13uYE;",
            "dYYEE\u030bMxG",
            "9}t\tpLSH@V",
            "X^'*",
            "39F\\^",
            "UtSVWj",
            "^uE]",
            "j\"S.C",
            "YYEx",
            "3\u0609EE\uc8f0G",
            "E\u030dEE\u0421xG",
            "u\u0609}\u0509}}xG",
            "Y;Yu#EWp",
            "0 EEMxG",
            "9}|\tM",
            "E_^[UVu",
            "j\"V-U",
            ";QRi",
            "YPhHG",
            ";SWj",
            "_[^]Vt$",
            "^Vt$",
            "Nj\"V",
            "^U8G",
            "EXME",
            "E\u0209MUM\u0309M\u0409MdH",
            "SVWu8E",
            "YYuVYuV",
            "YPhPIG",
            "9=.A",
            "uVVs",
            "j\"V*F",
            "QPWS%B",
            "_^[]h$IG",
            "B9US]",
            "VWj\"Su*s",
            "jp&v",
            "WS!c",
            "QP.Y",
            "YYVW",
            "YY_^[]Vt$",
            "jpt$",
            "t\tVY^",
            "YYS\\$",
            "VWj\"S){",
            "t*t&",
            "X3SUVW5H",
            "h8JG",
            "\\3PG",
            "VhFA",
            "h,JG",
            "PyVhWA",
            "h$JG",
            "v)h<G",
            "G)DG",
            "AjhA",
            "VhhA",
            "jWh-G",
            "tjWh$G",
            "S5DH",
            "I@t$G",
            "VhbA",
            "U5DH",
            "/Vh,C",
            "Vh9A",
            "VWhIG",
            "VWhIG",
            "H5\u0133H",
            "fVh@A",
            "jWh-G",
            "8jWh$G",
            "%HVh%A",
            "VWhl$G",
            "VWU5G",
            "Vh!A",
            "@Vh}A",
            "ht>G",
            "$Vh@A",
            "Vh%A",
            "VWhl$G",
            "HVWU5G",
            "0_^][h",
            "YYh8G",
            "YYSVt$",
            "Wj\"V$^",
            "jpHp",
            "WVC]",
            "YP#r",
            "_^[Vj",
            "$YYN",
            "uj\"Q\"D$",
            "j\"Sp",
            "uF<;A<",
            "xFX;AX",
            "lFP+AP",
            "$@@^[UQSVu",
            "w,u+w",
            "u$SV)0",
            "uh\\JG",
            "uhHJG",
            "_^[SVt$",
            "Wj\"V!~",
            "jpwm",
            "V5\u020dH",
            "jpWV",
            "t\tVNY",
            "_^[S\\$",
            "u@j\"Q D$",
            "j\"Sp",
            "3^[S\\$",
            "YPSV",
            "^[UQQS]",
            "WuEPE",
            "VSBTM",
            "Z;tF",
            "u%;t!t",
            "u&;t\"t",
            "_^[5G",
            "VWj\"S",
            "QP@Y",
            "Y_^[]Vt$",
            "YY^H",
            "ta)tc2t3YtN`~",
            "}S\\$",
            "UVWj\"StJG",
            "hl1G",
            "hh1G",
            "3\u0245t}h(G",
            "PVf6",
            "PVO6",
            "hpJG",
            "PV76",
            "hlJG",
            "PV\\5",
            "t'hpJG",
            "PV95",
            "hlJG",
            "UV$5",
            "h|*G",
            "_^][Uu",
            "]Vt$",
            "WVhA",
            "_^5\u0133H",
            "hxJG",
            "75\u020dH",
            "PQhJG",
            "Yu^UV5H",
            "PWeYYu&",
            "PWeYYu",
            "PWyeYYt\"hJG",
            "y_^]U<",
            "SV3Wuuu?9u",
            "]\u0509[9}6u",
            "P7c?Y9}Y}",
            "$9E}",
            "]#Us",
            "39Mt",
            "M\u0709M1E",
            "EEPPPPE@P",
            "];uu}",
            "]\u050buj",
            "]w\\u",
            "$;uu",
            "zaYYt.P",
            "aYYj",
            ";t4u",
            "9XXt",
            ";u\u03cbu;",
            "9?ul50E",
            "WjtYSW",
            "0u5=lH",
            "$hJG",
            "3PhJG",
            "H8YY",
            "8Y;5(G",
            "QhJG",
            ";t[;u W",
            "u:u5H",
            "t!Ht",
            "UQQEj",
            "P2iEYY",
            "EUQVEWP_",
            "EYfP",
            ";~TF\\~",
            "PvX]",
            "YFXY~T\u01c9~P",
            "Pv\\vXf",
            "FHdH",
            "F`LH",
            "FdHH",
            "Fx G",
            "FhDG",
            "FpxG",
            "HtaHt@Ht'HuyG",
            "hdKG",
            "G5\u060dH",
            "PEPh*A",
            "[t(xG",
            "hlKG",
            "W;F\\}",
            "v\tWV5",
            "YY%pH",
            "F`dH",
            "FdLH",
            "FxHH",
            "F| G",
            "FhTH",
            "FlDG",
            "FtxG",
            "PvXv\\",
            "Eh|KG",
            "EP5H",
            "V39t$",
            "|#t$",
            "VlVYYt",
            "VUYYF;t$",
            "~^V39t$",
            "|'t$",
            "V>VYYt",
            "V.VYYu",
            "F;t$",
            "~3^j",
            "X^UVW339}",
            "VYYt(u",
            "VUYYt",
            "VUYGY",
            "VUYYF;u",
            "_^]UVW339}",
            "VUYYt",
            "VUYYu",
            "VJUYYj",
            "_F;u",
            "~\u038b_^]39",
            "t)L$",
            "X[VWj",
            "PV]TH",
            "u_^3[U",
            "SVWu[H",
            "P3PPPP(T",
            "EEu@H",
            "Eu5=lH",
            "]\u04cbM}",
            "F|Gm",
            "hLKG",
            "W3;u+9}",
            "u&9}",
            "0<YY3B",
            "]9=@H",
            "t)oC",
            ";\u07c9]t",
            "EEE50E",
            "WuEu",
            "EuW\u04cb",
            "Eu5=lH",
            "}S\u04c38",
            "u2mb",
            "3E_^[",
            "VWl5H",
            "WnYY;5H",
            "u\u064b_^t$",
            "t)t%",
            "YPhKG",
            "WvLrT",
            "YvxGT",
            "v|?T",
            "vd,T",
            "vh$T",
            "(;5H",
            "YYS^`tk;",
            "tcF\\;s",
            "+\u060bFX",
            "YYt2;=H",
            "t*F\\;s",
            "<VWD",
            "YY\u028b[",
            "\ub44b~l[t-F\\;s",
            "lYY_^Vt$",
            "Q\\;s",
            "WyP<;_s",
            "YYv R",
            "Y^t$",
            "VSY;5H",
            "t(;6t);5(G",
            "t!V{",
            "H^[j",
            "uySV50E",
            "W\u058b\u060bD$",
            "PaYSW\u058b5DE",
            "\u058b839",
            "9\u05898_^[",
            "[UV50E",
            "UW\u058b5DE",
            "\u058b839",
            "V\u05898_^][t$",
            "SVWh",
            "~X~P~T",
            "~`~d~x~|H",
            "FhX~l~p~t",
            ";u\tt",
            ";u\u048b_^[Vt$",
            "W=LE",
            ";5(G",
            "VY_^U",
            "SVWE",
            "E3\u06c9]H",
            "h$LG",
            "E_^[",
            ";t!l",
            "lYDG",
            "E5LH",
            "SE\u0421G",
            "E\u0521xG",
            "EExG",
            "Y;YEu=u",
            "YFLYuu",
            "E;A,u",
            "@LFL",
            "E;5(G",
            "uz%V",
            "Y9]t\tu9Y9]",
            "YYtG",
            "|+0ph",
            "pP5H",
            "Sy$Vt$",
            "^Vt$",
            "\u020b\t;t",
            ";5(G",
            ";u_^[U5(G",
            ">m5H",
            "Yu(5H",
            "PRYu",
            "hdKG",
            "Q85H",
            "IYYu(5H",
            "[]UH",
            "]PYu(5H",
            "UQQVu",
            "hTLG",
            "VQYt",
            "Y;Yu",
            "Yu65H",
            "VEYG",
            "hhLG",
            "X]US]",
            "VSH=H",
            "^[]u.H",
            "V6;t",
            "Y;u(G",
            "j\"VF",
            "^SUVW5H",
            "%5\u0133H",
            "jVhMG",
            "DjVhMG",
            "3Vhp",
            "v@Vh[",
            "]VhQA",
            "GVh]A",
            "1VhiA",
            "@Vh;",
            "VxMG",
            "S5hH",
            "U5hH",
            "hHKG",
            "h\\MG",
            "VWhMG",
            "VWhPMG",
            "@VWh>G",
            "hHMG",
            "FjhS",
            "/@Vh",
            "h@MG",
            "h8MG",
            "S5hH",
            "[Sh!",
            "U5hH",
            "h,MG",
            "h MG",
            "}@Vh_",
            "dS$G",
            "U5hH",
            "hD$G",
            " @Vh",
            "hl$G",
            "jWh-G",
            "ojWU5",
            "wh4G",
            "WHWV1",
            "PhLG",
            "_^]H",
            "]hEPh",
            "]YEQQ",
            "h,NG",
            "tnSP",
            "t5t1",
            "S[PW[",
            "WVbYYV`[j",
            "X_^t$",
            "NYYSVj",
            "^[t$",
            "Y^Vt$",
            "YPhPNG",
            "Vp<#LH",
            "HH~&SW\u060b>",
            "Yu\tPW;",
            "YYKu_[j",
            "t$(HXb$^",
            "-Pt$",
            "QFL^Vt$",
            "YY^t$",
            "Y$Y@@Vt$",
            "VYYj",
            "YVt$",
            "X^t$",
            "YPt$",
            "VWt$",
            ",VY3YSVWt$",
            "Wt$,VhNG",
            "_^[UQQSVWh",
            "~X~P~T",
            "~`~d~x~|H",
            "Fh~lj",
            "~p~tX",
            "E5LH",
            "sP#[XY;uH",
            ";u\tt",
            ";u\u0489uV",
            "E@L\tueY_^[UVu",
            "QYYFL",
            "VJVj",
            "Vt$$6",
            "^SVt$",
            "Wj\"V~",
            "YYP5H",
            "SYY;5H",
            "u_^[Vt$",
            "j\"VF",
            "SVWj",
            "3YY>",
            "hlOG",
            "hDOG",
            "X_^[",
            "j\"QYY",
            "YPhKG",
            "8UdVWj",
            "E3xG",
            "EVPMuu\u0624",
            "VVVVu",
            ";HTu",
            "@L3EE;xG",
            "E_^t$",
            "hTDG",
            "Ph!G",
            "t!NH;t",
            "t1vXFTE",
            "FLu@E",
            "P35H",
            "YPhOG",
            "UQQu",
            "EEPj",
            "08~YYVt$",
            "j\"VpF",
            "YY^u",
            "P}YYt$",
            "P}YYt$",
            "P}YYt$",
            "P}YYt$",
            "P}YYt$",
            "v}YYt$",
            "z}YYj",
            "Yp MP",
            "YYt$",
            "\\t\tP",
            "@PY^Vt$",
            "X^3^UE",
            "t1/t",
            "\\t\tP",
            "t)/t",
            "\\t\tP",
            "@/t\\tu\u04cbh",
            "</ta<\\t]tYS]",
            "L3\u060bY+E",
            ";M}uu",
            "ShPG",
            "YY;E~",
            "\u0249Muu",
            "P6YY]",
            ";M}uu",
            "FFS2",
            "EGlu",
            "PbYYLWz\u02caC",
            "C</t<\\t+;u|",
            "+Pj/W|",
            "~/Fu",
            ".txHt",
            "vzE++\u01c9E+E",
            "\u0249Muu",
            "\u01c9E+E",
            "t>.t",
            "-u4C.C",
            "vD++E",
            "\u0249Muu",
            "HY;u",
            "^[UE",
            "SVWE",
            "E\t:\"s",
            "P\u0585Yu",
            "Y_^[]Vt$",
            "F^U}",
            "01YY]",
            "Ph!G",
            ">~ubj",
            "VhPG",
            "VEYtju",
            "u3_^[",
            "3;tj\tPXH",
            "YY}9x",
            "u3EYY9x",
            "E}9>tZ3%",
            "Yu&E",
            "uEXH",
            "3Pi?Yj",
            "XUQSE",
            "Y;~u_j",
            "YSRYt8=H",
            "SwYu",
            "ShPG",
            "\tS*Yt",
            "ShPG",
            "Wj\tP",
            "YY(BXH",
            "uVEYYx",
            "~\tPW4DYYXH",
            "|h,G",
            "PWpH",
            "13tSVS",
            "ViYu",
            "VhPG",
            "3^[SUVWhtSG",
            "_Wh7B",
            "hhSG",
            "WVh`SG",
            "WVhXSG",
            "Wh)8B",
            "hLSG",
            "Whc8B",
            "h<SG",
            "HWh8B",
            "h0SG",
            "Wh8B",
            "h SG",
            "WhM9B",
            "Wh9B",
            "Wh9B",
            "HWh9B",
            "WhE:B",
            "WhMB",
            "WhMB",
            "WhMB",
            "HWhMB",
            "Wh7B",
            "Wh7B",
            "WhMB",
            "WhMB",
            "Whm7B",
            "hxRG",
            "Whx:B",
            "hpRG",
            "hHPG",
            "\u03a7@@PG",
            "Wh;B",
            "U54H",
            "\u8d27W8PG",
            "S54H",
            "\u8767Vh>B",
            "hhRG",
            "\u8127Vh}<B",
            "h`RG",
            "n@Vh=B",
            "hXRG",
            "hPRG",
            "hHRG",
            "h\"?B",
            "h@RG",
            "h8RG",
            "h,RG",
            "\u02a6jVh<#G",
            "h$RG",
            "\u8766jhO@B",
            "ojh&B",
            "X@jh@B",
            ">Wh4BB",
            "(WhBB",
            "PhQG",
            "WhRCB",
            "\u8f65jhCB",
            "PhQG",
            "@h,G",
            "PhQG",
            "3Vh#7B",
            "lVh}7B",
            "hxRG",
            "VVh7;B",
            "hHPG",
            "@DVh;B",
            "U54H",
            "+Vh1<B",
            "S54H",
            "Wh6=B",
            "h`RG",
            "h:>B",
            "hXRG",
            "@Wh:FB",
            "\u04e2WhFB",
            "\u8f62hQG",
            "h|QG",
            "bj\thtQG",
            "VVh4B",
            "h@+G",
            "SjhGB",
            "hlQG",
            "i5\u0133H",
            "hdQG",
            "\u04d9hKB",
            "@WhKB",
            "WhNLB",
            "h|$G",
            "\u069bWh4B",
            "\u01a1Vh~",
            "\u8c21HVhO",
            "hXQG",
            "\u85e1VhO",
            "hLQG",
            "hxPG",
            "U@Vh",
            "hpPG",
            "hlPG",
            "hhPG",
            "h`PG",
            "@VhO",
            "h@QG",
            "h4QG",
            "\u02e0Vh;",
            "\u8d60VhO",
            "hXPG",
            "\u87e0@VhO",
            "hPPG",
            "\u81a0VhS",
            "hHPG",
            "pVhj",
            "L@Vh",
            "hl$G",
            "3VhLB",
            "hpRG",
            "VhLB",
            "hhSG",
            "Vh4MB",
            "hLSG",
            "@VhvMB",
            "h<SG",
            "\u061fVhMB",
            "h0SG",
            "Vh(NB",
            "h SG",
            "\u8b1fVhrNB",
            "\u859f@VhNB",
            "gVh%OB",
            "QVh;OB",
            ";@Vh",
            "\"VhMB",
            "VhMB",
            "VhMB",
            "@VhMB",
            "\u01deVhMB",
            "\u8c5eVhLB",
            "\u86deVhMB",
            "\u815e@VhMB",
            "lVhMB",
            "V _^][Vt$",
            "Y^Vt$",
            "t4t$",
            "Y;Yu",
            "X^U@SVWhl1G",
            "YY4OG",
            "PEhSG",
            "P\u05cdE0t",
            "PEhSG",
            "P\u05cdEPS\"",
            "jh|*G",
            "_^[U$E",
            "UEPu",
            "YPJEP",
            "YYVt$",
            "Wj$A",
            "Yj\tY_5LE",
            "^UVh",
            "YP(YY^]U$Vu",
            "YEYP6",
            "AEPY^t$",
            "YYt$",
            "YU$EPu",
            "$@@U$EPu",
            "Y3YU$EPu",
            "$@@U$EPu",
            "YY3\u0245",
            "MYD$",
            "YPGYY3\u0245",
            "YY3\u0245",
            "YPYY3\u0245",
            "YY3\u0245",
            "cYD$",
            "YP]YY3\u0245",
            ")YD$",
            "YY3\u0245",
            "IAAU$EPu",
            "$@@U$EPu",
            "$@@U$EPu",
            "XubYU$EPu",
            "\u0243AAU$EPu",
            "QYY}",
            "YP4uQbYU$E",
            "YEYPE",
            "YP)%YYu",
            "YU$EPu",
            "YPxj",
            "YYU$Vu",
            "YEYP6",
            "YY^U$Vu",
            "YY^U$Vu",
            "YEYP6",
            "YY^U$Vu",
            "EPVYY}",
            "YY^U$Vu",
            "YEYP6",
            "YY^UQQj",
            "EPEPhSG",
            "YPuh",
            "W39~",
            "GY;~",
            "Y|\u02cbF",
            "_^]t$",
            "YY}\tt$",
            "lVWj",
            "X_^U",
            "EPEPEPhSG",
            "YEEPuh",
            "}\tt$",
            "hSVWj",
            "Y\u060bD$",
            "X_^[U",
            "PhSG",
            "EEPUuh",
            "w*YY}\tt$",
            "X]USVu",
            "Y}\tt$",
            "X]Wj",
            "V5`E",
            "\u058bWYY^&|$",
            "u&D$",
            "Ph!G",
            "QeY?",
            "Xu{F3vW6Yu6}",
            "WQY+\u01cbM",
            "Y+PV-",
            "Yu!t",
            "_^]S\\$",
            "3W|$",
            "WS+|",
            "YYt+!;}",
            "#_^[VD$",
            "Y;Yv",
            "wWYu",
            "YS+SPVD",
            "Y;Yu",
            "[_^VD$",
            "VvYYu",
            "Gj.W",
            "YYt>;t:V+PV",
            "u/t(L$",
            "YYP$)YY5",
            "W3\u048by",
            "U;}u",
            "U~Bq",
            "Ou\u024b}",
            "u't#",
            "tBHSHt",
            "]EEPu",
            "\u060dEPO",
            "YYSua",
            "\t0E^_",
            "0YYUVWj",
            "YYV}",
            "t\"Yj",
            "X_^]SVj",
            "YY_}",
            "X^[SVWj",
            "VS6YP=",
            "VS6\u0743",
            "X_^[USS]",
            "YY}8",
            "[YY[]UH}",
            "SVWu",
            "t*t&",
            "utd\u01c3GtN",
            "t&Ht",
            "\u01c3atyHtgHtUHtCHtmWh",
            "ttf\u01c3gtP",
            "t<Ht*",
            "!w\u01c3stCHHt3HHt#Ht",
            "!\u01c3At!HHt",
            "YY_^[j",
            "YYtzVu",
            "|BEPv",
            "YY|0\u01c3-t-",
            "Hu6E;E~",
            "E;E E;E}",
            "3\ub00bE;EufEf;EuWhSG",
            "U$EPu",
            "nYY}",
            "@;D$",
            "~IL$",
            "VWxq",
            "Ou_^j",
            "YYU$E",
            "YEYPE",
            "Yuj\tYj",
            "X_^[S\\$",
            "\\S%Sx",
            "h(TG",
            "Yj\tYC",
            "_^[t$",
            "PYYt$",
            "$@@t$",
            "$@@Vt$",
            "FF^VW|$",
            "WQWYYt\tfF",
            "^VW|$",
            "YYt\tfF",
            "^3Vt$",
            "FF^VW|$",
            "^VW|$",
            "W]WYYt",
            "PiYYt",
            "^VW|$",
            "WYYt",
            "W&Yt",
            "_^VW|$",
            "WWYYt",
            "PYYt",
            "_^t$",
            "$@@t$",
            "$@@t$",
            "XPpMYUu",
            "~'=H",
            "hHTG",
            "=%S\\$",
            "hlTG",
            "O_^[Vt$",
            "WVyVj",
            "_^S\\$",
            "UVW}",
            "u\tS<YKu",
            "SUYY",
            "SUYY",
            "_^][",
            "_^t$",
            "^SVt$",
            "]UQEPu",
            "uAVWu",
            "P(VE ",
            "GW^l",
            "uW5<H",
            "Ht(Vt$",
            "Ou_^SUVW|$",
            ";=,H",
            "rD;=DH",
            "3~058H",
            "+3Yt",
            ";|3_^][j",
            "Y3Yj",
            "YYt$",
            "YYS\\$",
            "Vuqti",
            "tc@u_t$",
            "FVSK",
            "YY6=0H",
            "u-$H",
            "vYYS\\$",
            "YY\u0203?\"w|",
            "$YWB",
            "!#t!",
            "pYY[",
            ")YYUs",
            "uft^",
            "tX@uT",
            "?VPhTG",
            "YOYu_^][Uv",
            "lYYOu\u028bF",
            "@Htx",
            "+YOYuv",
            "YY8hTG",
            "^UHVWj",
            "h(UG",
            "39=@H",
            "9=(H",
            "E9}t/u}YE9x",
            "W5LH",
            "7W5TH",
            ";t\tWPtYYEWPh",
            "P5lH",
            "Y;uHYI",
            "95$H",
            "9=0H",
            "9=\\H",
            "=DTG",
            "@<\u01a1,H",
            "9=DH",
            "~?VW8H",
            "@<;s",
            "VtYY",
            "|_^[U",
            "YY^U",
            "SV3W95H",
            "uutRtI395hH",
            "~?8H",
            "?<?u",
            "G;=hH",
            "|35H",
            "Vh]B",
            "395hH",
            "uE8H",
            "@4;sm",
            "@uVt",
            "Y=PH",
            ";EuE\\H",
            ";vMU+EEumEum",
            "uEmMumc",
            ";5(H",
            "XVWj",
            "_9=hH",
            "FG;5hH",
            "|_^SVt$",
            "JJt}JtjJ",
            "Jt`J",
            "Jt#J",
            "tx;u",
            "3;u_I",
            "tHtxH",
            "hHtW",
            "t!Hu}F",
            ";t:Pv",
            "_^[;tQYF",
            ";tP;",
            "t!\u0443=tJt*Jt",
            "QVhpUG",
            ";t9^",
            "WVhLUG",
            "WtLM",
            "3t+E",
            "VPQRE",
            "V5TH",
            "\t>^_]",
            "YS\\$",
            "t>Vs",
            "u^[U",
            "EEPEPW$'4H",
            "|\u06e1TH",
            "tRMQM",
            "t=E39p",
            "EEPEPW&E",
            "XSU3V9-PH",
            "Wts5`H",
            "39-hH",
            "Y~]8H",
            "@<;s<\u0383",
            "|39-hH",
            "~v8H",
            "@<;sU",
            "?\"u69n",
            "t19n",
            "|_^][UQSVWh`VG",
            "h3\u06fe`B",
            "SVhMG",
            "qShPB",
            "hXVG",
            "hPVG",
            "pS@VG",
            "VW50H",
            "nDh4VG",
            "gjh\teB",
            "h(VG",
            "PEpSVWupj",
            "^VhfB",
            "upVh",
            "upDSh$gB",
            "upVh5gB",
            "umpjh{gB",
            "uYpVh]gB",
            "uFp@VhihB",
            "u0pEP_h4H",
            "EPi`",
            "(_^[UQj",
            "YUW339=hH",
            "SV8H",
            "@4;sl",
            "tItE",
            "t5<~\"?",
            "G;=hH",
            "o^[D-",
            "]UW339=hH",
            "SV8H",
            "@4;s|",
            "tItE",
            "tE<~\"?",
            "G;=hH",
            "_^[D-",
            "]VhVG",
            "YPhdVG",
            "\u062b54H",
            "YY^hVG",
            "Yh<WG",
            "UQQE",
            "VPEPh!G",
            "uoeE",
            "E5PH",
            "MQuP\\",
            "tDuj",
            "YYPh-G",
            "YPhdVG",
            "Pu5TH",
            "^SVWj",
            "3_^[",
            "VZYt)",
            "WhWG",
            "\u0629Wh|WG",
            "YUQQU",
            "tftb",
            "uA5hH",
            "t,t(",
            "t*:u\t:u",
            "X E]PhiB",
            "t&t\"",
            "t6$t1j",
            "j%P`/",
            "MMQhjB",
            "h\tkB",
            "PhSkB",
            "PhnkB",
            "\tHt)Hu\"j",
            "X_^]5,H",
            "YS\u060bD$",
            "Y[UE",
            "^]US]",
            "Y~,E",
            "hH$G",
            "ZVt$",
            "V~VhmB",
            "YY3]Vt$",
            "_^SWG|$",
            "\u0605~!Vt$",
            "EPSl",
            "Ou^_[",
            "\u84e4VVhUnB",
            "3]USVu",
            "tDt@",
            "YYWG",
            "Y@WG",
            "YYSUVWhH$G",
            "Z5\u0134H",
            "P4]h",
            "UhwB",
            "S5,H",
            "dUh{wB",
            "_Wh{B",
            "h|$G",
            "bL3VhxB",
            "bVh,C",
            "bVh'}B",
            "hd$G",
            "bVh~B",
            "ht$G",
            "b@Vh}B",
            "hl$G",
            "gbWh",
            "hX$G",
            "QbWhKlB",
            "S5,H",
            "?bUhxB",
            "h8$G",
            ")b@nB",
            "ShD$G",
            "ShXG",
            "aUhiyB",
            "aWhyB",
            "a@VhyB",
            "a_zB",
            "USh#G",
            "aUSh#G",
            "wa@A|B",
            "VSh#G",
            "]aVSh#G",
            "KaVhP|B",
            "5aVh|B",
            "a@Vhc|B",
            "aVh|B",
            "`Vh|B",
            "h|XG",
            "`Vh}B",
            "`@Vh0",
            "`Vhg",
            "htXG",
            "`UhmB",
            "hD#G",
            "`VhzB",
            "i`@WhlB",
            "h<#G",
            "P`VhqmB",
            "h$#G",
            ":`Uh",
            "hP#G",
            "$`VhU{B",
            "`@VhmB",
            "_Vhg{B",
            "_VhPB",
            "hlXG",
            "WShdXG",
            "_@Wh{B",
            "_WSh\\XG",
            "hTXG",
            "WSh\"G",
            "Z_@WSh -G",
            "E_WShHXG",
            "3_Wh",
            "h<XG",
            "_WSh",
            "_@Wh",
            "h4XG",
            "P7>Wh",
            "`UhB",
            "h8$G",
            "}`cB",
            "ShD$G",
            "e`Lj",
            "ShXG",
            "O`VhJB",
            "9`VhB",
            "h|XG",
            "#`VhB",
            "`@Vh!B",
            "_Wh$B",
            "h<#G",
            "h$#G",
            "_VhB",
            "_@VhB",
            "hP#G",
            "m_VhB",
            "W_@Vh%B",
            "hlXG",
            ">_Wh2B",
            "(_Wh\u018dB",
            "hdXG",
            "hl$G",
            "^@VhO",
            "^Vh\u0209B",
            "hd$G",
            "ht$G",
            "^WhUB",
            "^@\u058bB",
            "USh#G",
            "^USh#G",
            "u^9B",
            "VSh#G",
            "^^VSh#G",
            "L^@VhcB",
            "3^VhLB",
            "^Vh\u0345B",
            "htXG",
            "^Uh\u0387B",
            "hD#G",
            "WSh\"G",
            "]WSh -G",
            "]WShHXG",
            "WUh<XG",
            "]@WSh",
            "]WUh4XG",
            "u]VhGB",
            "_]5|H",
            "h0XG",
            "8_^][US]",
            "SrYt1}",
            "u+t#K",
            "[]SVt$",
            "[;t=t9",
            "u!t$",
            "Nu_^[Vt$",
            "WVfF",
            "WhxB",
            "3UQQEVPE",
            "Ph!G",
            "\u8289YEPE",
            "E^UE",
            "]S\\$",
            "S/D$",
            "XUQQE",
            "EEPh9zB",
            "X^3^UVWt#P\u07d0",
            "|_^]U",
            "EPh({B",
            "uuYY7",
            "YYVt$",
            "^USu",
            "Y;\u0609E",
            "t^SSh#|B",
            "\u07cb[]hXG",
            "$@@j",
            "h{|B",
            "Sht}B",
            "3Vt$",
            "VYY^Vt$",
            "h@YG",
            "Vh}B",
            "^h<YG",
            "Y^ShLYG",
            "ShF~B",
            "hHYG",
            "3]SVu",
            "hPYG",
            "_^3[]t$",
            "h@YG",
            "PvYYVVhN",
            "YY3VVh",
            "UQQE",
            "EEPh",
            "Vt!t$",
            "X^3^j",
            "UQQM",
            "t(hXG",
            "YYt4E",
            "EEPh",
            "Vt2u",
            "3^]VVhnB",
            "3Vt$",
            "tYt$",
            "h#|B",
            "^UVu",
            "t;Vu",
            "cYYPVj",
            "3^]t$",
            "YPkYYVt$",
            "Y^Vj",
            "hTYG",
            "4VYt/WP-",
            "Vh,G",
            "X^Vt$",
            "X^V;",
            "^Vt$",
            "^VD$",
            "YYL$",
            "hTYG",
            "Yt8h,G",
            "X_^UQSVEWPE",
            "Ph!G",
            "hTYG",
            "\u030eVbYu)t",
            "\u86ceE*h,G",
            "WxY_^[U=H",
            "hTYG",
            "htYG",
            "\u040dWV;h,G",
            "_^]VWZxH",
            "t2j=6",
            "+PQtPW",
            "u\u04e1xH",
            "PY_^VW39~",
            "4mGY;~",
            "_^VW_xH",
            "t.j=6",
            "@PPWt",
            "u\u05e1xH",
            "P\"Y_^VW39~",
            "4GY;~",
            "YYVWNxH",
            "tFSj=7",
            "YYt%",
            "+QPcPVCS5PV",
            "3Y9~",
            "4t\tj",
            "GG;~",
            "|\u044bD$",
            "QYYUQQW3j",
            "Y*EE9x",
            "YtXPE@",
            "t=E@",
            "EYYGE;x",
            "_B|H",
            "SW^|$",
            "Ou^_[U}",
            "taSWj=6",
            "YYt>",
            "+QPGWrWSj",
            "WS$Pu",
            "_[PE",
            "Y^]UQVj",
            "mYE3E9p",
            "~2E@",
            "eYYFE;p",
            "|\u03a1|H",
            "^h0XG",
            "YSVhLYG",
            "tqWj=6",
            ";5xH",
            "YYt;hYG",
            "+QPS\u8d52",
            "$HYG",
            "^[UWdxH",
            "tKSVj=7",
            "YYt(",
            "PY+PVSYYPPU^",
            "Y_]Vu3xH",
            "^VK3xH",
            "^PY^",
            "YYL$",
            "hTYG",
            "^S\\$",
            "3[VWxH",
            "t9j=7",
            "YFYt",
            "u35xH",
            "Y_^[j",
            "^VD$",
            "YMxH",
            "t=j=7",
            "YFYt\"V\\3",
            "^5xH",
            "?+NVW%YYVWt$",
            "PhYG",
            "~>D$",
            "<PYYO",
            "F;t$",
            "_^UW_xH",
            "tESVj=7",
            "YYt\"",
            "PUY+PVSjYYPU",
            "u\u0121xH",
            "^[PY_]PYVxH",
            "\u024btGj=Q",
            "YYt3",
            "W+PQ",
            "oPVj",
            "KWV _^",
            "P YUQW",
            "3E9p",
            "4WYFYE;p",
            "|^_Vt$",
            "t)t$",
            "Vt$ ",
            "YY3^Vt$",
            "^Vt$",
            "t6ut",
            "YYPVj",
            "9LYx",
            "\u8b83SiY[",
            "h$ZG",
            "\u8303Vt$",
            "h<ZG",
            "d^Vt$",
            "hLZG",
            " ^Vt$",
            "YY^Vt$",
            "\u0182 t$",
            "jYYQt$",
            "PJjYYu",
            "YSU-DE",
            "V50E",
            "SW\u0543=\u0222G",
            "u5=lH",
            "Y\u0543|$",
            "_^]`",
            "FPVMk",
            "PV\u85bdj",
            "YYQQD$",
            "UP5h",
            "t$ YVw",
            ";t^|",
            "UPYY",
            "t$ _D$",
            "PUYP",
            "YYt<t$ U",
            "YY}%",
            "+_^][YYt$",
            "YYVt$",
            "V0VS",
            "SUWP",
            "P.fV=0E",
            "US\u05cb=DE",
            "39-\u0222G",
            "u39-lH",
            "9-@H",
            "U\u05c3|$",
            "YY3^Vi6",
            "SUVWD$",
            "l$(50E",
            "\u0249L$(",
            "P@eU",
            "9D$(~",
            "D$(j",
            "t$,j",
            "u5=lH",
            "T\u04cbL$",
            "D$ )D$",
            ";D$(|y",
            "D$,fYD$",
            "t$(W\u04cb",
            "D$(u5=lH",
            "]T\u04cbL$(",
            " t.\u04cb",
            "L$ D$ L$",
            "zD$$+D$",
            "_^][",
            "D$$;D$",
            "9D$$u3U",
            "EEPu",
            "V3VVj",
            "^UQVu",
            "EPWE",
            "E_^U",
            "3\u0243}E",
            "t\t+E@E",
            "EWV\u8ec3",
            "?Et7",
            "SEYEuhpH",
            "\u05cb=DE",
            "Eu5=lH",
            "Eu$C",
            " t`S",
            "E_^[QSUVWt$",
            "S\\$ S+50E",
            "P`Sj",
            "WU~YD$",
            "u5=lH",
            " t+U",
            "_^][YSUl$",
            "P_YY50E",
            "WUYSW\u058b5DE",
            "\u058b839",
            "O\u05898_^][",
            " YYu",
            "htZG",
            "qwV\t6W",
            "hdZG",
            "X_^Vt$",
            "YYQL$",
            "SUVt$",
            "33WF",
            "YY}$",
            "(oYt",
            "t,63\u05c5Y}!",
            "3P6Y}",
            "3\u06c3|$",
            "v_^][Y",
            "SVWp",
            "t76j",
            "SLYF",
            "X_^[SUVWt$",
            "UPYPYYu",
            "UPYPYYu",
            "_^][",
            "uwZG",
            "ugZG",
            "HtLHt9Ht",
            "QhZG",
            "u5ZG",
            "u%ZG",
            "B+t\tbu",
            "VhZG",
            "WYYu,",
            "WYYu",
            "Wlt_^[V5E",
            "YYu?=DE",
            "t_^t$",
            "SVW|$",
            "_^[t$",
            "VW39{",
            "WPF$",
            "_^[]",
            "udZG",
            "uTZG",
            "t7Ht$Ht",
            "QhZG",
            "zq\u0140ZG",
            "u%ZG",
            "UVWu",
            "q_^]",
            "XUS]",
            "h4/G",
            "X]UE",
            "YY|~zVW}",
            "h4/G",
            "Ph|B",
            "u_^j",
            "X]UVu",
            "W39~",
            "X_^]t$",
            "P5$H",
            "t45H",
            "u&=H",
            "X^Vh",
            "^S\\$",
            "t&t\"",
            "YPS}",
            "SUV3W",
            "t;;t7",
            "u$39p",
            "Y;Yu-?-u(",
            "h@[G",
            "SW95H",
            "t+;t'",
            "PYD$",
            "WDSv",
            "HhZG",
            "W;54H",
            "yY354H",
            "t^5H",
            "FYPh",
            "3?u7",
            "X_^][(VWt$",
            "23Y9~",
            "_^Vt$",
            "hl[G",
            "t$t$",
            "YP5H",
            "YYVd",
            "Y^UQ",
            "U;E'EPh>G",
            "EPCp",
            "Yu)=H",
            "t75H",
            "SVWj",
            ";u Vj",
            "PWbYY",
            "D3MEQPW",
            "EtC;Eu5E9p",
            "t\tEPu\ubb03}",
            "E_^[UQ39E",
            "POVu",
            "V+EPC",
            "}E;E",
            "thE;E",
            "t\tPSpp",
            "UV0WpH",
            "Ju+VPD$",
            "PN$ ",
            "UVoYD$",
            "8u5=lH",
            "0gVP",
            "3_^][",
            "XSUVW5H",
            "Ph\\G",
            "'WhtB",
            "'Wh~B",
            "'@WhB",
            "[ShfB",
            "'WhxB",
            "'WhB",
            "'Wh.B",
            "u'3VhB",
            "Ug'HP#G",
            "US'Wh",
            "C'ShyB",
            "3'WhB",
            "#'WhB",
            "$@5\u0133H",
            "0oWhB",
            "y&WhqB",
            "c&WhB",
            "M&HWh",
            "4&WhB",
            "&WhB",
            "hP+G",
            "&WhgB",
            "%@WhB",
            "%WhB",
            "%VhB",
            "h|\\G",
            "%WhB",
            "#@|,E",
            "hx\\G",
            "UVh H",
            "ht\\G",
            "UVh H",
            "hp\\G",
            "hl\\G",
            "VhYG",
            "hh\\G",
            "hd\\G",
            "h|$G",
            "\"WhB",
            "\"ShB",
            "\"LWh\u07e2B",
            "\"WhB",
            "WUh ",
            "_\"WUh",
            "M\"@VhIB",
            "4\"Sh",
            "\"WhB",
            "!@Uh",
            "$Vh,C",
            "!VhB",
            "!VhB",
            "!Sh\u01bbB",
            "!LVhB",
            "l!Sh\u013fB",
            "V!WhrB",
            "@!Wh",
            "*!@Sh",
            "!WhHB",
            " WhMB",
            " VhB",
            " @VhaB",
            " ShB",
            " Vh\u04f9B",
            "Z Wh@B",
            "D ShX\\G",
            "hL\\G",
            "h@\\G",
            "DVhIB",
            "VUhl",
            "VUh`",
            "@VUhX",
            "@VhB",
            "VUh(",
            "VUh ",
            "Vh\\B",
            "@WhKB",
            "Vh_B",
            "@VhB",
            "hl$G",
            "S54E",
            "h8\\G",
            "VUh0\\G",
            "Vh$H",
            "h(\\G",
            "VUh$\\G",
            "Vh$H",
            "VhCB",
            "ht$G",
            "Vh*B",
            "WUh ",
            "@WUh",
            "Vh7B",
            "@WUhd$G",
            "Wh.B",
            "@VhMB",
            "@VUhl",
            "Sh5B",
            "VUh`",
            "VUhX",
            "@VhfB",
            "VUh@+G",
            "Vh[B",
            "@VhB",
            "VhGB",
            "@Sh\"B",
            "Th\"G",
            "zrWhB",
            "@Sh[G",
            "m@_^][SVj",
            "t\tS[",
            "Y\u060bL$",
            "X>QJp",
            "VV:VS",
            "^[Vt$",
            "VYVF",
            "VP`D$",
            "YY^Vt$",
            "V%V0",
            "jYPY^UE",
            "Ph!G",
            "VYYt$",
            "WVY0",
            "V-YYj",
            "WVY0",
            "YY_^VW|$",
            "VYYj",
            "VVY0",
            "Yu\tF",
            "X_^Vt$",
            "^Vt$",
            "VfD$",
            "^VWt$",
            ">VWGW",
            "X_^Vt$",
            "^Vt$",
            "UQSVWE",
            "Ytf~",
            "Sh\\G",
            "Ye_^[USVE",
            "Ph$G",
            "_;uB9}",
            "VNVq",
            "P=<V",
            "zTVSp",
            "_^[]U$Vu",
            "3`MQP",
            "YYuEEf%",
            "u8V0",
            "YYM;|!|",
            "h4]G",
            "S_^U}",
            "Ph>G",
            "^]Vt$",
            "^SVt$",
            "VgV\\$",
            "d^U}",
            "Ph>G",
            "YV\u806bu",
            "PV\u8b2du",
            "^]U}",
            "Ph>G",
            "]QQSUVWt$",
            "YYpH",
            "SVD$",
            "\u8f23Yt$",
            "u5=lH",
            " tDV",
            "UYl$",
            "KQD$",
            "_^][YYVt$",
            "Z^Vt$",
            "hT]G",
            "V!3Y9",
            "hT]G",
            "xOSp",
            "YYu#F",
            "hl]G",
            "JOu\tSlY$6f",
            "hT]G",
            "YYu#F",
            "Nu\tSY",
            "X^[USVE",
            "Ph!G",
            "=YSW6",
            "WYY_^[]USVWj",
            "t\tSO",
            "VVpF",
            "5YYu",
            "[]UQQSVE",
            "WPEPh!G",
            "6P3VE",
            "L50E",
            "uW\u058b5DE",
            "\u0583=\u0222G",
            "8u5=lH",
            "h#\u05898u",
            "@LSu",
            "Yu^UE",
            "Ph!G",
            "`RVj",
            "u9/Vt,\u07f74E",
            " P\u05a14E",
            "Vh,A",
            "YPt$",
            "SVWu",
            "3;YEu",
            "YEPEPu",
            "YPVr",
            "9YV|J5",
            "Y_^[Vt$",
            "VhZG",
            "YVt$",
            "Vh,A",
            "^UQSVEWPE",
            "e_^[",
            "|TVM",
            "8|YuH",
            "I@QP2F",
            "Yu t",
            "^UQQSVWj",
            "(NEPEPh!G",
            "uBN}",
            "YYu\"Pv",
            "G6= E",
            "PEhZG",
            "_^[h",
            "SUVWt$,",
            "YT$,|K\\$(",
            "E\\$(S%p",
            "Vyt$4",
            "WP\tG",
            "W7FYYF",
            "VP.YYG",
            "D$(7D$",
            "t$$.",
            "t$ t$",
            "Yt5|$",
            "WEY0\u0543",
            "P9D$",
            "Yu;v",
            "YYdP",
            "CP\u04cbY;t5v",
            "ChZG",
            "t$((YD$,H",
            "D$(H",
            "_^][",
            "QSt$",
            "UVWP7x",
            "W\u82fe3Y9k",
            "WP_j",
            "W7AYY",
            "t$$D$",
            "tT7\u04cbUT$$YYL$",
            "YhZG",
            "_^]t",
            "/YD$",
            "[YVWt$",
            "\u05cbY}/S",
            "(A_^",
            "t$t ",
            "XUS]",
            "t*t&",
            "[]t$",
            "XW|$",
            "OYu^",
            "\u8e7fYYj",
            "X]Vt$",
            "0^Uu",
            "YYu.u",
            "K>]t$",
            "h<^G",
            "lhh^G",
            "UQQj",
            "UEEPEPh!G",
            "YS3\u06c3}",
            "Wu/E",
            "$EPC",
            "udEEp",
            "_^[SVW|$",
            "}*h^G",
            "WVS\t",
            "_^[UQEPE",
            "u);u",
            "PPh^G",
            "PYt_H",
            "tUtQ",
            "u9Vt$",
            "t\"PV",
            "^VD$",
            "Vt$ ",
            "YY.W(p",
            "V|YYj",
            "VYPVW",
            "_^U8",
            "SVEWPE",
            "PEPh(FG",
            "3\u06c9]]u",
            "E\u060dEYU\u0709E}",
            "j\tu*YEEY9X",
            "4PXx",
            "P7YPu",
            "E\u434dQPYPuYY79EY}",
            "7YEEC;X",
            "E\u0609E3\u06c3}",
            "*YEE",
            "P7YP",
            "7YEG",
            "t'QPYPtw",
            "9E}\tw",
            "]I]}",
            "G)YEE",
            "4\\Px",
            "P7YPXt7\u0583",
            "7YEG",
            "t'QPYP,tw",
            "9E}\tw",
            "]uE@uuuPR!",
            "89]u",
            "3\u06cb9]Y}t",
            "S\u040fYPW\u8dd29]YYt",
            "S\u8d0fYPW\u86d29]YYt",
            "S\u860fYPW",
            "9]YYt{G",
            "4.P\u8ff2x",
            "u7YPsYYu",
            "P7YPsYYt",
            "Su\u8cd3Pu",
            "EC;X",
            "|}39]t}G",
            "4P=x",
            "u7YP.sYYu",
            "t(uWYP",
            "sYYt",
            "/Pu\u8211",
            "|}39]t}G",
            "4(P\u8e71x",
            "u7YPrYYu",
            "t(uWYPrYYt",
            "|}_^[UE",
            "Ph!G",
            "$]UQSVWu",
            "E3J<E",
            "Ytn;tj",
            "Y6]V",
            "PVo=",
            "V\u0770Y=E",
            "u6YP",
            "t6t2",
            "t'P6Y;Yt",
            "\u8f7dY_^[U}",
            "\"4SV50E",
            "SW\u058b5DE",
            "\u058b839",
            "_^[]U",
            "uEEEPEvB",
            "YYu8u\u89bcEEPEPVE",
            "W\u87fcYuv",
            "tVW4",
            "Ph!G",
            "EP88",
            "PEhB",
            "Ph5B",
            "PaYYVt$",
            "Ph!G",
            "PEhB",
            "EPEPE",
            "m83h",
            "X9Et.9Et",
            "uEhB",
            "PhuB",
            "h4_G",
            "P.Y u",
            "hH_G",
            "hPt$",
            "h\\_G",
            "PbYYqu",
            "hx_G",
            "PqY!u",
            "t>=H",
            "P_Yt",
            "X3UQQSVE",
            "EPh$G",
            "[9]t",
            "YE9]",
            "u ;t",
            ";t8Vu",
            "YY;t)9]t$}",
            ";E}7)Eu1Y",
            "_^[2twH",
            "YP5H",
            "u$=H",
            "X\u8bbet@H",
            "t6t2",
            "t/%tRj",
            "t\tPYH",
            "PPYh[G",
            "jWhGG",
            "V7jWh_G",
            "V)j\th_G",
            "_^U,SVWj",
            "_EPE",
            "PEPh",
            "u!E;t",
            "}tT5\u061eH",
            "VYYu",
            "E\u0609uV\u0148",
            "WW5\u051eH",
            "Yu#!",
            "EEEE\u0509EEPj",
            "EPEh\tB",
            "PhzB",
            "\u8f9e _^[t$",
            "SVt$",
            "^[Vt$",
            "SVWu",
            "EEPSv",
            "_^[So",
            "VjIYY",
            "Vj0YYv",
            "VjTu",
            "VjiVS",
            "VSjU",
            "VW,}",
            "SCYY",
            "VjIYYj",
            "VSjuV",
            "$Vjc",
            "VjfC",
            "YYVQQ",
            "VjlC",
            "HV$-",
            "V5hH",
            "Vj\":Vs",
            " VSW",
            "V5\u0534H",
            "Vj[{",
            "V5,H",
            "Vj{0}",
            "hd`G",
            "#Vj}ZC",
            "YYVp",
            "EPhB",
            "WVSjS",
            "|hWVSjo",
            "MWVSjd|",
            "YPh<`G",
            "OEPu",
            "YY<S",
            "YPh,`G",
            "3\u048bDt",
            "VWS1",
            ">#uC",
            "VPh`G",
            "0!UV",
            "Y;Y]t",
            "Vh`G",
            "\t!_^[Uu",
            "UQQE",
            "V3W;u",
            "VYYf~",
            "\u0608E;|",
            "PFY;Y~_^UdE",
            "YYu,E",
            "$YYu",
            "h aG",
            "$YYt",
            "YEYu",
            "D5PQQ",
            "PEP>",
            "WPEj%PQQ3",
            "EPj QQ",
            ">Fw|>",
            "t_^UQVWu",
            "j;Vu",
            "*j:tYYVWD",
            "_^Vt$",
            "3^UE",
            "Ph(aG",
            "YPYYS\\$",
            "3t0|$",
            "hHaG",
            "u0Vs",
            "t^[UE",
            "V#VE",
            "jCYYu",
            "YY^]Vt$",
            "t\"W|$",
            "QWhB",
            "1YY^Vt$",
            "3^Vt$",
            "Ph!G",
            "h<1G",
            "{ t*E",
            "Y`5\u021eH",
            "x{YYt",
            "Yub;",
            "PVQVhaG",
            "EsEE",
            "EEPEhk",
            "Ph&B",
            "^PVQj",
            "hdaG",
            "t@t<",
            "h bG",
            "UQSVW}",
            "WXY\u0203UM",
            "toHte",
            "tLHt8",
            "h|cG",
            "Yu#;t",
            "uH;t t",
            "u ;t",
            "YYu~u",
            "h\\cG",
            "hDcG",
            "VPoYYE",
            "S'rYYE",
            "u!WPE",
            "YPuo",
            "WSa\t",
            "qPS\u0174",
            "SuYYu",
            "YPhbG",
            "WhPj",
            "h aG",
            "lYSVoVj",
            "oPS6",
            "t/395_G",
            "Y5_G",
            "V5\u011eH",
            "YPhxbG",
            "VVWSPj",
            "NkWS%",
            ",~.E",
            "uS\u87daWS ",
            "Qh`bG",
            "`jWS",
            "Nt FWWE",
            "WZYC",
            "YPh8bG",
            "YYSj",
            "(WW`",
            "_^[U",
            "Ej%PQQ",
            "j Y)M",
            "EmQQ",
            "_[SUl$",
            "Y3+u",
            "Y3\u06c5~`3U>Y\u03c3",
            "Y~\"3U",
            "Nu_^][t$",
            "USVW}",
            "t8t4",
            "YYjWyE",
            "h bG",
            "_^[]UVu",
            "]hcG",
            "WVV&YPp",
            "_^Vt$",
            "VY;Vu",
            "Y^t$",
            "YYt$",
            "YP~YYSVt$",
            "^[t$",
            "nY~+VW8t$",
            "bPVt$",
            "Ou_^t$",
            "Y3UQQE",
            "YEPQ;YY",
            "YYVhdG",
            "PhdG",
            "PhdG",
            "^VhH",
            "CVhJ",
            "-@Vhj",
            "h|dG",
            "htdG",
            "hldG",
            "hhdG",
            "hddG",
            "w@Vh",
            "h\\dG",
            "^VhN",
            "hTdG",
            "hLdG",
            "hDdG",
            "h<dG",
            "h8dG",
            "h0dG",
            "0^Vt$",
            "YY^t$",
            "YYt$",
            "YYt$",
            "YYUQQVWu",
            "]YY\u05838",
            "YYUQQVWu",
            "]YY\u05838",
            "YYt$",
            "YYt$",
            "YYt$",
            "YYt$",
            "YYUQQVWu",
            "$$]YY\u05838",
            "h|dG",
            "YYt$",
            "YYUQQVWu",
            "$k%]YY\u05838",
            "hldG",
            "YYt$",
            "YYUQQVWu",
            "]YY\u05838",
            "hddG",
            "YYUQQVWu",
            "]YY\u05838",
            "h\\dG",
            "YYUQQVWu",
            "]YY\u05838",
            "hTdG",
            "YYUQQu",
            "YYP^YYVt$",
            "YY^Vt$",
            "YY^t$",
            "YYt$",
            "YYhdG",
            "UQQVu",
            "EEPE",
            "PEPhj",
            "t6t2",
            "YPWh",
            "_^D$",
            "XUVu",
            "WVH_^]DA",
            "V5(E",
            "$YYu>E",
            "$YYu.E",
            "X^]U",
            "hLeG",
            "Q\u8996YA",
            "$hDeG",
            "Ej P",
            "EPh eG",
            "t%t!",
            "Q\u0695YQYt$",
            "P=?Y",
            "PhxeG",
            "QYheG",
            "$hDeG",
            "Ej P",
            "EPheG",
            "t%t!",
            "Q\u0194YQYU$M",
            "Y_[}",
            "VuNE",
            "Y^Wh&G",
            "SUV (G",
            "$X$G",
            "h8gG",
            "h$gG",
            "g5\u0133H",
            "h$EG",
            "Pn5\u0334H",
            "[Sh\" C",
            "h|$G",
            "GDShE",
            "23Vh,C",
            "Vh= C",
            "@Sh'C",
            "hP$G",
            "\u057dShk C",
            "\u8ffdSh C",
            "\u8a7dSh C",
            "\u84fd@Sh C",
            "zSh C",
            "dVhp!C",
            "NVh!C",
            "VhMB",
            "Vh!C",
            "Vh!C",
            "Vh.C",
            "\u073c@Vh.C",
            "Vh.C",
            "\u85bcjh /C",
            "P\u88fcVh1C",
            "Shd:C",
            "Sh:C",
            "\u053bVhR;C",
            "\u8fbbH5H",
            "VWhfG",
            "\u84fbVWh8G",
            "\u807bVh1C",
            "THVWh^G",
            "?VWhfG",
            "-VWhfG",
            "VWhfG",
            "\t@VWU5H",
            "P\u0574SfG",
            "\u82fc@jh2C",
            "ht$G",
            "\u853aVh#:C",
            "~Vh@:C",
            "hVh2C",
            "R@Sh43C",
            "9Sh3C",
            "#ShE4C",
            "h\\ G",
            "\u07b9Sh5C",
            "\u0239Sh5C",
            "\u8cb9Sh5C",
            "\u8739@Sh4C",
            "\u80f9Sh 6C",
            "WSh6C",
            "hX$G",
            "A@Sh6C",
            "(Sh6C",
            "h|*G",
            "hx*G",
            "Sh97C",
            "ht*G",
            "@Shb7C",
            "hp*G",
            "\u0378Vh7C",
            "\u8df8Sh7C",
            "\u8878Sh7C",
            "\u82f8@ShK8C",
            "rShl9C",
            "\\Sh8C",
            "0@Vh9C",
            "Vh`:C",
            "Vh;C",
            "Sh]2C",
            "jkhfG",
            "h|fG",
            "htfG",
            "hlfG",
            "hh`fG",
            "hTfG",
            "PhPfG",
            "$PhLfG",
            "$PhDfG",
            "ht$G",
            "CSh#C",
            "h (G",
            "-Vh#C",
            "DSh#C",
            "Sh#$C",
            "Sh$C",
            "h\\ G",
            "\u8f35@%C",
            "\u88b5SWh",
            "\u8435Shp&C",
            "d@Sh2(C",
            "hX$G",
            "KShE)C",
            "5Sh)C",
            "h|*G",
            "Sh^*C",
            "hx*G",
            "\t@Sh*C",
            "ht*G",
            "Sh+C",
            "hp*G",
            "\u06b4ShA,C",
            "hP$G",
            "\u0134Vh(C",
            "hH$G",
            "\u8bb4@Vh,C",
            "\u8574Vh,C",
            "Vh,C",
            "it.C",
            "R@VWh^G",
            "=Vh-C",
            "'Vh-C",
            "@VWU5H",
            "Vh,C",
            "h<fG",
            "h0fG",
            "\u8fb3Vhf-C",
            "h(fG",
            "\u8a33@_^][",
            "SU-\u0633H",
            "W=\u0233H",
            "YPS*",
            "YPLYY_^][",
            "YPt$",
            "YYPh:G",
            "YPhLgG",
            "PEPE",
            "j-uUy",
            "j/t$",
            "j/t$",
            "*yPx&",
            "j%t$",
            "YYPKYYt$",
            "j%t$",
            "^Vj%WxVPE",
            "uaVVj<Wx",
            "VVj>Sx",
            "u(VVj>Wx",
            "t%VVj<Snx",
            "SVj-u",
            "_^[]Vt$",
            "j<V:x",
            "YPt$",
            "VQQ@",
            "YYu+EQQ",
            "$YYu",
            "$YYt",
            "ESW=",
            "$hdgG",
            "EjeP\u04cb",
            "\u060aF<s0",
            "u2EQQE",
            "$h\\gG",
            "P\u05cdEjeP\u04cb",
            "\u060b\u078d~?0u>C<s7",
            "@PVS",
            "_[^t$",
            "$YYUE",
            "t&t\"",
            ".P2E",
            "$4YY]UE",
            "t&t\"",
            "I1PE",
            "$YY]UE",
            "t&t\"",
            ".PKE",
            "$MYY]UE",
            "t&t\"",
            "b9P\u0644E",
            "$YY]UQQE",
            "t&t\"",
            "?PZY",
            "$KYYUE",
            "t&t\"",
            "YYPnY",
            "EPEPE",
            "t&t\"",
            "U4P\u0302",
            "$YY]S\\$",
            "3[RS",
            "3;L$",
            "t&t\"",
            "YYWP\u8ac1Y",
            "U5(E",
            "$YYu EQQ",
            "$YYu",
            "UQQE",
            "]YY33",
            "UQQU",
            "t&t\"",
            "PRGYYP\u84c0Y",
            "$EQQ",
            "V]u?",
            "t&t\"",
            "YYQP",
            "]E5(E",
            "$YYu EQQ",
            "$YYu",
            "V]u?",
            "t&t\"",
            "PRcYYQPx",
            "]E5(E",
            "$YYu EQQ",
            "$YYu",
            "V]u?",
            "t&t\"",
            "PRYYQP~Y",
            "]E5(E",
            "$YYu EQQ",
            "$YYu",
            "V]u?",
            "t&t\"",
            "PR!YYQP6~Y",
            "]E5(E",
            "$YYu EQQ",
            "$YYu",
            "tbt^",
            "$YYu EQQ",
            "$YYu",
            "$yYY",
            "UQQE",
            "YYu0EQQ",
            "$3{YY",
            "$zYY",
            "$zYY",
            "zYYt$",
            "PYYt$",
            "PYYt$",
            "PYYt$",
            "PWYYU(}",
            "hlgG",
            "PmPY",
            "?;t[j",
            "j>QpiSj",
            "j+W4iSj",
            "VW(i$R",
            "YY]]s+MQQE",
            "Ur\u060bE",
            "_^[hEG",
            "@P&kYj",
            "P!Y|",
            "YY]PhgG",
            "t&t\"",
            "t)Po",
            "YPhgG",
            "t't#",
            "YPhgG",
            "YPSf",
            "PiYUE",
            "pYY]",
            "PbiYPqUE",
            "t6Vu",
            "R.iYPV&iYPKwYY_^]",
            "t6t2",
            "$\tPu",
            "YY]UE",
            "t7Vu",
            "RhYPVhYP;yYY_^]",
            "t6t2",
            "iYY]UE",
            "hYPV",
            "yYY\u020b_F",
            "t6t2",
            "$\tPu",
            "YY^]UE",
            "$G\tPu",
            "YY]UE",
            "[YY]UVu",
            "YY]UE",
            "fYP6\tPu",
            "YY]UU",
            "tE\u0249E",
            "RP<fYPd~*E",
            "$\tRu",
            "&YY]UE",
            "$@@]u",
            "$YY]",
            "JQt$",
            "X3Pt$",
            "X3Pt$",
            "X3Pt$",
            "X3Pt$",
            "P-eY",
            "t)t%",
            "P}YY",
            "#QdY",
            "t)t%",
            "P~YY",
            "PYL$",
            "Q}dY",
            "t)t%",
            "PUYL$",
            "3Q%dYUE",
            "cYPYY^[]",
            "\tQY\u0205}",
            "t=t9",
            "u!P;bY",
            "^@UE",
            "$FYY]",
            "XVt$",
            "Yt\t^",
            "X^j\tX",
            "PEYFSj",
            "u$VEj",
            "j>V^$\u0603",
            "P)EYNSj",
            "j<P^",
            "j-V^Sj",
            "j<V^$\u0603",
            "SVLD$",
            "^[S\\$",
            "t!3~",
            "PDGY;|_^[j",
            "_SWj<W-^",
            "tVDj",
            "Wj+V",
            "^SWj<V",
            "^$\u05cbD$",
            "P`YhgG",
            "3\u0245u%",
            "YPh<hG",
            "wSPP",
            "[US]",
            "YPhLhG",
            "QSTk",
            "QS\"E",
            "tOtK",
            "[]S\\$",
            "YPhphG",
            "^[S\\$",
            "VS`t$",
            "UY;Y^u",
            "[hhG",
            " SVt$",
            "VhhG",
            "D$0$",
            "t8t4",
            "[$@@hhG",
            "t>t:",
            "X3hhG",
            "3\u0245u2u",
            "\t0^j",
            "3\u0245t4u",
            "3\u0245uA=H",
            "7u\tt",
            "X^[3S\\$",
            "3V9K",
            "h\\iG",
            "h4iG",
            "WQQj",
            "VV&S",
            "^[Vt$",
            "^S\\$",
            "t't#",
            "t5$t)Sm",
            "PKSYp",
            "[hiG",
            "YYuShiG",
            "YhiG",
            "YPhiG",
            "LVWt$",
            "uJ9D$",
            "PhiG",
            "_^US]",
            "YPhiG",
            "YYVj",
            "^S\\$",
            "t Ht",
            "u3[j",
            "$0aYY[U",
            "W3;u",
            ";tAF\u01ca",
            "PV?Q",
            "Y]Y\u04c38\"u",
            "V+PhPjG",
            "Ee_^[",
            "Y$Tv",
            "QF>_u'",
            "]YY\u04c38\"u",
            "u+EPhPjG",
            "9MtH",
            "t=<s9",
            "hHjG",
            "uj\u04c38\"",
            "h0jG",
            "xUSVE",
            "tG<>",
            "VWSt",
            "hhjG",
            "YYe_^[]UE",
            "?IVtx",
            "tHItf",
            "t>h'G",
            "t^]P^\tE",
            "$YYj",
            "PhjG",
            "?Ht'",
            "YhjG",
            "h kG",
            "]ht$G",
            "SUVW3Wh,/G",
            "Ph$/G",
            "{P5\u0333H",
            "{P5H",
            "{hmG",
            "~P\u0733H",
            "WVh$G",
            "[SVh",
            "SVhFG",
            "SVhFG",
            "@SVh<EG",
            "\u0505SVhDG",
            "WhMB",
            "SUhX$G",
            "0SUhmG",
            "Sh;C",
            "ShMB",
            "h\\EG",
            "@SUhP$G",
            "WUhH$G",
            "\u0184Wh1<C",
            "\u8c04WUhDG",
            "\u8784@WUhmG",
            "\u8244Wh<C",
            "sWh<C",
            "]Wh,=C",
            "G@Wh>C",
            ".Sh>C",
            "h|$G",
            "WhQAC",
            "Wh/AC",
            "@WhAC",
            "\u04c3Wh;BC",
            "\u8f43WhW[C",
            "h\\$G",
            "hd$G",
            "\u8443@t$G",
            "Wh?C",
            "U5\u0733H",
            "wWh1YC",
            "hl$G",
            "ajh/aC",
            "Jjh@",
            "h|mG",
            "3@jhaC",
            "hhmG",
            "jhdbC",
            "hXmG",
            "hHmG",
            "WhJE",
            "h4mG",
            "\u0542@ShcC",
            "\u8942Sh!E",
            "Sh<@C",
            "y@Sh@C",
            "`Sh@C",
            "JSVh$EG",
            "\u8682SVhDG",
            "\u8202@SVhDG",
            "jVhlG",
            "&jVhlG",
            "Sh&dC",
            "\tSh1dC",
            "@Sh<dC",
            "ShGdC",
            "hd!G",
            "\u05835\u0133H",
            "jxWhy[C",
            "\u8241Wh}[C",
            "s@Wh[C",
            "U5\u0233H",
            "^Wh[C",
            "hd$G",
            "HWh[C",
            "hl$G",
            "2ShMB",
            "@Sh[C",
            "Sh[C",
            "Wh1C",
            "\u05c05\u0233H",
            "t%;u",
            "2wWh!",
            ".5\u0433H",
            "VP\u84c0Wh[C",
            "Wh[C",
            "hl$G",
            "Whp\\C",
            "U5\u0433H",
            "HWhp\\C",
            "Wh,C",
            "WhQ]C",
            "@Shf]C",
            "hX$G",
            "Shv]C",
            "ht*G",
            "~@ShBC",
            "hp*G",
            "~Sh]C",
            "h|*G",
            "~Sh]C",
            "hx*G",
            "~Sh@",
            "h|$G",
            "~@Wh\\C",
            "U5\u0333H",
            "~Wh@",
            "r~Sh",
            "\\~WhE",
            "F~@WhD@",
            "hxlG",
            "-~jh_C",
            "hplG",
            "x~jh_C",
            "hdlG",
            "a~jh",
            "hXlG",
            "J~@jhH`C",
            "hHlG",
            "0~hx^C",
            "<Wh^C",
            "}jh@",
            "h4lG",
            "}jh[@",
            "z}Hjh@",
            "`}jh*@",
            "I}WhE",
            "3}Sh}`C",
            "}Sh`C",
            "|ShE",
            "9}Sh\u012fE",
            "|@Wh\u027bE",
            "|Sh9E",
            "htkG",
            "|WhbCC",
            "||jhCC",
            "i|@jh^C",
            "O|Sh7@",
            "h|$G",
            "9|WhI_C",
            "hhkG",
            "#|h^C",
            "|5\u0133H",
            "Gh\u0533H",
            "gWh[C",
            "U5\u0533H",
            "}5\u0133H",
            "h\\kG",
            "drWh[C",
            "{DSh[C",
            "n{Sh1C",
            "X{Sh[C",
            "B{5H",
            "VP{j",
            "hTkG",
            "hHkG",
            "qWh[C",
            "UP\u0633H",
            "zShMB",
            "zSh[C",
            "zHSh[C",
            "z5\u0633H",
            "VPzWh@kG",
            "hX$G",
            "hP$G",
            "hl$G",
            "h|$G",
            "_^][",
            "X3hmG",
            "YYWt3=e",
            "VSh1ZC",
            "VVht$G",
            "YPS?",
            "ShZC",
            "h|*G",
            "#u t",
            "3]S]",
            "#hSG",
            "$\u02b4YYh",
            "Yh4/G",
            "YhMG",
            "Yh.G",
            "$@@h.G",
            "h(nG",
            "YYSVt$",
            "hHnG",
            "YYS\\$",
            "Vhl1G",
            "hLnG",
            "SPVo",
            "h|*G",
            "YY^[SD",
            "YY[t$",
            "YYt$",
            "Xt]t",
            "XQt$",
            "XUVu",
            "VviVVu",
            "^]{L$",
            "hTnG",
            "t(t!",
            "Ph!G",
            "8YPu",
            "X]W|$",
            "~'Vt$",
            "YPt$$",
            "Ou^j",
            "X_W|$",
            "~'Vt$",
            "6YPt$$",
            "Ou^j",
            "X_W|$",
            "~'Vt$",
            "6YPt$$",
            "Ou^j",
            "X_Vt$",
            "YYVu",
            "YPhhnG",
            "V\u8724t$",
            "YY^Vt$",
            "YPhhnG",
            "Vdt$",
            "^Vt$",
            "YYVu",
            "YPhhnG",
            "V\"t$",
            "YY^UQ}",
            "t EPh>G",
            "EtRE",
            "]Vt$",
            "YYVu",
            "YPhnG",
            "Vit$",
            "YY^Vt$",
            "YPhnG",
            "V1t$",
            "YVWt$",
            "WV>=",
            "VW5XH",
            "VWPR",
            "hHyC",
            "SVWE",
            "3P},",
            "U\u0609EE",
            "Y;Y@",
            "B<EUs6",
            "u!EU<#u$;U",
            "t\tB;U\u0309UrU;Ur",
            "UBU\u060a",
            "<*u\"",
            "EPhpG",
            "Y#]EM<sF",
            "\u01c3EtlH",
            "PEv@",
            "]Pu\u8ef4",
            "HtrHH",
            "EY9X",
            "jH[SPuo",
            "HHtuHt+HH",
            "PxP$",
            "PxPu\u8332",
            "3;EP-",
            "E\u0600x*u",
            "EEPu",
            "E\u070bEE;",
            "EEPu\u8730",
            "E\u070bEE;|",
            "EEPu\u036f",
            "E\u070bEE;",
            "EEPu\u872f",
            "~>E\u070a",
            "EEPu",
            "E\u070bEE;|",
            "EE@;|>Suu\u056e",
            "Vuu\u85ee",
            "\u0600}AnG",
            "Nu\u07c0}AnG",
            "SP\ub54bK",
            "E\u05cdEj",
            "EPEP-Ej",
            "\u030aEPMu\u872c",
            "PE|@",
            "]PEPN",
            "PEPN",
            "\u075dpPuS",
            "]PEPM",
            "(lEM",
            "EEP\u80e7",
            "EPSWu",
            "\u05cdEP\u8027",
            ";EuusEj",
            "EMYY",
            "t^tZ",
            "uBVPI<E@",
            "EEPW*",
            "EEPW",
            "hhpG",
            "0hTpG",
            " 5nG",
            "h0pG",
            "\u065e5nG",
            "\u8e1e5nG",
            "\u85de5nG",
            "\u819e5nG",
            "u5nG",
            "d5nG",
            "S5nG",
            "B5nG",
            "15nG",
            " 5nG",
            "\u071d5nG",
            "\u02dd5nG",
            "\u8e9d5nG",
            "\u8a5d5nG",
            "\u861dhoG",
            "\u821d5nG",
            "PhoG",
            "YYE_^[",
            "UQQE",
            "VWEj",
            "_^[t$",
            "t$t ",
            "P0YP8+",
            "YPhpG",
            "Y\t$>H",
            "1GWA",
            "1G?A",
            "1AMu",
            "AQVu",
            "e_^[U",
            "SVWq",
            "~wV s",
            "\tuG=tB",
            "u- t",
            "@HoG",
            "@HoG",
            "_^[UpSVE",
            "u9uEsg",
            "E<Es0",
            "}#u%9us",
            "E9uru9urE_^[",
            "EPhpG",
            "E9ur",
            "Y+EMV<sD",
            "\t3}@",
            "HteH",
            "PuKYNYuEH",
            "u+YNYuEx*t",
            "@A;|,+;~",
            "GE;r",
            "HtxH",
            "Ex*t",
            "UCU=\\oG",
            "@A;|Le",
            "+uN~8Fj",
            "ESP@B",
            "$ePu",
            "Nu\u024bEH",
            "uaYNYue",
            "+uN~-Fj",
            "ESPA",
            "Nu\u050bEH",
            "uYNYu[e",
            "+uN~'Fj",
            "ESPOA",
            "Nu\u068bEH",
            "uYNYuQ",
            "ESP@",
            "<;sC",
            "t%t!",
            "+uN~OFe",
            "NuEH",
            "YNYuEu",
            ";]sK",
            "<=u?C;]t?",
            "YEt'C;]t!",
            "FC\ubc00&",
            "+uN~+Fe",
            "Nu\u058bEH",
            "u6YNYu+",
            "NukS",
            "+uN~+Fe",
            "ESP(>",
            "Nu\u058bEH",
            "uZYNYu+;~",
            "E\u020dEPSV",
            "]PNP",
            "+uN~*Fe",
            "ESPu=",
            "CPCu",
            "Nu\u05cbEH",
            "uYNYu",
            "\u01c9]+;~",
            ";\u0789us",
            "E9uruu",
            "Ex*t",
            "@A;|",
            "Ex*t",
            "WupG",
            "UCU=\\oG",
            "@A;|e",
            "uN~!F",
            "PuYNYuEH",
            "uYNYuCe",
            "+uN~*Fe",
            "ESP4;",
            "CPCu",
            "Nu\u05cbEH",
            "ugYNYue",
            "+uN~'Fj",
            "ESP:",
            "Nu\u068bEH",
            "uYNYuge",
            "+uN~+Fe",
            "ESPW:",
            "Nu\u058bEH",
            "uYNYue",
            "+uN~",
            "NuEH",
            "u&YNYue",
            "+uN~5Fe",
            "ESP9",
            "E3CC",
            "Nu\u030bEH",
            "uYNYu",
            "+uN~,Fe",
            "ECPC",
            "Nu\u054bEH",
            "u;YNYue",
            "+uN~-Fj",
            "ESP8",
            "$\u0309Pu",
            "Nu\u050bEH",
            "uYNYu5e",
            "+uN~Jj",
            "F_WESP'8",
            "EWPEP",
            "EWPEP\t8",
            "$<PuY",
            "NuEH",
            "u8YNYue",
            "+uN~-Fj",
            "ESP7",
            "$\u0248Pu",
            "Nu\u050bEH",
            "uYNYu2e",
            "+uN~sj",
            "F_WESP$7",
            "EWPEP",
            "EW\u020b\u0401",
            "NuEH",
            "YNYuyu",
            "@YPj",
            " ?CF",
            "}]9E~",
            "};]s",
            " ?CE\u0109]",
            " ?C\u0409]",
            "3;]s",
            " ?C]",
            "3;]s",
            " ?CM]",
            "E]]EESPu",
            "\u0288My5",
            "CC;]",
            "VuYYu",
            "@YPW",
            "9=`oG",
            "t+!=`oG",
            "@@|;]",
            "Mt9\u03c3",
            "nEtV}tPK",
            "B}t,K",
            ";Ms$9=u",
            "ESP3",
            "<;s8",
            "t%t!",
            "Yu&t",
            "XPu@YY,e",
            "bEtu",
            "YEY;suu E",
            "$CuuuYYNWhpG",
            "\u0445hTpG",
            "\u8c45hpG",
            "\u8445hpG",
            "\u8045hpG",
            "qhpG",
            "aEhpG",
            "PhoG",
            "<0|)<9~",
            "<@~!<F~",
            "Yu\"t",
            "X^[]h",
            " US]",
            "_^[]",
            "hdqG",
            "PQh$qG",
            "It I",
            "<u,?",
            ";<TE",
            "IhdqG",
            "hdqG",
            "DS3\u06c9E9",
            "V$W=0E",
            "@PYYD]]",
            "E$fMUf",
            "MLQ;",
            ";\u0209Mv",
            "M+\u0389}f",
            "@@MuE\u0389MD",
            "U+\u0589}UU",
            "DyuEtt",
            "@h G",
            "EDA;E",
            "@PYY6-",
            "tt4E",
            "@PYY`=g",
            "t>4E",
            "@h\u0305G",
            "P\u05e14E",
            "u@P(",
            "@P\u05c3 E",
            "t\tuc'",
            "t E4E",
            " 9]u",
            "t>4E",
            "@h\u0305G",
            "P\u05e14E",
            "u@P&",
            "@P\u05c3 hH",
            "=`t(@x%=",
            "fxOF",
            "tF4E",
            "@h\u0305G",
            "P\u05cbEV",
            "@P-&",
            "@P\u05c3 EV",
            "9uu$",
            "@P\u05cbEYY",
            ";tE9",
            ";uEp",
            "YY65PH",
            "F~;t",
            "vPWj",
            "2lvWY",
            "PSWj",
            "vWPY",
            "PvMY",
            "Sv6jL",
            "Sv6jM",
            "PEh=G",
            "ESvP@q",
            "YPh G",
            "Y3E\u060bMu9",
            "PuG#",
            "f9xOF",
            "6W1X",
            "GvS6c",
            "P6nc",
            "YPj\t",
            "%WPm",
            "SS6Sj",
            "vS#j",
            "P5LH",
            "PiYSSSj`U",
            "PvSj",
            "YYFS9X",
            "S6jF",
            "6j*U",
            "9^YY",
            "EF=G",
            "vu|Z",
            "YPj$ZU",
            "vu%Z",
            "YPj#3",
            "_W6j*T",
            "9^Et#F",
            "SWPj*T",
            "FSSSj[T",
            "PvhV",
            "PFuV",
            "F 8G",
            "8u0vj!OT",
            "SS6jG:T",
            "S6q`",
            "YPSj",
            "YY>SS62e",
            "YPj-",
            "SS6 e",
            "6vv:f",
            "#vvqf",
            "6vve",
            "vvve",
            ">vX6#f",
            "SSSj",
            "vj*R",
            "SS6SS6vT",
            "YY6SvjSv6",
            "jSSSj",
            "YS6vjR!9",
            "YS6SjS,R",
            "PSSj",
            "S6SjS6",
            "SWSjR,",
            "S6SjN",
            "S6SjNQ",
            "Xj>7",
            "Gj<&",
            "SS6Sj",
            "Pv6\\",
            "9^YY",
            "EF=G",
            "YPj$P",
            "vu+6j",
            "Pu46F\\",
            "_W6j*",
            "9^Et#F",
            "SWPj*O",
            "FSSSj[O",
            "PFuQ",
            "F 8G",
            "8uF6[",
            "Pvvj\"\\O",
            "P6vj\"OO",
            "S6vjU",
            "PF]X",
            "S6vjV6j",
            "j+vR",
            "j-6j",
            "j*6j",
            "j/6j",
            "j%6j",
            "SSh>",
            "P\ubb4b6;t",
            "SSh=",
            "VSSh>",
            "j|q6j",
            "j^f6j",
            "j&[6j",
            "j>B6j",
            "j<)6j",
            "S6vQ",
            "YsSSj~66j",
            "6j^h\t",
            "6vvY",
            "X`Sj",
            "PFkV",
            "SSvj,",
            "PF;V",
            "SSvjEL",
            "PSSj_L",
            "vj*R",
            "_vv:",
            "66v^",
            "SSvj,4L",
            "Pj*)L",
            "SSvj,",
            "Pj*K",
            "SSvj,K",
            "6PJ^",
            "PF7U",
            "YYvSSvj,K",
            "6vSj",
            "vj*K",
            "v_vvSj",
            "vj*RK",
            "SSvj,8K",
            "vj*'K",
            "+SSvj,",
            "PvSj",
            "YYPL",
            "vSSvj,J",
            "vj*J",
            ".vSSvj,J",
            "PvSj",
            "vj*J",
            "YYPuL",
            "YYP66SSvjE}J",
            "S6SjIK",
            "SS6jE*",
            "S6Sj&",
            "FS;u",
            "SSj[",
            "{h\u0203G",
            "v]~YhS6vF;t ",
            "Sj&vhL",
            "Pj%v;",
            "SSSj+u",
            "SSvj,i",
            "SSSDvZ",
            "SSSj.J",
            "vSvSj&H",
            "vvv+U",
            "vWQI",
            "ovv\ubea1XH",
            "YPj\tcH",
            "oSvvj",
            "vvvj",
            "vvS}[",
            "PvjO",
            "E=lH",
            "SvS5[",
            "PvjQBG",
            "YSvSZ",
            "PvjPF",
            "(9^u",
            "SSSj[sF",
            "Fvv\"G",
            "YYPS6Z",
            "jJDF",
            "YYPSY",
            "PvvjKE",
            "vWRF",
            "wSSSSSSSSSj",
            "SSSj",
            "r6vvQ",
            ">vT6vW",
            "S6v56W",
            "SSSj)\t",
            "Svv[",
            "YYPvj",
            "J6vvj",
            "SS6j",
            "Pv=F",
            "SS6j",
            "Pm9^t?DG",
            "YYPSW",
            "YPj1",
            "FvPD",
            " Fvv6j",
            "6j*C",
            "SSSj[\u07cb",
            "SPj:\u044b6;u",
            "SSSSe",
            "YYPj;VF",
            "SSSSe",
            "YYPj=\ub64b",
            ";t3Jt\"Sj",
            "Pj*IC",
            "YYPj>b",
            "v;Mu&S",
            "SQSh",
            "Pj:B",
            ";tWJt*Sj",
            "Vj*B",
            "YYPj<B",
            "YYvvC",
            "FSDH",
            "6Sj?#=DH",
            "lF=XH",
            "\u01cb=`H",
            "VYWD",
            "PS6j1",
            "SS6j2+SS6j4 ",
            "HuJ/",
            "Yu$v",
            "Wj*f@",
            "YYPje",
            "6vvvjB?",
            "6vv 6v",
            "6S6Sjv6S6SjSSjSjBhDG",
            "YGF=g",
            "Y6v@SS6j",
            "PS6jH9>",
            "SSSjZGV/J",
            "HF;u",
            "PF(G",
            "YY~tFj",
            "Y~Q6v?",
            "I6Sj",
            "vj*g=",
            "P@]\"",
            "E;Ets9",
            "tK4E",
            "@h\u0305G",
            "OOY;}Yuj",
            "_^[h\\G",
            "V50E",
            "W@hTG",
            "P\u058b|$",
            "YY;|$",
            "@hPG",
            "GG\u07e14E",
            "@PYY_^",
            "VW=0E",
            "QP4E",
            "f|+S",
            "@h\u0305G",
            "@h`G",
            "hlJG",
            "YYUSVW7G",
            "SE(H",
            "VSEF(H",
            " A;r",
            "FYYe3_^[]",
            "YYQSU-TH",
            "V3W95tH",
            "P5\u0133H",
            "P5\u0133H",
            "tQ;tM",
            "u4t$",
            "VV9T",
            "YYOS5",
            "\u0570YOYut$",
            "P\u0459Y;u",
            "_^][Y",
            ";r++QV$H",
            "YY_^t$",
            "YYPt$",
            "VWwH|$",
            "rAt$",
            "@GPWq",
            "SUVW3;\u01c9|$",
            "Y=DH",
            "j==qG",
            " tNH",
            "u\u0261(H",
            "j`Y;",
            "3+\u0203tC:s'pE",
            "VWYY",
            "Sh\u0608G",
            "j>YYj=_",
            "j*_;",
            "j0_;",
            "\u0600s+pE",
            "YYPH",
            "j5E*",
            "3+\u0203tC:s#pE",
            "VWYY",
            "x#\u0185u",
            "j~F>",
            "3+\u0203tL:s#pE",
            "VWYY",
            "x#\u0185u",
            "Yj_[S=",
            "Yj$t",
            "^j*_;u'(",
            "uI|$",
            "tBs+pE",
            "j&^;u+%8H",
            "uU|$",
            "tNs1pE",
            "<;Y[",
            "u=|$",
            "t6s=pE",
            "j+[33l$",
            "j0_;",
            "_t;ot",
            "j_^T",
            "tj+-",
            "u=|$",
            "t6s:pE",
            "t\t%8H",
            "Ys5pE",
            "tj-+",
            "t'|$",
            "b7Yj([",
            "uA|$",
            "VPYY",
            "A#\u0185tV'",
            "s2pE",
            "VP\u054bT$",
            "jQT$",
            "t7Kt",
            "QWj+!",
            "\u0600s+pE",
            "j+Z!",
            "j+1!",
            "\u0600s+pE",
            "\u0603.u ",
            "Ys6pE",
            "wYj.XD",
            ":u=t/",
            "tos+pE",
            "u?\"t",
            "'t\tSn",
            "3PPPj",
            "0.t%et Et",
            "tV_u",
            "uMS^=sDpE",
            "3PPP",
            "1u)_u",
            "u P^",
            "3PPPj",
            "t[_u",
            "uRS^BsIpE",
            "\u0603uSR",
            "3PPPj",
            "\u0603-t\t+",
            "Y~S3",
            "sdpE",
            "]9(~",
            "YYL$",
            "t/j.",
            "VD$$h\u0107G",
            "D$,PI",
            "39|$",
            "Wt`5H",
            "Y\u05838\"u",
            "h0jG",
            "-YY\u05898D$",
            "WWQQ",
            "$;YYPj:",
            "Pj:f",
            "uK|$",
            "tDs1pE",
            "_j<^;u68H",
            "t\";t",
            "\u0600sHpE",
            "3+\u0203tC:s'pE",
            "VWYY",
            "j@^S",
            "t\\8H",
            "\tt)Ht\"Ht",
            "jtXPh G",
            "VPYY",
            "A#\u0185u",
            "_uz=(H",
            ";=@H",
            "tTs+",
            "VP\u054b=(H",
            "A#\u0185u",
            "Yj?[",
            "j>^;",
            "j[0H",
            "j^/j\\(8H",
            "39D$",
            "@@8H",
            "3+\u0203t7:s#pE",
            "VWYY",
            "x#\u0185u_tG",
            "?uwH",
            "3+t]:s%",
            "VPYY",
            "A#\u0185u",
            "~t2>t-:u",
            "A;s$9>u",
            "RQYY",
            ";uHXH",
            "A39D$",
            "@@8H",
            "u3u'",
            "j~X=",
            "\u018b5`H",
            "j|Y;u+%8H",
            "t\t%8H",
            "j{^XH",
            "_^][0",
            ";uO=",
            "t\tVP",
            "Vj<^u",
            ";nYH",
            "VP5H",
            "unYH",
            "YUQVe",
            "7~`Ct9M",
            "`-u0T\\u",
            "0-tVhG",
            "PEPj",
            "\u0203at4It-I",
            "{tQ%",
            "c\u0203ftZ",
            "tHItAIt:IIt2IIuEEPj",
            "EttsopE",
            "t>\u0600s+pE",
            ";]u639~",
            "u19}t",
            "39}t",
            "j ^vE",
            "t##u",
            "&\u0603$tU@tP{tDj#",
            "Puuu",
            "SwY9HH",
            "YYPj;E",
            "_^[UQe",
            "SVW30",
            "A#\u0185too",
            "t\tHu.E",
            "E \ub441\u03c0",
            "st&HHt",
            "eE@\\E0SSjHH",
            "PhDG",
            "_^[USVWa\u0603",
            "tP#uK(H",
            "\uba45t!S-E",
            "j\\uY",
            "t4s/pE",
            "t\t;]",
            "~FSYNu1E",
            "t+s&",
            "\tSY_^[]UVWj\\_*C",
            "jC6Mt",
            "VYY'-",
            "WjMj-",
            "/~O7",
            "JWVY3Y",
            "PwFY",
            "WLYVkWBjx;E",
            "Yu/hG",
            "Y\tPY3_^]QQSUVWd$",
            "s'pE",
            "p#\u01c5u",
            "\u0603u\u0603tJ",
            "3+\u0143t<s'pE",
            "p#\u01c5u_tG",
            "uSF\\$",
            "YYPj*",
            "_^][YYSD$",
            "j-Y3\u07c3L$",
            "Y;t8;t,",
            "FPNY~\t;u;u;",
            "VtA8",
            "u\u0121@H",
            "++x(~",
            "QVt$",
            "^$@@3^QD$",
            "SUd$",
            " ED$",
            "u(t$",
            ";v$PH",
            "+PQt$",
            "+PQp$",
            "Y;=@H",
            "YUhG",
            "$tk@tf{tWj#YWNj",
            "uHxPYl",
            "u>\ubc78b",
            "YYPj;",
            "D5HH",
            "Y5DH",
            "3VVjj+",
            "VVt$,DH",
            "_^][YVt$",
            "V iYY^Vt$",
            "VhYY^h\u0509G",
            "Y8bL$",
            "W3;t0",
            " VWWj_VW",
            "t#L$",
            "SVWu",
            "tP9~(;~",
            "RRQj",
            "_^[]",
            "^Vt$",
            "VW|$",
            "?u Pj",
            "YYPj<TWP/",
            "+tzIt-",
            "u\";u",
            "VWYY[_^;u",
            "u\"P3Pj",
            "YYPj<u",
            "PNYY",
            "YYu$Vt$",
            "3Pt$",
            "_SVWj~\\",
            "j?ZtC",
            ";~3A",
            ".SWVj8nF",
            "t;tM",
            ";~=A",
            "t*;t&",
            "SVWj9",
            "Wj*PhH",
            "Vj% _^[Vt$",
            "3PPPjZ",
            "3PPPj[",
            "3PPPj\\",
            "3PPPj]",
            "3PP5H",
            "YPj;",
            "3PPH",
            "V-Yt\t3PPVj0eV",
            "3PVPj'C",
            "u\t3PPVj2",
            "u\t3PPVj3",
            "3PPVj4",
            "Ph@G",
            "3^SVWt$",
            "uhV,Yt",
            "V{,Yt",
            "PSVj",
            "PSVj",
            "u$39=pH",
            "9=lH",
            "YWSVj",
            "u(39=pH",
            "9=lH",
            "WSVj /",
            "WSVj",
            "Ph@G",
            "3_^[",
            "YYt$",
            "YPVjfy",
            "3^Wt$",
            "|\" ~",
            "PYYj",
            "YYtP)F",
            "_\u0343-t%I~3K~",
            "_u)v",
            "|h(G",
            "U~:V",
            "%t0.",
            ">w/t_%",
            "&vQ)",
            "+vC-t>/t9<t4_",
            "^t-|t(=<",
            "Q~xS~",
            "TunpG",
            "=LwG",
            "Vt4t$",
            "YY^U}",
            "3^t$",
            "Y^Vt$",
            "3@V9",
            "u~h\u060bG",
            "YrhG",
            "YY+v",
            "Kh\u060bG",
            "YYPj",
            "YPj1N",
            "PVj8B",
            "t@~;",
            ":|+;~",
            "Z~!]",
            "Xh@G",
            "Y$Y@@u",
            "DYYu",
            " YYVu",
            "3^t$",
            "#:uLF",
            "tFWhDG",
            "Veh\\G",
            "YPj1Pj",
            "V _^",
            "<~ >~",
            "XVt$",
            "YYtF",
            "#;u6F",
            "_[^j",
            "t'_u",
            "XVt$",
            "tBV@",
            "VjGw",
            "YVt$",
            "_t8VY",
            "_^Vt$",
            "tOtK",
            "j%RF",
            "^]Vt$",
            "^Vt$",
            "^Vt$",
            "3;t&",
            "PPj(",
            "^VPPj(",
            "V_ TH",
            "VW=LE",
            "Y54H",
            "Xj~;A",
            "3^;u j",
            "PQLYY",
            ";|V(Y^",
            "Vt A",
            "Z@;~",
            "1;t$",
            ";|3^j",
            "QP.K",
            "WPaJLH",
            "t.@U",
            "VWeYYLH",
            "^[V5TH",
            "V5TH",
            "t5t19u",
            "t,3N",
            "t:5H",
            "M5,H",
            "M5DH",
            "YYPj",
            "YPj1b",
            "Pj*W",
            "Ph\\G",
            "j&>P5PH",
            "^S39\\$",
            "Vd\\G",
            "tvWG",
            "YYPShQG",
            "YYPSV",
            "YPj1",
            "PkYPH",
            "Y_9\\$",
            "tM5PH",
            "YYPSVo",
            "YPj1k",
            "Pj%`",
            "YS5PH",
            "UQQS]",
            "VEWPS]5<H",
            "O<$Y",
            "<_t}<s6",
            "u439",
            "YYt]",
            "=udG",
            "Yv*\u0403",
            ":t!P/YE",
            "tMs0",
            "3+tg:s0",
            ";\u01c9EvE8",
            "uV5<H",
            "Ee_^[USVW}",
            ";t'A",
            "u;vo\u01c3",
            ";vL\u0183",
            "VNW<",
            "3e_^[]",
            "[_VhI",
            "bY3Y",
            "YYV>",
            "PYLH",
            "j_YYVhG",
            "DVkH",
            "SfYYj",
            "YPt$",
            "YPhG",
            "QQD$",
            "SU-DE",
            "V50E",
            "Wt$$t$$t$$J",
            "SW\u0543=\u0222G",
            "u5=lH",
            "u,&u,|$",
            "fd$$",
            "D$ S0",
            "YY_^][YY5H",
            "w3L$",
            "FYYUVu",
            "X^]Vt$",
            "t7<s3",
            "9.YY^UQe",
            "Yt9x",
            "uc\tYY}",
            "SVWt",
            "3\u0705~/u",
            "e_^[Vt$",
            "_^\\t",
            "UQQSV5E",
            "WYEY=H",
            "uW\u0583%H",
            "YY_^[U EPRNEQ",
            "$zEE",
            "$fEE",
            "$REE",
            "$>Euuuu5H",
            "SUV3W",
            "VUhG",
            "S~Wh",
            "nDWh\"D",
            "hLKG",
            "[hlG",
            "Wh D",
            "WhHtA",
            "@WhtA",
            "hdDG",
            "WhVD",
            "WSh\\G",
            "@Whc",
            "tWShHG",
            "[Sh D",
            "3@5\u0133H",
            "P_Sh",
            "hX$G",
            "\u88bdSh/",
            "uHVWh^G",
            "ht$G",
            "hl$G",
            "@Vhe",
            "\u84fcVh:",
            "}VhMB",
            "g@VUW5H",
            "=Vh\t#D",
            "'Vh\t#D",
            "VWhlPG",
            "\u80fdSh%#D",
            "hhPG",
            "W@Sh#D",
            "VUhxG",
            "@Sh<$D",
            "\u87fc@Vh#D",
            "\u81bcSh#D",
            "ZVh4G",
            "hhRG",
            "\u8e7b@VUW5H",
            "hb#D",
            "\u847bSh#D",
            "h@ShF$D",
            "SWhG",
            "\u81fbWhG",
            "vV\u060dG",
            "hp$D",
            "Vh$D",
            "VhMB",
            "VhMB",
            "\u017aVhMB",
            "Vh$D",
            "KHVh",
            "2VUhG",
            ":@Vh",
            "_^][j",
            "YPjYYh",
            "SVWu",
            "QYEM",
            "VPENP",
            "uQ3EW-",
            "Ph\u050fG",
            "YYu*3EPhG",
            "VPaMPu",
            "h|*G",
            "YY_^[",
            "PYD$",
            "PY#P~Y^",
            "PYD$",
            "PYVd~Y^",
            "PpY,",
            "PRY<",
            "3\u024aQ\"~Yj",
            "P}Yj",
            "3\u024aQ}Yj",
            "$@@U",
            "E3PEPh$G",
            "P=Y}",
            "uYEWPV",
            "PLYYUQWj",
            "t,5G",
            "Pn|YPDLPW",
            "P>YPrYUQj",
            "cEPh",
            "Z;u#E\u0203",
            "UQVE",
            " P\u05a14E",
            "@P\u0583}",
            "t?t;",
            "?\tu#x",
            "^$@@UQSVW}",
            "3]~(u",
            "BYYM$",
            "e_^[Vt$",
            "_^V5pE",
            "u#D$",
            "^hEG",
            "Y)$;,",
            "pY+D$",
            "YZ+73-D$",
            "Y9***",
            "**VW**;u",
            "YRt$t$",
            "_^t$",
            "]YVW:*3*;u",
            ":Y\"Rt$t$",
            "_^t$",
            "Yjh%D",
            "ijh&D",
            "]EPh",
            "\tuYP",
            "PvYY",
            "Y5tH",
            "B8=lH",
            "_^UQQEj",
            "5YYA3",
            "3E3E",
            "USVE",
            "PBY]",
            "tAwC",
            "$uYY]",
            "PtYe_^[]UQQ",
            "3\u0201X:",
            "Q=xH",
            "SUVWH",
            "3#3\u068b\u0540",
            "#330",
            "3#3\u068b\u0540",
            "#33tL$",
            "#33t",
            "^][YV5H",
            "^UQQE",
            "Eh)D",
            "Ph)D",
            "$[hG",
            "XUSVW}",
            "YY5H",
            "YY5H",
            "uH;~>}",
            "t45H",
            "WPVh\u0510G",
            "8X_^[]SUVW5\u0133H",
            "\u801e5\u0134H",
            "P\u88a1jh,D",
            "h~-D",
            "hX$G",
            "vM5D",
            "h?.D",
            "hP$G",
            "D3Wh",
            "hH$G",
            ",Wh2D",
            "jhq/D",
            "WUh0$G",
            "WSh($G",
            "\u03a6WUwG",
            "\u8ee6WS>G",
            "\u8a26@Wh'4D",
            "ht$G",
            "\u83e6Wh4D",
            "hl$G",
            "yWhc-D",
            "Vh -G",
            "Vh\"G",
            ":h\"G",
            "_^][UQE",
            "PEPh+G",
            "YYP5H",
            "YYt5H",
            "YYP5H",
            "YYt5H",
            "FF_^Vt$",
            "YYP5H",
            "YYPc",
            "YYt5H",
            "YYP5H",
            "YYP:",
            "YYt5H",
            "FF_^SVW|$",
            "P:5H",
            "P:5H",
            "3\t3^",
            "[U(SVW}",
            "EW\\z",
            "\u060dEPh",
            "SlPOY",
            "YtFu",
            "gE\u060dEPEh2D",
            "Ph1D",
            "]\u0709}E",
            "YYt*G",
            "SVWuh",
            "OuVj+uhSVWPEh$\u0385u",
            "uAYYu",
            "YPh(G",
            "PSuuh2D",
            "_^[Vt$",
            "^UVW5H",
            "Vt2p",
            "YYtfu",
            "YYt.u",
            "Yt j",
            "Vkgu",
            "_^]t$",
            "X3t$",
            "X3Vt$",
            "SW5H",
            "YPh(G",
            "Z#t5t15H",
            "F;}tSCiPLYCYuM",
            "tHtD",
            "u+EEPEh2D",
            "Ph1D",
            "]}UUZP",
            "PSh3D",
            "^_[t$",
            "+LY5H",
            "YY5H",
            "YYUSVu",
            "@@PhwG",
            "_^[]USVu",
            "@@PhwG",
            "_^[]UVW5H",
            "t25H",
            "YYWu",
            "3_^]Vt$",
            "NWt+L$",
            "+ABu\tNu3_^Uu",
            "SV;W",
            "^+\u0409]",
            ";\u0189U}",
            "39=H",
            ";}~GE",
            "@M<{u\u03cb]9}u",
            "+C<y;u",
            "z;}~9E",
            "@M<{u\u074b]9}u",
            "+C<y\u040b+E",
            "t-t!=",
            "t-t!=",
            " US]",
            "3t\tS",
            "WV3Y",
            "3\u0243=H",
            "VYVF",
            "_^Uu",
            "?UQSV",
            "u$h|",
            "^[UQQE",
            "</tl<s/",
            "GGWVu",
            "@PVu",
            "PEhG",
            "_^[US]",
            "3t\tW<Y",
            "3u-=H",
            "u.t&N",
            "Y_^[]S|",
            "X;t&I",
            "^S\\$",
            "X;t]K",
            ";}O}",
            "\u0585~Eq",
            "+PVs",
            "^[t$",
            "YYS\\$",
            "X[Pj",
            "[S\\$",
            "X;tNK",
            ":tCC",
            "+RQPI",
            "[Vt$",
            "X;t-N",
            ":t\"I",
            ":u\t~",
            "I+t\tVQYY^V5H",
            "^US]",
            "t= t00t#@t",
            "u0t(\u022dH",
            "S.Y=H",
            "_^[t",
            "UVj@",
            "Y\"D$",
            "PY3]",
            "IAA]",
            "UQSVu",
            ":;Es",
            "GOP+",
            "((}S\t|A",
            "~? t:\"~($!-|",
            ".~&?t!Z~",
            "G;}r_^[",
            "+QPVOy",
            "H#}t\u0203\tt3It'IIt",
            "t*(|)+~ ,~",
            "z~\t}",
            "FG;+s",
            "X3S\\$",
            "3t\tS",
            "I@j0Xj Xj",
            "\u0389u;M",
            "SEuP,",
            "+URuu",
            "F<&utp<'tV<+t3</~(<9~",
            "RQ+3|0;G",
            "};s/}",
            "VWPE8",
            "+PWu'",
            "E_[u",
            "t+HHt",
            "YSUVW5H",
            "h_[D",
            "hE[D",
            "VhRD",
            "VhRD",
            "VhRD",
            "@VhRD",
            "SWhG",
            "SWhG",
            "hRCD",
            "@UhCC",
            "UWhG",
            "UWhG",
            "UhXD",
            "@Uh|[D",
            "\u0589UhVD",
            "[Sh~ZD",
            "h|$G",
            "\u0287VhsUD",
            "hH$G",
            "\u8d07@UD",
            "SWhP$G",
            "\u8687SWhX$G",
            "h\\EG",
            "rSh>DD",
            "\\@VhDD",
            "CShdVD",
            "-VhND",
            "ht$G",
            "Vl$G",
            "@VhoND",
            "VhPD",
            "\u0446VhPD",
            "j\th8G",
            "}Ph(G",
            "PtShxQD",
            "h|$G",
            "\u0345VhQD",
            "\u8dc5VhQD",
            "\u8845ShQD",
            "\u82c5HSh@RD",
            "rShRD",
            "hd$G",
            "FUhSD",
            "0@VhSD",
            "UhETD",
            "hP#G",
            "hD#G",
            "\u0544@Vht@D",
            "\u8f04VhTD",
            "ht$G",
            "\u8984Vh?C",
            "\u8504VhkUD",
            "h0zG",
            "~@_^][S\\$",
            "3\u06c5[t",
            "V]Vv",
            "SVWhG",
            "ES-C",
            "GGNN~\"",
            "~+?-u&GN",
            "\u0700?)u",
            "NG\ub040?:uM|>)uFSWj@0",
            "PEfo",
            "uNNGVWu",
            "tNh\"G",
            "YYhp1G",
            "VWuhlJG",
            "_^[Vt$",
            "PKYY",
            "XVt$",
            ";tFVXPW",
            "h(TG",
            "PY|8L$",
            "YYPh G",
            "P\u857eY|",
            "Ph G",
            "PNY|'L$",
            "Ph G",
            "P/YPyYPYj",
            "YYUQS]",
            "+QPun",
            "GY;~",
            "_^[j",
            "cYYUQQEPEPh!G",
            "PYYu",
            "h5TD",
            "`YYU39l$",
            "hS\\$",
            "+QPt$$5",
            "SX+Yt",
            "YYE;n",
            "_^[]S\\$",
            "\t0^[",
            "FHu^",
            "totk",
            "uRV5S/F",
            "Yu<Ps",
            "u)WV'",
            "Y;Y_u",
            "VmVY^UW3u",
            "Ph8G",
            "\u84abYY6Y",
            "t\tHHu",
            "WQPu",
            "^_]hEG",
            "Ph!G",
            "S39]",
            "VWu&h|G",
            "_S}j",
            "YYhpG",
            "3t#E",
            ";uwu",
            "EEPj",
            "^YYE",
            "LEE}tutj",
            "u\\h|",
            "YELuEu",
            "\ubb09}5H",
            "_^[Vt$",
            ";tJWWLPV",
            "VaYj",
            "V?YPv",
            "_^-P\u83f7",
            "P=YY",
            "3PhG",
            "X;t\tV,Y^Vt$",
            "j#V\u8768YYV\u81b1Y^UE",
            "P:Y7PVYY^]",
            "\u01cdME\u0709MN",
            "3} F EEEE]E",
            "EE\u0309EM\u0509F",
            "\u0609];}",
            "E;Eu;",
            "@;|`>",
            "W3Y;Y",
            "M9Ut",
            "M9Ut",
            "+B;}",
            "E\u040dx}",
            "@;|c>",
            "3Y;Y",
            "M9Ut",
            "M9Ut",
            "+B;}}}",
            "@;|`>;",
            "W3Y;Y",
            "M9Ut",
            "M9Ut",
            "+B;\u047a",
            "@;|a",
            "3Y;Y",
            "M9Ut",
            "M9Ut",
            "+B;}E",
            "@;|f",
            "+B;}",
            "#CW>",
            ">++II",
            "@;|b>",
            "W3Y;Y",
            "M9Ut",
            "M9Ut",
            "+B;}U#",
            "WJ3Y;Y",
            "M9Ut",
            "M9Ut",
            "+B;}",
            "@;|f",
            "+B;}",
            "*OGE",
            "@;|_>",
            "WI3Y;Y",
            "M9Ut",
            "M9Ut",
            "+B;}",
            "@;|b",
            "\t;\u01c9F",
            "+B;}E",
            "@;|b",
            "\t;\u01c9F",
            "+B;}}E*",
            "@;|f",
            "+B;}",
            "++JJ",
            "@;|f",
            "+B;}",
            "!CW>",
            ">++II",
            "@;|b>",
            "W3Y;Y",
            "M9Ut",
            "M9Ut",
            "+B;}U#",
            "@;|b>",
            "W73Y;Y",
            "M9Ut",
            "M9Ut",
            "+B;}U#",
            "E3;}\u0709EMM",
            "G9Mt",
            ";}\u0709M",
            "}wS=",
            "mt\tx",
            "-ti:",
            "it=mt",
            "\tU\u0509U",
            ":t&;}",
            "}jj#",
            "Oj(}YM",
            "@;|`>",
            "3Y;Y",
            "M9Ut",
            "M9Ut",
            "+B;}",
            "@;|_>",
            "W3Y;Y",
            "M9Ut",
            "M9Ut",
            "+B;}E\u0508",
            "@;|`>",
            "M9Ut",
            "M9Ut",
            "+B;}",
            "@;|`>",
            "M9Ut",
            "M9Ut",
            "+B;}",
            "}\u040bEW ;rk+E",
            "QuPU",
            "YEYM\u040bE+ME",
            "}M\u040bM",
            "@;|`>",
            "Wb3Y;Y",
            "M9Ut",
            "M9Ut",
            "+B;}",
            "@;|g",
            "+B;}",
            "@;|f",
            "+B;}E",
            "}@;|_>",
            "W3Y;Y",
            "M9Ut",
            "M9Ut",
            "+B;}#",
            "@;|c>",
            "Wd3Y;Y",
            "M9Ut",
            "M9Ut",
            "+B;}}",
            "}@;|_>",
            "W3Y;Y",
            "M9Ut",
            "M9Ut",
            "+B;}#",
            "@;|_>",
            "M9Ut",
            "M9Ut",
            "+B;}#",
            "@;|b",
            "\t;\u01c9F",
            "+B;}M",
            "@;|a",
            "+B;}#",
            "@;|a",
            "+B;}#",
            "@;|`>",
            "W3Y;Y",
            "M9Ut",
            "M9Ut",
            "+B;}",
            "@;|_>",
            "M9Ut",
            "M9Ut",
            "+B;}E\u0508",
            "@;|`>",
            "W3Y;Y",
            "M9Ut",
            "M9Ut",
            "+B;}",
            "@;|`>",
            "W03Y;Y",
            "M9Ut",
            "M9Ut",
            "+B;}",
            "CE\u040bM",
            "W3Y;Y",
            "M9Ut",
            "M9Ut",
            "+B;}",
            ";}\u070b\u01c9Et#8\\u",
            "@@;E\u0709Eu\u074bN",
            "@;|`>",
            "W3Y;Y",
            "M9Ut",
            "M9Ut",
            "+B;}",
            "It%]u",
            ";|a>",
            "W%3Y;Y",
            "M9Ut",
            "M9Ut",
            "SPuj",
            "Sj\tu/",
            ";|a>",
            "M9Ut",
            "M9Ut",
            "9AA}",
            "<:pE",
            "t%E}",
            "3;M\u070d",
            "DG\u0409Et",
            "M\ub803,ud;Mte",
            "<:pE",
            "DG\u0409E\ub70bEE}",
            "EE9E",
            "Eu~N",
            ";|a>",
            "WB3Y;Y",
            "M9Ut",
            "M9Ut",
            "SWuj",
            "Cu\tE",
            "\u04c9E+\u044dx",
            ";}EmMA",
            "uWSH",
            "M9Ut",
            "M9Ut",
            "+B;}/",
            "])M\u0603}",
            "uuSuG",
            "@;|`>",
            "M9Ut",
            "M9Ut",
            "+B;}",
            "SWuj",
            ";|f>",
            "M9Ut",
            "M9Ut",
            ";}}GPE",
            "OW+EPSuj",
            "EY9E",
            "WD3Y;Y",
            "M9Ut",
            "M9Ut",
            "+B;}",
            "@;|b",
            "W3Y;Y",
            "M9Ut",
            "M9Ut",
            "+B;}",
            "@;|b",
            "W\t3Y;Y",
            "M9Ut",
            "M9Ut",
            "+B;}",
            "@;|b",
            "W3Y;Y",
            "M9Ut",
            "M9Ut",
            "+B;}",
            "}};}tf",
            "LH\u0409M\ub54b",
            "O}E\tv2;Er-EPj",
            "]@;|d>",
            "W43Y;Y",
            "M9Ut",
            "M9Ut",
            "+B;}",
            "@;|a",
            "W3Y;Y",
            "M9Ut",
            "M9Ut",
            "+B;}E",
            "@;|b",
            "3Y;Y",
            "M9Ut",
            "M9Ut",
            "+B;}",
            "]@;|a",
            "W3Y;Y",
            "M9Ut",
            "M9Ut",
            "+B;}",
            "t<It",
            "EOP}uW!",
            "@;|b",
            "W3Y;Y",
            "M9Ut",
            "M9Ut",
            "+B;}",
            "@;|b",
            "WC3Y;Y",
            "M9Ut",
            "M9Ut",
            "+B;}",
            "+>);~d>;",
            "W3Y;Y",
            "M9Ut",
            "M9Ut",
            "+\u0403);\u047a",
            "s]txdtsN",
            "@;|b",
            "WN3Y;Y",
            "M9Ut",
            "M9Ut",
            "+B;}",
            "@;|b",
            "W3Y;Y",
            "M9Ut",
            "M9Ut",
            "+B;}",
            "@;|`>",
            "Wk3Y;Y",
            "M9Ut",
            "M9Ut",
            "+B;}",
            " Cj\"j",
            "st7}",
            "St1E",
            "u\t\u0204C",
            "K t\"3\u048dC s!",
            "HHt9u",
            "@;|b",
            "W3Y;Y",
            "M9Ut",
            "M9Ut",
            "+B;}",
            ";u1M",
            ";}#;E",
            "@;|b",
            "\t;\u01c9F",
            "+B;}",
            "@;|b",
            "\t;\u01c9F",
            "+B;}#",
            "@;|b",
            "\t;\u01c9F",
            "+B;}E",
            "@;|b",
            "\t;\u01c9F",
            "+B;}E",
            "@;|`>",
            "M9Ut",
            "M9Ut",
            "+B;}E",
            "]@;|a",
            "W<3Y;Y",
            "M9Ut",
            "M9Ut",
            "+B;}",
            ");~h",
            "+\u0403);\u047a",
            "]uz+",
            "@;|i",
            "+B;}",
            "CG}n+",
            "@;|c>",
            "M9Ut",
            "M9Ut",
            "+B;}}",
            "}@;|_>",
            "M9Ut",
            "M9Ut",
            "+B;}",
            " 3Cj\"WS5",
            "}\u0309}}M",
            "3c!C u",
            ";vc>",
            "M9Ut",
            "M9Ut",
            ";w}}",
            "}u E@;",
            "dxY}",
            "-u\t?]",
            "+ZJ!U",
            "Ht)@",
            "}E\u0303e",
            "-u0E@;t",
            "w}Y}",
            "w}Y}",
            "GW}wW",
            "0rw9v&C",
            "L}EOPj",
            "+_O!}",
            "Ht+x",
            "EPEuHP",
            "EE\u0283}",
            "B3;U\u0709E",
            "B:Ut",
            "@E\u06c0d",
            ":u\t:]",
            "@@H\u0249Et",
            "+\u0449UIHwEh`G",
            ";M\u0709U",
            "t7=H",
            "EhXG",
            "EP9/",
            "EP\"/",
            "EEP.",
            "EEP.",
            "EEP.",
            "EEP.",
            "EEP.",
            "EEP~.",
            "EEPP.",
            "WEEP=.",
            "Eh(G",
            "Eh8G",
            "EhXG",
            "YYt|Eh",
            "YYthEh\\G",
            "YYtTEh G",
            "YYt@Eh0G",
            "YYt,Eh@G",
            "EhHG",
            "t3pE",
            "t3pE",
            "t-pE",
            "j uYY",
            "t-pE",
            "t3pE",
            "t-pE",
            "t3pE",
            "t-pE",
            "t)pE",
            "t)pE",
            "tNpE",
            "39E\u0309Eug9Et;9",
            "S39Mt",
            "9Mu-9",
            "9Mu ",
            ";}t9EE}",
            "@;|_>",
            "W+3Y;Y",
            "M9Ut",
            "M9Ut",
            "+B;}",
            ";|a>",
            "W\u8bb93Y;Y",
            "M9Ut",
            "M9Ut",
            ";}EPE",
            ";|a>",
            "3Y;Y",
            "M9Ut",
            "M9Ut",
            "SWuj",
            ";|a>",
            "M9Ut",
            "M9Ut",
            "SWuj",
            ";|a>",
            "M9Ut",
            "M9Ut",
            ";}ESH",
            "]@;|_>",
            "M9Ut",
            "M9Ut",
            "+B;}",
            "CE9E",
            "P\u8577YG",
            "9Et\tuwYG",
            "9Et\tuYYG",
            "WhXG",
            "9Et\tu",
            "9Et\tuY",
            "9Et\tu\u07b6YG",
            "9Et\tuYG",
            "9Et\tu\u88b6YHG",
            "9Et\tu\u8136YG",
            "9Et\tufY\u0115G",
            "9Et\tuHYtG",
            "9Et\tu*YG",
            "9Et\tu",
            "9Et\tuYG",
            "9Et\tu",
            "9Et\tu\u8175Y",
            "9Et\tujY",
            "9Et\tuLYG",
            "9Et\tu.Y\u0613G",
            "9Et\tu",
            "E9Et",
            "P\u0674YG",
            "Z;~+",
            "ARQP'",
            "W\u01f2WF$\u8fb2WF(\u8d72WF,\u8b32WF0\u88f2WF4\u86b2WF8\u8472F<",
            "9Et\tu\u83f3Y3_^[W39=H",
            "Wh\u032dH",
            "VWYY",
            "x#\u0185t",
            "VWYY",
            "x#\u0185t",
            "[_UQQE",
            "W3f\u06c9]vGHE",
            "fM3f",
            "Mf;}r]f;}",
            "f;Erf;tW",
            "3\u024ahH",
            "]f9]",
            ";Mt'\u020dD",
            "QPED",
            "_^[UM",
            "S3V;W]",
            "1AN#",
            "3aANtGL",
            "_^[]3",
            "(t\"\u0203at",
            "Iu.j",
            "Xj\tXj",
            "ACtLMt",
            "ctOPY^;tb",
            "A-uY;tU",
            "^;t)",
            "A-u ;t",
            "RVQr",
            "^Vt$",
            "PYv$\u07aev(\u05aev,\u03aev0\u01aev8\u8faev<\u8daev4\u8baeV\u8a2e ^",
            "t\tHHH",
            "t\tHHH",
            ";t\tQIQ",
            "t#P3\u0245~3S",
            "H;|[",
            "J;|_^]U",
            "\\SVMW}",
            "PE]\u0709MO",
            "FH)wA",
            ";E\u0709EsuM9Mub+M\\",
            "9EMu ",
            "PuWW",
            "Su\u85eaYYE+E}",
            "]EEE",
            ">FF7E",
            "@Ou\udb45\udf2fH",
            "@Iu[U\u032dH",
            "@Ou\udb45\udf2fH",
            "F<|?j",
            "F3\u024al",
            "3\u06ca\tP",
            "3\u024a\u0309M",
            "YE;]w2}M",
            "C;]v\u0503",
            "F33\u06cal",
            "]Hf;u(",
            "3\u06ca\tP",
            "\\9Et\tu\u8526Y_^[D",
            "UVW}",
            "W4YH",
            "tA~=G",
            "Y;Y}%",
            "_^]U",
            "W3E;}u",
            "SY9{",
            "HHt+HHt:",
            "t49}",
            "~/9}",
            "t+!t",
            "@QWP7",
            "@QWPQ",
            "8t']<",
            "\u048bJt8",
            "39Eu",
            "8C!u",
            "~\t;u",
            "~%9Et ;u",
            "tj~%E",
            "N-jX",
            "_^[UQM",
            ";tUF}",
            "u#;s?",
            ";t#F;s",
            "VQP+",
            "_^[UU",
            "Ws4u",
            "r3;U",
            "SHVW\u0249E",
            "tD;E",
            "ONy|",
            "NIy|",
            "|\u0543_^[]",
            "]U\\E",
            "SVWP",
            "8U\u050bP$H",
            "UP(X8U\u040bP,UP0UP4",
            "\u03c9U\u0709MH",
            "@<39U",
            "MU]EUt",
            "YYEi",
            "u\u0209u0",
            "EvaUM++\u02c9UU+\u04cb",
            "U\u030bU+\u04c9U\u060bU+\u04c9UU+\u04cb]]\u010b]",
            "Mu\u044bE",
            "_9~u?F",
            ";uu;u",
            "]E9}}",
            "v,MU}+\u044dA",
            "++\u064bMIM\u010b",
            "f;~AE\u070bU",
            "\u02cb]+U+]\u070d",
            "+\u02cb]M+\u064bM",
            "Mu\u9874G",
            "f~=E\u040bU+U",
            "\u02cb]M+]\u040d",
            "Mu\u0874G",
            "U\u010bM;M",
            "]E++;~",
            "SRut",
            "]E;E\u0321G",
            ";M\u0209Eu$",
            "PERM\u0109E",
            "QuP\t",
            "PEu\u015aYEY+uE\u030bM\u0609E",
            "\u020d4MEe",
            "|=M\u040bU+j",
            "U\u030bU+\u044dA",
            "U\u0109]YU\u030b",
            "Mu\u07cbE",
            "\u028bUG4ZGN",
            "\u028bUGtZG",
            "\u028bU\udbf7\udd0aZ",
            "&M9M",
            "Ju\uc874G",
            "Ju\uc874G",
            "EMX~",
            ";E\u0209M\u010bu$",
            "PEJM\u0109E",
            "PEu\u8f57YEY+uE\u030bM\u0609E",
            "\u020d4MEe",
            "|8U\u040bM+\u0289]\u0109M\u030bM\u070dB",
            "+\u028bU\u030b",
            "Ku\uc874G",
            "JuE`Me",
            ";Mws=H",
            "Uu+j",
            "+XH#\u040bEHt",
            "CHu\t",
            "C]WR",
            "YYu,Wu",
            "u\t3\u0245",
            "U3\u024al8",
            "E\u0609Ec",
            "M9M1",
            "XA;M",
            "GGM\u060b\u05cdO",
            "U;Ms/M\u010a",
            "BE\u0109U",
            "U\u030bM;Mr;U",
            "\u03c9M\u0600y",
            "tMU\u0303",
            "Uu3j",
            "+ZMJ#\u028bHt!U@E\u010a",
            "YYM\u0600y",
            "u\t3\u0245",
            ";uvON;MuG~N",
            ";M\u0209Eu$",
            "PE.M\u0109E",
            "QuPd",
            "PEu\u8852YEY+uE\u030bM\u0609E",
            "\u020d4MEe",
            "|8M\u040bU+\u0449]\u0109U\u030bU\u070dA",
            "+\u044bM\u030b",
            ";M\u0209Eu$",
            "PE\u0250M\u0109E",
            "PEu<YEY+uE\u030bM\u0609E",
            "\u020d4MEe",
            "|8M\u040bU+\u0449]\u0109U\u030bU\u070dA",
            "+\u044bM\u030b",
            ";E\u0209U\u010bu$",
            "PE\u8d8fM\u0109E",
            "PEu)YEY+uE\u030bM\u0609E",
            "\u020d4EMj",
            "GXG~",
            "+\u058dD[",
            "eME+",
            ";M\u0209Eu$",
            "QuPD",
            "PEu\u804fYEY+uE\u030bMj",
            "\u0209EM4YEe",
            "|=M\u040bU+j",
            "U\u030bU+\u044dA",
            "U\u0109]YU\u030b",
            "MGE\u060dYG~",
            "jME+",
            ";M\u0209Eu$",
            "PEM\u0109E",
            "QuP/",
            "PEulYEY+uE\u030bMj",
            "\u0209E4E\u0609MY",
            "|@M\u040bU+j",
            "U\u030bU+\u044dA",
            "U\u0109]YU\u030b",
            "Mu\u07cbE\u0609",
            "EI+\u0189M$",
            "hME+",
            ";M\u0209Eu$",
            "PEM\u0109E",
            "PEuZYEY+uEM\u030bU",
            "\u0209EMM\u060d4",
            ";M\u0209Eu$",
            "PE\u060bM\u0109E",
            "PEuKYEY+uEM\u0309E",
            "\u020d4MEe",
            "|8M\u040bU+\u0449]U\u030bU\u070dA",
            "+\u044bM\u030b",
            "GGM\u0605}",
            "eEM+",
            ";M\u0209Eu$",
            "PE]M\u0109E",
            "PEu\u040aYEY+uEM\u0309E",
            "\u0209MM\u060d4&",
            "|@M\u040bU+j",
            "U\u030bU+\u044dA",
            "U\u0109]ZM\u030b",
            "Mu\u07cbM\u060bE",
            "ME\u060dY~",
            "jME+",
            ";M\u0209Eu$",
            "PE\u88c8M\u0109E",
            "YEY+uEMj",
            "\u0209E4E\u0609MY",
            "|@M\u040bU+j",
            "U\u030bU+\u044dA",
            "U\u0109]YU\u030b",
            "Mu\u07cbE\u0609",
            "MGM;M",
            "uF;M",
            "]t(=H",
            "t'=H",
            "Y9M]M;M",
            "]t(=H",
            "t'=H",
            "t1=H",
            "MY;]",
            "MQ;U",
            ";UvK\u024bMt",
            "t*=H",
            "t4=H",
            "t1=H",
            "Mu%GM",
            "GE\t:jME\t",
            "tGG:M",
            "\u02c5\u0249M~JM",
            "ZM9M",
            "GE\t:",
            ";M\u0103}",
            "GM9M",
            "GM\u060bM",
            "GE\t:",
            "MtXM;Mu9",
            "Ju\uc874G",
            "t;Et",
            "Pl~YjX",
            "Ev EMu+++<",
            "vH}+}\u0409}\u030bU\u040b",
            "}F;urE;Et",
            "P}YE+E",
            "E;Et",
            "P}Ye_^[D",
            "3^UQE",
            "3fFfEt{3E",
            "fvqSfM",
            "rf;}[s*",
            "3\u024a(H",
            "3_^t$",
            "YYu 9",
            "XVt$",
            "SzSF",
            "zYY!;s\"",
            ">3[v",
            "@;r_^U}",
            "WtJ=H",
            "F:u1",
            "FA:u",
            "u3_^[]j",
            "XVt$",
            "PyYY%;})",
            "~%SW",
            "_^Vt$",
            "PDzYv",
            "V6zY^",
            "tHHt0Ht",
            "v0L$",
            "Hu;t",
            "V\u048bvGL$",
            "H@;t",
            "^Vt$",
            "v*L$",
            "Hu;t",
            "UVt$",
            "PVYYtuW(D$",
            "PV\u054bYYt!+PVh",
            "Pt$$6",
            "Pt$$",
            "\u8ea1YY_",
            "P5XH",
            "S3UV;W\u0230H",
            "\u8705Y;\u02c9",
            ":_tL<s0",
            "WPYY",
            "B#;u",
            ":tB<s0",
            "WPYY",
            "B#;u",
            "9;u\tA",
            "PW5H",
            "Y0\u0230H",
            "<h G",
            "_h G",
            "8VW\u012fH",
            "_^][U$",
            "SVW3j",
            "EVPO",
            "u\uc345j/P",
            "YYt+'",
            "~4wh\u041fG",
            "YY]+\u07c3=H",
            "\u0602PIYY5HE",
            "W\u058dP,ShG",
            "ShxG",
            "ShhG",
            "W\u058dP@ShLG",
            "_^[u",
            "YYUQQS39]",
            "9h\"G",
            "Y;Yu",
            "8PVu",
            "WY9]",
            "t5E~",
            "W\u0379hG",
            "5WAGYE",
            "C;r\u0249]",
            "C;s;H",
            "Y;Yt",
            "@8-u",
            "t\tPW",
            "tGuWu",
            "Wh\u061fG",
            "\"e_^[",
            "SV5\u0731H",
            "3WSD$",
            "SSj_D$ ",
            "6#6n",
            "D;u]D$",
            "t8<s,",
            "Fu\u020b+}",
            "-E@P",
            "t3<s/",
            "F\u01cde_^[",
            "$S\\$0UV",
            "3D$<9D$8D$(D$,D$",
            "9D$8j",
            "D$4]",
            "\ub188D$<D$<WP/",
            "jVDgYF]S",
            "D$ PWV:",
            "D$$PUV",
            "t$$P",
            "YhPG",
            "Yl$0/-H",
            "Ht8H",
            "yhLG",
            "FtEI",
            "PL$<Y",
            "Wh<G",
            "Wh4G",
            "7Wh,G",
            "Wh$G",
            "L$8C",
            "L$8C",
            "YYD$",
            "UPYY",
            "W04E",
            "@h\u0320G",
            "KVhG",
            "@hTG",
            "A#\u0145t",
            ">-uK~",
            "D$<Pj",
            "Y39T$(",
            "t<-ufF",
            "F<s^",
            "UPYY",
            "A#\u0145t4F",
            "UPYY",
            "A#\u0145u\ub30a",
            "PhLG",
            "Ph,G",
            "v*9T$,t",
            "3\u0483=H",
            "j^|#tH",
            "9T$8u",
            "v9T$0tph G",
            "u3Y;\u01c9=H",
            "Y;YH",
            "u%h,G",
            "WuP3",
            "P>iWWWj_H",
            "D$<H",
            "St$@",
            "t$$h",
            "PIYY",
            "|#tH",
            "_^][$VWt$",
            "PhTG",
            "YY_^Vj",
            "_et$",
            "@PMet$",
            "^UQ=H",
            "EEP.",
            "Y>-uFO~",
            "t9j=V",
            "@Pq'",
            "+_I[t",
            "P\u8cc3NYu%H",
            "&SVW",
            "mfBD",
            "SVhXG",
            "WSVhTG",
            "WSVhPG",
            "VhHG",
            "VhDG",
            "WSVh8G",
            "WSVh(G",
            "_^[UQ=H",
            "Y|\u07e1H",
            "+0[\u0389",
            "HWu0n",
            "@G;=\u0130H",
            "Y_xH",
            "^_aH",
            "W5tH",
            "Y~1Vt$",
            "P5tH",
            "OYu^_Vt$",
            "VW|H",
            "95pH",
            "YY_^t$",
            "USVWj",
            "t&t\"",
            "tO$t*P)",
            "YPh$G",
            "Yu\"h",
            "\u0785}Kj",
            "P{ YVPkYY|",
            "VPrk",
            "zYYPV|?",
            "^VW3\u0232H",
            "|%lH",
            "u\tIIu",
            "SVWhpG",
            "WV?jWVS",
            "@_^[SVt$",
            "VhxG",
            "YYpH",
            "VwpYYu",
            "V)Yj",
            "P_^[hG",
            "UQQj",
            "SU-E",
            "uMQh\\G",
            "[wD$",
            "3\\D$",
            "u<38",
            "QhDG",
            "Qh<G",
            "Yu>h",
            "u]HHtR\tuR{D",
            "Yuh<G",
            "YYtVh G",
            "^][Wh",
            "~VWvG",
            "YPWxF",
            "\u068b_^V5E",
            "YYt\tPt$",
            "YY^U",
            "SVWj",
            "3Y9]",
            "]M]\u0609]",
            "MEP\"",
            "P}\u0709u]E5",
            "GE+]",
            "E;E|",
            "\u0249Muu",
            "EMS@",
            "Eu\u0709]]E",
            "\u078b3;uE",
            "F;u|Ar;u",
            ">$u(}",
            "EE;E",
            "F;uu\u070d|Ar;u",
            ">$u8}",
            "M }k",
            "M@3F}u\u0700>*",
            "\u078bE;u",
            "F;u|Ar;u",
            ">$u(}",
            "EE;E",
            "YE}meg;u",
            "F;uu\u070dDA\u0409Er;u",
            "ctpd",
            "Nu\u0703}",
            ";}E}PW ",
            "EE;E",
            "uZK\u06c9]~Rue",
            "E9]|",
            "}SW& ",
            "FEMu\u03cbE\u0309]",
            "]uP'",
            ";}]}SW",
            "E\u050bEE9]|",
            "FEMu\u0489u]^",
            "EE;E",
            "PLN@",
            "SuP P",
            "3<et:<Et6E\u040dEE",
            "GE@t",
            ";}E}PWQ",
            "E\u040d<0 ",
            "$YE'G",
            "CE t",
            "\u0249Muu",
            "Sh4G",
            "t\\EQQ",
            "EEu<",
            "Y+\u020bEKvE",
            "YYu%E",
            "M+A-",
            "M+A+u\u8b3f",
            "YPuu\u87ff",
            "HHt\t",
            "EE;E",
            "3 ]<d]]\u0309]]t",
            "EE;E",
            "P?YP",
            "E@}t",
            "}}E ",
            "\u0249MuuV",
            "E)}^",
            "YEu9EMt/E<",
            "    \u028b",
            "UJMw}\u050bEWp",
            "    8",
            "7;\u0209M|\t",
            ";}E]PS'",
            ")EYj",
            "t4Ht!",
            "tFuD",
            "]]6Wj",
            "qEQ@",
            "$\u84e6YYEE",
            "<Bt+<Xt",
            "<bt#<ot",
            "}39M",
            "S\u0359YE",
            "9Mt[",
            "\u06c9]E-",
            "E M=",
            "P\u05cdESP@P\u05c3",
            "@}0}",
            "YEHu",
            "@h*G",
            "PuEPS\u05c3",
            "}CuS",
            "u,Ef",
            "E7E8",
            "9MtDuu@",
            "YYE\u03008-u",
            "@E-E",
            "E E\u0100x",
            "uVEu",
            "YYuu\u81e0X",
            "Y;-Y",
            "YFYFEHHt(",
            "u3;ft.FhG",
            "Fh>G",
            "YYSV\u07f9",
            "uYYE",
            "E\u030b}W\u02f9",
            ">XYEu",
            "FYEH<",
            "E;E}",
            "E\u0209EE+EE",
            "Eu]M",
            "\u0249MuuV",
            "YYMM~1M<",
            "    \u028b",
            "UJMw",
            "t<]}C",
            ";\u01c9E|\t",
            ";}}WV",
            ";YE|",
            "9}}}WVf",
            "]E+E",
            ";}}uV.",
            "YYuK}",
            "}]uu/",
            "YYMM9M}}M",
            "+M\u020a\u060aA",
            "PE\u0100x",
            "0MM9M}+M",
            "+M\u020a\u060aA",
            "E;E|",
            "\u0249M}WVg",
            "E\u050bME",
            ";}}WV4",
            "YY~$E<",
            "    \u028b",
            "E\u070bE;E",
            "uh\u0725G",
            "uWhG",
            "uh\\G",
            "uWhG",
            "uWhG",
            "\tWhG",
            "\th<G",
            "\tuh\\G",
            "\th<G",
            "\th\u0124G",
            "\tuh\\G",
            "\th<G",
            "{\tuh\\G",
            "h\th<G",
            "uh\\G",
            "uh\\G",
            "8fuDA9ft)|$",
            "A91t;v",
            ".IIt",
            "1US]",
            "ht7G",
            "^[]VWt$",
            ":DD$",
            "3Y;L$",
            "YYhXG",
            "YYh`G",
            "fYYU-LE",
            "W39~",
            "P\u0545YuG;~",
            "VYY_^]US]",
            "Y3\u048bw",
            "4tD9",
            "YYt)F",
            "X_^[]USVu",
            "<tG9",
            "YYt)G",
            "X_^[]SVt$",
            "Y3\u048bN",
            "AY8L$",
            "^[UQQSVu",
            "\u06c9E~4WF",
            "3uEy",
            "E#AY\u06c9]",
            "u{AYC",
            "39EE~gu",
            "\u0249Mt<",
            "@Yt>uMQ",
            "Eu\u024bE@;EE|]_^[v",
            "VYY3UM",
            "YYtDG",
            "X_^[]US]",
            "!83_^[]",
            "YYt\t",
            "XVt$",
            "X3UQQSVW}",
            "+t*Ht{Ht,Hu;_",
            ";tV;t",
            ";u;tGuv",
            "\ubccbM;u",
            "YC;_",
            "3;L$",
            "^_Z?L$",
            "YYt$",
            "DYL$",
            "SVt$",
            "Vn)Yu",
            "3t'F",
            "t ;H",
            "~FPQ?",
            "YY5u",
            "_^[VWt$",
            "_^t$",
            "m(YPe",
            "V5hH",
            "Y^VWt$",
            "VVt$",
            "_^h<1G",
            "t\tS>*Y[",
            "[Vt$",
            "<'Pt$",
            "3\u06c5[u",
            "PkY3;u",
            "h$&G",
            "G;|C",
            "_^[]t$",
            "h0zG",
            "@P7C",
            "^[SVt$",
            "aYYqu",
            "3t\tV]Y8F",
            "t0@Pv",
            "3Vt$",
            "t\tPY",
            "YVWt$",
            "_^hdG",
            "h<1G",
            "SVt$",
            "1;u7",
            "SPoYYH",
            "3\u0245Vt$H",
            "Yu\tt",
            "ou\tt",
            "Y;tE|\t+=",
            "t4YC",
            "[^UW39}",
            ";|;~",
            "^[_]t$",
            "SVt$",
            "3t;SC",
            "Vt$ ",
            "^[t$",
            "USVu",
            "WVmu",
            ";|;~",
            "_^[]USE",
            "VPk]",
            "SYYM",
            "^[]QSxYYUE",
            "!YY]",
            "V3\u048bA",
            "AHu^",
            "I_^UQQVWhfG",
            "SVVuu",
            "my\u0609}SW",
            "utu_9u",
            "YYuUVVuu.yEEP{",
            "YYu#EPYEU",
            "YY\ub20b[",
            "_^S\\$",
            "t#h<1G",
            ";PS/R",
            "t%VS",
            "SVdYYu",
            "3^[t$",
            "USW}",
            "Qh\u0527G",
            ";}EC",
            "l.YC",
            ";t%S",
            "RP\u058bE",
            "_[]US]",
            "3St>-Yt",
            "\t3uVtRc",
            "_^[]U",
            "SVWhYG",
            "t$;s ",
            "FGVPu",
            "s;pE",
            "E\\En",
            "E\\Ers\tu",
            "E\\Etd",
            "E\\EfU",
            "E\\EvF",
            "E\\Ea7",
            "E\\Ee(QEhG",
            "E\\]j",
            "_^[QS\\$",
            "tq<\"tm<#t&<\\te<sY",
            "YY1;s",
            "tEEmUj",
            "E\"L$",
            "#\ubf00sEpE",
            "YYL$",
            "rP\tu",
            "\\u\tF",
            "_^][YUQE",
            "EEPj",
            "SVEWPEPh$G",
            "3}}u",
            "^;uPE",
            "PY;\u01c9E",
            "[]+j",
            "[9]uE",
            "PSCYY5",
            "t:t6;t2",
            "YEYfCe",
            "tV<s4",
            "ttE9E",
            "f<sa",
            "t5+E",
            "GE@;\u0189E",
            "33WWu",
            ";u`G",
            "^9uuu%u",
            "+PQu",
            "CYYF;w",
            "EE;E~5j",
            ";~:}",
            "9U}0;E",
            "CYY}",
            "CY\u074bE",
            "_^[S\\$",
            "Ht5VSY",
            "YY^|$",
            "YPhDG",
            "SUVW5\u0133H",
            "\u04dc5\u0334H",
            "P5\u0134H",
            "TWhb5E",
            "[Sh\"E",
            "h|$G",
            "\u8925@Sh6E",
            "\u82e5Sh E",
            "hX$G",
            "uSh26E",
            "hP$G",
            "_3Vh#6E",
            "hH$G",
            "G@Sh27E",
            "h\\ G",
            "Sh5E",
            "@Wht>E",
            "\u04e4Wh=@E",
            "hD$G",
            "VUh#G",
            "\u83e4@VUh#G",
            "zVh@",
            "dSh:E",
            "h\\EG",
            "NShp;E",
            "8@Vh;E",
            "VUhG",
            "Vh;E",
            "VUhG",
            "@Sha>E",
            "\u01e3Wh7E",
            "\u8c63Wh:9E",
            "\u86e3Sh\"E",
            "\u8163@WhKE",
            "lVh@LE",
            "VVLE",
            "VUht$G",
            "?VUh<1G",
            "-@Vh#E",
            "hl$G",
            "Vh%E",
            "VhME",
            "\u04a2@VhNE",
            "\u8e62VhOE",
            "\u88e2VhLE",
            "\u8362Vh*ME",
            "w@VhME",
            "^VhNE",
            "HVh\\E",
            "2Vh\\E",
            "@Wh'E",
            "Vh?KE",
            "SUh $G",
            "@SUh",
            "\u8ae1Sh\\E",
            "VUh$G",
            "~VUhfG",
            "l@ShKE",
            "=Wh{^E",
            "'Whe`E",
            "@Wh|`E",
            "WhEE",
            "\u0320VhWE",
            "\u8da0@Wh!YE",
            "qVhZE",
            "[@WhCE",
            ",VhQWE",
            "WhWE",
            "@VhZE",
            "VhYE",
            "\u045fVh2ZE",
            "]Uh>RE",
            "\u889f@UhTE",
            "\u825fWhSE",
            "h<#G",
            "sWhTE",
            "G@UhOE",
            ".UhTE",
            "WhaRE",
            "\u049eWUh ",
            "Vh#WE",
            "\u8a9eWhM]E",
            "\u851e@WhJE",
            "\u8a20WhJE",
            "\u8620Wh0JE",
            "\u8220WhJE",
            "xVhWE",
            "hVhWE",
            "XHWhYYE",
            "EWhBYE",
            "5WhUE",
            "%Sh\\E",
            "Wht>E",
            "\u061d@WhBCE",
            "\u8fddht$G",
            "VhdG",
            "Vh`G",
            "$_^][UE",
            "NYYE",
            "]US]",
            "t[tW",
            "?\tu>C",
            "V@P\u02bf",
            "\u8affYYe^[]t$",
            "t@t<",
            "u$T$",
            "$@@3S\\$",
            "tmh<1G",
            "th\"G",
            "VPS|<",
            "VnYPSb",
            "YYPeY^[",
            "VPt$",
            "X^3;",
            "IUVE",
            "Ph!G",
            "P!Y3u",
            "t0It\\IIt>P7",
            "YPhG",
            "WPVM",
            "WVPj",
            " PcY_^]",
            "_^USVE",
            "Ph!G",
            "[u_E",
            "PsYu",
            "t$t ",
            "X_^[]",
            "tgJtEJJt",
            "YPhG",
            ";u+R3y",
            "t$SPVQ7SPVu",
            "+P:bY\"UU",
            ";|AE",
            "t%;w",
            "_^[]S\\$",
            "t*t$",
            "h\\EG",
            "YPSj^",
            "YY[h\u0129G",
            "YYP&^",
            "UQQS]",
            "EO;v}u",
            "O;v;sdF",
            "@@Pv",
            "<9}\t",
            "2<9u",
            "01<a|",
            "aa<A|",
            "AAVt$",
            "V^PV",
            "^USVu",
            "33;u",
            "u'9]",
            "_^[]j",
            "t>t:",
            "P*YP6u",
            "PYWPu",
            "YY^]j",
            "XUS]",
            "tsHtcu",
            "HHt=j",
            "Xu\tSY",
            "x;9F",
            "t\tSlY",
            "X_^[]U}",
            "tAt=",
            "PaYv",
            "P(Yv",
            "hD%G",
            "]UVj",
            "+PRu",
            "^]UQS]",
            "HHt7j",
            "PEPu",
            "Vh\u0527G",
            "tPSC",
            "Y;u5@C",
            "VS<u",
            "PYVt$",
            "PV3~",
            "W\u02cd}_j",
            "DEPS",
            "ECPS",
            "^[Sh;G",
            "UQQSVu",
            "3[}9]",
            "]S6u]",
            "WWSP",
            "4P;PE",
            "YY h<G",
            "+2;~AC",
            "_^[j",
            "hD%G",
            "U,SVW}",
            "3[u9]",
            "EEPEY",
            "]S7]",
            "VVSPE\u0709u",
            "X_^[SY{",
            "WVVK",
            "MM\u060bK",
            "EMtaPguj",
            "yP8PEE\u0603",
            "SnYE;E",
            "+M+M",
            ";|+uG",
            "u?9C",
            "\u0389U+M)E\u05c9M",
            "+\u044bM;}iE",
            "u2t*",
            "\"h\\G",
            "+QuVu",
            "YYSt;Yt",
            "1.YM",
            "hD%G",
            "t!t$",
            "YPhtG",
            "5VPVt$",
            "VY^}Pt$",
            "VePVt$",
            "VWY^Vt$",
            "I;r[^S\\$",
            "\tSLY[VWPj",
            "GN_^",
            "PY}Ph&G",
            "YYW|$",
            "VQWV^",
            "_S\\$",
            "UVWS3s",
            "Y;se",
            "]F;rt",
            "X_^][Vt$",
            "VdYY^Qd$",
            "VWSs",
            "Y;skUj",
            "A#\u0145t",
            "F;r|$",
            "X_^[YVt$",
            "V[YY^Qd$",
            "SU,0",
            "W=lE",
            "<[s<",
            "F;sM",
            "SPYY",
            "_][t",
            "X^YVt$",
            "YY^Qd$",
            "SVW|$",
            "UPYY",
            "A#\u0145t",
            "X_^[YVt$",
            "YY^j",
            "W3P3u",
            "YY9s",
            ";Eu\u0509uu\u0609uu\u0709u",
            "Y}90|",
            "\u0203;sr",
            "|S;t",
            "Y;|EPr",
            "39ut&%;s",
            "@;rj",
            "X_^[",
            "SVW9uGq",
            ";tNV;s\t8\\u",
            "sB8-u=@;\u0189A",
            "_^[Vt$",
            "?~,u",
            "PtWPu",
            "Ku\u05cbu",
            "YtAN",
            "@B;r ",
            "X_^[U",
            "\u0409UZ;",
            "]]]]~",
            "EU9]",
            "Ej@Y",
            "fEP-Y;_|$9]",
            ";Y}E",
            "@Nu^[Vt$",
            ".~,u",
            "Ku\u05cbu",
            "Yt>N",
            "@;r ",
            "X_^[Vt$",
            "SVW}",
            "\u86bd~,u",
            "Ou\u05cbM",
            "tBR6GY",
            "X_^[Pt$",
            "u~F>",
            "P+\u020bE",
            "uJ+PWS",
            ")EY9C",
            "Fdh<G",
            ";}t>;uv",
            "u+VWSv",
            ")Y_^[Vt$",
            "W39~",
            "P(GY;~",
            "|_^Vt$",
            "~0V\u043fN",
            "X^Vt$",
            "VYY^PYV~",
            "^USVE",
            "uO;~",
            "u7V\u813eF",
            "T8;U",
            "V+)^",
            "X_^[]Vt$",
            "sVt$",
            "VWW6Vt$",
            "\tV\u04f3Y_^SVt$",
            "8;s9",
            "v)VB+PWv",
            "X_^[Vt$",
            "zVdYY^USVW}",
            ";r;s:F<s3",
            "X_^[]Vt$",
            "\u043aV\\YY^Vt$",
            "WVVBY",
            "_^Vt$",
            "\u843aVYY^UQQSVWe",
            "cYY1",
            "EPWu",
            ";t#\u8131VEu",
            "EPWu",
            "GEPWu",
            ";t.FPEVw$uBEPWu",
            "u%Y_^[US]",
            "PiYYN",
            "TYY.P2",
            "W9PS\t",
            "X_^[]t$",
            "PYYj",
            "PQD$",
            "QPw\u0203",
            "W;#\t8_[u",
            "UQQEPh",
            "P`YE",
            "SVW}",
            "uj9_",
            "F;uE",
            "^YPj",
            "j-P;Pj",
            "Mh<G",
            "\u84743;s!;M",
            "Fh<G",
            "XH#RQ>Y_^[jlt$",
            "SEWPEe",
            "Ph!G",
            "u-EP",
            "+<0E",
            ";sFE",
            ";\u01c9Mw",
            "uuV_",
            "F@;r}",
            "rtUE",
            ";s@E",
            "uuV$_",
            ">Y_[jrt$",
            "jct$",
            "VWt$",
            ";5`H",
            "YYWV!I",
            "X_^h",
            "wVt$",
            "\u8771VW|$",
            ";|t$",
            "YPhHG",
            "t%Vt$",
            "u^5`H",
            "_[US]",
            "VeVWf",
            "P\u04f6PE",
            "WV]YPWg",
            "9PhhG",
            "V:CC",
            "VqjWh$G",
            "VxqD3WhcE",
            "WV&o",
            "h#dE",
            "WYPV",
            "|_^[]SVWt$",
            "YY<;s ",
            "PXPyPSv",
            "_^[9Pt$",
            "YYSVWt$",
            "3Y9~",
            "Y~!F",
            "PHY9;t#G;~",
            "|t9P\u07e6YPhG",
            "\u05edSV\u060bD$",
            "PVPC",
            "^[t$",
            "USVWhhG",
            "e_^[]",
            "tuu%",
            "?$tPt",
            "P\u012aYL$",
            "RPh G",
            "RPhG",
            "PPt$",
            "WVxY3\u048bH",
            ";|t$",
            "\u8824YPhLG",
            "?$t\\t",
            "P\u8e69Yu",
            "PWh G",
            "PWhG",
            "`V#E",
            "_^]UVu",
            "WVYVG",
            "aYPhLG",
            "]VW5\u0133H",
            "a5\u0134H",
            "Pd5`H",
            "\u8835jhiE",
            "tljhjE",
            "h|$G",
            "ijDj",
            "hX$G",
            "hP$G",
            "8j3VhKnE",
            "hH$G",
            " j~kE",
            "VWht$G",
            "\tj@VWhl$G",
            "VWhd$G",
            "iVWhtXG",
            "i-oE",
            "VWh#G",
            "i@VWh#G",
            "iVhAkE",
            "h|XG",
            "\\i@j",
            "hD$G",
            "BijhemE",
            "hP#G",
            "+ijh0mE",
            "hD#G",
            "iVhiE",
            "h@_^t$",
            "PYYUE",
            "PhSG",
            "R;Yu",
            "^]S\\$",
            "VWS-ShhG",
            "V|$$G",
            "X_^[Vt$",
            "W39~",
            "GY;~",
            "|_^SVt$",
            "WV3Y9~",
            "YYPj",
            "|_^[Vt$",
            "YtDWVOPB6",
            "Wh|G",
            "VhkE",
            "^US]",
            "VWSP5",
            "\u8c28VPE",
            "\u8131hSG",
            "w3 9s",
            "\\YYG",
            "BhSG",
            "! F;s",
            "|h|*G",
            "_^[]",
            "YYVt$",
            ";tOW\u8a68WPVM",
            "h(TG",
            "hNmE",
            "o/Pt$",
            "W39|$",
            "HSVt$",
            "YYG;~",
            "|\u064b^[_S\\$",
            "VW|$",
            "tmti",
            "uPWSY;Yu<G",
            "4YYt",
            "X_^[3SVW|$",
            "WP3Y9_",
            "Y~13",
            "PVY3C;_",
            "[S\\$",
            "VW|$",
            "tmti",
            "SY;Yu<G",
            "4YYt",
            "X_^[3D$",
            "SVW8D$",
            "0;|.\u018b\u0659\u060b\u0199",
            "M}5F",
            "\u0659\\8+\u01be?B",
            "_0^[hlG",
            "UVWu",
            "j\"Ww",
            "_^]VWj43j4WVN",
            "hhpE",
            "WVt$(q ~0>~",
            "S39U",
            "t';t#",
            "YPh\u012dG",
            "\u06a1SY}",
            "yEPQQ",
            "\u040b_^[S\\$",
            "t9t5",
            "PS$YYK",
            "SYY[SUVW5\u0133H",
            "W5\u0334H",
            "PZh4pE",
            ",WhCC",
            "rbWh;wE",
            "h@$G",
            "VU5\\H",
            "DbHWVhG",
            "WVhG",
            "bWVh\u062eG",
            "b3Vh",
            "a@\u0641E",
            "_VhE",
            "hP$G",
            "_@VhOE",
            "hH$G",
            "_VhvE",
            "h|$G",
            "m_VhE",
            "W_@UE",
            "VWh\u012eG",
            "=_VWU5\\H",
            "/_Vh",
            "VWhG",
            "_@VWhG",
            "VWh8PG",
            "^VWhG",
            "VWht$G",
            "^@VWhl$G",
            "^VhE",
            "hd$G",
            "]Uh\u0245E",
            "i^UhEE",
            "S^@Vh",
            ":^VhE",
            "$^Vh",
            "h,-G",
            "^Vh@E",
            "]@nE",
            "VWhG",
            "]VWhG",
            "VWhG",
            "]VWh|G",
            "]@Vh\u0308E",
            "t]Vh0E",
            "^]`E",
            "VWh\\G",
            "G]@VWhTG",
            "2]VhE",
            "VWhDG",
            "]VWh8G",
            "\\@VWh,G",
            "VWh$G",
            "\\VWh",
            "\\VSh",
            "\\VWh",
            "w\\Uh(E",
            "a\\jh",
            "J\\@Uh",
            "_^][Vt$",
            "j\"V?F",
            "3QPH0",
            "\u8b5c^S\\$",
            "Ph!G",
            "PwYE",
            "YPVu",
            "tLtH",
            "?\"u/y",
            "u&PQ0E",
            "^]t$",
            "PEPu",
            "YYPu",
            "YU SVu",
            "W3j$SVF",
            "@ M$",
            "\u0609F ;EPEPEPEPEPEPEPEPhtG",
            ",N u",
            "dh\\G",
            "[9]u",
            "Y9]F",
            "Y9]F",
            "u@E|;F",
            "0_^[",
            "t)t%",
            "YU$Vu",
            "Wj\t}Y_^t",
            "YYU`S]",
            "V339s WS",
            "Q\u0405YQ",
            "tjPS",
            "9E}>E9E",
            "Q\u0405Yt",
            "\u01cdMQ\u040bY",
            "E_^[",
            "j\t}Yu",
            "MQ\u040bY",
            "j\tY}Ep",
            "M++uE",
            "+u+EQ",
            ":k<k<C",
            "+u+E<",
            "k<k<",
            "+u+E",
            "/}\u01d9+",
            "Q\u040b3;Yt",
            "VS}I",
            "Y;Y}-E",
            "j\tY}EM",
            "0~PE",
            "j\tEEY}\u0105",
            "k<+N",
            "Y;tyK",
            "tX+\u020bC",
            "k<+N",
            "9Eu3M;K",
            "+Ek<",
            "+Ek<+E",
            "E9Eu3E;C",
            "+Ek<",
            "+Ek<+E",
            "EhxG",
            "^UQSVW}",
            "YEF}",
            "jdYH",
            "jdYE",
            "_^[k<",
            "jd^u",
            "H^$@",
            ";u\u07cbP",
            ";u\u054bP",
            "J^B3^t$",
            "j\"V(F",
            "^Vt$",
            "$;YY^Vt$",
            "j\"VF",
            "^SVt$",
            "j\"V\u01c1\\$",
            "tftb",
            "?\"uI{",
            "u@PS\u81c1C",
            "X^[SVt$",
            "j\"V:\\$",
            "tEtA",
            "?\"u({",
            "3^[Vt$",
            "j\"V\u0400F",
            "YY^@,",
            "j\"V\u8c80YYN",
            ";tWVx",
            "tKtG",
            "?\"u.{",
            "u%PSV[",
            "j\"VKj4Sv",
            "^[hG",
            "UQSVu",
            "YY{,",
            "\u84ceWj\t{",
            "_^[UQSVu",
            "YY{,",
            "CVwY",
            "$Wj\tY{",
            "XC0C,E",
            "_^[t$",
            "YYV5\\H",
            "PSYYVW|$",
            "j\"W~w",
            "YY~0",
            "v,W!",
            "Y_^u",
            "j\"W~w",
            "YY~0",
            "v,WYY~,",
            "Vh\u072fG",
            "Vh\u012fG",
            "PEP\tYY_^Vt$",
            "j\"V8~v",
            "YYL$",
            "t6t2",
            "SVWu",
            "EPQQ",
            "\u0609]mt)\u0638\"G",
            "$Ph@G",
            ">}%N",
            "++;~<EQQ",
            "$h$G",
            "\u8c4bQR~,",
            "j\"W|G",
            "YY@,",
            "_^[SVt$",
            "j\"V|\\$",
            "tNtJ",
            "?\"u1{",
            "u(PS{|F",
            "$\u88c8YY",
            "jSVp",
            "^[Vt$",
            "j\"V>|F",
            "^VW|$",
            "YY~0",
            "v,WBYYF",
            "^VW|$",
            "j\"W{w",
            "YY~0",
            "^VW|$",
            "j\"W{w",
            "YY~0",
            "v,WYYF",
            "^VW|$",
            "j\"W{w",
            "YY~0",
            "v,WYYF",
            "^VW|$",
            "j\"Wd{w",
            "YY~0",
            "v,WYYF",
            "VW|$",
            "j\"W4{w",
            "YY~0",
            "v,WZYYF",
            "Y_^VW|$",
            "j\"Wzw",
            "YY~0",
            "v,W$YYF _",
            "^VW|$",
            "j\"Wzw",
            "YY~0",
            "v,WYYF$_^D",
            "VW|$",
            "j\"Wzw",
            "YY~0",
            "v,WYYF(_",
            "VW|$",
            "j\"Wozw",
            "YY~0",
            "v,WYYj",
            "X9F,u",
            "4\u8408Y_^UVW}",
            "YY~0",
            "v,W;YY~,",
            "k<+A",
            "_^]VW|$",
            "j\"Wkyw",
            "YY~0",
            "v,WYYWYPF(",
            "PF$j",
            ",_^UhSVu",
            "WEj\"VEx^",
            "YY{0",
            "s,VYYE",
            ";Ysrj",
            "7Y;YE",
            "SEVP",
            "]V*3",
            "E9Et",
            "EYE;rE",
            "Wu\u8bc5E9EYYt",
            "Y_^[UQVWE",
            "9}}?E",
            "EEuM",
            "~_^hG",
            "\u88c5YYUSVj",
            "Yu\tt",
            "^[]UQQVu",
            "P\u8e43YY^SVt$",
            "Y\u060bL$",
            "\t3L$",
            "YY^[U0u",
            "#SVW333}",
            "G} |e",
            "G} |",
            "E\u040dE\u0403",
            "PMYEY",
            "EuPEPu",
            "j\"VtF",
            "A+L$",
            "KWt4G",
            "FEKu+u",
            "_0E^[U",
            "S3\u06c9w",
            ":\u04c8UMt",
            "A@:u;u",
            "E.]^M",
            "EQP-",
            "YYtQu",
            "YYj8Y",
            "D5\\5(}",
            "EVP-",
            "PW5w",
            "[_^Vt$",
            "YYt(h",
            "X^3^U,",
            "SVpU",
            "UuE?",
            ";;\u0189EuHu",
            "uuWuVS:",
            "ME\u0709u\uba09u+]",
            "uS}(U",
            "|EEu",
            "VS} U",
            "]VSU",
            "}40U",
            "]VSU",
            "uWVU",
            "]VWSU",
            "}HE\u0605",
            "VuSU",
            "E\u0605t^9E",
            "|2;EruuSuuu",
            ";Er[]uuu",
            "uuSz",
            "}VuSU",
            "W*uWS",
            "uuS\"",
            "XEEE",
            "ti9}",
            "ut:;t",
            "u]uu",
            "XEE+u",
            "tf;tu",
            "tA9}",
            "uWVn",
            "u39EuB9Eu5MU",
            "++;E}",
            "EEu_^[UE",
            "|r~<U",
            ";r\u0283}",
            "A;r^[]U}",
            ";r\tM",
            "ta:0} ",
            "89:1|Oz",
            "F;r_^[]VWt$",
            "FV\u8276Vt$",
            "WVgVWz",
            "VW\u0776VWV",
            "y_^U",
            "SVW3}}}}",
            "8>s2pE",
            "3;toj",
            "ZsQpE",
            "F;u;t",
            "D8_E9Mu",
            "JLHuM",
            "3\u0245M~",
            "JLHuM",
            "<eulC",
            "C<-u",
            "DA\u0409E\ubb85t",
            "E+EE",
            "H9M}",
            "EE\ty",
            "_^[t",
            "oh\u0631G",
            "kY@H",
            "PxYj",
            "!uYYUQVu",
            "MQ50H",
            "uVh(G",
            "gkME",
            "P8nPYuPE50H",
            ")r E",
            "3\u06c9u]]E]@",
            "MQWP",
            "EPW5XH",
            "9]t49^",
            "u50H",
            "nSh@H",
            "X_^[U",
            "VWS?nY",
            "IIuJP",
            "EE]Ph",
            "R}uE",
            "3_^[USVWu",
            "glPsu",
            "YYt[LwG",
            "Q50H",
            "u46!lPBsWPE",
            "^~Su",
            "u_^[]u",
            "<vWPE",
            "/~Su",
            "Q5@H",
            "V$/G",
            "t>t:",
            "u!S;",
            "qSVhhG",
            ",^[]",
            "rY&P",
            "uhLwG",
            "}t$ V",
            "V50H",
            "^UQS",
            "VhDG",
            "F+EPupp",
            ":uqFFuWS@",
            "YYt_WSs",
            "HHu'>",
            "c_^[u",
            "Vh(G",
            "Ph(G",
            "sPYYt$",
            "PYUVu",
            "PV58H",
            "V58H",
            "^]t$",
            "hPhhG",
            "P\u0270Yv",
            "3^t$",
            "YYL$",
            "0TYUVW}",
            "W?$u",
            "e_^]j",
            "gYPhG",
            "aU39E",
            "]UQQj",
            "uEPEPh!G",
            "YYguAPjEY",
            "YYPt$",
            "UQQEVPEPh!G",
            "0u\u871eE",
            "PV58H",
            "VeYPh\u0432G",
            "Yu[E",
            "7t09F",
            "\u0249Mt#F",
            "UQQE",
            "1lW}",
            "EVEh",
            "_^VW|$",
            "UQVW G",
            "t4 G",
            "PEh=G",
            "EPjPW",
            "\u044b_^UQ=H",
            "]PV58H",
            "V58H",
            "0;3tH~",
            "W=LE",
            "P\u05c5Yu]VY_",
            "^[UM",
            "RQPc",
            "]U<H",
            "TY3UQEPE",
            "P5<H",
            "t\tubYUQ<H",
            "tWEPu",
            "t$u\\bu",
            "tFtB",
            "3\u0245u5u1t*}",
            "`PhpG",
            "YY]UQ<H",
            "N`PhpG",
            "tEtA",
            "[]UVu",
            "QVP-`",
            "_PV5<H",
            "tDt@",
            "YYUQ<H",
            "tEPu",
            "UVW\u07feE",
            "t6t2",
            "t_WhE",
            "PN5<H",
            "QPV^",
            "_^]t$",
            "C]PddPt$",
            "3UQSWu",
            "\\YPhnG",
            "t>t:",
            "tREPE",
            "PSb`4u",
            "E_[u",
            "[YPh\u0133G",
            "UUQ<H",
            "Pu_E",
            "P5<H",
            "_u\\\\",
            "*YPt$",
            "t';5\u0133H",
            "N[YPVYPh",
            "/[YPhG",
            "UUQVWu",
            "%\\Yu",
            "[YPh4G",
            "EP54H",
            "PE54H",
            "WoaY\u0203",
            "Pjc'>Pu",
            "_^h$G",
            "qaVt$",
            "j\"VR~",
            "^V\u868eYp",
            "1aUVWu",
            "WYYY_^]",
            "^VYPt$",
            "P54H",
            "\u82e5YE_^UVu",
            "X^]UQQVEWP54H",
            "u8EW`",
            "t\tutYj",
            "X_^j",
            "USVu",
            "3\u06c5t@F",
            "QWPmX",
            "uBWVYY\u0583}",
            "u[uWE",
            "uK5\u0133H",
            "t5\u0133H",
            ";u,9E",
            "t'WVYPu",
            "~YPWVYPhpG",
            "bYY_^[]j",
            "UQVu",
            "WYYu",
            "uVYPhG",
            "t.MQM",
            "QP\tZ",
            "VYYj",
            "UYPVBYPhG",
            "OUYPV&YPhG",
            "~OVt$",
            "^Vt$",
            "VbVYt!j",
            "VVt$",
            "3^VWt$",
            "PVov",
            "YY_^Vt$",
            "Y^Wv",
            "VKZVU",
            "_^t$",
            "TP[Pt$",
            "VW3t.F",
            "u3u/",
            "u&5\u0133H",
            "3_^[]j",
            "U3S9U",
            "Sh4G",
            "RPSh",
            "_^[]VWt$",
            "OWSYYu",
            "IYYt$",
            ";5\u0133H",
            "RaYt$",
            "_^t$",
            "QPhG",
            "YYCVt$",
            "tWYPV&",
            "PYYPt$",
            "QYPh\u0435G",
            "QWPQ",
            "#YPWPYPhG",
            "t\tVW",
            "_^]Vt$",
            "X^3^Vt$",
            "4MVOQYYu",
            "^Vt$",
            "QYYu",
            "VIVt$",
            "YY^Vt$",
            "LVPYYu",
            "^VWct$",
            "u_^Vt$",
            "{PYt.t$",
            ">OP_VVt$",
            "FYY3^UQVu",
            ".PYYu",
            "NYPh$G",
            "VYYVt",
            "BNYPhlG",
            ")HYPu",
            "$NYPhDG",
            "KPt$",
            "SVWh\u0426F",
            "TP\u8f44h\u0626F",
            "TP\u8ac4hF",
            "TP\u8644VhG",
            "1WhG",
            "&Sh\u0436G",
            "Vh\u0236G",
            "@ShG",
            "YY_^[h,G",
            "s+\u020b\u0105",
            "Yh\u0734H",
            "YHWVS3D$",
            "3\u060bD$",
            "A\u060bL$",
            "N3\u048bOu",
            "u\tD$",
            "S\u060bD$",
            "3P\u020b\\$",
            "SVD$",
            "3\u060bD$",
            "A\u020b\\$",
            "N3\u048b^[",
            "33\u0300@s",
            "33%E",
            "UjhF",
            "hSVWe3\u06c9]j",
            "h[O@",
            "EEP5HH",
            "EPEPEP",
            "0u>\"u:Fu",
            "<\"u>\"u",
            "< v]\u040dEP",
            "> vFuj",
            "XPVSS",
            "P0_EP",
            "\tMPQ",
            "YY%E",
            "?UUUUUU?433333?",
            "?HP?",
            "@0123456789abcdefghijklmnopqrstuvwxyz",
            ".A\ua3209Y>)F\u01b0>",
            "}qo~p|r",
            "ikgjh",
            "xlyv",
            " !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdeftw",
            "\t'\t'\t@\tA\tE\tN\tO\tU\t[\t\\\t]\t`\ta\tb\tc\tf\tg\th\tk\tl\to\tp\ts\tt\tw\tx\ty\t|\t}\t\t\t\t",
            "````k",
            "`````",
            "```{",
            "````````=",
            "````````````````````````",
            "````````````-",
            "```````````````````````````````",
            "````````",
            "`V$n",
            "````",
            "````Z",
            " <!<!````",
            "```Y",
            "```~!",
            "````g",
            "#```````````R",
            "```````",
            "$$$$o",
            "$$g$g$",
            "`V$`V$``Y",
            "````````",
            "`)\t|",
            "``````",
            "<!<!]",
            "```````",
            "````+",
            "```<",
            "``````",
            "V$V$`V$V$`",
            "`V$`V$`",
            "````y",
            "````",
            "``V$",
            "```7",
            "``````",
            "````",
            "````]",
            "````",
            "````````````````",
            "````````````",
            "````````=",
            " ``````s",
            "`````",
            "]\"]Z",
            "#######",
            "#######",
            "##########G",
            "########",
            "!!!!!!!",
            "!!!!!!!",
            "!!!!!!!!!!",
            "!!!!!!!!",
            "\"\"!!!\"!\"\"\"\"\"\"\"!\"",
            "\"\"\"\"\"\"\"",
            "\"\"\"\"\"\"\"\"\"\"",
            "\"\"\"\"\"\"\"\"",
            "  \"\"\" \"       \"",
            "       ",
            "          ",
            "        ",
            "MbP?",
            " !\"#$%&'()*+,-./0123456789:;<=>?@abcdefghijklmnopqrstuvwxyz[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~",
            "1.8.2",
            "2004-12-25",
            "i386-mswin32",
            "GetCommandLineA",
            "GetModuleHandleA",
            "DeleteFileA",
            "FreeLibrary",
            "GetModuleFileNameA",
            "GetLastError",
            "LoadLibraryExA",
            "VirtualProtect",
            "GetProcAddress",
            "LoadLibraryA",
            "OutputDebugStringA",
            "CreateFileA",
            "CloseHandle",
            "ReadFile",
            "WriteFile",
            "GetFileSize",
            "GetTempFileNameA",
            "GetTempPathA",
            "FormatMessageA",
            "DuplicateHandle",
            "GetCurrentThread",
            "GetCurrentProcess",
            "GetVersionExA",
            "LockFileEx",
            "UnlockFileEx",
            "LockFile",
            "UnlockFile",
            "CreatePipe",
            "GetExitCodeProcess",
            "WaitForSingleObject",
            "CreateProcessA",
            "GetStdHandle",
            "FindClose",
            "FindNextFileA",
            "FindFirstFileA",
            "GetLogicalDrives",
            "LeaveCriticalSection",
            "EnterCriticalSection",
            "CreateEventA",
            "GetCurrentThreadId",
            "WaitForMultipleObjectsEx",
            "GetLocalTime",
            "GenerateConsoleCtrlEvent",
            "TerminateProcess",
            "OpenProcess",
            "GetCurrentProcessId",
            "GetEnvironmentVariableA",
            "MoveFileExA",
            "MoveFileA",
            "SetFileAttributesA",
            "GetFileAttributesA",
            "GetProcessTimes",
            "TlsSetValue",
            "Sleep",
            "InterlockedDecrement",
            "InterlockedIncrement",
            "TlsGetValue",
            "TlsAlloc",
            "InitializeCriticalSection",
            "ResumeThread",
            "SetThreadContext",
            "ResetEvent",
            "GetThreadContext",
            "SetThreadPriority",
            "SuspendThread",
            "SetEvent",
            "GetThreadPriority",
            "VirtualFree",
            "VirtualQuery",
            "GetExitCodeThread",
            "TerminateThread",
            "CreateThread",
            "FreeEnvironmentStringsA",
            "GetEnvironmentStrings",
            "SetFileTime",
            "SystemTimeToFileTime",
            "InterlockedExchange",
            "SetEnvironmentVariableA",
            "KERNEL32.dll",
            "DialogBoxParamA",
            "EndDialog",
            "MessageBeep",
            "SendMessageA",
            "GetDlgItem",
            "SetWindowTextA",
            "wsprintfA",
            "GetWindowTextA",
            "SetDlgItemTextA",
            "LoadStringA",
            "LoadIconA",
            "LoadCursorA",
            "CharNextA",
            "CharPrevA",
            "USER32.dll",
            "DeleteObject",
            "CreateFontA",
            "GDI32.dll",
            "GetUserNameA",
            "ADVAPI32.dll",
            "WSOCK32.dll",
            "??3@YAXPAX@Z",
            "strrchr",
            "strcmp",
            "??2@YAPAXI@Z",
            "strcpy",
            "strlen",
            "strncat",
            "sprintf",
            "sqrt",
            "fabs",
            "_isnan",
            "_finite",
            "fprintf",
            "_iob",
            "_get_osfhandle",
            "memset",
            "_errno",
            "strncpy",
            "free",
            "fclose",
            "_close",
            "_exit",
            "memcpy",
            "strpbrk",
            "strchr",
            "_pctype",
            "_isctype",
            "__mb_cur_max",
            "bsearch",
            "tolower",
            "realloc",
            "strcat",
            "__pioinfo",
            "__doserrno",
            "_open_osfhandle",
            "strerror",
            "_sys_nerr",
            "mktime",
            "raise",
            "clock",
            "_filbuf",
            "_flsbuf",
            "fflush",
            "gmtime",
            "_vsnprintf",
            "memmove",
            "strtoul",
            "_ftol",
            "_HUGE",
            "memcmp",
            "strncmp",
            "abort",
            "vfprintf",
            "fputs",
            "fwrite",
            "exit",
            "__p__environ",
            "_setjmp3",
            "memchr",
            "signal",
            "longjmp",
            "printf",
            "fopen",
            "fseek",
            "malloc",
            "clearerr",
            "ungetc",
            "fread",
            "ftell",
            "_commit",
            "freopen",
            "_pipe",
            "modf",
            "ldexp",
            "frexp",
            "atan",
            "atan2",
            "acos",
            "asin",
            "cosh",
            "sinh",
            "tanh",
            "log10",
            "fmod",
            "floor",
            "ceil",
            "atoi",
            "time",
            "strstr",
            "toupper",
            "localtime",
            "asctime",
            "strftime",
            "_unlink",
            "_open",
            "_access",
            "MSVCRT.dll",
            "__dllonexit",
            "_onexit",
            "_XcptFilter",
            "_acmdln",
            "__getmainargs",
            "_initterm",
            "__setusermatherr",
            "_adjust_fdiv",
            "__p__commode",
            "__p__fmode",
            "__set_app_type",
            "_except_handler3",
            "_controlfp",
            "GetStartupInfoA",
            "_stricmp",
            "_strnicmp",
            "_tzset",
            "_fdopen",
            "_strdup",
            "_getcwd",
            "_stat",
            "_getpid",
            "_fileno",
            "_chdir",
            "_mkdir",
            "_rmdir",
            "_fstat",
            "_chmod",
            "_umask",
            "_chsize",
            "_write",
            "_setmode",
            "_lseek",
            "_read",
            "_dup2",
            "_dup",
            "_hypot",
            "_tzname",
            "_daylight",
            "ruby182g.exc",
            "exerb_add_plugin_function",
            "exerb_find_plugin_function",
            "exerb_has_plugin_function",
            "exerb_main",
            "rb_eExerbRuntimeError",
            "rb_mExerb",
            "GetCurrentThreadHandle",
            "Init_Array",
            "Init_Bignum",
            "Init_Binding",
            "Init_Comparable",
            "Init_Dir",
            "Init_Enumerable",
            "Init_Exception",
            "Init_File",
            "Init_GC",
            "Init_Hash",
            "Init_IO",
            "Init_Math",
            "Init_Numeric",
            "Init_Object",
            "Init_Precision",
            "Init_Proc",
            "Init_Random",
            "Init_Range",
            "Init_Regexp",
            "Init_String",
            "Init_Struct",
            "Init_Thread",
            "Init_Time",
            "Init_eval",
            "Init_ext",
            "Init_heap",
            "Init_load",
            "Init_marshal",
            "Init_pack",
            "Init_process",
            "Init_signal",
            "Init_stack",
            "Init_sym",
            "Init_syserr",
            "Init_var_tables",
            "Init_version",
            "NtInitialize",
            "NtSyncProcess",
            "SafeFree",
            "Win32System",
            "acosh",
            "asinh",
            "atanh",
            "chown",
            "crypt",
            "definekey",
            "dln_find_exe",
            "dln_find_file",
            "dln_load",
            "do_aspawn",
            "do_spawn",
            "eaccess",
            "encrypt",
            "endhostent",
            "endnetent",
            "endprotoent",
            "endservent",
            "erfc",
            "flock",
            "getegid",
            "geteuid",
            "getgid",
            "getlogin",
            "getnetbyaddr",
            "getnetbyname",
            "getnetent",
            "getprotoent",
            "getservent",
            "gettimeofday",
            "getuid",
            "io_fread",
            "ioctl",
            "is_ruby_native_thread",
            "kill",
            "link",
            "mark_hash",
            "mark_tbl",
            "pipe_exec",
            "rb_Array",
            "rb_Float",
            "rb_Integer",
            "rb_String",
            "rb_add_method",
            "rb_alias",
            "rb_alias_variable",
            "rb_any_to_s",
            "rb_apply",
            "rb_argv",
            "rb_argv0",
            "rb_ary_aref",
            "rb_ary_assoc",
            "rb_ary_clear",
            "rb_ary_cmp",
            "rb_ary_concat",
            "rb_ary_delete",
            "rb_ary_delete_at",
            "rb_ary_dup",
            "rb_ary_each",
            "rb_ary_entry",
            "rb_ary_freeze",
            "rb_ary_includes",
            "rb_ary_join",
            "rb_ary_new",
            "rb_ary_new2",
            "rb_ary_new3",
            "rb_ary_new4",
            "rb_ary_plus",
            "rb_ary_pop",
            "rb_ary_push",
            "rb_ary_rassoc",
            "rb_ary_reverse",
            "rb_ary_shift",
            "rb_ary_sort",
            "rb_ary_sort_bang",
            "rb_ary_store",
            "rb_ary_to_ary",
            "rb_ary_to_s",
            "rb_ary_unshift",
            "rb_assoc_new",
            "rb_attr",
            "rb_attr_get",
            "rb_autoload",
            "rb_autoload_load",
            "rb_autoload_p",
            "rb_backref_get",
            "rb_backref_set",
            "rb_backtrace",
            "rb_big2dbl",
            "rb_big2ll",
            "rb_big2long",
            "rb_big2str",
            "rb_big2ull",
            "rb_big2ulong",
            "rb_big2ulong_pack",
            "rb_big_2comp",
            "rb_big_and",
            "rb_big_clone",
            "rb_big_divmod",
            "rb_big_lshift",
            "rb_big_minus",
            "rb_big_mul",
            "rb_big_norm",
            "rb_big_or",
            "rb_big_plus",
            "rb_big_pow",
            "rb_big_rand",
            "rb_big_xor",
            "rb_block_given_p",
            "rb_block_proc",
            "rb_bug",
            "rb_cArray",
            "rb_cBignum",
            "rb_cClass",
            "rb_cData",
            "rb_cDir",
            "rb_cFalseClass",
            "rb_cFile",
            "rb_cFixnum",
            "rb_cFloat",
            "rb_cHash",
            "rb_cIO",
            "rb_cInteger",
            "rb_cModule",
            "rb_cNilClass",
            "rb_cNumeric",
            "rb_cObject",
            "rb_cProc",
            "rb_cRange",
            "rb_cRegexp",
            "rb_cString",
            "rb_cStruct",
            "rb_cSymbol",
            "rb_cThread",
            "rb_cTime",
            "rb_cTrueClass",
            "rb_call_inits",
            "rb_call_super",
            "rb_catch",
            "rb_check_array_type",
            "rb_check_convert_type",
            "rb_check_frozen",
            "rb_check_inheritable",
            "rb_check_safe_obj",
            "rb_check_safe_str",
            "rb_check_string_type",
            "rb_check_type",
            "rb_class2name",
            "rb_class_boot",
            "rb_class_inherited",
            "rb_class_inherited_p",
            "rb_class_init_copy",
            "rb_class_instance_methods",
            "rb_class_name",
            "rb_class_new",
            "rb_class_new_instance",
            "rb_class_path",
            "rb_class_private_instance_methods",
            "rb_class_protected_instance_methods",
            "rb_class_public_instance_methods",
            "rb_class_real",
            "rb_class_tbl",
            "rb_clear_cache",
            "rb_clear_cache_by_class",
            "rb_cmperr",
            "rb_cmpint",
            "rb_compile_cstr",
            "rb_compile_error",
            "rb_compile_error_append",
            "rb_compile_file",
            "rb_compile_string",
            "rb_const_defined",
            "rb_const_defined_at",
            "rb_const_defined_from",
            "rb_const_get",
            "rb_const_get_at",
            "rb_const_get_from",
            "rb_const_list",
            "rb_const_set",
            "rb_convert_type",
            "rb_copy_generic_ivar",
            "rb_cstr2inum",
            "rb_cstr_to_dbl",
            "rb_cstr_to_inum",
            "rb_cv_get",
            "rb_cv_set",
            "rb_cvar_defined",
            "rb_cvar_get",
            "rb_cvar_set",
            "rb_data_object_alloc",
            "rb_dbl2big",
            "rb_dbl_cmp",
            "rb_default_rs",
            "rb_deferr",
            "rb_define_alias",
            "rb_define_alloc_func",
            "rb_define_attr",
            "rb_define_class",
            "rb_define_class_id",
            "rb_define_class_under",
            "rb_define_class_variable",
            "rb_define_const",
            "rb_define_global_const",
            "rb_define_global_function",
            "rb_define_hooked_variable",
            "rb_define_method",
            "rb_define_method_id",
            "rb_define_module",
            "rb_define_module_function",
            "rb_define_module_id",
            "rb_define_module_under",
            "rb_define_private_method",
            "rb_define_protected_method",
            "rb_define_readonly_variable",
            "rb_define_singleton_method",
            "rb_define_variable",
            "rb_define_virtual_variable",
            "rb_detach_process",
            "rb_disable_super",
            "rb_dvar_curr",
            "rb_dvar_defined",
            "rb_dvar_push",
            "rb_dvar_ref",
            "rb_eArgError",
            "rb_eEOFError",
            "rb_eException",
            "rb_eFatal",
            "rb_eFloatDomainError",
            "rb_eIOError",
            "rb_eIndexError",
            "rb_eInterrupt",
            "rb_eLoadError",
            "rb_eNameError",
            "rb_eNoMemError",
            "rb_eNoMethodError",
            "rb_eNotImpError",
            "rb_eRangeError",
            "rb_eRuntimeError",
            "rb_eScriptError",
            "rb_eSecurityError",
            "rb_eSignal",
            "rb_eStandardError",
            "rb_eSyntaxError",
            "rb_eSystemCallError",
            "rb_eSystemExit",
            "rb_eTypeError",
            "rb_eZeroDivError",
            "rb_each",
            "rb_enable_super",
            "rb_ensure",
            "rb_env_path_tainted",
            "rb_eof_error",
            "rb_eql",
            "rb_equal",
            "rb_error_frozen",
            "rb_eval_cmd",
            "rb_eval_string",
            "rb_eval_string_protect",
            "rb_eval_string_wrap",
            "rb_exc_fatal",
            "rb_exc_new",
            "rb_exc_new2",
            "rb_exc_new3",
            "rb_exc_raise",
            "rb_exec_end_proc",
            "rb_exit",
            "rb_extend_object",
            "rb_f_abort",
            "rb_f_exec",
            "rb_f_exit",
            "rb_f_global_variables",
            "rb_f_kill",
            "rb_f_lambda",
            "rb_f_require",
            "rb_f_sprintf",
            "rb_f_trace_var",
            "rb_f_untrace_var",
            "rb_fatal",
            "rb_fdopen",
            "rb_file_const",
            "rb_file_expand_path",
            "rb_file_open",
            "rb_file_s_expand_path",
            "rb_file_sysopen",
            "rb_find_file",
            "rb_find_file_ext",
            "rb_fix2int",
            "rb_fix2str",
            "rb_float_new",
            "rb_fopen",
            "rb_frame_last_func",
            "rb_free_generic_ivar",
            "rb_frozen_class_p",
            "rb_fs",
            "rb_funcall",
            "rb_funcall2",
            "rb_funcall3",
            "rb_funcall_rescue",
            "rb_gc",
            "rb_gc_call_finalizer_at_exit",
            "rb_gc_copy_finalizer",
            "rb_gc_disable",
            "rb_gc_enable",
            "rb_gc_finalize_deferred",
            "rb_gc_force_recycle",
            "rb_gc_mark",
            "rb_gc_mark_frame",
            "rb_gc_mark_global_tbl",
            "rb_gc_mark_locations",
            "rb_gc_mark_maybe",
            "rb_gc_mark_parser",
            "rb_gc_mark_threads",
            "rb_gc_mark_trap_list",
            "rb_gc_register_address",
            "rb_gc_stack_start",
            "rb_gc_start",
            "rb_gc_unregister_address",
            "rb_generic_ivar_table",
            "rb_get_kcode",
            "rb_getc",
            "rb_gets",
            "rb_glob",
            "rb_global_entry",
            "rb_global_variable",
            "rb_globi",
            "rb_gv_get",
            "rb_gv_set",
            "rb_gvar_defined",
            "rb_gvar_get",
            "rb_gvar_set",
            "rb_hash",
            "rb_hash_aref",
            "rb_hash_aset",
            "rb_hash_delete",
            "rb_hash_delete_if",
            "rb_hash_foreach",
            "rb_hash_freeze",
            "rb_hash_new",
            "rb_hash_reject_bang",
            "rb_hash_select",
            "rb_hash_values_at",
            "rb_id2name",
            "rb_id_attrset",
            "rb_include_module",
            "rb_inspect",
            "rb_inspecting_p",
            "rb_int2big",
            "rb_int2inum",
            "rb_intern",
            "rb_interrupt",
            "rb_invalid_str",
            "rb_io_addstr",
            "rb_io_binmode",
            "rb_io_check_closed",
            "rb_io_check_initialized",
            "rb_io_check_readable",
            "rb_io_check_writable",
            "rb_io_close",
            "rb_io_eof",
            "rb_io_flags_mode",
            "rb_io_fptr_finalize",
            "rb_io_fread",
            "rb_io_fwrite",
            "rb_io_getc",
            "rb_io_gets",
            "rb_io_mode_flags",
            "rb_io_modenum_flags",
            "rb_io_print",
            "rb_io_printf",
            "rb_io_puts",
            "rb_io_synchronized",
            "rb_io_taint_check",
            "rb_io_unbuffered",
            "rb_io_ungetc",
            "rb_io_wait_readable",
            "rb_io_wait_writable",
            "rb_io_write",
            "rb_is_class_id",
            "rb_is_const_id",
            "rb_is_instance_id",
            "rb_is_junk_id",
            "rb_is_local_id",
            "rb_iter_break",
            "rb_iterate",
            "rb_iterator_p",
            "rb_iv_get",
            "rb_iv_set",
            "rb_ivar_defined",
            "rb_ivar_get",
            "rb_ivar_set",
            "rb_jump_tag",
            "rb_kcode",
            "rb_last_status",
            "rb_lastline_get",
            "rb_lastline_set",
            "rb_ll2big",
            "rb_ll2inum",
            "rb_load",
            "rb_load_fail",
            "rb_load_file",
            "rb_load_path",
            "rb_load_protect",
            "rb_loaderror",
            "rb_mComparable",
            "rb_mEnumerable",
            "rb_mErrno",
            "rb_mFileTest",
            "rb_mGC",
            "rb_mKernel",
            "rb_mMath",
            "rb_mPrecision",
            "rb_mProcGID",
            "rb_mProcID_Syscall",
            "rb_mProcUID",
            "rb_mProcess",
            "rb_make_metaclass",
            "rb_mark_end_proc",
            "rb_mark_generic_ivar",
            "rb_mark_generic_ivar_tbl",
            "rb_mark_hash",
            "rb_mark_tbl",
            "rb_marshal_dump",
            "rb_marshal_load",
            "rb_match_busy",
            "rb_mem_clear",
            "rb_memcicmp",
            "rb_memcmp",
            "rb_memerror",
            "rb_memsearch",
            "rb_method_boundp",
            "rb_method_node",
            "rb_mod_ancestors",
            "rb_mod_class_variables",
            "rb_mod_const_at",
            "rb_mod_const_missing",
            "rb_mod_const_of",
            "rb_mod_constants",
            "rb_mod_include_p",
            "rb_mod_included_modules",
            "rb_mod_init_copy",
            "rb_mod_module_eval",
            "rb_mod_name",
            "rb_mod_remove_const",
            "rb_mod_remove_cvar",
            "rb_module_new",
            "rb_name_class",
            "rb_name_error",
            "rb_newobj",
            "rb_node_newnode",
            "rb_notimplement",
            "rb_num2dbl",
            "rb_num2fix",
            "rb_num2int",
            "rb_num2ll",
            "rb_num2long",
            "rb_num2ull",
            "rb_num2ulong",
            "rb_num_coerce_bin",
            "rb_num_coerce_cmp",
            "rb_num_coerce_relop",
            "rb_num_zerodiv",
            "rb_obj_alloc",
            "rb_obj_as_string",
            "rb_obj_call_init",
            "rb_obj_class",
            "rb_obj_classname",
            "rb_obj_clone",
            "rb_obj_dup",
            "rb_obj_freeze",
            "rb_obj_id",
            "rb_obj_id_obsolete",
            "rb_obj_infect",
            "rb_obj_init_copy",
            "rb_obj_instance_eval",
            "rb_obj_instance_variables",
            "rb_obj_is_instance_of",
            "rb_obj_is_kind_of",
            "rb_obj_remove_instance_variable",
            "rb_obj_singleton_methods",
            "rb_obj_taint",
            "rb_obj_tainted",
            "rb_obj_type",
            "rb_obj_untaint",
            "rb_origenviron",
            "rb_output_fs",
            "rb_output_rs",
            "rb_p",
            "rb_parser_append_print",
            "rb_parser_while_loop",
            "rb_path2class",
            "rb_path_check",
            "rb_path_end",
            "rb_path_last_separator",
            "rb_path_next",
            "rb_path_skip_prefix",
            "rb_proc_exec",
            "rb_proc_new",
            "rb_proc_times",
            "rb_progname",
            "rb_prohibit_interrupt",
            "rb_protect",
            "rb_protect_inspect",
            "rb_provide",
            "rb_provided",
            "rb_quad_pack",
            "rb_quad_unpack",
            "rb_raise",
            "rb_range_beg_len",
            "rb_range_new",
            "rb_read_check",
            "rb_read_pending",
            "rb_reg_adjust_startpos",
            "rb_reg_eqq",
            "rb_reg_last_match",
            "rb_reg_match",
            "rb_reg_match2",
            "rb_reg_match_last",
            "rb_reg_match_post",
            "rb_reg_match_pre",
            "rb_reg_mbclen2",
            "rb_reg_new",
            "rb_reg_nth_defined",
            "rb_reg_nth_match",
            "rb_reg_options",
            "rb_reg_quote",
            "rb_reg_regcomp",
            "rb_reg_regsub",
            "rb_reg_search",
            "rb_remove_method",
            "rb_require",
            "rb_require_safe",
            "rb_rescue",
            "rb_rescue2",
            "rb_reserved_word",
            "rb_respond_to",
            "rb_rs",
            "rb_scan_args",
            "rb_secure",
            "rb_secure_update",
            "rb_set_class_path",
            "rb_set_end_proc",
            "rb_set_kcode",
            "rb_set_safe_level",
            "rb_singleton_class",
            "rb_singleton_class_attached",
            "rb_singleton_class_clone",
            "rb_source_filename",
            "rb_stderr",
            "rb_stdin",
            "rb_stdout",
            "rb_str2cstr",
            "rb_str2inum",
            "rb_str_append",
            "rb_str_associate",
            "rb_str_associated",
            "rb_str_buf_append",
            "rb_str_buf_cat",
            "rb_str_buf_cat2",
            "rb_str_buf_new",
            "rb_str_buf_new2",
            "rb_str_cat",
            "rb_str_cat2",
            "rb_str_cmp",
            "rb_str_concat",
            "rb_str_dump",
            "rb_str_dup",
            "rb_str_dup_frozen",
            "rb_str_freeze",
            "rb_str_hash",
            "rb_str_inspect",
            "rb_str_intern",
            "rb_str_locktmp",
            "rb_str_modify",
            "rb_str_new",
            "rb_str_new2",
            "rb_str_new3",
            "rb_str_new4",
            "rb_str_new5",
            "rb_str_plus",
            "rb_str_resize",
            "rb_str_setter",
            "rb_str_split",
            "rb_str_substr",
            "rb_str_times",
            "rb_str_to_dbl",
            "rb_str_to_inum",
            "rb_str_to_str",
            "rb_str_unlocktmp",
            "rb_str_update",
            "rb_str_upto",
            "rb_string_value",
            "rb_string_value_cstr",
            "rb_string_value_ptr",
            "rb_struct_alloc",
            "rb_struct_aref",
            "rb_struct_aset",
            "rb_struct_define",
            "rb_struct_getmember",
            "rb_struct_iv_get",
            "rb_struct_members",
            "rb_struct_new",
            "rb_struct_s_members",
            "rb_svar",
            "rb_sym_all_symbols",
            "rb_sys_fail",
            "rb_sys_warning",
            "rb_syswait",
            "rb_tainted_str_new",
            "rb_tainted_str_new2",
            "rb_thread_alone",
            "rb_thread_atfork",
            "rb_thread_create",
            "rb_thread_critical",
            "rb_thread_current",
            "rb_thread_fd_close",
            "rb_thread_fd_writable",
            "rb_thread_group",
            "rb_thread_interrupt",
            "rb_thread_kill",
            "rb_thread_list",
            "rb_thread_local_aref",
            "rb_thread_local_aset",
            "rb_thread_main",
            "rb_thread_pending",
            "rb_thread_polling",
            "rb_thread_run",
            "rb_thread_schedule",
            "rb_thread_select",
            "rb_thread_signal_raise",
            "rb_thread_sleep",
            "rb_thread_sleep_forever",
            "rb_thread_stop",
            "rb_thread_tick",
            "rb_thread_trap_eval",
            "rb_thread_wait_fd",
            "rb_thread_wait_for",
            "rb_thread_wakeup",
            "rb_throw",
            "rb_time_interval",
            "rb_time_new",
            "rb_time_timeval",
            "rb_to_id",
            "rb_to_int",
            "rb_trap_exec",
            "rb_trap_exit",
            "rb_trap_immediate",
            "rb_trap_pending",
            "rb_trap_restore_mask",
            "rb_uint2big",
            "rb_uint2inum",
            "rb_ull2big",
            "rb_ull2inum",
            "rb_undef",
            "rb_undef_alloc_func",
            "rb_undef_method",
            "rb_values_at",
            "rb_w32_accept",
            "rb_w32_asynchronize",
            "rb_w32_bind",
            "rb_w32_close",
            "rb_w32_closedir",
            "rb_w32_cmdvector",
            "rb_w32_connect",
            "rb_w32_enter_critical",
            "rb_w32_fclose",
            "rb_w32_fdclr",
            "rb_w32_fdisset",
            "rb_w32_fdset",
            "rb_w32_free_environ",
            "rb_w32_get_environ",
            "rb_w32_get_osfhandle",
            "rb_w32_getc",
            "rb_w32_getcwd",
            "rb_w32_getenv",
            "rb_w32_gethostbyaddr",
            "rb_w32_gethostbyname",
            "rb_w32_gethostname",
            "rb_w32_getpeername",
            "rb_w32_getpid",
            "rb_w32_getprotobyname",
            "rb_w32_getprotobynumber",
            "rb_w32_getservbyname",
            "rb_w32_getservbyport",
            "rb_w32_getsockname",
            "rb_w32_getsockopt",
            "rb_w32_ioctlsocket",
            "rb_w32_isatty",
            "rb_w32_leave_critical",
            "rb_w32_listen",
            "rb_w32_main_context",
            "rb_w32_opendir",
            "rb_w32_putc",
            "rb_w32_readdir",
            "rb_w32_recv",
            "rb_w32_recvfrom",
            "rb_w32_rename",
            "rb_w32_rewinddir",
            "rb_w32_seekdir",
            "rb_w32_select",
            "rb_w32_send",
            "rb_w32_sendto",
            "rb_w32_setsockopt",
            "rb_w32_shutdown",
            "rb_w32_sleep",
            "rb_w32_snprintf",
            "rb_w32_socket",
            "rb_w32_stat",
            "rb_w32_strerror",
            "rb_w32_telldir",
            "rb_w32_times",
            "rb_w32_utime",
            "rb_w32_vsnprintf",
            "rb_waitpid",
            "rb_warn",
            "rb_warning",
            "rb_with_disable_interrupt",
            "rb_write_error",
            "rb_write_error2",
            "rb_yield",
            "rb_yield_splat",
            "rb_yield_values",
            "re_mbctab",
            "re_set_syntax",
            "ruby__end__seen",
            "ruby_add_suffix",
            "ruby_class",
            "ruby_cleanup",
            "ruby_current_node",
            "ruby_debug",
            "ruby_digitmap",
            "ruby_dln_librefs",
            "ruby_dyna_vars",
            "ruby_errinfo",
            "ruby_eval_tree",
            "ruby_eval_tree_begin",
            "ruby_exec",
            "ruby_finalize",
            "ruby_frame",
            "ruby_getcwd",
            "ruby_ignorecase",
            "ruby_in_compile",
            "ruby_in_eval",
            "ruby_incpush",
            "ruby_init",
            "ruby_init_loadpath",
            "ruby_inplace_mode",
            "ruby_nerrs",
            "ruby_options",
            "ruby_parser_stack_on_heap",
            "ruby_platform",
            "ruby_process_options",
            "ruby_prog_init",
            "ruby_qsort",
            "ruby_re_adjust_startpos",
            "ruby_re_compile_fastmap",
            "ruby_re_compile_pattern",
            "ruby_re_copy_registers",
            "ruby_re_free_pattern",
            "ruby_re_free_registers",
            "ruby_re_match",
            "ruby_re_mbcinit",
            "ruby_re_search",
            "ruby_re_set_casetable",
            "ruby_release_date",
            "ruby_run",
            "ruby_safe_level",
            "ruby_scan_hex",
            "ruby_scan_oct",
            "ruby_scope",
            "ruby_script",
            "ruby_set_argv",
            "ruby_set_current_source",
            "ruby_set_stack_size",
            "ruby_setenv",
            "ruby_show_copyright",
            "ruby_show_version",
            "ruby_signal_name",
            "ruby_sourcefile",
            "ruby_sourceline",
            "ruby_stack_check",
            "ruby_stack_length",
            "ruby_stop",
            "ruby_strdup",
            "ruby_strtod",
            "ruby_top_self",
            "ruby_unsetenv",
            "ruby_verbose",
            "ruby_version",
            "ruby_xcalloc",
            "ruby_xfree",
            "ruby_xmalloc",
            "ruby_xrealloc",
            "ruby_yychar",
            "ruby_yydebug",
            "ruby_yylval",
            "ruby_yyparse",
            "setgid",
            "sethostent",
            "setnetent",
            "setprotoent",
            "setservent",
            "setuid",
            "st_add_direct",
            "st_cleanup_safe",
            "st_copy",
            "st_delete",
            "st_delete_safe",
            "st_foreach",
            "st_foreach_safe",
            "st_free_table",
            "st_init_numtable",
            "st_init_numtable_with_size",
            "st_init_strtable",
            "st_init_strtable_with_size",
            "st_init_table",
            "st_init_table_with_size",
            "st_insert",
            "st_lookup",
            "thgroup_enclose",
            "time_overflow_p",
            "wait",
            "waitpid",
            "yynerrs",
            "status",
            "exerb",
            "The executable has invalid signature of archive header.",
            "The executable has invalid archive header.",
            "The executable has invalid signature of the plug-in table header.",
            "The executable has invalid signature of the file table header.",
            "The executable has invalid signature of the name table header.",
            "The executable hasn't an archive.",
            "the loaded recourse table is too big.",
            "The startup script was not found.",
            "No such file to load -- %s",
            ".dll",
            ".brb",
            "TOPLEVEL_BINDING",
            "eval",
            "the loaded library table is too big.",
            "cygruby18.dll",
            "cygwin-ruby18.dll",
            "msvcrt-ruby18.dll",
            "ruby.exe",
            "exerb_dummy_module.dll",
            "Couldn't modify DLL's name in the import table. The name of the executable file is too long.",
            ".rdata",
            ".idata",
            "Couldn't call the initialize function in the extension library. --- %s(%s)",
            "Init_",
            "GetProcAddress",
            "GetModuleHandleA",
            "LoadLibraryExA",
            "LoadLibraryA",
            "kernel32.dll",
            "msvcrt-ruby18",
            "readlines",
            "getc",
            "readline",
            "gets",
            "fcntl",
            "ioctl",
            "sysseek",
            "binmode",
            "tty?",
            "isatty",
            "close_write",
            "close_read",
            "closed?",
            "close",
            "eof?",
            "pos=",
            "rewind",
            "seek",
            "tell",
            "flush",
            "ungetc",
            "readchar",
            "write",
            "read",
            "lineno=",
            "lineno",
            "sync=",
            "sync",
            "fsync",
            "to_io",
            "to_i",
            "fileno",
            "sysread",
            "syswrite",
            "each_byte",
            "each_line",
            "each",
            "reopen",
            "Terminal",
            "backtrace",
            "gsub",
            "message",
            "RuntimeError",
            "load_cursor",
            "load_icon",
            "load_string",
            "open",
            "filename",
            "filepath",
            "runtime?",
            "Exerb",
            "$Exerb",
            "StringIO",
            "stringio",
            "argument needs to be integer or string",
            "the plug-in function table is too big.",
            "no such plugin function --- %s",
            "Win32API Error #%i --- %s",
            "Couldn't find a name entry --- %i",
            "Couldn't find a file entry --- %i",
            ":2*\"",
            "<4,$",
            ">6.&",
            "@80( ",
            "91)!",
            ";3+#",
            "=5-%",
            "?7/'",
            "!\"#$%&'()*+,-./0123456789:;<=>?@",
            " 91)!",
            ":2*\"",
            ";3+#",
            "<4,$?7/'",
            ">6.&",
            "=5-%",
            "(3-!0,1'8\"5.*2$",
            "erf.c:%d:p_gamma() could not converge.",
            "erf.c:%d:q_gamma() could not converge.",
            "verify",
            "unlock",
            "type",
            "truename",
            "title",
            "time",
            "start",
            "shift",
            "setlocal",
            "rmdir",
            "rename",
            "pushd",
            "prompt",
            "popd",
            "pause",
            "path",
            "move",
            "mkdir",
            "lock",
            "lfnfor",
            "goto",
            "ftype",
            "exit",
            "erase",
            "endlocal",
            "echo",
            "date",
            "ctty",
            "copy",
            "color",
            "chdir",
            "chcp",
            "call",
            "break",
            "assoc",
            "<Unknown>",
            ".:*?\"/\\",
            "%s /c %.*s",
            "COMSPEC",
            "%s -c \"%.*s\"",
            "RUBYSHELL",
            "command.com",
            "opendir: malloc failed!",
            "Unknown Error",
            "Unable to create interrupt event!",
            "could not find version 1 of winsock dll",
            "Unable to locate winsock library!",
            "CreateHardLinkA",
            "failed to launch waiter thread:%d",
            "array size too big",
            "negative array size (or size too big)",
            "Array",
            "to_ary",
            "index too big",
            "index %ld out of array",
            "Insecure: can't modify array",
            "can't modify array during iteration",
            "array",
            "Symbol as array index",
            "[...]",
            "invalid inspect_tbl value",
            "array modified during sort",
            "negative length (%ld)",
            "__inspect_key__",
            "nitems",
            "flatten!",
            "flatten",
            "compact!",
            "compact",
            "uniq!",
            "uniq",
            "rassoc",
            "assoc",
            "slice!",
            "slice",
            "include?",
            "fill",
            "clear",
            "replace",
            "transpose",
            "reject!",
            "reject",
            "delete_if",
            "delete_at",
            "delete",
            "values_at",
            "select",
            "map!",
            "collect!",
            "collect",
            "sort!",
            "sort",
            "reverse!",
            "reverse",
            "join",
            "indices",
            "indexes",
            "rindex",
            "index",
            "empty?",
            "size",
            "length",
            "reverse_each",
            "each_index",
            "insert",
            "unshift",
            "shift",
            "push",
            "concat",
            "last",
            "first",
            "fetch",
            "hash",
            "eql?",
            "frozen?",
            "to_a",
            "inspect",
            "to_s",
            "initialize_copy",
            "initialize",
            "block supersedes default value argument",
            "negative array size",
            "given block not used",
            "negative number of arguments",
            "Array#%s is deprecated; use Array#values_at",
            "wrong number of arguments (%d for 2)",
            "Symbol as subarray length",
            "wrong number of arguments (at least 1)",
            "wrong number of arguments (%d for 0)",
            "element size differ (%d should be %d)",
            "argument too big",
            "negative argument",
            "tried to flatten recursive array",
            "bignum too big to convert into `quad int'",
            "Integer",
            "illegal radix %d",
            "unsigned long",
            "bignum too big to convert into `%s'",
            "bignum out of range of unsigned long",
            "bignum too big to convert into `long'",
            "long",
            "unsigned long long",
            "bignum too big to convert into `long long'",
            "long long",
            "Infinity",
            "-Infinity",
            "Bignum out of Float range",
            "in a**b, b may be too big",
            "to_f",
            "remainder",
            "modulo",
            "divmod",
            "coerce",
            "Bignum",
            "Can't coerce %s to Bignum",
            "can't make subclass of virtual class",
            "can't make subclass of Class",
            "__classid__",
            "__classpath__",
            "already initialized class",
            "__attached__",
            "superclass must be a Class (%s given)",
            "inherited",
            "no super class for `%s', Object assumed",
            "%s is already defined",
            "%s is not a class",
            "no super class for `%s::%s', Object assumed",
            "%s is not a module",
            "%s::%s is not a module",
            "cyclic include detected",
            "can't define singleton",
            "unknown immediate %ld",
            "bad scan arg format: %s",
            "wrong number of arguments (%d for %d)",
            "comparison of %s with %s failed",
            "between?",
            "Comparable",
            "%s%s%s",
            "%s%s",
            "*?[]\\",
            "FNM_CASEFOLD",
            "FNM_DOTMATCH",
            "FNM_PATHNAME",
            "FNM_NOESCAPE",
            "fnmatch?",
            "fnmatch",
            "glob",
            "unlink",
            "rmdir",
            "mkdir",
            "chroot",
            "getwd",
            "chdir",
            "path",
            "entries",
            "foreach",
            "closed directory",
            "conflicting chdir during another chdir block",
            "HOME/LOGDIR not set",
            "LOGDIR",
            "HOME",
            "wrong argument type %s (expected Dir)",
            ".bat",
            ".cmd",
            ".com",
            ".exe",
            "%s - %s",
            "%s - %s",
            "filename too long",
            "Init_%s",
            "%d: ",
            "/usr/local/bin;/usr/ucb;/usr/bin;/bin;.",
            "PATH",
            "\tFile \"%s%s\"",
            "\tDirectory \"%.*s\"",
            "\tFile \"%s\"",
            "\tDirectory \"%s\"",
            "openpath: pathname too long (ignored)",
            "each_with_index",
            "member?",
            "any?",
            "all?",
            "partition",
            "inject",
            "find_all",
            "detect",
            "find",
            "grep",
            "sort_by",
            "Enumerable",
            "call",
            "sort_by reentered",
            "backtrace must be Array of String",
            "undef",
            "Node",
            "Scope",
            "Varmap",
            "MatchData",
            "Data",
            "Symbol",
            "false",
            "true",
            "File",
            "Struct",
            "Hash",
            "Fixnum",
            "Regexp",
            "String",
            "Float",
            "Module",
            "iClass",
            "Class",
            "Object",
            "%s:%d: ",
            "%s: ",
            "warning: %s",
            "ruby %s (%s) [%s]",
            "[BUG] ",
            "unknown type 0x%x",
            "wrong argument type %s (expected %s)",
            "undef leaked to the Ruby space",
            "invalid value for %s: %s",
            "warn",
            "Errno",
            "errno",
            "SystemCallError",
            "NoMemoryError",
            "SecurityError",
            "NotImplementedError",
            "LoadError",
            "SyntaxError",
            "ScriptError",
            "args",
            "NoMethodError",
            "_load",
            "_dump",
            "name",
            "NameError",
            "RangeError",
            "IndexError",
            "ArgumentError",
            "TypeError",
            "StandardError",
            "Interrupt",
            "SignalException",
            "fatal",
            "success?",
            "SystemExit",
            "set_backtrace",
            "to_str",
            "exception",
            "Exception",
            "mesg",
            "%s - %.*s",
            "unknown error",
            "invalid instance type",
            "The %s() function is unimplemented on this machine",
            "rb_sys_fail(%s) - errno == 0",
            "E%03d",
            ": %s",
            "%s -- %s",
            "can't modify frozen %s",
            "EDQUOT",
            "ESTALE",
            "EINPROGRESS",
            "EALREADY",
            "EHOSTUNREACH",
            "EHOSTDOWN",
            "ECONNREFUSED",
            "ETIMEDOUT",
            "ETOOMANYREFS",
            "ESHUTDOWN",
            "ENOTCONN",
            "EISCONN",
            "ENOBUFS",
            "ECONNRESET",
            "ECONNABORTED",
            "ENETRESET",
            "ENETUNREACH",
            "ENETDOWN",
            "EADDRNOTAVAIL",
            "EADDRINUSE",
            "EAFNOSUPPORT",
            "EPFNOSUPPORT",
            "EOPNOTSUPP",
            "ESOCKTNOSUPPORT",
            "EPROTONOSUPPORT",
            "ENOPROTOOPT",
            "EPROTOTYPE",
            "EMSGSIZE",
            "EDESTADDRREQ",
            "ENOTSOCK",
            "EUSERS",
            "EILSEQ",
            "EREMOTE",
            "EDEADLOCK",
            "EWOULDBLOCK",
            "ELOOP",
            "ENOTEMPTY",
            "ENOSYS",
            "ENOLCK",
            "ENAMETOOLONG",
            "EDEADLK",
            "ERANGE",
            "EDOM",
            "EPIPE",
            "EMLINK",
            "EROFS",
            "ESPIPE",
            "ENOSPC",
            "EFBIG",
            "ENOTTY",
            "EMFILE",
            "ENFILE",
            "EINVAL",
            "EISDIR",
            "ENOTDIR",
            "ENODEV",
            "EXDEV",
            "EEXIST",
            "EBUSY",
            "EFAULT",
            "EACCES",
            "ENOMEM",
            "EAGAIN",
            "ECHILD",
            "EBADF",
            "ENOEXEC",
            "E2BIG",
            "ENXIO",
            "EINTR",
            "ESRCH",
            "ENOENT",
            "EPERM",
            "Insecure operation at level %d",
            "Insecure operation `%s' at level %d",
            "Insecure operation: -r",
            "Insecure operation - %s",
            "wrong argument type %s (expected String)",
            "class/module",
            "defining %s.allocate is deprecated; use rb_define_alloc_func()",
            "allocate",
            "Insecure: can't define method",
            "method `%s' not defined in %s",
            "removing `%s' may cause serious problem",
            "Insecure: can't remove method",
            "rb_enable_super() is obsolete",
            "argument needs to be symbol or string",
            "private attribute?",
            "attribute accessor as module_function",
            "\t ... %ld levels...",
            "\tfrom %s",
            ": unhandled exception",
            "%s:%d",
            "%s:%d:in `%s'",
            "Unknown longjmp status %d",
            ": unexpected throw",
            "%s:%d: uncaught throw",
            ": retry outside of rescue clause",
            ": unexpected redo",
            ": unexpected break",
            ": unexpected next",
            ": unexpected return",
            "(eval)",
            "unexpected return",
            "unexpected break",
            "unexpected next",
            "retry outside of rescue clause",
            "unexpected redo",
            "@reason",
            "return",
            "break",
            "next",
            "retry",
            "redo",
            "noreason",
            "@exit_value",
            "class",
            "module",
            "object",
            "something(?!)",
            "undefined method `%s' for%s `%s'",
            " module",
            " class",
            "undefining `%s' may cause serious problem",
            "Insecure: can't undef `%s'",
            "discarding old %s",
            "undefined method `%s' for %s `%s'",
            "`to_a' did not return Array",
            "unknown node type %d",
            "no virtual class for %s",
            "Insecure: can't extend object",
            "extending module prohibited",
            "extending class prohibited",
            "superclass mismatch for class %s",
            "no outer class/module",
            "no class to make alias",
            "no class to undef method",
            "can't define singleton method \"%s\" for %s",
            "redefining method prohibited",
            "Insecure: can't define singleton method",
            "no class/module to add method",
            "wrong number of arguments (%d for 1)",
            "odd number list for Hash",
            "unexpected back-ref",
            "%s is not a class/module",
            "unexpected block argument",
            "no class/module to define class variable",
            "no class/module to define constant",
            "unexpected local variable assignment",
            "super called outside of method",
            "superclass method `%s' disabled",
            "unexpected local variable",
            "redefine %s",
            "method redefined; discarding old %s",
            "redefining `%s' may cause serious problem",
            "redefining Object#initialize may cause infinite loop",
            "line",
            "no class variables available",
            "class variable access from toplevel singleton method",
            "self",
            "constant",
            "class variable",
            "instance-variable",
            "global-variable",
            "local-variable(in-block)",
            "local-variable",
            "yield",
            "super",
            "method",
            "assignment",
            "expression",
            "(ruby)",
            "class path missing",
            "exit",
            "raise",
            "Exception `%s' at %s:%d - %s",
            "return can't jump across threads",
            "wrong number of arguments (%ld for 0)",
            "multiple values for a block parameter (%d for 1)",
            "\tfrom %s:%d",
            "no block given",
            "%s from proc-closure",
            "local-jump",
            "wrong number of arguments (%ld for %ld)",
            "bug in variable assignment",
            "declaring singleton class variable",
            "assigning void value",
            "class or module required for rescue clause",
            "method `%s' called on terminated object (0x%lx)",
            "allocator undefined for %s",
            "no id given",
            "undefined method `%s' for %s",
            "super: no superclass method `%s'",
            "undefined local variable or method `%s' for %s",
            "protected method `%s' called for %s",
            "private method `%s' called for %s",
            "bad argc(%d) specified for `%s(%s)'",
            "no argument-node",
            "c-return",
            "c-call",
            "too many arguments(%d)",
            "calling `super' from `%s' is prohibited",
            "__builtin__",
            "wrong argument type %s (expected Proc/Binding)",
            " in ",
            "compile error",
            "wrong number of arguments: %s(src) or %s{..}",
            "block not supplied",
            "$SAFE",
            "set_trace_func",
            "untrace_var",
            "trace_var",
            "extend",
            "constants",
            "nesting",
            "define_method",
            "alias_method",
            "undef_method",
            "remove_method",
            "class_eval",
            "module_eval",
            "private_class_method",
            "public_class_method",
            "protected_method_defined?",
            "private_method_defined?",
            "public_method_defined?",
            "method_defined?",
            "module_function",
            "private",
            "protected",
            "public",
            "include",
            "extend_object",
            "append_features",
            "instance_eval",
            "send",
            "local_variables",
            "global_variables",
            "throw",
            "catch",
            "at_exit",
            "abort",
            "caller",
            "fail",
            "respond_to?",
            "loop",
            "block_given?",
            "iterator?",
            "__send__",
            "__id__",
            "singleton_method_undefined",
            "method_undefined",
            "singleton_method_removed",
            "method_removed",
            "singleton_method_added",
            "method_added",
            "method_missing",
            "trace_func needs to be Proc",
            "exception object expected",
            "exception class/object expected",
            "wrong number of arguments",
            "no method name given",
            "negative level(%d)",
            "Insecure: can't modify trusted binding",
            "Insecure: can't change method visibility",
            "undefined method `%s'; can't happen",
            "module_function must be called for modules",
            "included",
            "extended",
            "wrong number of arguments (0 for 1)",
            "main#include in the wrapped load is effective only in wrapper module",
            "assigning non-exception to $!",
            "$! not set",
            "called without a block",
            "autoload?",
            "autoload",
            "require",
            "load",
            "$LOADED_FEATURES",
            "$LOAD_PATH",
            "tried to create Proc object without a block",
            "rb_f_lambda() is deprecated; use rb_block_proc() instead",
            "block for %s#%s is useless",
            "Insecure: tainted block value",
            "wrong argument type %s (expected Proc)",
            "Proc",
            "to_proc",
            "you cannot call unbound method; bind first",
            "bind argument must be an instance of %s",
            "singleton method called for a different object",
            "wrong argument type (expected Proc/Method)",
            "wrong argument type %s (expected Proc/Method)",
            "instance_method",
            "bind",
            "UnboundMethod",
            "unbind",
            "Method",
            "lambda",
            "proc",
            "binding",
            "arity",
            "clone",
            "stack level too deep",
            "SystemStackError",
            "exception reentered",
            "reason",
            "exit_value",
            "LocalJumpError",
            "#<%s:0x%.*lx@%s:%d>",
            "#<%s:0x%.*lx>",
            "Binding",
            "tried to downgrade safe level from %d to %d",
            "stream closed",
            " %s - %s:%d",
            "(main)",
            "J(0x%lx)",
            "T(%f)",
            "F(%d)",
            "deadlock 0x%lx: %s:",
            "cross-thread violation on rb_thread_schedule()",
            "aborting",
            "sleep",
            "dead",
            "unknown",
            "SIG%s",
            "unsaved context",
            "Thread(0x%lx): deadlock",
            "killed thread",
            "wrong argument type %s (expected Thread)",
            "stopping only thread",
            "\tnote: use sleep to stop forever",
            "Insecure exit at level %d",
            "can't start a new thread (frozen ThreadGroup)",
            "unstarted thread",
            "Insecure: thread locals",
            "thread locals",
            "Insecure: can't modify thread locals",
            "Default",
            "enclosed?",
            "enclose",
            "ThreadGroup",
            "callcc",
            "Continuation",
            "keys",
            "key?",
            "group",
            "safe_level",
            "priority=",
            "priority",
            "stop?",
            "alive?",
            "value",
            "terminate",
            "wakeup",
            "abort_on_exception=",
            "abort_on_exception",
            "critical=",
            "critical",
            "list",
            "main",
            "current",
            "pass",
            "kill",
            "stop",
            "fork",
            "start",
            "Thread",
            "ThreadError",
            "Thread#join: deadlock 0x%lx - mutual join(0x%lx)",
            "thread 0x%lx tried to join itself",
            "uninitialized thread - check `%s#initialize'",
            "must be called with a block",
            "#<%s:0x%lx %s>",
            "continuation called across trap",
            "continuation called across threads",
            "can't move from the enclosed thread group",
            "can't move from the frozen thread group",
            "can't move to the enclosed thread group",
            "can't move to the frozen thread group",
            "uncaught throw `%s' in thread 0x%lx",
            "uncaught throw `%s'",
            "ctime",
            "mtime",
            "atime",
            "blocks",
            "blksize",
            "rdev",
            "nlink",
            "mode",
            "uninitialized File::Stat",
            "couldn't find HOME environment -- expanding `%s'",
            "loading from unsafe file %s",
            "loading from non-absolute path %s",
            "loading from unsafe path %s",
            "rdev_minor",
            "rdev_major",
            "dev_minor",
            "dev_major",
            "Stat",
            "test",
            "LOCK_NB",
            "LOCK_UN",
            "LOCK_EX",
            "LOCK_SH",
            "Constants",
            "flock",
            "PATH_SEPARATOR",
            "ALT_SEPARATOR",
            "split",
            "SEPARATOR",
            "Separator",
            "extname",
            "dirname",
            "basename",
            "expand_path",
            "truncate",
            "umask",
            "rename",
            "readlink",
            "symlink",
            "link",
            "lchown",
            "lchmod",
            "chown",
            "chmod",
            "utime",
            "ftype",
            "lstat",
            "stat",
            "sticky?",
            "setgid?",
            "setuid?",
            "chardev?",
            "blockdev?",
            "socket?",
            "symlink?",
            "pipe?",
            "grpowned?",
            "owned?",
            "size?",
            "zero?",
            "file?",
            "executable_real?",
            "executable?",
            "writable_real?",
            "writable?",
            "readable_real?",
            "readable?",
            "exists?",
            "exist?",
            "directory?",
            "FileTest",
            "0x%lx",
            "0%lo",
            "characterSpecial",
            "directory",
            "file",
            "%s or %s",
            "not opened for writing",
            "unknown command ?%c",
            "-=<>",
            "bcdefgGkloOprRsSuwWxXz",
            "wrong argument class",
            "[FATAL] failed to allocate memory",
            "negative allocation size (or too big)",
            "negative re-allocation size",
            "rb_gc_mark() called for broken object",
            "rb_gc_mark(): unknown data type 0x%lx(0x%lx) %s",
            "non object",
            "corrupted object",
            "cross-thread violation on rb_gc()",
            "obj_free() called for broken object",
            "gc_sweep(): unknown data type 0x%lx(%ld)",
            "failed to allocate memory",
            "_id2ref",
            "undefine_finalizer",
            "define_finalizer",
            "call_finalizer",
            "finalizers",
            "remove_finalizer",
            "add_finalizer",
            "each_object",
            "ObjectSpace",
            "garbage_collect",
            "disable",
            "enable",
            "wrong type argument %s (should be callable)",
            "ObjectSpace::add_finalizer is deprecated; use define_finalizer",
            "ObjectSpace::remove_finalizer is deprecated; use undefine_finalizer",
            "ObjectSpace::finalizers is deprecated",
            "ObjectSpace::call_finalizer is deprecated; use define_finalizer",
            "0x%lx is not id value",
            "0x%lx is recycled object",
            "hash modified during iteration",
            "rehash occurred during iteration",
            "Insecure: can't modify hash",
            "uninitialized Hash",
            "value?",
            "has_value?",
            "has_key?",
            "merge",
            "merge!",
            "update",
            "invert",
            "values",
            "each_pair",
            "each_key",
            "each_value",
            "default_proc",
            "default=",
            "store",
            "to_hash",
            "rehash",
            "default",
            "odd number of arguments for Hash",
            "key not found",
            "Hash#%s is deprecated; use Hash#values_at",
            "{...}",
            "bad environment variable name",
            "bad environment variable value",
            "cannot change environment variable",
            "ENV.%s is deprecated; use ENV.values_at",
            "End of file reached",
            "Insecure: operation on untainted IO",
            "uninitialized stream",
            "closed stream",
            "not opened for reading",
            "ungetc failed",
            "unread stream",
            "illegal access mode %o",
            "illegal access mode %s",
            "illegal access modenum %o",
            "Can't do inplace edit for stdio",
            "Can't do inplace edit without backup",
            "Can't do inplace edit for stdio; skipping",
            "illegal prep_path() call",
            "rs modified",
            "BINARY",
            "TRUNC",
            "EXCL",
            "CREAT",
            "APPEND",
            "RDWR",
            "WRONLY",
            "RDONLY",
            "$FILENAME",
            "skip",
            "ARGF",
            "STDERR",
            "STDOUT",
            "STDIN",
            "$deferr",
            "$defout",
            "$stderr",
            "$stdout",
            "$stdin",
            "SEEK_END",
            "SEEK_CUR",
            "SEEK_SET",
            "pipe",
            "popen",
            "for_fd",
            "sysopen",
            "display",
            "puts",
            "putc",
            "print",
            "printf",
            "syscall",
            "EOFError",
            "IOError",
            "#<%s:%s%s>",
            " (closed)",
            "buffer string modified",
            "negative length %ld given",
            "file too big for single read",
            "Insecure: can't close",
            "closing non-duplex IO for reading",
            "closing non-duplex IO for writing",
            "sysseek for buffered IO",
            "syswrite for buffered IO",
            "sysread for buffered IO",
            "Insecure: can't reopen",
            "%s must have %s method, %s given",
            "$defout is obsolete; use $stdout instead",
            "$deferr is obsolete; use $stderr instead",
            "to_int",
            "reinitializing File",
            "%s::new() does not take block; use %s::open() instead",
            "getc is obsolete; use STDIN.getc instead",
            "return value overflowed string",
            "no stream to tell",
            "no stream to seek",
            "no stream to set position",
            "no stream to rewind",
            "no stream",
            "MINOR_VERSION",
            "MAJOR_VERSION",
            "restore",
            "dump",
            "_alloc",
            "_load_data",
            "_dump_data",
            "marshal_load",
            "marshal_dump",
            "Marshal",
            "instance of IO needed",
            "can't dump %s",
            "no marshal_dump is defined for class %s",
            "cannot dump hash with default proc",
            "singleton class can't be dumped",
            "_dump() must return string",
            "exceed depth limit",
            "%s cannot be referred",
            "can't dump anonymous %s %s",
            "%.*g",
            "-inf",
            "can't dump anonymous class %s",
            "singleton can't be dumped",
            "incompatible marshal file format (can't be read)",
            "\tformat version %d.%d required; %d.%d given",
            "incompatible marshal file format (can be read)",
            "\tformat version %d.%d required; %d.%d given",
            "marshal data too short",
            "class %s needs to have method `_load'",
            "dump format error(0x%x)",
            "class %s needs to have instance method `_load_data'",
            "dump format error",
            "define `allocate' instead of `_alloc'",
            "instance of %s needs to have method `marshal_load'",
            "struct %s not compatible (:%s for :%s)",
            "uninitialized struct",
            "dump format error (user class)",
            "singleton can't be loaded",
            "dump format error (unlinked)",
            "long too big for this architecture (size %d, given %d)",
            "bad symbol",
            "%s does not refer class",
            "%s does not refer module",
            "erfc",
            "hypot",
            "ldexp",
            "frexp",
            "sqrt",
            "log10",
            "atanh",
            "asinh",
            "acosh",
            "tanh",
            "sinh",
            "cosh",
            "atan",
            "asin",
            "acos",
            "atan2",
            "Math",
            "divided by 0",
            "coerce must return [x, y]",
            "%s can't be coerced into %s",
            "float %s out of range of integer",
            "%-.10g",
            "no implicit conversion from nil to integer",
            "integer %ld out of range of fixnum",
            "float %s out of range of long long",
            "no implicit conversion from string",
            "no implicit conversion from boolean",
            "no implicit conversion from nil",
            "finite?",
            "infinite?",
            "nan?",
            "EPSILON",
            "MAX_10_EXP",
            "MIN_10_EXP",
            "MAX_EXP",
            "MIN_EXP",
            "MANT_DIG",
            "RADIX",
            "ROUNDS",
            "to_sym",
            "id2name",
            "induced_from",
            "succ",
            "times",
            "downto",
            "upto",
            "step",
            "round",
            "ceil",
            "floor",
            "nonzero?",
            "integer?",
            "Numeric",
            "FloatDomainError",
            "ZeroDivisionError",
            "can't copy %s",
            "%#.14e",
            "%#.15g",
            "step cannot be 0",
            "%ld out of char range",
            "failed to convert %s into Integer",
            "failed to convert %s into Float",
            "Object#id will be deprecated; use Object#object_id",
            "Object#type is deprecated; use Object#class",
            "can't clone %s",
            "[bug] frozen object (%s) allocated",
            "can't dup %s",
            "initialize_copy should take same class object",
            "#<%s:0x%lx>",
            "class or module required",
            "Insecure: can't freeze object",
            "compared with non class/module",
            "wrong instance allocation",
            "can't create instance of virtual class",
            "can't instantiate uninitialized class",
            "%ld is not a symbol",
            "do not use Fixnums as Symbols",
            "%s is not a symbol",
            "empty symbol string",
            "%s#%s should return %s",
            "cannot convert %s into %s",
            "%s#%s should return Integer",
            "Float %s out of range",
            "Float()",
            "Float %*s out of range",
            "string for Float contains null byte",
            "cannot convert nil into Float",
            "invalid value for Float()",
            "no implicit conversion to float from nil",
            "no implicit conversion to float from string",
            "string contains \\0 character",
            "FALSE",
            "FalseClass",
            "TRUE",
            "TrueClass",
            "superclass",
            "remove_class_variable",
            "class_variables",
            "const_missing",
            "remove_const",
            "const_defined?",
            "const_set",
            "const_get",
            "private_instance_methods",
            "protected_instance_methods",
            "public_instance_methods",
            "instance_methods",
            "attr_accessor",
            "attr_writer",
            "attr_reader",
            "attr",
            "ancestors",
            "included_modules",
            "all_symbols",
            "NilClass",
            "format",
            "sprintf",
            "is_a?",
            "kind_of?",
            "instance_of?",
            "remove_instance_variable",
            "instance_variable_set",
            "instance_variable_get",
            "instance_variables",
            "public_methods",
            "private_methods",
            "protected_methods",
            "singleton_methods",
            "methods",
            "freeze",
            "untaint",
            "tainted?",
            "taint",
            "type",
            "object_id",
            "equal?",
            "nil?",
            "Kernel",
            "default `to_a' will be obsolete",
            "-<%s:0x%lx",
            "#<%s:0x%lx ...>",
            "treating Symbol as an integer",
            "Class:",
            "uninitialized class",
            "wrong constant name %s",
            "`%s' is not allowed as an instance variable name",
            "`!\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_",
            "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",
            "0123456789ABCDEF",
            "0123456789abcdef0123456789ABCDEFx",
            "          ",
            "too few arguments",
            "unpack",
            "pack",
            "'%c' allowed only after types %s",
            "cannot compress negative numbers",
            "pack(U): value out of range",
            "X outside of string",
            "too short buffer for P(%ld for %ld)",
            "%% is not supported",
            "format string modified",
            "@Xxu",
            "sSiIlL",
            "cannot convert %s to `integer'",
            "x outside of string",
            "non associated pointer",
            "no associated pointer",
            "@ outside of string",
            "redundant UTF-8 sequence",
            "malformed UTF-8 character (expected %d bytes, given %d bytes)",
            "malformed UTF-8 character",
            "888888888888888888888888888888888888888888888888888888888888888",
            "88$8",
            "8888",
            "8888888888888888",
            "\t88888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888",
            "~(unary)",
            "!(unary)",
            "-(unary)",
            "+(unary)",
            "-(binary)",
            "+(binary)",
            "alias",
            "while",
            "BEGIN",
            "__FILE__",
            "__LINE__",
            "begin",
            "when",
            "unless",
            "until",
            "defined?",
            "rescue",
            "elsif",
            "ensure",
            "case",
            "else",
            "none",
            "terms",
            "term",
            "trailer",
            "opt_nl",
            "opt_terms",
            "dot_or_colon",
            "operation3",
            "operation2",
            "operation",
            "assocs",
            "assoc_list",
            "singleton",
            "opt_f_block_arg",
            "f_block_arg",
            "blkarg_mark",
            "f_rest_arg",
            "restarg_mark",
            "f_optarg",
            "f_opt",
            "f_arg",
            "f_norm_arg",
            "f_args",
            "f_arglist",
            "backref",
            "var_lhs",
            "var_ref",
            "variable",
            "numeric",
            "dsym",
            "symbol",
            "string_dvar",
            "string_content",
            "xstring_contents",
            "string_contents",
            "qword_list",
            "qwords",
            "word",
            "word_list",
            "words",
            "regexp",
            "xstring",
            "string1",
            "string",
            "strings",
            "literal",
            "opt_ensure",
            "exc_var",
            "exc_list",
            "opt_rescue",
            "cases",
            "when_args",
            "case_body",
            "brace_block",
            "method_call",
            "block_call",
            "do_block",
            "opt_block_var",
            "block_var",
            "opt_else",
            "if_tail",
            "then",
            "primary_value",
            "primary",
            "mrhs",
            "opt_block_arg",
            "block_arg",
            "open_args",
            "command_args",
            "call_args2",
            "call_args",
            "opt_paren_args",
            "paren_args",
            "aref_args",
            "arg_value",
            "reswords",
            "undef_list",
            "fitem",
            "fname",
            "cpath",
            "cname",
            "mlhs_node",
            "mlhs_head",
            "mlhs_item",
            "mlhs_basic",
            "mlhs_entry",
            "mlhs",
            "command",
            "cmd_brace_block",
            "block_command",
            "command_call",
            "expr_value",
            "expr",
            "stmt",
            "stmts",
            "compstmt",
            "bodystmt",
            "program",
            "$accept",
            "'\\n'",
            "tLAST_TOKEN",
            "tUMINUS_NUM",
            "tLOWEST",
            "tSTRING_END",
            "tSTRING_DVAR",
            "tSTRING_DBEG",
            "tQWORDS_BEG",
            "tWORDS_BEG",
            "tREGEXP_BEG",
            "tXSTRING_BEG",
            "tSTRING_BEG",
            "tSYMBEG",
            "tAMPER",
            "tSTAR",
            "tLBRACE_ARG",
            "tLBRACE",
            "tLBRACK",
            "tRPAREN",
            "tLPAREN_ARG",
            "tLPAREN",
            "tASSOC",
            "tOP_ASGN",
            "tCOLON3",
            "tCOLON2",
            "tRSHFT",
            "tLSHFT",
            "tASET",
            "tAREF",
            "tDOT3",
            "tDOT2",
            "tNMATCH",
            "tMATCH",
            "tOROP",
            "tANDOP",
            "tLEQ",
            "tGEQ",
            "tNEQ",
            "tEQQ",
            "tCMP",
            "tPOW",
            "tUMINUS",
            "tUPLUS",
            "tREGEXP_END",
            "tBACK_REF",
            "tNTH_REF",
            "tSTRING_CONTENT",
            "tFLOAT",
            "tINTEGER",
            "tCVAR",
            "tCONSTANT",
            "tIVAR",
            "tGVAR",
            "tFID",
            "tIDENTIFIER",
            "k__FILE__",
            "k__LINE__",
            "klEND",
            "klBEGIN",
            "kDEFINED",
            "kALIAS",
            "kRESCUE_MOD",
            "kUNTIL_MOD",
            "kWHILE_MOD",
            "kUNLESS_MOD",
            "kIF_MOD",
            "kNOT",
            "kAND",
            "kFALSE",
            "kTRUE",
            "kNIL",
            "kSELF",
            "kSUPER",
            "kYIELD",
            "kRETURN",
            "kDO_BLOCK",
            "kDO_COND",
            "kRETRY",
            "kREDO",
            "kNEXT",
            "kBREAK",
            "kFOR",
            "kUNTIL",
            "kWHILE",
            "kWHEN",
            "kCASE",
            "kELSE",
            "kELSIF",
            "kTHEN",
            "kUNLESS",
            "kEND",
            "kENSURE",
            "kRESCUE",
            "kBEGIN",
            "kUNDEF",
            "kDEF",
            "kMODULE",
            "kCLASS",
            "$undefined",
            "error",
            "$end",
            "parser stack overflow",
            "can't define singleton method for literals",
            "can't define singleton method for ().",
            "block argument must be local variable",
            "duplicate block argument name",
            "rest argument must be local variable",
            "duplicate rest argument name",
            "duplicate optional argument name",
            "formal argument must be local variable",
            "duplicate argument name",
            "formal argument cannot be a class variable",
            "formal argument cannot be a global variable",
            "formal argument cannot be an instance variable",
            "formal argument cannot be a constant",
            "empty symbol literal",
            "module definition in method body",
            "class definition in method body",
            "(...) interpreted as grouped expression",
            "don't put space before argument parentheses",
            "parenthesize argument for future version",
            "parenthesize argument(s) for future version",
            "constant re-assignment",
            "class/module name must be CONSTANT",
            "dynamic constant assignment",
            "both block arg and actual block given",
            "END in method; use at_exit",
            "BEGIN in method",
            "can't make alias for the number variables",
            "else without rescue is useless",
            "Shifting error token, ",
            "Error: popping",
            "Error: discarding",
            "syntax error",
            "Shifting token %s, ",
            "Next token is",
            "Now at end of input.",
            "Reading a token: ",
            "Entering state %d",
            "Stack size increased to %lu",
            "Starting parse",
            "Stack now",
            "-> %s",
            "Reducing stack by rule %d (line %u), ",
            "nterm %s (",
            "token %s (",
            "SCRIPT_LINES__",
            "__END__",
            "embedded document meets end of file",
            "multibyte character literal not supported yet; use ?\\%.3o",
            "invalid character syntax; use ?\\%c",
            "incomplete character syntax",
            "`@@%c' is not allowed as a class variable name",
            "`@%c' is not allowed as an instance variable name",
            "trailing `%c' in number",
            "Illegal octal digit",
            "no .<digit> floating literal anymore; put 0 before dot",
            "unterminated quoted string meets end of file",
            "unknown type of %string",
            "numeric literal without digits",
            "`&' interpreted as argument prefix",
            "`*' interpreted as argument prefix",
            "Invalid char `\\%03o' in expression",
            "Invalid escape character syntax",
            "unterminated string meets end of file",
            "unknown regexp option%s - %s",
            "symbol cannot contain '\\0'",
            "unterminated here document identifier",
            "can't find string \"%s\" anywhere before EOF",
            "ambiguous first argument; put parentheses or even spaces",
            "statement not reached",
            "unused literal ignored",
            "identifier %s is not valid",
            "Can't assign to __LINE__",
            "Can't assign to __FILE__",
            "Can't assign to false",
            "Can't assign to true",
            "Can't assign to nil",
            "Can't change the value of self",
            "Can't set variable $%d",
            "Can't set variable $%c",
            "void value expression",
            "useless use of %s in void context",
            "a literal",
            "a constant",
            "a variable",
            "range literal in condition",
            "literal in condition",
            "string literal in condition",
            "regex literal in condition",
            "multiple assignment in conditional",
            "found = in conditional, should be ==",
            "integer literal in conditional range",
            "block argument should not be given",
            "chop!",
            "prec_f",
            "prec_i",
            "prec",
            "Precision",
            "undefined conversion from %s into %s",
            "wrong first argument",
            "Insecure PATH - %s",
            "issetugid",
            "setresgid",
            "setresuid",
            "setregid",
            "setreuid",
            "setegid",
            "seteuid",
            "setrgid",
            "setruid",
            "setgid",
            "setuid",
            "getegid",
            "getgid",
            "geteuid",
            "getuid",
            "switch",
            "sid_available?",
            "re_exchangeable?",
            "re_exchange",
            "eid=",
            "grant_privilege",
            "change_privilege",
            "stime",
            "cutime",
            "cstime",
            "maxgroups=",
            "maxgroups",
            "groups=",
            "groups",
            "initgroups",
            "egid=",
            "egid",
            "euid=",
            "euid",
            "gid=",
            "uid=",
            "setpriority",
            "getpriority",
            "setsid",
            "setpgid",
            "getpgid",
            "setpgrp",
            "getpgrp",
            "ppid",
            "coredump?",
            "exitstatus",
            "exited?",
            "termsig",
            "signaled?",
            "stopsig",
            "stopped?",
            "Status",
            "detach",
            "waitall",
            "waitpid2",
            "waitpid",
            "wait2",
            "wait",
            "Process",
            "system",
            "exit!",
            "exec",
            ",exited(%d)",
            ",signaled(%d)",
            ",signaled(SIG%s=%d)",
            ",stopped(%d)",
            ",stopped(SIG%s=%d)",
            "#<%s: pid=%ld",
            "can't handle UID during evaluating the block given to the Process::UID.switch method",
            "can't handle GID during evaluating the block given to the Process::UID.switch method",
            "rand",
            "srand",
            "bad value for range",
            "%ld..%s%ld out of range",
            "excl",
            "exclude_end?",
            "Range",
            "`initialize' called twice",
            "cannot iterate from %s",
            "step can't be 0",
            "step can't be negative",
            "uninitialized Regexp",
            "%s: %s",
            "\\%03o",
            "Stack overflow in regexp matcher",
            "wrong reg_kcode value (0x%x)",
            "SJIS",
            "UTF8",
            "NONE",
            "post_match",
            "pre_match",
            "captures",
            "offset",
            "MatchingData",
            "MULTILINE",
            "EXTENDED",
            "IGNORECASE",
            "kcode",
            "options",
            "casefold?",
            "source",
            "match",
            "last_match",
            "union",
            "escape",
            "quote",
            "compile",
            "$KCODE",
            "RegexpError",
            "sjis",
            "utf8",
            "unknown kcode - should not happen",
            "index %d out of matches",
            "flags%s ignored",
            " and encoding",
            "mixed kcode: %s and %s",
            "to_regexp",
            "(?!)",
            "wrong argument type",
            "modifying %s is deprecated",
            "unmatched (",
            "memory exhausted",
            "regular expression too big",
            "nested *?+ in regexp",
            "premature end of regular expression",
            "invalid regular expression; there's no previous pattern, to which '%c' would define cardinality at %d",
            "invalid regular expression",
            "invalid regular expression; range doesn't have ending ']' after a character class",
            "invalid regular expression; [:%s:] is not a character class",
            "invalid regular expression; re can't end '[[:'",
            "invalid regular expression; can't use character class as a start value of range",
            "invalid regular expression; empty character class",
            "invalid regular expression; can't use character class as an end value of range",
            "invalid regular expression; '[' can't be the last character ie. can't start range at the end of pattern",
            "invalid regular expression; '\\' can't be last character",
            "too big quantifier in {,}",
            "can't do {n,m} with n > m",
            "invalid regular expression; '{' can't be last character",
            "invalid regular expression; there's no previous pattern, to which '{' would define cardinality at %d",
            "undefined (?...) inline option",
            "undefined (?...) sequence",
            "unmatched )",
            "xdigit",
            "upper",
            "space",
            "punct",
            "lower",
            "graph",
            "digit",
            "cntrl",
            "blank",
            "alpha",
            "alnum",
            "character class has `[' without escape",
            "character class has `-' without escape",
            "character class has `]' without escape",
            "regexp has invalid interval",
            "regexp has `}' without escape",
            "regexp has `]' without escape",
            "--version       print the version",
            "--copyright     print the copyright",
            "-x[directory]   strip off text before #!ruby line and perhaps cd to directory",
            "-W[level]       set warning level; 0=silence, 1=medium, 2=verbose (default)",
            "-w              turn warnings on for your script",
            "-v              print version number, then turn on verbose mode",
            "-T[level]       turn on tainting checks",
            "-S              look for the script using PATH environment variable",
            "-s              enable some switch parsing for switches after script name",
            "-rlibrary       require the library, before executing your script",
            "-p              assume loop like -n but print line also like sed",
            "-n              assume 'while gets(); ... end' loop around your script",
            "-l              enable line ending processing",
            "-Kkcode         specifies KANJI (Japanese) code-set",
            "-Idirectory     specify $LOAD_PATH directory (may be used more than once)",
            "-i[extension]   edit ARGV files in place (make backup if extension supplied)",
            "-Fpattern       split() pattern for autosplit (-a)",
            "-e 'command'    one line of script. Several -e's allowed. Omit [programfile]",
            "-d              set debugging flags (set $DEBUG to true)",
            "-Cdirectory     cd to directory, before executing your script",
            "-c              check syntax only",
            "-a              autosplit mode with -n or -p (splits $_ into $F)",
            "-0[octal]       specify record separator (\\0, if no argument)",
            "malformed RUBYLIB_PREFIX",
            "RUBYLIB_PREFIX",
            "/lib/ruby/1.8/i386-mswin32",
            "/lib/ruby/1.8",
            "/lib/ruby/site_ruby",
            "/lib/ruby/site_ruby/1.8/i386-msvcrt",
            "/lib/ruby/site_ruby/1.8",
            "RUBYLIB",
            "/bin",
            "DATA",
            "Can't exec %s",
            "No Ruby script found in input",
            "ruby",
            "RUBYPATH",
            "Illegal switch in RUBYOPT: -%c",
            "IdvwrK",
            "%s: invalid option -%c  (-h will show valid options)",
            "%s: no code specified for -e",
            "Can't chdir",
            "Can't chdir to %s",
            "%s: invalid option --%s  (-h will show valid options)",
            "help",
            "RUBYOPT",
            "yydebug",
            "verbose",
            "version",
            "debug",
            "copyright",
            "  %s",
            "Usage: %s [switches] [--] [programfile] [arguments]",
            "program input from stdin",
            "No %s allowed in tainted mode",
            "No %s allowed while running setgid",
            "No %s allowed while running setuid",
            "ARGV",
            "$PROGRAM_NAME",
            "$DEBUG",
            "$VERBOSE",
            "$0 not initialized",
            "Syntax OK",
            "TERM",
            "SEGV",
            "KILL",
            "ABRT",
            "unsupported name `SIG%s'",
            "bad signal",
            "bad signal type %s",
            "wrong number of arguments -- kill(sig, pid...)",
            "trap",
            "Signal",
            "trap_handler: Bad signal %d",
            "Segmentation fault",
            "wrong number of arguments -- trap(sig, cmd)/trap(sig){...}",
            "Insecure: tainted signal trap",
            "invalid signal number (%d)",
            "unsupported signal SIG%s",
            "EXIT",
            "IGNORE",
            "DEFAULT",
            "SIG_DFL",
            "SIG_IGN",
            "too many arguments for format string",
            "malformed format string",
            "malformed format string - %%%c",
            "malformed format string - %%.[0-9]",
            "precision given twice",
            "value given twice - %d$",
            "malformed format string - %%[0-9]",
            "illegal format character - %%",
            "unnumbered(%d) mixed with numbered",
            "invalid index - %d$",
            "numbered(%d) after unnumbered(%d)",
            "malformed format string - %%*[0-9]",
            "width given twice",
            "negative number for %%u specifier",
            "%%l%c",
            "too few arguments.",
            "negative string size (or size too big)",
            "NULL pointer given",
            "Insecure: can't modify string",
            "can't modify string; temporarily locked",
            "string contains null byte",
            "temporal locking already locked string",
            "temporal unlocking already unlocked string",
            "index %ld out of string",
            "negative length %ld",
            "%03o",
            "interning empty string",
            "symbol string may not contain `\\0'",
            "value of %s must be String",
            "squeeze!",
            "delete!",
            "tr_s!",
            "count",
            "squeeze",
            "tr_s",
            "rstrip!",
            "lstrip!",
            "strip!",
            "chomp!",
            "gsub!",
            "sub!",
            "rstrip",
            "lstrip",
            "strip",
            "chomp",
            "chop",
            "center",
            "rjust",
            "ljust",
            "scan",
            "intern",
            "crypt",
            "swapcase!",
            "capitalize!",
            "downcase!",
            "upcase!",
            "swapcase",
            "capitalize",
            "downcase",
            "upcase",
            "next!",
            "succ!",
            "casecmp",
            "type mismatch: %s given",
            "type mismatch: String given",
            "regexp group %d not matched",
            "index %d out of regexp",
            "regexp not matched",
            "string not matched",
            "string modified",
            "string frozen",
            "block should not cheat",
            "$_ value need to be String (%s given)",
            "salt too short(need >=2 bytes)",
            "zero width padding",
            "non-initialized struct",
            "__members__",
            "struct size differs (%d required %d given)",
            "%s is not struct member",
            "members",
            "__size__",
            "redefining constant Struct::%s",
            "identifier %s needs to be constant",
            "`%s' is not a struct member",
            "Insecure: can't modify Struct",
            "offset %ld too large for struct(size:%ld)",
            "offset %ld too small for struct(size:%ld)",
            "no member '%s' in struct",
            "struct size differs",
            "#<struct %s:...>",
            "#<struct ",
            "inconsistent struct",
            "time must be positive",
            "out of Time range",
            "%f out of Time range",
            "%s must be positive",
            "can't convert %s into %s",
            "time",
            "time interval",
            "strftime",
            "usec",
            "tv_usec",
            "tv_sec",
            "gmt?",
            "utc?",
            "utc_offset",
            "gmt_offset",
            "gmtoff",
            "zone",
            "dst?",
            "isdst",
            "yday",
            "wday",
            "year",
            "month",
            "mday",
            "hour",
            "asctime",
            "getutc",
            "getgm",
            "getlocal",
            "gmtime",
            "localtime",
            "mktime",
            "local",
            "Time",
            "gettimeofday",
            "Insecure: can't modify Time",
            "argument out of range",
            "2 or 3 digits year is used",
            "2 digits year is used",
            "time out of range",
            "gmtime/localtime error",
            "localtime error",
            "gmtime error",
            "%a %b %d %H:%M:%S %Z %Y",
            "%a %b %d %H:%M:%S UTC %Y",
            "time + time?",
            "time + %f out of Time range",
            "time - %f out of Time range",
            "time %s %f out of Time range",
            "strftime called with empty format string",
            "obsolete method Time::times; use Process::times",
            "year too big to marshal",
            "marshaled time format differ",
            "0123456789abcdef0123456789ABCDEF",
            ".$$$",
            ".~~~",
            "7yAC",
            "O8M2",
            "0HwZ<s",
            "uCannot do inplace edit on long filename (%ld characters)",
            "getcwd",
            "__tmp_classpath__",
            "__autoload__",
            "class path is not set properly",
            "%s does not refer class/module",
            "undefined class/module %.*s",
            "can't retrieve anonymous class %s",
            "global variable `%s' not initialized",
            "%s is a read-only variable",
            "Insecure: tainted variable trace",
            "undefined global variable %s",
            "Insecure: can't change global variable value",
            "&`'+123456789",
            "can't alias in tracer",
            "Insecure: can't alias global variable",
            "instance variable %s not initialized",
            "Insecure: can't modify instance variable",
            "instance variable %s not defined",
            "uninitialized constant %s",
            "uninitialized constant %s::%s",
            "empty file name",
            "autoload must be constant name",
            "wrong autoload table: %s",
            "toplevel constant %s referenced by %s::%s",
            "constant %s::%s not defined",
            "cannot remove %s::%s",
            "Insecure: can't remove constant",
            "`%s' is not allowed as a constant name",
            "already initialized %s %s",
            "Insecure: can't set %s",
            "rb_define_const: invalide name `%s' for constant",
            "already initialized class variable %s",
            "Insecure: can't modify class variable",
            "class variable %s of %s is overridden by %s",
            "uninitialized class variable %s in %s",
            "wrong class variable name %s",
            "class variable %s not defined for %s",
            "cannot remove %s for %s",
            "Insecure: can't remove class variable",
            "PLATFORM",
            "RELEASE_DATE",
            "VERSION",
            "RUBY_PLATFORM",
            "RUBY_RELEASE_DATE",
            "RUBY_VERSION",
            "ruby %s (%s) [%s]",
            "1.8.2",
            "2004-12-25",
            "i386-mswin32",
            "ruby - Copyright (C) 1993-%d Yukihiro Matsumoto",
            "3333333333333333333",
            "{{{{{{{{{{{{{{{{{{s",
            "{{{{{{{{{{{{{{{{{{{s",
            "{{{{{{{{{{{{{{{{{{{p",
            "{{{{{{{{{{{{{{{{{{{p",
            "{{{{{{{{{{{{{{{{{{{",
            "{{{{{{{{{{{{{{{{{{{w",
            "{{{{{{{{{{{{{{{{{{{x",
            "{{{{{{{{{{{{{{{{{{{p",
            "{{{{{{{{{{{{{{{{{{{s",
            "{{{{{{{{{{{{{{{{{{{w",
            "{{{{{{{{{{{{{{{{{{{x",
            "wwwwwwwwwwwwwwwwww{s",
            "{{{{{{{{{{{{{{{{{{s",
            "{{{{{{{{{{{{{{{{{{s",
            "{{{{{{{{{{{{{{{{{{s",
            "{{{{{{{{{{",
            "{{{{{{{{",
            "33333333333330",
            "{{{{{{{{{{{{{0",
            "{{{{{{{{{{{{w",
            "{{{{{{{{{{{{x",
            "{{{{{{{{{{{{{p0",
            "{{{{{{{{{{{{{0",
            "0{{{{{{{{{{{{{",
            "0{{{{{{{{{{{{x",
            "wwwwwwwwwwww0",
            "{{{{{{{{{{{{0",
            "{{{{{{{{{{{{0",
            "{{{{{{x",
            "{{{{x",
            "{{{{p",
            "{{{{{",
            "{{{{",
            "leK0",
            "ooooooT8",
            "3`sssssssss^A$",
            "vvvvvvvvvvvvvhJ4",
            "~\"yyyyyyyyyyyyyyyyyrT=",
            "1p}}}}}}}}}}}}}}}}}}}}}_G'",
            "$G\"f",
            "\t&B:0f>",
            "H'HH",
            "H(NN,f-",
            "I3TTJ@f",
            "KU\\\\\\",
            "]Wbbb+f|",
            "YfffSPf",
            "\\kkkk",
            "ppppM",
            "vvvvvgC-",
            "@`fT",
            "||||||||||mV?'",
            "\u01e8n\tf",
            "n\\J.%",
            " @p_",
            "\u02a1 @`",
            "{ng`",
            "}wwwwwwwwwwwwwwwwwuphc",
            "xZYYYYYYYYYYYYYYYYYYYYYXme\\",
            "d{SSSSSSSSSSSSSSSSSSSSSSSSs",
            "\u0748~NLLLLLLLLLLLLLLLLLLLLLLLLOo",
            "\u0691CDDDDDDDDDDDDDDDDDDDDDDDD5]",
            "\u019aFAAAAAAAAAAAAAAAAAAAAAAA\tP",
            "\u0645><<<<<<<<<<<<<<<<<<<<<<<",
            "C66666666666666666666666",
            "l0//////////////////////",
            "\u0321x}$",
            "YYYYYYYYYYtpie`",
            "[SSSSSSSSSSSSSSSRay",
            "!!!!!!r",
            "[DDDDDDDDDDDDDDDDK\\y%C#\"",
            "$$$$$$|",
            "E<<<<<<<<<<<<<<<<<@^l}'''&&%%%k",
            "=7777777777777777777;?JQVUl}~",
            "odlx",
            "B>1+",
            "H|B9,*",
            "dl}~",
            "gmS7",
            ";{rrrr]A$",
            "LvvvvvvvvhJ-",
            "yp||||||||||||tV7",
            "y$nO",
            "0\u01c0;o",
            "1\u0249M>pB",
            "*V0r",
            "+_Ms>",
            "Yff\\u",
            "]mm7y)",
            "\t`tttJ-^`|",
            "Hd~~~~~~~gW@h",
            "Htmh",
            "Iu.e`",
            "|HTy;",
            ";Ek4",
            "\u02a1RCp",
            "\u048c|us{",
            "\u04a5\u0630}wZxo",
            "\u04a6g_[vh",
            "mYVVVVVVVVVVVVUia]t",
            "zIIIIIIIIIIIIIIIIj^",
            "\u053arGFFFFFFFFFFFFFFFD",
            "\u0124B===============&e",
            "\u01b7~8222222222222222",
            "\u02380..............",
            "XWWWWWWWSRck\"",
            "JEEEEEEEEEEHl ",
            ">:::::::::::@NTq$#\"L{",
            "/%%%%%%%%%%%%%%%-9?\\`mq",
            ";;1(",
            "C\u035265*",
            "<7+)",
            "nnnnnnnn:",
            "$f&zzzzzzzzC",
            "'f,M",
            ")f2V",
            ",n3_",
            "u0,,,,,,'#",
            "320.",
            "*************",
            ")))))))))",
            ")))))",
            "\"))))",
            "VVVU]t",
            "00000",
            "X00(",
            "00000g0O",
            "YL0zv",
            "uW0~0W0_0",
            "s0}o0",
            "0g0Y0",
            "000(",
            "00000(",
            "0000000(",
            "EXERB",
            "kakikomukun.rb",
            "zlib.dllz",
            "date/format.rb",
            "digest.so",
            "digest/md5.so",
            "kconv.rb",
            "monitor.rb",
            "net/ftp.rb",
            "net/http.rb",
            "net/protocol.rb",
            "nkf.so",
            "parsedate.rb",
            "rational.rb",
            "socket.so",
            "stringio.so",
            "thread.rb",
            "time.rb",
            "timeout.rb",
            "uri.rb",
            "uri/common.rb",
            "uri/ftp.rb",
            "uri/generic.rb",
            "uri/http.rb",
            "uri/https.rb",
            "uri/ldap.rb",
            "uri/mailto.rb",
            "web/agent.rb",
            "web/agent/cookiemanager.rb",
            "web/agent/passwordmanager.rb",
            "web/common.rb",
            "web/cookie.rb",
            "web/escape.rb",
            "web/request.rb",
            "web/response.rb",
            "zlib.so",
            "$KCODE = 's'",
            "def dll(file)",
            "  if ENV['OS']",
            "    path = \"#{ENV['WinDir']}\\\\system32\\\\\"",
            "  else",
            "    path = \"#ENV['WinDir']}\\\\system\\\\\"",
            "  end",
            "  if !File.exist?(path + file.chop)",
            "    f = Exerb.open(file)",
            "    f.binmode",
            "    open(path + file.chop, 'w'){|f2|",
            "      f2.binmode",
            "      f.read 9",
            "      f2.write(f.read)",
            "    }",
            "    f.close",
            "  end",
            "def get_thread_name_jbbs category, bbs",
            "  agent = Web::Agent.new",
            "  agent.setup",
            "  agent.req.header['User-Agent'] = 'Mozilla/5.0 (Windows; U; Windows NT 5.1; ja; rv:1.8) Gecko/20051111 Firefox/1.5'",
            "  agent.req.header['Referer'] = \"http://jbbs.livedoor.jp/#{category}/#{bbs}/\"",
            "  agent.get(\"http://jbbs.livedoor.jp/#{category}/#{bbs}/subject.txt\")",
            "  threads = []",
            "  agent.rsp.body.tosjis.split(\"\\n\")[0].match(/^\\d+\\.cgi,(.+)\\(\\d+\\)$/)[1]",
            "def get_threads_jbbs category, bbs",
            "  agent = Web::Agent.new",
            "  agent.setup",
            "  agent.req.header['User-Agent'] = 'Mozilla/5.0 (Windows; U; Windows NT 5.1; ja; rv:1.8) Gecko/20051111 Firefox/1.5'",
            "  agent.req.header['Referer'] = \"http://jbbs.livedoor.jp/#{category}/#{bbs}/\"",
            "  agent.get(\"http://jbbs.livedoor.jp/#{category}/#{bbs}/subject.txt\")",
            "  threads = []",
            "  #print agent.rsp.body.tosjis",
            "  agent.rsp.body.tosjis.split(\"\\n\").each{|x|",
            "    reg = x.match(/^(\\d+).+\\((\\d+)\\)$/)",
            "    threads.push(reg[1]) if reg and !reg[2].match(/10000?/)",
            "  threads",
            "def kakikomi_jbbs category, bbs, key, name, mail, message, proxy_host = nil, proxy_port = nil",
            "  agent = Web::Agent.new",
            "  agent.setup",
            "  agent.proxy_host = proxy_host",
            "  agent.proxy_port = proxy_port",
            "  agent.req.header['User-Agent'] = 'Mozilla/5.0 (Windows; U; Windows NT 5.1; ja; rv:1.8) Gecko/20051111 Firefox/1.5'",
            "  agent.req.header['content-type'] = 'application/x-www-form-urlencoded'",
            "  agent.req.header['Referer'] = \"http://jbbs.livedoor.jp/#{category}/#{bbs}/\"",
            "  agent.req.form.add 'NAME', name.toeuc",
            "  agent.req.form.add 'MAIL', mail.toeuc",
            "  agent.req.form.add 'MESSAGE', message.toeuc",
            "  agent.req.form.add 'DIR', category.to_s",
            "  agent.req.form.add 'BBS', bbs.to_s",
            "  agent.req.form.add 'KEY', key.to_s",
            "  agent.req.form.add 'TIME', Time.now.to_i.to_s",
            "  agent.req.form.add 'SUBMIT', ''.toeuc",
            "  agent.post(\"http://jbbs.livedoor.jp/bbs/write.cgi/#{category}/#{bbs}/#{key}\")",
            "  agent.rsp.body.tosjis",
            "def rnd arr",
            "  arr[rand(arr.size)]",
            "dll('zlib.dllz')",
            "require 'web/agent'",
            "require 'kconv'",
            "word = %w(zeny bot kore roaddr [ rxv ini pP config controll M2E xxxx moemoe \u0702 ^C}[ nProtect nPro RoFX FX)",
            "begin",
            "while 1",
            "  thre =  get_threads_jbbs 'computer', '6135'",
            "  count = 0",
            "  while count < 300",
            "    mes = ''",
            "    for i in (0..rand(8))",
            "      mes += rnd(word)",
            "    end",
            "    kakikomi_jbbs 'computer', '6135', rnd(thre), '', rnd(word), mes",
            "    count += 1",
            "    sleep 15",
            "  end",
            "rescue",
            "retry",
            "__END__",
            "L!This program cannot be run in DOS mode.",
            "}g[}",
            "}Rich",
            ".text",
            "`.rdata",
            "@.data",
            ".rsrc",
            "@.reloc",
            "^S\\$",
            "Hu3\u04b9",
            "^\u03038L$HT$<D$DS\\$Dj8L$",
            "L$ThX",
            "RD$$D$4",
            "uIVD$",
            "^[8\u030bD$",
            "jPD$",
            "QRP5",
            "QSVt&",
            "3ANu\u07c3 UW",
            "3\u054b\u0609D$",
            "3\u014b\u0689T$",
            "3\u054b\u0609D$",
            "3\u0149T$",
            "3\u014b,`",
            "3\u0149T$",
            "3\u0549D$",
            "3\u054b,`",
            "33<`",
            "Ju_]t\"",
            "3ANu^[Y\u030bL$",
            "SUVW|$",
            "@0WVPvL$ ",
            "S0KPkdkT",
            "3#CLC@3\u048du{@KPC0",
            "k,KL3#K<C@f",
            "A#k8fD}",
            "K@C<f",
            "HB;v_^]3[_^][\u030bD$",
            "t'\u044bL$",
            "u\tRI",
            "\u0445tNv",
            "^S\\$",
            "*N W",
            "\u020bF|\tu",
            "~|;|",
            "\u020bFdt",
            "K2yK0",
            "u3F _^]3[",
            "_^]S",
            "u[;u",
            "u&VDF<fDP",
            "ND~<L\t",
            "3#xC",
            "K2K0",
            "_^3]",
            "\t_F ^]3[",
            "^][Vt$",
            "PF(PV$",
            "V(PRV$",
            "N(PQV$",
            "PF(PV$",
            "V(QRV$",
            "^UVt$",
            "PU \u0603",
            "+U(QRU C0C$M(j",
            "PQU SDj",
            "C8E(RPU ",
            "C<U(QRU {00C",
            "K$T$",
            "r8K${8",
            "r<KD{<",
            "[^3]U",
            "_[^]^]\u030bC",
            "3]+\u0149C",
            "S0UQR",
            "K0UPQ",
            "C0V3W|$",
            "]\u030bB$JDB4B<SV3ftHJDL\tWz<",
            "_BtrdrTrl",
            "r`r@^BpBX[\u0303",
            "NtVdSUnpW",
            "N0|$",
            "T)T$",
            "Vl9T$",
            "V0\\$",
            ";r+\u05c1",
            "Fh}+\\",
            "V,#\u040bF8",
            "P;D$",
            "\u030bN0FdS",
            "@A:uXP",
            "@A:uLP",
            "@A:u@P",
            "@A:u4P",
            "@A:u(P",
            "@A:u",
            "@A:u",
            "@A:u",
            "Nl;nhv",
            "_][SUl$",
            "E$VWD$",
            "Ul]4Md+\u068bU$",
            "+;ro}0\u020b",
            "uhUdMT+++\u0209uhuDMTM<Ud",
            "t_MlUd}0",
            "Mlr EdM04",
            "MPE@",
            "3#ELE@",
            "\t_^][QS\\$",
            "VWD$",
            "KdKTSdCl",
            "+\u0405\u0249SlCd|",
            "+PRS{k",
            "\u0445tJv",
            "STKdC$+-",
            "QPSj",
            "\u0445tJv",
            "_^]3[Y",
            "tsT|",
            "3Sd3\u0243",
            "+QRPS,j",
            "CdCT",
            "_^][H",
            "_^][D",
            "YQSUl$",
            "VW3|$",
            "s#UEl",
            "rOE@MPUdu,M0",
            "3#ELM<E@f",
            "A#U8f",
            "rE,MdU8#",
            "<JE@M<fUd|$",
            "At@EdM$+\u01c1",
            "EXEX",
            "fEdf+Eh",
            "Ml3J;Ux",
            "EX+;",
            "Mlwj",
            "reHEXUdM0}@BUd",
            "MPM<3#EL},E@f",
            "A#U8f",
            "zU,MdE@#\u028bU8",
            "<JM<fUdf",
            "AEXH|$",
            "UdM0",
            "MPEX",
            "ML3#E@XEdM0",
            "MlEd",
            "3Udj",
            "+RPU;g",
            "EdETE",
            "\u0445tNv",
            "_^]3[Y",
            "RUd+RPUf",
            "EdETE",
            "_^][H",
            "_^][D",
            "YSUVt$",
            "s'V Fl|$",
            "rMF@NPVdnL~,N0",
            "3N<#\u0149F@f",
            "A#V8f",
            "zF,NdV8#",
            ",JF@N<fVdf",
            "AFXNh",
            "FpN\\~Xti;VxsbFdN$+\u0141",
            ";}\t;",
            "FXFX",
            "Vd+Vh",
            "~XFp",
            "NlFd",
            "Np3fFdf+F\\",
            "FpVl",
            "\u0443VlFpNdA;\u05c9NdwHF@NPn,N0",
            "3#FLN<F@f",
            "A#V8f",
            "jF,NdV8#",
            ",JF@N<fVdf",
            "ANpuNdAF`",
            "+QPVc",
            "FdFT",
            "_^]3[",
            "VdF0D",
            "I;u/NT|",
            "3Vdj",
            "+RPV8c",
            "FdFT",
            "VdNlBIVdNlINdFlAHF`",
            "NdFlF`tLVdF0D",
            "RVd+RPVb",
            "FdFT",
            "_^][H",
            "_^][D",
            "SVW|$",
            "3;t{w",
            ";tt9_ to9_$tj_",
            "G0V^ [",
            "_^3[_^[VW|$",
            ";UT$",
            "*n >F ",
            "\u020bF|\tu",
            ";}!F|;|",
            "\u020bFdt",
            "O2O0",
            "u,F 3",
            "tNF|j",
            "9N|][t5N|L$",
            "NtT$",
            "^_^\u030bD$",
            "|$$8",
            "_]9W W",
            "W(9W$u",
            "D$$;",
            "G(Vh",
            "^(\\$$",
            "MN,K",
            "FDHFL>n$VPW(URW F0F$O(j",
            "PQW VDj",
            "F8G(RPW F<K",
            "O(PQW ",
            "V00\u0489F",
            "tMV8tFV<t?t;",
            "T$(W",
            "^[_]F",
            "^[_][_]",
            "]\u030bD$",
            "RP Vt$",
            "tR~\\wuLF",
            "u0N@FHQh",
            "^\u030bF<t",
            "F@NDPh",
            "V@F<",
            "sft\t",
            "F@PFD",
            "_FX^",
            "cOuN<",
            "[_N8^[_F8^_FX",
            "^S3\u06c5u",
            "FPW=",
            "F\\<wu",
            "\u060bF@t",
            "\u060bFDt",
            "_[\u030bL$",
            "tBy\\ru<D$",
            "t3ylu-QhJWy8Qh3\u0483",
            "Al_\u0489Qpt",
            "t~W=L",
            "u!N@FHQh",
            "VNhN",
            "Vd+\u044bNhVdV",
            "F8Nhu",
            "F8_D$",
            "NLSPQjN",
            "FL[+^",
            "PQT$",
            "QRD$",
            "@u+PD$",
            "^SV3\u06c5",
            "+t%F@NHPWj",
            ";u{VHV",
            "uZNhF",
            "\u0209NhL$",
            "QVU^hN",
            "F8^hu",
            "qv8H",
            "_#^[",
            "_F8^[^[\u030bD$",
            "#^Vt$",
            "W3;tT~\\ruNFDWWW~8~<Fl~",
            "!FLFX",
            ";u\tV",
            "N`V@WQR~d~h",
            "_^_^\u030bD$",
            "t!x\\ru",
            "P83\u0243",
            "Ou_^][VW",
            "_^Vt$",
            "~\\wu+j",
            "F@PFL^N@FdQR",
            "^Ul$",
            "E8L$",
            "@u+\u018dL",
            "EPu\t",
            "@uW}POG",
            "@u}P+OO",
            "EP_^[]\u030bD$",
            "H8H<@@D$",
            "\u0303XSL$",
            "U3\u06c9L$",
            "L$d;W\\$",
            "SSS^ ^$^(^D",
            "^@^8^<^d^hnlIFLD$x",
            "^P^XP",
            "@:u+@P",
            "@:u^\\r8",
            "05<fu",
            "'<hu",
            "T$h;uF\\:t;<wuFD$",
            "j8hX",
            "$;FHF",
            ";u:*^_]3[Xh",
            "j8hX",
            "jVFD",
            "u9^DtF",
            "D$p;",
            "T$pR",
            "F@t~\\wu1j",
            "SSSSSSj",
            "^_][X",
            "+F`^_][X_]3[X\u030bD$",
            "jPD$",
            "D$,L$",
            "3]YSVW|$ D$",
            "t?Ml;t8",
            "Mh@CND$",
            "EpA]",
            "UlMht",
            "_^[E8",
            "uDE<u=",
            "U@EDRh",
            "M@E<",
            "\u0209MdM",
            "UUh,",
            "Md+\u028bUhMdM",
            "E8Uhu]D$",
            "+RPELPM",
            "#;ELuV",
            "ELE8",
            "++\u0209u",
            "M@T$",
            "UdMh+",
            "\u03c5UdMhu",
            "_^[]YE8D$",
            "UL+QPRM",
            "EL_^[+]Y",
            "]YQL$",
            "YUVt$",
            "WtB|$",
            "~:S\\$",
            "_^]_^3]Vt$",
            "~\\wWutS\\$",
            "+^d}",
            "FDu h",
            "~Dt\u06f9",
            "PFDPV",
            "\u074bFd[_^",
            "FXt2V@NDj",
            "WRFlF",
            "|\u0309~h~d_^",
            "Fh;|",
            "|trFHu",
            "FHt~lt",
            "VhFpBOFlVht",
            "PFHPVJ",
            "\u064bFh_^",
            "^\u030bD$",
            "UVt$",
            ";Wtul$",
            ";tm|$",
            "_9^ ^",
            "^(9^$u",
            "_^][",
            "_^h,X(X$]P 3[_^][",
            "[\u030bD$",
            " 3;S",
            ";VWL$",
            "3C,K D$ ",
            "sH|$<u",
            "QWT$@",
            "ws$$R",
            "D$4@",
            "+ T$",
            "sH|$<u",
            "QWT$@",
            "@ t$",
            "r\u044b\u028b%",
            "D$4@",
            "33C8T$",
            "K8|$",
            "L$$u",
            "D$<T$",
            "RPT$@",
            "u'{ C,L$DWPQD$,|$({$T$L",
            "9t$$v",
            "t$$9|$$v",
            "|$$D$$t$",
            "|$ \u020b",
            "\u028bT$ ",
            "K8++",
            "T$ K8",
            "|$<sHu",
            "PWT$@",
            "CTCXA",
            "K\\T$",
            "CTC`",
            "QWT$@",
            "r\u044bK`",
            "fDKhC`@C`;CTrK`",
            ";s 3\u0250S`",
            "fLSh{`G;\u0409{`r\u3343(",
            "CDCLPQj",
            "{hWj",
            "D$4T$",
            "KXC`",
            "KDH#",
            ";\u0349D$(ve|$<u",
            "RWT$@",
            "J#\u040bCD",
            ";\u0349D$(wT$",
            "su;sN$",
            "D$<T$",
            "RPT$@",
            "@;t$",
            "r\u044bC`fL$*fLChC`+@T$",
            "D$<T$",
            "RPT$@",
            "@;t$",
            "r\u044bL$$C`+T$",
            "DCfD$$",
            ";sJu",
            "T$<L$",
            "QRT$@",
            ";sLu",
            "D$<T$",
            "RPT$@",
            "+D$$",
            "{XK\\",
            "{`fL{h{`GH{`uC\\{XK`",
            "L$4A",
            "T$4B",
            "QCLP",
            "CXWPChPj",
            "L$4T$",
            "QKXCPP",
            "C\\WSHPTKhRj",
            "D$4@",
            "rx|$4D$ G",
            "C S09C$k4s",
            "+\u0449S$PWR",
            "k4D$(C0",
            "L$4A",
            "KDH#",
            ";\u0349D$(vg|$<u",
            "RWT$@",
            "KDT$",
            ";\u0549D$(wT$",
            "|$%H#L$(",
            ";\u0349D$(vwu",
            "D$<T$",
            "RPT$@",
            "3\u024aL$$BT$",
            "D$&KD",
            ";\u0549D$(wT$",
            "K8uUD$",
            "u+C K,T$DPQRL$,D$(C$T$L",
            "|$ C8",
            "GH|$ D$",
            "L$4A",
            "C@to;sN|$<",
            "RWT$@",
            ";k@t$",
            "r\u044bK@{8",
            "{8+T$",
            "KHH#",
            ";\u0349D$(vdu",
            "D$<T$",
            "RPT$@",
            "J#\u040bCH",
            ";\u0349D$(wT$",
            "|$%H#L$(",
            ";\u0349D$(vwu",
            "D$<T$",
            "RPT$@",
            "3\u024aL$$BT$",
            "D$&KH",
            ";\u0549D$(wT$",
            "+@T$",
            "D$4@",
            "K<C@ti;sH|$<u",
            "RWT$@",
            ";k@t$",
            "r\u044bK@{<",
            "{<+T$",
            "C K$|$",
            "#+9C<v",
            "D$4@",
            "u+C K,PQL$(L$LQD$(C$T$L",
            "C<K |$",
            "D$ <",
            "|$ +D$",
            "K8;|$$v",
            "+\u0209K8)D$",
            "G|$ |$$GH|$$uC8",
            "D$4L$",
            "_^][ D$",
            "\u068bC L$",
            "s\u028bS,+PD$HRPT$L",
            "t\ubb3f\ub978[ ",
            "QN(Q\u0403",
            "^\u0303<SUVWD$P",
            "\\$TJL",
            "L$0p",
            "\u0389D$4E$L$DM D$HE,]4L$(M(D$,EHL$",
            "MDD$$L$ ML",
            "MP}0HD$8",
            "HD$<",
            "L$8D$ #\u03cb",
            "+\u0645tB",
            "L$T\u020bD$TL$",
            "+\u0645uD$",
            "L$Tt6;s",
            "L$TM#",
            "L$T+\u0603",
            "L$<D$$#\u03cb",
            "L$@\u020bD$@L$",
            ";\u0609L$",
            "+M#\u034bl$",
            "L$D+;l$",
            "+;l$H",
            "L$,D$",
            "Iu*D$(+",
            "\u020bD$T;",
            "+\u0149D$Td$",
            "us;sS+",
            "D$T;sc+\u0149D$T",
            "uL$,D$",
            "l$TI;s<+l$TD$@A",
            "\u020bD$T;s",
            "+\u0149D$TA",
            "+\u020bD$T",
            "v7PEA",
            "T$TA",
            "T$Tu\u074bT$",
            "D$Tt^A",
            "H+\u014d$",
            "L$Tw\u06c5t",
            ";T$0sQ;t$4",
            "EL$PD$",
            ",L$PA",
            " t\tE",
            "D$P@",
            "++\u064b\u02f8",
            "L$PH#B",
            "D$0+",
            "D$4+",
            "}0_^]4][<\u030bT$",
            "3;t9B",
            ";t2H",
            "H H$H0H4(",
            "HdHHHD3",
            "9~ ~",
            "~(9~$u",
            "^_PF(PV$",
            "_\u030bD$",
            "SUl$",
            "VWC,3;u(K",
            "PQU ",
            ";\u01c9C,u",
            "[9{ u",
            "{({$S }",
            "K +;r*u",
            "K _^]C(",
            "K$3[+K(;\u0209L$",
            "S({,u",
            "+t(u",
            "{,\u020b+",
            "_C(C ^C$]3[",
            "{(C ",
            ";\u0409{(u",
            "S$;s",
            "\u0449S$_^]3[\u030bD$",
            "S0Uk4V0Wx",
            "L$(H",
            "L$ t$",
            "|$<L$,D$4",
            "u>3UUU\u07baC",
            "L$4D$4",
            "D$5S",
            "D$LT$",
            "L$LT$",
            "3UUU",
            "T$XC",
            "B0D$",
            "L$LA",
            "L$LA",
            "D$L@",
            "t!T$$",
            "L$(T$)S",
            "F rC",
            "T$$L$%",
            "L$(D$*T$+S",
            "t!T$$",
            "L$(T$)S",
            "S8t!T$$",
            "L$(T$)S",
            "tVC8;\u01c9D$",
            "PVQT$",
            "+\u0209|$",
            "K8C8",
            "0@\u0249L$0t",
            "RVPvT$",
            "D$0|$",
            "0@\u0249L$0t",
            "D$0|$",
            "D$L@",
            "{L$XT$",
            "F T$",
            "L$L3C",
            "A0l$",
            "\u0570T$XC",
            "B0T$",
            "ws$m",
            "D$L@",
            "+ T$",
            "F T$",
            "r\u064b\u028b%",
            "D$L@",
            "3C8l$",
            "\u054bK8\u0249L$",
            "D$ ;v",
            "|$ +t$",
            "+\u0209|$ |$",
            "t$(t$",
            "C\\CX",
            "KTT$",
            "K`;KTsY",
            "s'd$",
            "r\u074bC`",
            "fLChK`AK`;KTrK`",
            "3\u024bS`",
            "fLShS`B;\u0409S`r\u5343(",
            "RCLPQ",
            "ChPj",
            "D$4t L$LA",
            "D$L@",
            "KXC\\",
            "KDH#",
            ";\u0149L$@v<",
            "KDF|$",
            ";\u0149t$",
            "L$@w\u010bD$@",
            "F;|$",
            "rfD$B+K`fDKhC`@T$",
            "r\u05cbC`+T$",
            ";s-d$",
            "r\u05cbL$",
            "r\u05cbL$",
            "+D$0",
            "{\\K`",
            ";\u03c9T$",
            "L$0{`fL{h{`GH{`u|$",
            "KXC\\",
            "\"L$LA",
            "T$L|$",
            "RCLPQ",
            "CXPKhQj",
            "D$4t",
            "T$LB",
            "CdKdCH",
            "RSXCPPQK\\",
            "QDShPj",
            "D$4t",
            "L$LA",
            "re|$ ",
            "r[D$LL$(H",
            "L$ H",
            "S0T$,RPk4D$TP",
            "C0k4T$(",
            "L$(t$",
            ";\u0349D$@v<",
            "KDF|$",
            ";\u0349t$",
            "D$@w\u0104",
            "3\u024a\u0209D$0",
            "H#L$@",
            ";\u0149L$",
            "3\u024aL$0O",
            ";wD$@+",
            "+L$@",
            "D$L@",
            "C@tE;s%",
            "\u040bC@F;t$",
            "r\u06cbK@",
            "K8H#",
            "\u0209K8K@+",
            ";\u0349D$@vC$",
            "KHF|$",
            ";\u0349t$",
            "D$@w\u0128",
            "3\u024a\u0209D$0",
            "H#L$@",
            ";\u0149L$",
            "3\u024aL$0O",
            ";wD$@+",
            "+@T$",
            "L$LA",
            "K<C@",
            "C@tI;s%",
            "\u040bC@F;t$",
            "r\u06cbK@",
            "K<H#",
            "\u0209K<K@+T$",
            "D$ K$+",
            "L$,9K<v",
            "D$L@",
            "L$,+\u020bC<;v<+K(;D$",
            "K D$",
            "K(D$",
            "L$0K8;L$8v",
            "L$(+\u020bC8L$0D$8D$",
            "L$ ;v",
            "+\u0209L$ L$8+\u020bD$(K8L$0\t",
            "L$0@AL$0L$",
            "uD$(C8",
            "D$(K8",
            "@D$(L$ ",
            "F T$",
            "r\u064bD$,+D$ L$L",
            "\u0205D$,K",
            "L$(D$,Pt",
            "+QR>\t+QR#L$XT$",
            "A0D$ D$,C",
            "3\u024al$",
            "D$L@",
            "`3l$",
            "F T$",
            "tSL$LA",
            "4_^][8",
            "D$LL$(H",
            "L$ x",
            "^k4]S0",
            "[83l$",
            "D$4D$LL$(H",
            "L$ H",
            "C S0k4u",
            "}5D$LT$,;P",
            "t(L$LD$,Q",
            "_^][8",
            "t$LV",
            "l$<|$,F",
            "t5t1C",
            "+RPk",
            "+QRJC",
            "C4F,u",
            "_^][8",
            "D$4_^][8",
            "t1N$t*@,t",
            "PF(P\u0443",
            "V(QRV$",
            "^SW|$",
            "\u0461l$(t$$UVPK",
            "^]_[",
            "C ;{,v&+",
            "K ^]_K$C",
            "3[+\u034b",
            "^k$]_C",
            "3[_[",
            "3vCSU",
            "+\u044b\u028bT$",
            "@;r][",
            "SUl$",
            "9{4s\t_][",
            "VtXC4S0\u0203",
            "S0C4r!\u040aC0D",
            "A;\u05c9C0sS4{`Qt$",
            "{`Qu",
            "^_][",
            "3[][\u030bD$",
            "SVW|$",
            "N(Uh",
            "t/K,3t0K",
            "RPV ",
            "N(UQV$",
            "]_^[",
            "SD+\u04c1(",
            "MDSH+\u04c1(",
            "MHSd+\u04c1(",
            "E,D$",
            "]_^3[_^[\u0303x3D$8D$<D$@D$DS$",
            "D$LU$",
            "D$TD$XD$\\v",
            "CfDL@LL@@;r\ue2cc$",
            "f|D@",
            "s;\u0209D$",
            "\u0205u\t][xV",
            "f|tD",
            "u:f|tF",
            "u\"f|tH",
            "f|tJ",
            "f|tL",
            "+x/@",
            "D$H+\u0203",
            "_^][x^][xfD$j",
            "r3v3",
            "LTh$",
            "CfDThTTh@;r\u04cb\u01c3",
            "t;Ht",
            "D$0H",
            "T$,9",
            "D$4D$,",
            "D$0$",
            "L$ L$",
            "T$<33\u06c3",
            "D$8D$(T$@u",
            "D$$$",
            "t$$f",
            "T$,*\u02c8L$",
            "T$4f",
            "`fD$",
            "T$8+\u02f8",
            "\u02cbL$ 4",
            "++\u0385\u04899uT$",
            "3t$$",
            "fLTHf|TH",
            "t$$u",
            "\tt$@D$<#;t$D",
            "D$ L$8|$",
            "+\u02c9T$ ",
            ";s tTH",
            ">+\u01c5~",
            ";rt$DT$(",
            "\u0409D$8$",
            "T$(u",
            "L$ +",
            "T$<fL",
            "t]t$ d$",
            "t L$@D$<#;t",
            "73\u06c9D$",
            "\u040b\u02cbL$",
            "\u020buT$(",
            "3[x_^]",
            "UVt$",
            "6;\u0289l$",
            "S}2X",
            "f;r-u",
            "v+T$",
            ";~L$",
            "^]Y\u0303 Q",
            "T$ Q",
            "3U)Vq",
            "3WfL",
            "L$ |$",
            ";T$$fL",
            "L|$(fH4",
            "+|$,4",
            "QT$,H4",
            "L$,fH4",
            "tfH4",
            ";L$$l$,",
            "\u034bl$,",
            "t$ J",
            "\u0489t$ u_^][ QSUVW",
            "C\u01cb|$",
            "?F;}",
            ";tn;L$",
            "n_^][Y\u0303",
            "SUl$",
            "39t$",
            "F;|$",
            "t$ }",
            "+;~\\",
            "*fL:f",
            "+;~\\",
            "*fL:f",
            "+;~[",
            "*fL:f",
            "+;~[",
            "*fL:f",
            "+;~[",
            "*fL:f",
            "N_^][",
            "VW~gt$",
            "~`sH",
            "~`uH",
            "_^][\u030b",
            "UV3\u0245W",
            "+;~_",
            "*fL:f",
            "+;\u02c9|$",
            "|$ T$",
            "*fL$",
            "+;~TH",
            "\\$ AH",
            "*fL:f",
            "+;\u0389T$",
            "~fT$$",
            "\\$ AH",
            "*fL$",
            "t$$f4ff\t",
            "+;~XH",
            "*fL2f",
            "+;~x",
            "\\$ f\t",
            "\\$ BP",
            "*fL:_",
            "SV3W",
            "Su8P",
            "S~8P",
            "[3;~",
            "[SVW\u064bL$",
            "FGKp",
            "u_^[\u030bT$",
            "\u0303 Vt$",
            "+\u058d4B",
            "~3|;U",
            "t+3fDT",
            "@fDT",
            "F;~]^ \u0303",
            "SUW8@",
            "3\u04833;\u0289L$",
            "~7f9",
            "@;|\u0243H",
            "^\u030bD$",
            "~jSVt$",
            "*fL$",
            "SVf\t",
            "\t~JP",
            "*3fCX",
            "\t~ZP",
            "*3fCX",
            "[SUl$",
            "N|3W~M~",
            "|$ WUSV",
            "|$ ;\u028b",
            "D$ f\t",
            "*f@F",
            "D$ f",
            "@PAQ\t",
            "^][\u03038L$HD$DT$<W|$Dj8L$",
            "D$ D$0",
            "u]VT$",
            "t2D$",
            "^_8^_8",
            "s+\u020b\u0105",
            "YY=u9\\",
            "Vq;r",
            "u\t=P",
            "t\tWVS\u0405t",
            "3NWVST",
            "u7WPSt",
            "u&WVSu",
            "WVS\u0409E",
            "_^[]",
            "1.2.1",
            "jp5c\u98d5d2",
            "\u0497+L\t|~",
            " jHqA}",
            "mQ\u01c5\u04c3Vl",
            "kdzbeO\\",
            " n;^",
            "iLA`rqg",
            "5lB\u027b@l2u\\E",
            "Y=\u046b0&:",
            "a\u043f!#\u0133V",
            "a=-fAv",
            "\\cQkkbal",
            "|\u04cceLXaMQ:t",
            "0AJ\u05d5=m\u0464jiCn4Fg\u0438`s-",
            "%hWo \tfa",
            "^)\"\u0430",
            ".;\\l ",
            "\u04b1t9Gw\u049d",
            "c;d>jm",
            "i]Wbgeq6l",
            "+\u04c9Zz",
            "Jgo\u07f9\uff8eC",
            "\u054e`~\u04618ROggW",
            "?K6H+",
            "A`Ugn1yiFa",
            "fo%6hRw",
            "j\\1\u0435,",
            "[d&c\uc723ju",
            "z+{8",
            "\u04c6Bhn",
            "[&wowG",
            "eibkaEl",
            "9a&g",
            "`MGiIwn>Jj\u046eZf",
            "@;7S\u015e",
            ")WTg#.zfJa",
            "h]+o*7",
            "b62S-+",
            "ldEw}ZV\u01d6AO",
            "OM~-",
            "#SpxAaU\u05ee.",
            "-6]]w",
            "ll?A\u051e",
            " Faw$e\u06aa]]FD(koipvk19Z* ,\t",
            "]qTp0ek*1u",
            "y\u07a9%8<ysHj}",
            "A<*X",
            "OyD~b-O",
            "\u01608L!",
            "\\H1EbnSwT]",
            "yk\u07b5T@OYX",
            "p8$A#=keZ|%\tWd8N",
            "!\u03273`*$?-",
            "l\t$H",
            "S)F~hwey?/H$6t",
            "SKHRpey1~`|=6",
            "xT9eK;",
            "lF?m",
            "#AplAwG6",
            "Aq[ZhwClZ",
            "S1bS",
            "k1**yk\u02acHpo",
            "].*F6f",
            "cTT\"eM",
            "g0&):{\u03fckZ>\t",
            "52F*",
            "pHkQ6Fzw]cN",
            "#pAF]#",
            "(BOg",
            "T~yUbL",
            "TZ1ObbSy",
            "OIV~P-{",
            "~^eGnHl/Su6",
            "\t#jT$",
            "'*b#\u067d",
            "?&~?$p",
            "i;FBzw[keZ~7\tSv8H\t",
            "3?r$",
            "FM8,9;",
            ":<D?",
            ">R:<eP",
            "^6o}765",
            "4W1\u05550k2",
            "3k$%1'[-&LMb#{'\"\" ",
            "$!(x*",
            "\u07ba+F`)q",
            "q-v,.7/pXqY",
            "%w+OQvr",
            "tEux\u0709~OK",
            "}!b|ty",
            "z{.lD~m8onlk[wj",
            "R1h58i",
            "mcf+aQ`\u05e6edd",
            "\"fig H",
            "SKyuJcO\t",
            "NZL\u0758MF",
            "GN@E$DD2AsX",
            "@*IB",
            "CPhTg",
            "3U>uW\t\u05b7VS:R",
            "|P~Q9ZS [fYX4]",
            ")\\ZEo^m/_",
            "5q\u03f1\u0665s\\<k2g",
            "z8J&",
            " Va`/\u04c86\\i",
            "zB\u011eu\\H",
            "WFA\t+O`]xW7",
            "9>\u06fcq\u078b!K7",
            "kf\u05b6\u0501-",
            "b3\u03a0jp]",
            "^'~*I@",
            "M\u02df\u014f{",
            "@wm.B+",
            "(\u94dc>Td\"\u0140\u01fc\u03ed~",
            "8y$o",
            "wJ1}05",
            "i\u03cf\uc740BI",
            "\u0701T\u0313cQ:",
            "r\u0546\u2a57 ",
            "fn|xK",
            "/3vUuA?)C:|s\u0135",
            "IUeh\"\u05fb_H",
            "eg\t\uebf5",
            "Wb27_k%8\u05dd(\u014aO",
            "\u05f8Jj3wV",
            "qB{\u07edgC",
            "ru&op",
            "Bs \u01b0Gz",
            ">2[\u020e",
            "i8P/",
            "_Y=\u0447e:ZO?(3w",
            "@hQ+\u011fH*0\"ZOWoI",
            "mN\u041f5+#",
            "G| A",
            "/{kHw",
            "aLoD~Pf",
            "7VM'",
            "g9x+",
            "&;f?/X)T`D1",
            "\u07d2.Fg",
            "p'Hq/L0UEc?k\u01c3",
            "y7]P\\@TN%s",
            "!AxU\u02b0\\3;Y^U~PG",
            "l!;b\tF2\u0202p\u051e(Q_V:1X:\tn3",
            "JNv\"2",
            "\u0657 Kx.H",
            "\u04a5fAj",
            "^y9*O]#",
            "kM`~b_R\t7zF",
            "h!1\u07c8Vc0a\"",
            "6nS\t",
            "8#vuf",
            "z`rs\"WG",
            "Mvc\u038d&DAdQy/4",
            "A\u06b1&S\u059aE",
            "iLQ<6'5P..T&",
            "4.6I",
            "\\[YI>U!",
            "lDa>\u052a\u038b\u03e97~8A",
            "]&nv|o",
            "66nQ",
            "fq>,o,I\u04d4",
            "\t\u6e31{I",
            "H>C-Yn\u9991gQ",
            "a,\tQ",
            "pjc5d",
            "\u06c82y\u0738",
            "\u0648\tL+~|-",
            "dj qHA",
            "}m\u0535Q\u04c5",
            "lVdkbze",
            ";n Li",
            "^`Agqr<",
            "k5Bl\u06fb\u05ac@2lE\\u",
            "\u03eb=Y&0Q",
            "!V#\u03fa",
            "$/o|XhL",
            "f-=vA",
            "m=-dlc\\",
            "labe0b",
            "-I|LeMaX:Q\u03a3",
            "t\u053b0J\u07e5A=\u0615\u05e4mCij4ngF`D",
            " Wh% of\ta^",
            ")\u0258\u0418\"\u05e8Y=",
            "\\;l ",
            "t\u049aG9w",
            "mj>zjZ",
            "bW]eg",
            "l6qnk",
            "zZgJo",
            "C`\u05a3\u0453~8OR\u047bgWg?",
            "gU1nFiyaf",
            "%o\u04a0Rh6",
            "&/\u017a;",
            "(+Z\\j",
            "1,\u065e[\u07ae",
            "c&uj",
            "!Bh\u0773",
            "&[ow",
            "\\ebiak",
            "g&a`",
            "IiGM>nw\u06eejJZ@",
            "f7;\ud867\udf2eS\u07bbG",
            "S0$6",
            "TW)#gfz.aJ]h",
            "1A26b+-Sdl",
            "}wEVZOA\u064a",
            "xpaA.U7",
            "-\u06e96\u02daw]]ll",
            "\u39f2F wa\u0783$\u0172e]]DFok(vpi91k *Z",
            "8mF6]",
            "pTqke0*1",
            "%y<8syjHA",
            "}X*<yO",
            "b~DO-T",
            "@#\u80ff88",
            "\tE1HnbwS\u02ba]Tl",
            "\u02d3rb\\ky",
            "@TYO",
            "$8p=#Aek|ZW\t%N8d",
            "3!*`$\u1bf4?",
            "-\tlH$S",
            "~F)ewh/?y6$H",
            "*5KSRHyep`~1",
            "\u0411|\u02e0=6",
            "Txe9;K\"",
            "\u02c8_]OFl",
            "lpwA6G-",
            "hZ[CwZl",
            "6~_'",
            "1SbS",
            "1k**kypH]",
            "oF*.f6",
            "TTcMe\"",
            "0g)&\u016e\u079f:{kZ\t>8",
            "1wsHpQkzF6c]wN",
            "gOB~T",
            "UyLb\u02c18",
            "O1ZbbySIO",
            "P~V{-b",
            "^~Ge",
            "lHnuS/:",
            "?e+y\u43fcH",
            "f*'\u02fc\u040db#",
            "&??~p$i",
            "BF;[wzek~ZS\t7H8v\t",
            "?3$r",
            "zM8MF9,;\u0252:",
            "?D<>",
            "<:R=",
            "Pe6^",
            "X7}o564",
            "1W0\u05732k3",
            "$k%'1&-[#bML\"'{ \"!$",
            "*x(+",
            ")`F(>",
            ",v.\u021a/7pqXs",
            "Yr3w%",
            "vQO+t",
            "ru\u055bE~x",
            "|b!ytxB",
            "{l.m~Do8nkljw[h1R",
            "i85b",
            "?a+f`Qeddf\"",
            "giH I",
            "NJuyOcN",
            "\tLZM\u0765F\u011aG",
            "E@ND$A2D@",
            "XsBI*C",
            "ThPU3",
            "gWu>V\tSR:P|",
            "Q~Z9[ SYfX]4\\)",
            "^oEZ_/m5",
            "qs<\\kg2z",
            "&J8 ",
            "\uc89eV`a/6i\\",
            "=&FW",
            "\tA+Ox]`\u063a7W",
            ">9q\u07f3!7Kk",
            "\u05a9f\u0636-b",
            "\u04603pj$",
            "\u011c'*~",
            "@IWV",
            "M\u028f\u015f{",
            "t\u0346mC",
            "-@mw+B.(",
            ">dT\"\u015f~\u03dc8",
            "yo$w",
            "1J}50K_",
            "^\u03cbiB\u06c9",
            "I#dX",
            "\u0444TQc",
            "\u03abnx|)",
            "3/uUv?A)\u0121:C|s\u0434",
            "beU\"h",
            "Z^\u06be4",
            "ge\t\u020b",
            "bW72%k_\u071d8\u0174(}",
            "J\u05bfjw3Xc",
            "Bq{g\u01e7ur",
            "'sB ",
            "zG\u02602>",
            "/P8i_",
            "Y=\u55c7e:\u03cfOZw3(?",
            "RXw@",
            "Qh+HZ\"0*WO",
            "5N#+",
            "X=#?X1",
            "<i~{/",
            ")\u0678LDofP~V7",
            "f/?)XD`T",
            "M\u07e6\u03faF.T",
            "qHL/0cEUk?\u04c36h",
            "r]7\\PNT@%s",
            "@>'!",
            "$UxA\u05ef3\\Y;U^GP~",
            "b;!l\u0687F\t2p(\u0510QV_:X1:\t",
            "I)/NJ2\"v",
            "xKH.",
            "jAf^",
            "O*9y]#Mk",
            "~`b\u044e_\u07b6\tRz7h",
            "F\u043c!10cV\"aj",
            "rN){",
            "Fv#fu`z",
            "r\u03ees\u025bW\"",
            "cD&dA/yQA",
            "4S&\u05bf",
            "<Q'6\u06d65..P&T]q",
            "?E v[\\",
            "IYU>l",
            "!>aD\u018b\u03aa~7",
            "A8n&]|vY",
            ">q,o,\u04f9I\t",
            "C>HnY-Qg\u0330",
            " deflate 1.2.1 Copyright 1995-2003 Jean-loup Gailly ",
            "1.2.1",
            "%c%c%c%c%c%c%c%c%c%c",
            "<fd:%d>",
            "invalid distance too far back",
            "invalid distance code",
            "invalid literal/length code",
            "too many length or distance symbols",
            "invalid distances set",
            "invalid literal/lengths set",
            "invalid bit length repeat",
            "invalid code lengths set",
            "invalid stored block lengths",
            "invalid block type",
            "incorrect length check",
            "incorrect data check",
            "header crc mismatch",
            "unknown header flags set",
            "incorrect header check",
            "invalid window size",
            "unknown compression method",
            " inflate 1.2.1 Copyright 1995-2003 Mark Adler ",
            "\t\t\t\t\t\t\t\t",
            "incompatible version",
            "buffer error",
            "insufficient memory",
            "data error",
            "stream error",
            "file error",
            "stream end",
            "need dictionary",
            "fwrite",
            "fread",
            "_errno",
            "fclose",
            "free",
            "_vsnprintf",
            "fflush",
            "fseek",
            "fputc",
            "malloc",
            "clearerr",
            "ftell",
            "fprintf",
            "_fdopen",
            "fopen",
            "sprintf",
            "MSVCRT.dll",
            "_initterm",
            "_adjust_fdiv",
            "DisableThreadLibraryCalls",
            "KERNEL32.dll",
            "zlib1.dll",
            "adler32",
            "compress",
            "compress2",
            "compressBound",
            "crc32",
            "deflate",
            "deflateBound",
            "deflateCopy",
            "deflateEnd",
            "deflateInit2_",
            "deflateInit_",
            "deflateParams",
            "deflatePrime",
            "deflateReset",
            "deflateSetDictionary",
            "get_crc_table",
            "gzclearerr",
            "gzclose",
            "gzdopen",
            "gzeof",
            "gzerror",
            "gzflush",
            "gzgetc",
            "gzgets",
            "gzopen",
            "gzprintf",
            "gzputc",
            "gzputs",
            "gzread",
            "gzrewind",
            "gzseek",
            "gzsetparams",
            "gztell",
            "gzungetc",
            "gzwrite",
            "inflate",
            "inflateBack",
            "inflateBackEnd",
            "inflateBackInit_",
            "inflateCopy",
            "inflateEnd",
            "inflateInit2_",
            "inflateInit_",
            "inflateReset",
            "inflateSetDictionary",
            "inflateSync",
            "inflateSyncPoint",
            "uncompress",
            "zError",
            "zlibCompileFlags",
            "zlibVersion",
            "O1!2T2~22222222",
            "3.3B3L3^3p333333333",
            "4\"434I4S4a4r4444447999;>>>>",
            "555999$=.=|=P?t???",
            "0,000T2243O333",
            "5A5N5",
            "6678",
            "9c94:H:g:y:::::?;;;<<<<",
            "='=M=T=y===>>",
            "1#2c2O3^334:4444(5577<8.;;;;;d<K>",
            ",00111",
            "2$2(2,202^6s66{779:: ;f;{;{>???",
            "2n2~244",
            "5m5B78d9);; =$=(=,=0=4=8=<=@=D=H=L=P=T=X=\\=`=d=h=l=p=t=x=|==========",
            "@3H3S3a3",
            "|1233A4O44",
            "5888;m?r?",
            "1,1L1g111111111111",
            "2+272=2_2q2222",
            "00000000",
            "??????????",
            "0$0(0<0",
            "# format.rb: Written by Tadayoshi Funaba 1999-2004",
            "# $Id: format.rb,v 2.13 2004-03-20 08:05:13+09 tadf Exp $",
            "require 'rational'",
            "class Date",
            "  MONTHS = {",
            "    'january'  => 1, 'february' => 2, 'march'    => 3, 'april'    => 4,",
            "    'may'      => 5, 'june'     => 6, 'july'     => 7, 'august'   => 8,",
            "    'september'=> 9, 'october'  =>10, 'november' =>11, 'december' =>12",
            "  DAYS = {",
            "    'sunday'   => 0, 'monday'   => 1, 'tuesday'  => 2, 'wednesday'=> 3,",
            "    'thursday' => 4, 'friday'   => 5, 'saturday' => 6",
            "  ABBR_MONTHS = {",
            "    'jan'      => 1, 'feb'      => 2, 'mar'      => 3, 'apr'      => 4,",
            "    'may'      => 5, 'jun'      => 6, 'jul'      => 7, 'aug'      => 8,",
            "    'sep'      => 9, 'oct'      =>10, 'nov'      =>11, 'dec'      =>12",
            "  ABBR_DAYS = {",
            "    'sun'      => 0, 'mon'      => 1, 'tue'      => 2, 'wed'      => 3,",
            "    'thu'      => 4, 'fri'      => 5, 'sat'      => 6",
            "  ZONES = {",
            "    'ut'  =>  0*3600, 'gmt' =>  0*3600, 'est' => -5*3600, 'edt' => -4*3600,",
            "    'cst' => -6*3600, 'cdt' => -5*3600, 'mst' => -7*3600, 'mdt' => -6*3600,",
            "    'pst' => -8*3600, 'pdt' => -7*3600,",
            "    'a'   =>  1*3600, 'b'   =>  2*3600, 'c'   =>  3*3600, 'd'   =>  4*3600,",
            "    'e'   =>  5*3600, 'f'   =>  6*3600, 'g'   =>  7*3600, 'h'   =>  8*3600,",
            "    'i'   =>  9*3600, 'k'   => 10*3600, 'l'   => 11*3600, 'm'   => 12*3600,",
            "    'n'   => -1*3600, 'o'   => -2*3600, 'p'   => -3*3600, 'q'   => -4*3600,",
            "    'r'   => -5*3600, 's'   => -6*3600, 't'   => -7*3600, 'u'   => -8*3600,",
            "    'v'   => -9*3600, 'w'   =>-10*3600, 'x'   =>-11*3600, 'y'   =>-12*3600,",
            "    'z'   =>  0*3600,",
            "    'utc' =>  0*3600, 'wet' =>  0*3600, 'bst' =>  1*3600, 'wat' => -1*3600,",
            "    'at'  => -2*3600, 'ast' => -4*3600, 'adt' => -3*3600, 'yst' => -9*3600,",
            "    'ydt' => -8*3600, 'hst' =>-10*3600, 'hdt' => -9*3600, 'cat' =>-10*3600,",
            "    'ahst'=>-10*3600, 'nt'  =>-11*3600, 'idlw'=>-12*3600, 'cet' =>  1*3600,",
            "    'met' =>  1*3600, 'mewt'=>  1*3600, 'mest'=>  2*3600, 'mesz'=>  2*3600,",
            "    'swt' =>  1*3600, 'sst' =>  2*3600, 'fwt' =>  1*3600, 'fst' =>  2*3600,",
            "    'eet' =>  2*3600, 'bt'  =>  3*3600, 'zp4' =>  4*3600, 'zp5' =>  5*3600,",
            "    'zp6' =>  6*3600, 'wast'=>  7*3600, 'wadt'=>  8*3600, 'cct' =>  8*3600,",
            "    'jst' =>  9*3600, 'east'=> 10*3600, 'eadt'=> 11*3600, 'gst' => 10*3600,",
            "    'nzt' => 12*3600, 'nzst'=> 12*3600, 'nzdt'=> 13*3600, 'idle'=> 12*3600",
            "  def self.__strptime(str, fmt, elem)",
            "    fmt.scan(/%[EO]?.|./o) do |c|",
            "      cc = c.sub(/\\A%[EO]?(.)\\Z/o, '%\\\\1')",
            "      case cc",
            "      when /\\A\\s/o",
            "\tstr.sub!(/\\A[\\s\\v]+/o, '')",
            "      when '%A', '%a'",
            "\treturn unless str.sub!(/\\A([a-z]+)\\b/io, '')",
            "\tval = DAYS[$1.downcase] || ABBR_DAYS[$1.downcase]",
            "\treturn unless val",
            "\telem[:wday] = val",
            "      when '%B', '%b', '%h'",
            "\treturn unless str.sub!(/\\A([a-z]+)\\b/io, '')",
            "\tval = MONTHS[$1.downcase] || ABBR_MONTHS[$1.downcase]",
            "\treturn unless val",
            "\telem[:mon] = val",
            "      when '%C'",
            "\treturn unless str.sub!(/\\A(\\d+)/o, '')",
            "\tval = $1.to_i",
            "\telem[:cent] = val",
            "      when '%c'",
            "\treturn unless __strptime(str, '%a %b %e %H:%M:%S %Y', elem)",
            "      when '%D'",
            "\treturn unless __strptime(str, '%m/%d/%y', elem)",
            "      when '%d', '%e'",
            "\treturn unless str.sub!(/\\A ?(\\d+)/o, '')",
            "\tval = $1.to_i",
            "\treturn unless (1..31) === val",
            "\telem[:mday] = val",
            "      when '%F'",
            "\treturn unless __strptime(str, '%Y-%m-%d', elem)",
            "      when '%G'",
            "\treturn unless str.sub!(/\\A([-+]?\\d+)/o, '')",
            "\tval = $1.to_i",
            "\telem[:cwyear] = val",
            "      when '%g'",
            "\treturn unless str.sub!(/\\A(\\d+)/o, '')",
            "\tval = $1.to_i",
            "\treturn unless (0..99) === val",
            "\telem[:cwyear] = val",
            "\telem[:cent] ||= if val >= 69 then 19 else 20 end",
            "      when '%H', '%k'",
            "\treturn unless str.sub!(/\\A ?(\\d+)/o, '')",
            "\tval = $1.to_i",
            "\treturn unless (0..24) === val",
            "\telem[:hour] = val",
            "      when '%I', '%l'",
            "\treturn unless str.sub!(/\\A ?(\\d+)/o, '')",
            "\tval = $1.to_i",
            "\treturn unless (1..12) === val",
            "\telem[:hour] = val",
            "      when '%j'",
            "\treturn unless str.sub!(/\\A(\\d+)/o, '')",
            "\tval = $1.to_i",
            "\treturn unless (1..366) === val",
            "\telem[:yday] = val",
            "      when '%M'",
            "\treturn unless str.sub!(/\\A(\\d+)/o, '')",
            "\tval = $1.to_i",
            "\treturn unless (0..59) === val",
            "\telem[:min] = val",
            "      when '%m'",
            "\treturn unless str.sub!(/\\A(\\d+)/o, '')",
            "\tval = $1.to_i",
            "\treturn unless (1..12) === val",
            "\telem[:mon] = val",
            "      when '%n'",
            "\treturn unless __strptime(str, ' ', elem)",
            "      when '%p', '%P'",
            "\treturn unless str.sub!(/\\A([ap])(?:m\\b|\\.m\\.)/io, '')",
            "\telem[:merid] = if $1.downcase == 'a' then 0 else 12 end",
            "      when '%R'",
            "\treturn unless __strptime(str, '%H:%M', elem)",
            "      when '%r'",
            "\treturn unless __strptime(str, '%I:%M:%S %p', elem)",
            "      when '%S'",
            "\treturn unless str.sub!(/\\A(\\d+)/o, '')",
            "\tval = $1.to_i",
            "\treturn unless (0..60) === val",
            "\telem[:sec] = val",
            "      when '%s'",
            "\treturn unless str.sub!(/\\A(\\d+)/o, '')",
            "\tval = $1.to_i",
            "\telem[:seconds] = val",
            "      when '%T'",
            "\treturn unless __strptime(str, '%H:%M:%S', elem)",
            "      when '%t'",
            "\treturn unless __strptime(str, ' ', elem)",
            "      when '%U', '%W'",
            "\treturn unless str.sub!(/\\A(\\d+)/o, '')",
            "\tval = $1.to_i",
            "\treturn unless (0..53) === val",
            "\telem[if c == '%U' then :wnum0 else :wnum1 end] = val",
            "      when '%u'",
            "\treturn unless str.sub!(/\\A(\\d+)/o, '')",
            "\tval = $1.to_i",
            "\treturn unless (1..7) === val",
            "\telem[:cwday] = val",
            "      when '%V'",
            "\treturn unless str.sub!(/\\A(\\d+)/o, '')",
            "\tval = $1.to_i",
            "\treturn unless (1..53) === val",
            "\telem[:cweek] = val",
            "      when '%v'",
            "\treturn unless __strptime(str, '%e-%b-%Y', elem)",
            "      when '%w'",
            "\treturn unless str.sub!(/\\A(\\d+)/o, '')",
            "\tval = $1.to_i",
            "\treturn unless (0..6) === val",
            "\telem[:wday] = val",
            "      when '%X'",
            "\treturn unless __strptime(str, '%H:%M:%S', elem)",
            "      when '%x'",
            "\treturn unless __strptime(str, '%m/%d/%y', elem)",
            "      when '%Y'",
            "\treturn unless str.sub!(/\\A([-+]?\\d+)/o, '')",
            "\tval = $1.to_i",
            "\telem[:year] = val",
            "      when '%y'",
            "\treturn unless str.sub!(/\\A(\\d+)/o, '')",
            "\tval = $1.to_i",
            "\treturn unless (0..99) === val",
            "\telem[:year] = val",
            "\telem[:cent] ||= if val >= 69 then 19 else 20 end",
            "      when '%Z', '%z'",
            "\treturn unless str.sub!(/\\A([-+:a-z0-9]+(?:\\s+dst\\b)?)/io, '')",
            "\tval = $1",
            "\telem[:zone] = val",
            "\toffset = zone_to_diff(val)",
            "\telem[:offset] = offset",
            "      when '%%'",
            "\treturn unless str.sub!(/\\A%/o, '')",
            "      when '%+'",
            "\treturn unless __strptime(str, '%a %b %e %H:%M:%S %Z %Y', elem)",
            "=begin",
            "      when '%.'",
            "\treturn unless str.sub!(/\\A(\\d+)/o, '')",
            "\tval = $1.to_i.to_r / (10**$1.size)",
            "\telem[:sec_fraction] = val",
            "=end",
            "      when '%1'",
            "\treturn unless str.sub!(/\\A(\\d+)/o, '')",
            "\tval = $1.to_i",
            "\telem[:jd] = val",
            "      when '%2'",
            "\treturn unless __strptime(str, '%Y-%j', elem)",
            "      when '%3'",
            "\treturn unless __strptime(str, '%F', elem)",
            "      else",
            "\treturn unless str.sub!(Regexp.new('\\\\A' + Regexp.quote(c)), '')",
            "      end",
            "    end",
            "    if cent = elem.delete(:cent)",
            "      if elem[:cwyear]",
            "\telem[:cwyear] += cent * 100",
            "      end",
            "      if elem[:year]",
            "\telem[:year] += cent * 100",
            "      end",
            "    end",
            "    if merid = elem.delete(:merid)",
            "      if elem[:hour]",
            "\telem[:hour] %= 12",
            "\telem[:hour] += merid",
            "      end",
            "    end",
            "    str",
            "  end",
            "  private_class_method :__strptime",
            "  def self._strptime(str, fmt='%F')",
            "    elem = {}",
            "    elem if __strptime(str.dup, fmt, elem)",
            "  end",
            "  PARSE_MONTHPAT = ABBR_MONTHS.keys.join('|')",
            "  PARSE_DAYPAT   = ABBR_DAYS.  keys.join('|')",
            "  def self._parse(str, comp=false)",
            "    str = str.dup",
            "    str.gsub!(/[^-+,.\\/:0-9a-z]+/ino, ' ')",
            "    # day",
            "    if str.sub!(/(#{PARSE_DAYPAT})\\S*/ino, ' ')",
            "      wday = ABBR_DAYS[$1.downcase]",
            "    end",
            "    # time",
            "    if str.sub!(",
            "\t\t/(\\d+):(\\d+)",
            "\t\t (?:",
            "\t\t   :(\\d+)(?:[,.](\\d*))?",
            "\t\t )?",
            "\t\t (?:",
            "\t\t   \\s*",
            "\t\t   ([ap])(?:m\\b|\\.m\\.)",
            "\t\t )?",
            "\t\t (?:",
            "\t\t   \\s*",
            "\t\t   (",
            "\t\t     [a-z]+(?:\\s+dst)?\\b",
            "\t\t   |",
            "\t\t     [-+]\\d+(?::?\\d+)",
            "\t\t   )",
            "\t\t )?",
            "\t\t/inox,",
            "\t\t' ')",
            "      hour = $1.to_i",
            "      min = $2.to_i",
            "      sec = $3.to_i if $3",
            "      if $4",
            "\tsec_fraction = $4.to_i.to_r / (10**$4.size)",
            "      end",
            "      if $5",
            "\thour %= 12",
            "\tif $5.downcase == 'p'",
            "\t  hour += 12",
            "\tend",
            "      end",
            "      zone = $6",
            "    end",
            "    # eu",
            "    if str.sub!(",
            "\t\t/(\\d+)\\S*",
            "\t\t \\s+",
            "\t\t (#{PARSE_MONTHPAT})\\S*",
            "\t\t (?:",
            "\t\t   \\s+",
            "\t\t   (-?\\d+)",
            "\t\t )?",
            "\t\t/inox,",
            "\t\t' ')",
            "      mday = $1.to_i",
            "      mon = ABBR_MONTHS[$2.downcase]",
            "      if $3",
            "\tyear = $3.to_i",
            "\tif $3.size > 2",
            "\t  comp = false",
            "\tend",
            "      end",
            "    # us",
            "    elsif str.sub!(",
            "\t\t   /(#{PARSE_MONTHPAT})\\S*",
            "\t\t    \\s+",
            "\t\t    (\\d+)\\S*",
            "\t\t    (?:",
            "\t\t      \\s+",
            "\t\t      (-?\\d+)",
            "\t\t    )?",
            "\t\t   /inox,",
            "\t\t   ' ')",
            "      mon = ABBR_MONTHS[$1.downcase]",
            "      mday = $2.to_i",
            "      if $3",
            "\tyear = $3.to_i",
            "\tif $3.size > 2",
            "\t  comp = false",
            "\tend",
            "      end",
            "    # iso",
            "    elsif str.sub!(/([-+]?\\d+)-(\\d+)-(-?\\d+)/no, ' ')",
            "      year = $1.to_i",
            "      mon = $2.to_i",
            "      mday = $3.to_i",
            "      if $1.size > 2",
            "\tcomp = false",
            "      elsif $3.size > 2",
            "\tcomp = false",
            "\tmday, mon, year = year, mon, mday",
            "      end",
            "    # jis",
            "    elsif str.sub!(/([MTSH])(\\d+)\\.(\\d+)\\.(\\d+)/ino, ' ')",
            "      e = { 'm'=>1867,",
            "\t    't'=>1911,",
            "\t    's'=>1925,",
            "\t    'h'=>1988",
            "\t  }[$1.downcase]",
            "      year = $2.to_i + e",
            "      mon = $3.to_i",
            "      mday = $4.to_i",
            "    # vms",
            "    elsif str.sub!(/(-?\\d+)-(#{PARSE_MONTHPAT})[^-]*-(-?\\d+)/ino, ' ')",
            "      mday = $1.to_i",
            "      mon = ABBR_MONTHS[$2.downcase]",
            "      year = $3.to_i",
            "      if $1.size > 2",
            "\tcomp = false",
            "\tyear, mon, mday = mday, mon, year",
            "      elsif $3.size > 2",
            "\tcomp = false",
            "      end",
            "    # sla",
            "    elsif str.sub!(%r|(-?\\d+)/(\\d+)(?:/(-?\\d+))?|no, ' ')",
            "      mon = $1.to_i",
            "      mday = $2.to_i",
            "      if $3",
            "\tyear = $3.to_i",
            "\tif $3.size > 2",
            "\t  comp = false",
            "\tend",
            "      end",
            "      if $3 && $1.size > 2",
            "\tcomp = false",
            "\tyear, mon, mday = mon, mday, year",
            "      end",
            "    # ddd",
            "    elsif str.sub!(",
            "\t\t   /([-+]?)(\\d{4,14})",
            "\t\t    (?:",
            "\t\t      \\s*",
            "\t\t      T?",
            "\t\t      \\s*",
            "\t\t      (\\d{2,6})(?:[,.](\\d*))?",
            "\t\t    )?",
            "\t\t    (?:",
            "\t\t      \\s*",
            "\t\t      (",
            "\t\t\tZ",
            "\t\t      |",
            "\t\t\t[-+]\\d{2,4}",
            "\t\t      )",
            "\t\t      \\b",
            "\t\t    )?",
            "\t\t   /inox,",
            "\t\t   ' ')",
            "      case $2.size",
            "      when 4",
            "\tmon  = $2[ 0, 2].to_i",
            "\tmday = $2[ 2, 2].to_i",
            "      when 6",
            "\tyear = ($1 + $2[ 0, 2]).to_i",
            "\tmon  = $2[ 2, 2].to_i",
            "\tmday = $2[ 4, 2].to_i",
            "      when 8, 10, 12, 14",
            "\tyear = ($1 + $2[ 0, 4]).to_i",
            "\tmon  = $2[ 4, 2].to_i",
            "\tmday = $2[ 6, 2].to_i",
            "\thour = $2[ 8, 2].to_i if $2.size >= 10",
            "\tmin  = $2[10, 2].to_i if $2.size >= 12",
            "\tsec  = $2[12, 2].to_i if $2.size >= 14",
            "\tcomp = false",
            "      end",
            "      if $3",
            "\tcase $3.size",
            "\twhen 2, 4, 6",
            "\t  hour = $3[ 0, 2].to_i",
            "\t  min  = $3[ 2, 2].to_i if $3.size >= 4",
            "\t  sec  = $3[ 4, 2].to_i if $3.size >= 6",
            "\tend",
            "      end",
            "      if $4",
            "\tsec_fraction = $4.to_i.to_r / (10**$4.size)",
            "      end",
            "      zone = $5",
            "    end",
            "    if str.sub!(/\\b(bc\\b|bce\\b|b\\.c\\.|b\\.c\\.e\\.)/ino, ' ')",
            "      if year",
            "\tyear = -year + 1",
            "      end",
            "    end",
            "    if comp and year",
            "      if year >= 0 and year <= 99",
            "\tif year >= 69",
            "\t  year += 1900",
            "\telse",
            "\t  year += 2000",
            "\tend",
            "      end",
            "    end",
            "    elem = {}",
            "    elem[:year] = year if year",
            "    elem[:mon] = mon if mon",
            "    elem[:mday] = mday if mday",
            "    elem[:hour] = hour if hour",
            "    elem[:min] = min if min",
            "    elem[:sec] = sec if sec",
            "    elem[:sec_fraction] = sec_fraction if sec_fraction",
            "    elem[:zone] = zone if zone",
            "    offset = zone_to_diff(zone) if zone",
            "    elem[:offset] = offset if offset",
            "    elem[:wday] = wday if wday",
            "    elem",
            "  end",
            "  def self.zone_to_diff(str)",
            "    abb, dst = str.downcase.split(/\\s+/o, 2)",
            "    if ZONES.include?(abb)",
            "      offset  = ZONES[abb]",
            "      offset += 3600 if dst",
            "    elsif /\\A([-+])(\\d{2}):?(\\d{2})?\\Z/no =~ str",
            "      offset = $2.to_i * 3600 + $3.to_i * 60",
            "      offset *= -1 if $1 == '-'",
            "    end",
            "    offset",
            "  end",
            "  def strftime(fmt='%F')",
            "    o = ''",
            "    fmt.scan(/%[EO]?.|./o) do |c|",
            "      cc = c.sub(/^%[EO]?(.)$/o, '%\\\\1')",
            "      case cc",
            "      when '%A'; o << DAYNAMES[wday]",
            "      when '%a'; o << ABBR_DAYNAMES[wday]",
            "      when '%B'; o << MONTHNAMES[mon]",
            "      when '%b'; o << ABBR_MONTHNAMES[mon]",
            "      when '%C'; o << '%02d' % (year / 100.0).floor\t\t# P2,ID",
            "      when '%c'; o << strftime('%a %b %e %H:%M:%S %Y')",
            "      when '%D'; o << strftime('%m/%d/%y')\t\t\t# P2,ID",
            "      when '%d'; o << '%02d' % mday",
            "      when '%e'; o <<  '%2d' % mday",
            "      when '%F'; o << strftime('%Y-%m-%d')\t\t\t# ID",
            "      when '%G'; o << '%.4d' %  cwyear\t\t\t\t# ID",
            "      when '%g'; o << '%02d' % (cwyear % 100)\t\t\t# ID",
            "      when '%H'; o << '%02d' %   hour",
            "      when '%h'; o << strftime('%b')\t\t\t\t# P2,ID",
            "      when '%I'; o << '%02d' % ((hour % 12).nonzero? or 12)",
            "      when '%j'; o << '%03d' % yday",
            "      when '%k'; o <<  '%2d' %   hour\t\t\t\t# AR,TZ,GL",
            "      when '%l'; o <<  '%2d' % ((hour % 12).nonzero? or 12)\t# AR,TZ,GL",
            "      when '%M'; o << '%02d' % min",
            "      when '%m'; o << '%02d' % mon",
            "      when '%n'; o << \"\\n\"\t\t\t\t\t# P2,ID",
            "      when '%P'; o << if hour < 12 then 'am' else 'pm' end\t# GL",
            "      when '%p'; o << if hour < 12 then 'AM' else 'PM' end",
            "      when '%R'; o << strftime('%H:%M')\t\t\t\t# ID",
            "      when '%r'; o << strftime('%I:%M:%S %p')\t\t\t# P2,ID",
            "      when '%S'; o << '%02d' % sec",
            "      when '%s'\t\t\t\t\t\t\t# TZ,GL",
            "\td = ajd - self.class.jd_to_ajd(self.class.civil_to_jd(1970,1,1), 0)",
            "\ts = (d * 86400).to_i",
            "\to << '%d' % s",
            "      when '%T'; o << strftime('%H:%M:%S')\t\t\t# P2,ID",
            "      when '%t'; o << \"\\t\"\t\t\t\t\t# P2,ID",
            "      when '%U', '%W'",
            "\ta = self.class.civil_to_jd(year, 1, 1, ns?) + 6",
            "\tk = if c == '%U' then 0 else 1 end",
            "\tw = (jd - (a - ((a - k) + 1) % 7) + 7) / 7",
            "\to << '%02d' % w",
            "      when '%u'; o <<   '%d' % cwday\t\t\t\t# P2,ID",
            "      when '%V'; o << '%02d' % cweek\t\t\t\t# P2,ID",
            "      when '%v'; o << strftime('%e-%b-%Y')\t\t\t# AR,TZ",
            "      when '%w'; o <<   '%d' % wday",
            "      when '%X'; o << strftime('%H:%M:%S')",
            "      when '%x'; o << strftime('%m/%d/%y')",
            "      when '%Y'; o << '%.4d' %  year",
            "      when '%y'; o << '%02d' % (year % 100)",
            "      when '%Z'; o << (if offset.zero? then 'Z' else strftime('%z') end)",
            "      when '%z'\t\t\t\t\t\t\t# ID",
            "\to << if offset < 0 then '-' else '+' end",
            "\tof = offset.abs",
            "\thh, fr = of.divmod(1.to_r/24)",
            "\tmm = fr / (1.to_r/1440)",
            "\to << '%02d' % hh",
            "\to << '%02d' % mm",
            "      when '%%'; o << '%'",
            "      when '%+'; o << strftime('%a %b %e %H:%M:%S %Z %Y')\t# TZ",
            "=begin",
            "      when '%.'",
            "\to << '%06d' % (sec_fraction / (1.to_r/86400/(10**6)))",
            "=end",
            "      when '%1'; o <<   '%d' % jd",
            "      when '%2'; o << strftime('%Y-%j')",
            "      when '%3'; o << strftime('%Y-%m-%d')",
            "      else;      o << c",
            "      end",
            "    end",
            "    o",
            "  end",
            "# alias_method :format, :strftime",
            "  def asctime() strftime('%c') end",
            "  alias_method :ctime, :asctime",
            "class DateTime < Date",
            "  def self._strptime(str, fmt='%FT%T%Z')",
            "    super(str, fmt)",
            "  end",
            "  def strftime(fmt='%FT%T%Z')",
            "    super(fmt)",
            "  end",
            "L!This program cannot be run in DOS mode.",
            "Rich",
            ".text",
            "`.rdata",
            "@.data",
            ".reloc",
            "Uhl0",
            "Qhd0",
            "EEPMQ",
            "EE]U",
            "Ej\"MQ",
            "E3\u0245uE]U",
            "Ej\"UR",
            "M3\u0485uE",
            "QUREP",
            "UEP_",
            "EMQUREP",
            "MQUR5",
            "Ej\"UR",
            "M3\u0485uE",
            "QUREP",
            "EMQUREP",
            "MQURp",
            "E3\u0245uj\"U",
            "M3\u0485uEH",
            "_^]U",
            "Ej\"M",
            "E3\u0245uU",
            "REPMQ",
            "]UQEPh0",
            "Ej\"E",
            "U3uMQ",
            "EMu}",
            "EEPMQUR",
            "EPMQ",
            "E_^]U",
            "Ej\"E",
            "U3uMQ",
            "EMu}",
            "EEPMQUR",
            "EPMQC",
            "E_^]U",
            "MUR_",
            "MU;UuTj\"E",
            "U3uj\"M",
            "E3\u0245uUREPMQ",
            "EMUA",
            "EEMP",
            "EPMQ",
            "3]% ",
            "t650",
            "SUVt$",
            "u\t3_^][",
            "WVS\u0445t",
            "WVSu\t3_^][",
            "WVSZ",
            "WPSt",
            "u\"WVSu",
            "WVS\u040b_^][",
            "rb_intern",
            "rb_define_method",
            "rb_define_singleton_method",
            "rb_define_alloc_func",
            "rb_define_class_under",
            "rb_cObject",
            "rb_define_module",
            "rb_data_object_alloc",
            "ruby_xcalloc",
            "rb_raise",
            "rb_eNotImpError",
            "rb_check_type",
            "rb_cvar_get",
            "rb_notimplement",
            "rb_cvar_defined",
            "rb_str_new",
            "ruby_xmalloc",
            "rb_string_value",
            "rb_eTypeError",
            "rb_cSymbol",
            "rb_cTrueClass",
            "rb_cFalseClass",
            "rb_cNilClass",
            "rb_cFixnum",
            "rb_check_frozen",
            "rb_scan_args",
            "rb_str_cmp",
            "msvcrt-ruby18.dll",
            "free",
            "MSVCRT.dll",
            "_initterm",
            "malloc",
            "_adjust_fdiv",
            "DisableThreadLibraryCalls",
            "KERNEL32.dll",
            "digest.so",
            "Init_digest",
            "metadata",
            "to_s",
            "update",
            "initialize_copy",
            "initialize",
            "hexdigest",
            "digest",
            "Base",
            "Digest",
            "Digest::Base is an abstract class",
            "wrong argument class",
            "0$02070<0L0Q0W0g0l0r0000000000000000",
            "1\"1'1,1<1A1G1U1b1{11111",
            "2233",
            "4%474Q4",
            "444444455555Y6666667777\t8",
            "86888\"949G9Z9t999999:::::::",
            ";$;*;0;6;<;B;[;f;l;w;;;;;;;;;;;;",
            "<3<X<<<<<",
            "digest.so",
            "NB10",
            "D:\\Prog\\WIN\\ruby\\build\\ext\\digest\\digest.pdb",
            "L!This program cannot be run in DOS mode.",
            "ri!i!i!i!i!J!i!i!i!pv!i!Richi!",
            ".text",
            "`.rdata",
            "@.data",
            ".reloc",
            "Eh<@",
            "EEPh8@",
            "Ph,@",
            "#EgE",
            "MUUMuEU",
            "UUE+EEM",
            "E@EM@M}@r",
            "_^]UXVWE",
            "}MMU#UE#E",
            "xj\u05c9MU",
            "UUM#MU#U",
            "MME#EM#M",
            "p $UE",
            "EEU#UE#E",
            "UUM#MU#U",
            "MME#EM#M",
            "*\u0187GUE",
            "EEU#UE#E",
            "F0MU",
            "UUM#MU#U",
            "MME#EM#M",
            "\u040bEH ",
            "\u0618iUE",
            "EEU#UE#E",
            "\u028bUB$",
            "UUM#MU#U",
            "MME#EM#M",
            "\u040bEH,",
            "EEU#UE#E",
            "\u028bUB0",
            "UUM#MU#U",
            "MME#EM#M",
            "\u040bEH8",
            "CyUE",
            "EEU#UE#E",
            "\u028bUB<",
            "UUM#MU\u048bE#",
            "EEU#UE\u040bM#",
            "@@EM\tU",
            "MME#EM\u044bU#",
            "\u020bUB,",
            "QZ^&MU",
            "UUM#MU\u048bE#",
            "EEU#UE\u040bM#",
            "/\u0589EM",
            "MME#EM\u044bU#",
            "\u020bUB(",
            "MU\tE",
            "UUM#MU\u048bE#",
            "\u044bEH<",
            "EEU#UE\u040bM#",
            "MME#EM\u044bU#",
            "\u020bUB$",
            "UUM#MU\u048bE#",
            "\u044bEH8",
            "UE\tM",
            "EEU#UE\u040bM#",
            "MME#EM\u044bU#",
            "\u020bUB ",
            "ZEMU",
            "UUM#MU\u048bE#",
            "\u044bEH4",
            "EEU#UE\u040bM#",
            "EM\tU",
            "MME#EM\u044bU#",
            "ogMU",
            "UUM#MU\u048bE#",
            "\u044bEH0",
            "L*UE",
            "EEU3U3UE",
            "B9EM",
            "MME3E3EM",
            "\u020bUB ",
            "UUM3M3MU",
            "\u044bEH,",
            "\"amUE",
            "EEU3U3UE",
            "MME3E3EM",
            "D\uafa4MU",
            "UUM3M3MU",
            "EEU3U3UE",
            "`KEM",
            "MME3E3EM",
            "\u020bUB(",
            "UUM3M3MU",
            "\u044bEH4",
            "~(UE",
            "EEU3U3UE",
            "MME3E3EM",
            "0\u0509MU",
            "UUM3M3MU",
            "EEU3U3UE",
            "9\u0649EM",
            "MME3E3EM",
            "\u020bUB0",
            "UUM3M3MU",
            "\u044bEH<",
            "EEU3U3UE",
            "eV\u0109EM",
            "MME\u040bM",
            "\u020bU3\u044bE",
            "D\")EM",
            "MME\u040bM",
            "\u020bU3\u044bE",
            "*CEM",
            "MME\u040bM",
            "\u020bU3\u044bE",
            "MME\u040bM",
            "\u020bU3\u044bE",
            "MME\u040bM",
            "\u020bU3\u044bE",
            "Y[eEM",
            "MME\u040bM",
            "\u020bU3\u044bE",
            "MME\u040bM",
            "\u020bU3\u044bE",
            "MME\u040bM",
            "\u020bU3\u044bE",
            "MME\u040bM",
            "\u020bU3\u044bE",
            "O~oEM",
            "MME\u040bM",
            "\u020bU3\u044bE",
            "MME\u040bM",
            "\u020bU3\u044bE",
            "MME\u040bM",
            "\u020bU3\u044bE",
            "MME\u040bM",
            "\u020bU3\u044bE",
            "~SEM",
            "MME\u040bM",
            "\u020bU3\u044bE",
            "5:EM",
            "MME\u040bM",
            "\u020bU3\u044bE",
            "MME\u040bM",
            "\u020bU3\u044bE",
            "_^]U",
            "PMQ-",
            "s$E3\u024aL",
            "Qh`@",
            "\u034b]UQVW",
            "3u @",
            "3u\tE",
            "E_^]%80",
            "t65p@",
            "SUVt$",
            "u\t3_^][",
            "WVS\u0445t",
            "WVSu\t3_^][",
            "WVSZ",
            "WPSt",
            "u\"WVSu",
            "WVS\u040b_^][",
            "rb_cvar_set",
            "rb_intern",
            "rb_data_object_alloc",
            "rb_cObject",
            "rb_define_class_under",
            "rb_path2class",
            "rb_require",
            "msvcrt-ruby18.dll",
            "sprintf",
            "MSVCRT.dll",
            "free",
            "_initterm",
            "malloc",
            "_adjust_fdiv",
            "DisableThreadLibraryCalls",
            "KERNEL32.dll",
            "md5.so",
            "Init_md5",
            "metadata",
            "Digest::Base",
            "Digest",
            "digest.so",
            "%02x",
            "0$080R0X0i0",
            "0y11",
            "2;2F2L2W2d2l222222222222",
            "3833333",
            "0 0$0(0",
            "md5.so",
            "NB10",
            "D:\\Prog\\WIN\\ruby\\build\\ext\\digest\\md5\\md5.pdb",
            "require 'nkf'",
            "module Kconv",
            "  AUTO = NKF::AUTO",
            "  JIS = NKF::JIS",
            "  EUC = NKF::EUC",
            "  SJIS = NKF::SJIS",
            "  BINARY = NKF::BINARY",
            "  NOCONV = NKF::NOCONV",
            "  UNKNOWN = NKF::UNKNOWN",
            "  def kconv(str, out_code, in_code = AUTO)",
            "    opt = '-'",
            "    case in_code",
            "    when NKF::JIS",
            "      opt << 'J'",
            "    when NKF::EUC",
            "      opt << 'E'",
            "    when NKF::SJIS",
            "      opt << 'S'",
            "    end",
            "    case out_code",
            "    when NKF::JIS",
            "      opt << 'j'",
            "    when NKF::EUC",
            "      opt << 'e'",
            "    when NKF::SJIS",
            "      opt << 's'",
            "    when NKF::NOCONV",
            "      return str",
            "    end",
            "    opt = '' if opt == '-'",
            "    NKF::nkf(opt, str)",
            "  end",
            "  module_function :kconv",
            "  def tojis(str)",
            "    NKF::nkf('-j', str)",
            "  end",
            "  module_function :tojis",
            "  def toeuc(str)",
            "    NKF::nkf('-e', str)",
            "  end",
            "  module_function :toeuc",
            "  def tosjis(str)",
            "    NKF::nkf('-s', str)",
            "  end",
            "  module_function :tosjis",
            "  def guess(str)",
            "    NKF::guess(str)",
            "  end",
            "  module_function :guess",
            "class String",
            "  def kconv(out_code, in_code=Kconv::AUTO)",
            "    Kconv::kconv(self, out_code, in_code)",
            "  end",
            "  def tojis",
            "    NKF::nkf('-j', self)",
            "  end",
            "  def toeuc",
            "    NKF::nkf('-e', self)",
            "  end",
            "  def tosjis",
            "    NKF::nkf('-s', self)",
            "  end",
            "=begin",
            "= monitor.rb",
            "Copyright (C) 2001  Shugo Maeda <shugo@ruby-lang.org>",
            "This library is distributed under the terms of the Ruby license.",
            "You can freely distribute/modify this library.",
            "== example",
            "This is a simple example.",
            "  require 'monitor.rb'",
            "  buf = []",
            "  buf.extend(MonitorMixin)",
            "  empty_cond = buf.new_cond",
            "  # consumer",
            "  Thread.start do",
            "    loop do",
            "      buf.synchronize do",
            "        empty_cond.wait_while { buf.empty? }",
            "        print buf.shift",
            "      end",
            "    end",
            "  end",
            "  # producer",
            "  while line = ARGF.gets",
            "    buf.synchronize do",
            "      buf.push(line)",
            "      empty_cond.signal",
            "    end",
            "  end",
            "The consumer thread waits for the producer thread to push a line",
            "to buf while buf.empty?, and the producer thread (main thread)",
            "reads a line from ARGF and push it to buf, then call",
            "empty_cond.signal.",
            "=end",
            "# Adds monitor functionality to an arbitrary object by mixing the module with",
            "# +include+.  For example:",
            "#    require 'monitor.rb'",
            "#    ",
            "#    buf = []",
            "#    buf.extend(MonitorMixin)",
            "#    empty_cond = buf.new_cond",
            "#    ",
            "#    # consumer",
            "#    Thread.start do",
            "#      loop do",
            "#        buf.synchronize do",
            "#          empty_cond.wait_while { buf.empty? }",
            "#          print buf.shift",
            "#        end",
            "#      end",
            "#    end",
            "#    ",
            "#    # producer",
            "#    while line = ARGF.gets",
            "#      buf.synchronize do",
            "#        buf.push(line)",
            "#        empty_cond.signal",
            "#      end",
            "#    end",
            "# The consumer thread waits for the producer thread to push a line",
            "# to buf while buf.empty?, and the producer thread (main thread)",
            "# reads a line from ARGF and push it to buf, then call",
            "# empty_cond.signal.",
            "module MonitorMixin",
            "  # FIXME: This isn't documented in Nutshell.",
            "  # Since MonitorMixin.new_cond returns a ConditionVariable, and the example",
            "  # above calls while_wait and signal, this class should be documented.",
            "  class ConditionVariable",
            "    class Timeout < Exception; end",
            "    ",
            "    def wait(timeout = nil)",
            "      @monitor.__send__(:mon_check_owner)",
            "      timer = create_timer(timeout)",
            "      ",
            "      Thread.critical = true",
            "      count = @monitor.__send__(:mon_exit_for_cond)",
            "      @waiters.push(Thread.current)",
            "      begin",
            "\tThread.stop",
            "        return true",
            "      rescue Timeout",
            "        return false",
            "      ensure",
            "\tThread.critical = true",
            "\tif timer && timer.alive?",
            "\t  Thread.kill(timer)",
            "\tend",
            "\tif @waiters.include?(Thread.current)  # interrupted?",
            "\t  @waiters.delete(Thread.current)",
            "\tend",
            "        @monitor.__send__(:mon_enter_for_cond, count)",
            "\tThread.critical = false",
            "      end",
            "    end",
            "    ",
            "    def wait_while",
            "      while yield",
            "\twait",
            "      end",
            "    end",
            "    ",
            "    def wait_until",
            "      until yield",
            "\twait",
            "      end",
            "    end",
            "    ",
            "    def signal",
            "      @monitor.__send__(:mon_check_owner)",
            "      Thread.critical = true",
            "      t = @waiters.shift",
            "      t.wakeup if t",
            "      Thread.critical = false",
            "      Thread.pass",
            "    end",
            "    ",
            "    def broadcast",
            "      @monitor.__send__(:mon_check_owner)",
            "      Thread.critical = true",
            "      for t in @waiters",
            "\tt.wakeup",
            "      end",
            "      @waiters.clear",
            "      Thread.critical = false",
            "      Thread.pass",
            "    end",
            "    ",
            "    def count_waiters",
            "      return @waiters.length",
            "    end",
            "    ",
            "    private",
            "    def initialize(monitor)",
            "      @monitor = monitor",
            "      @waiters = []",
            "    end",
            "    def create_timer(timeout)",
            "      if timeout",
            "\twaiter = Thread.current",
            "\treturn Thread.start {",
            "\t  Thread.pass",
            "\t  sleep(timeout)",
            "\t  Thread.critical = true",
            "\t  waiter.raise(Timeout.new)",
            "      else",
            "        return nil",
            "      end",
            "    end",
            "  end",
            "  def self.extend_object(obj)",
            "    super(obj)",
            "    obj.__send__(:mon_initialize)",
            "  end",
            "  # Attempts to enter exclusive section.  Returns +false+ if lock fails.",
            "  def mon_try_enter",
            "    result = false",
            "    Thread.critical = true",
            "    if @mon_owner.nil?",
            "      @mon_owner = Thread.current",
            "    end",
            "    if @mon_owner == Thread.current",
            "      @mon_count += 1",
            "      result = true",
            "    end",
            "    Thread.critical = false",
            "    return result",
            "  end",
            "  # For backward compatibility",
            "  alias try_mon_enter mon_try_enter",
            "  # Enters exclusive section.",
            "  def mon_enter",
            "    Thread.critical = true",
            "    mon_acquire(@mon_entering_queue)",
            "    @mon_count += 1",
            "    Thread.critical = false",
            "  end",
            "  # Leaves exclusive section.",
            "  def mon_exit",
            "    mon_check_owner",
            "    Thread.critical = true",
            "    @mon_count -= 1",
            "    if @mon_count == 0",
            "      mon_release",
            "    end",
            "    Thread.critical = false",
            "    Thread.pass",
            "  end",
            "  # Enters exclusive section and executes the block.  Leaves the exclusive",
            "  # section automatically when the block exits.  See example under",
            "  # +MonitorMixin+.",
            "  def mon_synchronize",
            "    mon_enter",
            "    begin",
            "      yield",
            "    ensure",
            "      mon_exit",
            "    end",
            "  end",
            "  alias synchronize mon_synchronize",
            "  # FIXME: This isn't documented in Nutshell.",
            "  def new_cond",
            "    return ConditionVariable.new(self)",
            "  end",
            "  private",
            "  def initialize(*args)",
            "    super",
            "    mon_initialize",
            "  end",
            "  def mon_initialize",
            "    @mon_owner = nil",
            "    @mon_count = 0",
            "    @mon_entering_queue = []",
            "    @mon_waiting_queue = []",
            "  end",
            "  def mon_check_owner",
            "    if @mon_owner != Thread.current",
            "      raise ThreadError, \"current thread not owner\"",
            "    end",
            "  end",
            "  def mon_acquire(queue)",
            "    while @mon_owner && @mon_owner != Thread.current",
            "      queue.push(Thread.current)",
            "      Thread.stop",
            "      Thread.critical = true",
            "    end",
            "    @mon_owner = Thread.current",
            "  end",
            "  def mon_release",
            "    @mon_owner = nil",
            "    t = @mon_waiting_queue.shift",
            "    t = @mon_entering_queue.shift unless t",
            "    t.wakeup if t",
            "  end",
            "  def mon_enter_for_cond(count)",
            "    mon_acquire(@mon_waiting_queue)",
            "    @mon_count = count",
            "  end",
            "  def mon_exit_for_cond",
            "    count = @mon_count",
            "    @mon_count = 0",
            "    mon_release",
            "    return count",
            "  end",
            "class Monitor",
            "  include MonitorMixin",
            "  alias try_enter try_mon_enter",
            "  alias enter mon_enter",
            "  alias exit mon_exit",
            "# Documentation comments:",
            "#  - All documentation comes from Nutshell.",
            "#  - MonitorMixin.new_cond appears in the example, but is not documented in",
            "#    Nutshell.",
            "#  - All the internals (internal modules Accessible and Initializable, class",
            "#    ConditionVariable) appear in RDoc.  It might be good to hide them, by",
            "#    making them private, or marking them :nodoc:, etc.",
            "#  - The entire example from the RD section at the top is replicated in the RDoc",
            "#    comment for MonitorMixin.  Does the RD section need to remain?",
            "#  - RDoc doesn't recognise aliases, so we have mon_synchronize documented, but",
            "#    not synchronize.",
            "#  - mon_owner is in Nutshell, but appears as an accessor in a separate module",
            "#    here, so is hard/impossible to RDoc.  Some other useful accessors",
            "#    (mon_count and some queue stuff) are also in this module, and don't appear",
            "#    directly in the RDoc output.",
            "#  - in short, it may be worth changing the code layout in this file to make the",
            "#    documentation easier",
            "# Local variables:",
            "# mode: Ruby",
            "# tab-width: 8",
            "# End:",
            "# = net/ftp.rb - FTP Client Library",
            "# Written by Shugo Maeda <shugo@ruby-lang.org>.",
            "# Documentation by Gavin Sinclair, sourced from \"Programming Ruby\" (Hunt/Thomas)",
            "# and \"Ruby In a Nutshell\" (Matsumoto), used with permission.",
            "# This library is distributed under the terms of the Ruby license.",
            "# You can freely distribute/modify this library.",
            "# It is included in the Ruby standard library.",
            "# See the Net::FTP class for an overview.",
            "require \"socket\"",
            "require \"monitor\"",
            "module Net",
            "  # :stopdoc:",
            "  class FTPError < StandardError; end",
            "  class FTPReplyError < FTPError; end",
            "  class FTPTempError < FTPError; end ",
            "  class FTPPermError < FTPError; end ",
            "  class FTPProtoError < FTPError; end",
            "  # :startdoc:",
            "  # This class implements the File Transfer Protocol.  If you have used a",
            "  # command-line FTP program, and are familiar with the commands, you will be",
            "  # able to use this class easily.  Some extra features are included to take",
            "  # advantage of Ruby's style and strengths.",
            "  # == Example",
            "  # ",
            "  #   require 'net/ftp'",
            "  # === Example 1",
            "  #  ",
            "  #   ftp = Net::FTP.new('ftp.netlab.co.jp')",
            "  #   ftp.login",
            "  #   files = ftp.chdir('pub/lang/ruby/contrib')",
            "  #   files = ftp.list('n*')",
            "  #   ftp.getbinaryfile('nif.rb-0.91.gz', 'nif.gz', 1024)",
            "  #   ftp.close",
            "  # === Example 2",
            "  #   Net::FTP.open('ftp.netlab.co.jp') do |ftp|",
            "  #     ftp.login",
            "  #     files = ftp.chdir('pub/lang/ruby/contrib')",
            "  #     files = ftp.list('n*')",
            "  #     ftp.getbinaryfile('nif.rb-0.91.gz', 'nif.gz', 1024)",
            "  #   end",
            "  # == Major Methods",
            "  # The following are the methods most likely to be useful to users:",
            "  # - FTP.open",
            "  # - #getbinaryfile",
            "  # - #gettextfile",
            "  # - #putbinaryfile",
            "  # - #puttextfile",
            "  # - #chdir",
            "  # - #nlst",
            "  # - #size",
            "  # - #rename",
            "  # - #delete",
            "  class FTP",
            "    include MonitorMixin",
            "    ",
            "    # :stopdoc:",
            "    FTP_PORT = 21",
            "    CRLF = \"\\r\\n\"",
            "    DEFAULT_BLOCKSIZE = 4096",
            "    # :startdoc:",
            "    ",
            "    # When +true+, transfers are performed in binary mode.  Default: +true+.",
            "    attr_accessor :binary",
            "    # When +true+, the connection is in passive mode.  Default: +false+.",
            "    attr_accessor :passive",
            "    # When +true+, all traffic to and from the server is written",
            "    # to +$stdout+.  Default: +false+.",
            "    attr_accessor :debug_mode",
            "    # Sets or retrieves the +resume+ status, which decides whether incomplete",
            "    # transfers are resumed or restarted.  Default: +false+.",
            "    attr_accessor :resume",
            "    # The server's welcome message.",
            "    attr_reader :welcome",
            "    # The server's last response code.",
            "    attr_reader :last_response_code",
            "    alias lastresp last_response_code",
            "    # The server's last response.",
            "    attr_reader :last_response",
            "    ",
            "    #",
            "    # A synonym for <tt>FTP.new</tt>, but with a mandatory host parameter.",
            "    #",
            "    # If a block is given, it is passed the +FTP+ object, which will be closed",
            "    # when the block finishes, or when an exception is raised.",
            "    #",
            "    def FTP.open(host, user = nil, passwd = nil, acct = nil)",
            "      if block_given?",
            "        ftp = new(host, user, passwd, acct)",
            "        begin",
            "          yield ftp",
            "        ensure",
            "          ftp.close",
            "        end",
            "      else",
            "        new(host, user, passwd, acct)",
            "      end",
            "    end",
            "    ",
            "    #",
            "    # Creates and returns a new +FTP+ object. If a +host+ is given, a connection",
            "    # is made. Additionally, if the +user+ is given, the given user name,",
            "    # password, and (optionally) account are used to log in.  See #login.",
            "    #",
            "    def initialize(host = nil, user = nil, passwd = nil, acct = nil)",
            "      super()",
            "      @binary = true",
            "      @passive = false",
            "      @debug_mode = false",
            "      @resume = false",
            "      if host",
            "\tconnect(host)",
            "\tif user",
            "\t  login(user, passwd, acct)",
            "\tend",
            "      end",
            "    end",
            "    # Obsolete",
            "    def return_code",
            "      $stderr.puts(\"warning: Net::FTP#return_code is obsolete and do nothing\")",
            "      return \"\\n\"",
            "    end",
            "    # Obsolete",
            "    def return_code=(s)",
            "      $stderr.puts(\"warning: Net::FTP#return_code= is obsolete and do nothing\")",
            "    end",
            "    def open_socket(host, port)",
            "      if defined? SOCKSsocket and ENV[\"SOCKS_SERVER\"]",
            "\t@passive = true",
            "\treturn SOCKSsocket.open(host, port)",
            "      else",
            "\treturn TCPSocket.open(host, port)",
            "      end",
            "    end",
            "    private :open_socket",
            "    ",
            "    #",
            "    # Establishes an FTP connection to host, optionally overriding the default",
            "    # port. If the environment variable +SOCKS_SERVER+ is set, sets up the",
            "    # connection through a SOCKS proxy. Raises an exception (typically",
            "    # <tt>Errno::ECONNREFUSED</tt>) if the connection cannot be established.",
            "    #",
            "    def connect(host, port = FTP_PORT)",
            "      if @debug_mode",
            "\tprint \"connect: \", host, \", \", port, \"\\n\"",
            "      end",
            "      synchronize do",
            "\t@sock = open_socket(host, port)",
            "\tvoidresp",
            "      end",
            "    end",
            "    #",
            "    # WRITEME or make private",
            "    #",
            "    def set_socket(sock, get_greeting = true)",
            "      synchronize do",
            "\t@sock = sock",
            "\tif get_greeting",
            "\t  voidresp",
            "\tend",
            "      end",
            "    end",
            "    def sanitize(s)",
            "      if s =~ /^PASS /i",
            "\treturn s[0, 5] + \"*\" * (s.length - 5)",
            "      else",
            "\treturn s",
            "      end",
            "    end",
            "    private :sanitize",
            "    ",
            "    def putline(line)",
            "      if @debug_mode",
            "\tprint \"put: \", sanitize(line), \"\\n\"",
            "      end",
            "      line = line + CRLF",
            "      @sock.write(line)",
            "    end",
            "    private :putline",
            "    ",
            "    def getline",
            "      line = @sock.readline # if get EOF, raise EOFError",
            "      line.sub!(/(\\r\\n|\\n|\\r)\\z/n, \"\")",
            "      if @debug_mode",
            "\tprint \"get: \", sanitize(line), \"\\n\"",
            "      end",
            "      return line",
            "    end",
            "    private :getline",
            "    ",
            "    def getmultiline",
            "      line = getline",
            "      buff = line",
            "      if line[3] == ?-",
            "\t  code = line[0, 3]",
            "\tbegin",
            "\t  line = getline",
            "\t  buff << \"\\n\" << line",
            "\tend until line[0, 3] == code and line[3] != ?-",
            "      end",
            "      return buff << \"\\n\"",
            "    end",
            "    private :getmultiline",
            "    ",
            "    def getresp",
            "      @last_response = getmultiline",
            "      @last_response_code = @last_response[0, 3]",
            "      case @last_response_code",
            "      when /\\A[123]/",
            "\treturn @last_response",
            "      when /\\A4/",
            "\traise FTPTempError, @last_response",
            "      when /\\A5/",
            "\traise FTPPermError, @last_response",
            "      else",
            "\traise FTPProtoError, @last_response",
            "      end",
            "    end",
            "    private :getresp",
            "    ",
            "    def voidresp",
            "      resp = getresp",
            "      if resp[0] != ?2",
            "\traise FTPReplyError, resp",
            "      end",
            "    end",
            "    private :voidresp",
            "    ",
            "    #",
            "    # Sends a command and returns the response.",
            "    #",
            "    def sendcmd(cmd)",
            "      synchronize do",
            "\tputline(cmd)",
            "\treturn getresp",
            "      end",
            "    end",
            "    ",
            "    #",
            "    # Sends a command and expect a response beginning with '2'.",
            "    #",
            "    def voidcmd(cmd)",
            "      synchronize do",
            "\tputline(cmd)",
            "\tvoidresp",
            "      end",
            "    end",
            "    ",
            "    def sendport(host, port)",
            "      af = (@sock.peeraddr)[0]",
            "      if af == \"AF_INET\"",
            "\thbytes = host.split(\".\")",
            "\tpbytes = [port / 256, port % 256]",
            "\tbytes = hbytes + pbytes",
            "\tcmd = \"PORT \" + bytes.join(\",\")",
            "      elsif af == \"AF_INET6\"",
            "\tcmd = \"EPRT |2|\" + host + \"|\" + sprintf(\"%d\", port) + \"|\"",
            "      else",
            "\traise FTPProtoError, host",
            "      end",
            "      voidcmd(cmd)",
            "    end",
            "    private :sendport",
            "    ",
            "    def makeport",
            "      sock = TCPServer.open(@sock.addr[3], 0)",
            "      port = sock.addr[1]",
            "      host = sock.addr[3]",
            "      resp = sendport(host, port)",
            "      return sock",
            "    end",
            "    private :makeport",
            "    ",
            "    def makepasv",
            "      if @sock.peeraddr[0] == \"AF_INET\"",
            "\thost, port = parse227(sendcmd(\"PASV\"))",
            "      else",
            "\thost, port = parse229(sendcmd(\"EPSV\"))",
            "\t#     host, port = parse228(sendcmd(\"LPSV\"))",
            "      end",
            "      return host, port",
            "    end",
            "    private :makepasv",
            "    ",
            "    def transfercmd(cmd, rest_offset = nil)",
            "      if @passive",
            "\thost, port = makepasv",
            "\tconn = open_socket(host, port)",
            "\tif @resume and rest_offset",
            "\t  resp = sendcmd(\"REST \" + rest_offset.to_s) ",
            "\t  if resp[0] != ?3",
            "\t    raise FTPReplyError, resp",
            "\t  end",
            "\tend",
            "\tresp = sendcmd(cmd)",
            "\tif resp[0] != ?1",
            "\t  raise FTPReplyError, resp",
            "\tend",
            "      else",
            "\tsock = makeport",
            "\tif @resume and rest_offset",
            "\t  resp = sendcmd(\"REST \" + rest_offset.to_s) ",
            "\t  if resp[0] != ?3",
            "\t    raise FTPReplyError, resp",
            "\t  end",
            "\tend",
            "\tresp = sendcmd(cmd)",
            "\tif resp[0] != ?1",
            "\t  raise FTPReplyError, resp",
            "\tend",
            "\tconn = sock.accept",
            "\tsock.close",
            "      end",
            "      return conn",
            "    end",
            "    private :transfercmd",
            "    ",
            "    def getaddress",
            "      thishost = Socket.gethostname",
            "      if not thishost.index(\".\")",
            "\tthishost = Socket.gethostbyname(thishost)[0]",
            "      end",
            "      if ENV.has_key?(\"LOGNAME\")",
            "\trealuser = ENV[\"LOGNAME\"]",
            "      elsif ENV.has_key?(\"USER\")",
            "\trealuser = ENV[\"USER\"]",
            "      else",
            "\trealuser = \"anonymous\"",
            "      end",
            "      return realuser + \"@\" + thishost",
            "    end",
            "    private :getaddress",
            "    ",
            "    #",
            "    # Logs in to the remote host. The session must have been previously",
            "    # connected.  If +user+ is the string \"anonymous\" and the +password+ is",
            "    # +nil+, a password of <tt>user@host</tt> is synthesized. If the +acct+",
            "    # parameter is not +nil+, an FTP ACCT command is sent following the",
            "    # successful login.  Raises an exception on error (typically",
            "    # <tt>Net::FTPPermError</tt>).",
            "    #",
            "    def login(user = \"anonymous\", passwd = nil, acct = nil)",
            "      if user == \"anonymous\" and passwd == nil",
            "\tpasswd = getaddress",
            "      end",
            "      ",
            "      resp = \"\"",
            "      synchronize do",
            "\tresp = sendcmd('USER ' + user)",
            "\tif resp[0] == ?3",
            "\t  resp = sendcmd('PASS ' + passwd)",
            "\tend",
            "\tif resp[0] == ?3",
            "\t  resp = sendcmd('ACCT ' + acct)",
            "\tend",
            "      end",
            "      if resp[0] != ?2",
            "\traise FTPReplyError, resp",
            "      end",
            "      @welcome = resp",
            "    end",
            "    ",
            "    #",
            "    # Puts the connection into binary (image) mode, issues the given command,",
            "    # and fetches the data returned, passing it to the associated block in",
            "    # chunks of +blocksize+ characters. Note that +cmd+ is a server command",
            "    # (such as \"RETR myfile\").",
            "    #",
            "    def retrbinary(cmd, blocksize, rest_offset = nil) # :yield: data",
            "      synchronize do",
            "\tvoidcmd(\"TYPE I\")",
            "\tconn = transfercmd(cmd, rest_offset)",
            "\tloop do",
            "\t  data = conn.read(blocksize)",
            "\t  break if data == nil",
            "\t  yield(data)",
            "\tend",
            "\tconn.close",
            "\tvoidresp",
            "      end",
            "    end",
            "    ",
            "    #",
            "    # Puts the connection into ASCII (text) mode, issues the given command, and",
            "    # passes the resulting data, one line at a time, to the associated block. If",
            "    # no block is given, prints the lines. Note that +cmd+ is a server command",
            "    # (such as \"RETR myfile\").",
            "    #",
            "    def retrlines(cmd) # :yield: line",
            "      synchronize do",
            "\tvoidcmd(\"TYPE A\")",
            "\tconn = transfercmd(cmd)",
            "\tloop do",
            "\t  line = conn.gets",
            "\t  break if line == nil",
            "\t  if line[-2, 2] == CRLF",
            "\t    line = line[0 .. -3]",
            "\t  elsif line[-1] == ?\\n",
            "\t    line = line[0 .. -2]",
            "\t  end",
            "\t  yield(line)",
            "\tend",
            "\tconn.close",
            "\tvoidresp",
            "      end",
            "    end",
            "    ",
            "    #",
            "    # Puts the connection into binary (image) mode, issues the given server-side",
            "    # command (such as \"STOR myfile\"), and sends the contents of the file named",
            "    # +file+ to the server. If the optional block is given, it also passes it",
            "    # the data, in chunks of +blocksize+ characters.",
            "    #",
            "    def storbinary(cmd, file, blocksize, rest_offset = nil, &block) # :yield: data",
            "      if rest_offset",
            "        file.seek(rest_offset, IO::SEEK_SET)",
            "      end",
            "      synchronize do",
            "\tvoidcmd(\"TYPE I\")",
            "\tconn = transfercmd(cmd, rest_offset)",
            "\tloop do",
            "\t  buf = file.read(blocksize)",
            "\t  break if buf == nil",
            "\t  conn.write(buf)",
            "\t  yield(buf) if block",
            "\tend",
            "\tconn.close",
            "\tvoidresp",
            "      end",
            "    end",
            "    ",
            "    #",
            "    # Puts the connection into ASCII (text) mode, issues the given server-side",
            "    # command (such as \"STOR myfile\"), and sends the contents of the file",
            "    # named +file+ to the server, one line at a time. If the optional block is",
            "    # given, it also passes it the lines.",
            "    #",
            "    def storlines(cmd, file, &block) # :yield: line",
            "      synchronize do",
            "\tvoidcmd(\"TYPE A\")",
            "\tconn = transfercmd(cmd)",
            "\tloop do",
            "\t  buf = file.gets",
            "\t  break if buf == nil",
            "\t  if buf[-2, 2] != CRLF",
            "\t    buf = buf.chomp + CRLF",
            "\t  end",
            "\t  conn.write(buf)",
            "\t  yield(buf) if block",
            "\tend",
            "\tconn.close",
            "\tvoidresp",
            "      end",
            "    end",
            "    #",
            "    # Retrieves +remotefile+ in binary mode, storing the result in +localfile+.",
            "    # If a block is supplied, it is passed the retrieved data in +blocksize+",
            "    # chunks.",
            "    #",
            "    def getbinaryfile(remotefile, localfile = File.basename(remotefile),",
            "\t\t      blocksize = DEFAULT_BLOCKSIZE, &block) # :yield: data",
            "      if @resume",
            "\trest_offset = File.size?(localfile)",
            "\tf = open(localfile, \"a\")",
            "      else",
            "\trest_offset = nil",
            "\tf = open(localfile, \"w\")",
            "      end",
            "      begin",
            "\tf.binmode",
            "\tretrbinary(\"RETR \" + remotefile, blocksize, rest_offset) do |data|",
            "\t  f.write(data)",
            "\t  yield(data) if block",
            "\tend",
            "      ensure",
            "\tf.close",
            "      end",
            "    end",
            "    ",
            "    #",
            "    # Retrieves +remotefile+ in ASCII (text) mode, storing the result in",
            "    # +localfile+. If a block is supplied, it is passed the retrieved data one",
            "    # line at a time.",
            "    #",
            "    def gettextfile(remotefile, localfile = File.basename(remotefile), &block) # :yield: line",
            "      f = open(localfile, \"w\")",
            "      begin",
            "\tretrlines(\"RETR \" + remotefile) do |line|",
            "\t  f.puts(line)",
            "\t  yield(line) if block",
            "\tend",
            "      ensure",
            "\tf.close",
            "      end",
            "    end",
            "    #",
            "    # Retrieves +remotefile+ in whatever mode the session is set (text or",
            "    # binary).  See #gettextfile and #getbinaryfile.",
            "    #",
            "    def get(remotefile, localfile = File.basename(remotefile),",
            "\t    blocksize = DEFAULT_BLOCKSIZE, &block) # :yield: data",
            "      unless @binary",
            "\tgettextfile(remotefile, localfile, &block)",
            "      else",
            "\tgetbinaryfile(remotefile, localfile, blocksize, &block)",
            "      end",
            "    end",
            "    ",
            "    #",
            "    # Transfers +localfile+ to the server in binary mode, storing the result in",
            "    # +remotefile+. If a block is supplied, calls it, passing in the transmitted",
            "    # data in +blocksize+ chunks.",
            "    #",
            "    def putbinaryfile(localfile, remotefile = File.basename(localfile),",
            "\t\t      blocksize = DEFAULT_BLOCKSIZE, &block) # :yield: data",
            "      if @resume",
            "        begin",
            "          rest_offset = size(remotefile)",
            "        rescue Net::FTPPermError",
            "          rest_offset = nil",
            "        end",
            "      else",
            "\trest_offset = nil",
            "      end",
            "      f = open(localfile)",
            "      begin",
            "\tf.binmode",
            "\tstorbinary(\"STOR \" + remotefile, f, blocksize, rest_offset, &block)",
            "      ensure",
            "\tf.close",
            "      end",
            "    end",
            "    ",
            "    #",
            "    # Transfers +localfile+ to the server in ASCII (text) mode, storing the result",
            "    # in +remotefile+. If callback or an associated block is supplied, calls it,",
            "    # passing in the transmitted data one line at a time.",
            "    #",
            "    def puttextfile(localfile, remotefile = File.basename(localfile), &block) # :yield: line",
            "      f = open(localfile)",
            "      begin",
            "\tstorlines(\"STOR \" + remotefile, f, &block)",
            "      ensure",
            "\tf.close",
            "      end",
            "    end",
            "    #",
            "    # Transfers +localfile+ to the server in whatever mode the session is set",
            "    # (text or binary).  See #puttextfile and #putbinaryfile.",
            "    #",
            "    def put(localfile, remotefile = File.basename(localfile),",
            "\t    blocksize = DEFAULT_BLOCKSIZE, &block)",
            "      unless @binary",
            "\tputtextfile(localfile, remotefile, &block)",
            "      else",
            "\tputbinaryfile(localfile, remotefile, blocksize, &block)",
            "      end",
            "    end",
            "    #",
            "    # Sends the ACCT command.  TODO: more info.",
            "    #",
            "    def acct(account)",
            "      cmd = \"ACCT \" + account",
            "      voidcmd(cmd)",
            "    end",
            "    ",
            "    #",
            "    # Returns an array of filenames in the remote directory.",
            "    #",
            "    def nlst(dir = nil)",
            "      cmd = \"NLST\"",
            "      if dir",
            "\tcmd = cmd + \" \" + dir",
            "      end",
            "      files = []",
            "      retrlines(cmd) do |line|",
            "\tfiles.push(line)",
            "      end",
            "      return files",
            "    end",
            "    ",
            "    #",
            "    # Returns an array of file information in the directory (the output is like",
            "    # `ls -l`).  If a block is given, it iterates through the listing.",
            "    #",
            "    def list(*args, &block) # :yield: line",
            "      cmd = \"LIST\"",
            "      args.each do |arg|",
            "\tcmd = cmd + \" \" + arg",
            "      end",
            "      if block",
            "\tretrlines(cmd, &block)",
            "      else",
            "\tlines = []",
            "\tretrlines(cmd) do |line|",
            "\t  lines << line",
            "\tend",
            "\treturn lines",
            "      end",
            "    end",
            "    alias ls list",
            "    alias dir list",
            "    ",
            "    #",
            "    # Renames a file on the server.",
            "    #",
            "    def rename(fromname, toname)",
            "      resp = sendcmd(\"RNFR \" + fromname)",
            "      if resp[0] != ?3",
            "\traise FTPReplyError, resp",
            "      end",
            "      voidcmd(\"RNTO \" + toname)",
            "    end",
            "    ",
            "    #",
            "    # Deletes a file on the server.",
            "    #",
            "    def delete(filename)",
            "      resp = sendcmd(\"DELE \" + filename)",
            "      if resp[0, 3] == \"250\"",
            "\treturn",
            "      elsif resp[0] == ?5",
            "\traise FTPPermError, resp",
            "      else",
            "\traise FTPReplyError, resp",
            "      end",
            "    end",
            "    ",
            "    #",
            "    # Changes the (remote) directory.",
            "    #",
            "    def chdir(dirname)",
            "      if dirname == \"..\"",
            "\tbegin",
            "\t  voidcmd(\"CDUP\")",
            "\t  return",
            "\trescue FTPPermError",
            "\t  if $![0, 3] != \"500\"",
            "\t    raise FTPPermError, $!",
            "\t  end",
            "\tend",
            "      end",
            "      cmd = \"CWD \" + dirname",
            "      voidcmd(cmd)",
            "    end",
            "    ",
            "    #",
            "    # Returns the size of the given (remote) filename.",
            "    #",
            "    def size(filename)",
            "      voidcmd(\"TYPE I\")",
            "      resp = sendcmd(\"SIZE \" + filename)",
            "      if resp[0, 3] != \"213\" ",
            "\traise FTPReplyError, resp",
            "      end",
            "      return resp[3..-1].strip.to_i",
            "    end",
            "    ",
            "    MDTM_REGEXP = /^(\\d\\d\\d\\d)(\\d\\d)(\\d\\d)(\\d\\d)(\\d\\d)(\\d\\d)$/  # :nodoc:",
            "    ",
            "    #",
            "    # Returns the last modification time of the (remote) file.  If +local+ is",
            "    # +true+, it is returned as a local time, otherwise it's a UTC time.",
            "    #",
            "    def mtime(filename, local = false)",
            "      str = mdtm(filename)",
            "      ary = str.scan(MDTM_REGEXP)[0].collect {|i| i.to_i}",
            "      return local ? Time.local(*ary) : Time.gm(*ary)",
            "    end",
            "    ",
            "    #",
            "    # Creates a remote directory.",
            "    #",
            "    def mkdir(dirname)",
            "      resp = sendcmd(\"MKD \" + dirname)",
            "      return parse257(resp)",
            "    end",
            "    ",
            "    #",
            "    # Removes a remote directory.",
            "    #",
            "    def rmdir(dirname)",
            "      voidcmd(\"RMD \" + dirname)",
            "    end",
            "    ",
            "    #",
            "    # Returns the current remote directory.",
            "    #",
            "    def pwd",
            "      resp = sendcmd(\"PWD\")",
            "      return parse257(resp)",
            "    end",
            "    alias getdir pwd",
            "    ",
            "    #",
            "    # Returns system information.",
            "    #",
            "    def system",
            "      resp = sendcmd(\"SYST\")",
            "      if resp[0, 3] != \"215\"",
            "\traise FTPReplyError, resp",
            "      end",
            "      return resp[4 .. -1]",
            "    end",
            "    ",
            "    #",
            "    # Aborts the previous command (ABOR command).",
            "    #",
            "    def abort",
            "      line = \"ABOR\" + CRLF",
            "      print \"put: ABOR\\n\" if @debug_mode",
            "      @sock.send(line, Socket::MSG_OOB)",
            "      resp = getmultiline",
            "      unless [\"426\", \"226\", \"225\"].include?(resp[0, 3])",
            "\traise FTPProtoError, resp",
            "      end",
            "      return resp",
            "    end",
            "    ",
            "    #",
            "    # Returns the status (STAT command).",
            "    #",
            "    def status",
            "      line = \"STAT\" + CRLF",
            "      print \"put: STAT\\n\" if @debug_mode",
            "      @sock.send(line, Socket::MSG_OOB)",
            "      return getresp",
            "    end",
            "    ",
            "    #",
            "    # Issues the MDTM command.  TODO: more info.",
            "    #",
            "    def mdtm(filename)",
            "      resp = sendcmd(\"MDTM \" + filename)",
            "      if resp[0, 3] == \"213\"",
            "\treturn resp[3 .. -1].strip",
            "      end",
            "    end",
            "    ",
            "    #",
            "    # Issues the HELP command.",
            "    #",
            "    def help(arg = nil)",
            "      cmd = \"HELP\"",
            "      if arg",
            "\tcmd = cmd + \" \" + arg",
            "      end",
            "      sendcmd(cmd)",
            "    end",
            "    ",
            "    #",
            "    # Exits the FTP session.",
            "    #",
            "    def quit",
            "      voidcmd(\"QUIT\")",
            "    end",
            "    #",
            "    # Issues a NOOP command.",
            "    #",
            "    def noop",
            "      voidcmd(\"NOOP\")",
            "    end",
            "    #",
            "    # Issues a SITE command.",
            "    #",
            "    def site(arg)",
            "      cmd = \"SITE \" + arg",
            "      voidcmd(cmd)",
            "    end",
            "    ",
            "    #",
            "    # Closes the connection.  Further operations are impossible until you open",
            "    # a new connection with #connect.",
            "    #",
            "    def close",
            "      @sock.close if @sock and not @sock.closed?",
            "    end",
            "    ",
            "    #",
            "    # Returns +true+ iff the connection is closed.",
            "    #",
            "    def closed?",
            "      @sock == nil or @sock.closed?",
            "    end",
            "    ",
            "    def parse227(resp)",
            "      if resp[0, 3] != \"227\"",
            "\traise FTPReplyError, resp",
            "      end",
            "      left = resp.index(\"(\")",
            "      right = resp.index(\")\")",
            "      if left == nil or right == nil",
            "\traise FTPProtoError, resp",
            "      end",
            "      numbers = resp[left + 1 .. right - 1].split(\",\")",
            "      if numbers.length != 6",
            "\traise FTPProtoError, resp",
            "      end",
            "      host = numbers[0, 4].join(\".\")",
            "      port = (numbers[4].to_i << 8) + numbers[5].to_i",
            "      return host, port",
            "    end",
            "    private :parse227",
            "    ",
            "    def parse228(resp)",
            "      if resp[0, 3] != \"228\"",
            "\traise FTPReplyError, resp",
            "      end",
            "      left = resp.index(\"(\")",
            "      right = resp.index(\")\")",
            "      if left == nil or right == nil",
            "\traise FTPProtoError, resp",
            "      end",
            "      numbers = resp[left + 1 .. right - 1].split(\",\")",
            "      if numbers[0] == \"4\"",
            "\tif numbers.length != 9 || numbers[1] != \"4\" || numbers[2 + 4] != \"2\"",
            "\t  raise FTPProtoError, resp",
            "\tend",
            "\thost = numbers[2, 4].join(\".\")",
            "\tport = (numbers[7].to_i << 8) + numbers[8].to_i",
            "      elsif numbers[0] == \"6\"",
            "\tif numbers.length != 21 || numbers[1] != \"16\" || numbers[2 + 16] != \"2\"",
            "\t  raise FTPProtoError, resp",
            "\tend",
            "\tv6 = [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"]",
            "\tfor i in 0 .. 7",
            "\t  v6[i] = sprintf(\"%02x%02x\", numbers[(i * 2) + 2].to_i,",
            "\t\t\t  numbers[(i * 2) + 3].to_i)",
            "\tend",
            "\thost = v6[0, 8].join(\":\")",
            "\tport = (numbers[19].to_i << 8) + numbers[20].to_i",
            "      end ",
            "      return host, port",
            "    end",
            "    private :parse228",
            "    ",
            "    def parse229(resp)",
            "      if resp[0, 3] != \"229\"",
            "\traise FTPReplyError, resp",
            "      end",
            "      left = resp.index(\"(\")",
            "      right = resp.index(\")\")",
            "      if left == nil or right == nil",
            "\traise FTPProtoError, resp",
            "      end",
            "      numbers = resp[left + 1 .. right - 1].split(resp[left + 1, 1])",
            "      if numbers.length != 4",
            "\traise FTPProtoError, resp",
            "      end",
            "      port = numbers[3].to_i",
            "      host = (@sock.peeraddr())[3]",
            "      return host, port",
            "    end",
            "    private :parse229",
            "    ",
            "    def parse257(resp)",
            "      if resp[0, 3] != \"257\"",
            "\traise FTPReplyError, resp",
            "      end",
            "      if resp[3, 2] != ' \"'",
            "\treturn \"\"",
            "      end",
            "      dirname = \"\"",
            "      i = 5",
            "      n = resp.length",
            "      while i < n",
            "\tc = resp[i, 1]",
            "\ti = i + 1",
            "\tif c == '\"'",
            "\t  if i > n or resp[i, 1] != '\"'",
            "\t    break",
            "\t  end",
            "\t  i = i + 1",
            "\tend",
            "\tdirname = dirname + c",
            "      end",
            "      return dirname",
            "    end",
            "    private :parse257",
            "  end",
            "# Documentation comments:",
            "#  - sourced from pickaxe and nutshell, with improvements (hopefully)",
            "#  - three methods should be private (search WRITEME)",
            "#  - two methods need more information (search TODO)",
            "# = net/http.rb",
            "# Copyright (c) 1999-2003 Yukihiro Matsumoto",
            "# Copyright (c) 1999-2003 Minero Aoki",
            "# Written & maintained by Minero Aoki <aamine@loveruby.net>.",
            "# This file is derived from \"http-access.rb\".",
            "# Documented by Minero Aoki; converted to RDoc by William Webber.",
            "# This program is free software. You can re-distribute and/or",
            "# modify this program under the same terms of ruby itself ---",
            "# Ruby Distribution License or GNU General Public License.",
            "# See Net::HTTP for an overview and examples. ",
            "# NOTE: You can find Japanese version of this document here:",
            "# http://www.ruby-lang.org/ja/man/?cmd=view;name=net%2Fhttp.rb",
            "# $Id: http.rb,v 1.100.2.6 2004/04/18 23:20:32 nobu Exp $",
            "#++ ",
            "require 'net/protocol'",
            "require 'uri'",
            "module Net # :nodoc:",
            "  # :stopdoc:",
            "  class HTTPBadResponse < StandardError; end",
            "  class HTTPHeaderSyntaxError < StandardError; end",
            "  # :startdoc:",
            "  # == What Is This Library?",
            "  # ",
            "  # This library provides your program functions to access WWW",
            "  # documents via HTTP, Hyper Text Transfer Protocol version 1.1.",
            "  # For details of HTTP, refer [RFC2616]",
            "  # (http://www.ietf.org/rfc/rfc2616.txt).",
            "  # ",
            "  # == Examples",
            "  # ",
            "  # === Getting Document From WWW Server",
            "  # ",
            "  # (formal version)",
            "  # ",
            "  #     require 'net/http'",
            "  #     Net::HTTP.start('www.example.com', 80) { |http|",
            "  #         response = http.get('/index.html')",
            "  #         puts response.body",
            "  #     }",
            "  # ",
            "  # (shorter version)",
            "  # ",
            "  #     require 'net/http'",
            "  #     Net::HTTP.get_print 'www.example.com', '/index.html'",
            "  # ",
            "  #             or",
            "  # ",
            "  #     require 'net/http'",
            "  #     require 'uri'",
            "  #     Net::HTTP.get_print URI.parse('http://www.example.com/index.html')",
            "  # ",
            "  # === Posting Form Data",
            "  # ",
            "  #     require 'net/http'",
            "  #     Net::HTTP.start('some.www.server', 80) { |http|",
            "  #         response = http.post('/cgi-bin/search.rb', 'query=ruby')",
            "  #     }",
            "  # ",
            "  # === Accessing via Proxy",
            "  # ",
            "  # Net::HTTP.Proxy creates http proxy class. It has same",
            "  # methods of Net::HTTP but its instances always connect to",
            "  # proxy, instead of given host.",
            "  # ",
            "  #     require 'net/http'",
            "  # ",
            "  #     proxy_addr = 'your.proxy.host'",
            "  #     proxy_port = 8080",
            "  #             :",
            "  #     Net::HTTP::Proxy(proxy_addr, proxy_port).start('www.example.com') {|http|",
            "  #         # always connect to your.proxy.addr:8080",
            "  #             :",
            "  #     }",
            "  # ",
            "  # Since Net::HTTP.Proxy returns Net::HTTP itself when proxy_addr is nil,",
            "  # there's no need to change code if there's proxy or not.",
            "  # ",
            "  # There are two additional parameters in Net::HTTP.Proxy which allow to",
            "  # specify proxy user name and password:",
            "  # ",
            "  #     Net::HTTP::Proxy(proxy_addr, proxy_port, proxy_user = nil, proxy_pass = nil)",
            "  # ",
            "  # You may use them to work with authorization-enabled proxies:",
            "  # ",
            "  #     require 'net/http'",
            "  #     require 'uri'",
            "  #     ",
            "  #     proxy_host = 'your.proxy.host'",
            "  #     proxy_port = 8080",
            "  #     uri = URI.parse(ENV['http_proxy'])",
            "  #     proxy_user, proxy_pass = uri.userinfo.split(/:/) if uri.userinfo",
            "  #     Net::HTTP::Proxy(proxy_host, proxy_port,",
            "  #                      proxy_user, proxy_pass).start('www.example.com') {|http|",
            "  #       # always connect to your.proxy.addr:8080 using specified username and password",
            "  #             :",
            "  #     }",
            "  # Note that net/http never rely on HTTP_PROXY environment variable.",
            "  # If you want to use proxy, set it explicitly.",
            "  # ",
            "  # === Following Redirection",
            "  # ",
            "  #     require 'net/http'",
            "  #     require 'uri'",
            "  # ",
            "  #     def fetch( uri_str, limit = 10 )",
            "  #       # You should choose better exception. ",
            "  #       raise ArgumentError, 'HTTP redirect too deep' if limit == 0",
            "  # ",
            "  #       response = Net::HTTP.get_response(URI.parse(uri_str))",
            "  #       case response",
            "  #       when Net::HTTPSuccess     then response",
            "  #       when Net::HTTPRedirection then fetch(response['location'], limit - 1)",
            "  #       else",
            "  #         response.error!",
            "  #       end",
            "  #     end",
            "  # ",
            "  #     print fetch('http://www.ruby-lang.org')",
            "  # ",
            "  # Net::HTTPSuccess and Net::HTTPRedirection is a HTTPResponse class.",
            "  # All HTTPResponse objects belong to its own response class which",
            "  # indicate HTTP result status. For details of response classes,",
            "  # see section \"HTTP Response Classes\".",
            "  # ",
            "  # === Basic Authentication",
            "  # ",
            "  #     require 'net/http'",
            "  # ",
            "  #     Net::HTTP.start('www.example.com') {|http|",
            "  #       req = Net::HTTP::Get.new('/secret-page.html')",
            "  #       req.basic_auth 'account', 'password'",
            "  #       response = http.request(req)",
            "  #       print response.body",
            "  #     }",
            "  # ",
            "  # === HTTP Response Classes",
            "  # TODO: write me.",
            "  # ",
            "  # == Switching Net::HTTP versions",
            "  # ",
            "  # You can use net/http.rb 1.1 features (bundled with Ruby 1.6)",
            "  # by calling HTTP.version_1_1. Calling Net::HTTP.version_1_2",
            "  # allows you to use 1.2 features again.",
            "  # ",
            "  #     # example",
            "  #     Net::HTTP.start { |http1| ...(http1 has 1.2 features)... }",
            "  # ",
            "  #     Net::HTTP.version_1_1",
            "  #     Net::HTTP.start { |http2| ...(http2 has 1.1 features)... }",
            "  # ",
            "  #     Net::HTTP.version_1_2",
            "  #     Net::HTTP.start { |http3| ...(http3 has 1.2 features)... }",
            "  # ",
            "  # This function is NOT thread-safe.",
            "  class HTTP < Protocol",
            "    # :stopdoc:",
            "    Revision = %q$Revision: 1.100.2.6 $.split[1]",
            "    HTTPVersion = '1.1'",
            "    @@newimpl = true    # for backward compatability",
            "    # :startdoc:",
            "    # Turns on net/http 1.2 (ruby 1.8) features.",
            "    # Defaults to ON in ruby 1.8.",
            "    #",
            "    # I strongly recommend to call this method always.",
            "    #",
            "    #   require 'net/http'",
            "    #   Net::HTTP.version_1_2",
            "    #",
            "    def HTTP.version_1_2",
            "      @@newimpl = true",
            "    end",
            "    # Turns on net/http 1.1 (ruby 1.6) features.",
            "    # Defaults to OFF in ruby 1.8.",
            "    def HTTP.version_1_1",
            "      @@newimpl = false",
            "    end",
            "    # true if net/http is in version 1.2 mode.",
            "    # Defaults to true.",
            "    def HTTP.version_1_2?",
            "      @@newimpl",
            "    end",
            "    # true if net/http is in version 1.1 compatible mode.",
            "    # Defaults to true.",
            "    def HTTP.version_1_1?",
            "      not @@newimpl",
            "    end",
            "    class << HTTP",
            "      alias is_version_1_1? version_1_1?   #:nodoc:",
            "      alias is_version_1_2? version_1_2?   #:nodoc:",
            "    end",
            "    def HTTP.setimplversion(obj)   #:nodoc:",
            "      f = @@newimpl",
            "      obj.instance_eval { @newimpl = f }",
            "    end",
            "    private_class_method :setimplversion",
            "    #",
            "    # short cut methods",
            "    #",
            "    #",
            "    # Get body from target and output it to +$stdout+.  The",
            "    # target can either be specified as (+uri+), or as",
            "    # (+host+, +path+, +port+ = 80); so: ",
            "    #",
            "    #    Net::HTTP.get_print URI.parse('http://www.example.com/index.html')",
            "    #",
            "    # or:",
            "    #",
            "    #    Net::HTTP.get_print('www.example.com', '/index.html')",
            "    #",
            "    def HTTP.get_print(arg1, arg2 = nil, port = nil)",
            "      if arg2",
            "        addr, path = arg1, arg2",
            "      else",
            "        uri = arg1",
            "        addr = uri.host",
            "        path = uri.request_uri",
            "        port = uri.port",
            "      end",
            "      new(addr, port || HTTP.default_port).start {|http|",
            "        http.get path, nil, $stdout",
            "      }",
            "      nil",
            "    end",
            "    # Send a GET request to the target and return the response",
            "    # as a string.  The target can either be specified as",
            "    # (+uri+), or as (+host+, +path+, +port+ = 80); so:",
            "    # ",
            "    #    print Net::HTTP.get(URI.parse('http://www.example.com/index.html'))",
            "    #",
            "    # or:",
            "    #",
            "    #    print Net::HTTP.get('www.example.com', '/index.html')",
            "    #",
            "    def HTTP.get(arg1, arg2 = nil, arg3 = nil)",
            "      get_response(arg1,arg2,arg3).body",
            "    end",
            "    # Send a GET request to the target and return the response",
            "    # as a Net::HTTPResponse object.  The target can either be specified as",
            "    # (+uri+), or as (+host+, +path+, +port+ = 80); so:",
            "    # ",
            "    #    res = Net::HTTP.get_response(URI.parse('http://www.example.com/index.html'))",
            "    #    print res.body",
            "    #",
            "    # or:",
            "    #",
            "    #    res = Net::HTTP.get_response('www.example.com', '/index.html')",
            "    #    print res.body",
            "    #",
            "    def HTTP.get_response(arg1, arg2 = nil, arg3 = nil)",
            "      if arg2",
            "        get_by_path(arg1, arg2, arg3)",
            "      else",
            "        get_by_uri(arg1)",
            "      end",
            "    end",
            "    def HTTP.get_by_path(addr, path, port = nil)   #:nodoc:",
            "      new(addr, port || HTTP.default_port).start {|http|",
            "        return http.request(Get.new(path))",
            "      }",
            "    end",
            "    private_class_method :get_by_path",
            "    def HTTP.get_by_uri(uri)   #:nodoc:",
            "      # Should we allow this?",
            "      # uri = URI.parse(uri) unless uri.respond_to?(:host)",
            "      new(uri.host, uri.port).start {|http|",
            "        return http.request(Get.new(uri.request_uri))",
            "      }",
            "    end",
            "    private_class_method :get_by_uri",
            "    #",
            "    # HTTP session management",
            "    #",
            "    # The default port to use for HTTP requests; defaults to 80.",
            "    def HTTP.default_port",
            "      80",
            "    end",
            "    def HTTP.socket_type   #:nodoc: obsolete",
            "      InternetMessageIO",
            "    end",
            "    class << HTTP",
            "      # creates a new Net::HTTP object and opens its TCP connection and ",
            "      # HTTP session.  If the optional block is given, the newly ",
            "      # created Net::HTTP object is passed to it and closed when the ",
            "      # block finishes.  In this case, the return value of this method",
            "      # is the return value of the block.  If no block is given, the",
            "      # return value of this method is the newly created Net::HTTP object",
            "      # itself, and the caller is responsible for closing it upon completion.",
            "      def start(address, port = nil, p_addr = nil, p_port = nil, p_user = nil, p_pass = nil, &block) # :yield: +http+",
            "        new(address, port, p_addr, p_port, p_user, p_pass).start(&block)",
            "      end",
            "      alias newobj new",
            "      # Creates a new Net::HTTP object.",
            "      # If +proxy_addr+ is given, creates an Net::HTTP object with proxy support.",
            "      # This method does not open the TCP connection.",
            "      def new(address, port = nil, p_addr = nil, p_port = nil, p_user = nil, p_pass = nil)",
            "        obj = Proxy(p_addr, p_port, p_user, p_pass).newobj(address, port)",
            "        setimplversion obj",
            "        obj",
            "      end",
            "    end",
            "    # Creates a new Net::HTTP object for the specified +address+.",
            "    # This method does not open the TCP connection.",
            "    def initialize(address, port = nil)",
            "      @address = address",
            "      @port    = (port || HTTP.default_port)",
            "      @curr_http_version = HTTPVersion",
            "      @seems_1_0_server = false",
            "      @close_on_empty_response = false",
            "      @socket  = nil",
            "      @started = false",
            "      @open_timeout = 30",
            "      @read_timeout = 60",
            "      @debug_output = nil",
            "    end",
            "    def inspect",
            "      \"#<#{self.class} #{@address}:#{@port} open=#{started?}>\"",
            "    end",
            "    # *WARNING* This method causes serious security hole.",
            "    # Never use this method in production code.",
            "    #",
            "    # Set an output stream for debugging.",
            "    #",
            "    #   http = Net::HTTP.new",
            "    #   http.set_debug_output $stderr",
            "    #   http.start { .... }",
            "    #",
            "    def set_debug_output(output)",
            "      warn 'Net::HTTP#set_debug_output called after HTTP started' if started?",
            "      @debug_output = output",
            "    end",
            "    # The host name to connect to.",
            "    attr_reader :address",
            "    # The port number to connect to.",
            "    attr_reader :port",
            "    # Seconds to wait until connection is opened.",
            "    # If the HTTP object cannot open a connection in this many seconds,",
            "    # it raises a TimeoutError exception.",
            "    attr_accessor :open_timeout",
            "    # Seconds to wait until reading one block (by one read(2) call).",
            "    # If the HTTP object cannot open a connection in this many seconds,",
            "    # it raises a TimeoutError exception.",
            "    attr_reader :read_timeout",
            "    # Setter for the read_timeout attribute.",
            "    def read_timeout=(sec)",
            "      @socket.read_timeout = sec if @socket",
            "      @read_timeout = sec",
            "    end",
            "    # returns true if the HTTP session is started.",
            "    def started?",
            "      @started",
            "    end",
            "    alias active? started?   #:nodoc: obsolete",
            "    attr_accessor :close_on_empty_response",
            "    # Opens TCP connection and HTTP session.",
            "    # ",
            "    # When this method is called with block, gives a HTTP object",
            "    # to the block and closes the TCP connection / HTTP session",
            "    # after the block executed.",
            "    #",
            "    # When called with a block, returns the return value of the",
            "    # block; otherwise, returns self.",
            "    #",
            "    def start  # :yield: http",
            "      raise IOError, 'HTTP session already opened' if @started",
            "      if block_given?",
            "        begin",
            "          do_start",
            "          return yield(self)",
            "        ensure",
            "          do_finish",
            "        end",
            "      end",
            "      do_start",
            "      self",
            "    end",
            "    def do_start",
            "      @socket = self.class.socket_type.open(conn_address(), conn_port(),",
            "                                            @open_timeout, @read_timeout,",
            "                                            @debug_output)",
            "      on_connect",
            "      @started = true",
            "    end",
            "    private :do_start",
            "    def on_connect",
            "    end",
            "    private :on_connect",
            "    # Finishes HTTP session and closes TCP connection.",
            "    # Raises IOError if not started.",
            "    def finish",
            "      raise IOError, 'HTTP session not yet started' unless started?",
            "      do_finish",
            "    end",
            "    def do_finish",
            "      @started = false",
            "      @socket.close if @socket and not @socket.closed?",
            "      @socket = nil",
            "    end",
            "    private :do_finish",
            "    #",
            "    # proxy",
            "    #",
            "    public",
            "    # no proxy",
            "    @is_proxy_class = false",
            "    @proxy_addr = nil",
            "    @proxy_port = nil",
            "    @proxy_user = nil",
            "    @proxy_pass = nil",
            "    # Creates an HTTP proxy class.",
            "    # Arguments are address/port of proxy host and username/password",
            "    # if authorization on proxy server is required.",
            "    # You can replace the HTTP class with created proxy class.",
            "    # ",
            "    # If ADDRESS is nil, this method returns self (Net::HTTP).",
            "    # ",
            "    #     # Example",
            "    #     proxy_class = Net::HTTP::Proxy('proxy.example.com', 8080)",
            "    #                     :",
            "    #     proxy_class.start('www.ruby-lang.org') {|http|",
            "    #       # connecting proxy.foo.org:8080",
            "    #                     :",
            "    #     }",
            "    # ",
            "    def HTTP.Proxy(p_addr, p_port = nil, p_user = nil, p_pass = nil)",
            "      return self unless p_addr",
            "      delta = ProxyDelta",
            "      proxyclass = Class.new(self)",
            "      proxyclass.module_eval {",
            "        include delta",
            "        # with proxy",
            "        @is_proxy_class = true",
            "        @proxy_address = p_addr",
            "        @proxy_port    = p_port || default_port()",
            "        @proxy_user    = p_user",
            "        @proxy_pass    = p_pass",
            "      }",
            "      proxyclass",
            "    end",
            "    class << HTTP",
            "      # returns true if self is a class which was created by HTTP::Proxy.",
            "      def proxy_class?",
            "        @is_proxy_class",
            "      end",
            "      attr_reader :proxy_address",
            "      attr_reader :proxy_port",
            "      attr_reader :proxy_user",
            "      attr_reader :proxy_pass",
            "    end",
            "    # True if self is a HTTP proxy class",
            "    def proxy?",
            "      self.class.proxy_class?",
            "    end",
            "    # Address of proxy host. If self does not use a proxy, nil.",
            "    def proxy_address",
            "      self.class.proxy_address",
            "    end",
            "    # Port number of proxy host. If self does not use a proxy, nil.",
            "    def proxy_port",
            "      self.class.proxy_port",
            "    end",
            "    # User name for accessing proxy. If self does not use a proxy, nil.",
            "    def proxy_user",
            "      self.class.proxy_user",
            "    end",
            "    # User password for accessing proxy. If self does not use a proxy, nil.",
            "    def proxy_pass",
            "      self.class.proxy_pass",
            "    end",
            "    alias proxyaddr proxy_address   #:nodoc: obsolete",
            "    alias proxyport proxy_port      #:nodoc: obsolete",
            "    private",
            "    # without proxy",
            "    def conn_address",
            "      address",
            "    end",
            "    def conn_port",
            "      port",
            "    end",
            "    def edit_path(path)",
            "      path",
            "    end",
            "    module ProxyDelta   #:nodoc: internal use only",
            "      private",
            "      def conn_address",
            "        proxy_address()",
            "      end",
            "      def conn_port",
            "        proxy_port()",
            "      end",
            "      def edit_path(path)",
            "        'http://' + addr_port() + path",
            "      end",
            "    end",
            "    #",
            "    # HTTP operations",
            "    #",
            "    public",
            "    # Gets data from +path+ on the connected-to host.",
            "    # +header+ must be a Hash like { 'Accept' => '*/*', ... }.",
            "    #",
            "    # In version 1.1 (ruby 1.6), this method returns a pair of objects,",
            "    # a Net::HTTPResponse object and the entity body string.",
            "    # In version 1.2 (ruby 1.8), this method returns a Net::HTTPResponse",
            "    # object.",
            "    #",
            "    # If called with a block, yields each fragment of the",
            "    # entity body in turn as a string as it is read from",
            "    # the socket.  Note that in this case, the returned response",
            "    # object will *not* contain a (meaningful) body.",
            "    #",
            "    # +dest+ argument is obsolete.",
            "    # It still works but you must not use it.",
            "    #",
            "    # In version 1.1, this method might raise an exception for ",
            "    # 3xx (redirect). In this case you can get a HTTPResponse object",
            "    # by \"anException.response\".",
            "    #",
            "    # In version 1.2, this method never raises exception.",
            "    #",
            "    #     # version 1.1 (bundled with Ruby 1.6)",
            "    #     response, body = http.get('/index.html')",
            "    #",
            "    #     # version 1.2 (bundled with Ruby 1.8 or later)",
            "    #     response = http.get('/index.html')",
            "    #     ",
            "    #     # using block",
            "    #     File.open('result.txt', 'w') {|f|",
            "    #       http.get('/~foo/') do |str|",
            "    #         f.write str",
            "    #       end",
            "    #     }",
            "    #",
            "    def get(path, initheader = nil, dest = nil, &block) # :yield: +body_segment+",
            "      res = nil",
            "      request(Get.new(path, initheader)) {|r|",
            "        r.read_body dest, &block",
            "        res = r",
            "      }",
            "      unless @newimpl",
            "        res.value",
            "        return res, res.body",
            "      end",
            "      res",
            "    end",
            "    # Gets only the header from +path+ on the connected-to host.",
            "    # +header+ is a Hash like { 'Accept' => '*/*', ... }.",
            "    # ",
            "    # This method returns a Net::HTTPResponse object.",
            "    # ",
            "    # In version 1.1, this method might raise an exception for ",
            "    # 3xx (redirect). On the case you can get a HTTPResponse object",
            "    # by \"anException.response\".",
            "    # In version 1.2, this method never raises an exception.",
            "    # ",
            "    #     response = nil",
            "    #     Net::HTTP.start('some.www.server', 80) {|http|",
            "    #       response = http.head('/index.html')",
            "    #     }",
            "    #     p response['content-type']",
            "    #",
            "    def head(path, initheader = nil) ",
            "      res = request(Head.new(path, initheader))",
            "      res.value unless @newimpl",
            "      res",
            "    end",
            "    # Posts +data+ (must be a String) to +path+. +header+ must be a Hash",
            "    # like { 'Accept' => '*/*', ... }.",
            "    # ",
            "    # In version 1.1 (ruby 1.6), this method returns a pair of objects, a",
            "    # Net::HTTPResponse object and an entity body string.",
            "    # In version 1.2 (ruby 1.8), this method returns a Net::HTTPResponse object.",
            "    # ",
            "    # If called with a block, yields each fragment of the",
            "    # entity body in turn as a string as it are read from",
            "    # the socket.  Note that in this case, the returned response",
            "    # object will *not* contain a (meaningful) body.",
            "    #",
            "    # +dest+ is an alternative method of collecting the body.  It",
            "    # must be an object responding to the \"<<\" operator (such as",
            "    # a String or an Array).  Each fragment of the entity body",
            "    # will be \"<<\"-ed in turn onto +dest+ if provided, and it will",
            "    # also become the body of the returned response object.",
            "    #",
            "    # You must *not* provide both +dest+ and a block; doing so",
            "    # will result in an ArgumentError.",
            "    # ",
            "    # In version 1.1, this method might raise an exception for ",
            "    # 3xx (redirect). In this case you can get an HTTPResponse object",
            "    # by \"anException.response\".",
            "    # In version 1.2, this method never raises exception.",
            "    # ",
            "    #     # version 1.1",
            "    #     response, body = http.post('/cgi-bin/search.rb', 'query=foo')",
            "    # ",
            "    #     # version 1.2",
            "    #     response = http.post('/cgi-bin/search.rb', 'query=foo')",
            "    # ",
            "    #     # using block",
            "    #     File.open('result.txt', 'w') {|f|",
            "    #       http.post('/cgi-bin/search.rb', 'query=foo') do |str|",
            "    #         f.write str",
            "    #       end",
            "    #     }",
            "    #",
            "    def post(path, data, initheader = nil, dest = nil, &block) # :yield: +body_segment+",
            "      res = nil",
            "      request(Post.new(path, initheader), data) {|r|",
            "        r.read_body dest, &block",
            "        res = r",
            "      }",
            "      unless @newimpl",
            "        res.value",
            "        return res, res.body",
            "      end",
            "      res",
            "    end",
            "    def put(path, data, initheader = nil)   #:nodoc:",
            "      res = request(Put.new(path, initheader), data)",
            "      res.value unless @newimpl",
            "      res",
            "    end",
            "    # Sends a GET request to the +path+ and gets a response,",
            "    # as an HTTPResponse object.",
            "    # ",
            "    # When called with a block, yields an HTTPResponse object.",
            "    # The body of this response will not have been read yet;",
            "    # the caller can process it using HTTPResponse#read_body,",
            "    # if desired.",
            "    #",
            "    # Returns the response.",
            "    # ",
            "    # This method never raises Net::* exceptions.",
            "    # ",
            "    #     response = http.request_get('/index.html')",
            "    #     # The entity body is already read here.",
            "    #     p response['content-type']",
            "    #     puts response.body",
            "    # ",
            "    #     # using block",
            "    #     http.request_get('/index.html') {|response|",
            "    #       p response['content-type']",
            "    #       response.read_body do |str|   # read body now",
            "    #         print str",
            "    #       end",
            "    #     }",
            "    #",
            "    def request_get(path, initheader = nil, &block) # :yield: +response+",
            "      request(Get.new(path, initheader), &block)",
            "    end",
            "    # Sends a HEAD request to the +path+ and gets a response,",
            "    # as an HTTPResponse object.",
            "    #",
            "    # Returns the response.",
            "    # ",
            "    # This method never raises Net::* exceptions.",
            "    # ",
            "    #     response = http.request_head('/index.html')",
            "    #     p response['content-type']",
            "    #",
            "    def request_head(path, initheader = nil, &block)",
            "      request(Head.new(path, initheader), &block)",
            "    end",
            "    # Sends a POST request to the +path+ and gets a response,",
            "    # as an HTTPResponse object.",
            "    # ",
            "    # When called with a block, yields an HTTPResponse object.",
            "    # The body of this response will not have been read yet;",
            "    # the caller can process it using HTTPResponse#read_body,",
            "    # if desired.",
            "    #",
            "    # Returns the response.",
            "    # ",
            "    # This method never raises Net::* exceptions.",
            "    # ",
            "    #     # example",
            "    #     response = http.request_post('/cgi-bin/nice.rb', 'datadatadata...')",
            "    #     p response.status",
            "    #     puts response.body          # body is already read",
            "    # ",
            "    #     # using block",
            "    #     http.request_post('/cgi-bin/nice.rb', 'datadatadata...') {|response|",
            "    #       p response.status",
            "    #       p response['content-type']",
            "    #       response.read_body do |str|   # read body now",
            "    #         print str",
            "    #       end",
            "    #     }",
            "    #",
            "    def request_post(path, data, initheader = nil, &block) # :yield: +response+",
            "      request Post.new(path, initheader), data, &block",
            "    end",
            "    def request_put(path, data, initheader = nil, &block)   #:nodoc:",
            "      request Put.new(path, initheader), data, &block",
            "    end",
            "    alias get2   request_get    #:nodoc: obsolete",
            "    alias head2  request_head   #:nodoc: obsolete",
            "    alias post2  request_post   #:nodoc: obsolete",
            "    alias put2   request_put    #:nodoc: obsolete",
            "    # Sends an HTTP request to the HTTP server.",
            "    # This method also sends DATA string if DATA is given.",
            "    #",
            "    # Returns a HTTPResponse object.",
            "    # ",
            "    # This method never raises Net::* exceptions.",
            "    #",
            "    #    response = http.send_request('GET', '/index.html')",
            "    #    puts response.body",
            "    #",
            "    def send_request(name, path, data = nil, header = nil)",
            "      r = HTTPGenericRequest.new(name,(data ? true : false),true,path,header)",
            "      request r, data",
            "    end",
            "    # Sends an HTTPRequest object REQUEST to the HTTP server.",
            "    # This method also sends DATA string if REQUEST is a post/put request.",
            "    # Giving DATA for get/head request causes ArgumentError.",
            "    # ",
            "    # When called with a block, yields an HTTPResponse object.",
            "    # The body of this response will not have been read yet;",
            "    # the caller can process it using HTTPResponse#read_body,",
            "    # if desired.",
            "    #",
            "    # Returns a HTTPResponse object.",
            "    # ",
            "    # This method never raises Net::* exceptions.",
            "    #",
            "    def request(req, body = nil, &block)  # :yield: +response+",
            "      unless started?",
            "        start {",
            "          req['connection'] ||= 'close'",
            "          return request(req, body, &block)",
            "        }",
            "      end",
            "      if proxy_user()",
            "        req.proxy_basic_auth proxy_user(), proxy_pass()",
            "      end",
            "      begin_transport req",
            "        req.exec @socket, @curr_http_version, edit_path(req.path), body",
            "        begin",
            "          res = HTTPResponse.read_new(@socket)",
            "        end while HTTPContinue === res",
            "        res.reading_body(@socket, req.response_body_permitted?) {",
            "          yield res if block_given?",
            "        }",
            "      end_transport req, res",
            "      res",
            "    end",
            "    private",
            "    def begin_transport(req)",
            "      if @socket.closed?",
            "        @socket.reopen @open_timeout",
            "        on_connect",
            "      end",
            "      if @seems_1_0_server",
            "        req['connection'] ||= 'close'",
            "      end",
            "      if not req.response_body_permitted? and @close_on_empty_response",
            "        req['connection'] ||= 'close'",
            "      end",
            "      req['host'] ||= addr_port()",
            "    end",
            "    def end_transport(req, res)",
            "      @curr_http_version = res.http_version",
            "      if not res.body and @close_on_empty_response",
            "        D 'Conn close'",
            "        @socket.close",
            "      elsif keep_alive?(req, res)",
            "        D 'Conn keep-alive'",
            "        if @socket.closed?",
            "          D 'Conn (but seems 1.0 server)'",
            "          @seems_1_0_server = true",
            "        end",
            "      else",
            "        D 'Conn close'",
            "        @socket.close",
            "      end",
            "    end",
            "    def keep_alive?(req, res)",
            "      return false if /close/i =~ req['connection'].to_s",
            "      return false if @seems_1_0_server",
            "      return true  if /keep-alive/i =~ res['connection'].to_s",
            "      return false if /close/i      =~ res['connection'].to_s",
            "      return true  if /keep-alive/i =~ res['proxy-connection'].to_s",
            "      return false if /close/i      =~ res['proxy-connection'].to_s",
            "      (@curr_http_version == '1.1')",
            "    end",
            "    #",
            "    # utils",
            "    #",
            "    private",
            "    def addr_port",
            "      address + (port == HTTP.default_port ? '' : \":#{port}\")",
            "    end",
            "    def D(msg)",
            "      return unless @debug_output",
            "      @debug_output << msg",
            "      @debug_output << \"\\n\"",
            "    end",
            "  end",
            "  HTTPSession = HTTP",
            "  # Header module.",
            "  # Provides access to @header in the mixed-into class as a hash-like",
            "  # object, except with case-insensitive keys.  Also provides",
            "  # methods for accessing commonly-used header values in a more",
            "  # convenient format.",
            "  module HTTPHeader",
            "    def size   #:nodoc: obsolete",
            "      @header.size",
            "    end",
            "    alias length size   #:nodoc: obsolete",
            "    # Returns the header field corresponding to the case-insensitive key.",
            "    # For example, a key of \"Content-Type\" might return \"text/html\"",
            "    def [](key)",
            "      @header[key.downcase]",
            "    end",
            "    # Sets the header field corresponding to the case-insensitive key.",
            "    def []=(key, val)",
            "      @header[key.downcase] = val",
            "    end",
            "    # Returns the header field corresponding to the case-insensitive key.",
            "    # Returns the default value +args+, or the result of the block, or nil,",
            "    # if there's no header field named key.  See Hash#fetch",
            "    def fetch(key, *args, &block)   #:yield: +key+",
            "      @header.fetch(key.downcase, *args, &block)",
            "    end",
            "    # Iterates for each header names and values.",
            "    def each_header(&block)   #:yield: +key+, +value+",
            "      @header.each(&block)",
            "    end",
            "    alias each each_header",
            "    # Iterates for each header names.",
            "    def each_key(&block)   #:yield: +key+",
            "      @header.each_key(&block)",
            "    end",
            "    # Iterates for each header values.",
            "    def each_value(&block)   #:yield: +value+",
            "      @header.each_value(&block)",
            "    end",
            "    # Removes a header field.",
            "    def delete(key)",
            "      @header.delete(key.downcase)",
            "    end",
            "    # true if +key+ header exists.",
            "    def key?(key)",
            "      @header.key?(key.downcase)",
            "    end",
            "    # Returns a Hash consist of header names and values.",
            "    def to_hash",
            "      @header.dup",
            "    end",
            "    # As for #each_header, except the keys are provided in capitalized form.",
            "    def canonical_each",
            "      @header.each do |k,v|",
            "        yield canonical(k), v",
            "      end",
            "    end",
            "    def canonical( k )",
            "      k.split(/-/).map {|i| i.capitalize }.join('-')",
            "    end",
            "    private :canonical",
            "    # Returns a Range object which represents Range: header field,",
            "    # or +nil+ if there is no such header.",
            "    def range",
            "      s = @header['range'] or return nil",
            "      s.split(/,/).map {|spec|",
            "        m = /bytes\\s*=\\s*(\\d+)?\\s*-\\s*(\\d+)?/i.match(spec) or",
            "                raise HTTPHeaderSyntaxError, \"wrong Range: #{spec}\"",
            "        d1 = m[1].to_i",
            "        d2 = m[2].to_i",
            "        if    m[1] and m[2] then  d1..d2",
            "        elsif m[1]          then  d1..-1",
            "        elsif          m[2] then -d2..-1",
            "        else",
            "          raise HTTPHeaderSyntaxError, 'range is not specified'",
            "        end",
            "      }",
            "    end",
            "    # Set Range: header from Range (arg r) or beginning index and",
            "    # length from it (arg i&len).",
            "    def range=(r, fin = nil)",
            "      r = (r ... r + fin) if fin",
            "      case r",
            "      when Numeric",
            "        s = r > 0 ? \"0-#{r - 1}\" : \"-#{-r}\"",
            "      when Range",
            "        first = r.first",
            "        last = r.last",
            "        if r.exclude_end?",
            "          last -= 1",
            "        end",
            "        if last == -1",
            "          s = first > 0 ? \"#{first}-\" : \"-#{-first}\"",
            "        else",
            "          first >= 0 or raise HTTPHeaderSyntaxError, 'range.first is negative' ",
            "          last > 0  or raise HTTPHeaderSyntaxError, 'range.last is negative' ",
            "          first < last or raise HTTPHeaderSyntaxError, 'must be .first < .last'",
            "          s = \"#{first}-#{last}\"",
            "        end",
            "      else",
            "        raise TypeError, 'Range/Integer is required'",
            "      end",
            "      @header['range'] = \"bytes=#{s}\"",
            "      r",
            "    end",
            "    alias set_range range=",
            "    # Returns an Integer object which represents the Content-Length: header field",
            "    # or +nil+ if that field is not provided.",
            "    def content_length",
            "      s = @header['content-length'] or return nil",
            "      m = /\\d+/.match(s) or",
            "              raise HTTPHeaderSyntaxError, 'wrong Content-Length format'",
            "      m[0].to_i",
            "    end",
            "    # Returns \"true\" if the \"transfer-encoding\" header is present and",
            "    # set to \"chunked\".  This is an HTTP/1.1 feature, allowing the ",
            "    # the content to be sent in \"chunks\" without at the outset",
            "    # stating the entire content length.",
            "    def chunked?",
            "      s = @header['transfer-encoding']",
            "      (s and /(?:\\A|[^\\-\\w])chunked(?:[^\\-\\w]|\\z)/i === s) ? true : false",
            "    end",
            "    # Returns a Range object which represents Content-Range: header field.",
            "    # This indicates, for a partial entity body, where this fragment",
            "    # fits inside the full entity body, as range of byte offsets.",
            "    def content_range",
            "      s = @header['content-range'] or return nil",
            "      m = %r<bytes\\s+(\\d+)-(\\d+)/(?:\\d+|\\*)>i.match(s) or",
            "              raise HTTPHeaderSyntaxError, 'wrong Content-Range format'",
            "      m[1].to_i .. m[2].to_i + 1",
            "    end",
            "    # The length of the range represented in Range: header.",
            "    def range_length",
            "      r = self.content_range",
            "      r and (r.end - r.begin)",
            "    end",
            "    # Set the Authorization: header for \"Basic\" authorization.",
            "    def basic_auth(account, password)",
            "      @header['authorization'] = basic_encode(account, password)",
            "    end",
            "    # Set Proxy-Authorization: header for \"Basic\" authorization.",
            "    def proxy_basic_auth(account, password)",
            "      @header['proxy-authorization'] = basic_encode(account, password)",
            "    end",
            "    def basic_encode(account, password)",
            "      'Basic ' + [\"#{account}:#{password}\"].pack('m').strip",
            "    end",
            "    private :basic_encode",
            "  end",
            "  # Parent of HTTPRequest class.  Do not use this directly; use",
            "  # a subclass of HTTPRequest.",
            "  # Mixes in the HTTPHeader module.",
            "  class HTTPGenericRequest",
            "    include HTTPHeader",
            "    def initialize(m, reqbody, resbody, path, initheader = nil)",
            "      @method = m",
            "      @request_has_body = reqbody",
            "      @response_has_body = resbody",
            "      @path = path",
            "      @header = {}",
            "      return unless initheader",
            "      initheader.each do |k,v|",
            "        key = k.downcase",
            "        $stderr.puts \"net/http: warning: duplicated HTTP header: #{k}\" if @header.key?(key) and $VERBOSE",
            "        @header[key] = v.strip",
            "      end",
            "      @header['accept'] ||= '*/*'",
            "    end",
            "    attr_reader :method",
            "    attr_reader :path",
            "    def inspect",
            "      \"\\#<#{self.class} #{@method}>\"",
            "    end",
            "    def request_body_permitted?",
            "      @request_has_body",
            "    end",
            "    def response_body_permitted?",
            "      @response_has_body",
            "    end",
            "    alias body_exist? response_body_permitted?",
            "    #",
            "    # write",
            "    #",
            "    def exec(sock, ver, path, body)   #:nodoc: internal use only",
            "      if body",
            "        check_body_permitted",
            "        send_request_with_body sock, ver, path, body",
            "      else",
            "        request sock, ver, path",
            "      end",
            "    end",
            "    private",
            "    def check_body_permitted",
            "      request_body_permitted? or",
            "          raise ArgumentError, 'HTTP request body is not permitted'",
            "    end",
            "    def send_request_with_body( sock, ver, path, body )",
            "      @header['content-length'] = body.length.to_s",
            "      @header.delete 'transfer-encoding'",
            "      unless @header['content-type']",
            "        $stderr.puts 'net/http: warning: Content-Type did not set; using application/x-www-form-urlencoded' if $VERBOSE",
            "        @header['content-type'] = 'application/x-www-form-urlencoded'",
            "      end",
            "      request sock, ver, path",
            "      sock.write body",
            "    end",
            "    def request(sock, ver, path)",
            "      buf = \"#{@method} #{path} HTTP/#{ver}\\r\\n\"",
            "      canonical_each do |k,v|",
            "        buf << k + ': ' + v + \"\\r\\n\"",
            "      end",
            "      buf << \"\\r\\n\"",
            "      sock.write buf",
            "    end",
            "  end",
            "  # ",
            "  # HTTP request class. This class wraps request header and entity path.",
            "  # You *must* use its subclass, Net::HTTP::Get, Post, Head.",
            "  # ",
            "  class HTTPRequest < HTTPGenericRequest",
            "    # Creates HTTP request object.",
            "    def initialize(path, initheader = nil)",
            "      super self.class::METHOD,",
            "            self.class::REQUEST_HAS_BODY,",
            "            self.class::RESPONSE_HAS_BODY,",
            "            path, initheader",
            "    end",
            "  end",
            "  class HTTP",
            "    class Get < HTTPRequest",
            "      METHOD = 'GET'",
            "      REQUEST_HAS_BODY  = false",
            "      RESPONSE_HAS_BODY = true",
            "    end",
            "    class Head < HTTPRequest",
            "      METHOD = 'HEAD'",
            "      REQUEST_HAS_BODY = false",
            "      RESPONSE_HAS_BODY = false",
            "    end",
            "    class Post < HTTPRequest",
            "      METHOD = 'POST'",
            "      REQUEST_HAS_BODY = true",
            "      RESPONSE_HAS_BODY = true",
            "    end",
            "    class Put < HTTPRequest",
            "      METHOD = 'PUT'",
            "      REQUEST_HAS_BODY = true",
            "      RESPONSE_HAS_BODY = true",
            "    end",
            "  end",
            "  ###",
            "  ### Response",
            "  ###",
            "  # HTTP exception class.",
            "  # You must use its subclasses.",
            "  module HTTPExceptions",
            "    def initialize(msg, res)   #:nodoc:",
            "      super msg",
            "      @response = res",
            "    end",
            "    attr_reader :response",
            "    alias data response    #:nodoc: obsolete",
            "  end",
            "  class HTTPError < ProtocolError",
            "    include HTTPExceptions",
            "  end",
            "  class HTTPRetriableError < ProtoRetriableError",
            "    include HTTPExceptions",
            "  end",
            "  class HTTPServerException < ProtoServerError",
            "    # We cannot use the name \"HTTPServerError\", it is the name of the response.",
            "    include HTTPExceptions",
            "  end",
            "  class HTTPFatalError < ProtoFatalError",
            "    include HTTPExceptions",
            "  end",
            "  # HTTP response class. This class wraps response header and entity.",
            "  # Mixes in the HTTPHeader module, which provides access to response",
            "  # header values both via hash-like methods and individual readers.",
            "  # Note that each possible HTTP response code defines its own ",
            "  # HTTPResponse subclass.  These are listed below.",
            "  # All classes are",
            "  # defined under the Net module. Indentation indicates inheritance.",
            "  # ",
            "  #   xxx        HTTPResponse",
            "  # ",
            "  #     1xx        HTTPInformation",
            "  #       100        HTTPContinue    ",
            "  #       101        HTTPSwitchProtocol",
            "  # ",
            "  #     2xx        HTTPSuccess",
            "  #       200        HTTPOK",
            "  #       201        HTTPCreated",
            "  #       202        HTTPAccepted",
            "  #       203        HTTPNonAuthoritativeInformation",
            "  #       204        HTTPNoContent",
            "  #       205        HTTPResetContent",
            "  #       206        HTTPPartialContent",
            "  # ",
            "  #     3xx        HTTPRedirection",
            "  #       300        HTTPMultipleChoice",
            "  #       301        HTTPMovedPermanently",
            "  #       302        HTTPFound",
            "  #       303        HTTPSeeOther",
            "  #       304        HTTPNotModified",
            "  #       305        HTTPUseProxy",
            "  #       307        HTTPTemporaryRedirect",
            "  # ",
            "  #     4xx        HTTPClientError",
            "  #       400        HTTPBadRequest",
            "  #       401        HTTPUnauthorized",
            "  #       402        HTTPPaymentRequired",
            "  #       403        HTTPForbidden",
            "  #       404        HTTPNotFound",
            "  #       405        HTTPMethodNotAllowed",
            "  #       406        HTTPNotAcceptable",
            "  #       407        HTTPProxyAuthenticationRequired",
            "  #       408        HTTPRequestTimeOut",
            "  #       409        HTTPConflict",
            "  #       410        HTTPGone",
            "  #       411        HTTPLengthRequired",
            "  #       412        HTTPPreconditionFailed",
            "  #       413        HTTPRequestEntityTooLarge",
            "  #       414        HTTPRequestURITooLong",
            "  #       415        HTTPUnsupportedMediaType",
            "  #       416        HTTPRequestedRangeNotSatisfiable",
            "  #       417        HTTPExpectationFailed",
            "  # ",
            "  #     5xx        HTTPServerError",
            "  #       500        HTTPInternalServerError",
            "  #       501        HTTPNotImplemented",
            "  #       502        HTTPBadGateway",
            "  #       503        HTTPServiceUnavailable",
            "  #       504        HTTPGatewayTimeOut",
            "  #       505        HTTPVersionNotSupported",
            "  # ",
            "  #     xxx        HTTPUnknownResponse",
            "  class HTTPResponse",
            "    # true if the response has body.",
            "    def HTTPResponse.body_permitted?",
            "      self::HAS_BODY",
            "    end",
            "    def HTTPResponse.exception_type   # :nodoc: internal use only",
            "      self::EXCEPTION_TYPE",
            "    end",
            "  end   # redefined after",
            "  # :stopdoc:",
            "  class HTTPUnknownResponse < HTTPResponse",
            "    HAS_BODY = true",
            "    EXCEPTION_TYPE = HTTPError",
            "  end",
            "  class HTTPInformation < HTTPResponse           # 1xx",
            "    HAS_BODY = false",
            "    EXCEPTION_TYPE = HTTPError",
            "  end",
            "  class HTTPSuccess < HTTPResponse               # 2xx",
            "    HAS_BODY = true",
            "    EXCEPTION_TYPE = HTTPError",
            "  end",
            "  class HTTPRedirection < HTTPResponse           # 3xx",
            "    HAS_BODY = true",
            "    EXCEPTION_TYPE = HTTPRetriableError",
            "  end",
            "  class HTTPClientError < HTTPResponse           # 4xx",
            "    HAS_BODY = true",
            "    EXCEPTION_TYPE = HTTPServerException   # for backward compatibility",
            "  end",
            "  class HTTPServerError < HTTPResponse           # 5xx",
            "    HAS_BODY = true",
            "    EXCEPTION_TYPE = HTTPFatalError    # for backward compatibility",
            "  end",
            "  class HTTPContinue < HTTPInformation           # 100",
            "    HAS_BODY = false",
            "  end",
            "  class HTTPSwitchProtocol < HTTPInformation     # 101",
            "    HAS_BODY = false",
            "  end",
            "  class HTTPOK < HTTPSuccess                            # 200",
            "    HAS_BODY = true",
            "  end",
            "  class HTTPCreated < HTTPSuccess                       # 201",
            "    HAS_BODY = true",
            "  end",
            "  class HTTPAccepted < HTTPSuccess                      # 202",
            "    HAS_BODY = true",
            "  end",
            "  class HTTPNonAuthoritativeInformation < HTTPSuccess   # 203",
            "    HAS_BODY = true",
            "  end",
            "  class HTTPNoContent < HTTPSuccess                     # 204",
            "    HAS_BODY = false",
            "  end",
            "  class HTTPResetContent < HTTPSuccess                  # 205",
            "    HAS_BODY = false",
            "  end",
            "  class HTTPPartialContent < HTTPSuccess                # 206",
            "    HAS_BODY = true",
            "  end",
            "  class HTTPMultipleChoice < HTTPRedirection     # 300",
            "    HAS_BODY = true",
            "  end",
            "  class HTTPMovedPermanently < HTTPRedirection   # 301",
            "    HAS_BODY = true",
            "  end",
            "  class HTTPFound < HTTPRedirection              # 302",
            "    HAS_BODY = true",
            "  end",
            "  HTTPMovedTemporarily = HTTPFound",
            "  class HTTPSeeOther < HTTPRedirection           # 303",
            "    HAS_BODY = true",
            "  end",
            "  class HTTPNotModified < HTTPRedirection        # 304",
            "    HAS_BODY = false",
            "  end",
            "  class HTTPUseProxy < HTTPRedirection           # 305",
            "    HAS_BODY = false",
            "  end",
            "  # 306 unused",
            "  class HTTPTemporaryRedirect < HTTPRedirection  # 307",
            "    HAS_BODY = true",
            "  end",
            "  class HTTPBadRequest < HTTPClientError                    # 400",
            "    HAS_BODY = true",
            "  end",
            "  class HTTPUnauthorized < HTTPClientError                  # 401",
            "    HAS_BODY = true",
            "  end",
            "  class HTTPPaymentRequired < HTTPClientError               # 402",
            "    HAS_BODY = true",
            "  end",
            "  class HTTPForbidden < HTTPClientError                     # 403",
            "    HAS_BODY = true",
            "  end",
            "  class HTTPNotFound < HTTPClientError                      # 404",
            "    HAS_BODY = true",
            "  end",
            "  class HTTPMethodNotAllowed < HTTPClientError              # 405",
            "    HAS_BODY = true",
            "  end",
            "  class HTTPNotAcceptable < HTTPClientError                 # 406",
            "    HAS_BODY = true",
            "  end",
            "  class HTTPProxyAuthenticationRequired < HTTPClientError   # 407",
            "    HAS_BODY = true",
            "  end",
            "  class HTTPRequestTimeOut < HTTPClientError                # 408",
            "    HAS_BODY = true",
            "  end",
            "  class HTTPConflict < HTTPClientError                      # 409",
            "    HAS_BODY = true",
            "  end",
            "  class HTTPGone < HTTPClientError                          # 410",
            "    HAS_BODY = true",
            "  end",
            "  class HTTPLengthRequired < HTTPClientError                # 411",
            "    HAS_BODY = true",
            "  end",
            "  class HTTPPreconditionFailed < HTTPClientError            # 412",
            "    HAS_BODY = true",
            "  end",
            "  class HTTPRequestEntityTooLarge < HTTPClientError         # 413",
            "    HAS_BODY = true",
            "  end",
            "  class HTTPRequestURITooLong < HTTPClientError             # 414",
            "    HAS_BODY = true",
            "  end",
            "  HTTPRequestURITooLarge = HTTPRequestURITooLong",
            "  class HTTPUnsupportedMediaType < HTTPClientError          # 415",
            "    HAS_BODY = true",
            "  end",
            "  class HTTPRequestedRangeNotSatisfiable < HTTPClientError  # 416",
            "    HAS_BODY = true",
            "  end",
            "  class HTTPExpectationFailed < HTTPClientError             # 417",
            "    HAS_BODY = true",
            "  end",
            "  class HTTPInternalServerError < HTTPServerError   # 500",
            "    HAS_BODY = true",
            "  end",
            "  class HTTPNotImplemented < HTTPServerError        # 501",
            "    HAS_BODY = true",
            "  end",
            "  class HTTPBadGateway < HTTPServerError            # 502",
            "    HAS_BODY = true",
            "  end",
            "  class HTTPServiceUnavailable < HTTPServerError    # 503",
            "    HAS_BODY = true",
            "  end",
            "  class HTTPGatewayTimeOut < HTTPServerError        # 504",
            "    HAS_BODY = true",
            "  end",
            "  class HTTPVersionNotSupported < HTTPServerError   # 505",
            "    HAS_BODY = true",
            "  end",
            "  # :startdoc:",
            "  class HTTPResponse   # redefine",
            "    CODE_CLASS_TO_OBJ = {",
            "      '1' => HTTPInformation,",
            "      '2' => HTTPSuccess,",
            "      '3' => HTTPRedirection,",
            "      '4' => HTTPClientError,",
            "      '5' => HTTPServerError",
            "    }",
            "    CODE_TO_OBJ = {",
            "      '100' => HTTPContinue,",
            "      '101' => HTTPSwitchProtocol,",
            "      '200' => HTTPOK,",
            "      '201' => HTTPCreated,",
            "      '202' => HTTPAccepted,",
            "      '203' => HTTPNonAuthoritativeInformation,",
            "      '204' => HTTPNoContent,",
            "      '205' => HTTPResetContent,",
            "      '206' => HTTPPartialContent,",
            "      '300' => HTTPMultipleChoice,",
            "      '301' => HTTPMovedPermanently,",
            "      '302' => HTTPFound,",
            "      '303' => HTTPSeeOther,",
            "      '304' => HTTPNotModified,",
            "      '305' => HTTPUseProxy,",
            "      '307' => HTTPTemporaryRedirect,",
            "      '400' => HTTPBadRequest,",
            "      '401' => HTTPUnauthorized,",
            "      '402' => HTTPPaymentRequired,",
            "      '403' => HTTPForbidden,",
            "      '404' => HTTPNotFound,",
            "      '405' => HTTPMethodNotAllowed,",
            "      '406' => HTTPNotAcceptable,",
            "      '407' => HTTPProxyAuthenticationRequired,",
            "      '408' => HTTPRequestTimeOut,",
            "      '409' => HTTPConflict,",
            "      '410' => HTTPGone,",
            "      '411' => HTTPLengthRequired,",
            "      '412' => HTTPPreconditionFailed,",
            "      '413' => HTTPRequestEntityTooLarge,",
            "      '414' => HTTPRequestURITooLong,",
            "      '415' => HTTPUnsupportedMediaType,",
            "      '416' => HTTPRequestedRangeNotSatisfiable,",
            "      '417' => HTTPExpectationFailed,",
            "      '501' => HTTPInternalServerError,",
            "      '501' => HTTPNotImplemented,",
            "      '502' => HTTPBadGateway,",
            "      '503' => HTTPServiceUnavailable,",
            "      '504' => HTTPGatewayTimeOut,",
            "      '505' => HTTPVersionNotSupported",
            "    }",
            "    class << self",
            "      def read_new(sock)   #:nodoc: internal use only",
            "        httpv, code, msg = read_status_line(sock)",
            "        res = response_class(code).new(httpv, code, msg)",
            "        each_response_header(sock) do |k,v|",
            "          if res.key?(k)",
            "            res[k] << ', ' << v",
            "          else",
            "            res[k] = v",
            "          end",
            "        end",
            "        res",
            "      end",
            "      private",
            "      def read_status_line(sock)",
            "        str = sock.readline",
            "        m = /\\AHTTP(?:\\/(\\d+\\.\\d+))?\\s+(\\d\\d\\d)\\s*(.*)\\z/in.match(str) or",
            "                raise HTTPBadResponse, \"wrong status line: #{str.dump}\"",
            "        m.to_a[1,3]",
            "      end",
            "      def response_class(code)",
            "        CODE_TO_OBJ[code] or",
            "        CODE_CLASS_TO_OBJ[code[0,1]] or",
            "        HTTPUnknownResponse",
            "      end",
            "      def each_response_header(sock)",
            "        while true",
            "          line = sock.readuntil(\"\\n\", true).sub(/\\s+\\z/, '')",
            "          break if line.empty?",
            "          m = /\\A([^:]+):\\s*/.match(line) or",
            "              raise HTTPBadResponse, 'wrong header line format'",
            "          yield m[1], m.post_match",
            "        end",
            "      end",
            "    end",
            "    # next is to fix bug in RDoc, where the private inside class << self",
            "    # spills out.",
            "    public ",
            "    include HTTPHeader",
            "    def initialize(httpv, code, msg)   #:nodoc: internal use only",
            "      @http_version = httpv",
            "      @code         = code",
            "      @message      = msg",
            "      @header = {}",
            "      @body = nil",
            "      @read = false",
            "    end",
            "    # The HTTP version supported by the server.",
            "    attr_reader :http_version",
            "    # HTTP result code string. For example, '302'.  You can also",
            "    # determine the response type by which response subclass the",
            "    # response object is an instance of.",
            "    attr_reader :code",
            "    # HTTP result message. For example, 'Not Found'.",
            "    attr_reader :message",
            "    alias msg message   # :nodoc: obsolete",
            "    def inspect",
            "      \"#<#{self.class} #{@code} readbody=#{@read}>\"",
            "    end",
            "    # For backward compatibility.",
            "    # To allow Net::HTTP 1.1 style assignment",
            "    # e.g.",
            "    #    response, body = Net::HTTP.get(....)",
            "    # ",
            "    def to_ary",
            "      warn \"net/http.rb: warning: Net::HTTP v1.1 style assignment found at #{caller(1)[0]}; use `response = http.get(...)' instead.\" if $VERBOSE",
            "      [self, body()]",
            "    end",
            "    #",
            "    # response <-> exception relationship",
            "    #",
            "    def code_type   #:nodoc:",
            "      self.class",
            "    end",
            "    def error!   #:nodoc:",
            "      raise error_type().new(@code + ' ' + @message.dump, self)",
            "    end",
            "    def error_type   #:nodoc:",
            "      self.class::EXCEPTION_TYPE",
            "    end",
            "    # Raises HTTP error if the response is not 2xx.",
            "    def value",
            "      error! unless HTTPSuccess === self",
            "    end",
            "    #",
            "    # header (for backward compatibility only; DO NOT USE)",
            "    #",
            "    def response   #:nodoc:",
            "      self",
            "    end",
            "    alias header response        #:nodoc:",
            "    alias read_header response   #:nodoc:",
            "    #",
            "    # body",
            "    #",
            "    def reading_body(sock, reqmethodallowbody)  #:nodoc: internal use only",
            "      @socket = sock",
            "      @body_exist = reqmethodallowbody && self.class.body_permitted?",
            "      begin",
            "        yield",
            "        self.body   # ensure to read body",
            "      ensure",
            "        @socket = nil",
            "      end",
            "    end",
            "    # Gets entity body.  If the block given, yields it to +block+.",
            "    # The body is provided in fragments, as it is read in from the socket.",
            "    #",
            "    # Calling this method a second or subsequent time will return the",
            "    # already read string.",
            "    #",
            "    #   http.request_get('/index.html') {|res|",
            "    #     puts res.read_body",
            "    #   }",
            "    #",
            "    #   http.request_get('/index.html') {|res|",
            "    #     p res.read_body.object_id   # 538149362",
            "    #     p res.read_body.object_id   # 538149362",
            "    #   }",
            "    #",
            "    #   # using iterator",
            "    #   http.request_get('/index.html') {|res|",
            "    #     res.read_body do |segment|",
            "    #       print segment",
            "    #     end",
            "    #   }",
            "    #",
            "    def read_body(dest = nil, &block)",
            "      if @read",
            "        raise IOError, \"#{self.class}\\#read_body called twice\" if dest or block",
            "        return @body",
            "      end",
            "      to = procdest(dest, block)",
            "      stream_check",
            "      if @body_exist",
            "        read_body_0 to",
            "        @body = to",
            "      else",
            "        @body = nil",
            "      end",
            "      @read = true",
            "      @body",
            "    end",
            "    # Returns the entity body.",
            "    #",
            "    # Calling this method a second or subsequent time will return the",
            "    # already read string.",
            "    #",
            "    #   http.request_get('/index.html') {|res|",
            "    #     puts res.body",
            "    #   }",
            "    #",
            "    #   http.request_get('/index.html') {|res|",
            "    #     p res.body.object_id   # 538149362",
            "    #     p res.body.object_id   # 538149362",
            "    #   }",
            "    #",
            "    def body",
            "      read_body()",
            "    end",
            "    alias entity body   #:nodoc: obsolete",
            "    private",
            "    def read_body_0(dest)",
            "      if chunked?",
            "        read_chunked dest",
            "      else",
            "        clen = content_length()",
            "        if clen",
            "          @socket.read clen, dest, true   # ignore EOF",
            "        else",
            "          clen = range_length()",
            "          if clen",
            "            @socket.read clen, dest",
            "          else",
            "            @socket.read_all dest",
            "          end",
            "        end",
            "      end",
            "    end",
            "    def read_chunked(dest)",
            "      len = nil",
            "      total = 0",
            "      while true",
            "        line = @socket.readline",
            "        hexlen = line.slice(/[0-9a-fA-F]+/) or",
            "            raise HTTPBadResponse, \"wrong chunk size line: #{line}\"",
            "        len = hexlen.hex",
            "        break if len == 0",
            "        @socket.read len, dest; total += len",
            "        @socket.read 2   # \\r\\n",
            "      end",
            "      until @socket.readline.empty?",
            "        # none",
            "      end",
            "    end",
            "    def stream_check",
            "      raise IOError, 'attempt to read body out of block' if @socket.closed?",
            "    end",
            "    def procdest(dest, block)",
            "      raise ArgumentError, 'both arg and block given for HTTP method' \\",
            "          if dest and block",
            "      if block",
            "        ReadAdapter.new(block)",
            "      else",
            "        dest || ''",
            "      end",
            "    end",
            "  end",
            "  # :enddoc:",
            "  # for backward compatibility",
            "  class HTTP",
            "    ProxyMod = ProxyDelta",
            "  end",
            "  module NetPrivate",
            "    HTTPRequest = ::Net::HTTPRequest",
            "  end",
            "  HTTPInformationCode = HTTPInformation",
            "  HTTPSuccessCode     = HTTPSuccess",
            "  HTTPRedirectionCode = HTTPRedirection",
            "  HTTPRetriableCode   = HTTPRedirection",
            "  HTTPClientErrorCode = HTTPClientError",
            "  HTTPFatalErrorCode  = HTTPClientError",
            "  HTTPServerErrorCode = HTTPServerError",
            "  HTTPResponceReceiver = HTTPResponse",
            "end   # module Net",
            "# = net/protocol.rb",
            "# Copyright (c) 1999-2003 Yukihiro Matsumoto",
            "# Copyright (c) 1999-2003 Minero Aoki",
            "# written and maintained by Minero Aoki <aamine@loveruby.net>",
            "# This program is free software. You can re-distribute and/or",
            "# modify this program under the same terms as Ruby itself,",
            "# Ruby Distribute License or GNU General Public License.",
            "# $Id: protocol.rb,v 1.73 2003/11/16 03:16:42 aamine Exp $",
            "# WARNING: This file is going to remove.",
            "# Do not rely on the implementation written in this file.",
            "require 'socket'",
            "require 'timeout'",
            "module Net # :nodoc:",
            "  class Protocol   #:nodoc: internal use only",
            "    private",
            "    def Protocol.protocol_param( name, val )",
            "      module_eval(<<-End, __FILE__, __LINE__ + 1)",
            "        def #{name}",
            "          #{val}",
            "        end",
            "      End",
            "    end",
            "  end",
            "  class ProtocolError          < StandardError; end",
            "  class ProtoSyntaxError       < ProtocolError; end",
            "  class ProtoFatalError        < ProtocolError; end",
            "  class ProtoUnknownError      < ProtocolError; end",
            "  class ProtoServerError       < ProtocolError; end",
            "  class ProtoAuthError         < ProtocolError; end",
            "  class ProtoCommandError      < ProtocolError; end",
            "  class ProtoRetriableError    < ProtocolError; end",
            "  ProtocRetryError = ProtoRetriableError",
            "  class InternetMessageIO   #:nodoc: internal use only",
            "    class << self",
            "      alias open new",
            "    end",
            "    def initialize( addr, port,",
            "                    open_timeout = nil, read_timeout = nil,",
            "                    debug_output = nil )",
            "      @address      = addr",
            "      @port         = port",
            "      @read_timeout = read_timeout",
            "      @debug_output = debug_output",
            "      @socket       = nil",
            "      @rbuf         = nil   # read buffer",
            "      @wbuf         = nil   # write buffer",
            "      connect open_timeout",
            "      LOG 'opened'",
            "    end",
            "    attr_reader :address",
            "    attr_reader :port",
            "    def ip_address",
            "      return '' unless @socket",
            "      @socket.addr[3]",
            "    end",
            "    attr_accessor :read_timeout",
            "    attr_reader :socket",
            "    def connect( open_timeout )",
            "      LOG \"opening connection to #{@address}...\"",
            "      timeout(open_timeout) {",
            "        @socket = TCPsocket.new(@address, @port)",
            "      }",
            "      @rbuf = ''",
            "    end",
            "    private :connect",
            "    def close",
            "      if @socket",
            "        @socket.close",
            "        LOG 'closed'",
            "      else",
            "        LOG 'close call for already closed socket'",
            "      end",
            "      @socket = nil",
            "      @rbuf = ''",
            "    end",
            "    def reopen( open_timeout = nil )",
            "      LOG 'reopening...'",
            "      close",
            "      connect open_timeout",
            "      LOG 'reopened'",
            "    end",
            "    def closed?",
            "      not @socket",
            "    end",
            "    def inspect",
            "      \"#<#{self.class} #{closed?() ? 'closed' : 'opened'}>\"",
            "    end",
            "    ###",
            "    ###  READ",
            "    ###",
            "    public",
            "    def read( len, dest = '', ignore_eof = false )",
            "      LOG \"reading #{len} bytes...\"",
            "      # LOG_off()   # experimental: [ruby-list:38800]",
            "      read_bytes = 0",
            "      begin",
            "        while read_bytes + @rbuf.size < len",
            "          read_bytes += rbuf_moveto(dest, @rbuf.size)",
            "          rbuf_fill",
            "        end",
            "        rbuf_moveto dest, len - read_bytes",
            "      rescue EOFError",
            "        raise unless ignore_eof",
            "      end",
            "      # LOG_on()",
            "      LOG \"read #{read_bytes} bytes\"",
            "      dest",
            "    end",
            "    def read_all( dest = '' )",
            "      LOG 'reading all...'",
            "      # LOG_off()   # experimental: [ruby-list:38800]",
            "      read_bytes = 0",
            "      begin",
            "        while true",
            "          read_bytes += rbuf_moveto(dest, @rbuf.size)",
            "          rbuf_fill",
            "        end",
            "      rescue EOFError",
            "        ;",
            "      end",
            "      # LOG_on()",
            "      LOG \"read #{read_bytes} bytes\"",
            "      dest",
            "    end",
            "    def readuntil( terminator, ignore_eof = false )",
            "      dest = ''",
            "      begin",
            "        until idx = @rbuf.index(terminator)",
            "          rbuf_fill",
            "        end",
            "        rbuf_moveto dest, idx + terminator.size",
            "      rescue EOFError",
            "        raise unless ignore_eof",
            "        rbuf_moveto dest, @rbuf.size",
            "      end",
            "      dest",
            "    end",
            "        ",
            "    def readline",
            "      readuntil(\"\\n\").chop",
            "    end",
            "    def each_message_chunk",
            "      LOG 'reading message...'",
            "      LOG_off()",
            "      read_bytes = 0",
            "      while (line = readuntil(\"\\r\\n\")) != \".\\r\\n\"",
            "        read_bytes += line.size",
            "        yield line.sub(/\\A\\./, '')",
            "      end",
            "      LOG_on()",
            "      LOG \"read message (#{read_bytes} bytes)\"",
            "    end",
            "    # *library private* (cannot handle 'break')",
            "    def each_list_item",
            "      while (str = readuntil(\"\\r\\n\")) != \".\\r\\n\"",
            "        yield str.chop",
            "      end",
            "    end",
            "    private",
            "    def rbuf_fill",
            "      until IO.select([@socket], nil, nil, @read_timeout)",
            "        raise TimeoutError, \"socket read timeout (#{@read_timeout} sec)\"",
            "      end",
            "      @rbuf << @socket.sysread(1024)",
            "    end",
            "    def rbuf_moveto( dest, len )",
            "      dest << (s = @rbuf.slice!(0, len))",
            "      @debug_output << %Q[-> #{s.dump}\\n] if @debug_output",
            "      len",
            "    end",
            "    ###",
            "    ###  WRITE",
            "    ###",
            "    public",
            "    def write( str )",
            "      writing {",
            "        write0 str",
            "      }",
            "    end",
            "    def writeline( str )",
            "      writing {",
            "        write0 str + \"\\r\\n\"",
            "      }",
            "    end",
            "    def write_message( src )",
            "      LOG \"writing message from #{src.class}\"",
            "      LOG_off()",
            "      len = using_each_crlf_line {",
            "        write_message_0 src",
            "      }",
            "      LOG_on()",
            "      LOG \"wrote #{len} bytes\"",
            "      len",
            "    end",
            "    def write_message_by_block( &block )",
            "      LOG 'writing message from block'",
            "      LOG_off()",
            "      len = using_each_crlf_line {",
            "        begin",
            "          block.call(WriteAdapter.new(self, :write_message_0))",
            "        rescue LocalJumpError",
            "          # allow `break' from writer block",
            "        end",
            "      }",
            "      LOG_on()",
            "      LOG \"wrote #{len} bytes\"",
            "      len",
            "    end",
            "    private",
            "    def writing",
            "      @written_bytes = 0",
            "      @debug_output << '<- ' if @debug_output",
            "      yield",
            "      @socket.flush",
            "      @debug_output << \"\\n\" if @debug_output",
            "      bytes = @written_bytes",
            "      @written_bytes = nil",
            "      bytes",
            "    end",
            "    def write0( str )",
            "      @debug_output << str.dump if @debug_output",
            "      len = @socket.write(str)",
            "      @written_bytes += len",
            "      len",
            "    end",
            "    #",
            "    # Reads string from src calling :each, and write to @socket.",
            "    # Escapes '.' on the each line head.",
            "    #",
            "    def write_message_0( src )",
            "      prev = @written_bytes",
            "      each_crlf_line(src) do |line|",
            "        if line[0] == ?.",
            "        then write0 '.' + line",
            "        else write0       line",
            "        end",
            "      end",
            "      @written_bytes - prev",
            "    end",
            "    #",
            "    # setup @wbuf for each_crlf_line.",
            "    #",
            "    def using_each_crlf_line",
            "      writing {",
            "          @wbuf = ''",
            "          yield",
            "          if not @wbuf.empty?       # unterminated last line",
            "            if @wbuf[-1] == ?\\r",
            "              @wbuf.chop!",
            "            end",
            "            @wbuf.concat \"\\r\\n\"",
            "            write0 @wbuf",
            "          elsif @written_bytes == 0   # empty src",
            "            write0 \"\\r\\n\"",
            "          end",
            "          write0 \".\\r\\n\"",
            "          @wbuf = nil",
            "      }",
            "    end",
            "    #",
            "    # extract a CR-LF-terminating-line from @wbuf and yield it.",
            "    #",
            "    def each_crlf_line( src )",
            "      adding(src) do",
            "        beg = 0",
            "        buf = @wbuf",
            "        while buf.index(/\\n|\\r\\n|\\r/, beg)",
            "          m = Regexp.last_match",
            "          if (m.begin(0) == buf.length - 1) and buf[-1] == ?\\r",
            "            # \"...\\r\" : can follow \"\\n...\"",
            "            break",
            "          end",
            "          str = buf[beg ... m.begin(0)]",
            "          str.concat \"\\r\\n\"",
            "          yield str",
            "          beg = m.end(0)",
            "        end",
            "        @wbuf = buf[beg ... buf.length]",
            "      end",
            "    end",
            "    #",
            "    # Reads strings from SRC and add to @wbuf, then yield.",
            "    #",
            "    def adding( src )",
            "      case src",
            "      when String    # for speeding up.",
            "        0.step(src.size - 1, 2048) do |i|",
            "          @wbuf << src[i,2048]",
            "          yield",
            "        end",
            "      when File    # for speeding up.",
            "        while s = src.read(2048)",
            "          s[0,0] = @wbuf",
            "          @wbuf = s",
            "          yield",
            "        end",
            "      else    # generic reader",
            "        src.each do |s|",
            "          @wbuf << s",
            "          yield if @wbuf.size > 2048",
            "        end",
            "        yield unless @wbuf.empty?",
            "      end",
            "    end",
            "    ###",
            "    ### DEBUG",
            "    ###",
            "    private",
            "    def LOG_off",
            "      @save_debug_out = @debug_output",
            "      @debug_output = nil",
            "    end",
            "    def LOG_on",
            "      @debug_output = @save_debug_out",
            "    end",
            "    def LOG( msg )",
            "      return unless @debug_output",
            "      @debug_output << msg",
            "      @debug_output << \"\\n\"",
            "    end",
            "  end",
            "  # The writer adapter class",
            "  class WriteAdapter",
            "    def initialize( sock, mid )",
            "      @socket = sock",
            "      @method_id = mid",
            "    end",
            "    def inspect",
            "      \"#<#{self.class} socket=#{@socket.inspect}>\"",
            "    end",
            "    def write( str )",
            "      @socket.__send__(@method_id, str)",
            "    end",
            "    alias print write",
            "    def <<( str )",
            "      write str",
            "      self",
            "    end",
            "    def puts( str = '' )",
            "      write str.sub(/\\n?/, \"\\n\")",
            "    end",
            "    def printf( *args )",
            "      write sprintf(*args)",
            "    end",
            "  end",
            "  class ReadAdapter   #:nodoc: internal use only",
            "    def initialize( block )",
            "      @block = block",
            "    end",
            "    def inspect",
            "      \"#<#{self.class}>\"",
            "    end",
            "    def <<( str )",
            "      call_block(str, &@block) if @block",
            "    end",
            "    private",
            "    #",
            "    # This method is needed because @block must be called by yield,",
            "    # not Proc#call.  You can see difference when using `break' in",
            "    # the block.",
            "    #",
            "    def call_block( str )",
            "      yield str",
            "    end",
            "  end",
            "  module NetPrivate   #:nodoc: obsolete",
            "    Socket = ::Net::InternetMessageIO",
            "  end",
            "end   # module Net",
            "L!This program cannot be run in DOS mode.",
            "Rich",
            ".text",
            "`.rdata",
            "@.data",
            ".reloc",
            "E3\u048aX",
            "u2=pg",
            "t]=tg",
            "t\t=\\g",
            "u:=pg",
            "u~=pg",
            "]UQ}",
            "u =`g",
            "u1=`g",
            "!ue}",
            "!u_=dg",
            ")tc}",
            "]t]}",
            "}tW}",
            ".tQ}",
            ",tK}",
            "!tE}",
            "?t?}",
            "/t9}",
            ":t3}",
            ";t-}",
            "]U0}",
            "EMMUUEE",
            "MUUEEMM",
            "E\u040bM\u0409M\u050bU\u0509U\u060bE\u0609E\u070bM\u0709MUUEE",
            "!us}",
            "3UPg",
            " ~*}",
            "]UQhb",
            "j\thb",
            "j\thb",
            "URz+",
            "UE;Es",
            "u\t=$`",
            "UUEBE}6",
            "U3\u024a\" ",
            "0|)U",
            "Qu U",
            "0|)U",
            "t\t=Lg",
            "5=Lg",
            "}# c",
            "EUU}",
            "~n=@g",
            "~ EPMQU",
            "V}@}",
            "uP=\\g",
            "MM=\\g",
            "EEB=$`",
            "}# c",
            "EUU}u(E3\u024a",
            "u/M3\u048a",
            "RE3\u024a",
            "u?U3",
            "t/M3\u048a",
            "RE3\u024a",
            "PM3\u048a",
            "E\u070bE\u0709E=$`",
            "}# c",
            "EE\u0609E",
            "E\u050bU\u0509U}u(E3\u024a",
            "ta=|g",
            "RE3\u024a",
            "}# c",
            "EE\u0309E",
            "E\u020bU\u0209U}u8E3\u024a",
            "u/M3\u048a",
            "RE3\u024a",
            "u?U3",
            "t/M3\u048a",
            "RE3\u024a",
            "PM3\u048a",
            "nM3\u048a",
            "RE3\u024a",
            "}!=$c",
            "UUBEE7z",
            "M=$`",
            "EM\u0109M",
            "EEE}u(M3\u048a",
            "RE3\u024a",
            "}^u/U3",
            "PM3\u048a",
            "}_u?E3\u024a",
            "t/U3",
            "PM3\u048a",
            "EMM}u",
            "hj(j",
            "UUB}=",
            "EMM}u",
            "EMM}u",
            "EEE}u",
            "EMM}u",
            "}# c",
            "EUU}u,j",
            "EEE}u",
            "Q}Bt",
            "EPMQ",
            "UREP",
            "}# c",
            "t9=@g",
            "@}\tE",
            "t\t=@g",
            "}/E3\u024ab",
            "\ubf4b]UQ=",
            "@|\tE",
            "EE]U}",
            "]UQE",
            "E} w[E3\u048a4",
            "E} w[E3\u048a6",
            "EUUEML}u",
            "EMMUED}u",
            "}# c",
            "EEEMUT}u",
            "c=|g",
            "UE;E}",
            "MTRj",
            "E]Ul4g",
            "EU\u0409U}u",
            "EU\u0309U}u",
            "}?uZ}=uTEtg",
            "}# c",
            "EU\u0109U}u",
            "E0EA}A|",
            "M7M$}a|",
            "EEMM}0|",
            "U0UA}A|",
            "E7E$}a|",
            "UUEEE",
            "U\u050bE|g",
            "EUU} ",
            "EMM} ",
            "}?u^}=uX",
            "}# c",
            "EEE} u",
            "EUU} ",
            "EMM} ",
            "?EMQY",
            "?EURG",
            "?E\u070bEP5",
            "?E\u060bM",
            "\u0289M}=",
            "E}=tc",
            "\u0409U}=t\"",
            "]U8g",
            "]UQ}",
            "AE\tM",
            "GM'}",
            "+u\tE>",
            "MU;Uu",
            "EM;Mu",
            "UE3+",
            "3\u0485uE3\u024a",
            "~~;M3\u048a",
            "MU;Uu",
            "EE3+",
            "3uM3\u048a",
            "|]U3",
            "EM;Mu",
            "UE3+",
            "MU;Uu",
            "EE3+",
            "3uM3\u048a",
            "MU;Uu",
            "EE3+",
            "]%4P",
            "t65g",
            "SUVt$",
            "u\t3_^][",
            "WVS\u0445t",
            "WVSu\t3_^][",
            "WVSZ",
            "WPSt",
            "u\"WVSu",
            "WVS\u040b_^][",
            "rb_str_resize",
            "rb_define_const",
            "rb_define_module_function",
            "rb_define_module",
            "rb_str_new",
            "rb_string_value",
            "msvcrt-ruby18.dll",
            "atoi",
            "MSVCRT.dll",
            "free",
            "_initterm",
            "malloc",
            "_adjust_fdiv",
            "DisableThreadLibraryCalls",
            "KERNEL32.dll",
            "nkf.so",
            "Init_nkf",
            "!!!#!V!W!\"!&%r%!%#%%%'%)%c%e%g%C!<%\"%$%&%(%*%+%-%/%1%3%5%7%9%;%=%?%A%D%F%H%J%K%L%M%N%O%R%U%X%[%^%_%`%a%b%d%f%h%i%j%k%l%m%o%s!+!,",
            "%,%.%0%2%4%6%8%:%<%>%@%B%E%G%I",
            "%P%S%V%Y%\\",
            "%Q%T%W%Z%]",
            ":;?!",
            "`'\"\"()",
            "[]{}<>",
            "%#&*@",
            "0/9711/Shinji Kono",
            "Copyright (C) 1987, FUJITSU LTD. (I.Ichikawa),1998 S. Kono, COW",
            "UNKNOWN",
            "NOCONV",
            "BINARY",
            "SJIS",
            "AUTO",
            "guess",
            "0\"0Q0X0^0|0000",
            "1*131<1c111111",
            "232B2\\22222",
            "3)3@3D3H3L3P3T3333333333333333",
            "4!4)4?4\\4g4p44444444444",
            "5-5k5{55555555555",
            "6#646=6O66V7",
            "8:8W89999999 :/:5:U:g:l:",
            "::::::::\t;|;;;;;;;;;;;;;",
            "<$<8<@<J<P<X<e<<<<<<",
            "='=+=3=7=B=F=Q=[=======",
            ">9>A>Q>Y>d>s>>>>>>>>",
            "?.?=?A?r?z?????????????????????",
            "0o0x00000000000000000",
            "1b11111",
            "2 212:2?2P2x2|222222222222",
            "3C3P3W3t33333333333\"4/464V4Z4f4n4t4|4444444",
            "5#5)565?5w5555555555",
            "6,656m6z66666666",
            "7%72797Z7g7n777777777(888F8N8T8\\8b8n8v8888888",
            "9!9.959J9R9[9d999999999999",
            ":I:i:s:::::::::::",
            ";E;M;U;j;w;;;;;;;;;",
            "<$<3<L<a<z<<<<<<<<<",
            "=\"=+=a=n==========",
            "> >->G>Q>d>q>~>>>>>>>>>",
            "?!?)?_?l??????????",
            "0(020C0V0o000000000",
            "1:1D1H1_1i1m1~1111111",
            "2&232<2B2K2P2Y2_2h2n2",
            "22)323Y3`3f3",
            "4=4l44444444",
            "5+5258555",
            "6r6v6z6~666666",
            "777777777",
            "8!8'848=8l8}888888",
            "9#9.979B9J9\\9i9o9w9}9999999",
            ":Y:_:e:k:q:x:~::::::::::::+;;;",
            "<'<0<G<R<X<^<f<l<y<<<<<<<<<",
            "=$=.=4=;=A=N=W=|============\t>",
            ">:>C>X>>>>>",
            "? ?)?L?[?`?h?u????????",
            "50?0I0S0]0g0q0{000000000000000",
            "1666666666666",
            "7#767@7U7c7l777",
            "828H8W8",
            "efinkf.so",
            "NB10",
            "D:\\Prog\\WIN\\ruby\\build\\ext\\nkf\\nkf.pdb",
            "# parsedate.rb: Written by Tadayoshi Funaba 2001, 2002",
            "# $Id: parsedate.rb,v 2.6 2002-05-14 07:43:18+09 tadf Exp $",
            "require 'date/format'",
            "module ParseDate",
            "  def parsedate(str, comp=false)",
            "    Date._parse(str, comp).",
            "      values_at(:year, :mon, :mday, :hour, :min, :sec, :zone, :wday)",
            "  end",
            "  module_function :parsedate",
            "#   rational.rb - ",
            "#   \t$Release Version: 0.5 $",
            "#   \t$Revision: 1.7 $",
            "#   \t$Date: 1999/08/24 12:49:28 $",
            "#   \tby Keiju ISHITSUKA(SHL Japan Inc.)",
            "# --",
            "#   Usage:",
            "#   class Rational < Numeric",
            "#      (include Comparable)",
            "#   Rational(a, b) --> a/b",
            "#   Rational::+",
            "#   Rational::-",
            "#   Rational::*",
            "#   Rational::/",
            "#   Rational::**",
            "#   Rational::%",
            "#   Rational::divmod",
            "#   Rational::abs",
            "#   Rational::<=>",
            "#   Rational::to_i",
            "#   Rational::to_f",
            "#   Rational::to_s",
            "#   Integer::gcd",
            "#   Integer::lcm",
            "#   Integer::gcdlcm",
            "#   Integer::to_r",
            "#   Fixnum::**",
            "#   Fixnum::quo",
            "#   Bignum::**",
            "#   Bignum::quo",
            "def Rational(a, b = 1)",
            "  if a.kind_of?(Rational) && b == 1",
            "    a",
            "  else",
            "    Rational.reduce(a, b)",
            "  end",
            "class Rational < Numeric",
            "  @RCS_ID='-$Id: rational.rb,v 1.7 1999/08/24 12:49:28 keiju Exp keiju $-'",
            "  def Rational.reduce(num, den = 1)",
            "    raise ZeroDivisionError, \"denominator is zero\" if den == 0",
            "    if den < 0",
            "      num = -num",
            "      den = -den",
            "    end",
            "    gcd = num.gcd(den)",
            "    num = num.div(gcd)",
            "    den = den.div(gcd)",
            "    if den == 1 && defined?(Unify)",
            "      num",
            "    else",
            "      new!(num, den)",
            "    end",
            "  end",
            "  def Rational.new!(num, den = 1)",
            "    new(num, den)",
            "  end",
            "  private_class_method :new",
            "  def initialize(num, den)",
            "    if den < 0",
            "      num = -num",
            "      den = -den",
            "    end",
            "    if num.kind_of?(Integer) and den.kind_of?(Integer)",
            "      @numerator = num",
            "      @denominator = den",
            "    else",
            "      @numerator = num.to_i",
            "      @denominator = den.to_i",
            "    end",
            "  end",
            "  def + (a)",
            "    if a.kind_of?(Rational)",
            "      num = @numerator * a.denominator",
            "      num_a = a.numerator * @denominator",
            "      Rational(num + num_a, @denominator * a.denominator)",
            "    elsif a.kind_of?(Integer)",
            "      self + Rational.new!(a, 1)",
            "    elsif a.kind_of?(Float)",
            "      Float(self) + a",
            "    else",
            "      x, y = a.coerce(self)",
            "      x + y",
            "    end",
            "  end",
            "  def - (a)",
            "    if a.kind_of?(Rational)",
            "      num = @numerator * a.denominator",
            "      num_a = a.numerator * @denominator",
            "      Rational(num - num_a, @denominator*a.denominator)",
            "    elsif a.kind_of?(Integer)",
            "      self - Rational.new!(a, 1)",
            "    elsif a.kind_of?(Float)",
            "      Float(self) - a",
            "    else",
            "      x, y = a.coerce(self)",
            "      x - y",
            "    end",
            "  end",
            "  def * (a)",
            "    if a.kind_of?(Rational)",
            "      num = @numerator * a.numerator",
            "      den = @denominator * a.denominator",
            "      Rational(num, den)",
            "    elsif a.kind_of?(Integer)",
            "      self * Rational.new!(a, 1)",
            "    elsif a.kind_of?(Float)",
            "      Float(self) * a",
            "    else",
            "      x, y = a.coerce(self)",
            "      x * y",
            "    end",
            "  end",
            "  def / (a)",
            "    if a.kind_of?(Rational)",
            "      num = @numerator * a.denominator",
            "      den = @denominator * a.numerator",
            "      Rational(num, den)",
            "    elsif a.kind_of?(Integer)",
            "      raise ZeroDivisionError, \"division by zero\" if a == 0",
            "      self / Rational.new!(a, 1)",
            "    elsif a.kind_of?(Float)",
            "      Float(self) / a",
            "    else",
            "      x, y = a.coerce(self)",
            "      x / y",
            "    end",
            "  end",
            "  def ** (other)",
            "    if other.kind_of?(Rational)",
            "      Float(self) ** other",
            "    elsif other.kind_of?(Integer)",
            "      if other > 0",
            "\tnum = @numerator ** other",
            "\tden = @denominator ** other",
            "      elsif other < 0",
            "\tnum = @denominator ** -other",
            "\tden = @numerator ** -other",
            "      elsif other == 0",
            "\tnum = 1",
            "\tden = 1",
            "      end",
            "      Rational.new!(num, den)",
            "    elsif other.kind_of?(Float)",
            "      Float(self) ** other",
            "    else",
            "      x, y = other.coerce(self)",
            "      x ** y",
            "    end",
            "  end",
            "  def % (other)",
            "    value = (self / other).to_i",
            "    return self - other * value",
            "  end",
            "  def divmod(other)",
            "    value = (self / other).to_i",
            "    return value, self - other * value",
            "  end",
            "  def abs",
            "    if @numerator > 0",
            "      Rational.new!(@numerator, @denominator)",
            "    else",
            "      Rational.new!(-@numerator, @denominator)",
            "    end",
            "  end",
            "  def == (other)",
            "    if other.kind_of?(Rational)",
            "      @numerator == other.numerator and @denominator == other.denominator",
            "    elsif other.kind_of?(Integer)",
            "      self == Rational.new!(other, 1)",
            "    elsif other.kind_of?(Float)",
            "      Float(self) == other",
            "    else",
            "      other == self",
            "    end",
            "  end",
            "  def <=> (other)",
            "    if other.kind_of?(Rational)",
            "      num = @numerator * other.denominator",
            "      num_a = other.numerator * @denominator",
            "      v = num - num_a",
            "      if v > 0",
            "\treturn 1",
            "      elsif v < 0",
            "\treturn  -1",
            "      else",
            "\treturn 0",
            "      end",
            "    elsif other.kind_of?(Integer)",
            "      return self <=> Rational.new!(other, 1)",
            "    elsif other.kind_of?(Float)",
            "      return Float(self) <=> other",
            "    elsif defined? other.coerce",
            "      x, y = other.coerce(self)",
            "      return x <=> y",
            "    else",
            "      return nil",
            "    end",
            "  end",
            "  def coerce(other)",
            "    if other.kind_of?(Float)",
            "      return other, self.to_f",
            "    elsif other.kind_of?(Integer)",
            "      return Rational.new!(other, 1), self",
            "    else",
            "      super",
            "    end",
            "  end",
            "  def to_i",
            "    Integer(@numerator.div(@denominator))",
            "  end",
            "  def to_f",
            "    @numerator.to_f/@denominator.to_f",
            "  end",
            "  def to_s",
            "    if @denominator == 1",
            "      @numerator.to_s",
            "    else",
            "      @numerator.to_s+\"/\"+@denominator.to_s",
            "    end",
            "  end",
            "  def to_r",
            "    self",
            "  end",
            "  def inspect",
            "    sprintf(\"Rational(%s, %s)\", @numerator.inspect, @denominator.inspect)",
            "  end",
            "  def hash",
            "    @numerator.hash ^ @denominator.hash",
            "  end",
            "  attr :numerator",
            "  attr :denominator",
            "  private :initialize",
            "class Integer",
            "  def numerator",
            "    self",
            "  end",
            "  def denominator",
            "    1",
            "  end",
            "  def to_r",
            "    Rational(self, 1)",
            "  end",
            "  def gcd(n)",
            "    m = self.abs",
            "    n = n.abs",
            "    return n if m == 0",
            "    return m if n == 0",
            "    b = 0",
            "    while n[0] == 0 && m[0] == 0",
            "      b += 1; n >>= 1; m >>= 1",
            "    end",
            "    m >>= 1 while m[0] == 0",
            "    n >>= 1 while n[0] == 0",
            "    while m != n",
            "      m, n = n, m if n > m",
            "      m -= n; m >>= 1 while m[0] == 0",
            "    end",
            "    m << b",
            "  end",
            "  def gcd2(int)",
            "    a = self.abs",
            "    b = int.abs",
            "    a, b = b, a if a < b",
            "    while b != 0",
            "      void, a = a.divmod(b)",
            "      a, b = b, a",
            "    end",
            "    return a",
            "  end",
            "  def lcm(int)",
            "    a = self.abs",
            "    b = int.abs",
            "    gcd = a.gcd(b)",
            "    (a.div(gcd)) * b",
            "  end",
            "  def gcdlcm(int)",
            "    a = self.abs",
            "    b = int.abs",
            "    gcd = a.gcd(b)",
            "    return gcd, (a.div(gcd)) * b",
            "  end",
            "class Fixnum",
            "  undef quo",
            "  def quo(other)",
            "    Rational.new!(self,1) / other",
            "  end",
            "  alias rdiv quo",
            "  def rpower (other)",
            "    if other >= 0",
            "      self.power!(other)",
            "    else",
            "      Rational.new!(self,1)**other",
            "    end",
            "  end",
            "  unless defined? 1.power!",
            "    alias power! ** ",
            "    alias ** rpower",
            "  end",
            "class Bignum",
            "  unless defined? Complex",
            "    alias power! **",
            "  end",
            "  undef quo",
            "  def quo(other)",
            "    Rational.new!(self,1) / other",
            "  end",
            "  alias rdiv quo",
            "  def rpower (other)",
            "    if other >= 0",
            "      self.power!(other)",
            "    else",
            "      Rational.new!(self, 1)**other",
            "    end",
            "  end",
            "  unless defined? Complex",
            "    alias ** rpower",
            "  end",
            "L!This program cannot be run in DOS mode.",
            "l!MO2",
            "l!4l!s2Al!Rich",
            ".text",
            "`.rdata",
            "@.data",
            ".reloc",
            "]UQj",
            "t!EP~K",
            "jh0+",
            "jh07",
            "jhP;",
            "jh N",
            "jh@S",
            "j hD",
            "j\thP",
            "EEPM",
            "EURS",
            "EMQzS",
            "E]UQE",
            "EMM}",
            "UEPQ",
            "UEPP",
            "]U(j",
            "EEEM",
            "E\u070bM\u0709MUU\u060bE",
            "u\tE!",
            "u\tE ",
            "u\tE<",
            "u\tE$",
            "?E\u0603}",
            "EMQkN",
            "UREPMQURE",
            "]U E",
            "EEEM",
            "EMME",
            "eUUE",
            "MURM",
            "EPMQUREPM",
            "UREP",
            "]U(j",
            "EPMQURh ",
            "EMQK",
            "EMMUR",
            "EEPK",
            "t`URK",
            "URTK",
            "E\u070bEH",
            "PMQUB",
            "REPK",
            "E\u060bMQUB",
            "REP9K",
            "}\"MQ",
            "PQhl",
            "PQURPQ",
            "REPI",
            "3\u0245u3\u0485",
            "}\"EPH",
            "t+QVQ",
            "PR.H",
            "5PQhG",
            "t$Pf1",
            "UREPQRj",
            "EPMQUREPh|",
            "EPMQUREPM",
            "]U$E",
            "UEEPh+",
            "MQhP,",
            "H QE",
            "MH U",
            "E\tMQ",
            "UQ }",
            "u&EH",
            "REPC",
            "|.3\u0243}",
            "EB }",
            "EP:C",
            "Ej URE",
            "QREPMQ-",
            "t0}3\u0443U",
            "_]UQ}",
            "3]U4VW}",
            "EEEM",
            "REPA",
            "<uuE",
            "EM:A",
            "\u0483UEE}",
            "<urE",
            "UU\u060bE\u060a",
            "M\u05cbU:",
            "M\u058bU:J",
            "E\u040bM\u0409M\u0303}",
            "_}3\u0443;M",
            "r(}3\u0443Qh\u0418",
            "_^]U",
            "3EEEEfE",
            "PMQ_",
            "]UQVW}",
            "U}3\u0443;M",
            "r%}3\u0443Qh",
            "_^]UQE",
            "EE]U EE",
            "tb}H'",
            "MQURh",
            "M~iE",
            "UREPh",
            "UREP<",
            "Ph@\\",
            "MQh5",
            "EURR:",
            "tXc;",
            "U\tEH",
            "t)UB",
            "EPMQhl",
            "MQURE",
            "xxR8",
            "|PMQx",
            "3\u0485u3",
            "EPd8",
            "|PMQx",
            "xxR6",
            "EP|Qx",
            "EP|Qx",
            "_^]U",
            "EEEj",
            "MURo4",
            "EMQh@\\",
            "URh<",
            "E\tMQ",
            "EUU\tEH",
            "t?UB",
            "]U,}",
            "EPMQUREPh8",
            "MURu2",
            "EPMQ",
            "E\u060bM\u0609MURx2",
            "EE\tMQ",
            "E\u050bEH",
            "PMQUB",
            "iQEP#",
            "QURE",
            "EMQUREPD",
            "MU:J",
            "EMM}",
            "EE\u070bM\u070a",
            "U\u06cbE:",
            "U\u068bE:P",
            "\u0243M\u050bU\u0509U\u0403}",
            "MM\u020bU\u020a",
            "E\u01cbM:",
            "E\u018bM:A",
            "\u0483UEE}",
            "MU:J",
            "EMM}",
            "UE:P",
            "\u0243MUU}",
            "EM:A",
            "\u0483UEE}",
            "t1xH",
            "v|:J",
            "ppll",
            "t1dQ",
            "bh:P",
            "\u0243\\\\XX",
            "t1PB",
            "NT:A",
            "\u0483HHDD",
            "t1<H",
            ":@:J",
            "4400",
            "EPhT",
            "U\u01c5(X",
            "t1$Q",
            "\"(:P",
            "URh<",
            "EMQA'",
            "]UQE",
            "EMQ&",
            "MUR?&",
            "EEPM",
            "PMQ%",
            "EQRx$",
            "]U$E",
            "EPMQhl",
            "E\u070bU\u0709UEPMQ",
            "PURU$",
            "EEPMQ=$",
            "t9EH",
            "PEP#",
            "PEP#",
            "PEP#",
            "\u028bE]U",
            "EPMQhl",
            "u\tE\u0319",
            "MQy#",
            "EURh\"",
            "EPMQ",
            "E3fH",
            "EEUB",
            "MQUR",
            "UREPh",
            "EMURPQRPMQh\u0419",
            "MQ7\"",
            "t-Rh",
            "M\u050dREPMQUR~",
            "t$P\t",
            "M\tUB",
            "tlMQ",
            "EPMQ",
            "\ub14bE]U",
            "EEMQURhl",
            "$$0EP",
            "ttMMUz",
            "3}Ex",
            "u(MQ",
            "EkMy",
            "|EUB",
            "  Ph",
            "AM\u0203}",
            "8REPQURE",
            "E\tMQ",
            "M\uc2d50Rh",
            "t\"8R",
            "_^]U",
            "u4Ut*E",
            "3\u0245uU",
            "u5Et+M",
            "3\u0485uE]U",
            "EMQ\u04b4",
            "u5Et+M",
            "3\u0485uEPM3fQ",
            "]UQE",
            "u\u014b]U",
            "EEMMU",
            "b`Uz",
            "t:Ex",
            "fEMy",
            "t1lQ",
            "jp:P",
            "\u0243dd``",
            "t1XQ",
            "V\\:P",
            "\u0243PPLL",
            "fEfB",
            "fEfB",
            "MU\u0709U}",
            "UUUE%",
            "u}U EP",
            "fEfB",
            "QUREPMQUk",
            "PMQUREH",
            "E_^]]",
            "EPMQUREPMQh|",
            "}E MA",
            "fEfB",
            "t]E83Q",
            "t*E8MQ",
            "}E MA",
            "fEfB",
            "E_^]UPVWE",
            "M\u0609MU",
            "uAE\u0309E}*",
            "M\u050bUB",
            "fEfB",
            "u\u040bU}",
            "MU;uoEH",
            "tZM93Q",
            "t*M9U\u020bR",
            "E_^]U4",
            "UE;B",
            "ty3fP",
            "tDM93;M",
            "u\tM ",
            "u\tE ",
            "REPM",
            "3\u0443;M",
            "tnE ",
            "t j.M",
            "M93;M",
            "REPM",
            "F3\u0443;M",
            "3_^]UQE",
            "s+\u020b\u0105",
            "P\u030bD$",
            "SUVt$",
            "u\t3_^][",
            "WVS\u0445t",
            "WVSu\t3_^][",
            "WVSZ",
            "WPSt",
            "u\"WVSu",
            "WVS\u040b_^][",
            "rb_str_new2",
            "rb_raise",
            "rb_str_new",
            "rb_define_module_under",
            "rb_define_global_const",
            "rb_define_method",
            "rb_define_singleton_method",
            "rb_undef_method",
            "rb_cIO",
            "rb_define_class",
            "rb_eStandardError",
            "rb_io_check_closed",
            "rb_io_taint_check",
            "rb_obj_alloc",
            "rb_num2long",
            "rb_io_synchronized",
            "rb_fdopen",
            "ruby_xmalloc",
            "rb_io_close",
            "rb_sys_fail",
            "rb_w32_shutdown",
            "rb_eArgError",
            "rb_scan_args",
            "rb_eSecurityError",
            "ruby_safe_level",
            "rb_w32_setsockopt",
            "rb_string_value",
            "rb_secure",
            "rb_w32_getsockopt",
            "rb_w32_getsockname",
            "rb_w32_getpeername",
            "rb_io_wait_writable",
            "rb_w32_send",
            "rb_w32_sendto",
            "rb_thread_fd_writable",
            "rb_bug",
            "rb_assoc_new",
            "rb_obj_taint",
            "rb_io_wait_readable",
            "rb_thread_schedule",
            "rb_thread_tick",
            "rb_thread_critical",
            "rb_trap_exec",
            "rb_trap_pending",
            "rb_prohibit_interrupt",
            "rb_w32_recvfrom",
            "rb_trap_immediate",
            "rb_thread_wait_fd",
            "rb_tainted_str_new",
            "rb_eIOError",
            "rb_read_pending",
            "rb_ary_new3",
            "rb_ensure",
            "rb_w32_listen",
            "rb_w32_bind",
            "rb_check_safe_obj",
            "rb_obj_is_kind_of",
            "rb_cInteger",
            "rb_w32_snprintf",
            "rb_gc",
            "rb_w32_socket",
            "rb_thread_wait_for",
            "rb_w32_connect",
            "rb_thread_select",
            "rb_w32_fdset",
            "rb_int2inum",
            "rb_ary_new2",
            "rb_w32_gethostbyname",
            "rb_ary_push",
            "rb_ary_new",
            "rb_w32_accept",
            "rb_check_string_type",
            "rb_notimplement",
            "rb_str_modify",
            "rb_w32_gethostname",
            "rb_w32_gethostbyaddr",
            "rb_string_value_ptr",
            "rb_w32_getservbyname",
            "rb_check_array_type",
            "rb_eTypeError",
            "rb_define_const",
            "msvcrt-ruby18.dll",
            "WSOCK32.dll",
            "free",
            "atoi",
            "sprintf",
            "strtoul",
            "_errno",
            "strncpy",
            "malloc",
            "fprintf",
            "__p__iob",
            "__p__pctype",
            "_isctype",
            "__p___mb_cur_max",
            "sscanf",
            "strchr",
            "_snprintf",
            "_fileno",
            "MSVCRT.dll",
            "_initterm",
            "_adjust_fdiv",
            "InterlockedExchange",
            "DisableThreadLibraryCalls",
            "KERNEL32.dll",
            "socket.so",
            "Init_socket",
            "getnameinfo: %s",
            "SHUT_RDWR",
            "SHUT_WR",
            "SHUT_RD",
            "NI_DGRAM",
            "NI_NUMERICSERV",
            "NI_NAMEREQD",
            "NI_NUMERICHOST",
            "NI_NOFQDN",
            "NI_MAXSERV",
            "NI_MAXHOST",
            "AI_DEFAULT",
            "AI_V4MAPPED",
            "AI_ADDRCONFIG",
            "AI_V4MAPPED_CFG",
            "AI_ALL",
            "AI_MASK",
            "AI_NUMERICHOST",
            "AI_CANONNAME",
            "AI_PASSIVE",
            "EAI_MAX",
            "EAI_PROTOCOL",
            "EAI_BADHINTS",
            "EAI_SYSTEM",
            "EAI_SOCKTYPE",
            "EAI_SERVICE",
            "EAI_NONAME",
            "EAI_NODATA",
            "EAI_MEMORY",
            "EAI_FAMILY",
            "EAI_FAIL",
            "EAI_BADFLAGS",
            "EAI_AGAIN",
            "EAI_ADDRFAMILY",
            "TCP_NODELAY",
            "SO_SNDTIMEO",
            "SO_RCVTIMEO",
            "SO_SNDLOWAT",
            "SO_RCVLOWAT",
            "SO_LINGER",
            "SO_OOBINLINE",
            "SO_KEEPALIVE",
            "SO_RCVBUF",
            "SO_SNDBUF",
            "SO_BROADCAST",
            "SO_DONTROUTE",
            "SO_ERROR",
            "SO_TYPE",
            "SO_REUSEADDR",
            "SO_DEBUG",
            "IP_MAX_MEMBERSHIPS",
            "IP_DEFAULT_MULTICAST_LOOP",
            "IP_DEFAULT_MULTICAST_TTL",
            "IP_DROP_MEMBERSHIP",
            "IP_ADD_MEMBERSHIP",
            "IP_MULTICAST_LOOP",
            "IP_MULTICAST_TTL",
            "IP_MULTICAST_IF",
            "IP_TTL",
            "IP_TOS",
            "IP_OPTIONS",
            "INADDR_NONE",
            "INADDR_MAX_LOCAL_GROUP",
            "INADDR_ALLHOSTS_GROUP",
            "INADDR_UNSPEC_GROUP",
            "INADDR_LOOPBACK",
            "INADDR_BROADCAST",
            "INADDR_ANY",
            "IPPORT_USERRESERVED",
            "IPPORT_RESERVED",
            "IPPROTO_MAX",
            "IPPROTO_RAW",
            "IPPROTO_ND",
            "IPPROTO_IDP",
            "IPPROTO_UDP",
            "IPPROTO_PUP",
            "IPPROTO_TCP",
            "IPPROTO_GGP",
            "IPPROTO_IGMP",
            "IPPROTO_ICMP",
            "IPPROTO_IP",
            "SOL_SOCKET",
            "MSG_DONTROUTE",
            "MSG_PEEK",
            "MSG_OOB",
            "PF_UNSPEC",
            "AF_UNSPEC",
            "PF_APPLETALK",
            "AF_APPLETALK",
            "PF_IPX",
            "AF_IPX",
            "PF_UNIX",
            "AF_UNIX",
            "PF_INET",
            "AF_INET",
            "SOCK_SEQPACKET",
            "SOCK_RDM",
            "SOCK_RAW",
            "SOCK_DGRAM",
            "SOCK_STREAM",
            "Constants",
            "unpack_sockaddr_in",
            "pack_sockaddr_in",
            "sockaddr_in",
            "getnameinfo",
            "getaddrinfo",
            "getservbyname",
            "gethostbyaddr",
            "gethostname",
            "pair",
            "socketpair",
            "Socket",
            "bind",
            "connect",
            "UDPsocket",
            "UDPSocket",
            "listen",
            "sysaccept",
            "accept",
            "TCPserver",
            "TCPServer",
            "gethostbyname",
            "TCPsocket",
            "TCPSocket",
            "getaddress",
            "recvfrom",
            "peeraddr",
            "addr",
            "IPsocket",
            "IPSocket",
            "recv",
            "send",
            "getpeername",
            "getsockname",
            "getsockopt",
            "setsockopt",
            "shutdown",
            "close_write",
            "close_read",
            "for_fd",
            "do_not_reverse_lookup=",
            "do_not_reverse_lookup",
            "initialize",
            "BasicSocket",
            "SocketError",
            "`how' should be either 0, 1, 2",
            "Insecure: can't shutdown socket",
            "Insecure: can't close socket",
            "getsockname(2)",
            "getpeername(2)",
            "send(2)",
            "s_recvfrom called with bad value",
            "recvfrom(2)",
            "recv for buffered IO",
            "unknown:%d",
            "connect(2)",
            "bind(2)",
            "socket(2)",
            "getaddrinfo: %s",
            "newline at the end of hostname",
            "hostname too long (%d)",
            "<broadcast>",
            "<any>",
            "service name too long (%d)",
            "socket(2) - udp",
            "sendto(2)",
            "Unknown socket type %s",
            "Unknown socket domain %s",
            "PF_IMPLINK",
            "AF_IMPLINK",
            "AF_NS",
            "AF_ISO",
            "listen(2)",
            "host not found",
            "no such service %s/%s",
            "sockaddr resolved to multiple nodename",
            "expecting String or Array",
            "array size should be 3 or 4, %ld given",
            "sockaddr size differs - should not happen",
            "sockaddr length too big",
            "unknown error.",
            "resolved protocol is unknown.",
            "invalid value for hints.",
            "system error returned in errno.",
            "ai_socktype not supported.",
            "servname not supported for ai_socktype.",
            "hostname nor servname provided, or not known.",
            "no address associated with hostname.",
            "memory allocation failure.",
            "ai_family not supported.",
            "non-recoverable failure in name resolution.",
            "invalid value for ai_flags.",
            "temporary failure in name resolution.",
            "address family for hostname not supported.",
            "success.",
            "panic!",
            "%d.%d.%d.%d%c",
            "0000000",
            "1$1*1:1?1D1T1Y1_1o1t1z1111111111111111",
            "2*2/242D2I2O2^2d2q2v2|222222222222222",
            "3\"3'3-3=3B3H3V3\\3i3o3u333333333333333",
            "4 4&464;4@4P4U4[4k4p4v4444444444444444\t5",
            "5$5)5.5>5C5I5Y5^5d5t5y5~555555555555555",
            "6.63696I6N6T6d6i6n6|6666666666",
            "7-7<7K7Z7i7x777777777",
            "8 8/8A8S8e8w888888888",
            "9(979F9U9d9s999999999",
            ":$:6:H:Z:l:~:::::::::",
            ";&;5;D;S;b;q;;;;;;;;;",
            "<(<7<F<U<d<s<<<<B===",
            ">R>X>l>>>",
            "?7?r?x??",
            "0B0H00:2",
            "333@4U4445B6666l7s777777777",
            "9$9Z999999",
            "::::G;;;",
            "=X===",
            "?6?;???",
            "m00114222",
            "3p3344",
            "5m5v5?777'8.8Q8X8^8i8x8888889",
            ":::l;;=<L<U<k<R===>>!??",
            "0|00T11,22:33x4",
            "55566s7",
            "888T9",
            ":}:: ;*;;,<^<<",
            "=\"=/>L>>>>l???",
            "+0052;2223",
            "4F4L4",
            "5!5Z5}55\"66q7w7",
            "99993:8:;;,<_<l<=>>",
            "?\"?(?2?C?z?",
            "'00#181X1?2Z3u33",
            "454?4|444440555555",
            "6k6u66*7r7C8899k:{:~;f<u<<<<",
            "=n=z==",
            "2080F0V0\\0b0h0n0t0z00000000000000000000000",
            "1\"1(1.141:1@1F1L1R1X1^1d1j1p1v1|1111111111111111111111;2F2L2W2d2l222222222222",
            "3833333",
            "x2|2222222222222222",
            "socket.so",
            "NB10",
            "D:\\Prog\\WIN\\ruby\\build\\ext\\socket\\socket.pdb",
            "L!This program cannot be run in DOS mode.",
            "!rrrrr\u010errrr1rrRichr",
            ".text",
            "`.rdata",
            "@.data",
            ".reloc",
            "UQx@",
            "PMQ!",
            "MQy!",
            "URa!",
            "EPI!",
            "MQ1!",
            "EPq ",
            "MQY ",
            "URA ",
            "EP) ",
            "jhp ",
            "jhP)",
            "jhP)",
            "jh .",
            "]UQE",
            "]U E",
            "EPMQhQ",
            "E}at",
            "]UQj",
            "E]UQj\"E",
            "]UQE",
            "]UQE",
            "E]UE",
            "3]UE",
            "]UQE",
            "]UQE",
            "]UQE",
            "]UQE",
            "]UQE",
            "]UQE",
            "]UQE",
            "]UQhR",
            "3\u0485uEH",
            "]UQE",
            "u\tE!",
            "u\tE ",
            "u\tE<",
            "u\tE$",
            "EMM}",
            "]UQE",
            "]U E",
            "EMQj",
            "EMM}",
            "EUUEE}",
            " [MU",
            "EEPhR",
            "EMMUB",
            "EM;M|$U3",
            "E;E}8MQU",
            "3\u0485uEH",
            "_]UQE",
            "]UQE",
            "E]UQE",
            "EEPv",
            "M+URhR",
            "u$M+MQU",
            "UE;Eu",
            "\u024bMMU+URj",
            "t(M;Mu",
            "\ube4bE+EPM",
            "uTE+EPMQ",
            "UE+EPM",
            "U+U9U",
            "E+E=",
            "}=MM\tU",
            "E;Ew",
            "EMQURP",
            "QU+UREPMQUR",
            "EEM+MQU",
            "E_^]UQE",
            "EM;M",
            "}eUUE",
            "M\ub4c3]UQE",
            "EMQj",
            "MQUR",
            "\u020bE]U",
            "u\tE!",
            "u\tE ",
            "u\tE<",
            "u\tE$",
            "QUREH",
            "3\u0485uEH",
            "]UQE",
            "u\tE!",
            "u\tE ",
            "u\tE<",
            "u\tE$",
            "\u0209MUUEP",
            "3\u0245uE",
            "EMMUU}",
            "EPh0S",
            "|-MQ",
            "MUE;B",
            "UE+B",
            "MQUB",
            "EM;M~",
            "UUEPMQ",
            "u%MQ",
            "U;U~",
            "E_^]UQE",
            "t\tEx",
            "E]UQE",
            "EUU}",
            "EPMQq",
            "t65tS",
            "SUVt$",
            "u\t3_^][",
            "WVS\u0445t",
            "WVSu\t3_^][",
            "WVSZ",
            "WPSt",
            "u\"WVSu",
            "WVS\u040b_^][",
            "rb_io_puts",
            "rb_io_printf",
            "rb_io_print",
            "rb_io_addstr",
            "rb_define_method",
            "rb_define_singleton_method",
            "rb_define_alloc_func",
            "rb_include_module",
            "rb_mEnumerable",
            "rb_define_class",
            "rb_cData",
            "rb_data_object_alloc",
            "rb_gc_mark",
            "ruby_xfree",
            "rb_ensure",
            "rb_yield",
            "rb_block_given_p",
            "rb_class_new_instance",
            "rb_str_new",
            "rb_str_resize",
            "rb_sys_fail",
            "rb_io_mode_flags",
            "rb_string_value",
            "rb_scan_args",
            "rb_call_super",
            "ruby_xmalloc",
            "rb_raise",
            "rb_eTypeError",
            "rb_class2name",
            "rb_cSymbol",
            "rb_cTrueClass",
            "rb_cFalseClass",
            "rb_cNilClass",
            "rb_cFixnum",
            "rb_check_type",
            "rb_eIOError",
            "rb_notimplement",
            "rb_secure",
            "rb_convert_type",
            "rb_int2inum",
            "rb_num2long",
            "rb_eArgError",
            "rb_str_modify",
            "rb_eof_error",
            "rb_lastline_set",
            "rb_str_substr",
            "rb_rs",
            "rb_ary_push",
            "rb_ary_new",
            "rb_str_update",
            "rb_str_cat",
            "rb_obj_as_string",
            "rb_uint2inum",
            "msvcrt-ruby18.dll",
            "_errno",
            "memchr",
            "MSVCRT.dll",
            "free",
            "_initterm",
            "malloc",
            "_adjust_fdiv",
            "DisableThreadLibraryCalls",
            "KERNEL32.dll",
            "stringio.so",
            "Init_stringio",
            "truncate",
            "length",
            "size",
            "fileno",
            "tty?",
            "isatty",
            "syswrite",
            "puts",
            "putc",
            "printf",
            "print",
            "write",
            "sysread",
            "read",
            "readlines",
            "readline",
            "gets",
            "readchar",
            "ungetc",
            "getc",
            "each_line",
            "each_byte",
            "each",
            "path",
            "tell",
            "sync=",
            "sync",
            "seek",
            "rewind",
            "pos=",
            "fsync",
            "flush",
            "fcntl",
            "eof?",
            "closed_write?",
            "closed_read?",
            "closed?",
            "close_write",
            "close_read",
            "close",
            "binmode",
            "lineno=",
            "lineno",
            "string=",
            "string",
            "reopen",
            "initialize_copy",
            "initialize",
            "open",
            "StringIO",
            "wrong argument type %s (expected String::IO)",
            "uninitialized stream",
            "closed stream",
            "closing non-duplex IO for reading",
            "closing non-duplex IO for writing",
            "not opened for reading",
            "to_strio",
            "invalid whence %ld",
            "not modifiable string",
            "not opened for writing",
            "wrong number of arguments (%d for 0)",
            "negative length %ld given",
            "not opened",
            "negative legnth",
            "020E0J0]0b0u0z00000000000",
            "1\"151:1M1R1e1j1}111111111111",
            "2%2*2=2B2U2Z2m2r222222222222",
            "3-323E3J3]3b3u3z33333333333",
            "4\"454:4M4R4e4j4}444444444444",
            "5%5*5D5I555A6667(8=8P8c8u8888*909,;2;;;;;I=N=u=z=",
            "00i1o1144B5R5[66;;>>??",
            "1\"11111111111",
            "2 2&2,22282>2D2J2P2V2\\2b2h2n2t2z222222222222222222",
            "3!3&3+303:3C3V3`3u3333354R4h4w4",
            "stringio.so",
            "NB10",
            "D:\\Prog\\WIN\\ruby\\build\\ext\\stringio\\stringio.pdb",
            "#\t\tthread.rb - thread support classes",
            "#\t\t\t$Date: 2003/11/16 01:53:12 $",
            "#\t\t\tby Yukihiro Matsumoto <matz@netlab.co.jp>",
            "# Copyright (C) 2001  Yukihiro Matsumoto",
            "# Copyright (C) 2000  Network Applied Communication Laboratory, Inc.",
            "# Copyright (C) 2000  Information-technology Promotion Agency, Japan",
            "unless defined? Thread",
            "  fail \"Thread not available for this ruby interpreter\"",
            "unless defined? ThreadError",
            "  class ThreadError<StandardError",
            "  end",
            "if $DEBUG",
            "  Thread.abort_on_exception = true",
            "class Thread",
            "  # FIXME: not documented in Pickaxe or Nutshell.",
            "  def Thread.exclusive",
            "    _old = Thread.critical",
            "    begin",
            "      Thread.critical = true",
            "      return yield",
            "    ensure",
            "      Thread.critical = _old",
            "    end",
            "  end",
            "# +Mutex+ implements a simple semaphore that can be used to coordinate access to",
            "# shared data from multiple concurrent threads.",
            "# Example:",
            "#   require 'thread'",
            "#   semaphore = Mutex.new",
            "#   ",
            "#   a = Thread.new {",
            "#     semaphore.synchronize {",
            "#       # access shared resource",
            "#     }",
            "#   }",
            "#   ",
            "#   b = Thread.new {",
            "#     semaphore.synchronize {",
            "#       # access shared resource",
            "#     }",
            "#   }",
            "class Mutex",
            "  def initialize",
            "    @waiting = []",
            "    @locked = false;",
            "    @waiting.taint\t\t# enable tainted comunication",
            "    self.taint",
            "  end",
            "  # Returns +true+ if this lock is currently held by some thread.",
            "  def locked?",
            "    @locked",
            "  end",
            "  # Attempts to obtain the lock and returns immediately. Returns +true+ if the",
            "  # lock was granted.",
            "  def try_lock",
            "    result = false",
            "    Thread.critical = true",
            "    unless @locked",
            "      @locked = true",
            "      result = true",
            "    end",
            "    Thread.critical = false",
            "    result",
            "  end",
            "  # Attempts to grab the lock and waits if it isn't available.",
            "  def lock",
            "    while (Thread.critical = true; @locked)",
            "      @waiting.push Thread.current",
            "      Thread.stop",
            "    end",
            "    @locked = true",
            "    Thread.critical = false",
            "    self",
            "  end",
            "  # Releases the lock. Returns +nil+ if ref wasn't locked.",
            "  def unlock",
            "    return unless @locked",
            "    Thread.critical = true",
            "    @locked = false",
            "    begin",
            "      t = @waiting.shift",
            "      t.wakeup if t",
            "    rescue ThreadError",
            "      retry",
            "    end",
            "    Thread.critical = false",
            "    begin",
            "      t.run if t",
            "    rescue ThreadError",
            "    end",
            "    self",
            "  end",
            "  # Obtains a lock, runs the block, and releases the lock when the block",
            "  # completes.  See the example under +Mutex+.",
            "  def synchronize",
            "    lock",
            "    begin",
            "      yield",
            "    ensure",
            "      unlock",
            "    end",
            "  end",
            "  # FIXME: not documented in Pickaxe/Nutshell.",
            "  def exclusive_unlock",
            "    return unless @locked",
            "    Thread.exclusive do",
            "      @locked = false",
            "      begin",
            "\tt = @waiting.shift",
            "\tt.wakeup if t",
            "      rescue ThreadError",
            "\tretry",
            "      end",
            "      yield",
            "    end",
            "    self",
            "  end",
            "# +ConditionVariable+ objects augment class +Mutex+. Using condition variables,",
            "# it is possible to suspend while in the middle of a critical section until a",
            "# resource becomes available (see the discussion on page 117).",
            "# Example:",
            "#   require 'thread'",
            "#   mutex = Mutex.new",
            "#   resource = ConditionVariable.new",
            "#   ",
            "#   a = Thread.new {",
            "#     mutex.synchronize {",
            "#       # Thread 'a' now needs the resource",
            "#       resource.wait(mutex)",
            "#       # 'a' can now have the resource",
            "#     }",
            "#   }",
            "#   ",
            "#   b = Thread.new {",
            "#     mutex.synchronize {",
            "#       # Thread 'b' has finished using the resource",
            "#       resource.signal",
            "#     }",
            "#   }",
            "class ConditionVariable",
            "  def initialize",
            "    @waiters = []",
            "  end",
            "  # Releases the lock held in +mutex+ and waits; reacquires the lock on wakeup.",
            "  def wait(mutex)",
            "    mutex.exclusive_unlock do",
            "      @waiters.push(Thread.current)",
            "      Thread.stop",
            "    end",
            "    mutex.lock",
            "  end",
            "  # Wakes up the first thread in line waiting for this lock.",
            "  def signal",
            "    begin",
            "      t = @waiters.shift",
            "      t.run if t",
            "    rescue ThreadError",
            "      retry",
            "    end",
            "  end",
            "    ",
            "  # Wakes up all threads waiting for this lock.",
            "  def broadcast",
            "    waiters0 = nil",
            "    Thread.exclusive do",
            "      waiters0 = @waiters.dup",
            "      @waiters.clear",
            "    end",
            "    for t in waiters0",
            "      begin",
            "\tt.run",
            "      rescue ThreadError",
            "      end",
            "    end",
            "  end",
            "# This class provides a way to communicate data between threads.",
            "# TODO: an example (code or English) would really help here.  How do you set up",
            "# a queue between two threads?",
            "class Queue",
            "  # Creates a new queue.",
            "  def initialize",
            "    @que = []",
            "    @waiting = []",
            "    @que.taint\t\t# enable tainted comunication",
            "    @waiting.taint",
            "    self.taint",
            "  end",
            "  # Pushes +obj+ to the queue.",
            "  def push(obj)",
            "    Thread.critical = true",
            "    @que.push obj",
            "    begin",
            "      t = @waiting.shift",
            "      t.wakeup if t",
            "    rescue ThreadError",
            "      retry",
            "    ensure",
            "      Thread.critical = false",
            "    end",
            "    begin",
            "      t.run if t",
            "    rescue ThreadError",
            "    end",
            "  end",
            "  alias << push",
            "  alias enq push",
            "  # Retrieves data from the queue.  If the queue is empty, the calling thread is",
            "  # suspended until data is pushed onto the queue.  If +non_block+ is true, the",
            "  # thread isn't suspended, and an exception is raised.",
            "  def pop(non_block=false)",
            "    while (Thread.critical = true; @que.empty?)",
            "      raise ThreadError, \"queue empty\" if non_block",
            "      @waiting.push Thread.current",
            "      Thread.stop",
            "    end",
            "    @que.shift",
            "  ensure",
            "    Thread.critical = false",
            "  end",
            "  alias shift pop",
            "  alias deq pop",
            "  # Returns +true+ is the queue is empty.",
            "  def empty?",
            "    @que.empty?",
            "  end",
            "  # Removes all objects from the queue.",
            "  def clear",
            "    @que.clear",
            "  end",
            "  # Returns the length of the queue.",
            "  def length",
            "    @que.length",
            "  end",
            "  # Alias of length.",
            "  def size",
            "    length",
            "  end",
            "  # Returns the number of threads waiting on the queue.",
            "  def num_waiting",
            "    @waiting.size",
            "  end",
            "# This class represents queues of specified size capacity.  The +push+ operation",
            "# may be blocked if the capacity is full.",
            "class SizedQueue<Queue",
            "  # Creates a fixed-length queue with a maximum size of +max+.",
            "  def initialize(max)",
            "    raise ArgumentError, \"queue size must be positive\" unless max > 0",
            "    @max = max",
            "    @queue_wait = []",
            "    @queue_wait.taint\t\t# enable tainted comunication",
            "    super()",
            "  end",
            "  # Returns the maximum size of the queue.",
            "  def max",
            "    @max",
            "  end",
            "  # Sets the maximum size of the queue.",
            "  def max=(max)",
            "    Thread.critical = true",
            "    if max <= @max",
            "      @max = max",
            "      Thread.critical = false",
            "    else",
            "      diff = max - @max",
            "      @max = max",
            "      Thread.critical = false",
            "      diff.times do",
            "\tbegin",
            "\t  t = @queue_wait.shift",
            "\t  t.run if t",
            "\trescue ThreadError",
            "\t  retry",
            "\tend",
            "      end",
            "    end",
            "    max",
            "  end",
            "  def push(obj)",
            "    Thread.critical = true",
            "    while @que.length >= @max",
            "      @queue_wait.push Thread.current",
            "      Thread.stop",
            "      Thread.critical = true",
            "    end",
            "    super",
            "  end",
            "  alias << push",
            "  alias enq push",
            "  def pop(*args)",
            "    retval = super",
            "    Thread.critical = true",
            "    if @que.length < @max",
            "      begin",
            "\tt = @queue_wait.shift",
            "\tt.wakeup if t",
            "      rescue ThreadError",
            "\tretry",
            "      ensure",
            "\tThread.critical = false",
            "      end",
            "      begin",
            "\tt.run if t",
            "      rescue ThreadError",
            "      end",
            "    end",
            "    retval",
            "  end",
            "  alias shift pop",
            "  alias deq pop",
            "  def num_waiting",
            "    @waiting.size + @queue_wait.size",
            "  end",
            "# Documentation comments:",
            "#  - SizedQueue #push and #pop deserve some documentation, as they are different",
            "#    from the Queue implementations.",
            "#  - Some methods are not documented in Pickaxe/Nutshell, and are therefore not",
            "#    documented here.  See FIXME notes.",
            "#  - Reference to Pickaxe page numbers should be replaced with either a section",
            "#    name or a summary.",
            "#  - How do you document aliases?",
            "#  - How do you make RDoc inherit documentation from superclass?",
            "# == Introduction",
            "# This library extends the Time class:",
            "# * conversion between date string and time object.",
            "#   * date-time defined by RFC 2822",
            "#   * HTTP-date defined by RFC 2616",
            "#   * dateTime defined by XML Schema Part 2: Datatypes (ISO 8601)",
            "#   * various formats handled by ParseDate (string to time only)",
            "# == Design Issues",
            "# === Specialized interface",
            "# This library provides methods dedicated to special purposes:",
            "# * RFC 2822, RFC 2616 and XML Schema.",
            "# * They makes usual life easier.",
            "# === Doesn't depend on strftime",
            "# This library doesn't use +strftime+.  Especially #rfc2822 doesn't depend",
            "# on +strftime+ because:",
            "# * %a and %b are locale sensitive",
            "#   Since they are locale sensitive, they may be replaced to",
            "#   invalid weekday/month name in some locales.",
            "#   Since ruby-1.6 doesn't invoke setlocale by default,",
            "#   the problem doesn't arise until some external library invokes setlocale.",
            "#   Ruby/GTK is the example of such library.",
            "# * %z is not portable",
            "#   %z is required to generate zone in date-time of RFC 2822",
            "#   but it is not portable.",
            "# == Revision Information",
            "# $Id$",
            "require 'parsedate'",
            "# Implements the extensions to the Time class that are described in the",
            "# documentation for the time.rb library.",
            "class Time",
            "  class << Time",
            "    ZoneOffset = {",
            "      'UTC' => 0,",
            "      # ISO 8601",
            "      'Z' => 0,",
            "      # RFC 822",
            "      'UT' => 0, 'GMT' => 0,",
            "      'EST' => -5, 'EDT' => -4,",
            "      'CST' => -6, 'CDT' => -5,",
            "      'MST' => -7, 'MDT' => -6,",
            "      'PST' => -8, 'PDT' => -7,",
            "      # Following definition of military zones is original one.",
            "      # See RFC 1123 and RFC 2822 for the error of RFC 822.",
            "      'A' => +1, 'B' => +2, 'C' => +3, 'D' => +4,  'E' => +5,  'F' => +6, ",
            "      'G' => +7, 'H' => +8, 'I' => +9, 'K' => +10, 'L' => +11, 'M' => +12,",
            "      'N' => -1, 'O' => -2, 'P' => -3, 'Q' => -4,  'R' => -5,  'S' => -6, ",
            "      'T' => -7, 'U' => -8, 'V' => -9, 'W' => -10, 'X' => -11, 'Y' => -12,",
            "    }",
            "    def zone_offset(zone, year=Time.now.year)",
            "      off = nil",
            "      zone = zone.upcase",
            "      if /\\A([+-])(\\d\\d):?(\\d\\d)\\z/ =~ zone",
            "        off = ($1 == '-' ? -1 : 1) * ($2.to_i * 60 + $3.to_i) * 60",
            "      elsif /\\A[+-]\\d\\d\\z/ =~ zone",
            "        off = zone.to_i * 3600",
            "      elsif ZoneOffset.include?(zone)",
            "        off = ZoneOffset[zone] * 3600",
            "      elsif ((t = Time.local(year, 1, 1)).zone.upcase == zone rescue false)",
            "        off = t.utc_offset",
            "      elsif ((t = Time.local(year, 7, 1)).zone.upcase == zone rescue false)",
            "        off = t.utc_offset",
            "      end",
            "      off",
            "    end",
            "    #",
            "    # Parses +date+ using ParseDate.parsedate and converts it to a Time object.",
            "    #",
            "    # If a block is given, the year described in +date+ is converted by the",
            "    # block.  For example:",
            "    #",
            "    #     Time.parse(...) {|y| y < 100 ? (y >= 69 ? y + 1900 : y + 2000) : y}",
            "    #",
            "    # If the upper components of the given time are broken or missing, they are",
            "    # supplied with those of +now+.  For the lower components, the minimum",
            "    # values (1 or 0) are assumed if broken or missing.  For example:",
            "    #",
            "    #     # Suppose it is \"Thu Nov 29 14:33:20 GMT 2001\" now and",
            "    #     # your timezone is GMT:",
            "    #     Time.parse(\"16:30\")     #=> Thu Nov 29 16:30:00 GMT 2001",
            "    #     Time.parse(\"7/23\")      #=> Mon Jul 23 00:00:00 GMT 2001",
            "    #     Time.parse(\"Aug 31\")    #=> Fri Aug 31 00:00:00 GMT 2001",
            "    #",
            "    # Since there are numerous conflicts among locally defined timezone",
            "    # abbreviations all over the world, this method is not made to",
            "    # understand all of them.  For example, the abbreviation \"CST\" is",
            "    # used variously as:",
            "    #",
            "    #     -06:00 in America/Chicago,",
            "    #     -05:00 in America/Havana,",
            "    #     +08:00 in Asia/Harbin,",
            "    #     +09:30 in Australia/Darwin,",
            "    #     +10:30 in Australia/Adelaide,",
            "    #     etc.",
            "    #",
            "    # Based on the fact, this method only understands the timezone",
            "    # abbreviations described in RFC 822 and the system timezone, in the",
            "    # order named. (i.e. a definition in RFC 822 overrides the system",
            "    # timezone definition.)  The system timezone is taken from",
            "    # <tt>Time.local(year, 1, 1).zone</tt> and",
            "    # <tt>Time.local(year, 7, 1).zone</tt>.",
            "    # If the extracted timezone abbreviation does not match any of them,",
            "    # it is ignored and the given time is regarded as a local time.",
            "    #",
            "    # ArgumentError is raised if ParseDate cannot extract information from",
            "    # +date+ or Time class cannot represent specified date.",
            "    #",
            "    # This method can be used as fail-safe for other parsing methods as:",
            "    #",
            "    #   Time.rfc2822(date) rescue Time.parse(date)",
            "    #   Time.httpdate(date) rescue Time.parse(date)",
            "    #   Time.xmlschema(date) rescue Time.parse(date)",
            "    #",
            "    # A failure for Time.parse should be checked, though.",
            "    #",
            "    def parse(date, now=Time.now)",
            "      year, mon, day, hour, min, sec, zone, _ = ParseDate.parsedate(date)",
            "      year = yield(year) if year && block_given?",
            "      if now",
            "        begin",
            "          break if year; year = now.year",
            "          break if mon; mon = now.mon",
            "          break if day; day = now.day",
            "          break if hour; hour = now.hour",
            "          break if min; min = now.min",
            "          break if sec; sec = now.sec",
            "        end until true",
            "      end",
            "      year ||= 1970",
            "      mon ||= 1",
            "      day ||= 1",
            "      hour ||= 0",
            "      min ||= 0",
            "      sec ||= 0",
            "      off = nil",
            "      off = zone_offset(zone, year) if zone",
            "      if off",
            "        t = Time.utc(year, mon, day, hour, min, sec) - off",
            "        t.localtime if off != 0",
            "        t",
            "      else",
            "        Time.local(year, mon, day, hour, min, sec)",
            "      end",
            "    end",
            "    MonthValue = {",
            "      'JAN' => 1, 'FEB' => 2, 'MAR' => 3, 'APR' => 4, 'MAY' => 5, 'JUN' => 6,",
            "      'JUL' => 7, 'AUG' => 8, 'SEP' => 9, 'OCT' =>10, 'NOV' =>11, 'DEC' =>12",
            "    }",
            "    #",
            "    # Parses +date+ as date-time defined by RFC 2822 and converts it to a Time",
            "    # object.  The format is identical to the date format defined by RFC 822 and",
            "    # updated by RFC 1123.",
            "    #",
            "    # ArgumentError is raised if +date+ is not compliant with RFC 2822",
            "    # or Time class cannot represent specified date.",
            "    #",
            "    # See #rfc2822 for more information on this format.",
            "    #",
            "    def rfc2822(date)",
            "      if /\\A\\s*",
            "          (?:(?:Mon|Tue|Wed|Thu|Fri|Sat|Sun)\\s*,\\s*)?",
            "          (\\d{1,2})\\s+",
            "          (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\\s+",
            "          (\\d{2,})\\s+",
            "          (\\d{2})\\s*",
            "          :\\s*(\\d{2})\\s*",
            "          (?::\\s*(\\d{2}))?\\s+",
            "          ([+-]\\d{4}|",
            "           UT|GMT|EST|EDT|CST|CDT|MST|MDT|PST|PDT|[A-IK-Z])/ix =~ date",
            "        # Since RFC 2822 permit comments, the regexp has no right anchor.",
            "        day = $1.to_i",
            "        mon = MonthValue[$2.upcase]",
            "        year = $3.to_i",
            "        hour = $4.to_i",
            "        min = $5.to_i",
            "        sec = $6 ? $6.to_i : 0",
            "        zone = $7",
            "        # following year completion is compliant with RFC 2822.",
            "        year = if year < 50",
            "                 2000 + year",
            "               elsif year < 1000",
            "                 1900 + year",
            "               else",
            "                 year",
            "               end",
            "        t = Time.utc(year, mon, day, hour, min, sec)",
            "        offset = zone_offset(zone)",
            "\tt = (t - offset).localtime if offset != 0 || zone == '+0000'",
            "      else",
            "        raise ArgumentError.new(\"not RFC 2822 compliant date: #{date.inspect}\")",
            "      end",
            "    end",
            "    alias rfc822 rfc2822",
            "    #",
            "    # Parses +date+ as HTTP-date defined by RFC 2616 and converts it to a Time",
            "    # object.",
            "    #",
            "    # ArgumentError is raised if +date+ is not compliant with RFC 2616 or Time",
            "    # class cannot represent specified date.",
            "    #",
            "    # See #httpdate for more information on this format.",
            "    #",
            "    def httpdate(date)",
            "      if /\\A\\s*",
            "          (?:Mon|Tue|Wed|Thu|Fri|Sat|Sun),\\x20",
            "          (\\d{2})\\x20",
            "          (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\\x20",
            "          (\\d{4})\\x20",
            "          (\\d{2}):(\\d{2}):(\\d{2})\\x20",
            "          GMT",
            "          \\s*\\z/ix =~ date",
            "        Time.rfc2822(date)",
            "      elsif /\\A\\s*",
            "             (?:Monday|Tuesday|Wednesday|Thursday|Friday|Saturday|Sunday),\\x20",
            "             (\\d\\d)-(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)-(\\d\\d)\\x20",
            "             (\\d\\d):(\\d\\d):(\\d\\d)\\x20",
            "             GMT",
            "             \\s*\\z/ix =~ date",
            "        Time.parse(date)",
            "      elsif /\\A\\s*",
            "             (?:Mon|Tue|Wed|Thu|Fri|Sat|Sun)\\x20",
            "             (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\\x20",
            "             (\\d\\d|\\x20\\d)\\x20",
            "             (\\d\\d):(\\d\\d):(\\d\\d)\\x20",
            "             (\\d{4})",
            "             \\s*\\z/ix =~ date",
            "        Time.utc($6.to_i, MonthValue[$1.upcase], $2.to_i,",
            "                 $3.to_i, $4.to_i, $5.to_i)",
            "      else",
            "        raise ArgumentError.new(\"not RFC 2616 compliant date: #{date.inspect}\")",
            "      end",
            "    end",
            "    #",
            "    # Parses +date+ as dateTime defined by XML Schema and converts it to a Time",
            "    # object.  The format is restricted version of the format defined by ISO",
            "    # 8601.",
            "    #",
            "    # ArgumentError is raised if +date+ is not compliant with the format or Time",
            "    # class cannot represent specified date.",
            "    #",
            "    # See #xmlschema for more information on this format.",
            "    #",
            "    def xmlschema(date)",
            "      if /\\A\\s*",
            "          (-?\\d+)-(\\d\\d)-(\\d\\d)",
            "          T",
            "          (\\d\\d):(\\d\\d):(\\d\\d)",
            "          (\\.\\d*)?",
            "          (Z|[+-]\\d\\d:\\d\\d)?",
            "          \\s*\\z/ix =~ date",
            "\tdatetime = [$1.to_i, $2.to_i, $3.to_i, $4.to_i, $5.to_i, $6.to_i] ",
            "\tdatetime << $7.to_f * 1000000 if $7",
            "\tif $8",
            "\t  Time.utc(*datetime) - zone_offset($8)",
            "\telse",
            "\t  Time.local(*datetime)",
            "\tend",
            "      else",
            "        raise ArgumentError.new(\"invalid date: #{date.inspect}\")",
            "      end",
            "    end",
            "    alias iso8601 xmlschema",
            "  end # class << self",
            "  # Returns a string which represents the time as date-time defined by RFC 2822:",
            "  #   day-of-week, DD month-name CCYY hh:mm:ss zone",
            "  # where zone is [+-]hhmm.",
            "  # If +self+ is a UTC time, -0000 is used as zone.",
            "  def rfc2822",
            "    sprintf('%s, %02d %s %d %02d:%02d:%02d ',",
            "      RFC2822_DAY_NAME[wday],",
            "      day, RFC2822_MONTH_NAME[mon-1], year,",
            "      hour, min, sec) +",
            "    if utc?",
            "      '-0000'",
            "    else",
            "      off = utc_offset",
            "      sign = off < 0 ? '-' : '+'",
            "      sprintf('%s%02d%02d', sign, *(off.abs / 60).divmod(60))",
            "    end",
            "  end",
            "  alias rfc822 rfc2822",
            "  RFC2822_DAY_NAME = [",
            "    'Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'",
            "  RFC2822_MONTH_NAME = [",
            "    'Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun',",
            "    'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'",
            "  # Returns a string which represents the time as rfc1123-date of HTTP-date",
            "  # defined by RFC 2616: ",
            "  # ",
            "  #   day-of-week, DD month-name CCYY hh:mm:ss GMT",
            "  # Note that the result is always UTC (GMT).",
            "  def httpdate",
            "    t = dup.utc",
            "    sprintf('%s, %02d %s %d %02d:%02d:%02d GMT',",
            "      RFC2822_DAY_NAME[t.wday],",
            "      t.day, RFC2822_MONTH_NAME[t.mon-1], t.year,",
            "      t.hour, t.min, t.sec)",
            "  end",
            "  # Returns a string which represents the time as dateTime defined by XML",
            "  # Schema:",
            "  #   CCYY-MM-DDThh:mm:ssTZD",
            "  #   CCYY-MM-DDThh:mm:ss.sssTZD",
            "  # where TZD is Z or [+-]hh:mm.",
            "  # If self is a UTC time, Z is used as TZD.  [+-]hh:mm is used otherwise.",
            "  # +fractional_seconds+ specifies a number of digits of fractional seconds.",
            "  # Its default value is 0.",
            "  def xmlschema(fraction_digits=0)",
            "    sprintf('%d-%02d-%02dT%02d:%02d:%02d',",
            "      year, mon, day, hour, min, sec) +",
            "    if fraction_digits == 0",
            "      ''",
            "    elsif fraction_digits <= 6",
            "      '.' + sprintf('%06d', usec)[0, fraction_digits]",
            "    else",
            "      '.' + sprintf('%06d', usec) + '0' * (fraction_digits - 6)",
            "    end +",
            "    if utc?",
            "      'Z'",
            "    else",
            "      off = utc_offset",
            "      sign = off < 0 ? '-' : '+'",
            "      sprintf('%s%02d:%02d', sign, *(off.abs / 60).divmod(60))",
            "    end",
            "  end",
            "  alias iso8601 xmlschema",
            "if __FILE__ == $0",
            "  require 'test/unit'",
            "  class TimeExtentionTest < Test::Unit::TestCase # :nodoc:",
            "    def test_rfc822",
            "      assert_equal(Time.utc(1976, 8, 26, 14, 30) + 4 * 3600,",
            "                   Time.rfc2822(\"26 Aug 76 14:30 EDT\"))",
            "      assert_equal(Time.utc(1976, 8, 27, 9, 32) + 7 * 3600,",
            "                   Time.rfc2822(\"27 Aug 76 09:32 PDT\"))",
            "    end",
            "    def test_rfc2822",
            "      assert_equal(Time.utc(1997, 11, 21, 9, 55, 6) + 6 * 3600,",
            "                   Time.rfc2822(\"Fri, 21 Nov 1997 09:55:06 -0600\"))",
            "      assert_equal(Time.utc(2003, 7, 1, 10, 52, 37) - 2 * 3600,",
            "                   Time.rfc2822(\"Tue, 1 Jul 2003 10:52:37 +0200\"))",
            "      assert_equal(Time.utc(1997, 11, 21, 10, 1, 10) + 6 * 3600,",
            "                   Time.rfc2822(\"Fri, 21 Nov 1997 10:01:10 -0600\"))",
            "      assert_equal(Time.utc(1997, 11, 21, 11, 0, 0) + 6 * 3600,",
            "                   Time.rfc2822(\"Fri, 21 Nov 1997 11:00:00 -0600\"))",
            "      assert_equal(Time.utc(1997, 11, 24, 14, 22, 1) + 8 * 3600,",
            "                   Time.rfc2822(\"Mon, 24 Nov 1997 14:22:01 -0800\"))",
            "      begin",
            "        Time.at(-1)",
            "      rescue ArgumentError",
            "        # ignore",
            "      else",
            "        assert_equal(Time.utc(1969, 2, 13, 23, 32, 54) + 3 * 3600 + 30 * 60,",
            "                     Time.rfc2822(\"Thu, 13 Feb 1969 23:32:54 -0330\"))",
            "        assert_equal(Time.utc(1969, 2, 13, 23, 32, 0) + 3 * 3600 + 30 * 60,",
            "                     Time.rfc2822(\" Thu,",
            "        13",
            "          Feb",
            "            1969",
            "        23:32",
            "                 -0330 (Newfoundland Time)\"))",
            "      end",
            "      assert_equal(Time.utc(1997, 11, 21, 9, 55, 6),",
            "                   Time.rfc2822(\"21 Nov 97 09:55:06 GMT\"))",
            "      assert_equal(Time.utc(1997, 11, 21, 9, 55, 6) + 6 * 3600,",
            "                   Time.rfc2822(\"Fri, 21 Nov 1997 09 :   55  :  06 -0600\"))",
            "      assert_raise(ArgumentError) {",
            "        # inner comment is not supported.",
            "        Time.rfc2822(\"Fri, 21 Nov 1997 09(comment):   55  :  06 -0600\")",
            "      }",
            "    end",
            "    def test_rfc2616",
            "      t = Time.utc(1994, 11, 6, 8, 49, 37)",
            "      assert_equal(t, Time.httpdate(\"Sun, 06 Nov 1994 08:49:37 GMT\"))",
            "      assert_equal(t, Time.httpdate(\"Sunday, 06-Nov-94 08:49:37 GMT\"))",
            "      assert_equal(t, Time.httpdate(\"Sun Nov  6 08:49:37 1994\"))",
            "      assert_equal(Time.utc(1995, 11, 15, 6, 25, 24),",
            "                   Time.httpdate(\"Wed, 15 Nov 1995 06:25:24 GMT\"))",
            "      assert_equal(Time.utc(1995, 11, 15, 4, 58, 8),",
            "                   Time.httpdate(\"Wed, 15 Nov 1995 04:58:08 GMT\"))",
            "      assert_equal(Time.utc(1994, 11, 15, 8, 12, 31),",
            "                   Time.httpdate(\"Tue, 15 Nov 1994 08:12:31 GMT\"))",
            "      assert_equal(Time.utc(1994, 12, 1, 16, 0, 0),",
            "                   Time.httpdate(\"Thu, 01 Dec 1994 16:00:00 GMT\"))",
            "      assert_equal(Time.utc(1994, 10, 29, 19, 43, 31),",
            "                   Time.httpdate(\"Sat, 29 Oct 1994 19:43:31 GMT\"))",
            "      assert_equal(Time.utc(1994, 11, 15, 12, 45, 26),",
            "                   Time.httpdate(\"Tue, 15 Nov 1994 12:45:26 GMT\"))",
            "      assert_equal(Time.utc(1999, 12, 31, 23, 59, 59),",
            "                   Time.httpdate(\"Fri, 31 Dec 1999 23:59:59 GMT\"))",
            "    end",
            "    def test_rfc3339",
            "      t = Time.utc(1985, 4, 12, 23, 20, 50, 520000)",
            "      s = \"1985-04-12T23:20:50.52Z\"",
            "      assert_equal(t, Time.iso8601(s))",
            "      assert_equal(s, t.iso8601(2))",
            "      t = Time.utc(1996, 12, 20, 0, 39, 57)",
            "      s = \"1996-12-19T16:39:57-08:00\"",
            "      assert_equal(t, Time.iso8601(s))",
            "      # There is no way to generate time string with arbitrary timezone.",
            "      s = \"1996-12-20T00:39:57Z\"",
            "      assert_equal(t, Time.iso8601(s))",
            "      assert_equal(s, t.iso8601)",
            "      t = Time.utc(1990, 12, 31, 23, 59, 60)",
            "      s = \"1990-12-31T23:59:60Z\"",
            "      assert_equal(t, Time.iso8601(s))",
            "      # leap second is representable only if timezone file has it.",
            "      s = \"1990-12-31T15:59:60-08:00\"",
            "      assert_equal(t, Time.iso8601(s))",
            "      begin",
            "        Time.at(-1)",
            "      rescue ArgumentError",
            "        # ignore",
            "      else",
            "        t = Time.utc(1937, 1, 1, 11, 40, 27, 870000)",
            "        s = \"1937-01-01T12:00:27.87+00:20\"",
            "        assert_equal(t, Time.iso8601(s))",
            "      end",
            "    end",
            "    # http://www.w3.org/TR/xmlschema-2/",
            "    def test_xmlschema",
            "      assert_equal(Time.utc(1999, 5, 31, 13, 20, 0) + 5 * 3600,",
            "                   Time.xmlschema(\"1999-05-31T13:20:00-05:00\"))",
            "      assert_equal(Time.local(2000, 1, 20, 12, 0, 0),",
            "                   Time.xmlschema(\"2000-01-20T12:00:00\"))",
            "      assert_equal(Time.utc(2000, 1, 20, 12, 0, 0),",
            "                   Time.xmlschema(\"2000-01-20T12:00:00Z\"))",
            "      assert_equal(Time.utc(2000, 1, 20, 12, 0, 0) - 12 * 3600,",
            "                   Time.xmlschema(\"2000-01-20T12:00:00+12:00\"))",
            "      assert_equal(Time.utc(2000, 1, 20, 12, 0, 0) + 13 * 3600,",
            "                   Time.xmlschema(\"2000-01-20T12:00:00-13:00\"))",
            "      assert_equal(Time.utc(2000, 3, 4, 23, 0, 0) - 3 * 3600,",
            "                   Time.xmlschema(\"2000-03-04T23:00:00+03:00\"))",
            "      assert_equal(Time.utc(2000, 3, 4, 20, 0, 0),",
            "                   Time.xmlschema(\"2000-03-04T20:00:00Z\"))",
            "      assert_equal(Time.local(2000, 1, 15, 0, 0, 0),",
            "                   Time.xmlschema(\"2000-01-15T00:00:00\"))",
            "      assert_equal(Time.local(2000, 2, 15, 0, 0, 0),",
            "                   Time.xmlschema(\"2000-02-15T00:00:00\"))",
            "      assert_equal(Time.local(2000, 1, 15, 12, 0, 0),",
            "                   Time.xmlschema(\"2000-01-15T12:00:00\"))",
            "      assert_equal(Time.utc(2000, 1, 16, 12, 0, 0),",
            "                   Time.xmlschema(\"2000-01-16T12:00:00Z\"))",
            "      assert_equal(Time.local(2000, 1, 1, 12, 0, 0),",
            "                   Time.xmlschema(\"2000-01-01T12:00:00\"))",
            "      assert_equal(Time.utc(1999, 12, 31, 23, 0, 0),",
            "                   Time.xmlschema(\"1999-12-31T23:00:00Z\"))",
            "      assert_equal(Time.local(2000, 1, 16, 12, 0, 0),",
            "                   Time.xmlschema(\"2000-01-16T12:00:00\"))",
            "      assert_equal(Time.local(2000, 1, 16, 0, 0, 0),",
            "                   Time.xmlschema(\"2000-01-16T00:00:00\"))",
            "      assert_equal(Time.utc(2000, 1, 12, 12, 13, 14),",
            "                   Time.xmlschema(\"2000-01-12T12:13:14Z\"))",
            "      assert_equal(Time.utc(2001, 4, 17, 19, 23, 17, 300000),",
            "\t\t   Time.xmlschema(\"2001-04-17T19:23:17.3Z\"))",
            "    end",
            "    def test_encode_xmlschema",
            "      t = Time.utc(2001, 4, 17, 19, 23, 17, 300000)",
            "      assert_equal(\"2001-04-17T19:23:17Z\", t.xmlschema)",
            "      assert_equal(\"2001-04-17T19:23:17.3Z\", t.xmlschema(1))",
            "      assert_equal(\"2001-04-17T19:23:17.300000Z\", t.xmlschema(6))",
            "      assert_equal(\"2001-04-17T19:23:17.3000000Z\", t.xmlschema(7))",
            "      t = Time.utc(2001, 4, 17, 19, 23, 17, 123456)",
            "      assert_equal(\"2001-04-17T19:23:17.1234560Z\", t.xmlschema(7))",
            "      assert_equal(\"2001-04-17T19:23:17.123456Z\", t.xmlschema(6))",
            "      assert_equal(\"2001-04-17T19:23:17.12345Z\", t.xmlschema(5))",
            "      assert_equal(\"2001-04-17T19:23:17.1Z\", t.xmlschema(1))",
            "      begin",
            "        Time.at(-1)",
            "      rescue ArgumentError",
            "        # ignore",
            "      else",
            "        t = Time.utc(1960, 12, 31, 23, 0, 0, 123456)",
            "        assert_equal(\"1960-12-31T23:00:00.123456Z\", t.xmlschema(6))",
            "      end",
            "    end",
            "    def test_completion",
            "      now = Time.local(2001,11,29,21,26,35)",
            "      assert_equal(Time.local( 2001,11,29,21,12),",
            "                   Time.parse(\"2001/11/29 21:12\", now))",
            "      assert_equal(Time.local( 2001,11,29),",
            "                   Time.parse(\"2001/11/29\", now))",
            "      assert_equal(Time.local( 2001,11,29),",
            "                   Time.parse(     \"11/29\", now))",
            "      #assert_equal(Time.local(2001,11,1), Time.parse(\"Nov\", now))",
            "      assert_equal(Time.local( 2001,11,29,10,22),",
            "                   Time.parse(           \"10:22\", now))",
            "    end",
            "    def test_invalid",
            "      # They were actually used in some web sites.",
            "      assert_raise(ArgumentError) { Time.httpdate(\"1 Dec 2001 10:23:57 GMT\") }",
            "      assert_raise(ArgumentError) { Time.httpdate(\"Sat, 1 Dec 2001 10:25:42 GMT\") }",
            "      assert_raise(ArgumentError) { Time.httpdate(\"Sat,  1-Dec-2001 10:53:55 GMT\") }",
            "      assert_raise(ArgumentError) { Time.httpdate(\"Saturday, 01-Dec-2001 10:15:34 GMT\") }",
            "      assert_raise(ArgumentError) { Time.httpdate(\"Saturday, 01-Dec-101 11:10:07 GMT\") }",
            "      assert_raise(ArgumentError) { Time.httpdate(\"Fri, 30 Nov 2001 21:30:00 JST\") }",
            "      # They were actually used in some mails.",
            "      assert_raise(ArgumentError) { Time.rfc2822(\"01-5-20\") }",
            "      assert_raise(ArgumentError) { Time.rfc2822(\"7/21/00\") }",
            "      assert_raise(ArgumentError) { Time.rfc2822(\"2001-8-28\") }",
            "      assert_raise(ArgumentError) { Time.rfc2822(\"00-5-6 1:13:06\") }",
            "      assert_raise(ArgumentError) { Time.rfc2822(\"2001-9-27 9:36:49\") }",
            "      assert_raise(ArgumentError) { Time.rfc2822(\"2000-12-13 11:01:11\") }",
            "      assert_raise(ArgumentError) { Time.rfc2822(\"2001/10/17 04:29:55\") }",
            "      assert_raise(ArgumentError) { Time.rfc2822(\"9/4/2001 9:23:19 PM\") }",
            "      assert_raise(ArgumentError) { Time.rfc2822(\"01 Nov 2001 09:04:31\") }",
            "      assert_raise(ArgumentError) { Time.rfc2822(\"13 Feb 2001 16:4 GMT\") }",
            "      assert_raise(ArgumentError) { Time.rfc2822(\"01 Oct 00 5:41:19 PM\") }",
            "      assert_raise(ArgumentError) { Time.rfc2822(\"2 Jul 00 00:51:37 JST\") }",
            "      assert_raise(ArgumentError) { Time.rfc2822(\"01 11 2001 06:55:57 -0500\") }",
            "      assert_raise(ArgumentError) { Time.rfc2822(\"18 \\343\\366\\356\\341\\370 2000\") }",
            "      assert_raise(ArgumentError) { Time.rfc2822(\"Fri, Oct 2001  18:53:32\") }",
            "      assert_raise(ArgumentError) { Time.rfc2822(\"Fri, 2 Nov 2001 03:47:54\") }",
            "      assert_raise(ArgumentError) { Time.rfc2822(\"Fri, 27 Jul 2001 11.14.14 +0200\") }",
            "      assert_raise(ArgumentError) { Time.rfc2822(\"Thu, 2 Nov 2000 04:13:53 -600\") }",
            "      assert_raise(ArgumentError) { Time.rfc2822(\"Wed, 5 Apr 2000 22:57:09 JST\") }",
            "      assert_raise(ArgumentError) { Time.rfc2822(\"Mon, 11 Sep 2000 19:47:33 00000\") }",
            "      assert_raise(ArgumentError) { Time.rfc2822(\"Fri, 28 Apr 2000 20:40:47 +-900\") }",
            "      assert_raise(ArgumentError) { Time.rfc2822(\"Fri, 19 Jan 2001 8:15:36 AM -0500\") }",
            "      assert_raise(ArgumentError) { Time.rfc2822(\"Thursday, Sep 27 2001 7:42:35 AM EST\") }",
            "      assert_raise(ArgumentError) { Time.rfc2822(\"3/11/2001 1:31:57 PM Pacific Daylight Time\") }",
            "      assert_raise(ArgumentError) { Time.rfc2822(\"Mi, 28 Mrz 2001 11:51:36\") }",
            "      assert_raise(ArgumentError) { Time.rfc2822(\"P, 30 sept 2001 23:03:14\") }",
            "      assert_raise(ArgumentError) { Time.rfc2822(\"fr, 11 aug 2000 18:39:22\") }",
            "      assert_raise(ArgumentError) { Time.rfc2822(\"Fr, 21 Sep 2001 17:44:03 -1000\") }",
            "      assert_raise(ArgumentError) { Time.rfc2822(\"Mo, 18 Jun 2001 19:21:40 -1000\") }",
            "      assert_raise(ArgumentError) { Time.rfc2822(\"l\\366, 12 aug 2000 18:53:20\") }",
            "      assert_raise(ArgumentError) { Time.rfc2822(\"l\\366, 26 maj 2001 00:15:58\") }",
            "      assert_raise(ArgumentError) { Time.rfc2822(\"Dom, 30 Sep 2001 17:36:30\") }",
            "      assert_raise(ArgumentError) { Time.rfc2822(\"%&, 31 %2/ 2000 15:44:47 -0500\") }",
            "      assert_raise(ArgumentError) { Time.rfc2822(\"dom, 26 ago 2001 03:57:07 -0300\") }",
            "      assert_raise(ArgumentError) { Time.rfc2822(\"ter, 04 set 2001 16:27:58 -0300\") }",
            "      assert_raise(ArgumentError) { Time.rfc2822(\"Wen, 3 oct 2001 23:17:49 -0400\") }",
            "      assert_raise(ArgumentError) { Time.rfc2822(\"Wen, 3 oct 2001 23:17:49 -0400\") }",
            "      assert_raise(ArgumentError) { Time.rfc2822(\"ele, 11 h: 2000 12:42:15 -0500\") }",
            "      assert_raise(ArgumentError) { Time.rfc2822(\"Tue, 14 Aug 2001 3:55:3 +0200\") }",
            "      assert_raise(ArgumentError) { Time.rfc2822(\"Fri, 25 Aug 2000 9:3:48 +0800\") }",
            "      assert_raise(ArgumentError) { Time.rfc2822(\"Fri, 1 Dec 2000 0:57:50 EST\") }",
            "      assert_raise(ArgumentError) { Time.rfc2822(\"Mon, 7 May 2001 9:39:51 +0200\") }",
            "      assert_raise(ArgumentError) { Time.rfc2822(\"Wed, 1 Aug 2001 16:9:15 +0200\") }",
            "      assert_raise(ArgumentError) { Time.rfc2822(\"Wed, 23 Aug 2000 9:17:36 +0800\") }",
            "      assert_raise(ArgumentError) { Time.rfc2822(\"Fri, 11 Aug 2000 10:4:42 +0800\") }",
            "      assert_raise(ArgumentError) { Time.rfc2822(\"Sat, 15 Sep 2001 13:22:2 +0300\") }",
            "      assert_raise(ArgumentError) { Time.rfc2822(\"Wed,16 \\276\\305\\324\\302 2001 20:06:25 +0800\") }",
            "      assert_raise(ArgumentError) { Time.rfc2822(\"Wed,7 \\312\\256\\322\\273\\324\\302 2001 23:47:22 +0800\") }",
            "      assert_raise(ArgumentError) { Time.rfc2822(\"=?iso-8859-1?Q?(=C5=DA),?= 10   2 2001 23:32:26 +0900 (JST)\") }",
            "      assert_raise(ArgumentError) { Time.rfc2822(\"\\307\\341\\314\\343\\332\\311, 30 \\344\\346\\335\\343\\310\\321 2001 10:01:06\") }",
            "      assert_raise(ArgumentError) { Time.rfc2822(\"=?iso-8859-1?Q?(=BF=E5),?= 12  =?iso-8859-1?Q?9=B7=EE?= 2001 14:52:41\\n+0900 (JST)\") }",
            "    end",
            "  end",
            "# timeout.rb -- execution timeout",
            "# Copyright (C) 2000  Network Applied Communication Laboratory, Inc.",
            "# Copyright (C) 2000  Information-technology Promotion Agency, Japan",
            "#= SYNOPSIS",
            "#   require 'timeout'",
            "#   status = timeout(5) {",
            "#     # something may take time",
            "#   }",
            "#= DESCRIPTION",
            "# timeout executes the block.  If the block execution terminates successfully",
            "# before timeout, it returns true.  If not, it terminates the execution and",
            "# raise TimeoutError exception.",
            "#== Parameters",
            "#  : timout",
            "#    The time in seconds to wait for block termination.   ",
            "#  : [exception]",
            "#    The exception class to be raised on timeout.",
            "#=end",
            "module Timeout",
            "  class Error<Interrupt",
            "  end",
            "  def timeout(sec, exception=Error)",
            "    return yield if sec == nil or sec.zero?",
            "    begin",
            "      x = Thread.current",
            "      y = Thread.start {",
            "        sleep sec",
            "        x.raise exception, \"execution expired\" if x.alive?",
            "      }",
            "      yield sec",
            "      #    return true",
            "    ensure",
            "      y.kill if y and y.alive?",
            "    end",
            "  end",
            "  module_function :timeout",
            "# compatible",
            "def timeout(n, e=Timeout::Error, &block)",
            "  Timeout::timeout(n, e, &block)",
            "TimeoutError = Timeout::Error",
            "if __FILE__ == $0",
            "  p timeout(5) {",
            "    45",
            "  p timeout(5, TimeoutError) {",
            "    45",
            "  p timeout(nil) {",
            "    54",
            "  p timeout(0) {",
            "    54",
            "  p timeout(5) {",
            "    loop {",
            "      p 10",
            "      sleep 1",
            "    }",
            "# = uri.rb",
            "# URI support for Ruby",
            "# Author:: Akira Yamada <akira@ruby-lang.org>",
            "# Documentation:: Akira Yamada <akira@ruby-lang.org>, Dmitry V. Sabanin <sdmitry@lrn.ru>",
            "# License:: ",
            "#  Copyright (c) 2001 akira yamada <akira@ruby-lang.org>",
            "#  You can redistribute it and/or modify it under the same term as Ruby.",
            "# Revision:: $Id: uri.rb,v 1.8.2.1 2004/03/24 12:20:32 gsinclair Exp $",
            "# See URI for documentation",
            "module URI",
            "  VERSION_CODE = '000911'.freeze",
            "  VERSION = VERSION_CODE.scan(/../).collect{|n| n.to_i}.join('.').freeze",
            "require 'uri/common'",
            "require 'uri/generic'",
            "require 'uri/ftp'",
            "require 'uri/http'",
            "require 'uri/https'",
            "require 'uri/ldap'",
            "require 'uri/mailto'",
            "# = uri/common.rb",
            "# Author:: Akira Yamada <akira@ruby-lang.org>",
            "# Revision:: $Id: common.rb,v 1.11.2.2 2004/03/24 12:20:32 gsinclair Exp $",
            "# License:: ",
            "#   You can redistribute it and/or modify it under the same term as Ruby.",
            "module URI",
            "  module REGEXP",
            "    #",
            "    # Patterns used to parse URI's",
            "    #",
            "    module PATTERN",
            "      # :stopdoc:",
            "      # RFC 2396 (URI Generic Syntax)",
            "      # RFC 2732 (IPv6 Literal Addresses in URL's)",
            "      # RFC 2373 (IPv6 Addressing Architecture)",
            "      # alpha         = lowalpha | upalpha",
            "      ALPHA = \"a-zA-Z\"",
            "      # alphanum      = alpha | digit",
            "      ALNUM = \"#{ALPHA}\\\\d\"",
            "      # hex           = digit | \"A\" | \"B\" | \"C\" | \"D\" | \"E\" | \"F\" |",
            "      #                         \"a\" | \"b\" | \"c\" | \"d\" | \"e\" | \"f\"",
            "      HEX     = \"a-fA-F\\\\d\"",
            "      # escaped       = \"%\" hex hex",
            "      ESCAPED = \"%[#{HEX}]{2}\"",
            "      # mark          = \"-\" | \"_\" | \".\" | \"!\" | \"~\" | \"*\" | \"'\" |",
            "      #                 \"(\" | \")\"",
            "      # unreserved    = alphanum | mark",
            "      UNRESERVED = \"-_.!~*'()#{ALNUM}\"",
            "      # reserved      = \";\" | \"/\" | \"?\" | \":\" | \"@\" | \"&\" | \"=\" | \"+\" |",
            "      #                 \"$\" | \",\"",
            "      # reserved      = \";\" | \"/\" | \"?\" | \":\" | \"@\" | \"&\" | \"=\" | \"+\" | ",
            "      #                 \"$\" | \",\" | \"[\" | \"]\" (RFC 2732)",
            "      RESERVED = \";/?:@&=+$,\\\\[\\\\]\"",
            "      # uric          = reserved | unreserved | escaped",
            "      URIC = \"(?:[#{UNRESERVED}#{RESERVED}]|#{ESCAPED})\"",
            "      # uric_no_slash = unreserved | escaped | \";\" | \"?\" | \":\" | \"@\" |",
            "      #                 \"&\" | \"=\" | \"+\" | \"$\" | \",\"",
            "      URIC_NO_SLASH = \"(?:[#{UNRESERVED};?:@&=+$,]|#{ESCAPED})\"",
            "      # query         = *uric",
            "      QUERY = \"#{URIC}*\"",
            "      # fragment      = *uric",
            "      FRAGMENT = \"#{URIC}*\"",
            "      # domainlabel   = alphanum | alphanum *( alphanum | \"-\" ) alphanum",
            "      DOMLABEL = \"(?:[#{ALNUM}](?:[-#{ALNUM}]*[#{ALNUM}])?)\"",
            "      # toplabel      = alpha | alpha *( alphanum | \"-\" ) alphanum",
            "      TOPLABEL = \"(?:[#{ALPHA}](?:[-#{ALNUM}]*[#{ALNUM}])?)\"",
            "      # hostname      = *( domainlabel \".\" ) toplabel [ \".\" ]",
            "      HOSTNAME = \"(?:#{DOMLABEL}\\\\.)*#{TOPLABEL}\\\\.?\"",
            "      # RFC 2373, APPENDIX B:",
            "      # IPv6address = hexpart [ \":\" IPv4address ]",
            "      # IPv4address   = 1*3DIGIT \".\" 1*3DIGIT \".\" 1*3DIGIT \".\" 1*3DIGIT",
            "      # hexpart = hexseq | hexseq \"::\" [ hexseq ] | \"::\" [ hexseq ]",
            "      # hexseq  = hex4 *( \":\" hex4)",
            "      # hex4    = 1*4HEXDIG",
            "      #",
            "      # XXX: This definition has a flaw. \"::\" + IPv4address must be",
            "      # allowed too.  Here is a replacement.",
            "      #",
            "      # IPv4address = 1*3DIGIT \".\" 1*3DIGIT \".\" 1*3DIGIT \".\" 1*3DIGIT",
            "      IPV4ADDR = \"\\\\d{1,3}\\\\.\\\\d{1,3}\\\\.\\\\d{1,3}\\\\.\\\\d{1,3}\"",
            "      # hex4     = 1*4HEXDIG",
            "      HEX4 = \"[#{HEX}]{1,4}\"",
            "      # lastpart = hex4 | IPv4address",
            "      LASTPART = \"(?:#{HEX4}|#{IPV4ADDR})\"",
            "      # hexseq1  = *( hex4 \":\" ) hex4",
            "      HEXSEQ1 = \"(?:#{HEX4}:)*#{HEX4}\"",
            "      # hexseq2  = *( hex4 \":\" ) lastpart",
            "      HEXSEQ2 = \"(?:#{HEX4}:)*#{LASTPART}\"",
            "      # IPv6address = hexseq2 | [ hexseq1 ] \"::\" [ hexseq2 ]",
            "      IPV6ADDR = \"(?:#{HEXSEQ2}|(?:#{HEXSEQ1})?::(?:#{HEXSEQ2})?)\"",
            "      # IPv6prefix  = ( hexseq1 | [ hexseq1 ] \"::\" [ hexseq1 ] ) \"/\" 1*2DIGIT",
            "      # unused",
            "      # ipv6reference = \"[\" IPv6address \"]\" (RFC 2732)",
            "      IPV6REF = \"\\\\[#{IPV6ADDR}\\\\]\"",
            "      # host          = hostname | IPv4address",
            "      # host          = hostname | IPv4address | IPv6reference (RFC 2732)",
            "      HOST = \"(?:#{HOSTNAME}|#{IPV4ADDR}|#{IPV6REF})\"",
            "      # port          = *digit",
            "      PORT = \"\\d*\"",
            "      # hostport      = host [ \":\" port ]",
            "      HOSTPORT = \"#{HOST}(?::#{PORT})?\"",
            "      # userinfo      = *( unreserved | escaped |",
            "      #                    \";\" | \":\" | \"&\" | \"=\" | \"+\" | \"$\" | \",\" )",
            "      USERINFO = \"(?:[#{UNRESERVED};:&=+$,]|#{ESCAPED})*\"",
            "      # pchar         = unreserved | escaped |",
            "      #                 \":\" | \"@\" | \"&\" | \"=\" | \"+\" | \"$\" | \",\"",
            "      PCHAR = \"(?:[#{UNRESERVED}:@&=+$,]|#{ESCAPED})\"",
            "      # param         = *pchar",
            "      PARAM = \"#{PCHAR}*\"",
            "      # segment       = *pchar *( \";\" param )",
            "      SEGMENT = \"#{PCHAR}*(?:;#{PARAM})*\"",
            "      # path_segments = segment *( \"/\" segment )",
            "      PATH_SEGMENTS = \"#{SEGMENT}(?:/#{SEGMENT})*\"",
            "      # server        = [ [ userinfo \"@\" ] hostport ]",
            "      SERVER = \"(?:#{USERINFO}@)?#{HOSTPORT}\"",
            "      # reg_name      = 1*( unreserved | escaped | \"$\" | \",\" |",
            "      #                     \";\" | \":\" | \"@\" | \"&\" | \"=\" | \"+\" )",
            "      REG_NAME = \"(?:[#{UNRESERVED}$,;+@&=+]|#{ESCAPED})+\"",
            "      # authority     = server | reg_name",
            "      AUTHORITY = \"(?:#{SERVER}|#{REG_NAME})\"",
            "      # rel_segment   = 1*( unreserved | escaped |",
            "      #                     \";\" | \"@\" | \"&\" | \"=\" | \"+\" | \"$\" | \",\" )",
            "      REL_SEGMENT = \"(?:[#{UNRESERVED};@&=+$,]|#{ESCAPED})+\"",
            "      # scheme        = alpha *( alpha | digit | \"+\" | \"-\" | \".\" )",
            "      SCHEME = \"[#{ALPHA}][-+.#{ALPHA}\\\\d]*\"",
            "      # abs_path      = \"/\"  path_segments",
            "      ABS_PATH = \"/#{PATH_SEGMENTS}\"",
            "      # rel_path      = rel_segment [ abs_path ]",
            "      REL_PATH = \"#{REL_SEGMENT}(?:#{ABS_PATH})?\"",
            "      # net_path      = \"//\" authority [ abs_path ]",
            "      NET_PATH   = \"//#{AUTHORITY}(?:#{ABS_PATH})?\"",
            "      # hier_part     = ( net_path | abs_path ) [ \"?\" query ]",
            "      HIER_PART   = \"(?:#{NET_PATH}|#{ABS_PATH})(?:\\\\?(?:#{QUERY}))?\"",
            "      # opaque_part   = uric_no_slash *uric",
            "      OPAQUE_PART = \"#{URIC_NO_SLASH}#{URIC}*\"",
            "      # absoluteURI   = scheme \":\" ( hier_part | opaque_part )",
            "      ABS_URI   = \"#{SCHEME}:(?:#{HIER_PART}|#{OPAQUE_PART})\"",
            "      # relativeURI   = ( net_path | abs_path | rel_path ) [ \"?\" query ]",
            "      REL_URI = \"(?:#{NET_PATH}|#{ABS_PATH}|#{REL_PATH})(?:\\\\?#{QUERY})?\"",
            "      # URI-reference = [ absoluteURI | relativeURI ] [ \"#\" fragment ]",
            "      URI_REF = \"(?:#{ABS_URI}|#{REL_URI})?(?:##{FRAGMENT})?\"",
            "      # XXX:",
            "      X_ABS_URI = \"",
            "        (#{PATTERN::SCHEME}):                     (?# 1: scheme)",
            "        (?:",
            "           (#{PATTERN::OPAQUE_PART})              (?# 2: opaque)",
            "        |",
            "           (?:(?:",
            "             //(?:",
            "                 (?:(?:(#{PATTERN::USERINFO})@)?  (?# 3: userinfo)",
            "                   (?:(#{PATTERN::HOST})(?::(\\\\d*))?))?(?# 4: host, 5: port)",
            "               |",
            "                 (#{PATTERN::REG_NAME})           (?# 6: registry)",
            "               )",
            "             |",
            "             (?!//))                              (?# XXX: '//' is the mark for hostport)",
            "             (#{PATTERN::ABS_PATH})?              (?# 7: path)",
            "           )(?:\\\\?(#{PATTERN::QUERY}))?           (?# 8: query)",
            "        )",
            "        (?:\\\\#(#{PATTERN::FRAGMENT}))?            (?# 9: fragment)",
            "      \"",
            "      X_REL_URI = \"",
            "        (?:",
            "          (?:",
            "            //",
            "            (?:",
            "              (?:(#{PATTERN::USERINFO})@)?       (?# 1: userinfo)",
            "                (#{PATTERN::HOST})?(?::(\\\\d*))?  (?# 2: host, 3: port)",
            "            |",
            "              (#{PATTERN::REG_NAME})             (?# 4: registry)",
            "            )",
            "          )",
            "        |",
            "          (#{PATTERN::REL_SEGMENT})              (?# 5: rel_segment)",
            "        )?",
            "        (#{PATTERN::ABS_PATH})?                  (?# 6: abs_path)",
            "        (?:\\\\?(#{PATTERN::QUERY}))?              (?# 7: query)",
            "        (?:\\\\#(#{PATTERN::FRAGMENT}))?           (?# 8: fragment)",
            "      \"",
            "      # :startdoc:",
            "    end # PATTERN",
            "    # :stopdoc:",
            "    # for URI::split",
            "    ABS_URI = Regexp.new('^' + PATTERN::X_ABS_URI + '$', #'",
            "                         Regexp::EXTENDED, 'N').freeze",
            "    REL_URI = Regexp.new('^' + PATTERN::X_REL_URI + '$', #'",
            "                         Regexp::EXTENDED, 'N').freeze",
            "    # for URI::extract",
            "    URI_REF     = Regexp.new(PATTERN::URI_REF, false, 'N').freeze",
            "    ABS_URI_REF = Regexp.new(PATTERN::X_ABS_URI, Regexp::EXTENDED, 'N').freeze",
            "    REL_URI_REF = Regexp.new(PATTERN::X_REL_URI, Regexp::EXTENDED, 'N').freeze",
            "    # for URI::escape/unescape",
            "    ESCAPED = Regexp.new(PATTERN::ESCAPED, false, 'N').freeze",
            "    UNSAFE  = Regexp.new(\"[^#{PATTERN::UNRESERVED}#{PATTERN::RESERVED}]\",",
            "                         false, 'N').freeze",
            "    # for Generic#initialize",
            "    SCHEME   = Regexp.new(\"^#{PATTERN::SCHEME}$\", false, 'N').freeze #\"",
            "    USERINFO = Regexp.new(\"^#{PATTERN::USERINFO}$\", false, 'N').freeze #\"",
            "    HOST     = Regexp.new(\"^#{PATTERN::HOST}$\", false, 'N').freeze #\"",
            "    PORT     = Regexp.new(\"^#{PATTERN::PORT}$\", false, 'N').freeze #\"",
            "    OPAQUE   = Regexp.new(\"^#{PATTERN::OPAQUE_PART}$\", false, 'N').freeze #\"",
            "    REGISTRY = Regexp.new(\"^#{PATTERN::REG_NAME}$\", false, 'N').freeze #\"",
            "    ABS_PATH = Regexp.new(\"^#{PATTERN::ABS_PATH}$\", false, 'N').freeze #\"",
            "    REL_PATH = Regexp.new(\"^#{PATTERN::REL_PATH}$\", false, 'N').freeze #\"",
            "    QUERY    = Regexp.new(\"^#{PATTERN::QUERY}$\", false, 'N').freeze #\"",
            "    FRAGMENT = Regexp.new(\"^#{PATTERN::FRAGMENT}$\", false, 'N').freeze #\"",
            "    # :startdoc:",
            "  end # REGEXP",
            "  module Util",
            "    def make_components_hash(klass, array_hash)",
            "      tmp = {}",
            "      if array_hash.kind_of?(Array) &&",
            "          array_hash.size == klass.component.size - 1",
            "        klass.component[1..-1].each_index do |i|",
            "          begin",
            "            tmp[klass.component[i + 1]] = array_hash[i].clone",
            "          rescue TypeError",
            "            tmp[klass.component[i + 1]] = array_hash[i]",
            "          end",
            "        end",
            "      elsif array_hash.kind_of?(Hash)",
            "        array_hash.each do |key, value|",
            "          begin",
            "            tmp[key] = value.clone",
            "          rescue TypeError",
            "            tmp[key] = value",
            "          end",
            "        end",
            "      else",
            "        raise ArgumentError, ",
            "          \"expected Array of or Hash of components of #{klass.to_s} (#{klass.component[1..-1].join(', ')})\"",
            "      end",
            "      tmp[:scheme] = klass.to_s.sub(/\\A.*::/, '').downcase",
            "      return tmp",
            "    end",
            "    module_function :make_components_hash",
            "  end",
            "  module Escape",
            "    include REGEXP",
            "    #",
            "    # == Synopsis",
            "    #",
            "    #   URI.escape(str [, unsafe])",
            "    #",
            "    # == Args",
            "    #",
            "    # +str+::",
            "    #   String to replaces in.",
            "    # +unsafe+::",
            "    #   Regexp that matches all symbols that must be replaced with codes.",
            "    #   By default uses <tt>REGEXP::SAFE</tt>.",
            "    #",
            "    # == Description",
            "    #",
            "    # Escapes the string, replacing all unsafe characters with codes.",
            "    #",
            "    # == Usage",
            "    #",
            "    #   require 'uri'",
            "    #",
            "    #   enc_uri = URI.escape(\"http://foobar.com/?a=\\11\\15\")",
            "    #   p enc_uri",
            "    #   # => \"http://foobar.com/?a=%09%0D\"",
            "    #",
            "    #   p URI.unescape(enc_uri)",
            "    #   # => \"http://foobar.com/?a=\\t\\r\"",
            "    #",
            "    def escape(str, unsafe = UNSAFE)",
            "      unless unsafe.kind_of?(Regexp)",
            "        # perhaps unsafe is String object",
            "        unsafe = Regexp.new(Regexp.quote(unsafe), false, 'N')",
            "      end",
            "      str.gsub(unsafe) do |us|",
            "        tmp = ''",
            "        us.each_byte do |uc|",
            "          tmp << sprintf('%%%02X', uc)",
            "        end",
            "        tmp",
            "      end",
            "    end",
            "    alias encode escape",
            "    #",
            "    # == Synopsis",
            "    #",
            "    #   URI.unescape(str)",
            "    #",
            "    # == Args",
            "    #",
            "    # +str+::",
            "    #   Unescapes the string.",
            "    #",
            "    # == Usage",
            "    #",
            "    #   require 'uri'",
            "    #",
            "    #   enc_uri = URI.escape(\"http://foobar.com/?a=\\11\\15\")",
            "    #   p enc_uri",
            "    #   # => \"http://foobar.com/?a=%09%0D\"",
            "    #",
            "    #   p URI.unescape(enc_uri)",
            "    #   # => \"http://foobar.com/?a=\\t\\r\"",
            "    #",
            "    def unescape(str)",
            "      str.gsub(ESCAPED) do",
            "        $&[1,2].hex.chr",
            "      end",
            "    end",
            "    alias decode unescape",
            "  end",
            "  include REGEXP",
            "  extend Escape",
            "  @@schemes = {}",
            "  # Base class for all URI exceptions.",
            "  class Error < StandardError; end",
            "  # Not a URI.",
            "  class InvalidURIError < Error; end",
            "  # Not a URI component.",
            "  class InvalidComponentError < Error; end",
            "  # URI is valid, bad usage is not.",
            "  class BadURIError < Error; end",
            "  # == Synopsis",
            "  #   URI::split(uri)",
            "  # == Args",
            "  # +uri+::",
            "  #   String with URI.",
            "  # == Description",
            "  # Splits the string on following parts and returns array with result:",
            "  #   * Scheme",
            "  #   * Userinfo",
            "  #   * Host",
            "  #   * Port",
            "  #   * Registry",
            "  #   * Path",
            "  #   * Opaque",
            "  #   * Query",
            "  #   * Fragment",
            "  # ",
            "  # == Usage",
            "  #   require 'uri'",
            "  #   p URI.split(\"http://www.ruby-lang.org/\")",
            "  #   # => [\"http\", nil, \"www.ruby-lang.org\", nil, nil, \"/\", nil, nil, nil]",
            "  def self.split(uri)",
            "    case uri",
            "    when ''",
            "      # null uri",
            "    when ABS_URI",
            "      scheme, opaque, userinfo, host, port, ",
            "        registry, path, query, fragment = $~[1..-1]",
            "      # URI-reference = [ absoluteURI | relativeURI ] [ \"#\" fragment ]",
            "      # absoluteURI   = scheme \":\" ( hier_part | opaque_part )",
            "      # hier_part     = ( net_path | abs_path ) [ \"?\" query ]",
            "      # opaque_part   = uric_no_slash *uric",
            "      # abs_path      = \"/\"  path_segments",
            "      # net_path      = \"//\" authority [ abs_path ]",
            "      # authority     = server | reg_name",
            "      # server        = [ [ userinfo \"@\" ] hostport ]",
            "      if !scheme",
            "        raise InvalidURIError, ",
            "          \"bad URI(absolute but no scheme): #{uri}\"",
            "      end",
            "      if !opaque && (!path && (!host && !registry))",
            "        raise InvalidURIError,",
            "          \"bad URI(absolute but no path): #{uri}\" ",
            "      end",
            "    when REL_URI",
            "      scheme = nil",
            "      opaque = nil",
            "      userinfo, host, port, registry, ",
            "        rel_segment, abs_path, query, fragment = $~[1..-1]",
            "      if rel_segment && abs_path",
            "        path = rel_segment + abs_path",
            "      elsif rel_segment",
            "        path = rel_segment",
            "      elsif abs_path",
            "        path = abs_path",
            "      end",
            "      # URI-reference = [ absoluteURI | relativeURI ] [ \"#\" fragment ]",
            "      # relativeURI   = ( net_path | abs_path | rel_path ) [ \"?\" query ]",
            "      # net_path      = \"//\" authority [ abs_path ]",
            "      # abs_path      = \"/\"  path_segments",
            "      # rel_path      = rel_segment [ abs_path ]",
            "      # authority     = server | reg_name",
            "      # server        = [ [ userinfo \"@\" ] hostport ]",
            "    else",
            "      raise InvalidURIError, \"bad URI(is not URI?): #{uri}\"",
            "    end",
            "    path = '' if !path && !opaque # (see RFC2396 Section 5.2)",
            "    ret = [",
            "      scheme, ",
            "      userinfo, host, port,         # X",
            "      registry,                        # X",
            "      path,                         # Y",
            "      opaque,                        # Y",
            "      query,",
            "      fragment",
            "    ]",
            "    return ret",
            "  end",
            "  # == Synopsis",
            "  #   URI::parse(uri_str)",
            "  # == Args",
            "  # +uri_str+::",
            "  #   String with URI.",
            "  # == Description",
            "  # Creates one of the URI's subclasses instance from the string.",
            "  #  ",
            "  # == Raises",
            "  # URI::InvalidURIError",
            "  #   Raised if URI given is not a correct one.",
            "  # == Usage",
            "  #   require 'uri'",
            "  #   uri = URI.parse(\"http://www.ruby-lang.org/\")",
            "  #   p uri",
            "  #   # => #<URI::HTTP:0x202281be URL:http://www.ruby-lang.org/>",
            "  #   p uri.scheme ",
            "  #   # => \"http\" ",
            "  #   p uri.host ",
            "  #   # => \"www.ruby-lang.org\" ",
            "  # ",
            "  def self.parse(uri)",
            "    scheme, userinfo, host, port, ",
            "      registry, path, opaque, query, fragment = self.split(uri)",
            "    if scheme && @@schemes.include?(scheme.upcase)",
            "      @@schemes[scheme.upcase].new(scheme, userinfo, host, port, ",
            "                                   registry, path, opaque, query, ",
            "                                   fragment)",
            "    else",
            "      Generic.new(scheme, userinfo, host, port, ",
            "                  registry, path, opaque, query, ",
            "                  fragment)",
            "    end",
            "  end",
            "  # == Synopsis",
            "  #   URI::join(str[, str, ...])",
            "  # == Args",
            "  # +str+::",
            "  #   String(s) to work with",
            "  # == Description",
            "  # Joins URIs.",
            "  # == Usage",
            "  #   require 'uri'",
            "  #   p URI.join(\"http:/localhost/\",\"main.rbx\")",
            "  #   # => #<URI::HTTP:0x2022ac02 URL:http:/localhost/main.php>",
            "  def self.join(*str)",
            "    u = self.parse(str[0])",
            "    str[1 .. -1].each do |x|",
            "      u = u.merge(x)",
            "    end",
            "    u",
            "  end",
            "  # == Synopsis",
            "  #   URI::extract(str[, schemes][,&blk])",
            "  # == Args",
            "  # +str+:: ",
            "  #   String to extract URIs from.",
            "  # +schemes+::",
            "  #   Limit URI matching to a specific schemes.",
            "  # == Description",
            "  # Extracts URIs from a string. If block given, iterates through all matched URIs.",
            "  # Returns nil if block given or array with matches.",
            "  # == Usage",
            "  #   require \"uri\"",
            "  #   URI.extract(\"text here http://foo.bar.org/bla and here mailto:test@ruby.com and here also.\")",
            "  #   # => [\"http://foo.bar.com/foobar\", \"mailto:foo@bar.com\"]",
            "  def self.extract(str, schemes = nil, &block)",
            "    if block_given?",
            "      str.scan(regexp(schemes)) { yield $& }",
            "      nil",
            "    else",
            "      result = []",
            "      str.scan(regexp(schemes)) { result.push $& }",
            "      result",
            "    end",
            "  end",
            "  # == Synopsis",
            "  #   URI::regexp([match_schemes])",
            "  # == Args",
            "  # +match_schemes+:: ",
            "  #   Array of schemes. If given, resulting regexp matches to URIs",
            "  #   whose scheme is one of the match_schemes.",
            "  # ",
            "  # == Description",
            "  # Returns a Regexp object which matches to URI-like strings.",
            "  # The Regexp object returned by this method includes arbitrary",
            "  # number of capture group (parentheses).  Never rely on it's number.",
            "  # ",
            "  # == Usage",
            "  #   require 'uri'",
            "  #   # extract first URI from html_string",
            "  #   html_string.slice(URI.regexp)",
            "  # ",
            "  #   # remove ftp URIs",
            "  #   html_string.sub(URI.regexp(['ftp'])",
            "  # ",
            "  #   # You should not rely on the number of parentheses",
            "  #   html_string.scan(URI.regexp) do |*matches|",
            "  #     p $&",
            "  #   end",
            "  def self.regexp(schemes = nil)",
            "    unless schemes",
            "      ABS_URI_REF",
            "    else",
            "      /(?=#{Regexp.union(*schemes)}:)#{PATTERN::X_ABS_URI}/xn",
            "    end",
            "  end",
            "# = uri/ftp.rb",
            "# Author:: Akira Yamada <akira@ruby-lang.org>",
            "# License:: You can redistribute it and/or modify it under the same term as Ruby.",
            "# Revision:: $Id: ftp.rb,v 1.3.2.1 2004/03/24 12:20:32 gsinclair Exp $",
            "require 'uri/generic'",
            "module URI",
            "  # RFC1738 section 3.2.",
            "  class FTP < Generic",
            "    DEFAULT_PORT = 21",
            "    COMPONENT = [",
            "      :scheme, ",
            "      :userinfo, :host, :port,",
            "      :path, :typecode",
            "    ].freeze",
            "    #",
            "    # Typecode is, \"a\", \"i\" or \"d\". ",
            "    # As for \"a\" the text, as for \"i\" binary, ",
            "    # as for \"d\" the directory is displayed. ",
            "    # \"A\" with the text, as for \"i\" being binary, ",
            "    # is because the respective data type was called ASCII and ",
            "    # IMAGE with the protocol of FTP.",
            "    #",
            "    TYPECODE = ['a', 'i', 'd'].freeze",
            "    TYPECODE_PREFIX = ';type='.freeze",
            "    def self.new2(user, password, host, port, path, ",
            "                  typecode = nil, arg_check = true)",
            "      typecode = nil if typecode.size == 0",
            "      if typecode && !TYPECODE.include?(typecode)",
            "        raise ArgumentError,",
            "          \"bad typecode is specified: #{typecode}\"",
            "      end",
            "      # do escape",
            "      self.new('ftp',",
            "               [user, password], ",
            "               host, port, nil, ",
            "               typecode ? path + TYPECODE_PREFIX + typecode : path, ",
            "               nil, nil, nil, arg_check)",
            "    end",
            "    #",
            "    # == Description",
            "    #",
            "    # Creates a new URI::FTP object from components of URI::FTP with",
            "    # check.  It is scheme, userinfo, host, port, path and typecode. It",
            "    # provided by an Array or a Hash. typecode is \"a\", \"i\" or \"d\".",
            "    #",
            "    def self.build(args)",
            "      tmp = Util::make_components_hash(self, args)",
            "      if tmp[:typecode]",
            "        if tmp[:typecode].size == 1",
            "          tmp[:typecode] = TYPECODE_PREFIX + tmp[:typecode] ",
            "        end",
            "        tmp[:path] << tmp[:typecode]",
            "      end",
            "      return super(tmp)",
            "    end",
            "    #",
            "    # == Description",
            "    #",
            "    # Create a new URI::FTP object from ``generic'' components with no",
            "    # check.",
            "    #",
            "    # == Usage",
            "    #",
            "    #   require 'uri'",
            "    #   p ftp = URI.parse(\"ftp://ftp.ruby-lang.org/pub/ruby/;type=d\") ",
            "    #   # => #<URI::FTP:0x201fad08 URL:ftp://ftp.ruby-lang.org/pub/ruby/;type=d>",
            "    #   p ftp.typecode",
            "    #   # => \"d\"",
            "    #",
            "    def initialize(*arg)",
            "      super(*arg)",
            "      @typecode = nil",
            "      tmp = @path.index(TYPECODE_PREFIX)",
            "      if tmp",
            "        typecode = @path[tmp + TYPECODE_PREFIX.size..-1]",
            "        self.set_path(@path[0..tmp - 1])",
            "        ",
            "        if arg[-1]",
            "          self.typecode = typecode",
            "        else",
            "          self.set_typecode(typecode)",
            "        end",
            "      end",
            "    end",
            "    attr_reader :typecode",
            "    def check_typecode(v)",
            "      if TYPECODE.include?(v)",
            "        return true",
            "      else",
            "        raise InvalidComponentError,",
            "          \"bad typecode(expected #{TYPECODE.join(', ')}): #{v}\"",
            "      end",
            "    end",
            "    private :check_typecode",
            "    def set_typecode(v)",
            "      @typecode = v",
            "    end",
            "    protected :set_typecode",
            "    def typecode=(typecode)",
            "      check_typecode(typecode)",
            "      set_typecode(typecode)",
            "      typecode",
            "    end",
            "    def merge(oth) # :nodoc:",
            "      tmp = super(oth)",
            "      if self != tmp",
            "        tmp.set_typecode(oth.typecode)",
            "      end",
            "      return tmp",
            "    end",
            "    def to_s",
            "      save_path = nil",
            "      if @typecode",
            "        save_path = @path",
            "        @path = @path + TYPECODE_PREFIX + @typecode",
            "      end",
            "      str = super",
            "      if @typecode",
            "        @path = save_path",
            "      end",
            "      return str",
            "    end",
            "  end",
            "  @@schemes['FTP'] = FTP",
            "# = uri/generic.rb",
            "# Author:: Akira Yamada <akira@ruby-lang.org>",
            "# License:: You can redistribute it and/or modify it under the same term as Ruby.",
            "# Revision:: $Id: generic.rb,v 1.13.2.1 2004/03/24 12:20:32 gsinclair Exp $",
            "require 'uri/common'",
            "module URI",
            "  # Base class for all URI classes.",
            "  class Generic",
            "    include URI",
            "    include REGEXP",
            "    DEFAULT_PORT = nil",
            "    #",
            "    # Returns default port",
            "    #",
            "    def self.default_port",
            "      self::DEFAULT_PORT",
            "    end",
            "    def default_port",
            "      self.class.default_port",
            "    end",
            "    COMPONENT = [",
            "      :scheme, ",
            "      :userinfo, :host, :port, :registry, ",
            "      :path, :opaque, ",
            "      :query, ",
            "      :fragment",
            "    ].freeze",
            "    #",
            "    # Components of the URI in the order.",
            "    #",
            "    def self.component",
            "      self::COMPONENT",
            "    end",
            "    USE_REGISTRY = false",
            "    #",
            "    # DOC: FIXME!",
            "    #",
            "    def self.use_registry",
            "      self::USE_REGISTRY",
            "    end",
            "    #",
            "    # == Synopsis",
            "    #",
            "    # See #new",
            "    #",
            "    # == Description",
            "    #",
            "    # At first, tries to create a new URI::Generic instance using",
            "    # URI::Generic::build. But, if exception URI::InvalidComponentError is raised, ",
            "    # then it URI::Escape.escape all URI components and tries again.",
            "    #",
            "    #",
            "    def self.build2(args)",
            "      begin",
            "        return self.build(args)",
            "      rescue InvalidComponentError",
            "        if args.kind_of?(Array)",
            "          return self.build(args.collect{|x| ",
            "            if x",
            "              URI.escape(x)",
            "            else",
            "              x",
            "            end",
            "          })",
            "        elsif args.kind_of?(Hash)",
            "          tmp = {}",
            "          args.each do |key, value|",
            "            tmp[key] = if value",
            "                URI.escape(value)",
            "              else",
            "                value",
            "              end",
            "          end",
            "          return self.build(tmp)",
            "        end",
            "      end",
            "    end",
            "    #",
            "    # == Synopsis",
            "    #",
            "    # See #new",
            "    #",
            "    # == Description",
            "    #",
            "    # Creates a new URI::Generic instance from components of URI::Generic",
            "    # with check.  Components are: scheme, userinfo, host, port, registry, path,",
            "    # opaque, query and fragment. You can provide arguments either by an Array or a Hash.",
            "    # See #new for hash keys to use or for order of array items.",
            "    #",
            "    def self.build(args)",
            "      if args.kind_of?(Array) &&",
            "          args.size == ::URI::Generic::COMPONENT.size",
            "        tmp = args",
            "      elsif args.kind_of?(Hash)",
            "        tmp = ::URI::Generic::COMPONENT.collect do |c|",
            "          if args.include?(c)",
            "            args[c]",
            "          else",
            "            nil",
            "          end",
            "        end",
            "      else",
            "        raise ArgumentError, ",
            "        \"expected Array of or Hash of components of #{self.class} (#{self.class.component.join(', ')})\"",
            "      end",
            "      tmp << true",
            "      return self.new(*tmp)",
            "    end",
            "    #",
            "    # == Args",
            "    #",
            "    # +scheme+::",
            "    #   Protocol scheme, i.e. 'http','ftp','mailto' and so on.",
            "    # +userinfo+::",
            "    #   User name and password, i.e. 'sdmitry:bla'",
            "    # +host+::",
            "    #   Server host name",
            "    # +port+::",
            "    #   Server port",
            "    # +registry+::",
            "    #   DOC: FIXME!",
            "    # +path+::",
            "    #   Path on server",
            "    # +opaque+::",
            "    #   DOC: FIXME!",
            "    # +query+::",
            "    #   Query data",
            "    # +fragment+::",
            "    #   A part of URI after '#' sign",
            "    # +arg_check+::",
            "    #   Check arguments [false by default]",
            "    #",
            "    # == Description",
            "    #",
            "    # Creates a new URI::Generic instance from ``generic'' components without check.",
            "    #",
            "    def initialize(scheme, ",
            "                   userinfo, host, port, registry, ",
            "                   path, opaque, ",
            "                   query, ",
            "                   fragment,",
            "                   arg_check = false)",
            "      @scheme = nil",
            "      @user = nil",
            "      @password = nil",
            "      @host = nil",
            "      @port = nil",
            "      @path = nil",
            "      @query = nil",
            "      @opaque = nil",
            "      @registry = nil",
            "      @fragment = nil",
            "      if arg_check",
            "        self.scheme = scheme",
            "        self.userinfo = userinfo",
            "        self.host = host",
            "        self.port = port",
            "        self.path = path",
            "        self.query = query",
            "        self.opaque = opaque",
            "        self.registry = registry",
            "        self.fragment = fragment",
            "      else",
            "        self.set_scheme(scheme)",
            "        self.set_userinfo(userinfo)",
            "        self.set_host(host)",
            "        self.set_port(port)",
            "        self.set_path(path)",
            "        self.set_query(query)",
            "        self.set_opaque(opaque)",
            "        self.set_registry(registry)",
            "        self.set_fragment(fragment)",
            "      end",
            "      if @registry && !self.class.use_registry",
            "        raise InvalidURIError, ",
            "          \"the scheme #{@scheme} does not accept registry part: #{@registry} (or bad hostname?)\"",
            "      end",
            "      ",
            "      @scheme.freeze if @scheme",
            "      self.set_path('') if !@path && !@opaque # (see RFC2396 Section 5.2)",
            "      self.set_port(self.default_port) if self.default_port && !@port",
            "    end",
            "    attr_reader :scheme",
            "    attr_reader :host",
            "    attr_reader :port",
            "    attr_reader :registry",
            "    attr_reader :path",
            "    attr_reader :query",
            "    attr_reader :opaque",
            "    attr_reader :fragment",
            "    # replace self by other URI object",
            "    def replace!(oth)",
            "      if self.class != oth.class",
            "        raise ArgumentError, \"expected #{self.class} object\"",
            "      end",
            "      component.each do |c|",
            "        self.__send__(\"#{c}=\", oth.__send__(c))",
            "      end",
            "    end",
            "    private :replace!",
            "    def component",
            "      self.class.component",
            "    end",
            "    def check_scheme(v)",
            "      if v && SCHEME !~ v",
            "        raise InvalidComponentError,",
            "          \"bad component(expected scheme component): #{v}\"",
            "      end",
            "      return true",
            "    end",
            "    private :check_scheme",
            "    def set_scheme(v)",
            "      @scheme = v",
            "    end",
            "    protected :set_scheme",
            "    def scheme=(v)",
            "      check_scheme(v)",
            "      set_scheme(v)",
            "      v",
            "    end",
            "    def check_userinfo(user, password = nil)",
            "      if !password",
            "        user, password = split_userinfo(user)",
            "      end",
            "      check_user(user)",
            "      check_password(password, user)",
            "      return true",
            "    end",
            "    private :check_userinfo",
            "    def check_user(v)",
            "      if @registry || @opaque",
            "        raise InvalidURIError, ",
            "          \"can not set user with registry or opaque\"",
            "      end",
            "      return v unless v",
            "      if USERINFO !~ v",
            "        raise InvalidComponentError,",
            "          \"bad component(expected userinfo component or user component): #{v}\"",
            "      end",
            "      return true",
            "    end",
            "    private :check_user",
            "    def check_password(v, user = @user)",
            "      if @registry || @opaque",
            "        raise InvalidURIError, ",
            "          \"can not set password with registry or opaque\"",
            "      end",
            "      return v unless v",
            "      if !user",
            "        raise InvalidURIError,",
            "          \"password component depends user component\"",
            "      end",
            "      if USERINFO !~ v",
            "        raise InvalidComponentError,",
            "          \"bad component(expected user component): #{v}\"",
            "      end",
            "      return true",
            "    end",
            "    private :check_password",
            "    #",
            "    # Sets userinfo, argument is string like 'name:pass'",
            "    #",
            "    def userinfo=(userinfo)",
            "      if userinfo.nil?",
            "        return nil",
            "      end",
            "      check_userinfo(*userinfo)",
            "      set_userinfo(*userinfo)",
            "      userinfo",
            "    end",
            "    def user=(user)",
            "      check_user(user)",
            "      set_user(user)",
            "      user",
            "    end",
            "    ",
            "    def password=(password)",
            "      check_password(password)",
            "      set_password(password)",
            "      password",
            "    end",
            "    def set_userinfo(user, password = nil)",
            "      unless password ",
            "        user, password = split_userinfo(user)",
            "      end",
            "      @user     = user",
            "      @password = password if password",
            "      [@user, @password]",
            "    end",
            "    protected :set_userinfo",
            "    def set_user(v)",
            "      set_userinfo(v, @password)",
            "      v",
            "    end",
            "    protected :set_user",
            "    def set_password(v)",
            "      set_userinfo(@user, v)",
            "      v",
            "    end",
            "    protected :set_password",
            "    def split_userinfo(ui)",
            "      return nil, nil unless ui",
            "      tmp = ui.index(':')",
            "      if tmp",
            "        user     = ui[0..tmp - 1]",
            "        password = ui[tmp + 1..-1]",
            "      else",
            "        user     = ui",
            "        password = nil",
            "      end",
            "      return user, password",
            "    end",
            "    private :split_userinfo",
            "    def escape_userpass(v)",
            "      v = URI.escape(v, /[@:\\/]/o) # RFC 1738 section 3.1 #/",
            "    end",
            "    private :escape_userpass",
            "    def userinfo",
            "      if !@password",
            "        @user",
            "      else",
            "        @user + ':' + @password",
            "      end",
            "    end",
            "    def user",
            "      @user",
            "    end",
            "    def password",
            "      @password",
            "    end",
            "    def check_host(v)",
            "      return v unless v",
            "      if @registry || @opaque",
            "        raise InvalidURIError, ",
            "          \"can not set host with registry or opaque\"",
            "      elsif HOST !~ v",
            "        raise InvalidComponentError,",
            "          \"bad component(expected host component): #{v}\"",
            "      end",
            "      return true",
            "    end",
            "    private :check_host",
            "    def set_host(v)",
            "      @host = v",
            "    end",
            "    protected :set_host",
            "    def host=(v)",
            "      check_host(v)",
            "      set_host(v)",
            "      v",
            "    end",
            "    def check_port(v)",
            "      return v unless v",
            "      if @registry || @opaque",
            "        raise InvalidURIError, ",
            "          \"can not set port with registry or opaque\"",
            "      elsif !v.kind_of?(Fixnum) && PORT !~ v",
            "        raise InvalidComponentError,",
            "          \"bad component(expected port component): #{v}\"",
            "      end",
            "      return true",
            "    end",
            "    private :check_port",
            "    def set_port(v)",
            "      unless !v || v.kind_of?(Fixnum)",
            "        if v.empty?",
            "          v = nil",
            "        else",
            "          v = v.to_i",
            "        end",
            "      end",
            "      @port = v",
            "    end",
            "    protected :set_port",
            "    def port=(v)",
            "      check_port(v)",
            "      set_port(v)",
            "      port",
            "    end",
            "    def check_registry(v)",
            "      return v unless v",
            "      # raise if both server and registry are not nil, because:",
            "      # authority     = server | reg_name",
            "      # server        = [ [ userinfo \"@\" ] hostport ]",
            "      if @host || @port || @user # userinfo = @user + ':' + @password",
            "        raise InvalidURIError, ",
            "          \"can not set registry with host, port, or userinfo\"",
            "      elsif v && REGISTRY !~ v",
            "        raise InvalidComponentError,",
            "          \"bad component(expected registry component): #{v}\"",
            "      end",
            "      return true",
            "    end",
            "    private :check_registry",
            "    def set_registry(v)",
            "      @registry = v",
            "    end",
            "    protected :set_registry",
            "    def registry=(v)",
            "      check_registry(v)",
            "      set_registry(v)",
            "      v",
            "    end",
            "    def check_path(v)",
            "      # raise if both hier and opaque are not nil, because:",
            "      # absoluteURI   = scheme \":\" ( hier_part | opaque_part )",
            "      # hier_part     = ( net_path | abs_path ) [ \"?\" query ]",
            "      if v && @opaque",
            "        raise InvalidURIError, ",
            "          \"path conflicts with opaque\"",
            "      end",
            "      if @scheme",
            "        if v && v != '' && ABS_PATH !~ v",
            "          raise InvalidComponentError, ",
            "            \"bad component(expected absolute path component): #{v}\"",
            "        end",
            "      else",
            "        if v && v != '' && ABS_PATH !~ v && REL_PATH !~ v",
            "          raise InvalidComponentError, ",
            "            \"bad component(expected relative path component): #{v}\"",
            "        end",
            "      end",
            "      return true",
            "    end",
            "    private :check_path",
            "    def set_path(v)",
            "      @path = v",
            "    end",
            "    protected :set_path",
            "    def path=(v)",
            "      check_path(v)",
            "      set_path(v)",
            "      v",
            "    end",
            "    def check_query(v)",
            "      return v unless v",
            "      # raise if both hier and opaque are not nil, because:",
            "      # absoluteURI   = scheme \":\" ( hier_part | opaque_part )",
            "      # hier_part     = ( net_path | abs_path ) [ \"?\" query ]",
            "      if @opaque",
            "        raise InvalidURIError, ",
            "          \"query conflicts with opaque\"",
            "      end",
            "      if v && v != '' && QUERY !~ v",
            "          raise InvalidComponentError, ",
            "            \"bad component(expected query component): #{v}\"",
            "        end",
            "      return true",
            "    end",
            "    private :check_query",
            "    def set_query(v)",
            "      @query = v",
            "    end",
            "    protected :set_query",
            "    def query=(v)",
            "      check_query(v)",
            "      set_query(v)",
            "      v",
            "    end",
            "    def check_opaque(v)",
            "      return v unless v",
            "      # raise if both hier and opaque are not nil, because:",
            "      # absoluteURI   = scheme \":\" ( hier_part | opaque_part )",
            "      # hier_part     = ( net_path | abs_path ) [ \"?\" query ]",
            "      if @host || @port || @user || @path  # userinfo = @user + ':' + @password",
            "        raise InvalidURIError, ",
            "          \"can not set opaque with host, port, userinfo or path\"",
            "      elsif v && OPAQUE !~ v",
            "        raise InvalidComponentError,",
            "          \"bad component(expected opaque component): #{v}\"",
            "      end",
            "      return true",
            "    end",
            "    private :check_opaque",
            "    def set_opaque(v)",
            "      @opaque = v",
            "    end",
            "    protected :set_opaque",
            "    def opaque=(v)",
            "      check_opaque(v)",
            "      set_opaque(v)",
            "      v",
            "    end",
            "    def check_fragment(v)",
            "      return v unless v",
            "      if v && v != '' && FRAGMENT !~ v",
            "        raise InvalidComponentError, ",
            "          \"bad component(expected fragment component): #{v}\"",
            "      end",
            "      return true",
            "    end",
            "    private :check_fragment",
            "    def set_fragment(v)",
            "      @fragment = v",
            "    end",
            "    protected :set_fragment",
            "    def fragment=(v)",
            "      check_fragment(v)",
            "      set_fragment(v)",
            "      v",
            "    end",
            "    #",
            "    # Checks if URI has a path",
            "    #",
            "    def hierarchical?",
            "      if @path",
            "        true",
            "      else",
            "        false",
            "      end",
            "    end",
            "    #",
            "    # Checks if URI is an absolute one",
            "    #",
            "    def absolute?",
            "      if @scheme",
            "        true",
            "      else",
            "        false",
            "      end",
            "    end",
            "    alias absolute absolute?",
            "    #",
            "    # Checks if URI is relative",
            "    #",
            "    def relative?",
            "      !absolute?",
            "    end",
            "    def split_path(path)",
            "      path.split(%r{/+}, -1)",
            "    end",
            "    private :split_path",
            "    def merge_path(base, rel)",
            "      # RFC2396, Section 5.2, 5)",
            "      if rel[0] == ?/ #/",
            "        # RFC2396, Section 5.2, 5)",
            "        return rel",
            "      else",
            "        # RFC2396, Section 5.2, 6)",
            "        base_path = split_path(base)",
            "        rel_path  = split_path(rel)",
            "        if base_path.empty?",
            "          base_path = [''] # XXX",
            "        end",
            "        # RFC2396, Section 5.2, 6), a)",
            "        base_path.pop unless base_path.size == 1",
            "        # RFC2396, Section 5.2, 6), c)",
            "         # RFC2396, Section 5.2, 6), d)",
            "        rel_path.push('') if rel_path.last == '.'",
            "        rel_path.delete('.')",
            "        # RFC2396, Section 5.2, 6), e)",
            "        tmp = []",
            "        rel_path.each do |x|",
            "          if x == '..' &&",
            "              !(tmp.empty? || tmp.last == '..')",
            "            tmp.pop",
            "          else",
            "            tmp << x",
            "          end",
            "        end",
            "        add_trailer_slash = true",
            "        while x = tmp.shift",
            "          if x == '..' && base_path.size > 1",
            "            # RFC2396, Section 4",
            "            # a .. or . in an absolute path has no special meaning",
            "            base_path.pop",
            "          else",
            "            # if x == '..'",
            "            #   valid absolute (but abnormal) path \"/../...\"",
            "            # else",
            "            #   valid absolute path",
            "            # end",
            "            base_path << x",
            "            tmp.each {|t| base_path << t}",
            "            add_trailer_slash = false",
            "            break",
            "          end",
            "        end",
            "        base_path.push('') if add_trailer_slash",
            "        return base_path.join('/')",
            "      end",
            "    end",
            "    private :merge_path",
            "    #",
            "    # == Args",
            "    #",
            "    # +oth+::",
            "    #    URI or String",
            "    #",
            "    # == Description",
            "    #",
            "    # Destructive form of #merge",
            "    #",
            "    # == Usage",
            "    #",
            "    #   require 'uri'",
            "    #",
            "    #   uri = URI.parse(\"http://my.rubysite.com\")",
            "    #   uri.merge!(\"/main.rbx?page=1\")",
            "    #   p uri",
            "    #   # =>  #<URI::HTTP:0x2021f3b0 URL:http://my.rubysite.com/main.rbx?page=1>",
            "    #",
            "    def merge!(oth)",
            "      t = merge(oth)",
            "      if self == t",
            "        nil",
            "      else",
            "        replace!(t)",
            "        self",
            "      end",
            "    end",
            "    #",
            "    # == Args",
            "    #",
            "    # +oth+::",
            "    #    URI or String",
            "    #",
            "    # == Description",
            "    #",
            "    # Merges two URI's.",
            "    #",
            "    # == Usage",
            "    #",
            "    #   require 'uri'",
            "    #",
            "    #   uri = URI.parse(\"http://my.rubysite.com\")",
            "    #   p uri.merge(\"/main.rbx?page=1\")",
            "    #   # =>  #<URI::HTTP:0x2021f3b0 URL:http://my.rubysite.com/main.rbx?page=1>",
            "    #",
            "    def merge(oth)",
            "      base, rel = merge0(oth)",
            "      if base == rel",
            "        return base",
            "      end",
            "      authority = rel.userinfo || rel.host || rel.port",
            "      # RFC2396, Section 5.2, 2)",
            "      if rel.path.empty? && !authority && !rel.query",
            "        base.set_fragment(rel.fragment) if rel.fragment",
            "        return base",
            "      end",
            "      base.set_query(nil)",
            "      base.set_fragment(nil)",
            "      # RFC2396, Section 5.2, 4)",
            "      if !authority",
            "        base.set_path(merge_path(base.path, rel.path))",
            "      else",
            "        # RFC2396, Section 5.2, 4)",
            "        base.set_path(rel.path)",
            "      end",
            "      # RFC2396, Section 5.2, 7)",
            "      base.set_userinfo(rel.userinfo) if rel.userinfo",
            "      base.set_host(rel.host)         if rel.host",
            "      base.set_port(rel.port)         if rel.port",
            "      base.set_query(rel.query)       if rel.query",
            "      base.set_fragment(rel.fragment) if rel.fragment",
            "      return base",
            "    end # merge",
            "    alias + merge",
            "    # return base and rel.",
            "    # you can modify `base', but can not `rel'.",
            "    def merge0(oth)",
            "      case oth",
            "      when Generic",
            "      when String",
            "        oth = URI.parse(oth)",
            "      else",
            "        raise ArgumentError,",
            "          \"bad argument(expected URI object or URI string)\"",
            "      end",
            "      if self.relative? && oth.relative?",
            "        raise BadURIError, ",
            "          \"both URI are relative\"",
            "      end",
            "      if self.absolute? && oth.absolute?",
            "        #raise BadURIError, ",
            "        #  \"both URI are absolute\"",
            "        # hmm... should return oth for usability?",
            "        return oth, oth",
            "      end",
            "      if !self.hierarchical?",
            "        raise BadURIError, ",
            "          \"not hierarchical URI: #{self}\"",
            "      elsif !oth.hierarchical?",
            "        raise BadURIError, ",
            "          \"not hierarchical URI: #{oth}\"",
            "      end",
            "      if self.absolute?",
            "        return self.dup, oth",
            "      else",
            "        return oth, oth",
            "      end",
            "    end",
            "    private :merge0",
            "    def route_from_path(src, dst)",
            "      # RFC2396, Section 4.2",
            "      return '' if src == dst",
            "      src_path = split_path(src)",
            "      dst_path = split_path(dst)",
            "      # hmm... dst has abnormal absolute path, ",
            "      # like \"/./\", \"/../\", \"/x/../\", ...",
            "      if dst_path.include?('..') ||",
            "          dst_path.include?('.')",
            "        return dst.dup",
            "      end",
            "      src_path.pop",
            "      # discard same parts",
            "      while dst_path.first == src_path.first",
            "        break if dst_path.empty?",
            "        src_path.shift",
            "        dst_path.shift",
            "      end",
            "      tmp = dst_path.join('/')",
            "      # calculate",
            "      if src_path.empty?",
            "        if tmp.empty?",
            "          return './'",
            "        elsif dst_path.first.include?(':') # (see RFC2396 Section 5)",
            "          return './' + tmp",
            "        else",
            "          return tmp",
            "        end",
            "      end",
            "      return '../' * src_path.size + tmp",
            "    end",
            "    private :route_from_path",
            "    def route_from0(oth)",
            "      case oth",
            "      when Generic",
            "      when String",
            "        oth = URI.parse(oth)",
            "      else",
            "        raise ArgumentError,",
            "          \"bad argument(expected URI object or URI string)\"",
            "      end",
            "      if self.relative?",
            "        raise BadURIError, ",
            "          \"relative URI: #{self}\"",
            "      end",
            "      if oth.relative?",
            "        raise BadURIError, ",
            "          \"relative URI: #{oth}\"",
            "      end",
            "      if !self.hierarchical? || !oth.hierarchical?",
            "        return self, self.dup",
            "      end",
            "      if self.scheme != oth.scheme",
            "        return oth, oth.dup",
            "      end",
            "      rel = URI::Generic.new(nil, # it is relative URI",
            "                             self.userinfo, self.host, self.port, ",
            "                             self.registry, self.path, self.opaque,",
            "                             self.query, self.fragment)",
            "      if rel.userinfo != oth.userinfo ||",
            "          rel.host.to_s.downcase != oth.host.to_s.downcase ||",
            "          rel.port != oth.port",
            "        rel.set_port(nil) if rel.port == oth.default_port",
            "        return rel, rel",
            "      end",
            "      rel.set_userinfo(nil)",
            "      rel.set_host(nil)",
            "      rel.set_port(nil)",
            "      if rel.path == oth.path",
            "        rel.set_path('')",
            "        rel.set_query(nil) if rel.query == oth.query",
            "        return rel, rel",
            "      end",
            "      # you can modify `rel', but can not `oth'.",
            "      return oth, rel",
            "    end",
            "    private :route_from0",
            "    #",
            "    # == Args",
            "    #",
            "    # +oth+::",
            "    #    URI or String",
            "    #",
            "    # == Description",
            "    #",
            "    # Calculates relative path from oth to self",
            "    #",
            "    # == Usage",
            "    #",
            "    #   require 'uri'",
            "    #",
            "    #   uri = URI.parse('http://my.rubysite.com/main.rbx?page=1')",
            "    #   p uri.route_from('http://my.rubysite.com')",
            "    #   #=> #<URI::Generic:0x20218858 URL:/main.rbx?page=1>",
            "    #",
            "    def route_from(oth)",
            "      # you can modify `rel', but can not `oth'.",
            "      oth, rel = route_from0(oth)",
            "      if oth == rel",
            "        return rel",
            "      end",
            "      rel.set_path(route_from_path(oth.path, self.path))",
            "      if rel.path == './' && self.query",
            "        # \"./?foo\" -> \"?foo\"",
            "        rel.set_path('')",
            "      end",
            "      return rel",
            "    end",
            "    alias - route_from",
            "    #",
            "    # == Args",
            "    #",
            "    # +oth+::",
            "    #    URI or String",
            "    #",
            "    # == Description",
            "    #",
            "    # Calculates relative path to oth from self",
            "    #",
            "    # == Usage",
            "    #",
            "    #   require 'uri'",
            "    #",
            "    #   uri = URI.parse('http://my.rubysite.com')",
            "    #   p uri.route_to('http://my.rubysite.com/main.rbx?page=1')",
            "    #   #=> #<URI::Generic:0x2020c2f6 URL:/main.rbx?page=1>",
            "    #    ",
            "    def route_to(oth)",
            "      case oth",
            "      when Generic",
            "      when String",
            "        oth = URI.parse(oth)",
            "      else",
            "        raise ArgumentError,",
            "          \"bad argument(expected URI object or URI string)\"",
            "      end",
            "      oth.route_from(self)",
            "    end",
            "    #",
            "    # Returns normalized URI",
            "    # ",
            "    def normalize",
            "      uri = dup",
            "      uri.normalize!",
            "      uri",
            "    end",
            "    #",
            "    # Destructive version of #normalize",
            "    #",
            "    def normalize!",
            "      if path && path == ''",
            "        set_path('/')",
            "      end",
            "      if host && host != host.downcase",
            "        set_host(self.host.downcase)",
            "      end        ",
            "    end",
            "    def path_query",
            "      str = @path",
            "      if @query",
            "        str += '?' + @query",
            "      end",
            "      str",
            "    end",
            "    private :path_query",
            "    #",
            "    # Constructs String from URI",
            "    # ",
            "    def to_s",
            "      str = ''",
            "      if @scheme",
            "        str << @scheme",
            "        str << ':'",
            "      end",
            "      if @opaque",
            "        str << @opaque",
            "      else",
            "        if @registry",
            "          str << @registry",
            "        else",
            "          if @host",
            "            str << '//'",
            "          end",
            "          if self.userinfo",
            "            str << self.userinfo",
            "            str << '@'",
            "          end",
            "          if @host",
            "            str << @host",
            "          end",
            "          if @port && @port != self.default_port",
            "            str << ':'",
            "            str << @port.to_s",
            "          end",
            "        end",
            "        str << path_query",
            "      end",
            "      if @fragment",
            "        str << '#'",
            "        str << @fragment",
            "      end",
            "      str",
            "    end",
            "    #",
            "    # Compares to URI's",
            "    #",
            "    def ==(oth)",
            "      if self.class == oth.class",
            "        self.normalize.component_ary == oth.normalize.component_ary",
            "      else",
            "        false",
            "      end",
            "    end",
            "=begin",
            "--- URI::Generic#===(oth)",
            "=end",
            "#    def ===(oth)",
            "#      raise NotImplementedError",
            "#    end",
            "=begin",
            "=end",
            "    def component_ary",
            "      component.collect do |x|",
            "        self.send(x)",
            "      end",
            "    end",
            "    protected :component_ary",
            "    # == Args",
            "    #",
            "    # +components+::",
            "    #    Multiple Symbol arguments defined in URI::HTTP",
            "    #",
            "    # == Description",
            "    #",
            "    # Selects specified components from URI",
            "    #",
            "    # == Usage",
            "    #",
            "    #   require 'uri'",
            "    #",
            "    #   uri = URI.parse('http://myuser:mypass@my.rubysite.com/test.rbx')",
            "    #   p uri.select(:userinfo, :host, :path)",
            "    #   # => [\"myuser:mypass\", \"my.rubysite.com\", \"/test.rbx\"]",
            "    #",
            "    def select(*components)",
            "      components.collect do |c|",
            "        if component.include?(c)",
            "          self.send(c)",
            "        else",
            "          raise ArgumentError, ",
            "            \"expected of components of #{self.class} (#{self.class.component.join(', ')})\"",
            "        end",
            "      end",
            "    end",
            "    def inspect",
            "      sprintf(\"#<%s:0x%x URL:%s>\", self.class.to_s, self.object_id, self.to_s)",
            "    end",
            "    def coerce(oth)",
            "      case oth",
            "      when String",
            "        oth = URI.parse(oth)",
            "      else",
            "        super",
            "      end",
            "      return oth, self",
            "    end",
            "  end",
            "# = uri/http.rb",
            "# Author:: Akira Yamada <akira@ruby-lang.org>",
            "# License:: You can redistribute it and/or modify it under the same term as Ruby.",
            "# Revision:: $Id: http.rb,v 1.2.2.1 2004/03/24 12:20:32 gsinclair Exp $",
            "require 'uri/generic'",
            "module URI",
            "  # RFC1738 section 3.3.",
            "  class HTTP < Generic",
            "    DEFAULT_PORT = 80",
            "    COMPONENT = [",
            "      :scheme, ",
            "      :userinfo, :host, :port, ",
            "      :path, ",
            "      :query, ",
            "      :fragment",
            "    ].freeze",
            "    #",
            "    # == Description",
            "    #",
            "    # Create a new URI::HTTP object from components of URI::HTTP with",
            "    # check.  It is scheme, userinfo, host, port, path, query and",
            "    # fragment. It provided by an Array of a Hash.",
            "    #",
            "    def self.build(args)",
            "      tmp = Util::make_components_hash(self, args)",
            "      return super(tmp)",
            "    end",
            "    #",
            "    # == Description",
            "    #",
            "    # Create a new URI::HTTP object from ``generic'' components with no",
            "    # check.",
            "    #",
            "    def initialize(*arg)",
            "      super(*arg)",
            "    end",
            "    #",
            "    # == Description",
            "    #",
            "    # Returns: path + '?' + query",
            "    #",
            "    def request_uri",
            "      r = path_query",
            "      if r[0] != ?/",
            "        r = '/' + r",
            "      end",
            "      r",
            "    end",
            "  end",
            "  @@schemes['HTTP'] = HTTP",
            "# = uri/https.rb",
            "# Author:: Akira Yamada <akira@ruby-lang.org>",
            "# License:: You can redistribute it and/or modify it under the same term as Ruby.",
            "# Revision:: $Id: https.rb,v 1.2.2.1 2004/03/24 12:20:32 gsinclair Exp $",
            "require 'uri/http'",
            "module URI",
            "  class HTTPS < HTTP",
            "    DEFAULT_PORT = 443",
            "  end",
            "  @@schemes['HTTPS'] = HTTPS",
            "# = uri/ldap.rb",
            "# Author:: ",
            "#  Takaaki Tateishi <ttate@jaist.ac.jp>",
            "#  Akira Yamada <akira@ruby-lang.org>",
            "# License:: ",
            "#   URI::LDAP is copyrighted free software by Takaaki Tateishi and Akira Yamada.",
            "#   You can redistribute it and/or modify it under the same term as Ruby.",
            "# Revision:: $Id: ldap.rb,v 1.3.2.1 2004/03/24 12:20:32 gsinclair Exp $",
            "require 'uri/generic'",
            "module URI",
            "  # LDAP URI SCHEMA (described in RFC2255)",
            "  # ldap://<host>/<dn>[?<attrs>[?<scope>[?<filter>[?<extensions>]]]]",
            "  class LDAP < Generic",
            "    DEFAULT_PORT = 389",
            "    ",
            "    COMPONENT = [",
            "      :scheme,",
            "      :host, :port,",
            "      :dn,",
            "      :attributes,",
            "      :scope,",
            "      :filter,",
            "      :extensions,",
            "    ].freeze",
            "    SCOPE = [",
            "      SCOPE_ONE = 'one',",
            "      SCOPE_SUB = 'sub',",
            "      SCOPE_BASE = 'base',",
            "    ].freeze",
            "    def self.build(args)",
            "      tmp = Util::make_components_hash(self, args)",
            "      if tmp[:dn]",
            "        tmp[:path] = tmp[:dn]",
            "      end",
            "      query = []",
            "      [:extensions, :filter, :scope, :attributes].collect do |x|",
            "        next if !tmp[x] && query.size == 0",
            "        query.unshift(tmp[x])",
            "      end",
            "      tmp[:query] = query.join('?')",
            "      return super(tmp)",
            "    end",
            "    def initialize(*arg)",
            "      super(*arg)",
            "      if @fragment",
            "        raise InvalidURIError, 'bad LDAP URL'",
            "      end",
            "      parse_dn",
            "      parse_query",
            "    end",
            "    def parse_dn",
            "      @dn = @path[1..-1]",
            "    end",
            "    private :parse_dn",
            "    def parse_query",
            "      @attributes = nil",
            "      @scope      = nil",
            "      @filter     = nil",
            "      @extensions = nil",
            "      if @query",
            "        attrs, scope, filter, extensions = @query.split('?')",
            "        @attributes = attrs if attrs && attrs.size > 0",
            "        @scope      = scope if scope && scope.size > 0",
            "        @filter     = filter if filter && filter.size > 0",
            "        @extensions = extensions if extensions && extensions.size > 0",
            "      end",
            "    end",
            "    private :parse_query",
            "    def build_path_query",
            "      @path = '/' + @dn",
            "      query = []",
            "      [@extensions, @filter, @scope, @attributes].each do |x|",
            "        next if !x && query.size == 0",
            "        query.unshift(x)",
            "      end",
            "      @query = query.join('?')",
            "    end",
            "    private :build_path_query",
            "    def dn",
            "      @dn",
            "    end",
            "    def set_dn(val)",
            "      @dn = val",
            "      build_path_query",
            "      @dn",
            "    end",
            "    protected :set_dn",
            "    def dn=(val)",
            "      set_dn(val)",
            "      val",
            "    end",
            "    def attributes",
            "      @attributes",
            "    end",
            "    def set_attributes(val)",
            "      @attributes = val",
            "      build_path_query",
            "      @attributes",
            "    end",
            "    protected :set_attributes",
            "    def attributes=(val)",
            "      set_attributes(val)",
            "      val",
            "    end",
            "    def scope",
            "      @scope",
            "    end",
            "    def set_scope(val)",
            "      @scope = val",
            "      build_path_query",
            "      @scope",
            "    end",
            "    protected :set_scope",
            "    def scope=(val)",
            "      set_scope(val)",
            "      val",
            "    end",
            "    def filter",
            "      @filter",
            "    end",
            "    def set_filter(val)",
            "      @filter = val",
            "      build_path_query",
            "      @filter",
            "    end",
            "    protected :set_filter",
            "    def filter=(val)",
            "      set_filter(val)",
            "      val",
            "    end",
            "    def extensions",
            "      @extensions",
            "    end",
            "    def set_extensions(val)",
            "      @extensions = val",
            "      build_path_query",
            "      @extensions",
            "    end",
            "    protected :set_extensions",
            "    def extensions=(val)",
            "      set_extensions(val)",
            "      val",
            "    end",
            "  end",
            "  def hierarchical?",
            "    false",
            "  end",
            "  @@schemes['LDAP'] = LDAP",
            "# = uri/mailto.rb",
            "# Author:: Akira Yamada <akira@ruby-lang.org>",
            "# License:: You can redistribute it and/or modify it under the same term as Ruby.",
            "# Revision:: $Id: mailto.rb,v 1.6.2.2 2004/05/13 04:03:33 akira Exp $",
            "require 'uri/generic'",
            "module URI",
            "  # RFC2368, The mailto URL scheme",
            "  class MailTo < Generic",
            "    include REGEXP",
            "    DEFAULT_PORT = nil",
            "    COMPONENT = [ :scheme, :to, :headers ].freeze",
            "    # :stopdoc:",
            "    #  \"hname\" and \"hvalue\" are encodings of an RFC 822 header name and",
            "    #  value, respectively. As with \"to\", all URL reserved characters must",
            "    #  be encoded.",
            "    #",
            "    #  \"#mailbox\" is as specified in RFC 822 [RFC822]. This means that it",
            "    #  consists of zero or more comma-separated mail addresses, possibly",
            "    #  including \"phrase\" and \"comment\" components. Note that all URL",
            "    #  reserved characters in \"to\" must be encoded: in particular,",
            "    #  parentheses, commas, and the percent sign (\"%\"), which commonly occur",
            "    #  in the \"mailbox\" syntax.",
            "    #",
            "    #  Within mailto URLs, the characters \"?\", \"=\", \"&\" are reserved.",
            "    # hname      =  *urlc",
            "    # hvalue     =  *urlc",
            "    # header     =  hname \"=\" hvalue",
            "    HEADER_PATTERN = \"(?:[^?=&]*=[^?=&]*)\".freeze",
            "    HEADER_REGEXP  = Regexp.new(HEADER_PATTERN, 'N').freeze",
            "    # headers    =  \"?\" header *( \"&\" header )",
            "    # to         =  #mailbox",
            "    # mailtoURL  =  \"mailto:\" [ to ] [ headers ]",
            "    MAILBOX_PATTERN = \"(?:#{PATTERN::ESCAPED}|[^(),%?=&])\".freeze",
            "    MAILTO_REGEXP = Regexp.new(\" # :nodoc:",
            "      \\\\A",
            "      (#{MAILBOX_PATTERN}*?)                          (?# 1: to)",
            "      (?:",
            "        \\\\?",
            "        (#{HEADER_PATTERN}(?:\\\\&#{HEADER_PATTERN})*)  (?# 2: headers)",
            "      )?",
            "      (?:",
            "        \\\\#",
            "        (#{PATTERN::FRAGMENT})                        (?# 3: fragment)",
            "      )?",
            "      \\\\z",
            "    \", Regexp::EXTENDED, 'N').freeze",
            "    # :startdoc:",
            "    #",
            "    # == Description",
            "    #",
            "    # Creates a new URI::MailTo object from components of URI::MailTo",
            "    # with check.  It is to and headers. It provided by an Array of a",
            "    # Hash. You can provide headers as String like",
            "    # \"subject=subscribe&cc=addr\" or Array like [[\"subject\",",
            "    # \"subscribe\"], [\"cc\", \"addr\"]]",
            "    #",
            "    def self.build(args)",
            "      tmp = Util::make_components_hash(self, args)",
            "      if tmp[:to]",
            "        tmp[:opaque] = tmp[:to]",
            "      else",
            "        tmp[:opaque] = ''",
            "      end",
            "      if tmp[:headers]",
            "        tmp[:opaque] << '?'",
            "        if tmp[:headers].kind_of?(Array)",
            "          tmp[:opaque] << tmp[:headers].collect { |x|",
            "            if x.kind_of?(Array)",
            "              x[0] + '=' + x[1..-1].to_s",
            "            else",
            "              x.to_s",
            "            end",
            "          }.join('&')",
            "        elsif tmp[:headers].kind_of?(Hash)",
            "          tmp[:opaque] << tmp[:headers].collect { |h,v|",
            "            h + '=' + v",
            "          }.join('&')",
            "        else",
            "          tmp[:opaque] << tmp[:headers].to_s",
            "        end",
            "      end",
            "      return super(tmp)",
            "    end",
            "    #",
            "    # == Description",
            "    #",
            "    # Creates a new URI::MailTo object from ``generic'' components with",
            "    # no check. Because, this method is usually called from URI::parse",
            "    # and the method checks validity of each components.",
            "    #",
            "    def initialize(*arg)",
            "      super(*arg)",
            "      @to = nil",
            "      @headers = []",
            "      if MAILTO_REGEXP =~ @opaque",
            "         if arg[-1]",
            "          self.to = $1",
            "          self.headers = $2",
            "        else",
            "          set_to($1)",
            "          set_headers($2)",
            "        end",
            "      else",
            "        raise InvalidComponentError,",
            "          \"unrecognised opaque part for mailtoURL: #{@opaque}\"",
            "      end",
            "    end",
            "    attr_reader :to",
            "    attr_reader :headers",
            "    def check_to(v)",
            "      return true unless v",
            "      return true if v.size == 0",
            "      if OPAQUE !~ v || /\\A#{MAILBOX_PATTERN}*\\z/o !~ v",
            "        raise InvalidComponentError,",
            "          \"bad component(expected opaque component): #{v}\"",
            "      end",
            "      return true",
            "    end",
            "    private :check_to",
            "    def set_to(v)",
            "      @to = v",
            "    end",
            "    protected :set_to",
            "    def to=(v)",
            "      check_to(v)",
            "      set_to(v)",
            "      v",
            "    end",
            "    def check_headers(v)",
            "      return true unless v",
            "      return true if v.size == 0",
            "      if OPAQUE !~ v || ",
            "          /\\A(#{HEADER_PATTERN}(?:\\&#{HEADER_PATTERN})*)\\z/o !~ v",
            "        raise InvalidComponentError,",
            "          \"bad component(expected opaque component): #{v}\"",
            "      end",
            "      return true",
            "    end",
            "    private :check_headers",
            "    def set_headers(v)",
            "      @headers = []",
            "      if v",
            "        v.scan(HEADER_REGEXP) do |x|",
            "          @headers << x.split(/=/o, 2)",
            "        end",
            "      end",
            "    end",
            "    protected :set_headers",
            "    def headers=(v)",
            "      check_headers(v)",
            "      set_headers(v)",
            "      v",
            "    end",
            "    def to_s",
            "      @scheme + ':' + ",
            "        if @to ",
            "          @to",
            "        else",
            "          ''",
            "        end + ",
            "        if @headers.size > 0",
            "          '?' + @headers.collect{|x| x.join('=')}.join('&')",
            "        else",
            "          ''",
            "        end +",
            "        if @fragment",
            "          '#' + @fragment",
            "        else",
            "          ''",
            "        end",
            "    end",
            "    #",
            "    # == Usage",
            "    #   require 'uri'",
            "    #",
            "    #   uri = URI.parse(\"mailto:ruby-list@ruby-lang.org?Subject=subscribe&cc=myaddr\")",
            "    #   uri.to_mailtext",
            "    #   # => \"To: ruby-list@ruby-lang.org\\nSubject: subscribe\\nCc: myaddr\\n\\n\\n\"",
            "    #",
            "    def to_mailtext",
            "      to = URI::unescape(@to)",
            "      head = ''",
            "      body = ''",
            "      @headers.each do |x|",
            "        case x[0]",
            "        when 'body'",
            "          body = URI::unescape(x[1])",
            "        when 'to'",
            "          to << ', ' + URI::unescape(x[1])",
            "        else",
            "          head << URI::unescape(x[0]).capitalize + ': ' +",
            "            URI::unescape(x[1])  + \"\\n\"",
            "        end",
            "      end",
            "      return \"To: #{to}",
            "#{head}",
            "#{body}",
            "    end",
            "    alias to_rfc822text to_mailtext",
            "  end",
            "  @@schemes['MAILTO'] = MailTo",
            "require \"uri\"",
            "require \"net/http\"",
            "require \"net/ftp\"",
            "require \"timeout\"",
            "require \"zlib\"",
            "require \"stringio\"",
            "require \"web/request\"",
            "require \"web/response\"",
            "require \"web/escape\"",
            "require \"web/agent/cookiemanager\"",
            "require \"web/agent/passwordmanager\"",
            "module Web",
            "  class Agent",
            "    VERSION = \"0.1\"",
            "    def initialize",
            "      @req = Web::Request.new",
            "      @rsp = nil",
            "      @req.header['User-Agent']=\"NoraAgent/#{VERSION}\"",
            "      @req.header['Accept'] = '*/*'",
            "      @req.header['Accept-Language'] = 'ja,en,*'",
            "      @req.header['Accept-Encoding'] = 'gzip,deflate'",
            "      @req.header['Accept-Charset'] = '*'",
            "      @uri = nil",
            "      @timeout    = 180",
            "      @proxy_host = nil",
            "      @proxy_port = nil",
            "      @ftpproxy_host = nil",
            "      @ftpproxy_port = nil",
            "      @cookiemanager = nil",
            "      @passwordmanager = nil",
            "    end",
            "    attr_accessor :uri",
            "    attr_accessor :req, :rsp, :proxy_host, :proxy_port, :ftpproxy_host, :ftpproxy_port",
            "    attr_accessor :cookiemanager, :passwordmanager",
            "    ",
            "    def setup()",
            "      if uri = (ENV['http_proxy'] || ENV['HTTP_PROXY'])",
            "        uri=URI.parse(uri)",
            "        @proxy_host = uri.host",
            "        @proxy_port = uri.port",
            "      end",
            "      if uri = (ENV['ftp_proxy'] || ENV['FTP_PROXY'])",
            "        uri=URI.parse(uri)",
            "        @ftpproxy_host = uri.host",
            "        @ftpproxy_port = uri.port",
            "      end",
            "    end",
            "    ",
            "    def get(uri)",
            "      set_uri(uri)",
            "      @req.method = 'GET'",
            "      timeout(@timeout) {",
            "        catch(:exit) {",
            "          loop do",
            "            case @uri.scheme",
            "            when \"http\"",
            "              get_http",
            "            when \"https\"",
            "              get_https",
            "            when \"ftp\"",
            "              get_ftp",
            "            end",
            "          end",
            "        }",
            "      }",
            "    end",
            "    def head(uri)",
            "      set_uri(uri)",
            "      @req.method = 'HEAD'",
            "      timeout(@timeout) {",
            "        catch(:exit) {",
            "          loop do",
            "            case @uri.scheme",
            "            when \"http\"",
            "              head_http",
            "            when \"https\"",
            "              head_https",
            "            when \"ftp\"",
            "              raise \"not supported method\"",
            "            end",
            "          end",
            "        }",
            "      }",
            "    end",
            "    def post(uri)",
            "      set_uri(uri)",
            "      @req.method = 'POST'",
            "      timeout(@timeout) {",
            "        catch(:exit) {",
            "          case @uri.scheme",
            "          when \"http\"",
            "            post_http",
            "          when \"https\"",
            "            post_https",
            "          when \"ftp\"",
            "            raise \"not supported method\"",
            "          end",
            "          # post after redirect",
            "          @req.form.clear",
            "          loop do",
            "            case @uri.scheme",
            "            when \"http\"",
            "              get_http",
            "            when \"https\"",
            "              get_https",
            "            when \"ftp\"",
            "              raise \"not supported method\"",
            "            end",
            "          end",
            "        }",
            "      }",
            "    end",
            "    ",
            "    def get_http",
            "      path = @req.script_name",
            "      @req.query_encode",
            "      @req.form_encode",
            "      if @req.query_string && !@req.query_string.empty?",
            "        path = path + \"?\" + @req.query_string",
            "      end",
            "      Net::HTTP.start(@req.server_name, @req.server_port.to_i, @proxy_host, @proxy_port) {|http|",
            "        # Password",
            "        @passwordmanager.get(self) if @passwordmanager",
            "        # Cookie",
            "        @cookiemanager.get(@req) if @cookiemanager",
            "        hash = @req.header.to_hash",
            "        if values=@req.header['cookie',nil]",
            "          hash.delete 'cookie'",
            "          hash['cookie'] = values.join('; ')",
            "        end",
            "        response = http.get(path, @req.header.to_hash)",
            "        @rsp = Web::Response.new",
            "        case response",
            "        when Net::HTTPSuccess",
            "          rtry = false",
            "          @rsp.status = response.code.to_s",
            "          response.each {|key,value|",
            "            @rsp.header.add key,value",
            "          }",
            "          # Cookie",
            "          if set_cookies = @rsp.header['set-cookie',nil]",
            "            set_cookies.each {|set_cookie|",
            "              @rsp.cookies.parse(set_cookie, @req)",
            "            }",
            "            @cookiemanager.set(@req, @rsp) if @cookiemanager",
            "          end",
            "          #",
            "          @rsp.body = response.body",
            "          # gzip,deflate",
            "          case @rsp.header['content-encoding']",
            "          when /gzip/i",
            "            io = StringIO.new(@rsp.body)",
            "            @rsp.body = Zlib::GzipReader.new(io).read()",
            "          when /deflate/i",
            "            @rsp.body = Zlib::Inflate.inflate(@rsp.body)",
            "          end",
            "          # \u30ea\u30c0\u30a4\u30ec\u30af\u30c8\u5224\u5b9a",
            "          if refresh=@rsp.header['Refresh']",
            "            if refresh=~/\\A\\d;URL=\"?([^\"]+)\"?/      #\"",
            "              redirect_uri($1)",
            "              rtry = true",
            "            end",
            "          end",
            "          # <meta>",
            "          if @rsp.header['content-type']=~/text\\/html/",
            "            html = @rsp.body",
            "            html.gsub!(/<!--.*?--!>/,'')",
            "            if html=~/<meta\\s+http-equiv\\s*=\\s*\"?refresh\"?\\s*content\\s*=\\s*\"\\d\\s*;\\s*URL=([^\"'>]+)/i #'",
            "              redirect_uri($1)",
            "              rtry = true",
            "            end",
            "          end",
            "          unless rtry",
            "            throw :exit",
            "          end",
            "        when Net::HTTPNotModified",
            "          @rsp.status = response.code.to_s",
            "          response.each {|key,value|",
            "            @rsp.header.add key,value",
            "          }",
            "          @rsp.body = response.body",
            "          throw :exit",
            "        when Net::HTTPRedirection",
            "          redirect_uri(response['location'])",
            "        when Net::HTTPUnauthorized",
            "          if @passwordmanager",
            "            @rsp.status = response.code.to_s",
            "            response.each {|key,value|",
            "              @rsp.header.add key,value",
            "            }",
            "            @rsp.body = response.body",
            "            @passwordmanager.get(self)",
            "            throw :exit",
            "          else",
            "            @rsp.status = response.code.to_s",
            "            response.each {|key,value|",
            "              @rsp.header.add key,value",
            "            }",
            "            @rsp.body = response.body",
            "            throw :exit",
            "          end",
            "        else",
            "          @rsp.status = response.code.to_s",
            "          response.each {|key,value|",
            "            @rsp.header.add key,value",
            "          }",
            "          @rsp.body = response.body",
            "          throw :exit",
            "        end",
            "      } # HTTP",
            "    end",
            "    def head_http",
            "      path = @req.script_name",
            "      @req.query_encode",
            "      if @req.query_string && !@req.query_string.empty?",
            "        path = path + \"?\" + @req.query_string",
            "      end",
            "      http = Net::HTTP.start(@req.server_name, @req.server_port.to_i, @proxy_host, @proxy_port)",
            "      # Password",
            "      @passwordmanager.get(self) if @passwordmanager",
            "      # Cookie",
            "      @cookiemanager.get(@req) if @cookiemanager",
            "      hash = @req.header.to_hash",
            "      if values=@req.header['cookie',nil]",
            "        hash.delete 'cookie'",
            "        hash['cookie'] = values.join('; ')",
            "      end",
            "      #",
            "      response = http.head(path, hash)",
            "      @rsp = Web::Response.new",
            "      # \u30d8\u30c3\u30c0\u30bb\u30c3\u30c8",
            "      response.each {|key,value|",
            "        @rsp.header.add key,value",
            "      }",
            "      # Cookie",
            "      if set_cookies = @rsp.header['set-cookie',nil]",
            "        set_cookies.each {|set_cookie|",
            "          @rsp.cookies.parse(set_cookie, @req)",
            "        }",
            "        @cookiemanager.set(@req, @rsp) if @cookiemanager",
            "      end",
            "      case response",
            "      when Net::HTTPSuccess",
            "        rtry = false",
            "        @rsp.status = response.code.to_s",
            "        response.each {|key,value|",
            "          @rsp.header.add key,value",
            "        }",
            "        #",
            "        @rsp.body = response.body",
            "        # \u30ea\u30c0\u30a4\u30ec\u30af\u30c8\u5224\u5b9a",
            "        if refresh=@rsp.header['Refresh']",
            "          if refresh=~/\\A\\d;URL=\"?([^\"]+)\"?/      #\"",
            "            redirect_uri($1)",
            "            rtry = true",
            "          end",
            "        end",
            "        unless rtry",
            "          http.finish",
            "          throw :exit",
            "        end",
            "      when Net::HTTPRedirection",
            "        redirect_uri(response['location'])",
            "      else",
            "        @rsp.status = response.code.to_s",
            "        response.each {|key,value|",
            "          @rsp.header.add key,value",
            "        }",
            "        @rsp.body = response.body",
            "        http.finish",
            "        throw :exit",
            "      end",
            "      http.finish",
            "    end",
            "    def post_http",
            "      path = @req.script_name",
            "      @req.query_encode",
            "      @req.form_encode",
            "      if @req.query_string && !@req.query_string.empty?",
            "        path = path + \"?\" + @req.query_string",
            "      end",
            "      http = Net::HTTP.start(@req.server_name, @req.server_port.to_i, @proxy_host, @proxy_port)",
            "      # Password",
            "      @passwordmanager.get(self) if @passwordmanager",
            "      # Cookie",
            "      @cookiemanager.get(@req) if @cookiemanager",
            "      hash = @req.header.to_hash",
            "      if values=@req.header['cookie',nil]",
            "        hash.delete 'cookie'",
            "        hash['cookie'] = values.join('; ')",
            "      end",
            "      #",
            "      response = http.post(path, @req.body, hash)",
            "      @rsp = Web::Response.new",
            "      # \u30d8\u30c3\u30c0\u30bb\u30c3\u30c8",
            "      response.each {|key,value|",
            "        @rsp.header.add key,value",
            "      }",
            "      # Cookie",
            "      if set_cookies = @rsp.header['set-cookie',nil]",
            "        set_cookies.each {|set_cookie|",
            "          @rsp.cookies.parse(set_cookie, @req)",
            "        }",
            "        @cookiemanager.set(@req, @rsp) if @cookiemanager",
            "      end",
            "      ",
            "      case response",
            "      when Net::HTTPSuccess",
            "        rtry = false",
            "        @rsp.status = response.code.to_s",
            "        response.each {|key,value|",
            "          @rsp.header.add key,value",
            "        }",
            "        #",
            "        @rsp.body = response.body",
            "        # gzip,deflate",
            "        case @rsp.header['content-encoding']",
            "        when /gzip/i",
            "          io = StringIO.new(@rsp.body)",
            "          @rsp.body = Zlib::GzipReader.new(io).read()",
            "        when /deflate/i",
            "          @rsp.body = Zlib::Inflate.inflate(@rsp.body)",
            "        end",
            "        # \u30ea\u30c0\u30a4\u30ec\u30af\u30c8\u5224\u5b9a",
            "        if refresh=@rsp.header['Refresh']",
            "          if refresh=~/\\A\\d;URL=\"?([^\"]+)\"?/      #\"",
            "            redirect_uri($1)",
            "            rtry = true",
            "          end",
            "        end",
            "        # <meta>",
            "        if @rsp.header['content-type']=~/text\\/html/",
            "          html = @rsp.body",
            "          html.gsub!(/<!--.*?--!>/,'')",
            "          if html=~/<meta\\s+http-equiv\\s*=\\s*\"?refresh\"?\\s*content\\s*=\\s*\"\\dz\\s*;\\s*URL=([^\"'>]+)/i #'",
            "            redirect_uri($1)",
            "            rtry = true",
            "          end",
            "        end",
            "        unless rtry",
            "          http.finish",
            "          throw :exit",
            "        end",
            "      when Net::HTTPRedirection",
            "        redirect_uri(response['location'])",
            "      else",
            "        @rsp.status = response.code.to_s",
            "        response.each {|key,value|",
            "          @rsp.header.add key,value",
            "        }",
            "        @rsp.body = response.body",
            "        http.finish",
            "        throw :exit",
            "      end",
            "      http.finish",
            "    end",
            "    def redirect_uri(uri)",
            "      @uri = @uri.merge(uri)",
            "      set_uri(@uri.to_s)",
            "    end",
            "    ",
            "    def set_uri(uri)",
            "      @uri = URI.parse(uri.to_s).normalize",
            "      case @uri.scheme",
            "      when /^http/",
            "        @req.server_name  = @uri.host",
            "        @req.server_port  = @uri.port",
            "        @req.script_name  = @uri.path",
            "        @req.query_string = @uri.query",
            "        @req.query.clear",
            "        unless @uri.query.nil?",
            "          @uri.query.scan(/([^=&;]+)(?:=([^&;]*))?[&;]?/n) {|key,value|",
            "            key   = Web::unescape(key)",
            "            value = Web::unescape(value) if value",
            "            @req.query.add key,value",
            "          }",
            "        end",
            "        ",
            "        host = @uri.host",
            "        host = host + \":\" + @uri.port.to_s if @uri.port != 80",
            "        @req.header['Host'] = host",
            "      when /^ftp/",
            "        @req.server_name  = @uri.host",
            "        @req.server_port  = @uri.port",
            "        @req.script_name  = @uri.path",
            "      end",
            "    end",
            "    def get_ftp",
            "      @rsp = Web::Response.new",
            "      @rsp.body = ''",
            "      if @ftpproxy_host==nil",
            "        ftp = Net::FTP.new",
            "        begin",
            "          ftp.connect(@uri.host)",
            "        rescue",
            "          @rsp.status = Web::Response::STATUS_ServiceUnavailable",
            "          throw :exit",
            "        end",
            "        ftp.login(@uri.user || 'anonymous', @uri.password)",
            "        if ftp.lastresp=~/\\A530/",
            "          @rsp.status = Web::Response::STATUS_Unauthorized",
            "          ftp.close",
            "          throw :exit",
            "        end",
            "        ftp.passive = true",
            "        begin",
            "          ftp.retrbinary(\"RETR #{@uri.path}\", 1024) {|data|",
            "            @rsp.body << data",
            "          }",
            "          ftp.close",
            "          throw :exit",
            "        rescue Net::FTPPermError",
            "          @rsp.status = Web::Response::STATUS_NotFound",
            "          ftp.close",
            "          throw :exit",
            "        end",
            "      else",
            "        raise \"not supported ftp_proxy\"",
            "      end",
            "    end",
            "  end # Agent",
            "end # Web",
            "require 'uri'",
            "module Web",
            "  class Agent",
            "    class CookieManager",
            "      def initialize",
            "        @db=Hash.new # @db['www.moonwolf.com']=Web::Cookie::Cookies",
            "      end",
            "      ",
            "      def search(url)",
            "        u = URI.parse(url)",
            "        result = []",
            "        time = Time.now",
            "        tokens = u.host.split(/\\./)",
            "        while tokens.size >= 2",
            "          domain = tokens.join('.')",
            "          if cookies = @db[domain]",
            "            cookies.each {|name,cookie_ary|",
            "              cookie_ary.each {|cookie|",
            "                if u.path.index(cookie.path)==0 && (cookie.expires==nil || cookie.expires > time)",
            "                  result << cookie",
            "                end",
            "              }",
            "            }",
            "          end",
            "          break if tokens.last=~/\\A\\d+\\z/",
            "          tokens.shift",
            "        end",
            "        result",
            "      end",
            "      ",
            "      def get(req)",
            "        time = Time.now",
            "        req.header.delete 'Cookie'",
            "        tokens = req.server_name.split(/\\./) # [\"www\",\"moonwolf\",\"com\"]",
            "        while tokens.size >= 2",
            "          domain = tokens.join('.')",
            "          if cookies = @db[domain]",
            "            cookies.each {|name,cookie_ary|",
            "              cookie_ary.each {|cookie|",
            "                if (cookie.path==nil || req.script_name.index(cookie.path)==0) && (cookie.expires==nil || cookie.expires > time)",
            "                  req.header.add 'Cookie', cookie.to_request_header",
            "                end",
            "              }",
            "            }",
            "          end",
            "          break if tokens.last=~/\\A\\d+\\z/",
            "          tokens.shift",
            "        end",
            "      end",
            "      def set(req, rsp)",
            "        rsp.cookies.each {|name,cookie_ary|",
            "          cookie_ary.each {|cookie|",
            "            domain = cookie.domain.sub(/\\A\\./,'')",
            "            next unless Regexp.compile(Regexp.quote(domain)+\"\\\\z\").match(req.server_name)",
            "            if old_cookies = @db[domain]",
            "              if old = old_cookies[name,nil]",
            "                match = false",
            "                old.each {|old_cookie|",
            "                  if cookie.name == old_cookie.name && cookie.path == old_cookie.path",
            "                    old_cookie.value = cookie.value",
            "                    old_cookie.expires = cookie.expires",
            "                    matche = true",
            "                    break",
            "                  end",
            "                }",
            "                unless match",
            "                  old_cookies.add name, cookie",
            "                end",
            "              else",
            "                old_cookies.add name, cookie",
            "              end",
            "            else",
            "              cookies = Web::Cookie::Cookies.new",
            "              cookies.add name, cookie",
            "              @db[domain] = cookies",
            "            end",
            "          }",
            "        }",
            "      end",
            "      def clear",
            "        @db.clear",
            "      end",
            "      def cleanup",
            "        time = Time.now",
            "        @db.each {|domain,cookies|",
            "          cookies.keys.each {|key|",
            "            ary = cookies[key,nil]",
            "            ary.delete_if {|cookie|",
            "              (cookie.expires == nil) || (cookie.expires < time)",
            "            }",
            "            if ary.empty?",
            "              cookies.delete(key)",
            "            end",
            "          }",
            "        }",
            "      end",
            "    end # CookieManager",
            "  end # Agent",
            "end # Web",
            "module Web",
            "  class Agent",
            "    class PasswordManager",
            "      def initialize",
            "        @db=Hash.new",
            "      end",
            "      def get(agent)",
            "        return unless agent.rsp",
            "        agent.req.header.delete 'authorization'",
            "        text=agent.rsp.header['www-authenticate']",
            "        if text",
            "          if text=~/basic\\s+realm\\s*=\\s*[\"']?([^\"']+)[\"']?/i    #'",
            "            realm = $1",
            "            pass = @db[[agent.uri.scheme,agent.uri.host,agent.uri.port,realm]]",
            "            if pass",
            "              agent.req.header.add 'authorization', \"Basic \" + [\"#{pass.username}:#{pass.password}\"].pack('m').chomp",
            "            end",
            "          else",
            "            raise \"authenticate error\"",
            "          end",
            "        end",
            "      end",
            "      def set(agent, username, password)",
            "        text=agent.rsp.header['www-authenticate']",
            "        if text",
            "          if text=~/basic\\s+realm\\s*=\\s*[\"']?([^\"']+)[\"']?/i    #'",
            "            realm = $1",
            "            @db[[agent.uri.scheme,agent.uri.host,agent.uri.port,realm]] = Password.new(agent.uri.scheme,agent.uri.host,agent.uri.port,realm,username,password)",
            "          else",
            "            raise \"authenticate error\"",
            "          end",
            "        end",
            "      end",
            "      def clear",
            "        @db.clear",
            "      end",
            "      class Password",
            "        def initialize(scheme, host, port, realm, username, password)",
            "          @scheme   = scheme",
            "          @host     = host",
            "          @port     = port",
            "          @realm    = realm",
            "          @username = username",
            "          @password = password",
            "        end",
            "        attr_accessor :scheme, :host, :port, :realm, :username, :password",
            "      end # Password",
            "    end # PasswordManager",
            "  end # Agent",
            "end # Web",
            "# Web::Common",
            "# Copyright(c) 2002 MoonWolf <moonwolf@moonwolf.com>",
            "require \"socket\"",
            "require \"thread\"",
            "require 'digest/md5'",
            "require 'web/escape'",
            "module Web",
            "  module Common",
            "    ",
            "    MUTEX = Mutex.new",
            "    @@counter = rand(65536)",
            "    HOST = Socket.gethostbyname(Socket.gethostname)[3]",
            "    ",
            "    def self.unique_id()",
            "      tm = Time.now.gmtime",
            "      key = [tm.tv_sec, tm.tv_usec % 65536, Process.pid, Thread.current.__id__ ].pack(\"NnNN\")",
            "      key << HOST",
            "      MUTEX.synchronize {",
            "        @@counter = (@@counter + 1) % 65536",
            "        key << [@@counter].pack(\"n\")",
            "      }",
            "      ",
            "      [key].pack(\"m\").chop.tr(\"+/\",\"@-\")",
            "    end",
            "    ",
            "    # Parse Semi-colon delimited values",
            "    #  key1=value ; key2=\"value\" ; key3",
            "    #    => {\"key1\"=\"value\", \"key2\"=>\"value\", \"key3\"=>nil}",
            "    def self.parse_semi(str)",
            "      hash = Hash.new",
            "      str.scan(/(\\w+)(?:\\s*=\\s*(?:(\\w+)|\"(.*?)\"))?/) {",
            "        hash[$1] = $2 || $3",
            "      }",
            "      hash",
            "    end",
            "    # Time to RFC1123 String",
            "    def self.rfc1123date(tm)",
            "      tm = tm.clone.gmtime",
            "      tm.strftime(\"%a, %d %b %Y %H:%M:%S GMT\")",
            "    end",
            "    #",
            "    class ParamHash",
            "      include Enumerable",
            "      #",
            "      def initialize",
            "        @h = Hash.new",
            "      end",
            "      def to_hash",
            "        hash = {}",
            "        @h.each {|key,values|",
            "          hash[key] = values.first",
            "        }",
            "        hash",
            "      end",
            "      private",
            "      #L[\ud803\udccbK",
            "      def normalize(key)",
            "        key",
            "      end",
            "      public",
            "      # for Enumberable",
            "      def each",
            "        return self unless block_given?",
            "        @h.each {|k,v|",
            "          yield k,v",
            "        }",
            "        self",
            "      end",
            "      # L[lP",
            "      # l\u0742\u0202nil\u0502",
            "      def get(key,index=0)",
            "        key = normalize(key)",
            "        return nil unless @h.has_key?(key)",
            "        return @h[key][index]",
            "      end",
            "      ",
            "      # L[\u0252l\u0752\u80b7",
            "      def set(key, value, index=0)",
            "        key = normalize(key)",
            "        arr = @h.fetch(key, [])",
            "        arr[index] = value",
            "        @h[key] = arr",
            "      end",
            "      ",
            "      def [](key, index=0)",
            "        key = normalize(key)",
            "        if index",
            "          get(key, index)",
            "        else",
            "          @h.fetch(key,[])",
            "        end",
            "      end",
            "      ",
            "      def []=(key, *arg)",
            "        key = normalize(key)",
            "        if arg.size>1",
            "          index = arg.shift",
            "          if index",
            "            set(key, arg.first, index)",
            "          else",
            "            @h[key] = @h.fetch(key,[]) << arg",
            "          end",
            "        else",
            "          set(key, arg.first, 0)",
            "        end",
            "      end",
            "      def add(key,value)",
            "        key = normalize(key)",
            "        arr = @h.fetch(key, [])",
            "        arr << value",
            "        @h[key] = arr",
            "      end",
            "      def clear",
            "        @h.clear",
            "      end",
            "      def delete(key)",
            "        key = normalize(key)",
            "        @h.delete(key)",
            "      end",
            "      def has_key?(key)",
            "        key = normalize(key)",
            "        @h.has_key?(key)",
            "      end",
            "      def include?(key)",
            "        has_key?(key)",
            "      end",
            "      def key?(key)",
            "        has_key?(key)",
            "      end",
            "      def member?(key)",
            "        has_key?(key)",
            "      end",
            "      def keys",
            "        @h.keys",
            "      end",
            "      def size",
            "        @h.size",
            "      end",
            "      def length",
            "        @h.length",
            "      end",
            "    end # ParamHash",
            "    # HTTPwb_[\u06ce",
            "    class Header < ParamHash",
            "      private",
            "      def normalize(key)",
            "        key.downcase",
            "      end",
            "    end",
            "    #Abv[h\ua0bdt@C",
            "    class FileData",
            "      def initialize(filename, content_type)",
            "        @filename     = filename",
            "        @content_type = content_type",
            "        basename = 'web_' + Web::Common::unique_id",
            "        @path = File.join('/tmp',basename)",
            "      end",
            "      attr_accessor :filename, :content_type, :path",
            "      ",
            "      def cleanup",
            "        File.unlink @path",
            "      end",
            "      ",
            "      def to_s",
            "        str = nil",
            "        open(@path,'rb') {|f|",
            "          str = f.read || ''",
            "        }",
            "        str",
            "      end",
            "      ",
            "    end",
            "  end # Common",
            "end # Web",
            "# Web::Cookie",
            "# Copyright(c) 2002 MoonWolf <moonwolf@moonwolf.com>",
            "require \"web/common\"",
            "require 'time'",
            "module Web",
            "  class Cookie",
            "    def self.parse(header,req)",
            "      cookies = []",
            "      cookie = nil",
            "      until header.empty?",
            "        case header",
            "        when /\\A\\s*;\\s*/",
            "          header = $'",
            "        when /\\A\\s*,\\s*/",
            "          header = $'",
            "          if cookie",
            "            if cookie.domain == nil",
            "              cookie.domain = req.server_name.downcase",
            "            end",
            "            cookies << cookie",
            "          end",
            "          cookie = nil",
            "        when /\\Aexpires\\s*=\\s*(?:\"(\\w+, \\d\\d-\\w+-\\d+ \\d+:\\d+:\\d+ GMT)\"|(\\w+, \\d\\d-\\w+-\\d+ \\d+:\\d+:\\d+ GMT))/i",
            "          header = $'",
            "          cookie.expires = $1 || $2",
            "        when /\\A([^\\000-\\040\\042\\073\\075\\177]+)(?:\\s*=\\s*(?:([^ ,;]*)|\"(.*?)\"))?/",
            "          header = $'",
            "          value = $2 || $3",
            "          name  = $1",
            "          case name",
            "          when 'comment'",
            "            cookie.comment = value",
            "          when 'domain'",
            "            cookie.domain  = value.sub(/\\A\\./,'')",
            "          when 'path'",
            "            cookie.path    = value",
            "          when 'secure'",
            "            cookie.secure  = true",
            "          when 'version'",
            "            cookie.version = value",
            "          when /^\\$/",
            "            #",
            "          else",
            "            if cookie",
            "              if cookie.domain == nil",
            "                cookie.domain = req.server_name.downcase",
            "              end",
            "              cookies << cookie",
            "            end",
            "            cookie = Cookie.new(name, value)",
            "          end",
            "        when /\\A[\\000-\\377]/n",
            "          header = $'",
            "        end",
            "      end",
            "      if cookie",
            "        if cookie.domain == nil",
            "          cookie.domain = req.server_name.downcase",
            "        end",
            "        cookies << cookie",
            "      end",
            "      cookies",
            "    end",
            "    def initialize(name, value='')",
            "      @name    = name",
            "      @value   = value",
            "      @comment = nil",
            "      @domain  = nil",
            "      @expires = nil",
            "      @path    = nil",
            "      @secure  = nil",
            "      @version = nil",
            "    end",
            "    attr_accessor :name, :value, :comment, :domain, :path, :secure, :version",
            "    attr_reader :expires",
            "    ",
            "    def expires=(tm)",
            "      if Time === tm",
            "        @expires = tm",
            "      elsif tm==nil",
            "        @expires = nil",
            "      else",
            "        @expires = Time.parse(tm)",
            "      end",
            "    end",
            "    ",
            "    def to_request_header",
            "      \"#{@name}=#{@value}\"",
            "    end",
            "    ",
            "    def to_response_header",
            "      value = @value.to_s",
            "      ary = []",
            "      ary << \"#{@name}=#{value}\"",
            "      ary << \"comment=#{@comment}\" if @comment",
            "      ary << \"domain=#{@domain}\" if @domain",
            "      if @expires",
            "        ary << \"expires=#{Common::rfc1123date(@expires)}\"",
            "      end",
            "      ary << \"path=#{@path}\" if @path",
            "      ary << \"secure\" if @secure",
            "      ary << \"version=#{@version}\" if @version",
            "      ary.join(\"; \")",
            "    end",
            "    ",
            "    class Cookies < Web::Common::ParamHash",
            "      def initialize(header=nil)",
            "        super()",
            "        parse(header) if header",
            "      end",
            "      ",
            "      def parse(header, req)",
            "        Web::Cookie::parse(header, req).each {|cookie|",
            "          self.add(cookie.name, cookie)",
            "        }",
            "        self",
            "      end",
            "    end # Cookies",
            "  end # Cookie",
            "end # Web",
            "# Nora escape",
            "# Copyright(c) 2002 MoonWolf <moonwolf@moonwolf.com>",
            "begin",
            "  require \"web/escape_ext.so\"",
            "rescue LoadError",
            "  module Web",
            "    ESCAPE = \"ruby\"",
            "    HTMLEntity = Hash.new",
            "    HTMLEntity[\"Aacute\"] = \"\\303\\201\"",
            "    HTMLEntity[\"aacute\"] = \"\\303\\241\"",
            "    HTMLEntity[\"Acirc\"] = \"\\303\\202\"",
            "    HTMLEntity[\"acirc\"] = \"\\303\\242\"",
            "    HTMLEntity[\"acute\"] = \"\\302\\264\"",
            "    HTMLEntity[\"AElig\"] = \"\\303\\206\"",
            "    HTMLEntity[\"aelig\"] = \"\\303\\246\"",
            "    HTMLEntity[\"Agrave\"] = \"\\303\\200\"",
            "    HTMLEntity[\"agrave\"] = \"\\303\\240\"",
            "    HTMLEntity[\"alefsym\"] = \"\\342\\204\\265\"",
            "    HTMLEntity[\"Alpha\"] = \"\\316\\221\"",
            "    HTMLEntity[\"alpha\"] = \"\\316\\261\"",
            "    HTMLEntity[\"and\"] = \"\\342\\210\\247\"",
            "    HTMLEntity[\"ang\"] = \"\\342\\210\\240\"",
            "    HTMLEntity[\"apos\"] = \"'\"",
            "    HTMLEntity[\"Aring\"] = \"\\303\\205\"",
            "    HTMLEntity[\"aring\"] = \"\\303\\245\"",
            "    HTMLEntity[\"asymp\"] = \"\\342\\211\\210\"",
            "    HTMLEntity[\"Atilde\"] = \"\\303\\203\"",
            "    HTMLEntity[\"atilde\"] = \"\\303\\243\"",
            "    HTMLEntity[\"Auml\"] = \"\\303\\204\"",
            "    HTMLEntity[\"auml\"] = \"\\303\\244\"",
            "    HTMLEntity[\"bdquo\"] = \"\\342\\200\\236\"",
            "    HTMLEntity[\"Beta\"] = \"\\316\\222\"",
            "    HTMLEntity[\"beta\"] = \"\\316\\262\"",
            "    HTMLEntity[\"brvbar\"] = \"\\302\\246\"",
            "    HTMLEntity[\"bull\"] = \"\\342\\200\\242\"",
            "    HTMLEntity[\"cap\"] = \"\\342\\210\\251\"",
            "    HTMLEntity[\"Ccedil\"] = \"\\303\\207\"",
            "    HTMLEntity[\"ccedil\"] = \"\\303\\247\"",
            "    HTMLEntity[\"cedil\"] = \"\\302\\270\"",
            "    HTMLEntity[\"cent\"] = \"\\302\\242\"",
            "    HTMLEntity[\"Chi\"] = \"\\316\\247\"",
            "    HTMLEntity[\"chi\"] = \"\\317\\207\"",
            "    HTMLEntity[\"circ\"] = \"\\313\\206\"",
            "    HTMLEntity[\"clubs\"] = \"\\342\\231\\243\"",
            "    HTMLEntity[\"cong\"] = \"\\342\\211\\205\"",
            "    HTMLEntity[\"copy\"] = \"\\302\\251\"",
            "    HTMLEntity[\"crarr\"] = \"\\342\\206\\265\"",
            "    HTMLEntity[\"cup\"] = \"\\342\\210\\252\"",
            "    HTMLEntity[\"curren\"] = \"\\302\\244\"",
            "    HTMLEntity[\"dagger\"] = \"\\342\\200\\240\"",
            "    HTMLEntity[\"Dagger\"] = \"\\342\\200\\241\"",
            "    HTMLEntity[\"darr\"] = \"\\342\\206\\223\"",
            "    HTMLEntity[\"dArr\"] = \"\\342\\207\\223\"",
            "    HTMLEntity[\"deg\"] = \"\\302\\260\"",
            "    HTMLEntity[\"Delta\"] = \"\\316\\224\"",
            "    HTMLEntity[\"delta\"] = \"\\316\\264\"",
            "    HTMLEntity[\"diams\"] = \"\\342\\231\\246\"",
            "    HTMLEntity[\"divide\"] = \"\\303\\267\"",
            "    HTMLEntity[\"Eacute\"] = \"\\303\\211\"",
            "    HTMLEntity[\"eacute\"] = \"\\303\\251\"",
            "    HTMLEntity[\"Ecirc\"] = \"\\303\\212\"",
            "    HTMLEntity[\"ecirc\"] = \"\\303\\252\"",
            "    HTMLEntity[\"Egrave\"] = \"\\303\\210\"",
            "    HTMLEntity[\"egrave\"] = \"\\303\\250\"",
            "    HTMLEntity[\"empty\"] = \"\\342\\210\\205\"",
            "    HTMLEntity[\"emsp\"] = \"\\342\\200\\203\"",
            "    HTMLEntity[\"ensp\"] = \"\\342\\200\\202\"",
            "    HTMLEntity[\"Epsilon\"] = \"\\316\\225\"",
            "    HTMLEntity[\"epsilon\"] = \"\\316\\265\"",
            "    HTMLEntity[\"equiv\"] = \"\\342\\211\\241\"",
            "    HTMLEntity[\"Eta\"] = \"\\316\\227\"",
            "    HTMLEntity[\"eta\"] = \"\\316\\267\"",
            "    HTMLEntity[\"ETH\"] = \"\\303\\220\"",
            "    HTMLEntity[\"eth\"] = \"\\303\\260\"",
            "    HTMLEntity[\"Euml\"] = \"\\303\\213\"",
            "    HTMLEntity[\"euml\"] = \"\\303\\253\"",
            "    HTMLEntity[\"euro\"] = \"\\342\\202\\254\"",
            "    HTMLEntity[\"exist\"] = \"\\342\\210\\203\"",
            "    HTMLEntity[\"fnof\"] = \"\\306\\222\"",
            "    HTMLEntity[\"forall\"] = \"\\342\\210\\200\"",
            "    HTMLEntity[\"frac12\"] = \"\\302\\275\"",
            "    HTMLEntity[\"frac14\"] = \"\\302\\274\"",
            "    HTMLEntity[\"frac34\"] = \"\\302\\276\"",
            "    HTMLEntity[\"frasl\"] = \"\\342\\201\\204\"",
            "    HTMLEntity[\"Gamma\"] = \"\\316\\223\"",
            "    HTMLEntity[\"gamma\"] = \"\\316\\263\"",
            "    HTMLEntity[\"ge\"] = \"\\342\\211\\245\"",
            "    HTMLEntity[\"harr\"] = \"\\342\\206\\224\"",
            "    HTMLEntity[\"hArr\"] = \"\\342\\207\\224\"",
            "    HTMLEntity[\"hearts\"] = \"\\342\\231\\245\"",
            "    HTMLEntity[\"hellip\"] = \"\\342\\200\\246\"",
            "    HTMLEntity[\"Iacute\"] = \"\\303\\215\"",
            "    HTMLEntity[\"iacute\"] = \"\\303\\255\"",
            "    HTMLEntity[\"Icirc\"] = \"\\303\\216\"",
            "    HTMLEntity[\"icirc\"] = \"\\303\\256\"",
            "    HTMLEntity[\"iexcl\"] = \"\\302\\241\"",
            "    HTMLEntity[\"Igrave\"] = \"\\303\\214\"",
            "    HTMLEntity[\"igrave\"] = \"\\303\\254\"",
            "    HTMLEntity[\"image\"] = \"\\342\\204\\221\"",
            "    HTMLEntity[\"infin\"] = \"\\342\\210\\236\"",
            "    HTMLEntity[\"int\"] = \"\\342\\210\\253\"",
            "    HTMLEntity[\"Iota\"] = \"\\316\\231\"",
            "    HTMLEntity[\"iota\"] = \"\\316\\271\"",
            "    HTMLEntity[\"iquest\"] = \"\\302\\277\"",
            "    HTMLEntity[\"isin\"] = \"\\342\\210\\210\"",
            "    HTMLEntity[\"Iuml\"] = \"\\303\\217\"",
            "    HTMLEntity[\"iuml\"] = \"\\303\\257\"",
            "    HTMLEntity[\"Kappa\"] = \"\\316\\232\"",
            "    HTMLEntity[\"kappa\"] = \"\\316\\272\"",
            "    HTMLEntity[\"Lambda\"] = \"\\316\\233\"",
            "    HTMLEntity[\"lambda\"] = \"\\316\\273\"",
            "    HTMLEntity[\"lang\"] = \"\\342\\214\\251\"",
            "    HTMLEntity[\"laquo\"] = \"\\302\\253\"",
            "    HTMLEntity[\"larr\"] = \"\\342\\206\\220\"",
            "    HTMLEntity[\"lArr\"] = \"\\342\\207\\220\"",
            "    HTMLEntity[\"lceil\"] = \"\\342\\214\\210\"",
            "    HTMLEntity[\"ldquo\"] = \"\\342\\200\\234\"",
            "    HTMLEntity[\"le\"] = \"\\342\\211\\244\"",
            "    HTMLEntity[\"lfloor\"] = \"\\342\\214\\212\"",
            "    HTMLEntity[\"lowast\"] = \"\\342\\210\\227\"",
            "    HTMLEntity[\"loz\"] = \"\\342\\227\\212\"",
            "    HTMLEntity[\"lrm\"] = \"\\342\\200\\216\"",
            "    HTMLEntity[\"lsaquo\"] = \"\\342\\200\\271\"",
            "    HTMLEntity[\"lsquo\"] = \"\\342\\200\\230\"",
            "    HTMLEntity[\"macr\"] = \"\\302\\257\"",
            "    HTMLEntity[\"mdash\"] = \"\\342\\200\\224\"",
            "    HTMLEntity[\"micro\"] = \"\\302\\265\"",
            "    HTMLEntity[\"middot\"] = \"\\302\\267\"",
            "    HTMLEntity[\"minus\"] = \"\\342\\210\\222\"",
            "    HTMLEntity[\"Mu\"] = \"\\316\\234\"",
            "    HTMLEntity[\"mu\"] = \"\\316\\274\"",
            "    HTMLEntity[\"nabla\"] = \"\\342\\210\\207\"",
            "    HTMLEntity[\"nbsp\"] = \"\\302\\240\"",
            "    HTMLEntity[\"ndash\"] = \"\\342\\200\\223\"",
            "    HTMLEntity[\"ne\"] = \"\\342\\211\\240\"",
            "    HTMLEntity[\"ni\"] = \"\\342\\210\\213\"",
            "    HTMLEntity[\"not\"] = \"\\302\\254\"",
            "    HTMLEntity[\"notin\"] = \"\\342\\210\\211\"",
            "    HTMLEntity[\"nsub\"] = \"\\342\\212\\204\"",
            "    HTMLEntity[\"Ntilde\"] = \"\\303\\221\"",
            "    HTMLEntity[\"ntilde\"] = \"\\303\\261\"",
            "    HTMLEntity[\"Nu\"] = \"\\316\\235\"",
            "    HTMLEntity[\"nu\"] = \"\\316\\275\"",
            "    HTMLEntity[\"Oacute\"] = \"\\303\\223\"",
            "    HTMLEntity[\"oacute\"] = \"\\303\\263\"",
            "    HTMLEntity[\"Ocirc\"] = \"\\303\\224\"",
            "    HTMLEntity[\"ocirc\"] = \"\\303\\264\"",
            "    HTMLEntity[\"OElig\"] = \"\\305\\222\"",
            "    HTMLEntity[\"oelig\"] = \"\\305\\223\"",
            "    HTMLEntity[\"Ograve\"] = \"\\303\\222\"",
            "    HTMLEntity[\"ograve\"] = \"\\303\\262\"",
            "    HTMLEntity[\"oline\"] = \"\\342\\200\\276\"",
            "    HTMLEntity[\"Omega\"] = \"\\316\\251\"",
            "    HTMLEntity[\"omega\"] = \"\\317\\211\"",
            "    HTMLEntity[\"Omicron\"] = \"\\316\\237\"",
            "    HTMLEntity[\"omicron\"] = \"\\316\\277\"",
            "    HTMLEntity[\"oplus\"] = \"\\342\\212\\225\"",
            "    HTMLEntity[\"or\"] = \"\\342\\210\\250\"",
            "    HTMLEntity[\"ordf\"] = \"\\302\\252\"",
            "    HTMLEntity[\"ordm\"] = \"\\302\\272\"",
            "    HTMLEntity[\"Oslash\"] = \"\\303\\230\"",
            "    HTMLEntity[\"oslash\"] = \"\\303\\270\"",
            "    HTMLEntity[\"Otilde\"] = \"\\303\\225\"",
            "    HTMLEntity[\"otilde\"] = \"\\303\\265\"",
            "    HTMLEntity[\"otimes\"] = \"\\342\\212\\227\"",
            "    HTMLEntity[\"Ouml\"] = \"\\303\\226\"",
            "    HTMLEntity[\"ouml\"] = \"\\303\\266\"",
            "    HTMLEntity[\"para\"] = \"\\302\\266\"",
            "    HTMLEntity[\"part\"] = \"\\342\\210\\202\"",
            "    HTMLEntity[\"permil\"] = \"\\342\\200\\260\"",
            "    HTMLEntity[\"perp\"] = \"\\342\\212\\245\"",
            "    HTMLEntity[\"Phi\"] = \"\\316\\246\"",
            "    HTMLEntity[\"phi\"] = \"\\317\\206\"",
            "    HTMLEntity[\"Pi\"] = \"\\316\\240\"",
            "    HTMLEntity[\"pi\"] = \"\\317\\200\"",
            "    HTMLEntity[\"piv\"] = \"\\317\\226\"",
            "    HTMLEntity[\"plusmn\"] = \"\\302\\261\"",
            "    HTMLEntity[\"pound\"] = \"\\302\\243\"",
            "    HTMLEntity[\"prime\"] = \"\\342\\200\\262\"",
            "    HTMLEntity[\"Prime\"] = \"\\342\\200\\263\"",
            "    HTMLEntity[\"prod\"] = \"\\342\\210\\217\"",
            "    HTMLEntity[\"prop\"] = \"\\342\\210\\235\"",
            "    HTMLEntity[\"Psi\"] = \"\\316\\250\"",
            "    HTMLEntity[\"psi\"] = \"\\317\\210\"",
            "    HTMLEntity[\"radic\"] = \"\\342\\210\\232\"",
            "    HTMLEntity[\"rang\"] = \"\\342\\214\\252\"",
            "    HTMLEntity[\"raquo\"] = \"\\302\\273\"",
            "    HTMLEntity[\"rarr\"] = \"\\342\\206\\222\"",
            "    HTMLEntity[\"rArr\"] = \"\\342\\207\\222\"",
            "    HTMLEntity[\"rceil\"] = \"\\342\\214\\211\"",
            "    HTMLEntity[\"rdquo\"] = \"\\342\\200\\235\"",
            "    HTMLEntity[\"real\"] = \"\\342\\204\\234\"",
            "    HTMLEntity[\"reg\"] = \"\\302\\256\"",
            "    HTMLEntity[\"rfloor\"] = \"\\342\\214\\213\"",
            "    HTMLEntity[\"Rho\"] = \"\\316\\241\"",
            "    HTMLEntity[\"rho\"] = \"\\317\\201\"",
            "    HTMLEntity[\"rlm\"] = \"\\342\\200\\217\"",
            "    HTMLEntity[\"rsaquo\"] = \"\\342\\200\\272\"",
            "    HTMLEntity[\"rsquo\"] = \"\\342\\200\\231\"",
            "    HTMLEntity[\"sbquo\"] = \"\\342\\200\\232\"",
            "    HTMLEntity[\"Scaron\"] = \"\\305\\240\"",
            "    HTMLEntity[\"scaron\"] = \"\\305\\241\"",
            "    HTMLEntity[\"sdot\"] = \"\\342\\213\\205\"",
            "    HTMLEntity[\"sect\"] = \"\\302\\247\"",
            "    HTMLEntity[\"shy\"] = \"\\302\\255\"",
            "    HTMLEntity[\"Sigma\"] = \"\\316\\243\"",
            "    HTMLEntity[\"sigma\"] = \"\\317\\203\"",
            "    HTMLEntity[\"sigmaf\"] = \"\\317\\202\"",
            "    HTMLEntity[\"sim\"] = \"\\342\\210\\274\"",
            "    HTMLEntity[\"spades\"] = \"\\342\\231\\240\"",
            "    HTMLEntity[\"sub\"] = \"\\342\\212\\202\"",
            "    HTMLEntity[\"sube\"] = \"\\342\\212\\206\"",
            "    HTMLEntity[\"sum\"] = \"\\342\\210\\221\"",
            "    HTMLEntity[\"sup\"] = \"\\342\\212\\203\"",
            "    HTMLEntity[\"sup1\"] = \"\\302\\271\"",
            "    HTMLEntity[\"sup2\"] = \"\\302\\262\"",
            "    HTMLEntity[\"sup3\"] = \"\\302\\263\"",
            "    HTMLEntity[\"supe\"] = \"\\342\\212\\207\"",
            "    HTMLEntity[\"szlig\"] = \"\\303\\237\"",
            "    HTMLEntity[\"Tau\"] = \"\\316\\244\"",
            "    HTMLEntity[\"tau\"] = \"\\317\\204\"",
            "    HTMLEntity[\"there4\"] = \"\\342\\210\\264\"",
            "    HTMLEntity[\"Theta\"] = \"\\316\\230\"",
            "    HTMLEntity[\"theta\"] = \"\\316\\270\"",
            "    HTMLEntity[\"thetasym\"] = \"\\317\\221\"",
            "    HTMLEntity[\"thinsp\"] = \"\\342\\200\\211\"",
            "    HTMLEntity[\"THORN\"] = \"\\303\\236\"",
            "    HTMLEntity[\"thorn\"] = \"\\303\\276\"",
            "    HTMLEntity[\"tilde\"] = \"\\313\\234\"",
            "    HTMLEntity[\"times\"] = \"\\303\\227\"",
            "    HTMLEntity[\"trade\"] = \"\\342\\204\\242\"",
            "    HTMLEntity[\"Uacute\"] = \"\\303\\232\"",
            "    HTMLEntity[\"uacute\"] = \"\\303\\272\"",
            "    HTMLEntity[\"uarr\"] = \"\\342\\206\\221\"",
            "    HTMLEntity[\"uArr\"] = \"\\342\\207\\221\"",
            "    HTMLEntity[\"Ucirc\"] = \"\\303\\233\"",
            "    HTMLEntity[\"ucirc\"] = \"\\303\\273\"",
            "    HTMLEntity[\"Ugrave\"] = \"\\303\\231\"",
            "    HTMLEntity[\"ugrave\"] = \"\\303\\271\"",
            "    HTMLEntity[\"uml\"] = \"\\302\\250\"",
            "    HTMLEntity[\"upsih\"] = \"\\317\\222\"",
            "    HTMLEntity[\"Upsilon\"] = \"\\316\\245\"",
            "    HTMLEntity[\"upsilon\"] = \"\\317\\205\"",
            "    HTMLEntity[\"Uuml\"] = \"\\303\\234\"",
            "    HTMLEntity[\"uuml\"] = \"\\303\\274\"",
            "    HTMLEntity[\"weierp\"] = \"\\342\\204\\230\"",
            "    HTMLEntity[\"Xi\"] = \"\\316\\236\"",
            "    HTMLEntity[\"xi\"] = \"\\316\\276\"",
            "    HTMLEntity[\"Yacute\"] = \"\\303\\235\"",
            "    HTMLEntity[\"yacute\"] = \"\\303\\275\"",
            "    HTMLEntity[\"yen\"] = \"\\302\\245\"",
            "    HTMLEntity[\"yuml\"] = \"\\303\\277\"",
            "    HTMLEntity[\"Yuml\"] = \"\\305\\270\"",
            "    HTMLEntity[\"Zeta\"] = \"\\316\\226\"",
            "    HTMLEntity[\"zeta\"] = \"\\316\\266\"",
            "    HTMLEntity[\"zwj\"] = \"\\342\\200\\215\"",
            "    HTMLEntity[\"zwnj\"] = \"\\342\\200\\214\"",
            "    def self::escape(str)",
            "      str = str.gsub(/[^ 0-9A-Za-z\\-_.]+/n) {|x|",
            "        ('%%%02X' * x.size) % x.unpack('C*')",
            "      }",
            "      str.tr!(' ','+')",
            "      str",
            "    end",
            "    def self::unescape(str)",
            "      str = str.tr('+',' ')",
            "      str.gsub!(/(?:%[0-9a-zA-Z][0-9a-zA-Z])+/n) {|x|",
            "        x.delete!('%')",
            "        [x].pack('H*')",
            "      }",
            "      str",
            "    end",
            "    def self::escapeHTML(str)",
            "      str = str.gsub(/&/,'&amp;')",
            "      str.gsub!(/\"/,'&quot;')",
            "      str.gsub!(/</,'&lt;')",
            "      str.gsub!(/>/,'&gt;')",
            "      str",
            "    end",
            "    def self::unescapeHTML(str,htmlentity = Web::HTMLEntity)",
            "      str.gsub(/&(.+?);/) {",
            "        m = $1.dup",
            "        case m",
            "        when 'lt'   then '<'",
            "        when 'gt'   then '>'",
            "        when 'amp'  then '&'",
            "        when 'quot' then '\"'",
            "        when /\\A#([0-9]+)\\z/",
            "          cp = $1.to_i",
            "          if cp < 0x10ffff",
            "            [cp].pack('U')",
            "          else",
            "            raise RangeError",
            "          end",
            "        when /\\A#x([0-9a-f]+)\\z/i",
            "          cp = $1.hex",
            "          if cp < 0x10ffff",
            "            [cp].pack('U')",
            "          else",
            "            raise RangeError",
            "          end",
            "        else",
            "          raise RangeError",
            "        end",
            "      }",
            "    end",
            "  end # Web",
            "# Web::Request",
            "# Copyright(c) 2002-2004 MoonWolf <moonwolf@moonwolf.com>",
            "require 'web/common'",
            "require 'web/cookie'",
            "module Web",
            "  # NGXg",
            "  class Request",
            "    # NG[l\u06ce",
            "    class QueryParam < Common::ParamHash",
            "    end",
            "    ",
            "    # tH[\u0312l\u06ce",
            "    class FormParam < Common::ParamHash",
            "    end",
            "    ",
            "    def initialize",
            "      # NGXgID(mod_unique_id\u0381A\u0312l)",
            "      @request_id = nil",
            "      ",
            "      # ZbVID",
            "      @session_id = nil",
            "      ",
            "      # T[o",
            "      @env    = Hash.new",
            "      ",
            "      # \\bh(GET|POST|HEAD)",
            "      @method = nil",
            "      #",
            "      @server_name = nil",
            "      @server_protocol = nil",
            "      @server_port = nil",
            "      ",
            "      # PATH",
            "      @path_info = nil",
            "      @path_translated = nil",
            "      ",
            "      # SCRIPT_NAME",
            "      @script_name = nil",
            "      ",
            "      # NG[",
            "      @query_string = nil",
            "      @remote_addr  = nil",
            "      @remote_host  = nil",
            "      @auth_type    = nil",
            "      @remote_ident = nil",
            "      @remote_user  = nil",
            "      ",
            "      # HTTPNGXgwb_\u024f\u0102",
            "      @header = Common::Header.new",
            "      # HTTPNGXg{fB",
            "      @body   = nil",
            "      # NG[\u0242p[^",
            "      @query  = QueryParam.new",
            "      # tH[\u0242p[^",
            "      @form   = FormParam.new",
            "      # NbL[",
            "      @cookies = Cookie::Cookies.new",
            "      @https = false",
            "    end",
            "    attr_accessor :request_id, :session_id, :https",
            "    attr_accessor :server_name, :server_protocol, :server_port",
            "    attr_accessor :method, :query_string, :path_info, :path_translated, :script_name",
            "    attr_accessor :remote_addr, :remote_host, :auth_type, :remote_ident, :remote_user",
            "    attr_reader :env, :header, :query, :form, :cookies",
            "    ",
            "    def cleanup",
            "      @form.each {|key,value|",
            "        value.each {|v|",
            "          if v.respond_to? :cleanup",
            "            v.cleanup",
            "          end",
            "        }",
            "      }",
            "    end",
            "    ",
            "    def clear",
            "      cleanup",
            "      @query.clear",
            "      @form.clear",
            "    end",
            "    ",
            "    %w(",
            "      Accept",
            "      Accept-Charset",
            "      Accept-Encoding",
            "      Accept-Language",
            "      Authorization",
            "      Content-Type",
            "      Expect",
            "      From",
            "      Host",
            "      If-Match",
            "      If-Modified-Since",
            "      If-None-Match",
            "      If-Range",
            "      If-Unmodified-Since",
            "      Max-Forwards",
            "      Proxy-Authorization",
            "      Range",
            "      Referer",
            "      TE",
            "      User-Agent",
            "    ).each {|field|",
            "      method = field.downcase.tr('-','_')",
            "      eval( <<-END )",
            "        def #{method}(index=0)",
            "          @header['#{field}',index]",
            "        end",
            "        def #{method}=(value)",
            "          @header['#{field}']=value",
            "        end",
            "      END",
            "    }",
            "    ",
            "    # Query/Form",
            "    def has_key?(key)",
            "      @query.has_key?(key) || @form.has_key?(key)",
            "    end",
            "    ",
            "    def include?(key)",
            "      has_key?(key)",
            "    end",
            "    ",
            "    def key?(key)",
            "      has_key?(key)",
            "    end",
            "    ",
            "    def member?(key)",
            "      has_key?(key)",
            "    end",
            "    ",
            "    def get(key,index=0)",
            "      return nil unless @query.has_key?(key) || @form.has_key?(key)",
            "      val = @query[key, nil] + @form[key, nil]",
            "      return val[index]",
            "    end",
            "    ",
            "    def [](key, index=0)",
            "      if index",
            "        get(key, index)",
            "      else",
            "        @query[key, nil] + @form[key, nil]",
            "      end",
            "    end",
            "    ",
            "    #",
            "    def body",
            "      @body",
            "    end",
            "    def body=(text)",
            "      @body = text.to_s",
            "    end",
            "    ",
            "    def query_encode()",
            "      query = []",
            "      @query.each {|key,values|",
            "        values.each {|value|",
            "          query << \"#{Web::escape(key)}=#{Web::escape(value)}\"",
            "        }",
            "      }",
            "      @query_string = query.join(\"&\")",
            "    end",
            "    ",
            "    def form_encode",
            "      enctype = @header['content-type']",
            "      unless enctype",
            "        @header['content-type'] = enctype = \"application/x-www-form-urlencoded\"",
            "      end",
            "      case enctype",
            "      when /multipart\\/form-data/i",
            "        boundary = \"%012d\" % (rand 1000000000000)",
            "        @header['content-type'] = \"multipart/form-data; boundary=#{boundary}\"",
            "        query = \"\"",
            "        @form.each {|key,values|",
            "          values.each {|value|",
            "            query << \"--\" << boundary << \"\\r\\n\"",
            "            if value.is_a? Web::Common::FileData",
            "              query << \"Content-Disposition: form-data; name=\\\"#{Web::escape(key)}\\\";filename=\\\"#{value.filename}\\\"\\r\\n\"",
            "            else",
            "              query << \"Content-Disposition: form-data; name=\\\"#{Web::escape(key)}\\\";\\r\\n\"",
            "            end",
            "            query << \"\\r\\n\" << value.to_s << \"\\r\\n\"",
            "          }",
            "        }",
            "        unless query.empty?",
            "          query << \"--\" << boundary << \"--\\r\\n\"",
            "        end",
            "        @body = query",
            "        @header['content-length'] = @body.size.to_s",
            "      else",
            "        query = []",
            "        @form.each {|key,values|",
            "          values.each {|value|",
            "            query << \"#{Web::escape(key)}=#{Web::escape(value)}\"",
            "          }",
            "        }",
            "        @body = query.join(\"&\")",
            "        @header['content-length'] = @body.size.to_s",
            "      end",
            "    end",
            "  end # Request",
            "end # Web",
            "# Web::Response",
            "# Copyright(c) 2002 MoonWolf <moonwolf@moonwolf.com>",
            "require 'web/common'",
            "module Web",
            "  # X|X",
            "  class Response",
            "    STATUS_Continue                     = '100 Continue'",
            "    STATUS_SwitchingProtocols           = '101 Switching Protocols'",
            "    STATUS_OK                           = '200 OK'",
            "    STATUS_Created                      = '201 Created'",
            "    STATUS_Accepted                     = '202 Accepted'",
            "    STATUS_NonAuthoritativeInformation  = '203 Non-Authoritative Information'",
            "    STATUS_NoContent                    = '204 No Content'",
            "    STATUS_ResetContent                 = '205 Reset Content'",
            "    STATUS_PartialContent               = '206 Partial Content'",
            "    STATUS_MultipleChoices              = '300 Multiple Choices'",
            "    STATUS_MovedPermanently             = '301 Moved Permanently'",
            "    STATUS_Found                        = '302 Found'",
            "    STATUS_SeeOther                     = '303 See Other'",
            "    STATUS_NotModified                  = '304 Not Modified'",
            "    STATUS_UseProxy                     = '305 Use Proxy'",
            "    STATUS_TemporaryRedirect            = '307 Temporary Redirect'",
            "    STATUS_BadRequest                   = '400 Bad Request'",
            "    STATUS_Unauthorized                 = '401 Unauthorized'",
            "    STATUS_PaymentRequired              = '402 Payment Required'",
            "    STATUS_Forbidden                    = '403 Forbidden'",
            "    STATUS_NotFound                     = '404 Not Found'",
            "    STATUS_MethodNotAllowed             = '405 Method Not Allowed'",
            "    STATUS_NotAcceptable                = '406 Not Acceptable'",
            "    STATUS_ProxyAuthenticationRequired  = '407 Proxy Authentication Required'",
            "    STATUS_RequestTimeout               = '408 Request Timeout'",
            "    STATUS_Conflict                     = '409 Conflict'",
            "    STATUS_Gone                         = '410 Gone'",
            "    STATUS_LengthRequired               = '411 Length Required'",
            "    STATUS_PreconditionFailed           = '412 Precondition Failed'",
            "    STATUS_RequestEntityTooLarge        = '413 Request Entity Too Large'",
            "    STATUS_RequestURITooLong            = '414 Request-URI Too Long'",
            "    STATUS_UnsupportedMediaType         = '415 Unsupported Media Type'",
            "    STATUS_RequestedRangeNotSatisfiable = '416 Requested Range Not Satisfiable'",
            "    STATUS_ExpectationFailed            = '417 Expectation Failed'",
            "    STATUS_InternalServerError          = '500 Internal Server Error'",
            "    STATUS_NotImplemented               = '501 Not Implemented'",
            "    STATUS_BadGateway                   = '502 Bad Gateway'",
            "    STATUS_ServiceUnavailable           = '503 Service Unavailable'",
            "    STATUS_GatewayTimeout               = '504 Gateway Timeout'",
            "    STATUS_HTTPVersionNotSupported      = '505 HTTP Version Not Supported'",
            "    ",
            "    def initialize",
            "      @http_ver = 'HTTP/1.1'",
            "      @status   = STATUS_OK",
            "      @header   = Common::Header.new",
            "      @body     = ''",
            "      @cookies  = Cookie::Cookies.new",
            "    end",
            "    attr_reader :header, :cookies",
            "    attr_accessor :http_ver, :body",
            "    def status",
            "      @status",
            "    end",
            "    def status=(stat)",
            "      raise \"HTTP Status code error :#{stat}\" if stat !~ /^\\d\\d\\d\\s*/",
            "      @status = stat",
            "    end",
            "    # Getter/Setter",
            "    %w(",
            "      Allow",
            "      Age",
            "      Accept-Ranges",
            "      Content-Type",
            "      Content-Encoding",
            "      Content-Language",
            "      Content-Length",
            "      Content-Location",
            "      Content-MD5",
            "      Content-Range",
            "      Date",
            "      ETag",
            "      Expect",
            "      Expires",
            "      Last-Modified",
            "      Location",
            "      Pragma",
            "      Retry-After",
            "      Transfer-Encoding",
            "      Upgrade",
            "      Vary",
            "      Warning",
            "      WWW-Authenticate",
            "    ).each {|field|",
            "      method = field.downcase.tr('-','_')",
            "      eval( <<-END )",
            "        def #{method}(index=0)",
            "          @header['#{field}',index]",
            "        end",
            "        def #{method}=(value)",
            "          @header['#{field}']=value",
            "        end",
            "      END",
            "    }",
            "    ",
            "    def <<(obj)",
            "      @body << obj.to_s",
            "      self",
            "    end",
            "    ",
            "    def write(obj)",
            "      @body << obj.to_s",
            "    end",
            "    ",
            "    def print(obj)",
            "      @body << obj.to_s",
            "    end",
            "    ",
            "    def puts(obj)",
            "      @body << obj.to_s << \"\\n\"",
            "    end",
            "    ",
            "  end # Response",
            "end # Web",
            "L!This program cannot be run in DOS mode.",
            "\u03c9\u03c9\u03c9\u0389\u03c9\u0709\u03c9\u03c9\u03c9 \u0709\u03c9Rich\u03c9",
            ".text",
            "`.rdata",
            "@.data",
            ".reloc",
            "MQjQ",
            "EPMQ",
            "UR0Q",
            "MQkP",
            "URSP",
            "EP(P",
            "MQ\tP",
            "EURO",
            "EPtO",
            "MQ\\O",
            "URDO",
            "EP,O",
            "URlN",
            "EPTN",
            "MQ<N",
            "UR5N",
            "EP\"N",
            "URhl",
            "Ejh.",
            "URzM",
            "EPbM",
            "MQJM",
            "UR2M",
            "MQh$",
            "UR#M",
            "URyL",
            "EPaL",
            "MQIL",
            "URBL",
            "EP/L",
            "UR\tL",
            "MQqK",
            "UR^K",
            "j\th<",
            "EPKK",
            "URxJ",
            "MQ^J",
            "EURh\u0701",
            "EPFJ",
            "REPI",
            "jh`=",
            "MQtI",
            "UR\\I",
            "EPDI",
            "MQ,I",
            "EPlH",
            "MQTH",
            "UR<H",
            "EP$H",
            "URkG",
            "EPSG",
            "MQ;G",
            "UR#G",
            "jhpa",
            "jhja",
            "jhda",
            "jh0P",
            "MQjF",
            "URRF",
            "EP:F",
            "MQ\"F",
            "jhP]",
            "jh a",
            "URzE",
            "EPsE",
            "MQ`E",
            "URME",
            "EP:E",
            "MQ'E",
            "j\thD",
            "MQ|D",
            "URiD",
            "EPSD",
            "3\u0485u\u05cbE]U\uc840q",
            "EPMQh",
            "E'EPzC",
            "QURU",
            "EEPMC",
            "]U|q",
            "}!MU",
            "PMQB",
            "\u034bE]UE",
            "]UQE",
            "B(PMQ",
            "EEP@",
            "]UQE",
            "B(PMQ5",
            "]UQj\"E",
            "U3uM",
            "E]UE",
            "u5Mt+U",
            "3uE]UQE",
            "QUR>",
            "H MU",
            "M+H U",
            "Q(REPI",
            "UQ E",
            "U3uMQT",
            "u5Et+M",
            "3\u0485uE]U",
            "UEEM",
            "U3uMQ",
            "u5Et+M",
            "3\u0485uE]UQj\"E",
            "U3uMQ R9",
            "]UQE",
            "B BM",
            "Q ;U",
            "H ]U",
            "U3uMy",
            "H$Q8",
            "H@QF8",
            "]UQj\"E",
            "U3uM",
            "WjL\"8",
            "3}h`+",
            "E_]UE",
            "HH]UE",
            "]U(EPMQUREPh",
            "U3u}",
            "EE\u0703}",
            "UUj8hX",
            "EPMQURj",
            "UB(PMQR",
            "Ej\"MQ4",
            "E3\u0245uU",
            "3\u0485u3uMQUB",
            "REP3",
            "u5Et+M",
            "3\u0485uE]U`EPMQh",
            "EEj8hX",
            "MQUR",
            "EPMQ",
            "UEPX2",
            "u5Et+M",
            "u!Ut",
            "3\u0485uE]U",
            "EMQURh",
            "u!Ut",
            "3\u0485u}",
            "EPu1",
            "MMUREPMQc",
            "u5Mt+U",
            "3uE]U}",
            "EMQh",
            "UUEE}",
            "u4Ut*E",
            "3\u0245uE]U",
            "UEE}",
            "UEEMQURE",
            "E}uE",
            "MQURE",
            "MQ(REPi",
            "3\u0485uEP-",
            "EH(QUR",
            "U3u}",
            "MQ0-",
            "UUj8hX",
            "UB(PMQ",
            "]UTh",
            "j8hX",
            "UREP",
            "EMQ^",
            "u5Et+M",
            "3\u0485uE]U",
            "3\u0245uU",
            "u5Et+M",
            "3\u0485uE]UVWE",
            "B ;E",
            "Q +U",
            "_^]UE",
            "]UQE",
            "3\u0245uU",
            "]UQE",
            "3\u0245uU",
            "}t,M",
            "B(PMQ",
            "4}t,E",
            "Q(REPF",
            "3]UE",
            "UB(PMQe",
            "3\u0485uEP$",
            "EH(QUR",
            "]UQE",
            "EPh=",
            "MQhTb",
            "E]UQj\"E",
            "U3uM",
            "]UQE",
            "HLMU",
            "@L]UQj\"E",
            "U3uM",
            "E]UE",
            "HdQ\"",
            "HTQX#",
            "]UQE",
            "H\\M}",
            "3\u0485u\u05cbE]UQE",
            "H`M}",
            "3\u0485u\u05cbE]UE",
            "HhQF\"",
            "EMUQhE",
            "EPT;M",
            "EUEBTE",
            "EM+H",
            "QURk ",
            "EMH\\E",
            "EM+H",
            "EMH`E",
            "EMQLUj",
            "EMQLUj",
            "E]UQj\"E",
            "U3uM3yL",
            "E]UE",
            "]UQE",
            "]UQE",
            "EMUA$+B",
            "]UhE",
            "3}hPE",
            "MAdUBh",
            "QpE_]UE",
            "]UQE",
            "tWh4",
            "]UQE",
            "3\u0245u\u058bURj",
            "HLQv",
            "zP\tu",
            "MMURE",
            "HXMj",
            "]UQE",
            "EMQM",
            "]Uhh",
            "EMQb",
            "EPMQURh",
            "M3\u0485u}",
            "MMUEBP}",
            "UUj8hX",
            "MQPRE",
            "MQ(REPx",
            "MUQLE",
            "EMQh",
            "UUEE}",
            "QUBLP'",
            "QUBLP",
            "u\tE!",
            "u\tE ",
            "u\tE<",
            "u\tE$",
            "u\tE!",
            "u\tE ",
            "u\tE<",
            "u\tE$",
            "\u0209MUUj",
            "EPMQ",
            "]UhM",
            "Hd;Mt",
            "H$;Mt",
            "]UQE",
            "3!UB",
            "]UQh",
            "E]UQE",
            "E]Uh",
            "U3uj8hX",
            "UB(PMQ[",
            "M3\u048aQ",
            "M3\u048aQ",
            "E3\u024aH",
            "E3\u024aH",
            "%E3\u024aH",
            "BTE3\u024aH\tU",
            "MURE",
            "3\u0485u\u028bE",
            "EMQU",
            "3u\u02cbM",
            "|E]UQE",
            "E]UQE",
            "]UQE",
            "]UQj\"E",
            "U3uMQ",
            "]UQE",
            "3\u0245u\u058bE]U",
            "EMQh",
            "EUU}",
            "EPMQ",
            "]UQ}",
            "UAl+B",
            "Al0UE",
            "+HlQUB",
            "AlPU",
            "3\u0245u\u058bE]UQE",
            "E]UQE",
            "]UQE",
            "UAl+B",
            "Al0UE",
            "+HlQUB",
            "AlPU",
            "3\u0245u\u058bE]U",
            "ME]UQE",
            "E]UQE",
            "u\tE!",
            "u\tE ",
            "u\tE<",
            "u\tE$",
            "\u0209MUREP",
            "Al]UE",
            "P ]UQE",
            "E]U VWE",
            "U-EPh",
            "u/MQ",
            "UJhEB",
            ";M}GU",
            "t-My",
            "MAhUREP",
            "\ubb8bUUEH",
            "UEM;H",
            "CMQc",
            "M+MMM}u3u",
            "M\ub90bUBh",
            "MAhUREP=",
            "E_^]U",
            "Ad]UQE",
            "E]UQE",
            "EPMQ~",
            "\u044bE]%Hq",
            "t65@",
            "SUVt$",
            "u\t3_^][",
            "WVS\u0445t",
            "WVSu\t3_^][",
            "WVSZ",
            "WPSt",
            "u\"WVSu",
            "WVS\u040b_^][",
            "rb_io_puts",
            "rb_io_print",
            "rb_io_printf",
            "rb_io_addstr",
            "rb_include_module",
            "rb_mEnumerable",
            "rb_intern",
            "rb_define_alloc_func",
            "rb_define_singleton_method",
            "rb_define_method",
            "rb_undef_alloc_func",
            "rb_cObject",
            "rb_define_const",
            "rb_str_new2",
            "rb_define_module_function",
            "rb_define_class_under",
            "rb_eStandardError",
            "rb_define_module",
            "rb_uint2inum",
            "rb_string_value",
            "rb_num2ulong",
            "rb_scan_args",
            "rb_ary_push",
            "rb_ary_new2",
            "rb_warning",
            "ruby_debug",
            "rb_exc_raise",
            "rb_w32_snprintf",
            "rb_sys_fail",
            "rb_exc_new2",
            "rb_raise",
            "rb_check_type",
            "rb_str_resize",
            "rb_str_new",
            "rb_thread_schedule",
            "rb_str_buf_cat",
            "rb_str_buf_new",
            "rb_data_object_alloc",
            "ruby_xmalloc",
            "rb_gc_mark",
            "rb_copy_generic_ivar",
            "rb_singleton_class_attached",
            "ruby_safe_level",
            "rb_singleton_class_clone",
            "rb_cSymbol",
            "rb_cTrueClass",
            "rb_cFalseClass",
            "rb_cNilClass",
            "rb_cFixnum",
            "rb_ensure",
            "rb_yield",
            "rb_block_given_p",
            "rb_class_new_instance",
            "rb_funcall",
            "rb_respond_to",
            "rb_time_new",
            "rb_str_dup",
            "rb_int2inum",
            "rb_num2long",
            "rb_big2ulong",
            "rb_Integer",
            "rb_str_to_str",
            "rb_protect",
            "rb_warn",
            "rb_file_open",
            "rb_check_safe_obj",
            "rb_eArgError",
            "rb_obj_as_string",
            "rb_str_substr",
            "rb_eEOFError",
            "rb_lastline_set",
            "rb_rs",
            "rb_ary_new",
            "msvcrt-ruby18.dll",
            "inflate",
            "inflateEnd",
            "inflateReset",
            "deflate",
            "deflateEnd",
            "deflateReset",
            "zlibVersion",
            "adler32",
            "crc32",
            "get_crc_table",
            "zError",
            "deflateInit2_",
            "deflateCopy",
            "deflateInit_",
            "deflateParams",
            "deflateSetDictionary",
            "inflateInit2_",
            "inflateInit_",
            "inflateSync",
            "inflateSyncPoint",
            "inflateSetDictionary",
            "zlib.dll",
            "free",
            "memmove",
            "time",
            "memchr",
            "MSVCRT.dll",
            "_initterm",
            "malloc",
            "_adjust_fdiv",
            "DisableThreadLibraryCalls",
            "KERNEL32.dll",
            "zlib.so",
            "Init_zlib",
            "OS_UNKNOWN",
            "OS_RISCOS",
            "OS_QDOS",
            "OS_CPM",
            "OS_ZSYSTEM",
            "OS_VMCMS",
            "OS_WIN32",
            "OS_TOPS20",
            "OS_MACOS",
            "OS_OS2",
            "OS_ATARI",
            "OS_UNIX",
            "OS_VMS",
            "OS_AMIGA",
            "OS_MSDOS",
            "OS_CODE",
            "readlines",
            "each_line",
            "each",
            "readline",
            "gets",
            "ungetc",
            "each_byte",
            "readchar",
            "getc",
            "unused",
            "rewind",
            "puts",
            "print",
            "printf",
            "putc",
            "open",
            "tell",
            "sync=",
            "eof?",
            "comment=",
            "orig_name=",
            "mtime=",
            "lineno=",
            "lineno",
            "comment",
            "orig_name",
            "os_code",
            "level",
            "mtime",
            "to_io",
            "wrap",
            "GzipReader",
            "GzipWriter",
            "LengthError",
            "CRCError",
            "NoFooter",
            "GzipFile",
            "seek",
            "read",
            "write",
            "FINISH",
            "FULL_FLUSH",
            "SYNC_FLUSH",
            "NO_FLUSH",
            "MAX_MEM_LEVEL",
            "DEF_MEM_LEVEL",
            "MAX_WBITS",
            "DEFAULT_STRATEGY",
            "HUFFMAN_ONLY",
            "FILTERED",
            "DEFAULT_COMPRESSION",
            "BEST_COMPRESSION",
            "BEST_SPEED",
            "NO_COMPRESSION",
            "sync_point?",
            "sync",
            "inflate",
            "Inflate",
            "set_dictionary",
            "params",
            "flush",
            "clone",
            "initialize",
            "deflate",
            "Deflate",
            "UNKNOWN",
            "ASCII",
            "BINARY",
            "flush_next_out",
            "flush_next_in",
            "finish",
            "reset",
            "close",
            "ended?",
            "closed?",
            "stream_end?",
            "finished?",
            "adler",
            "data_type",
            "total_out",
            "total_in",
            "avail_in",
            "avail_out=",
            "avail_out",
            "ZStream",
            "ZLIB_VERSION",
            "1.1.4",
            "VERSION",
            "0.6.0",
            "crc_table",
            "crc32",
            "adler32",
            "zlib_version",
            "VersionError",
            "BufError",
            "MemError",
            "StreamError",
            "DataError",
            "NeedDict",
            "StreamEnd",
            "Error",
            "Zlib",
            "attempt to close unfinished zstream; reset forced.",
            "attempt to close uninitialized zstream; ignored.",
            "unknown zlib error %d: %s",
            "stream is not ready",
            "deflateParams() returned Z_BUF_ERROR",
            "closed gzip stream",
            "header is already written",
            "gzip footer is not written; broken gzip file",
            "Zlib::GzipWriter object must be closed explicitly.",
            "wrong number of arguments (0 for 1)",
            "invalid compressed data -- length error",
            "invalid compressed data -- crc error",
            "footer is not found",
            "unexpected end of file",
            "unknown flags 0x%02x",
            "encrypted gzip file is not supported",
            "multi-part gzip file is not supported",
            "unsupported compression method %d",
            "not in gzip format",
            "negative length %d given",
            "End of file reached",
            "00050;0L0R0X0i0o0u000000000000000",
            "1/141G1L1]1k1|1111111111",
            "2&2+2>2C2V2[2n2s222222222222",
            "3.333F3K3^3q3333333333",
            "4 4%484=4P4U4h4m44444444444\t5",
            "5!5&595>5Q5d5w55555555",
            "6\"656H6Y6f6k6x6}6666666666666",
            "7!7'7-7>7G7_7t77777777777",
            "8&8+8>8C8V8[8n8s888888888888",
            "9.939F9K9^9c9v9{99999999999",
            ":/:4:G:L:_:d:w:|::::::::::",
            ";0;5;H;M;`;e;x;};;;;;;;;;;;",
            "< <3<F<Y<l<",
            "<<<<<<<",
            "=*=@=f===>>N?\\?{??",
            "0M0W0r000000",
            "191Y1]1a1e1i1m1q1u1y1>2C229!:&:::",
            ";;;o<<<",
            "=)=D=Y===>>,?:?",
            "11F2,3>3L3u334d444475J5T558:Z;",
            "<n<3===@>X>>>",
            "000B1G1~111",
            "2$4)4a4f44",
            "6666>77",
            "9=9B99J:h::",
            ";4;P;~<==V>\\>>>>>l?",
            "40v000051:1^1d1111111p2u222T4|44556V7\\7H8899::;@;<==(>",
            "0000f1l1r1x1~1111111111111111111111",
            "2 2&2,22282>2D2J2P2V2\\2b2h2n2t2z222222222222222222222",
            "3$3,3A3F3K3P3Z3c3v3333333U4r444",
            "zlib.so",
            "NB10",
            "D:\\Prog\\WIN\\ruby\\build\\ext\\zlib\\zlib.pdb"
        ],
        "file": {
            "ADVAPI32.dll": "Library",
            "GDI32.dll": "Library",
            "KERNEL32.dll": "Library",
            "MSVCRT.dll": "Library",
            "USER32.dll": "Library",
            "WSOCK32.dll": "Library",
            "cygruby18.dll": "Library",
            "cygwin-ruby18.dll": "Library",
            "digest.so": "Executable",
            "digest/md5.so": "Executable",
            "efinkf.so": "Executable",
            "exerb_dummy_module.dll": "Library",
            "md5.so": "Executable",
            "msvcrt-ruby18.dll": "Library",
            "nkf.so": "Executable",
            "ruby.exe": "Executable",
            "socket.so": "Executable",
            "stringio.so": "Executable",
            "zlib.dll": "Library",
            "zlib.so": "Executable",
            "zlib1.dll": "Library"
        },
        "fuzzing": {
            "String too long": [
                "\t88888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888"
            ]
        },
        "ip": [
            "1.11.2.2",
            "1.8.2.1",
            "1.13.2.1",
            "1.100.2.6",
            "1.2.2.1",
            "1.6.2.2",
            "1.3.2.1"
        ],
        "url": [
            "http://www.ruby-lang.org/",
            "http://foo.bar.org/bla",
            "http://jbbs.livedoor.jp/#",
            "http://www.ruby-lang.org",
            "http://www.ruby-lang.org/ja/man/?cmd=viewname=net%2Fhttp.rb",
            "http://foobar.com/?a=\\11\\15",
            "http://foobar.com/?a=%09%0D",
            "http://myuser:mypass@my.rubysite.com/test.rbx",
            "http://www.ietf.org/rfc/rfc2616.txt.",
            "http://www.w3.org/TR/xmlschema-2/",
            "ftp://ftp.ruby-lang.org/pub/ruby/type=d",
            "http://my.rubysite.com/main.rbx?page=1",
            "http://",
            "http://jbbs.livedoor.jp/bbs/write.cgi/#",
            "http://foo.bar.com/foobar",
            "http://my.rubysite.com",
            "http://www.example.com/index.html",
            "http://foobar.com/?a=\\t\\r"
        ]
    },
    "time": "0:00:02.907932",
    "version": "6.0.3",
    "virustotal": {
        "positives": "",
        "total": ""
    },
    "yara_plugins": [
        {
            "packer_compiler_signatures.yar": "IsPE32"
        },
        {
            "packer_compiler_signatures.yar": "IsWindowsGUI"
        },
        {
            "packer_compiler_signatures.yar": "HasRichSignature"
        },
        {
            "crypto_signatures.yar": "Big_Numbers1"
        },
        {
            "crypto_signatures.yar": "CRC32_poly_Constant"
        },
        {
            "crypto_signatures.yar": "CRC32_table"
        },
        {
            "crypto_signatures.yar": "MD5_Constants"
        },
        {
            "crypto_signatures.yar": "BASE64_table"
        }
    ]
}
