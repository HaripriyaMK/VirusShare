{
    "docinfo": {
        "attributes": [],
        "behavior": {
            "Base64 Strings": "Base64-encoded str were detected, may be used to obfuscate str",
            "open": "May open a file",
            "output": "May write to a file"
        },
        "macro": "#!/usr/bin/perl\n# Sorts the output from LinSniffer 0.03 [BETA] by Mike Edulla <medulla@infosoc.com>\n\n$| = 1;\n\n$perl = \"/usr/bin/perl\";\n$argc = @ARGV;\n&PrintUsage if ( $argc < 1 );\n\n# I know, getopts(), but I don't wanna use any modules here..\nif ( $argc == 1 )\n{\n\tif ( $ARGV[0] eq \"-z\" ) {\n\t\t&ParseIt;\n\t}\n\telse\n\t{\n\t\t$file = $ARGV[0];\n\t\t&NoSuchFile unless ( -f $file );\n\n\t\t&PrintHeader;\n\t\t\n\t\tif ( $file =~ /\\.gz$/ ) {\n\t\t\tprint `zcat $file | $perl $0 -z | sort -u`;\n\t\t}\n\t\telse {\n\t\t\tprint `cat $file | $perl $0 -z | sort -u`;\n\t\t}\n\t\t\n\t\t&PrintFooter;\n\t}\n}\nelsif ( $argc == 2 ) \n{\n\tif ( $ARGV[0] eq \"-z\" && $ARGV[1] eq \"-d\" )\n\t{\n\t\t$dontGuess = 1;\n\t\t&ParseIt;\n\t}\n\telsif ( $ARGV[0] eq \"-d\" )\n\t{\n\t\t$file = $ARGV[1];\n\t\t&NoSuchFile unless ( -f $file );\n\n\t\t&PrintHeader;\n\t\tif ( $file =~ /.gz$/ ) {\n\t\t\tprint `zcat $file | $perl $0 -z -d | sort -u`;\n\t\t}\n\t\telse {\n\t\t\tprint `cat $file | $perl $0 -z -d | sort -u`;\n\t\t}\n\t\t&PrintFooter;\n\n\t}\n\telsif ( $ARGV[0] eq \"-z\" )\n\t{\n\t\t&ParseIt;\n\t}\n\telse { &PrintUsage; }\n}\nelse { &PrintUsage; }\t\t\n\n\n\nsub PrintUsage\n{\n\tprint \"Usage: $0 [-zd] inputFile\\n\";\n\tprint \"       -z    Read from stdin (disables uniq, sort, header/footer etc!)\\n\";\n\tprint \"       -d    Don't \\\"guess\\\" telnet passwords\\n\\n\";\n\texit(1);\n}\n\nsub ParseIt \n{\n\twhile ( &ReadLine )\n\t{\n\t\t# Continue if its not a \"start\" line.\n\t\tnext unless ( ($host, $port) = $line =~ m/[^\\s]+\\s=>\\s([^\\s]+)\\s\\[(\\d+)\\]/ );\n\t\t# Read in the next line\n\t\t&ReadLine;\n\t\tnext if ( $line =~ m/^-{5}/ );\n\t\tif ( $port == 21 || $port == 110 ) { &DoFaP; }\n\t\t\telsif ( $port == 143 ) { &DoIMAP; }\n\t\t\t\telsif ( $port == 23 && !$dontGuess ) { &DoTelnet; }\n\t\t\t\t\telse { &DoOthers; }\n\t}\n}\n\n\nsub ReadLine {\n\texit(1) unless ( $line = <STDIN> );\n\texit(0) if ( $line eq \"Exiting...\" );\n\t\n\treturn(1);\n}\n\nsub PrintIt\n{\n\tprint \"[\" . \" \" x (3 - length($port)) . $port . \"] \" . \" \" x (5 - length( $port<100 ? $port . \" \" : $port ) );\n\tprint $host . \" \" . \" \" x (27 - length($host));\n\tprint $user . \" \" . \" \" x (15 - length($user));\n\tprint $pass . \"\\n\";\n}\n\n# Handle \"unknown\" servies\nsub DoOthers\n{\n\t\n\t$data = $line;\n\twhile ( &ReadLine && $line !~ /^-{5}/ ) {$data .= $line;}\n\n\t# Remove the nav-key stuff.\n\t$data =~ s/OBOB//mg; \n\t$data =~ s/AHAH//mg;\n\t$data =~ s/AHAH//mg;\n\t$data =~ s/OAOA//mg;\n\t$data =~ s/\\[A\\[A//mg;\t\t#]]\n\t$data =~ s/\\[B\\[B//mg;\t\t#]]\n\t# Replace the newline chars with :\n\t$data =~ s/\\n/:/mg;\n\tchop($data);\n\n\tprint $port . \" \" . \" \" x (5 - length($port));\n\tprint $host . \" \" . \" \" x (27 - length($host));\n\tprint $data . \"\\n\";\n}\n\n\nsub DoFaP\n{\n\t# Read in the next line if its a AUTH line, exit if ReadLine failes\n\t\n\tif ( $line =~ /^AUTH/ ) {\n\t\texit(1) unless &ReadLine;\n\t}\n\n\t# Set the user variable. Return if not found.\n\treturn(0) unless ( ($user) = $line =~ /^USER\\ (.+)/ );\n\treturn(0) if ($user eq \"ftp\" || $user eq \"anonymous\" ); \n\t\n\t# Read in another line.\n\t&ReadLine;\n\n\t# Get the password, return if its not found\n\treturn(0) unless ( ($pass) = $line =~ /^PASS (.+)/ );\n\t\n\t&PrintIt;\n}\n\n\n# This one handle IMAPs (port 143)\nsub DoIMAP\n{\n\treturn(0) unless ( ($user, $pass) = $line =~ /LOGIN ([^\\s]+) ([^\\s]+)/ );\n\t&PrintIt;\n}\n\n\n# This one handle the telnets (port 23)\nsub DoTelnet\n{\n\t\n\tmy(@sep) = ( \"VT100!\", \"VT100\", \"vt100!\", \"vt100\", \"VT220P!\", \"VT220P\", \"VT200!\", \"VT220\", \"vt220!\", \"vt220\", \"\\$ANSI\\\"!\", \"ANSI!\", \"ANSI\", \"UNKNOWN!\", \"UNKNOWN\", \"CONSOLE!\", \"CONSOLE\", \"\\$!\",  \"!\" );\n\n\tfor ( $i=0; $sep[$i]; $i++ )\n\t{\n\t\tif ( ($user) = $line =~ /$sep[$i](.+)/ )\n\t\t{\n\n\t\t\texit(1) unless &ReadLine;\n\n\t\t\t# The line is one of linsniffs \"separator\" lines\n\t\t\treturn(0) if ( $line =~ m/^-{5}/ );\n\t\t\tchop($line);\n\n\t\t\t# Right now, we just except it to be the passwd\n\t\t\t# but in future versions, we'll check if it looks much like\n\t\t\t# the login, and if it does, we'll take the next one instead.\n\t\t\t$pass = $line;\n\n\t\t\t&PrintIt;\n\t\t}\n\t}\n}\n\nsub PrintHeader\n{\n\tprint `date`;\n\tprint `ls -l $file`;\n\tprint \"-\" x 70 . \"\\n\";\n}\n\nsub PrintFooter\n{\n\tprint \"-\" x 70 . \"\\n\";\n\tprint `date`;\n\tprint \"-\" x 67 . \"EOF\\n\";\n}\n\nsub NoSuchFile\n{\n\tprint \"Error: Cannot open file \\\"$file\\\" for reading.\\n\\n\";\n\texit(1);\n}\n\n\n#6516A4 \n##EOF##"
    },
    "filename": "VirusShare_464dc23cac477c43418eb8d3ef087065",
    "filesize": 4060,
    "filetype": "Perl script text executable",
    "hashes": {
        "md5": "464dc23cac477c43418eb8d3ef087065",
        "sha1": "7460f44436506a5dab51af1fa9efd1fa678f0b91",
        "sha256": "83dda44a69fc18a7f6533435e26387ffe49a52f6a3236e77d9e2e1e0d63f742c"
    },
    "peinfo": {},
    "strings": {
        "dump": [
            "#!/usr/bin/perl",
            "# Sorts the output from LinSniffer 0.03 [BETA] by Mike Edulla <medulla@infosoc.com>",
            "$| = 1;",
            "$perl = \"/usr/bin/perl\";",
            "$argc = @ARGV;",
            "&PrintUsage if ( $argc < 1 );",
            "# I know, getopts(), but I don't wanna use any modules here..",
            "if ( $argc == 1 )",
            "\tif ( $ARGV[0] eq \"-z\" ) {",
            "\t\t&ParseIt;",
            "\telse",
            "\t\t$file = $ARGV[0];",
            "\t\t&NoSuchFile unless ( -f $file );",
            "\t\t&PrintHeader;",
            "\t\tif ( $file =~ /\\.gz$/ ) {",
            "\t\t\tprint `zcat $file | $perl $0 -z | sort -u`;",
            "\t\telse {",
            "\t\t\tprint `cat $file | $perl $0 -z | sort -u`;",
            "\t\t&PrintFooter;",
            "elsif ( $argc == 2 ) ",
            "\tif ( $ARGV[0] eq \"-z\" && $ARGV[1] eq \"-d\" )",
            "\t\t$dontGuess = 1;",
            "\t\t&ParseIt;",
            "\telsif ( $ARGV[0] eq \"-d\" )",
            "\t\t$file = $ARGV[1];",
            "\t\t&NoSuchFile unless ( -f $file );",
            "\t\t&PrintHeader;",
            "\t\tif ( $file =~ /.gz$/ ) {",
            "\t\t\tprint `zcat $file | $perl $0 -z -d | sort -u`;",
            "\t\telse {",
            "\t\t\tprint `cat $file | $perl $0 -z -d | sort -u`;",
            "\t\t&PrintFooter;",
            "\telsif ( $ARGV[0] eq \"-z\" )",
            "\t\t&ParseIt;",
            "\telse { &PrintUsage; }",
            "else { &PrintUsage; }\t\t",
            "sub PrintUsage",
            "\tprint \"Usage: $0 [-zd] inputFile\\n\";",
            "\tprint \"       -z    Read from stdin (disables uniq, sort, header/footer etc!)\\n\";",
            "\tprint \"       -d    Don't \\\"guess\\\" telnet passwords\\n\\n\";",
            "\texit(1);",
            "sub ParseIt ",
            "\twhile ( &ReadLine )",
            "\t\t# Continue if its not a \"start\" line.",
            "\t\tnext unless ( ($host, $port) = $line =~ m/[^\\s]+\\s=>\\s([^\\s]+)\\s\\[(\\d+)\\]/ );",
            "\t\t# Read in the next line",
            "\t\t&ReadLine;",
            "\t\tnext if ( $line =~ m/^-{5}/ );",
            "\t\tif ( $port == 21 || $port == 110 ) { &DoFaP; }",
            "\t\t\telsif ( $port == 143 ) { &DoIMAP; }",
            "\t\t\t\telsif ( $port == 23 && !$dontGuess ) { &DoTelnet; }",
            "\t\t\t\t\telse { &DoOthers; }",
            "sub ReadLine {",
            "\texit(1) unless ( $line = <STDIN> );",
            "\texit(0) if ( $line eq \"Exiting...\" );",
            "\treturn(1);",
            "sub PrintIt",
            "\tprint \"[\" . \" \" x (3 - length($port)) . $port . \"] \" . \" \" x (5 - length( $port<100 ? $port . \" \" : $port ) );",
            "\tprint $host . \" \" . \" \" x (27 - length($host));",
            "\tprint $user . \" \" . \" \" x (15 - length($user));",
            "\tprint $pass . \"\\n\";",
            "# Handle \"unknown\" servies",
            "sub DoOthers",
            "\t$data = $line;",
            "\twhile ( &ReadLine && $line !~ /^-{5}/ ) {$data .= $line;}",
            "\t# Remove the nav-key stuff.",
            "\t$data =~ s/OBOB//mg; ",
            "\t$data =~ s/AHAH//mg;",
            "\t$data =~ s/AHAH//mg;",
            "\t$data =~ s/OAOA//mg;",
            "\t$data =~ s/\\[A\\[A//mg;\t\t#]]",
            "\t$data =~ s/\\[B\\[B//mg;\t\t#]]",
            "\t# Replace the newline chars with :",
            "\t$data =~ s/\\n/:/mg;",
            "\tchop($data);",
            "\tprint $port . \" \" . \" \" x (5 - length($port));",
            "\tprint $host . \" \" . \" \" x (27 - length($host));",
            "\tprint $data . \"\\n\";",
            "sub DoFaP",
            "\t# Read in the next line if its a AUTH line, exit if ReadLine failes",
            "\tif ( $line =~ /^AUTH/ ) {",
            "\t\texit(1) unless &ReadLine;",
            "\t# Set the user variable. Return if not found.",
            "\treturn(0) unless ( ($user) = $line =~ /^USER\\ (.+)/ );",
            "\treturn(0) if ($user eq \"ftp\" || $user eq \"anonymous\" ); ",
            "\t# Read in another line.",
            "\t&ReadLine;",
            "\t# Get the password, return if its not found",
            "\treturn(0) unless ( ($pass) = $line =~ /^PASS (.+)/ );",
            "\t&PrintIt;",
            "# This one handle IMAPs (port 143)",
            "sub DoIMAP",
            "\treturn(0) unless ( ($user, $pass) = $line =~ /LOGIN ([^\\s]+) ([^\\s]+)/ );",
            "\t&PrintIt;",
            "# This one handle the telnets (port 23)",
            "sub DoTelnet",
            "\tmy(@sep) = ( \"VT100!\", \"VT100\", \"vt100!\", \"vt100\", \"VT220P!\", \"VT220P\", \"VT200!\", \"VT220\", \"vt220!\", \"vt220\", \"\\$ANSI\\\"!\", \"ANSI!\", \"ANSI\", \"UNKNOWN!\", \"UNKNOWN\", \"CONSOLE!\", \"CONSOLE\", \"\\$!\",  \"!\" );",
            "\tfor ( $i=0; $sep[$i]; $i++ )",
            "\t\tif ( ($user) = $line =~ /$sep[$i](.+)/ )",
            "\t\t\texit(1) unless &ReadLine;",
            "\t\t\t# The line is one of linsniffs \"separator\" lines",
            "\t\t\treturn(0) if ( $line =~ m/^-{5}/ );",
            "\t\t\tchop($line);",
            "\t\t\t# Right now, we just except it to be the passwd",
            "\t\t\t# but in future versions, we'll check if it looks much like",
            "\t\t\t# the login, and if it does, we'll take the next one instead.",
            "\t\t\t$pass = $line;",
            "\t\t\t&PrintIt;",
            "sub PrintHeader",
            "\tprint `date`;",
            "\tprint `ls -l $file`;",
            "\tprint \"-\" x 70 . \"\\n\";",
            "sub PrintFooter",
            "\tprint \"-\" x 70 . \"\\n\";",
            "\tprint `date`;",
            "\tprint \"-\" x 67 . \"EOF\\n\";",
            "sub NoSuchFile",
            "\tprint \"Error: Cannot open file \\\"$file\\\" for reading.\\n\\n\";",
            "\texit(1);",
            "#6516A4 ",
            "##EOF##"
        ],
        "file": {},
        "fuzzing": {},
        "ip": [],
        "url": []
    },
    "time": "0:00:00.280509",
    "version": "6.0.3",
    "virustotal": {
        "positives": "",
        "total": ""
    },
    "yara_plugins": []
}
